(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.Cucumber = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
function Cucumber(featureSource, supportCodeInitializer, options) {
  var configuration = Cucumber.VolatileConfiguration(featureSource, supportCodeInitializer, options);
  var runtime       = Cucumber.Runtime(configuration);
  return runtime;
}

Cucumber.Api                   = require('./cucumber/api');
Cucumber.Ast                   = require('./cucumber/ast');
Cucumber.Cli                   = require('./cucumber/cli');
Cucumber.Debug                 = require('./cucumber/debug'); // Untested namespace
Cucumber.Listener              = require('./cucumber/listener');
Cucumber.Parser                = require('./cucumber/parser');
Cucumber.Runtime               = require('./cucumber/runtime');
Cucumber.Status                = require('./cucumber/status');
Cucumber.SupportCode           = require('./cucumber/support_code');
Cucumber.TagGroupParser        = require('./cucumber/tag_group_parser');
Cucumber.Type                  = require('./cucumber/type');
Cucumber.Util                  = require('./cucumber/util');
Cucumber.VolatileConfiguration = require('./cucumber/volatile_configuration');

Cucumber.VERSION               = require('../package.json').version;

module.exports                 = Cucumber;

},{"../package.json":247,"./cucumber/api":2,"./cucumber/ast":4,"./cucumber/cli":24,"./cucumber/debug":25,"./cucumber/listener":28,"./cucumber/parser":37,"./cucumber/runtime":38,"./cucumber/status":46,"./cucumber/support_code":47,"./cucumber/tag_group_parser":54,"./cucumber/type":55,"./cucumber/util":59,"./cucumber/volatile_configuration":66}],2:[function(require,module,exports){
var Api        = {};
Api.Scenario   = require('./api/scenario');
module.exports = Api;

},{"./api/scenario":3}],3:[function(require,module,exports){
(function (Buffer){
function Scenario(astTreeWalker, astScenario) {
  var Cucumber = require('../../cucumber');

  function isStream(value) {
    return value && typeof value === 'object' && typeof value.pipe === 'function';
  }

  function attachStream(stream, mimeType, callback) {
    var buffers = [];

    stream.on('data', function (chunk) {
      buffers.push(chunk);
    });
    stream.on('end', function () {
      astTreeWalker.attach(Buffer.concat(buffers).toString(), mimeType);
      callback();
    });
  }

  function attachBuffer(buffer, mimeType, callback) {
    astTreeWalker.attach(buffer.toString(), mimeType);
    if (callback) callback();
  }

  var self = {
    getKeyword:     function getKeyword()     { return astScenario.getKeyword(); },
    getName:        function getName()        { return astScenario.getName(); },
    getDescription: function getDescription() { return astScenario.getDescription(); },
    getUri:         function getUri()         { return astScenario.getUri(); },
    getLine:        function getLine()        { return astScenario.getLine(); },
    getTags:        function getTags()        { return astScenario.getTags(); },
    isSuccessful:   function isSuccessful()   { return astTreeWalker.getScenarioStatus() === Cucumber.Status.PASSED; },
    isFailed:       function isFailed()       { return astTreeWalker.getScenarioStatus() === Cucumber.Status.FAILED; },
    isPending:      function isPending()      { return astTreeWalker.getScenarioStatus() === Cucumber.Status.PENDING; },
    isUndefined:    function isUndefined()    { return astTreeWalker.getScenarioStatus() === Cucumber.Status.UNDEFINED; },
    isSkipped:      function isSkipped()      { return astTreeWalker.getScenarioStatus() === Cucumber.Status.SKIPPED; },
    getException:   function getException()   { return astTreeWalker.getScenarioFailureException(); },
    getAttachments: function getAttachments() { return astTreeWalker.getAttachments(); },

    attach: function attach(data, mimeType, callback) {
      if (isStream(data)) {
        if (!mimeType)
          throw Error(Scenario.ATTACH_MISSING_MIME_TYPE_ARGUMENT);
        if (!callback)
          throw Error(Scenario.ATTACH_MISSING_CALLBACK_ARGUMENT_FOR_STREAM_READABLE);

        attachStream(data, mimeType, callback);
      }
      else if (Buffer && Buffer.isBuffer(data)) {
        if (!mimeType)
          throw Error(Scenario.ATTACH_MISSING_MIME_TYPE_ARGUMENT);

        attachBuffer(data, mimeType, callback);
      }
      else {
        if (!mimeType)
          mimeType = Scenario.DEFAULT_TEXT_MIME_TYPE;

        astTreeWalker.attach(data.toString(), mimeType);
        if (callback) callback();
      }
    }
  };

  return self;
}

Scenario.DEFAULT_TEXT_MIME_TYPE = 'text/plain';
Scenario.ATTACH_MISSING_MIME_TYPE_ARGUMENT = 'Cucumber.Api.Scenario.attach() expects a mimeType';
Scenario.ATTACH_MISSING_CALLBACK_ARGUMENT_FOR_STREAM_READABLE = 'Cucumber.Api.Scenario.attach() expects a callback when data is a stream.Readable';

module.exports = Scenario;

}).call(this,require("buffer").Buffer)

},{"../../cucumber":1,"buffer":69}],4:[function(require,module,exports){
var Ast             = {};
Ast.Assembler       = require('./ast/assembler');
Ast.Background      = require('./ast/background');
Ast.DataTable       = require('./ast/data_table');
Ast.DocString       = require('./ast/doc_string');
Ast.Feature         = require('./ast/feature');
Ast.Features        = require('./ast/features');
Ast.Filter          = require('./ast/filter');
Ast.Scenario        = require('./ast/scenario');
Ast.ScenarioOutline = require('./ast/scenario_outline');
Ast.OutlineStep     = require('./ast/outline_step');
Ast.Examples        = require('./ast/examples');
Ast.Step            = require('./ast/step');
Ast.HookStep        = require('./ast/hook_step');
Ast.Tag             = require('./ast/tag');
module.exports      = Ast;

},{"./ast/assembler":5,"./ast/background":6,"./ast/data_table":7,"./ast/doc_string":9,"./ast/examples":10,"./ast/feature":11,"./ast/features":12,"./ast/filter":13,"./ast/hook_step":18,"./ast/outline_step":19,"./ast/scenario":20,"./ast/scenario_outline":21,"./ast/step":22,"./ast/tag":23}],5:[function(require,module,exports){
function Assembler(features, filter) {
  var currentFeature, currentFeatureElement, currentStep, suggestedFeature;
  var stashedTags = [];

  var self = {
    setCurrentFeature: function setCurrentFeature(feature) {
      currentFeature = feature;
      self.setCurrentFeatureElement(undefined);
    },

    getCurrentFeature: function getCurrentFeature() {
      return currentFeature;
    },

    setCurrentFeatureElement: function setCurrentFeatureElement(featureElement) {
      currentFeatureElement = featureElement;
      self.setCurrentStep(undefined);
    },

    getCurrentFeatureElement: function getCurrentFeatureElement() {
      return currentFeatureElement;
    },

    setCurrentStep: function setCurrentStep(step) {
      currentStep = step;
    },

    getCurrentStep: function getCurrentStep() {
      return currentStep;
    },

    stashTag: function stashTag(tag) {
      stashedTags.push(tag);
    },

    revealTags: function revealTags() {
      var revealedTags = stashedTags;
      stashedTags      = [];
      return revealedTags;
    },

    applyCurrentFeatureTagsToElement: function applyCurrentFeatureTagsToElement(element) {
      var currentFeature = self.getCurrentFeature();
      var featureTags    = currentFeature.getTags();
      element.addInheritedTags(featureTags);
    },

    applyStashedTagsToElement: function applyStashedTagsToElement(element) {
      var revealedTags = self.revealTags();
      element.addTags(revealedTags);
    },

    applyStashedTagsToExamples: function applyStashedTagsToExamples(examples) {
      var revealedTags = self.revealTags();
      examples.setTags(revealedTags);
    },

    insertBackground: function insertBackground(background) {
      self.setCurrentFeatureElement(background);
      var currentFeature = self.getCurrentFeature();
      currentFeature.setBackground(background);
    },

    insertDataTableRow: function insertDataTableRow(dataTableRow) {
      var currentStep = self.getCurrentStep();
      currentStep.attachDataTableRow(dataTableRow);
    },

    insertDocString: function insertDocString(docString) {
      var currentStep = self.getCurrentStep();
      currentStep.attachDocString(docString);
    },

    insertFeature: function insertFeature(feature) {
      self.tryEnrollingSuggestedFeature();
      self.applyStashedTagsToElement(feature);
      self.setCurrentFeature(feature);
      self.suggestFeature(feature);
    },

    insertScenario: function insertScenario(scenario) {
      self.applyCurrentFeatureTagsToElement(scenario);
      self.applyStashedTagsToElement(scenario);
      self.setCurrentFeatureElement(scenario);
      var currentFeature = self.getCurrentFeature();
      currentFeature.addFeatureElement(scenario);
    },

    insertExamples: function insertExamples(examples) {
      var currentFeatureElement = self.getCurrentFeatureElement();
      if (!currentFeatureElement.isScenarioOutline())
        throw new Error('Examples are allowed inside scenario outlines only');
      self.applyStashedTagsToExamples(examples);
      currentFeatureElement.addExamples(examples);
      self.setCurrentStep(examples);
    },

    insertStep: function insertStep(step) {
      self.setCurrentStep(step);
      var currentFeatureElement = self.getCurrentFeatureElement();
      currentFeatureElement.addStep(step);
    },

    insertTag: function insertTag(tag) {
      self.stashTag(tag);
    },

    finish: function finish() {
      var currentFeature = self.getCurrentFeature();
      if (currentFeature) {
        currentFeature.convertScenarioOutlinesToScenarios();
        currentFeature.filterScenarios(filter.isElementEnrolled);
      }
      self.tryEnrollingSuggestedFeature();
    },

    suggestFeature: function suggestFeature(feature) {
      suggestedFeature = feature;
    },

    isSuggestedFeatureEnrollable: function isSuggestedFeatureEnrollable() {
      var enrollable = suggestedFeature && (suggestedFeature.hasFeatureElements() || filter.isElementEnrolled(suggestedFeature));
      return enrollable;
    },

    tryEnrollingSuggestedFeature: function tryEnrollingSuggestedFeature() {
      if (self.isSuggestedFeatureEnrollable())
        self.enrollSuggestedFeature();
    },

    enrollSuggestedFeature: function enrollSuggestedFeature() {
      features.addFeature(suggestedFeature);
      suggestedFeature = null;
    }
  };
  return self;
}

module.exports = Assembler;

},{}],6:[function(require,module,exports){
function Background(keyword, name, description, uri, line) {
  var Cucumber = require('../../cucumber');

  var steps = Cucumber.Type.Collection();

  var self = {
    getKeyword: function getKeyword() {
      return keyword;
    },

    getName: function getName() {
      return name;
    },

    getDescription: function getDescription() {
      return description;
    },

    getUri: function getUri() {
      return uri;
    },

    getLine: function getLine() {
      return line;
    },

    addStep: function addStep(step) {
      var lastStep = self.getLastStep();
      step.setPreviousStep(lastStep);
      steps.add(step);
 	  },

    getLastStep: function getLastStep() {
      return steps.getLast();
    },

 	  getSteps: function getSteps() {
      return steps;
 	  }
  };
  return self;
}

module.exports = Background;

},{"../../cucumber":1}],7:[function(require,module,exports){
function DataTable() {
  var Cucumber = require('../../cucumber');
  var _ = require('lodash');

  var rowsCollection = Cucumber.Type.Collection();

  var self = {
    attachRow: function attachRow(row) {
      rowsCollection.add(row);
    },

    getContents: function getContents() {
      return self;
    },

    getRows: function getRows() {
      var newRows = Cucumber.Type.Collection();
      rowsCollection.forEach(function (row) {
        newRows.add(row);
      });
      return newRows;
    },

    rows: function rows() {
      var rawRows = [];
      rowsCollection.forEach(function (row, index) {
        if (index > 0) {
          rawRows.push(row.raw());
        }
      });
      return rawRows;
    },

    rowsHash: function rowsHash() {
      var rows = self.raw();
      var everyRowHasTwoColumns = rows.every(function (row) {
        return row.length === 2;
      });

      if (!everyRowHasTwoColumns) {
        throw new Error('rowsHash was called on a data table with more than two columns');
      }

      return _.fromPairs(rows);
    },

    raw: function raw() {
      var rawRows = [];
      rowsCollection.forEach(function (row) {
        rawRows.push(row.raw());
      });
      return rawRows;
    },

    hashes: function hashes() {
      var raw              = self.raw();
      var hashDataTable    = Cucumber.Type.HashDataTable(raw);
      var rawHashDataTable = hashDataTable.raw();
      return rawHashDataTable;
    }
  };
  return self;
}

DataTable.Row  = require('./data_table/row');

module.exports = DataTable;

},{"../../cucumber":1,"./data_table/row":8,"lodash":241}],8:[function(require,module,exports){
function Row(cells, uri, line) {
  var self = {
    raw: function raw() {
      return [].concat(cells);
    },

    getLine: function getLine() {
      return line;
    }
  };
  return self;
}

module.exports = Row;

},{}],9:[function(require,module,exports){
function DocString(contentType, contents, uri, line) {
  var self = {
    getContents: function getContents() {
      return contents;
    },

    getContentType: function getContentType() {
      return contentType;
    },

    getUri: function getUri() {
      return uri;
    },

    getLine: function getLine() {
      return line;
    }
  };
  return self;
}

module.exports = DocString;

},{}],10:[function(require,module,exports){
function Examples(keyword, name, description, line) {
  var Cucumber = require('../../cucumber');
  var dataTable;
  var tags = [];

  var self = {
    setTags: function addTags(newTags) {
      tags = newTags;
    },

    getTags: function getTags() {
      return tags;
    },

    getKeyword: function getKeyword() {
      return keyword;
    },

    getName: function getName() {
      return name;
    },

    getDescription: function getDescription() {
      return description;
    },

    getLine: function getLine() {
      return line;
    },

    getDataTable: function getDataTable() {
      return dataTable;
    },

    hasDataTable: function hasDataTable() {
      return !!dataTable;
    },

    attachDataTable: function attachDataTable(_dataTable) {
      dataTable = _dataTable;
    },

    attachDataTableRow: function attachDataTableRow(row) {
      self.ensureDataTableIsAttached();
      var dataTable = self.getDataTable();
      dataTable.attachRow(row);
    },

    ensureDataTableIsAttached: function ensureDataTableIsAttached() {
      var dataTable = self.getDataTable();
      if (!dataTable) {
        dataTable = Cucumber.Ast.DataTable();
        self.attachDataTable(dataTable);
      }
    }
  };

  return self;
}

module.exports = Examples;

},{"../../cucumber":1}],11:[function(require,module,exports){
function Feature(keyword, name, description, uri, line) {
  var Cucumber = require('../../cucumber');

  var background;
  var featureElements = Cucumber.Type.Collection();
  var tags      = [];

  var self = {
    getKeyword: function getKeyword() {
      return keyword;
    },

    getName: function getName() {
      return name;
    },

    getDescription: function getDescription() {
      return description;
    },

    getUri: function getUri() {
      return uri;
    },

    getLine: function getLine() {
      return line;
    },

    setBackground: function setBackground(newBackground) {
      background = newBackground;
    },

    getBackground: function getBackground() {
      return background;
    },

    hasBackground: function hasBackground() {
      return (typeof(background) !== 'undefined');
    },

    addFeatureElement: function addFeatureElement(featureElement) {
      var background = self.getBackground();
      featureElement.setBackground(background);
      featureElements.add(featureElement);
    },

    insertFeatureElement: function insertFeatureElement(index, featureElement) {
      var background = self.getBackground();
      featureElement.setBackground(background);
      featureElements.insert(index, featureElement);
    },

    convertScenarioOutlinesToScenarios: function convertScenarioOutlinesToScenarios() {
      featureElements.forEach(function (featureElement) {
        if (featureElement.isScenarioOutline()) {
          self.convertScenarioOutlineToScenarios(featureElement);
        }
      });
    },

    convertScenarioOutlineToScenarios: function convertScenarioOutlineToScenarios(scenarioOutline) {
      var scenarios = scenarioOutline.buildScenarios();
      var scenarioOutlineIndex = featureElements.indexOf(scenarioOutline);
      featureElements.removeAtIndex(scenarioOutlineIndex);
      scenarios.forEach(function (scenario, index) {
        self.insertFeatureElement(scenarioOutlineIndex + index, scenario);
      });
    },

    getFeatureElements: function getFeatureElements() {
      return featureElements;
    },

    getLastFeatureElement: function getLastFeatureElement() {
      return featureElements.getLast();
    },

    hasFeatureElements: function hasFeatureElements() {
      return featureElements.length() > 0;
    },

    addTags: function setTags(newTags) {
      tags = tags.concat(newTags);
    },

    getTags: function getTags() {
      return tags;
    },

    acceptVisitor: function acceptVisitor(visitor, callback) {
      self.instructVisitorToVisitBackground(visitor, function () {
        self.instructVisitorToVisitScenarios(visitor, callback);
      });
    },

    instructVisitorToVisitBackground: function instructVisitorToVisitBackground(visitor, callback) {
      if (self.hasBackground()) {
        var background = self.getBackground();
        visitor.visitBackground(background, callback);
      } else {
        callback();
      }
    },

    instructVisitorToVisitScenarios: function instructVisitorToVisitScenarios(visitor, callback) {
      featureElements.asyncForEach(function (scenario, iterate) {
        visitor.visitScenario(scenario, iterate);
      }, callback);
    },

    filterScenarios: function filterScenarios(predicate) {
      featureElements = featureElements.filter(predicate);
    }
  };
  return self;
}

module.exports = Feature;

},{"../../cucumber":1}],12:[function(require,module,exports){
function Features() {
  var Cucumber = require('../../cucumber');

  var features = Cucumber.Type.Collection();

  var self = {
    addFeature: function addFeature(feature) {
      features.add(feature);
    },

    getFeatures: function getFeatures() {
      return features;
    },

    getLastFeature: function getLastFeature() {
      return features.getLast();
    },

    acceptVisitor: function acceptVisitor(visitor, callback) {
      features.asyncForEach(function (feature, iterate) {
        visitor.visitFeature(feature, iterate);
      }, callback);
    }
  };
  return self;
}

module.exports = Features;

},{"../../cucumber":1}],13:[function(require,module,exports){
var _ = require('lodash');

function Filter(rules) {
  var self = {
    isElementEnrolled: function isElementEnrolled(element) {
      var enrolled = _.every(rules, function (rule) {
        return rule.isSatisfiedByElement(element);
      });
      return enrolled;
    }
  };
  return self;
}

Filter.AnyOfTagsRule          = require('./filter/any_of_tags_rule');
Filter.AnyOfNamesRule         = require('./filter/any_of_names_rule');
Filter.ElementMatchingTagSpec = require('./filter/element_matching_tag_spec');
Filter.ScenarioAtLineRule     = require('./filter/scenario_at_line_rule');

module.exports = Filter;

},{"./filter/any_of_names_rule":14,"./filter/any_of_tags_rule":15,"./filter/element_matching_tag_spec":16,"./filter/scenario_at_line_rule":17,"lodash":241}],14:[function(require,module,exports){
var _ = require('lodash');

function AnyOfNamesRule(names) {
  var self = {
    isSatisfiedByElement: function isSatisfiedByElement(element) {
      if (names.length === 0) {
        return true;
      }
      var satisfied = _.some(names, function (name) {
        return element.getName().match(name);
      });
      return satisfied;
    }
  };
  return self;
}

module.exports = AnyOfNamesRule;

},{"lodash":241}],15:[function(require,module,exports){
var _ = require('lodash');

function AnyOfTagsRule(tags) {
  var Cucumber = require('../../../cucumber');

  var self = {
    isSatisfiedByElement: function isSatisfiedByElement(element) {
      var satisfied = _.some(tags, function (tag) {
        var spec = Cucumber.Ast.Filter.ElementMatchingTagSpec(tag);
        return spec.isMatching(element);
      });
      return satisfied;
    }
  };
  return self;
}

module.exports = AnyOfTagsRule;

},{"../../../cucumber":1,"lodash":241}],16:[function(require,module,exports){
var _ = require('lodash');

function ElementMatchingTagSpec(tagName) {
  var self = {
    isMatching: function isMatching(element) {
      var elementTags = element.getTags();
      var matching;
      if (self.isExpectingTag())
        matching = _.some(elementTags, self.isTagSatisfying);
      else
        matching = _.every(elementTags, self.isTagSatisfying);
      return matching;
    },

    isTagSatisfying: function isTagSatisfying(tag) {
      var checkedTagName = tag.getName();
      var satisfying;
      if (self.isExpectingTag())
        satisfying = checkedTagName === tagName;
      else {
        var negatedCheckedTagName = ElementMatchingTagSpec.NEGATION_CHARACTER + checkedTagName;
        satisfying = negatedCheckedTagName !== tagName;
      }
      return satisfying;
    },

    isExpectingTag: function isExpectingTag() {
      var expectingTag = tagName[0] !== ElementMatchingTagSpec.NEGATION_CHARACTER;
      return expectingTag;
    }
  };
  return self;
}

ElementMatchingTagSpec.NEGATION_CHARACTER = '~';

module.exports = ElementMatchingTagSpec;

},{"lodash":241}],17:[function(require,module,exports){
function ScenarioAtLineRule(suppliedPaths) {
  var Cucumber = require('../../../cucumber');
  var fs = require('fs');
  var _ = require('lodash');

  var mapping = {};
  suppliedPaths.forEach(function(path){
    var matches = Cucumber.Cli.Configuration.FEATURE_FILENAME_AND_LINENUM_REGEXP.exec(path);
    var specifiedLineNums = matches && matches[2];
    if (specifiedLineNums) {
      var realPath = fs.realpathSync(matches[1]);
      if (!mapping[realPath]) {
        mapping[realPath] = [];
      }
      specifiedLineNums.split(':').forEach(function (lineNum) {
        mapping[realPath].push(parseInt(lineNum));
      });
    }
  });

  var self = {
    isSatisfiedByElement: function isSatisfiedByElement(element) {
      if (element.getUri && element.getLine && element.getScenarioOutlineLine) {
        var lines = mapping[element.getUri()];
        if (lines) {
          return _.includes(lines, element.getLine()) || _.includes(lines, element.getScenarioOutlineLine());
        }
        return true;
      }
      return true;
    }
  };
  return self;
}

module.exports = ScenarioAtLineRule;

},{"../../../cucumber":1,"fs":67,"lodash":241}],18:[function(require,module,exports){
function HookStep(keyword) {
  var Cucumber = require('../../cucumber');
  var self = Cucumber.Ast.Step(keyword, HookStep.NAME, HookStep.UNDEFINED_URI, HookStep.UNDEFINED_LINE);
  var hook;

  self.isHidden = function isHidden() {
    return true;
  };

  self.hasUri = function hasUri() {
    return false;
  };

  self.getHook = function getHook() {
    return hook;
  };

  self.setHook = function setHook(newHook) {
    hook = newHook;
  };

  return self;
}

HookStep.NAME           = undefined;
HookStep.UNDEFINED_URI  = undefined;
HookStep.UNDEFINED_LINE = undefined;

module.exports = HookStep;

},{"../../cucumber":1}],19:[function(require,module,exports){
function OutlineStep(keyword, name, uri, line) {
  var Cucumber = require('../../cucumber');
  var self = Cucumber.Ast.Step(keyword, name, uri, line);

  self.setOriginalStep = function setOriginalStep(originalStep) {
    self.originalStep = originalStep;
  };

  self.getOriginalStep = function getOriginalStep() {
    return self.originalStep;
  };

  self.isOutlineStep = function isOutlineStep() {
    return true;
  };

  return self;
}

module.exports = OutlineStep;

},{"../../cucumber":1}],20:[function(require,module,exports){
function Scenario(keyword, name, description, uri, line, scenarioOutlineLine) {
  var Cucumber = require('../../cucumber');

  var background;
  var steps = Cucumber.Type.Collection();
  var inheritedTags = [];
  var tags  = [];

  var self = {
    isScenarioOutline: function isScenarioOutline() {
      return false;
    },

    setBackground: function setBackground(newBackground) {
      background = newBackground;
    },

    getKeyword: function getKeyword() {
      return keyword;
    },

    getName: function getName() {
      return name;
    },

    getDescription: function getDescription() {
      return description;
    },

    getUri: function getUri() {
      return uri;
    },

    getLine: function getLine() {
      return line;
    },

    getScenarioOutlineLine: function getLine() {
      return scenarioOutlineLine;
    },

    getBackground: function getBackground() {
      return background;
    },

    addStep: function addStep(step) {
      var lastStep = self.getLastStep();
      step.setPreviousStep(lastStep);
      steps.add(step);
    },

    getLastStep: function getLastStep() {
      return steps.getLast();
    },

    setSteps: function setSteps(newSteps) {
      steps = newSteps;
    },

    getSteps: function getSteps() {
      return steps;
    },

    addTags: function addTags(newTags) {
      tags = tags.concat(newTags);
    },

    addInheritedTags: function addInheritedTags(newTags) {
      inheritedTags = tags.concat(newTags);
    },

    getTags: function getTags() {
      return tags.concat(inheritedTags);
    },

    getOwnTags: function getOwnTags() {
      return tags;
    },

    acceptVisitor: function acceptVisitor(visitor, callback) {
      self.instructVisitorToVisitBackgroundSteps(visitor, function () {
        self.instructVisitorToVisitScenarioSteps(visitor, callback);
      });
    },

    instructVisitorToVisitBackgroundSteps: function instructVisitorToVisitBackgroundSteps(visitor, callback) {
      var background = self.getBackground();
      if (typeof(background) !== 'undefined') {
        var steps = background.getSteps();
        self.instructVisitorToVisitSteps(visitor, steps, callback);
      } else {
        callback();
      }
    },

    instructVisitorToVisitScenarioSteps: function instructVisitorToVisitScenarioSteps(visitor, callback) {
      self.instructVisitorToVisitSteps(visitor, steps, callback);
    },

    instructVisitorToVisitSteps: function instructVisitorToVisitSteps(visitor, steps, callback) {
      steps.asyncForEach(function (step, iterate) {
        visitor.visitStep(step, iterate);
      }, callback);
    }
  };
  return self;
}

module.exports = Scenario;

},{"../../cucumber":1}],21:[function(require,module,exports){
function ScenarioOutline(keyword, name, description, uri, line) {
  var Cucumber = require('../../cucumber');
  var _ = require('lodash');
  var self = Cucumber.Ast.Scenario(keyword, name, description, uri, line);
  var examplesCollection = Cucumber.Type.Collection();

  self.isScenarioOutline = function () {
    return true;
  };

  self.addExamples = function (examples) {
    examplesCollection.add(examples);
  };

  function buildScenario(example, rowLine, examplesTags) {
    var newName = self.applyExampleRowToScenarioName(example, name);
    var newSteps = self.applyExampleRowToSteps(example, self.getSteps());
    var subScenario = Cucumber.Ast.Scenario(keyword, newName, description, uri, rowLine, line);
    subScenario.setSteps(newSteps);
    subScenario.addTags(self.getTags());
    subScenario.addTags(examplesTags);
    return subScenario;
  }

  self.buildScenarios = function () {
    var scenarios = Cucumber.Type.Collection();

    examplesCollection.forEach(function (examples) {
      var exampleRows = examples.getDataTable().getRows();
      var keys = exampleRows.shift().raw();
      var tags = examples.getTags();
      exampleRows.forEach(function (exampleRow) {
        var data = exampleRow.raw();
        var rowLine = exampleRow.getLine();
        var hash = _.zipObject(keys, data);
        scenarios.add(buildScenario(hash, rowLine, tags));
      });
    });

    return scenarios;
  };

  self.getExamples = function () {
    return examplesCollection;
  };

  function iterateExampleValues(example, callback) {
    for (var hashKey in example) {
      if (Object.prototype.hasOwnProperty.call(example, hashKey)) {
        var findText = new RegExp('<' + hashKey + '>', 'g');
        var exampleData = example[hashKey];

        callback(findText, exampleData);
      }
    }
  }

  self.applyExampleRowToScenarioName = function (example, name) {
    iterateExampleValues(example, function(findText, exampleData) {
      name = name.replace(findText, exampleData);
    });

    return name;
  };

  self.applyExampleRowToSteps = function (example, steps) {
    return steps.syncMap(function (step) {
      var name = step.getName();
      var table = Cucumber.Ast.DataTable();
      var rows = [];
      var hasDocString = step.hasDocString();
      var hasDataTable = step.hasDataTable();
      var oldDocString = hasDocString ? step.getDocString() : null;
      var docString = hasDocString ? oldDocString.getContents() : null;

      if (hasDataTable) {
        step.getDataTable().getRows().forEach(function (row) {
          var newRow = {
            line: row.getLine(),
            cells: JSON.stringify(row.raw())
          };
          rows.push(newRow);
        });
      }

      iterateExampleValues(example, function (findText, exampleData) {
        name = name.replace(findText, exampleData);

        if (hasDataTable) {
          /* jshint -W083 */
          rows = rows.map(function (row) {
            return {
              line: row.line,
              cells: row.cells.replace(findText, exampleData)
            };
          });
          /* jshint +W083 */
        }

        if (hasDocString) {
          docString = docString.replace(findText, exampleData);
        }
      });

      var newStep = Cucumber.Ast.OutlineStep(step.getKeyword(), name, uri, step.getLine());
      newStep.setOriginalStep(Cucumber.Ast.Step(step.getKeyword(), step.getName(), step.getUri(), step.getLine()));

      if (hasDataTable) {
        rows.forEach(function (row) {
          table.attachRow(Cucumber.Ast.DataTable.Row(JSON.parse(row.cells), row.line));
        });
        newStep.attachDataTable(table);
      }

      if (hasDocString) {
        newStep.attachDocString(Cucumber.Ast.DocString(oldDocString.getContentType(), docString, oldDocString.getLine()));
      }
      return newStep;
    });
  };

  self.acceptVisitor = function (visitor, callback) {
    callback();
  };

  return self;
}

module.exports = ScenarioOutline;

},{"../../cucumber":1,"lodash":241}],22:[function(require,module,exports){
function Step(keyword, name, uri, line) {
  var Cucumber = require('../../cucumber');
  var docString, dataTable, previousStep;

  var self = {
    setPreviousStep: function setPreviousStep(newPreviousStep) {
      previousStep = newPreviousStep;
    },

    isHidden: function isHidden() {
      return false;
    },

    isOutlineStep: function isOutlineStep() {
      return false;
    },

    getKeyword: function getKeyword() {
      return keyword;
    },

    getName: function getName() {
      return name;
    },

    hasUri: function hasUri() {
      return true;
    },

    getUri: function getUri() {
      return uri;
    },

    getLine: function getLine() {
      return line;
    },

    getPreviousStep: function getPreviousStep() {
      return previousStep;
    },

    hasPreviousStep: function hasPreviousStep() {
      return !!previousStep;
    },

    getAttachment: function getAttachment() {
      var attachment;
      if (self.hasDocString()) {
        attachment = self.getDocString();
      } else if (self.hasDataTable()) {
        attachment = self.getDataTable();
      }
      return attachment;
    },

    getAttachmentContents: function getAttachmentContents() {
      var attachment         = self.getAttachment();
      var attachmentContents;
      if (attachment)
        attachmentContents = attachment.getContents();
      return attachmentContents;
    },

    getDocString: function getDocString() { return docString; },

    getDataTable: function getDataTable() { return dataTable; },

    hasAttachment: function hasAttachment() {
      return self.hasDocString() || self.hasDataTable();
    },

    hasDocString: function hasDocString() {
      return !!docString;
    },

    hasDataTable: function hasDataTable() {
      return !!dataTable;
    },

    attachDocString: function attachDocString(_docString) { docString = _docString; },

    attachDataTable: function attachDataTable(_dataTable) { dataTable = _dataTable; },

    attachDataTableRow: function attachDataTableRow(row) {
      self.ensureDataTableIsAttached();
      var dataTable = self.getDataTable();
      dataTable.attachRow(row);
    },

    ensureDataTableIsAttached: function ensureDataTableIsAttached() {
      var dataTable = self.getDataTable();
      if (!dataTable) {
        dataTable = Cucumber.Ast.DataTable();
        self.attachDataTable(dataTable);
      }
    },

    isOutcomeStep: function isOutcomeStep() {
      return self.hasOutcomeStepKeyword() || self.isRepeatingOutcomeStep();
    },

    isEventStep: function isEventStep() {
      return self.hasEventStepKeyword() || self.isRepeatingEventStep();
    },

    hasOutcomeStepKeyword: function hasOutcomeStepKeyword() {
      return keyword === Step.OUTCOME_STEP_KEYWORD;
    },

    hasEventStepKeyword: function hasEventStepKeyword() {
      return keyword === Step.EVENT_STEP_KEYWORD;
    },

    isRepeatingOutcomeStep: function isRepeatingOutcomeStep() {
      return self.hasRepeatStepKeyword() && self.isPrecededByOutcomeStep();
    },

    isRepeatingEventStep: function isRepeatingEventStep() {
      return self.hasRepeatStepKeyword() && self.isPrecededByEventStep();
    },

    hasRepeatStepKeyword: function hasRepeatStepKeyword() {
      return keyword === Step.AND_STEP_KEYWORD || keyword === Step.BUT_STEP_KEYWORD || keyword === Step.STAR_STEP_KEYWORD;
    },

    isPrecededByOutcomeStep: function isPrecededByOutcomeStep() {
      var result = false;

      if (self.hasPreviousStep()) {
        var previousStep = self.getPreviousStep();
        result           = previousStep.isOutcomeStep();
      }
      return result;
    },

    isPrecededByEventStep: function isPrecededByEventStep() {
      var result = false;

      if (self.hasPreviousStep()) {
        var previousStep          = self.getPreviousStep();
        result = previousStep.isEventStep();
      }
      return result;
    }
  };
  return self;
}

Step.EVENT_STEP_KEYWORD   = 'When ';
Step.OUTCOME_STEP_KEYWORD = 'Then ';
Step.AND_STEP_KEYWORD     = 'And ';
Step.BUT_STEP_KEYWORD     = 'But ';
Step.STAR_STEP_KEYWORD    = '* ';

module.exports = Step;

},{"../../cucumber":1}],23:[function(require,module,exports){
function Tag(name, uri, line) {
  var self = {
    getName: function getName() {
      return name;
    },

    getUri: function getUri() {
      return uri;
    },

    getLine: function getLine() {
      return line;
    }
  };
  return self;
}

module.exports = Tag;

},{}],24:[function(require,module,exports){

},{}],25:[function(require,module,exports){
(function (process){
var Debug = {
  TODO: function TODO(description) {
    return function () { throw(new Error('IMPLEMENT ME: ' + description)); };
  },

  warn: function warn(string, caption, level) {
    if (Debug.isMessageLeveltoBeDisplayed(level))
      process.stdout.write(Debug.warningString(string, caption));
  },

  notice: function notice(string, caption, level) {
    if (Debug.isMessageLeveltoBeDisplayed(level))
      process.stdout.write(Debug.noticeString(string, caption));
  },

  warningString: function warningString(string, caption) {
    caption = caption || 'debug-warning';
    return '\x1B[30;43m' + caption + ':\x1B[0m[33m' + string + '\x1B[0m';
  },

  noticeString: function noticeString(string, caption) {
    caption = caption || 'debug-notice';
    return '\x1B[30;46m' + caption + ':\x1B[0m \x1B[36m' + string + '\x1B[0m';
  },

  prefix: function prefix() {
    return ;
  },

  isMessageLeveltoBeDisplayed: function isMessageLeveltoBeDisplayed(level) {
    if (process.env) {
      level = level || 3; // default level
      return (level <= process.env.DEBUG_LEVEL);
    } else {
      return false;
    }
  }
};

Debug.SimpleAstListener = require('./debug/simple_ast_listener');
module.exports          = Debug;

}).call(this,require('_process'))

},{"./debug/simple_ast_listener":26,"_process":78}],26:[function(require,module,exports){
function SimpleAstListener(options) {
  var logs                        = '';
  var failed                      = false;
  var beforeEachScenarioCallbacks = [];
  var currentStep;

  if (!options)
    options = {};

  function indent(text, indentation) {
    var indented;
    text.split('\n').forEach(function (line) {
      var prefix = new Array(indentation + 1).join('  ');
      line = prefix + line;
      indented = (typeof(indented) === 'undefined' ? line : indented + '\n' + line);
    });
    return indented;
  }

  function log(message, indentation) {
    if (indentation)
      message = indent(message, indentation);
    logs = logs + message + '\n';
    if (options.stream)
      options.stream.write(message);
    if (typeof(options.logToFunction) === 'function')
      options.logToFunction (message);
  }

  var self = {
    hear: function hear(event, callback) {
      switch(event.getName()) {
      case 'BeforeFeature':
        self.hearBeforeFeature(event.getPayloadItem('feature'), callback);
        break;
      case 'BeforeScenario':
        self.hearBeforeScenario(event.getPayloadItem('scenario'), callback);
        break;
      case 'BeforeStep':
        self.hearBeforeStep(event.getPayloadItem('step'), callback);
        break;
      case 'StepResult':
        self.hearStepResult(event.getPayloadItem('stepResult'), callback);
        break;
      default:
        callback();
      }
    },

    hearBeforeFeature: function hearBeforeFeature(feature, callback) {
      log('Feature: ' + feature.getName());
      var description = feature.getDescription();
      if (description !== '')
        log(description, 1);
      callback();
    },

    hearBeforeScenario: function hearBeforeScenario(scenario, callback) {
      beforeEachScenarioCallbacks.forEach(function (func) {
        func();
      });
      log('');
      log(scenario.getKeyword() + ': ' + scenario.getName(), 1);
      callback();
    },

    hearBeforeStep: function hearBeforeStep(step, callback) {
      currentStep = step;
      callback();
    },

    hearStepResult: function hearStepResult(stepResult, callback) {
      log(currentStep.getKeyword() + (currentStep.getName() || ''), 2);
      if (currentStep.hasDocString()) {
        log('"""', 3);
        log(currentStep.getDocString().getContents(), 3);
        log('"""', 3);
      }
      callback();
    },

    getLogs: function getLogs() {
      return logs;
    },

    featuresPassed: function featuresPassed() {
      return !failed;
    },

    beforeEachScenarioDo: function beforeEachScenarioDo(func) {
      beforeEachScenarioCallbacks.push(func);
    }
  };
  return self;
}

module.exports = SimpleAstListener;

},{}],27:[function(require,module,exports){
var gherkin = require('gherkin');

/**
 * Small wrapper around Gherkin that strips BOM and loads the correct lexer based
 * on the language header.
 */
function GherkinLexer(content, gherkinListener) {
  // Strip BOM
  content = content.replace(/^\ufeff/g, '');

  var language = 'en';
  var lines = content.split('\n');
  var len = lines.length;
  for (var i = 0; i < len; i++) {
    var line = lines[i];
    if(!/^\s*#/.exec(line)) break;
    var languageMatch = /^\s*#\s*language:\s*([a-zA-Z-_]+)\s*$/m.exec(line);
    language = languageMatch === null ? 'en' : languageMatch[1].toLowerCase();
  }
  language = language.replace('-', '_');
  var Lexer = gherkin.Lexer(language);
  var lexer = new Lexer(gherkinListener);

  this.scan = function () {
    lexer.scan(content);
  };
}

module.exports = GherkinLexer;

},{"gherkin":183}],28:[function(require,module,exports){
function Listener() {
  var self = {
    hear: function hear(event, callback) {
      if (self.hasHandlerForEvent(event)) {
        var handler = self.getHandlerForEvent(event);
        handler(event, callback);
      } else {
        callback();
      }
    },

    hasHandlerForEvent: function hasHandlerForEvent(event) {
      var handlerName = self.buildHandlerNameForEvent(event);
      return self[handlerName] !== undefined;
    },

    buildHandlerNameForEvent: function buildHandlerNameForEvent(event) {
      return self.buildHandlerName(event.getName());
    },

    getHandlerForEvent: function getHandlerForEvent(event) {
      var eventHandlerName = self.buildHandlerNameForEvent(event);
      return self[eventHandlerName];
    },

    buildHandlerName: function buildHandler(shortName) {
      return Listener.EVENT_HANDLER_NAME_PREFIX + shortName + Listener.EVENT_HANDLER_NAME_SUFFIX;
    },

    setHandlerForEvent: function setHandlerForEvent(shortname, handler) {
      var eventName = self.buildHandlerName(shortname);
      self[eventName] = handler;
    }
  };
  return self;
}

Listener.EVENT_HANDLER_NAME_PREFIX = 'handle';
Listener.EVENT_HANDLER_NAME_SUFFIX = 'Event';
Listener.Events                    = require('./listener/events');
Listener.Formatter                 = require('./listener/formatter');
Listener.PrettyFormatter           = require('./listener/pretty_formatter');
Listener.ProgressFormatter         = require('./listener/progress_formatter');
Listener.JsonFormatter             = require('./listener/json_formatter');
Listener.RerunFormatter            = require('./listener/rerun_formatter');
Listener.StatsJournal              = require('./listener/stats_journal');
Listener.SummaryFormatter          = require('./listener/summary_formatter');

module.exports             = Listener;

},{"./listener/events":29,"./listener/formatter":30,"./listener/json_formatter":31,"./listener/pretty_formatter":32,"./listener/progress_formatter":33,"./listener/rerun_formatter":34,"./listener/stats_journal":35,"./listener/summary_formatter":36}],29:[function(require,module,exports){
exports.BeforeFeatures = 'BeforeFeatures';
exports.BeforeFeature  = 'BeforeFeature';
exports.Background     = 'Background';
exports.BeforeScenario = 'BeforeScenario';
exports.BeforeStep     = 'BeforeStep';
exports.StepResult     = 'StepResult';
exports.AfterStep      = 'AfterStep';
exports.AfterScenario  = 'AfterScenario';
exports.AfterFeature   = 'AfterFeature';
exports.AfterFeatures  = 'AfterFeatures';

},{}],30:[function(require,module,exports){
(function (process){
function Formatter(options) {
  var Cucumber = require('../../cucumber');

  if (!options)
    options = {};

  var logs = '';

  var self = Cucumber.Listener();

  self.log = function log(string) {
    logs += string;
    if (options.stream)
      options.stream.write(string);
    if (typeof(options.logToFunction) === 'function')
      options.logToFunction(string);
  };

  self.finish = function finish(callback) {
    if (options.stream && options.stream !== process.stdout)
      options.stream.end(callback);
    else
      callback();
  };

  self.getLogs = function getLogs() {
    return logs;
  };

  return self;
}

module.exports = Formatter;

}).call(this,require('_process'))

},{"../../cucumber":1,"_process":78}],31:[function(require,module,exports){
/* jshint -W106 */
function JsonFormatter(options) {
  var Cucumber             = require('../../cucumber');
  var GherkinJsonFormatter = require('gherkin/lib/gherkin/formatter/json_formatter');

  var currentFeatureId     = 'undefined';
  var self                 = Cucumber.Listener.Formatter(options);

  var formatterIo = {
    write: function (string) {
      self.log(string);
    }
  };
  var gherkinJsonFormatter =  new GherkinJsonFormatter(formatterIo);

  var parentFeatureTags;

  self.getGherkinFormatter = function getGherkinFormatter() {
    return gherkinJsonFormatter;
  };

  self.formatStep = function formatStep(step) {
    var stepProperties = {
      name:    step.getName(),
      line:    step.getLine(),
      keyword: step.getKeyword()
    };
    if (step.isHidden()) {
      stepProperties.hidden = true;
    }
    if (step.hasDocString()) {
      var docString = step.getDocString();
      stepProperties.doc_string = {
        value:        docString.getContents(),
        line:         docString.getLine(),
        content_type: docString.getContentType()
      };
    }
    if (step.hasDataTable()) {
      var tableContents   = step.getDataTable().getContents();
      var raw             = tableContents.raw();
      var tableProperties = [];
      raw.forEach(function (rawRow) {
        var row = {line: undefined, cells: rawRow};
        tableProperties.push(row);
      });
      stepProperties.rows = tableProperties;
    }
    gherkinJsonFormatter.step(stepProperties);
  };

  self.formatTags = function formatTags(tags, parentTags) {
    var tagsProperties = [];
    tags.forEach(function (tag) {
      var isParentTag = false;
      if (parentTags) {
        parentTags.forEach(function (parentTag) {
          if ((tag.getName() === parentTag.getName()) && (tag.getLine() === parentTag.getLine())) {
            isParentTag = true;
          }
        });
      }
      if (!isParentTag) {
        tagsProperties.push({name: tag.getName(), line: tag.getLine()});
      }
    });
    return tagsProperties;
  };

  self.handleBeforeFeatureEvent = function handleBeforeFeatureEvent(event, callback) {
    var feature      = event.getPayloadItem('feature');
    currentFeatureId = feature.getName().replace(/ /g, '-'); // FIXME: wrong abstraction level, this should be encapsulated "somewhere"

    var featureProperties = {
      id:          currentFeatureId,
      name:        feature.getName(),
      description: feature.getDescription(),
      line:        feature.getLine(),
      keyword:     feature.getKeyword()
    };

    var tags = feature.getTags();
    if (tags.length > 0) {
      featureProperties.tags = self.formatTags(tags, []);
    }

    gherkinJsonFormatter.uri(feature.getUri());
    gherkinJsonFormatter.feature(featureProperties);
    parentFeatureTags = tags;
    callback();
  };

  self.handleBackgroundEvent = function handleBackgroundEvent(event, callback) {
    var background = event.getPayloadItem('background');
    gherkinJsonFormatter.background({
      name:        background.getName(),
      keyword:     'Background',
      description: background.getDescription(),
      type:        'background',
      line:        background.getLine()
    });
    var steps = background.getSteps();
    steps.forEach(function (value) { self.formatStep(value); });
    callback();
  };

  self.handleBeforeScenarioEvent = function handleBeforeScenarioEvent(event, callback) {

    var scenario = event.getPayloadItem('scenario');

    var id = currentFeatureId + ';' + scenario.getName().replace(/ /g, '-').toLowerCase();
    var scenarioProperties = {name: scenario.getName(), id: id, line: scenario.getLine(), keyword: 'Scenario',  description: scenario.getDescription(), type: 'scenario'};

    var tags = scenario.getTags();
    if (tags.length > 0) {
      var formattedTags = self.formatTags(tags, parentFeatureTags);
      if (formattedTags.length > 0) {
        scenarioProperties.tags = formattedTags;
      }
    }
    gherkinJsonFormatter.scenario(scenarioProperties);
    callback();
  };

  self.handleStepResultEvent = function handleStepResultEvent(event, callback) {
    var stepResult = event.getPayloadItem('stepResult');

    var step = stepResult.getStep();
    self.formatStep(step);

    var stepOutput = {};
    var attachments;

    var status = stepResult.getStatus();
    stepOutput.status = status;

    if (status === Cucumber.Status.PASSED || status === Cucumber.Status.FAILED) {
      if (stepResult.hasAttachments()) {
        attachments = stepResult.getAttachments();
      }
      stepOutput.duration = stepResult.getDuration();
    }

    if (status === Cucumber.Status.FAILED) {
      var failureMessage = stepResult.getFailureException();
      if (failureMessage) {
        stepOutput.error_message = (failureMessage.stack || failureMessage);
      }
    }

    gherkinJsonFormatter.result(stepOutput);
    gherkinJsonFormatter.match({location: undefined});
    if (attachments) {
      attachments.forEach(function (attachment) {
        gherkinJsonFormatter.embedding(attachment.getMimeType(), attachment.getData());
      });
    }
    callback();
  };

  self.handleAfterFeaturesEvent = function handleAfterFeaturesEvent(event, callback) {
    gherkinJsonFormatter.eof();
    gherkinJsonFormatter.done();
    self.finish(callback);
  };

  return self;
}

module.exports = JsonFormatter;

},{"../../cucumber":1,"gherkin/lib/gherkin/formatter/json_formatter":184}],32:[function(require,module,exports){
(function (process){
function PrettyFormatter(options) {
  var Cucumber         = require('../../cucumber');
  var path             = require('path');

  var colors           = Cucumber.Util.Colors(options.useColors);
  var self             = Cucumber.Listener.Formatter(options);
  var summaryFormatter = Cucumber.Listener.SummaryFormatter({
    snippets: options.snippets,
    snippetSyntax: options.snippetSyntax,
    hideFailedStepResults: true,
    useColors: options.useColors
  });
  var uriCommentIndex = 0;

  var parentHear = self.hear;
  self.hear = function hear(event, callback) {
    summaryFormatter.hear(event, function () {
      parentHear(event, callback);
    });
  };

  self.handleBeforeFeatureEvent = function handleBeforeFeatureEvent(event, callback) {
    var feature = event.getPayloadItem('feature');
    var source = '';

    var tagsSource = self.formatTags(feature.getTags());
    if (tagsSource) {
      source = tagsSource + '\n';
    }

    var identifier = feature.getKeyword() + ': ' + feature.getName();
    source += identifier;

    var description = feature.getDescription();
    if (description) {
      source += '\n\n' + self.indent(description, 1);
    }

    source += '\n\n';

    self.log(source);
    callback();
  };

  self.handleBeforeScenarioEvent = function handleBeforeScenarioEvent(event, callback) {
    var scenario = event.getPayloadItem('scenario');
    var source = '';

    var tagsSource = self.formatTags(scenario.getOwnTags());
    if (tagsSource) {
      source = tagsSource + '\n';
    }

    var identifier = scenario.getKeyword() + ': ' + scenario.getName();
    if (options.showSource) {
      var lineLengths = [identifier.length, self.determineMaxStepLengthForElement(scenario)];
      if (scenario.getBackground() !== undefined) {
        lineLengths.push(self.determineMaxStepLengthForElement(scenario.getBackground()));
      }
      uriCommentIndex = Math.max.apply(null, lineLengths) + 1;

      identifier = self._pad(identifier, uriCommentIndex + 2) +
                   colors.comment('# ' + path.relative(process.cwd(), scenario.getUri()) + ':' + scenario.getLine());
    }
    source += identifier;

    self.logIndented(source, 1);
    self.log('\n');
    callback();
  };

  self.handleAfterScenarioEvent = function handleAfterScenarioEvent(event, callback) {
    self.log('\n');
    callback();
  };

  self.applyColor = function applyColor (stepResult, source) {
    var status = stepResult.getStatus();
    return colors[status](source);
  };

  self.handleStepResultEvent = function handleStepResultEvent(event, callback) {
    var stepResult = event.getPayloadItem('stepResult');
    var step = stepResult.getStep();
    if (!step.isHidden() || stepResult.getStatus() === Cucumber.Status.FAILED) {
      self.logStepResult(step, stepResult);
    }
    callback();
  };

  self.formatTags = function formatTags(tags) {
    if (tags.length === 0) {
      return '';
    }

    var tagNames = tags.map(function (tag) {
      return tag.getName();
    });

    return colors.tag(tagNames.join(' '));
  };

  self.logStepResult = function logStepResult(step, stepResult) {
    var identifier = step.getKeyword() + (step.getName() || '');
    var stepDefintion = stepResult.getStepDefinition();

    if (options.showSource && stepDefintion) {
      identifier = self._pad(identifier, uriCommentIndex);
      identifier += colors.comment('# ' + path.relative(process.cwd(), stepDefintion.getUri()) + ':' + stepDefintion.getLine());
    }

    identifier = self.applyColor(stepResult, identifier);
    self.logIndented(identifier, 2);
    self.log('\n');

    if (step.hasDataTable()) {
      var dataTable = step.getDataTable();
      var dataTableSource = self.formatDataTable(stepResult, dataTable);
      self.logIndented(dataTableSource, 3);
    }

    if (step.hasDocString()) {
      var docString = step.getDocString();
      var docStringSource = self.formatDocString(stepResult, docString);
      self.logIndented(docStringSource, 3);
    }

    if (stepResult.getStatus() === Cucumber.Status.FAILED) {
      var failure            = stepResult.getFailureException();
      var failureDescription = failure.stack || failure;
      self.logIndented(failureDescription, 3);
      self.log('\n');
    }
  };

  self.handleAfterFeaturesEvent = function handleAfterFeaturesEvent(event, callback) {
    var summaryLogs = summaryFormatter.getLogs();
    self.log(summaryLogs);
    self.finish(callback);
  };

  self.formatDataTable = function formatDataTable(stepResult, dataTable) {
    var rows         = dataTable.raw();
    var columnWidths = self._determineColumnWidthsFromRows(rows);
    var source = '';
    rows.forEach(function (row) {
      source += '|';
      row.forEach(function (cell, columnIndex) {
        var columnWidth = columnWidths[columnIndex];
        source += ' ' + self.applyColor(stepResult, self._pad(cell, columnWidth)) + ' |';
      });
      source += '\n';
    });
    return source;
  };

  self.formatDocString = function formatDocString(stepResult, docString) {
    var contents = '"""\n' + docString.getContents() + '\n"""';
    return self.applyColor(stepResult, contents) + '\n';
  };

  self.logIndented = function logIndented(text, level) {
    var indented = self.indent(text, level);
    self.log(indented);
  };

  self.indent = function indent(text, level) {
    var indented;
    text.split('\n').forEach(function (line) {
      var prefix = new Array(level + 1).join('  ');
      line = (prefix + line).replace(/\s+$/, '');
      indented = (typeof(indented) === 'undefined' ? line : indented + '\n' + line);
    });
    return indented;
  };

  self.determineMaxStepLengthForElement = function determineMaxStepLengthForElement(element) {
    var max = 0;
    element.getSteps().forEach(function (step) {
      var stepLength = step.getKeyword().length + step.getName().length;
      if (stepLength > max) max = stepLength;
    });
    return max;
  };

  self._determineColumnWidthsFromRows = function _determineColumnWidthsFromRows(rows) {
    var columnWidths = [];
    var currentColumn;

    rows.forEach(function (cells) {
      currentColumn = 0;
      cells.forEach(function (cell) {
        var currentColumnWidth = columnWidths[currentColumn];
        var currentCellWidth   = cell.length;
        if (typeof currentColumnWidth === 'undefined' || currentColumnWidth < currentCellWidth)
          columnWidths[currentColumn] = currentCellWidth;
        currentColumn += 1;
      });
    });

    return columnWidths;
  };

  self._pad = function _pad(text, width) {
    var padded = '' + text;
    while (padded.length < width) {
      padded += ' ';
    }
    return padded;
  };

  return self;
}

module.exports = PrettyFormatter;

}).call(this,require('_process'))

},{"../../cucumber":1,"_process":78,"path":77}],33:[function(require,module,exports){
function ProgressFormatter(options) {
  var Cucumber = require('../../cucumber');

  if (!options)
    options = {};

  var colors = Cucumber.Util.Colors(options.useColors);

  var self             = Cucumber.Listener.Formatter(options);
  var summaryFormatter = Cucumber.Listener.SummaryFormatter({
    snippets: options.snippets,
    snippetSyntax: options.snippetSyntax,
    useColors: options.useColors
  });

  var parentHear = self.hear;
  self.hear = function hear(event, callback) {
    summaryFormatter.hear(event, function () {
      parentHear(event, callback);
    });
  };

  var characters = {};
  characters[Cucumber.Status.AMBIGUOUS] = 'A';
  characters[Cucumber.Status.FAILED] = 'F';
  characters[Cucumber.Status.PASSED] = '.';
  characters[Cucumber.Status.PENDING] = 'P';
  characters[Cucumber.Status.SKIPPED] = '-';
  characters[Cucumber.Status.UNDEFINED] = 'U';

  self.handleStepResultEvent = function handleStepResult(event, callback) {
    var stepResult = event.getPayloadItem('stepResult');
    var status = stepResult.getStatus();
    var step = stepResult.getStep();
    if (!step.isHidden() || status === Cucumber.Status.FAILED) {
      var character = colors[status](characters[status]);
      self.log(character);
    }
    callback();
  };

  self.handleAfterFeaturesEvent = function handleAfterFeaturesEvent(event, callback) {
    var summaryLogs = summaryFormatter.getLogs();
    self.log('\n\n');
    self.log(summaryLogs);
    self.finish(callback);
  };

  return self;
}

module.exports = ProgressFormatter;

},{"../../cucumber":1}],34:[function(require,module,exports){
(function (process){
function RerunFormatter(options) {
  var Cucumber = require('../../cucumber');
  var path = require('path');

  var self = Cucumber.Listener.Formatter(options);
  var statsJournal = Cucumber.Listener.StatsJournal();
  var failures = {};

  var parentHear = self.hear;
  self.hear = function hear(event, callback) {
    statsJournal.hear(event, function () {
      parentHear(event, callback);
    });
  };

  self.handleAfterScenarioEvent = function handleAfterScenarioEvent(event, callback) {
    var isCurrentScenarioFailing = statsJournal.isCurrentScenarioFailing();

    if (isCurrentScenarioFailing) {
      var failedScenario = event.getPayloadItem('scenario');
      var uri = path.relative(process.cwd(), failedScenario.getUri());
      var line = failedScenario.getLine();
      if (!failures[uri]) {
        failures[uri] = [];
      }
      failures[uri].push(line);
    }
    callback();
  };

  self.handleAfterFeaturesEvent = function handleAfterFeaturesEvent(event, callback) {
    for (var uri in failures) {
      self.log(uri + ':' + failures[uri].join(':') + '\n');
    }
    self.finish(callback);
  };

  return self;
}

module.exports = RerunFormatter;

}).call(this,require('_process'))

},{"../../cucumber":1,"_process":78,"path":77}],35:[function(require,module,exports){
function StatsJournal(options) {
  var Cucumber = require('../../cucumber');
  var _ = require('lodash');

  function getCountsObject () {
    var statuses = [
      Cucumber.Status.AMBIGUOUS,
      Cucumber.Status.FAILED,
      Cucumber.Status.PASSED,
      Cucumber.Status.PENDING,
      Cucumber.Status.SKIPPED,
      Cucumber.Status.UNDEFINED
    ];
    var counts = {};
    statuses.forEach(function (status) {
      counts[status] = 0;
    });
    return counts;
  }

  var scenarioResult;
  var scenarioCounts = getCountsObject();
  var stepCounts = getCountsObject();
  var duration = 0;

  if (!options)
    options = {};

  var self = Cucumber.Listener();

  self.handleBeforeScenarioEvent = function handleBeforeScenarioEvent(event, callback) {
    scenarioResult = Cucumber.Runtime.ScenarioResult();
    callback();
  };

  self.handleAfterScenarioEvent = function handleAfterScenarioEvent(event, callback) {
    scenarioCounts[scenarioResult.getStatus()] += 1;
    callback();
  };

  self.handleStepResultEvent = function handleStepResult(event, callback) {
    var stepResult = event.getPayloadItem('stepResult');
    var stepDuration = stepResult.getDuration();
    if (stepDuration) {
      duration += stepDuration;
    }

    var status = stepResult.getStatus();
    var step = stepResult.getStep();

    if (!step.isHidden()) {
      stepCounts[status] += 1;
    }

    scenarioResult.witnessStepResult(stepResult);

    callback();
  };

  self.isCurrentScenarioFailing = function isCurrentScenarioFailing() {
    return scenarioResult.getStatus() === Cucumber.Status.FAILED;
  };

  self.getScenarioCounts = function getScenarioCounts() {
    return _.clone(scenarioCounts);
  };

  self.getStepCounts = function getStepCounts() {
    return _.clone(stepCounts);
  };

  self.getDuration = function getDuration() {
    return duration;
  };

  return self;
}

module.exports = StatsJournal;

},{"../../cucumber":1,"lodash":241}],36:[function(require,module,exports){
(function (process){
function SummaryFormatter(options) {
  var Cucumber = require('../../cucumber');
  var Duration = require('duration');
  var Table    = require('cli-table');
  var path     = require('path');
  var _        = require('lodash');

  var ambiguousStepLogBuffer = '';
  var failedScenarioLogBuffer = '';
  var failedStepResultLogBuffer = '';
  var undefinedStepLogBuffer = '';
  var statsJournal            = Cucumber.Listener.StatsJournal();
  var colors                  = Cucumber.Util.Colors(options.useColors);
  var statusReportOrder = [
    Cucumber.Status.FAILED,
    Cucumber.Status.UNDEFINED,
    Cucumber.Status.AMBIGUOUS,
    Cucumber.Status.PENDING,
    Cucumber.Status.SKIPPED,
    Cucumber.Status.PASSED
  ];

  var self = Cucumber.Listener.Formatter(options);

  var parentHear = self.hear;
  self.hear = function hear(event, callback) {
    statsJournal.hear(event, function () {
      parentHear(event, callback);
    });
  };

  self.handleStepResultEvent = function handleStepResult(event, callback) {
    var stepResult = event.getPayloadItem('stepResult');
    var status = stepResult.getStatus();
    switch (status) {
      case Cucumber.Status.AMBIGUOUS:
        self.storeAmbiguousStepResult(stepResult);
        break;
      case Cucumber.Status.FAILED:
        self.storeFailedStepResult(stepResult);
        break;
      case Cucumber.Status.UNDEFINED:
        self.storeUndefinedStepResult(stepResult);
        break;
    }
    callback();
  };

  self.handleAfterScenarioEvent = function handleAfterScenarioEvent(event, callback) {
    if (statsJournal.isCurrentScenarioFailing()) {
      var scenario = event.getPayloadItem('scenario');
      self.storeFailedScenario(scenario);
    }
    callback();
  };

  self.handleAfterFeaturesEvent = function handleAfterFeaturesEvent(event, callback) {
    self.logSummary();
    self.finish(callback);
  };

  self.storeAmbiguousStepResult = function storeAmbiguousStepResult(stepResult) {
    var step = stepResult.getStep();
    var stepDefinitions = stepResult.getAmbiguousStepDefinitions();

    var table = new Table({
      chars: {
        'bottom': '', 'bottom-left': '', 'bottom-mid': '', 'bottom-right': '',
        'left': '', 'left-mid': '',
        'mid': '', 'mid-mid': '',
        'middle': ' ',
        'right': '', 'right-mid': '',
        'top': '' , 'top-left': '', 'top-mid': '', 'top-right': ''
      },
      style: {
        'padding-left': 0, 'padding-right': 0
      }
    });
    table.push.apply(table, stepDefinitions.map(function (stepDefinition) {
      var pattern = stepDefinition.getPattern();
      var relativeUri = path.relative(process.cwd(), stepDefinition.getUri());
      var line = stepDefinition.getLine();
      return [colors.ambiguous(pattern), colors.comment('# ' + relativeUri + ':' + line)];
    }));
    var message = colors.ambiguous('"' + step.getName() + '" matches:') + '\n' + table.toString();
    self.appendStringToAmbiguousStepLogBuffer(message);
  };

  self.storeFailedStepResult = function storeFailedStepResult(failedStepResult) {
    var failureException = failedStepResult.getFailureException();
    var failureMessage = failureException.stack || failureException;
    self.appendStringToFailedStepResultLogBuffer(failureMessage);
  };

  self.storeFailedScenario = function storeFailedScenario(failedScenario) {
    var name        = failedScenario.getName();
    var relativeUri = path.relative(process.cwd(), failedScenario.getUri());
    var line        = failedScenario.getLine();
    self.appendStringToFailedScenarioLogBuffer(relativeUri + ':' + line + ' # Scenario: ' + name);
  };

  self.storeUndefinedStepResult = function storeUndefinedStepResult(stepResult) {
    var step = stepResult.getStep();
    var snippetBuilder = Cucumber.SupportCode.StepDefinitionSnippetBuilder(step, options.snippetSyntax);
    var snippet        = snippetBuilder.buildSnippet();
    self.appendStringToUndefinedStepLogBuffer(snippet);
  };

  self.appendStringToAmbiguousStepLogBuffer = function appendStringToAmbiguousStepLogBuffer(string) {
    if (ambiguousStepLogBuffer.indexOf(string) === -1)
      ambiguousStepLogBuffer += string + '\n\n';
  };

  self.appendStringToFailedScenarioLogBuffer = function appendStringToFailedScenarioLogBuffer(string) {
    failedScenarioLogBuffer += string + '\n';
  };

  self.appendStringToFailedStepResultLogBuffer = function appendStringToFailedScenarioLogBuffer(string) {
    failedStepResultLogBuffer += string + '\n\n';
  };

  self.appendStringToUndefinedStepLogBuffer = function appendStringToUndefinedStepLogBuffer(string) {
    if (undefinedStepLogBuffer.indexOf(string) === -1)
      undefinedStepLogBuffer += string + '\n';
  };

  self.getFailedScenarioLogBuffer = function getFailedScenarioLogBuffer() {
    return failedScenarioLogBuffer;
  };

  self.getFailedStepResultLogBuffer = function getFailedStepResultLogBuffer() {
    return failedStepResultLogBuffer;
  };

  self.getUndefinedStepLogBuffer = function getUndefinedStepLogBuffer() {
    return undefinedStepLogBuffer;
  };

  self.logSummary = function logSummary() {
    if (failedScenarioLogBuffer) {
      if (!options.hideFailedStepResults) {
        self.logFailedStepResults();
      }
      self.logFailedScenarios();
    }
    self.logScenariosSummary();
    self.logStepsSummary();
    self.logDuration();
    if (undefinedStepLogBuffer)
      self.logUndefinedStepSnippets();
    if (ambiguousStepLogBuffer)
      self.logAmbiguousSteps();
  };

  self.logAmbiguousSteps = function logAmbiguousSteps() {
    self.log(colors.ambiguous('\nThe following steps have multiple matching definitions:\n\n'));
    self.log(colors.ambiguous(ambiguousStepLogBuffer));
  };

  self.logFailedStepResults = function logFailedStepResults() {
    self.log('(::) failed steps (::)\n\n');
    var failedStepResults = self.getFailedStepResultLogBuffer();
    self.log(failedStepResults);
  };

  self.logFailedScenarios = function logFailedScenarios() {
    self.log('Failing scenarios:\n');
    var failedScenarios = self.getFailedScenarioLogBuffer();
    self.log(failedScenarios);
    self.log('\n');
  };

  self.logScenariosSummary = function logScenariosSummary() {
    self.logCountSummary('scenario', statsJournal.getScenarioCounts());
  };

  self.logStepsSummary = function logStepsSummary() {
    self.logCountSummary('step', statsJournal.getStepCounts());
  };

  self.logDuration = function logDuration() {
    var nanoseconds = statsJournal.getDuration();
    var milliseconds = Math.ceil(nanoseconds / 1e6);
    var start = new Date(0);
    var end = new Date(milliseconds);
    var duration = new Duration(start, end);

    self.log(duration.minutes + 'm' +
             duration.toString('%S') + '.' +
             duration.toString('%L') + 's' + '\n');
  };

  self.logUndefinedStepSnippets = function logUndefinedStepSnippets() {
    var undefinedStepLogBuffer = self.getUndefinedStepLogBuffer();
    if (options.snippets) {
      self.log(colors.pending('\nYou can implement step definitions for undefined steps with these snippets:\n\n'));
      self.log(colors.pending(undefinedStepLogBuffer));
    }
  };

  self.logCountSummary = function logCountSummary (type, counts) {
    var total = _.reduce(counts, function(memo, value){
      return memo + value;
    });

    self.log(total + ' ' + type + (total !== 1 ? 's' : ''));
    if (total > 0) {
      var details = [];
      statusReportOrder.forEach(function (status) {
        if (counts[status] > 0)
          details.push(colors[status](counts[status] + ' ' + status));
      });
      self.log(' (' + details.join(', ') + ')');
    }
    self.log('\n');
  };

  return self;
}

module.exports = SummaryFormatter;

}).call(this,require('_process'))

},{"../../cucumber":1,"_process":78,"cli-table":117,"duration":151,"lodash":241,"path":77}],37:[function(require,module,exports){
function Parser(featureSources, astFilter) {
  var GherkinLexer = require('./gherkin_lexer');
  var Cucumber     = require('../cucumber');

  var features     = Cucumber.Ast.Features();
  var astAssembler = Cucumber.Ast.Assembler(features, astFilter);
  var currentSourceUri;

  var self = {
    parse: function parse() {
      var len = featureSources.length;
      for (var i = 0; i < len; i++) {
        var currentSourceUri = featureSources[i][Parser.FEATURE_NAME_SOURCE_PAIR_URI_INDEX];
        var featureSource    = featureSources[i][Parser.FEATURE_NAME_SOURCE_PAIR_SOURCE_INDEX];
        self.setCurrentSourceUri(currentSourceUri);
        var lexer = new GherkinLexer(featureSource.toString(), self.getEventHandlers());
        try {
          lexer.scan();
        } catch(e) {
          e.message += '\npath: ' + currentSourceUri;
          throw e;
        }
      }
      return features;
    },

    setCurrentSourceUri: function setCurrentSourceUri(uri) {
      currentSourceUri = uri;
    },

    getCurrentSourceUri: function getCurrentSourceUri() {
      return currentSourceUri;
    },

    getEventHandlers: function getEventHandlers() {
      /* jshint -W106 */
      return {
        background:       self.handleBackground,
        comment:          self.handleComment,
        doc_string:       self.handleDocString,
        eof:              self.handleEof,
        feature:          self.handleFeature,
        row:              self.handleDataTableRow,
        scenario:         self.handleScenario,
        step:             self.handleStep,
        tag:              self.handleTag,
        scenario_outline: self.handleScenarioOutline,
        examples:         self.handleExamples
      };
      /* jshint +W106 */
    },

    handleBackground: function handleBackground(keyword, name, description, line) {
      var uri        = self.getCurrentSourceUri();
      var background = Cucumber.Ast.Background(keyword, name, description, uri, line);
      astAssembler.insertBackground(background);
    },

    handleComment: function handleComment() {},

    handleDocString: function handleDocString(contentType, string, line) {
      var uri       = self.getCurrentSourceUri();
      var docString = Cucumber.Ast.DocString(contentType, string, uri, line);
      astAssembler.insertDocString(docString);
    },

    handleEof: function handleEof() {
      astAssembler.finish();
    },

    handleFeature: function handleFeature(keyword, name, description, line) {
      var uri     = self.getCurrentSourceUri();
      var feature = Cucumber.Ast.Feature(keyword, name, description, uri, line);
      astAssembler.insertFeature(feature);
    },

    handleDataTableRow: function handleDataTableRow(cells, line) {
      var uri          = self.getCurrentSourceUri();
      var dataTableRow = Cucumber.Ast.DataTable.Row(cells, uri, line);
      astAssembler.insertDataTableRow(dataTableRow);
    },

    handleScenario: function handleScenario(keyword, name, description, line) {
      var uri      = self.getCurrentSourceUri();
      var scenario = Cucumber.Ast.Scenario(keyword, name, description, uri, line);
      astAssembler.insertScenario(scenario);
    },

    handleStep: function handleStep(keyword, name, line) {
      var uri  = self.getCurrentSourceUri();
      var step = Cucumber.Ast.Step(keyword, name, uri, line);
      astAssembler.insertStep(step);
    },

    handleTag: function handleTag(tag, line) {
      var uri = self.getCurrentSourceUri();
      var astTag = Cucumber.Ast.Tag(tag, uri, line);
      astAssembler.insertTag(astTag);
    },

    handleScenarioOutline: function handleScenarioOutline(keyword, name, description, line) {
      var uri     = self.getCurrentSourceUri();
      var outline = Cucumber.Ast.ScenarioOutline(keyword, name, description, uri, line);
      astAssembler.insertScenario(outline);
    },

    handleExamples: function handleExamples(keyword, name, description, line) {
      var examples = Cucumber.Ast.Examples(keyword, name, description, line);
      astAssembler.insertExamples(examples);
    }
  };
  return self;
}

Parser.FEATURE_NAME_SOURCE_PAIR_URI_INDEX = 0;
Parser.FEATURE_NAME_SOURCE_PAIR_SOURCE_INDEX = 1;

module.exports = Parser;

},{"../cucumber":1,"./gherkin_lexer":27}],38:[function(require,module,exports){
function Runtime(configuration) {
  var Cucumber = require('../cucumber');

  var listeners = [];

  var self = {
    start: function start(callback) {
      if (typeof(callback) !== 'function')
        throw new Error(Runtime.START_MISSING_CALLBACK_ERROR);

      var features = self.getFeatures();
      var supportCodeLibrary = self.getSupportCodeLibrary();
      var options = {
        dryRun: configuration.isDryRunRequested && configuration.isDryRunRequested(),
        failFast: configuration.isFailFastRequested && configuration.isFailFastRequested(),
        strict: configuration.isStrictRequested && configuration.isStrictRequested()
      };

      var astTreeWalker = Runtime.AstTreeWalker(features, supportCodeLibrary, listeners, options);

      if (configuration.shouldFilterStackTraces())
        Runtime.StackTraceFilter.filter();

      astTreeWalker.walk(function (result) {
        Runtime.StackTraceFilter.unfilter();
        callback(result);
      });
    },

    attachListener: function attachListener(listener) {
      listeners.push(listener);
    },

    getFeatures: function getFeatures() {
      var featureSources = configuration.getFeatureSources();
      var astFilter      = configuration.getAstFilter();
      var parser         = Cucumber.Parser(featureSources, astFilter);
      var features       = parser.parse();
      return features;
    },

    getSupportCodeLibrary: function getSupportCodeLibrary() {
      var supportCodeLibrary = configuration.getSupportCodeLibrary();
      return supportCodeLibrary;
    }
  };
  return self;
}

Runtime.START_MISSING_CALLBACK_ERROR = 'Cucumber.Runtime.start() expects a callback';
Runtime.AstTreeWalker                = require('./runtime/ast_tree_walker');
Runtime.Attachment                   = require('./runtime/attachment');
Runtime.FeaturesResult               = require('./runtime/features_result');
Runtime.ScenarioResult               = require('./runtime/scenario_result');
Runtime.StackTraceFilter             = require('./runtime/stack_trace_filter');
Runtime.StepResult                   = require('./runtime/step_result');

module.exports = Runtime;

},{"../cucumber":1,"./runtime/ast_tree_walker":39,"./runtime/attachment":41,"./runtime/features_result":42,"./runtime/scenario_result":43,"./runtime/stack_trace_filter":44,"./runtime/step_result":45}],39:[function(require,module,exports){
(function (process){
function AstTreeWalker(features, supportCodeLibrary, listeners, options) {
  var Cucumber = require('../../cucumber');

  var world;
  var featuresResult = Cucumber.Runtime.FeaturesResult(options.strict);
  var emptyHook = Cucumber.SupportCode.Hook(function () {}, {});
  var beforeSteps = Cucumber.Type.Collection();
  var afterSteps = Cucumber.Type.Collection();
  var attachments = [];
  var apiScenario, scenarioResult;

  var self = {
    walk: function walk(callback) {
      self.visitFeatures(features, function () {
        callback(featuresResult.isSuccessful());
      });
    },

    visitFeatures: function visitFeatures(features, callback) {
      var payload = { features: features };
      var event   = AstTreeWalker.Event(AstTreeWalker.FEATURES_EVENT_NAME, payload);
      self.broadcastEventAroundUserFunction(
        event,
        function (callback) { features.acceptVisitor(self, callback); },
        callback
      );
    },

    visitFeature: function visitFeature(feature, callback) {
      if (!featuresResult.isSuccessful() && options.failFast) {
        return callback();
      }
      var payload = { feature: feature };
      var event   = AstTreeWalker.Event(AstTreeWalker.FEATURE_EVENT_NAME, payload);
      self.broadcastEventAroundUserFunction(
        event,
        function (callback) { feature.acceptVisitor(self, callback); },
        callback
      );
    },

    visitBackground: function visitBackground(background, callback) {
 	    var payload = { background: background };
 	    var event   = AstTreeWalker.Event(AstTreeWalker.BACKGROUND_EVENT_NAME, payload);
 	    self.broadcastEvent(event, callback);
 	  },

    visitScenario: function visitScenario(scenario, callback) {
      if (!featuresResult.isSuccessful() && options.failFast) {
        return callback();
      }
      var world = supportCodeLibrary.instantiateNewWorld();
      self.setWorld(world);
      self.witnessNewScenario(scenario);
      self.createBeforeAndAfterStepsForAroundHooks(scenario);
      self.createBeforeStepsForBeforeHooks(scenario);
      self.createAfterStepsForAfterHooks(scenario);
      var payload = { scenario: scenario };
      var event = AstTreeWalker.Event(AstTreeWalker.SCENARIO_EVENT_NAME, payload);
      self.broadcastEventAroundUserFunction (
        event,
        function (callback) {
          self.visitBeforeSteps(function () {
            scenario.acceptVisitor(self, function () {
              self.visitAfterSteps(callback);
            });
          });
        },
        callback
      );
    },

    createBeforeAndAfterStepsForAroundHooks: function createBeforeAndAfterStepsForAroundHooks(scenario) {
      var aroundHooks = supportCodeLibrary.lookupAroundHooksByScenario(scenario);
      aroundHooks.forEach(function (aroundHook) {
        var beforeStep = Cucumber.Ast.HookStep(AstTreeWalker.AROUND_STEP_KEYWORD);
        beforeStep.setHook(aroundHook);
        beforeSteps.add(beforeStep);
        var afterStep = Cucumber.Ast.HookStep(AstTreeWalker.AROUND_STEP_KEYWORD);
        afterStep.setHook(emptyHook);
        afterSteps.unshift(afterStep);
        aroundHook.setAfterStep(afterStep);
      });
    },

    createBeforeStepsForBeforeHooks: function createBeforeStepsForBeforeHooks(scenario) {
      var beforeHooks = supportCodeLibrary.lookupBeforeHooksByScenario(scenario);
      beforeHooks.forEach(function (beforeHook) {
        var beforeStep = Cucumber.Ast.HookStep(AstTreeWalker.BEFORE_STEP_KEYWORD);
        beforeStep.setHook(beforeHook);
        beforeSteps.add(beforeStep);
      });
    },

    createAfterStepsForAfterHooks: function createAfterStepsForAfterHooks(scenario) {
      var afterHooks = supportCodeLibrary.lookupAfterHooksByScenario(scenario);
      afterHooks.forEach(function (afterHook) {
        var afterStep = Cucumber.Ast.HookStep(AstTreeWalker.AFTER_STEP_KEYWORD);
        afterStep.setHook(afterHook);
        afterSteps.unshift(afterStep);
      });
    },

    visitBeforeSteps: function visitBeforeSteps(callback) {
      beforeSteps.asyncForEach(function (beforeStep, callback) {
        self.witnessHook();
        self.executeHookStep(beforeStep, callback);
      }, callback);
    },

    visitAfterSteps: function visitAfterSteps(callback) {
      afterSteps.asyncForEach(function (afterStep, callback) {
        self.witnessHook();
        self.executeHookStep(afterStep, callback);
      }, callback);
    },

    visitStep: function visitStep(step, callback) {
      self.witnessNewStep();
      var payload = { step: step };
      var event   = AstTreeWalker.Event(AstTreeWalker.STEP_EVENT_NAME, payload);
      self.broadcastEventAroundUserFunction (
        event,
        function (callback) {
          process.nextTick(function() {
            self.processStep(step, callback);
          });
        },
        callback
      );
    },

    visitStepResult: function visitStepResult(stepResult, callback) {
      scenarioResult.witnessStepResult(stepResult);
      featuresResult.witnessStepResult(stepResult);
      var payload = { stepResult: stepResult };
      var event   = AstTreeWalker.Event(AstTreeWalker.STEP_RESULT_EVENT_NAME, payload);
      self.broadcastEvent(event, callback);
    },

    broadcastEventAroundUserFunction: function broadcastEventAroundUserFunction (event, userFunction, callback) {
      var userFunctionWrapper = self.wrapUserFunctionAndAfterEventBroadcast(userFunction, event, callback);
      self.broadcastBeforeEvent(event, userFunctionWrapper);
    },

    wrapUserFunctionAndAfterEventBroadcast: function wrapUserFunctionAndAfterEventBroadcast(userFunction, event, callback) {
      var callAfterEventBroadcast = self.wrapAfterEventBroadcast(event, callback);
      return function callUserFunctionAndBroadcastAfterEvent() {
        userFunction (callAfterEventBroadcast);
      };
    },

    wrapAfterEventBroadcast: function wrapAfterEventBroadcast(event, callback) {
      return function () { self.broadcastAfterEvent(event, callback); };
    },

    broadcastBeforeEvent: function broadcastBeforeEvent(event, callback) {
      var preEvent = event.replicateAsPreEvent();
      self.broadcastEvent(preEvent, callback);
    },

    broadcastAfterEvent: function broadcastAfterEvent(event, callback) {
      var postEvent = event.replicateAsPostEvent();
      self.broadcastEvent(postEvent, callback);
    },

    broadcastEvent: function broadcastEvent(event, callback) {
      function broadcastToListeners(listeners, callback) {
        var iterator = function (listener, callback) {
          listener.hear(event, callback);
        };
        Cucumber.Util.asyncForEach(listeners, iterator, callback);
      }

      function onRuntimeListenersComplete() {
        var listeners = supportCodeLibrary.getListeners();
        broadcastToListeners(listeners, callback);
      }

      broadcastToListeners(listeners, onRuntimeListenersComplete);
    },

    setWorld: function setWorld(newWorld) {
      world = newWorld;
    },

    getWorld: function getWorld() {
      return world;
    },

    getDefaultTimeout: function getDefaultTimeout() {
      return supportCodeLibrary.getDefaultTimeout();
    },

    getScenarioStatus: function getScenarioStatus() {
      return scenarioResult.getStatus();
    },

    getScenarioFailureException: function getScenarioFailureException() {
      return scenarioResult.getFailureException();
    },

    attach: function attach(data, mimeType) {
      attachments.push(Cucumber.Runtime.Attachment({mimeType: mimeType, data: data}));
    },

    getAttachments: function getAttachments() {
      return attachments;
    },

    witnessHook: function witnessHook() {
      attachments = [];
    },

    witnessNewStep: function witnessNewStep() {
      attachments = [];
    },

    witnessNewScenario: function witnessNewScenario(scenario) {
      apiScenario    = Cucumber.Api.Scenario(self, scenario);
      scenarioResult = Cucumber.Runtime.ScenarioResult();
      beforeSteps.clear();
      afterSteps.clear();
    },

    getScenario: function getScenario() {
      return apiScenario;
    },

    isSkippingSteps: function isSkippingSteps() {
      return self.getScenarioStatus() !== Cucumber.Status.PASSED;
    },

    processStep: function processStep(step, callback) {
      var stepName = step.getName();
      var stepDefinitions = supportCodeLibrary.lookupStepDefinitionsByName(stepName);
      if (stepDefinitions.length === 0) {
        self.skipUndefinedStep(step, callback);
      } else if (stepDefinitions.length > 1) {
        self.skipAmbiguousStep(step, stepDefinitions, callback);
      } else if (options.dryRun || self.isSkippingSteps()) {
        self.skipStep(step, stepDefinitions[0], callback);
      } else {
        self.executeStep(step, stepDefinitions[0], callback);
      }
    },

    executeHookStep: function executeHook(hookStep, callback) {
      var stepDefinition = hookStep.getHook();
      self.executeStep(hookStep, stepDefinition, callback);
    },

    executeStep: function executeStep(step, stepDefinition, callback) {
      var world          = self.getWorld();
      var scenario       = self.getScenario();
      var defaultTimeout = self.getDefaultTimeout();
      stepDefinition.invoke(step, world, scenario, defaultTimeout, function (stepResult) {
        self.visitStepResult(stepResult, callback);
      });
    },

    skipAmbiguousStep: function skipAmbiguousStep(step, stepDefinitions, callback) {
      var ambiguousStepResult = Cucumber.Runtime.StepResult({
        ambiguousStepDefinitions: stepDefinitions,
        step: step,
        status: Cucumber.Status.AMBIGUOUS
      });
      self.visitStepResult(ambiguousStepResult, callback);
    },

    skipStep: function skipStep(step, stepDefinition, callback) {
      var skippedStepResult = Cucumber.Runtime.StepResult({
        step: step,
        stepDefinition: stepDefinition,
        status: Cucumber.Status.SKIPPED
      });
      self.visitStepResult(skippedStepResult, callback);
    },

    skipUndefinedStep: function skipUndefinedStep(step, callback) {
      var undefinedStepResult = Cucumber.Runtime.StepResult({step: step, status: Cucumber.Status.UNDEFINED});
      self.visitStepResult(undefinedStepResult, callback);
    }
  };
  return self;
}

AstTreeWalker.FEATURES_EVENT_NAME                 = 'Features';
AstTreeWalker.FEATURE_EVENT_NAME                  = 'Feature';
AstTreeWalker.BACKGROUND_EVENT_NAME               = 'Background';
AstTreeWalker.SCENARIO_EVENT_NAME                 = 'Scenario';
AstTreeWalker.STEP_EVENT_NAME                     = 'Step';
AstTreeWalker.STEP_RESULT_EVENT_NAME              = 'StepResult';
AstTreeWalker.ROW_EVENT_NAME                      = 'ExampleRow';
AstTreeWalker.BEFORE_EVENT_NAME_PREFIX            = 'Before';
AstTreeWalker.AFTER_EVENT_NAME_PREFIX             = 'After';
AstTreeWalker.NON_EVENT_LEADING_PARAMETERS_COUNT  = 0;
AstTreeWalker.NON_EVENT_TRAILING_PARAMETERS_COUNT = 2;
AstTreeWalker.AROUND_STEP_KEYWORD                 = 'Around ';
AstTreeWalker.BEFORE_STEP_KEYWORD                 = 'Before ';
AstTreeWalker.AFTER_STEP_KEYWORD                  = 'After ';
AstTreeWalker.Event                               = require('./ast_tree_walker/event');

module.exports = AstTreeWalker;

}).call(this,require('_process'))

},{"../../cucumber":1,"./ast_tree_walker/event":40,"_process":78}],40:[function(require,module,exports){
function Event(name, payload) {
  var AstTreeWalker = require('../ast_tree_walker');

  function buildBeforeEventName(eventName) {
    return AstTreeWalker.BEFORE_EVENT_NAME_PREFIX + eventName;
  }

  function buildAfterEventName(eventName) {
    return AstTreeWalker.AFTER_EVENT_NAME_PREFIX + eventName;
  }

  var self = {
    getName: function getName() {
      return name;
    },

    getPayloadItem: function getPayloadItem(itemName) {
      return payload[itemName];
    },

    replicateAsPreEvent: function replicateAsPreEvent() {
      var newName = buildBeforeEventName(name);
      return AstTreeWalker.Event(newName, payload);
    },

    replicateAsPostEvent: function replicateAsPostEvent() {
      var newName = buildAfterEventName(name);
      return AstTreeWalker.Event(newName, payload);
    },

    occurredOn: function occurredOn(eventName) {
      return eventName === name;
    },

    occurredAfter: function occurredAfter(eventName) {
      var afterEventName = buildAfterEventName(eventName);
      return afterEventName === name;
    }
  };

  return self;
}

module.exports = Event;

},{"../ast_tree_walker":39}],41:[function(require,module,exports){
function Attachment(payload) {
  var self = {
    getMimeType:  function getMimeType()  { return payload.mimeType; },
    getData:      function getData()      { return payload.data; }
  };

  return self;
}

module.exports = Attachment;

},{}],42:[function(require,module,exports){
function FeaturesResult(strict) {
  var Cucumber = require('../../cucumber');

  var success = true;

  var self = {
    isSuccessful: function isSuccessful() {
      return success;
    },

    witnessStepResult: function witnessStepResult(stepResult) {
      var stepStatus = stepResult.getStatus();
      switch (stepStatus) {
        case Cucumber.Status.AMBIGUOUS:
        case Cucumber.Status.FAILED:
          success = false;
          break;
        case Cucumber.Status.PENDING:
        case Cucumber.Status.UNDEFINED:
          if (strict) {
            success = false;
          }
          break;
      }
    }
  };

  return self;
}

module.exports = FeaturesResult;

},{"../../cucumber":1}],43:[function(require,module,exports){
function ScenarioResult() {
  var Cucumber = require('../../cucumber');

  var status = Cucumber.Status.PASSED;
  var failureException = null;

  var shouldUpdateStatus = function shouldUpdateStatus(stepStatus) {
    switch (stepStatus) {
      case Cucumber.Status.FAILED:
        return true;
      case Cucumber.Status.AMBIGUOUS:
      case Cucumber.Status.PENDING:
      case Cucumber.Status.SKIPPED:
      case Cucumber.Status.UNDEFINED:
        return status === Cucumber.Status.PASSED;
      default:
        return false;
    }
  };

  var self = {
    getFailureException: function getFailureException() {
      return failureException;
    },

    getStatus: function getStatus() {
      return status;
    },

    witnessStepResult: function witnessStepResult(stepResult) {
      var stepStatus = stepResult.getStatus();
      self.witnessStepStatus(stepStatus);
      if (stepStatus === Cucumber.Status.FAILED) {
        failureException = stepResult.getFailureException();
      }
    },

    witnessStepStatus: function witnessStepWithStatis(stepStatus) {
      if (shouldUpdateStatus(stepStatus)) {
        status = stepStatus;
      }
    }
  };

  return self;
}

module.exports = ScenarioResult;

},{"../../cucumber":1}],44:[function(require,module,exports){
(function (__dirname){
var path = require('path');
var chain = require('stack-chain');

var currentFilter = null;

function filter() {
  currentFilter = chain.filter.attach(function (error, frames) {
    return frames.filter(function (frame) {
      var f = frame.getFileName() || '';
      var ignoredPath = path.join(__dirname, '..');
      return f.indexOf(ignoredPath) === -1;
    });
  });
}

function unfilter() {
  chain.filter.deattach(currentFilter);
}

module.exports = {
  filter: filter,
  unfilter: unfilter
};

}).call(this,"/lib/cucumber/runtime")

},{"path":77,"stack-chain":244}],45:[function(require,module,exports){
function StepResult(payload) {
  var self = {
    getAmbiguousStepDefinitions: function getAmbiguousStepDefinitions() {
      return payload.ambiguousStepDefinitions;
    },

    getAttachments: function getAttachments() {
      return payload.attachments;
    },

    getDuration: function getDuration() {
      return payload.duration;
    },

    getFailureException: function getFailureException() {
      return payload.failureException;
    },

    getStep: function getStep() {
      return payload.step;
    },

    getStepDefinition: function getStepDefinition() {
      return payload.stepDefinition;
    },

    getStatus: function getStatus() {
      return payload.status;
    },

    hasAttachments: function hasAttachments() {
      return payload.attachments.length > 0;
    }
  };

  return self;
}

module.exports = StepResult;

},{}],46:[function(require,module,exports){
var Status = {};

Status.AMBIGUOUS = 'ambiguous';
Status.FAILED = 'failed';
Status.PENDING = 'pending';
Status.PASSED = 'passed';
Status.SKIPPED = 'skipped';
Status.UNDEFINED = 'undefined';

module.exports = Status;

},{}],47:[function(require,module,exports){
var SupportCode                          = {};
SupportCode.Hook                         = require('./support_code/hook');
SupportCode.AroundHook                   = require('./support_code/around_hook');
SupportCode.Library                      = require('./support_code/library');
SupportCode.StepDefinition               = require('./support_code/step_definition');
SupportCode.StepDefinitionSnippetBuilder = require('./support_code/step_definition_snippet_builder');
module.exports                           = SupportCode;

},{"./support_code/around_hook":48,"./support_code/hook":49,"./support_code/library":50,"./support_code/step_definition":51,"./support_code/step_definition_snippet_builder":52}],48:[function(require,module,exports){
function AroundHook(code, options, uri, line) {
  var Cucumber = require('../../cucumber');
  var self = Cucumber.SupportCode.Hook(code, options, uri, line);
  var afterStep;

  self.setAfterStep = function setAfterStep(newAfterStep) {
    afterStep = newAfterStep;
  };

  self.buildCodeCallback = function buildCodeCallback(callback) {
    function codeCallback(error, postScenarioCallback) {
      if (postScenarioCallback) {
        var afterHook = Cucumber.SupportCode.Hook(postScenarioCallback, {noScenario: true}, uri, line);
        afterStep.setHook(afterHook);
      }

      callback(error);
    }

    return codeCallback;
  };

  return self;
}

module.exports = AroundHook;

},{"../../cucumber":1}],49:[function(require,module,exports){
function Hook(code, options, uri, line) {
  var Cucumber = require('../../cucumber');
  var self = Cucumber.SupportCode.StepDefinition(Hook.EMPTY_PATTERN, {}, code, uri, line);
  var tags = options.tags || [];

  self.matchesStepName = function matchesStepName() {
    return false;
  };

  self.buildInvocationParameters = function buildInvocationParameters(step, scenario, callback) {
    if (options.noScenario) {
      return [callback];
    } else {
      return [scenario, callback];
    }
  };

  self.appliesToScenario = function appliesToScenario(scenario) {
    var astFilter = self.getAstFilter();
    return astFilter.isElementEnrolled(scenario);
  };

  self.getAstFilter = function getAstFilter() {
    var tagGroups = Cucumber.TagGroupParser.getTagGroupsFromStrings(tags);
    var rules = tagGroups.map(function (tagGroup) {
      var rule = Cucumber.Ast.Filter.AnyOfTagsRule(tagGroup);
      return rule;
    });
    var astFilter = Cucumber.Ast.Filter(rules);
    return astFilter;
  };

  self.validCodeLengths = function validCodeLengths (parameters) {
    var valid = [parameters.length - 1, parameters.length];
    if (!options.noScenario) {
      valid.unshift(parameters.length - 2);
    }
    return valid;
  };

  self.invalidCodeLengthMessage = function invalidCodeLengthMessage() {
    var syncOrPromiseLength = options.noScenario ? '0' : '0 or 1';
    var callbackLength = options.noScenario ? '1' : '2';
    return self.buildInvalidCodeLengthMessage(syncOrPromiseLength, callbackLength);
  };

  self.getType = function getType () {
    return 'hook';
  };

  return self;
}

Hook.EMPTY_PATTERN = '';

module.exports = Hook;

},{"../../cucumber":1}],50:[function(require,module,exports){
function Library(supportCodeDefinition) {
  var Cucumber = require('../../cucumber');
  var callsite = require('callsite');

  var listeners        = [];
  var stepDefinitions  = [];
  var aroundHooks      = [];
  var beforeHooks      = [];
  var afterHooks       = [];
  var World            = function World() {};
  var defaultTimeout   = 5 * 1000;

  function createEventListenerMethod(library, eventName) {
    return function (handler) {
      library.registerHandler(eventName, handler);
    };
  }

  function appendEventHandlers(supportCodeHelper, library) {
    var Cucumber = require('../../cucumber');
    var events = Cucumber.Listener.Events;
    var eventName;

    for (eventName in events) {
      if (events.hasOwnProperty(eventName)) {
        supportCodeHelper[eventName] = createEventListenerMethod(library, eventName);
      }
    }
  }

  var self = {
    lookupAroundHooksByScenario: function lookupBeforeHooksByScenario(scenario) {
      return self.lookupHooksByScenario(aroundHooks, scenario);
    },

    lookupBeforeHooksByScenario: function lookupBeforeHooksByScenario(scenario) {
      return self.lookupHooksByScenario(beforeHooks, scenario);
    },

    lookupAfterHooksByScenario: function lookupBeforeHooksByScenario(scenario) {
      return self.lookupHooksByScenario(afterHooks, scenario);
    },

    lookupHooksByScenario: function lookupHooksByScenario(hooks, scenario) {
      return hooks.filter(function (hook) {
        return hook.appliesToScenario(scenario);
      });
    },

    lookupStepDefinitionsByName: function lookupStepDefinitionsByName(name) {
      return stepDefinitions.filter(function (stepDefinition) {
        return stepDefinition.matchesStepName(name);
      });
    },

    defineHook: function defineHook(builder, collection) {
      return function() {
        var tagGroupStrings = Cucumber.Util.Arguments(arguments);
        var code = tagGroupStrings.pop();
        var site = callsite();
        var line = site[1].getLineNumber();
        var uri = site[1].getFileName();
        var hook = builder(code, {tags: tagGroupStrings}, uri, line);
        collection.push(hook);
      };
    },

    defineStep: function defineStep(name, options, code) {
      if (typeof(options) === 'function') {
        code = options;
        options = {};
      }
      var site = callsite();
      var line = site[1].getLineNumber();
      var uri = site[1].getFileName();
      var stepDefinition = Cucumber.SupportCode.StepDefinition(name, options, code, uri, line);
      stepDefinitions.push(stepDefinition);
    },

    registerListener: function registerListener(listener) {
      listeners.push(listener);
    },

    registerHandler: function registerHandler(eventName, handler) {
      var listener = Cucumber.Listener();
      listener.setHandlerForEvent(eventName, handler);
      self.registerListener(listener);
    },

    getListeners: function getListeners() {
      return listeners;
    },

    instantiateNewWorld: function instantiateNewWorld() {
      return new World();
    },

    getDefaultTimeout: function getDefaultTimeout() {
      return defaultTimeout;
    },

    setDefaultTimeout: function setDefaultTimeout(milliseconds) {
      defaultTimeout = milliseconds;
    }
  };

  var supportCodeHelper = {
    Around            : self.defineHook(Cucumber.SupportCode.AroundHook, aroundHooks),
    Before            : self.defineHook(Cucumber.SupportCode.Hook, beforeHooks),
    After             : self.defineHook(Cucumber.SupportCode.Hook, afterHooks),
    Given             : self.defineStep,
    When              : self.defineStep,
    Then              : self.defineStep,
    defineStep        : self.defineStep,
    registerListener  : self.registerListener,
    registerHandler   : self.registerHandler,
    setDefaultTimeout : self.setDefaultTimeout,
    World             : World
  };

  appendEventHandlers(supportCodeHelper, self);
  supportCodeDefinition.call(supportCodeHelper);
  World = supportCodeHelper.World;

  return self;
}

module.exports = Library;

},{"../../cucumber":1,"callsite":109}],51:[function(require,module,exports){
(function (process){
function StepDefinition(pattern, options, code, uri, line) {
  var Cucumber = require('../../cucumber');

  function time() {
    if (typeof process !== 'undefined' && process.hrtime) {
      return process.hrtime();
    }
    else {
      return new Date().getTime();
    }
  }

  function durationInNanoseconds(start) {
    if (typeof process !== 'undefined' && process.hrtime) {
      var duration = process.hrtime(start);
      return duration[0] * 1e9 + duration[1];
    }
    else {
      return (new Date().getTime() - start) * 1e6;
    }
  }

  var self = {
    getLine: function getLine() {
      return line;
    },

    getPattern: function getPatternRegexp() {
      return pattern;
    },

    getPatternRegexp: function getPatternRegexp() {
      var regexp;
      if (pattern.replace) {
        var regexpString = pattern
          .replace(StepDefinition.UNSAFE_STRING_CHARACTERS_REGEXP, StepDefinition.PREVIOUS_REGEXP_MATCH)
          .replace(StepDefinition.QUOTED_DOLLAR_PARAMETER_REGEXP, StepDefinition.QUOTED_DOLLAR_PARAMETER_SUBSTITUTION)
          .replace(StepDefinition.DOLLAR_PARAMETER_REGEXP, StepDefinition.DOLLAR_PARAMETER_SUBSTITUTION);
        regexpString =
          StepDefinition.STRING_PATTERN_REGEXP_PREFIX +
          regexpString +
          StepDefinition.STRING_PATTERN_REGEXP_SUFFIX;
        regexp = new RegExp(regexpString);
      }
      else
        regexp = pattern;
      return regexp;
    },

    getUri: function getUri() {
      return uri;
    },

    matchesStepName: function matchesStepName(stepName) {
      var regexp = self.getPatternRegexp();
      return regexp.test(stepName);
    },

    invoke: function invoke(step, world, scenario, defaultTimeout, callback) {
      var start = time();
      var timeoutId;
      var handleException;

      var finish = function finish(result) {
        Cucumber.Debug.notice('cleaning up after step\n', 'Cucumber.SupportCode.StepDefinition', 5);
        Cucumber.Util.Exception.unregisterUncaughtExceptionHandler(handleException);
        if (timeoutId) {
          clearTimeout(timeoutId);
        }
        callback(result);
        callback = function() {};
      };

      var codeCallback = self.buildCodeCallback(function (error) {
        Cucumber.Debug.notice('stepdef calling back (via callback(...))\n', 'Cucumber.SupportCode.StepDefinition', 5);
        var stepResultData = {
          step: step,
          stepDefinition: self,
          duration: durationInNanoseconds(start),
          attachments: scenario.getAttachments(),
          status: (error ? Cucumber.Status.FAILED : Cucumber.Status.PASSED)
        };

        if (error) {
          stepResultData.failureException = error || new Error(StepDefinition.UNKNOWN_STEP_FAILURE_MESSAGE);
        }

        var stepResult = Cucumber.Runtime.StepResult(stepResultData);
        finish(stepResult);
      });

      codeCallback.pending = function pending(reason) {
        Cucumber.Debug.notice('stepdef calling back (via callback.pending())\n', 'Cucumber.SupportCode.StepDefinition', 5);
        var pendingStepResult = Cucumber.Runtime.StepResult({
          step: step,
          stepDefinition: self,
          pendingReason: reason,
          attachments: scenario.getAttachments(),
          status: Cucumber.Status.PENDING
        });
        finish(pendingStepResult);
      };

      var parameters = self.buildInvocationParameters(step, scenario, codeCallback);
      handleException = self.buildExceptionHandlerToCodeCallback(codeCallback);

      function onPromiseFulfilled() { codeCallback(); }
      function onPromiseRejected(error) {
        codeCallback(error || new Error(StepDefinition.UNKNOWN_STEP_FAILURE_MESSAGE));
      }

      var timeoutInMilliseconds = options.timeout || defaultTimeout;

      function initializeTimeout() {
        timeoutId = setTimeout(function(){
          codeCallback(new Error('Step timed out after ' + timeoutInMilliseconds + ' milliseconds'));
        }, timeoutInMilliseconds);
      }

      Cucumber.Util.Exception.registerUncaughtExceptionHandler(handleException);

      var validCodeLengths = self.validCodeLengths(parameters);
      if (validCodeLengths.indexOf(code.length) === -1) {
        return codeCallback(new Error(self.invalidCodeLengthMessage(parameters)));
      }

      initializeTimeout();

      var result;
      try {
        result = code.apply(world, parameters);
      } catch (exception) {
        return handleException(exception);
      }

      var callbackInterface = code.length === parameters.length;
      var promiseInterface = result && typeof result.then === 'function';
      if (callbackInterface && promiseInterface) {
        codeCallback(new Error(self.getType() + ' accepts a callback and returns a promise'));
      } else if (promiseInterface) {
        result.then(onPromiseFulfilled, onPromiseRejected);
      } else if (!callbackInterface) {
        codeCallback();
      }
    },

    buildCodeCallback: function buildCodeCallback(callback) {
      return callback;
    },

    buildInvocationParameters: function buildInvocationParameters(step, scenario, callback) {
      var stepName      = step.getName();
      var patternRegexp = self.getPatternRegexp();
      var parameters    = patternRegexp.exec(stepName);
      parameters.shift();
      if (step.hasAttachment()) {
        var attachmentContents = step.getAttachmentContents();
        parameters.push(attachmentContents);
      }
      parameters.push(callback);
      return parameters;
    },

    buildExceptionHandlerToCodeCallback: function buildExceptionHandlerToCodeCallback(codeCallback) {
      var exceptionHandler = function handleScenarioException(exception) {
        if (exception)
          Cucumber.Debug.warn(exception.stack || exception, 'exception inside feature', 3);
        codeCallback(exception);
      };
      return exceptionHandler;
    },

    validCodeLengths: function validCodeLengths (parameters) {
      return [parameters.length - 1, parameters.length];
    },

    invalidCodeLengthMessage: function invalidCodeLengthMessage(parameters) {
      return self.buildInvalidCodeLengthMessage(parameters.length - 1, parameters.length);
    },

    buildInvalidCodeLengthMessage: function buildInvalidCodeLengthMessage(syncOrPromiseLength, callbackLength) {
      return self.getType() + ' has ' + code.length + ' arguments' +
          ', should have ' + syncOrPromiseLength + ' (if synchronous or returning a promise)' +
          ' or '  + callbackLength + ' (if accepting a callback)';
    },

    getType: function getType () {
      return 'step definition';
    }
  };
  return self;
}

StepDefinition.DOLLAR_PARAMETER_REGEXP              = /\$[a-zA-Z_-]+/g;
StepDefinition.DOLLAR_PARAMETER_SUBSTITUTION        = '(.*)';
StepDefinition.PREVIOUS_REGEXP_MATCH                = '\\$&';
StepDefinition.QUOTED_DOLLAR_PARAMETER_REGEXP       = /"\$[a-zA-Z_-]+"/g;
StepDefinition.QUOTED_DOLLAR_PARAMETER_SUBSTITUTION = '"([^"]*)"';
StepDefinition.STRING_PATTERN_REGEXP_PREFIX         = '^';
StepDefinition.STRING_PATTERN_REGEXP_SUFFIX         = '$';
StepDefinition.UNSAFE_STRING_CHARACTERS_REGEXP      = /[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\|]/g;
StepDefinition.UNKNOWN_STEP_FAILURE_MESSAGE         = 'Step failure';

module.exports = StepDefinition;

}).call(this,require('_process'))

},{"../../cucumber":1,"_process":78}],52:[function(require,module,exports){
var _  = require('lodash');
var camelCase = require('camel-case');

var NUMBER_PATTERN        = /\d+/gi;
var NUMBER_MATCHING_GROUP = '(\\d+)';

var QUOTED_STRING_PATTERN        = /"[^"]*"/gi;
var QUOTED_STRING_MATCHING_GROUP = '"([^"]*)"';

var OUTLINE_STRING_PATTERN        = /<[^>]*>/gi;
var OUTLINE_STRING_MATCHING_GROUP = '(.*)';

function StepDefinitionSnippetBuilder(step, syntax) {
  var Cucumber = require('../../cucumber');

  var self = {
    buildSnippet: function buildSnippet() {
      var functionName = self.buildStepDefinitionFunctionName();
      var pattern      = self.buildStepDefinitionPattern();
      var parameters   = self.buildStepDefinitionParameters();
      var comment      = 'Write code here that turns the phrase above into concrete actions';
      return syntax.build(functionName, pattern, parameters, comment);
    },

    buildStepDefinitionFunctionName: function buildStepDefinitionFunctionName() {
      if (step.isOutcomeStep())
        return 'Then';
      else if (step.isEventStep())
        return 'When';
      else
        return 'Given';
    },

    buildStepDefinitionPattern: function buildStepDefinitionPattern() {
      var stepName              = step.isOutlineStep() ? step.getOriginalStep().getName() : step.getName();
      var escapedStepName       = Cucumber.Util.RegExp.escapeString(stepName);
      var parameterizedStepName = self.parameterizeStepName(escapedStepName);
      var pattern               = '/^' + parameterizedStepName + '$/';
      return pattern;
    },

    buildStepDefinitionParameters: function buildStepDefinitionParameters() {
      var parameters = self.getStepDefinitionPatternMatchingGroupParameters();
      if (step.hasDocString())
        parameters.push('string');
      else if (step.hasDataTable())
        parameters.push('table');
      parameters.push('callback');
      return parameters;
    },

    getStepDefinitionPatternMatchingGroupParameters: function getStepDefinitionPatternMatchingGroupParameters() {
      var parameterCount = self.countStepDefinitionPatternMatchingGroups();
      var parameters = _.times(parameterCount, function (n) {
        return 'arg' + (n + 1);
      });
      var stepName = step.isOutlineStep() ? step.getOriginalStep().getName() : step.getName();
      var outlineMatch = stepName.match(OUTLINE_STRING_PATTERN);
      if (outlineMatch) {
        var outlineParams = outlineMatch.map(function (str) {
          var name = str.substr(1, str.length - 2);
          return camelCase(name);
        });
        parameters = parameters.concat(outlineParams);
      }
      return parameters;
    },

    countStepDefinitionPatternMatchingGroups: function countStepDefinitionPatternMatchingGroups() {
      var stepDefinitionPattern    = self.buildStepDefinitionPattern();
      var numberMatchingGroupCount = Cucumber.Util.String.count(stepDefinitionPattern, NUMBER_MATCHING_GROUP);
      var quotedStringMatchingGroupCount = Cucumber.Util.String.count(stepDefinitionPattern, QUOTED_STRING_MATCHING_GROUP);
      var count = numberMatchingGroupCount + quotedStringMatchingGroupCount;
      return count;
    },

    parameterizeStepName: function parameterizeStepName(stepName) {
      var parameterizedStepName =
          stepName
          .replace(NUMBER_PATTERN, NUMBER_MATCHING_GROUP)
          .replace(QUOTED_STRING_PATTERN, QUOTED_STRING_MATCHING_GROUP)
          .replace(OUTLINE_STRING_PATTERN, OUTLINE_STRING_MATCHING_GROUP);
      return parameterizedStepName;
    }
  };
  return self;
}

StepDefinitionSnippetBuilder.JavaScriptSyntax = require('./step_definition_snippet_builder/javascript_syntax');

module.exports = StepDefinitionSnippetBuilder;

},{"../../cucumber":1,"./step_definition_snippet_builder/javascript_syntax":53,"camel-case":110,"lodash":241}],53:[function(require,module,exports){
function JavaScriptSyntax() {
  return {
    build: function build (functionName, pattern, parameters, comment) {
      var callbackName = parameters[parameters.length - 1];
      var snippet =
        'this.' + functionName + '(' + pattern + ', function (' + parameters.join(', ') + ') {' + '\n' +
        '  // ' + comment + '\n' +
        '  ' + callbackName + '.pending();' + '\n' +
        '});' + '\n';
      return snippet;
    }
  };
}

module.exports = JavaScriptSyntax;

},{}],54:[function(require,module,exports){
function TagGroupParser(tagGroupString) {
  var self = {
    parse: function parse() {
      var splitTags = tagGroupString.split(TagGroupParser.TAG_SEPARATOR);
      var trimmedTags = splitTags.map(function (tag) { return tag.trim(); });
      return trimmedTags;
    }
  };
  return self;
}

TagGroupParser.getTagGroupsFromStrings = function getTagGroupsFromStrings(tagGroupStrings) {
  var Cucumber = require('../cucumber');

  var tagGroups = tagGroupStrings.map(function (tagOptionValue) {
    var tagGroupParser = Cucumber.TagGroupParser(tagOptionValue);
    var tagGroup       = tagGroupParser.parse();
    return tagGroup;
  });
  return tagGroups;
};

TagGroupParser.TAG_SEPARATOR = ',';

module.exports = TagGroupParser;

},{"../cucumber":1}],55:[function(require,module,exports){
var Type           = {};
Type.Collection    = require('./type/collection');
Type.HashDataTable = require('./type/hash_data_table');
Type.String        = require('./type/string');
module.exports     = Type;

},{"./type/collection":56,"./type/hash_data_table":57,"./type/string":58}],56:[function(require,module,exports){
function Collection() {
  var items = [];

  var self = {
    add: function add(item) {
      items.push(item);
    },

    insert: function insert(index, item) {
      items.splice(index, 0, item);
    },

    removeAtIndex: function removeAtIndex(index) {
      items.splice(index, 1);
    },

    unshift: function unshift(item) {
      items.unshift(item);
    },

    shift: function shift() {
      return items.shift();
    },

    clear: function clear() {
      items.length = 0;
    },

    indexOf: function indexOf(item) {
      return items.indexOf(item);
    },

    getAtIndex: function getAtIndex(index) {
      return items[index];
    },

    getLast: function getLast() {
      return items[items.length - 1];
    },

    forEach: function forEach(userFunction) {
      var itemsCopy = items.slice(0);
      itemsCopy.forEach(userFunction);
    },

    asyncForEach: function asyncForEach(userFunction, callback) {
      var itemsCopy = items.slice(0);

      function iterate() {
        if (itemsCopy.length > 0) {
          var item = itemsCopy.shift();
          userFunction(item, function () {
            iterate();
          });
        } else {
          callback();
        }
      }

      iterate();
    },

    syncMap: function map(userFunction) {
      var newCollection = new Collection();
      items.map(function (item) {
        newCollection.add(userFunction(item));
      });
      return newCollection;
    },

    sort: function sort(comparator) {
      var sortedItems = items.sort(comparator);
      var sortedCollection = new Collection();
      sortedItems.forEach(function (item) {
        sortedCollection.add(item);
      });
      return sortedCollection;
    },

    length: function length() {
      return items.length;
    },

    toArray: function toArray() {
      return items.slice(0);
    },

    filter: function (predicate) {
      var filteredItems = items.filter(predicate);
      var filteredCollection = new Collection();
      filteredItems.forEach(function (item) {
        filteredCollection.add(item);
      });
      return filteredCollection;
    }
  };
  return self;
}

module.exports = Collection;

},{}],57:[function(require,module,exports){
function HashDataTable(rawArray) {
  var self = {
    raw: function raw() {
      var hashKeys        = self.getHashKeys();
      var hashValueArrays = self.getHashValueArrays();
      var hashes          = self.createHashesFromKeysAndValueArrays(hashKeys, hashValueArrays);
      return hashes;
    },

    getHashKeys: function getHashKeys() {
      return rawArray[0];
    },

    getHashValueArrays: function getHashValueArrays() {
      var _rawArray = [].concat(rawArray);
      _rawArray.shift();
      return _rawArray;
    },

    createHashesFromKeysAndValueArrays: function createHashesFromKeysAndValueArrays(keys, valueArrays) {
      var hashes = [];
      valueArrays.forEach(function (values) {
        var hash = self.createHashFromKeysAndValues(keys, values);
        hashes.push(hash);
      });
      return hashes;
    },

    createHashFromKeysAndValues: function createHashFromKeysAndValues(keys, values) {
      var hash = {};
      var len  = keys.length;
      for (var i = 0; i < len; i++) {
        hash[keys[i]] = values[i];
      }
      return hash;
    }
  };
  return self;
}

module.exports = HashDataTable;

},{}],58:[function(require,module,exports){
if (!String.prototype.trim) {
  String.prototype.trim = function () {
    return this.replace(/^\s+|\s+$/g,'');
  };
}

module.exports = String;

},{}],59:[function(require,module,exports){
var Util       = {};
Util.Arguments = require('./util/arguments');
Util.asyncForEach = require('./util/async_for_each');
Util.Exception = require('./util/exception');
Util.RegExp    = require('./util/reg_exp');
Util.String    = require('./util/string');
Util.Colors    = require('./util/colors');
module.exports = Util;

},{"./util/arguments":60,"./util/async_for_each":61,"./util/colors":62,"./util/exception":63,"./util/reg_exp":64,"./util/string":65}],60:[function(require,module,exports){
function Arguments(argumentsObject) {
  return Array.prototype.slice.call(argumentsObject);
}

module.exports = Arguments;

},{}],61:[function(require,module,exports){
var asyncForEach = function asyncForEach(items, userFunction, callback) {
  var itemsCopy = items.slice(0);

  function iterate() {
    if (itemsCopy.length > 0) {
      var item = itemsCopy.shift();
      userFunction(item, function () {
        iterate();
      });
    } else {
      callback();
    }
  }

  iterate();
};

module.exports = asyncForEach;

},{}],62:[function(require,module,exports){
var colors = require('colors/safe');

function Colors (useColors) {
  colors.enabled = useColors;
  return {
    ambiguous: colors.magenta,
    comment: colors.grey,
    failed: colors.red,
    passed: colors.green,
    pending: colors.yellow,
    skipped: colors.cyan,
    tag: colors.cyan,
    undefined: colors.yellow
  };
}

module.exports = Colors;

},{"colors/safe":138}],63:[function(require,module,exports){
(function (process){
/* jshint -W117 */

var Exception = {
  registerUncaughtExceptionHandler: function registerUncaughtExceptionHandler(exceptionHandler) {
    if (process.on) {
      process.on('uncaughtException', exceptionHandler);
    } else if (typeof(window) !== 'undefined') {
      window.onerror = exceptionHandler;
    }
  },

  unregisterUncaughtExceptionHandler: function unregisterUncaughtExceptionHandler(exceptionHandler) {
    if (process.removeListener) {
      process.removeListener('uncaughtException', exceptionHandler);
    } else if (typeof(window) !== 'undefined') {
      window.onerror = void(0);
    }
  }
};

module.exports = Exception;

}).call(this,require('_process'))

},{"_process":78}],64:[function(require,module,exports){
var _RegExp = {
  escapeString: function escapeString(string) {
    var escaped = string.replace(_RegExp.ESCAPE_PATTERN, _RegExp.ESCAPE_REPLACEMENT);
    return escaped;
  }
};

_RegExp.ESCAPE_PATTERN     = /[-[\]{}()*+?.\\^$|#\n\/]/g;
_RegExp.ESCAPE_REPLACEMENT = '\\$&';
module.exports = _RegExp;

},{}],65:[function(require,module,exports){
var _String = {
  count: function count(hayStack, needle) {
    var splitHayStack = hayStack.split(needle);
    return splitHayStack.length - 1;
  }
};
module.exports = _String;

},{}],66:[function(require,module,exports){
function VolatileConfiguration(features, supportCodeInitializer, options) {
  var Cucumber = require('../cucumber');
  var supportCodeLibrary = Cucumber.SupportCode.Library(supportCodeInitializer);

  options = options || {};
  var strictMode = !!options.strict;
  var tagGroupStrings = options.tags || [];
  var backtrace = !!options.backtrace;

  var self = {
    isStrictRequested: function isStrictRequested() {
      return strictMode;
    },

    getFeatureSources: function getFeatureSources() {
      if (features.replace) { // single source
        var featureNameSourcePair = [VolatileConfiguration.FEATURE_SOURCE_NAME, features];
        return [featureNameSourcePair];
      } else { // multiple features
        return features;
      }
    },

    getAstFilter: function getAstFilter() {
      var tagRules = self.getTagAstFilterRules();
      var astFilter = Cucumber.Ast.Filter(tagRules);
      return astFilter;
    },

    getSupportCodeLibrary: function getSupportCodeLibrary() {
      return supportCodeLibrary;
    },

    getTagAstFilterRules: function getTagAstFilterRules() {
      var rules = [];
      tagGroupStrings.forEach(function (tagGroupString) {
        var rule = self.buildAstFilterRuleFromTagGroupString(tagGroupString);
        rules.push(rule);
      });
      return rules;
    },

    buildAstFilterRuleFromTagGroupString: function buildAstFilterRuleFromTagGroupString(tagGroupString) {
      var tagGroupParser = Cucumber.TagGroupParser(tagGroupString);
      var tagGroup       = tagGroupParser.parse();
      var rule           = Cucumber.Ast.Filter.AnyOfTagsRule(tagGroup);
      return rule;
    },

    shouldFilterStackTraces: function shouldFilterStackTraces() {
      return !backtrace;
    }
  };
  return self;
}

VolatileConfiguration.FEATURE_SOURCE_NAME = '(feature)';

module.exports = VolatileConfiguration;

},{"../cucumber":1}],67:[function(require,module,exports){
arguments[4][24][0].apply(exports,arguments)
},{"dup":24}],68:[function(require,module,exports){
arguments[4][24][0].apply(exports,arguments)
},{"dup":24}],69:[function(require,module,exports){
(function (global){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */

'use strict'

var base64 = require('base64-js')
var ieee754 = require('ieee754')
var isArray = require('isarray')

exports.Buffer = Buffer
exports.SlowBuffer = SlowBuffer
exports.INSPECT_MAX_BYTES = 50
Buffer.poolSize = 8192 // not used by this implementation

var rootParent = {}

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Use Object implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * Due to various browser bugs, sometimes the Object implementation will be used even
 * when the browser supports typed arrays.
 *
 * Note:
 *
 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
 *
 *   - Safari 5-7 lacks support for changing the `Object.prototype.constructor` property
 *     on objects.
 *
 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
 *
 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
 *     incorrect length in some situations.

 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
 * get the Object implementation, which is slower but behaves correctly.
 */
Buffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined
  ? global.TYPED_ARRAY_SUPPORT
  : typedArraySupport()

function typedArraySupport () {
  function Bar () {}
  try {
    var arr = new Uint8Array(1)
    arr.foo = function () { return 42 }
    arr.constructor = Bar
    return arr.foo() === 42 && // typed array instances can be augmented
        arr.constructor === Bar && // constructor can be set
        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`
  } catch (e) {
    return false
  }
}

function kMaxLength () {
  return Buffer.TYPED_ARRAY_SUPPORT
    ? 0x7fffffff
    : 0x3fffffff
}

/**
 * Class: Buffer
 * =============
 *
 * The Buffer constructor returns instances of `Uint8Array` that are augmented
 * with function properties for all the node `Buffer` API functions. We use
 * `Uint8Array` so that square bracket notation works as expected -- it returns
 * a single octet.
 *
 * By augmenting the instances, we can avoid modifying the `Uint8Array`
 * prototype.
 */
function Buffer (arg) {
  if (!(this instanceof Buffer)) {
    // Avoid going through an ArgumentsAdaptorTrampoline in the common case.
    if (arguments.length > 1) return new Buffer(arg, arguments[1])
    return new Buffer(arg)
  }

  if (!Buffer.TYPED_ARRAY_SUPPORT) {
    this.length = 0
    this.parent = undefined
  }

  // Common case.
  if (typeof arg === 'number') {
    return fromNumber(this, arg)
  }

  // Slightly less common case.
  if (typeof arg === 'string') {
    return fromString(this, arg, arguments.length > 1 ? arguments[1] : 'utf8')
  }

  // Unusual.
  return fromObject(this, arg)
}

function fromNumber (that, length) {
  that = allocate(that, length < 0 ? 0 : checked(length) | 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) {
    for (var i = 0; i < length; i++) {
      that[i] = 0
    }
  }
  return that
}

function fromString (that, string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') encoding = 'utf8'

  // Assumption: byteLength() return value is always < kMaxLength.
  var length = byteLength(string, encoding) | 0
  that = allocate(that, length)

  that.write(string, encoding)
  return that
}

function fromObject (that, object) {
  if (Buffer.isBuffer(object)) return fromBuffer(that, object)

  if (isArray(object)) return fromArray(that, object)

  if (object == null) {
    throw new TypeError('must start with number, buffer, array or string')
  }

  if (typeof ArrayBuffer !== 'undefined') {
    if (object.buffer instanceof ArrayBuffer) {
      return fromTypedArray(that, object)
    }
    if (object instanceof ArrayBuffer) {
      return fromArrayBuffer(that, object)
    }
  }

  if (object.length) return fromArrayLike(that, object)

  return fromJsonObject(that, object)
}

function fromBuffer (that, buffer) {
  var length = checked(buffer.length) | 0
  that = allocate(that, length)
  buffer.copy(that, 0, 0, length)
  return that
}

function fromArray (that, array) {
  var length = checked(array.length) | 0
  that = allocate(that, length)
  for (var i = 0; i < length; i += 1) {
    that[i] = array[i] & 255
  }
  return that
}

// Duplicate of fromArray() to keep fromArray() monomorphic.
function fromTypedArray (that, array) {
  var length = checked(array.length) | 0
  that = allocate(that, length)
  // Truncating the elements is probably not what people expect from typed
  // arrays with BYTES_PER_ELEMENT > 1 but it's compatible with the behavior
  // of the old Buffer constructor.
  for (var i = 0; i < length; i += 1) {
    that[i] = array[i] & 255
  }
  return that
}

function fromArrayBuffer (that, array) {
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    array.byteLength
    that = Buffer._augment(new Uint8Array(array))
  } else {
    // Fallback: Return an object instance of the Buffer class
    that = fromTypedArray(that, new Uint8Array(array))
  }
  return that
}

function fromArrayLike (that, array) {
  var length = checked(array.length) | 0
  that = allocate(that, length)
  for (var i = 0; i < length; i += 1) {
    that[i] = array[i] & 255
  }
  return that
}

// Deserialize { type: 'Buffer', data: [1,2,3,...] } into a Buffer object.
// Returns a zero-length buffer for inputs that don't conform to the spec.
function fromJsonObject (that, object) {
  var array
  var length = 0

  if (object.type === 'Buffer' && isArray(object.data)) {
    array = object.data
    length = checked(array.length) | 0
  }
  that = allocate(that, length)

  for (var i = 0; i < length; i += 1) {
    that[i] = array[i] & 255
  }
  return that
}

if (Buffer.TYPED_ARRAY_SUPPORT) {
  Buffer.prototype.__proto__ = Uint8Array.prototype
  Buffer.__proto__ = Uint8Array
} else {
  // pre-set for values that may exist in the future
  Buffer.prototype.length = undefined
  Buffer.prototype.parent = undefined
}

function allocate (that, length) {
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = Buffer._augment(new Uint8Array(length))
    that.__proto__ = Buffer.prototype
  } else {
    // Fallback: Return an object instance of the Buffer class
    that.length = length
    that._isBuffer = true
  }

  var fromPool = length !== 0 && length <= Buffer.poolSize >>> 1
  if (fromPool) that.parent = rootParent

  return that
}

function checked (length) {
  // Note: cannot use `length < kMaxLength` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= kMaxLength()) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + kMaxLength().toString(16) + ' bytes')
  }
  return length | 0
}

function SlowBuffer (subject, encoding) {
  if (!(this instanceof SlowBuffer)) return new SlowBuffer(subject, encoding)

  var buf = new Buffer(subject, encoding)
  delete buf.parent
  return buf
}

Buffer.isBuffer = function isBuffer (b) {
  return !!(b != null && b._isBuffer)
}

Buffer.compare = function compare (a, b) {
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError('Arguments must be Buffers')
  }

  if (a === b) return 0

  var x = a.length
  var y = b.length

  var i = 0
  var len = Math.min(x, y)
  while (i < len) {
    if (a[i] !== b[i]) break

    ++i
  }

  if (i !== len) {
    x = a[i]
    y = b[i]
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'binary':
    case 'base64':
    case 'raw':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function concat (list, length) {
  if (!isArray(list)) throw new TypeError('list argument must be an Array of Buffers.')

  if (list.length === 0) {
    return new Buffer(0)
  }

  var i
  if (length === undefined) {
    length = 0
    for (i = 0; i < list.length; i++) {
      length += list[i].length
    }
  }

  var buf = new Buffer(length)
  var pos = 0
  for (i = 0; i < list.length; i++) {
    var item = list[i]
    item.copy(buf, pos)
    pos += item.length
  }
  return buf
}

function byteLength (string, encoding) {
  if (typeof string !== 'string') string = '' + string

  var len = string.length
  if (len === 0) return 0

  // Use a for loop to avoid recursion
  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'binary':
      // Deprecated
      case 'raw':
      case 'raws':
        return len
      case 'utf8':
      case 'utf-8':
        return utf8ToBytes(string).length
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2
      case 'hex':
        return len >>> 1
      case 'base64':
        return base64ToBytes(string).length
      default:
        if (loweredCase) return utf8ToBytes(string).length // assume utf8
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}
Buffer.byteLength = byteLength

function slowToString (encoding, start, end) {
  var loweredCase = false

  start = start | 0
  end = end === undefined || end === Infinity ? this.length : end | 0

  if (!encoding) encoding = 'utf8'
  if (start < 0) start = 0
  if (end > this.length) end = this.length
  if (end <= start) return ''

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'binary':
        return binarySlice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.toString = function toString () {
  var length = this.length | 0
  if (length === 0) return ''
  if (arguments.length === 0) return utf8Slice(this, 0, length)
  return slowToString.apply(this, arguments)
}

Buffer.prototype.equals = function equals (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function inspect () {
  var str = ''
  var max = exports.INSPECT_MAX_BYTES
  if (this.length > 0) {
    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
    if (this.length > max) str += ' ... '
  }
  return '<Buffer ' + str + '>'
}

Buffer.prototype.compare = function compare (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return 0
  return Buffer.compare(this, b)
}

Buffer.prototype.indexOf = function indexOf (val, byteOffset) {
  if (byteOffset > 0x7fffffff) byteOffset = 0x7fffffff
  else if (byteOffset < -0x80000000) byteOffset = -0x80000000
  byteOffset >>= 0

  if (this.length === 0) return -1
  if (byteOffset >= this.length) return -1

  // Negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = Math.max(this.length + byteOffset, 0)

  if (typeof val === 'string') {
    if (val.length === 0) return -1 // special case: looking for empty string always fails
    return String.prototype.indexOf.call(this, val, byteOffset)
  }
  if (Buffer.isBuffer(val)) {
    return arrayIndexOf(this, val, byteOffset)
  }
  if (typeof val === 'number') {
    if (Buffer.TYPED_ARRAY_SUPPORT && Uint8Array.prototype.indexOf === 'function') {
      return Uint8Array.prototype.indexOf.call(this, val, byteOffset)
    }
    return arrayIndexOf(this, [ val ], byteOffset)
  }

  function arrayIndexOf (arr, val, byteOffset) {
    var foundIndex = -1
    for (var i = 0; byteOffset + i < arr.length; i++) {
      if (arr[byteOffset + i] === val[foundIndex === -1 ? 0 : i - foundIndex]) {
        if (foundIndex === -1) foundIndex = i
        if (i - foundIndex + 1 === val.length) return byteOffset + foundIndex
      } else {
        foundIndex = -1
      }
    }
    return -1
  }

  throw new TypeError('val must be string, number or Buffer')
}

// `get` is deprecated
Buffer.prototype.get = function get (offset) {
  console.log('.get() is deprecated. Access using array indexes instead.')
  return this.readUInt8(offset)
}

// `set` is deprecated
Buffer.prototype.set = function set (v, offset) {
  console.log('.set() is deprecated. Access using array indexes instead.')
  return this.writeUInt8(v, offset)
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  // must be an even number of digits
  var strLen = string.length
  if (strLen % 2 !== 0) throw new Error('Invalid hex string')

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; i++) {
    var parsed = parseInt(string.substr(i * 2, 2), 16)
    if (isNaN(parsed)) throw new Error('Invalid hex string')
    buf[offset + i] = parsed
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function binaryWrite (buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length)
}

function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8'
    length = this.length
    offset = 0
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset
    length = this.length
    offset = 0
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset | 0
    if (isFinite(length)) {
      length = length | 0
      if (encoding === undefined) encoding = 'utf8'
    } else {
      encoding = length
      length = undefined
    }
  // legacy write(string, encoding, offset, length) - remove in v0.13
  } else {
    var swap = encoding
    encoding = offset
    offset = length | 0
    length = swap
  }

  var remaining = this.length - offset
  if (length === undefined || length > remaining) length = remaining

  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('attempt to write outside buffer bounds')
  }

  if (!encoding) encoding = 'utf8'

  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)

      case 'ascii':
        return asciiWrite(this, string, offset, length)

      case 'binary':
        return binaryWrite(this, string, offset, length)

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  end = Math.min(buf.length, end)
  var res = []

  var i = start
  while (i < end) {
    var firstByte = buf[i]
    var codePoint = null
    var bytesPerSequence = (firstByte > 0xEF) ? 4
      : (firstByte > 0xDF) ? 3
      : (firstByte > 0xBF) ? 2
      : 1

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte
          }
          break
        case 2:
          secondByte = buf[i + 1]
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint
            }
          }
          break
        case 3:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint
            }
          }
          break
        case 4:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          fourthByte = buf[i + 3]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD
      bytesPerSequence = 1
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000
      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
      codePoint = 0xDC00 | codePoint & 0x3FF
    }

    res.push(codePoint)
    i += bytesPerSequence
  }

  return decodeCodePointsArray(res)
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000

function decodeCodePointsArray (codePoints) {
  var len = codePoints.length
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  var res = ''
  var i = 0
  while (i < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    )
  }
  return res
}

function asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; i++) {
    ret += String.fromCharCode(buf[i] & 0x7F)
  }
  return ret
}

function binarySlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; i++) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; i++) {
    out += toHex(buf[i])
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  var len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len
    if (start < 0) start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0) end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start) end = start

  var newBuf
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    newBuf = Buffer._augment(this.subarray(start, end))
  } else {
    var sliceLen = end - start
    newBuf = new Buffer(sliceLen, undefined)
    for (var i = 0; i < sliceLen; i++) {
      newBuf[i] = this[i + start]
    }
  }

  if (newBuf.length) newBuf.parent = this.parent || this

  return newBuf
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }

  return val
}

Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length)
  }

  var val = this[offset + --byteLength]
  var mul = 1
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul
  }

  return val
}

Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
}

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var i = byteLength
  var mul = 1
  var val = this[offset + --i]
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
}

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('buffer must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('value is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('index out of range')
}

Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkInt(this, value, offset, byteLength, Math.pow(2, 8 * byteLength), 0)

  var mul = 1
  var i = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkInt(this, value, offset, byteLength, Math.pow(2, 8 * byteLength), 0)

  var i = byteLength - 1
  var mul = 1
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  this[offset] = (value & 0xff)
  return offset + 1
}

function objectWriteUInt16 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; i++) {
    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
      (littleEndian ? i : 1 - i) * 8
  }
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

function objectWriteUInt32 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffffffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; i++) {
    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
  }
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset + 3] = (value >>> 24)
    this[offset + 2] = (value >>> 16)
    this[offset + 1] = (value >>> 8)
    this[offset] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = 0
  var mul = 1
  var sub = value < 0 ? 1 : 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = byteLength - 1
  var mul = 1
  var sub = value < 0 ? 1 : 0
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  if (value < 0) value = 0xff + value + 1
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
    this[offset + 2] = (value >>> 16)
    this[offset + 3] = (value >>> 24)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (value > max || value < min) throw new RangeError('value is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('index out of range')
  if (offset < 0) throw new RangeError('index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (targetStart >= target.length) targetStart = target.length
  if (!targetStart) targetStart = 0
  if (end > 0 && end < start) end = start

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start
  }

  var len = end - start
  var i

  if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (i = len - 1; i >= 0; i--) {
      target[i + targetStart] = this[i + start]
    }
  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
    // ascending copy from start
    for (i = 0; i < len; i++) {
      target[i + targetStart] = this[i + start]
    }
  } else {
    target._set(this.subarray(start, start + len), targetStart)
  }

  return len
}

// fill(value, start=0, end=buffer.length)
Buffer.prototype.fill = function fill (value, start, end) {
  if (!value) value = 0
  if (!start) start = 0
  if (!end) end = this.length

  if (end < start) throw new RangeError('end < start')

  // Fill 0 bytes; we're done
  if (end === start) return
  if (this.length === 0) return

  if (start < 0 || start >= this.length) throw new RangeError('start out of bounds')
  if (end < 0 || end > this.length) throw new RangeError('end out of bounds')

  var i
  if (typeof value === 'number') {
    for (i = start; i < end; i++) {
      this[i] = value
    }
  } else {
    var bytes = utf8ToBytes(value.toString())
    var len = bytes.length
    for (i = start; i < end; i++) {
      this[i] = bytes[i % len]
    }
  }

  return this
}

/**
 * Creates a new `ArrayBuffer` with the *copied* memory of the buffer instance.
 * Added in Node 0.12. Only available in browsers that support ArrayBuffer.
 */
Buffer.prototype.toArrayBuffer = function toArrayBuffer () {
  if (typeof Uint8Array !== 'undefined') {
    if (Buffer.TYPED_ARRAY_SUPPORT) {
      return (new Buffer(this)).buffer
    } else {
      var buf = new Uint8Array(this.length)
      for (var i = 0, len = buf.length; i < len; i += 1) {
        buf[i] = this[i]
      }
      return buf.buffer
    }
  } else {
    throw new TypeError('Buffer.toArrayBuffer not supported in this browser')
  }
}

// HELPER FUNCTIONS
// ================

var BP = Buffer.prototype

/**
 * Augment a Uint8Array *instance* (not the Uint8Array class!) with Buffer methods
 */
Buffer._augment = function _augment (arr) {
  arr.constructor = Buffer
  arr._isBuffer = true

  // save reference to original Uint8Array set method before overwriting
  arr._set = arr.set

  // deprecated
  arr.get = BP.get
  arr.set = BP.set

  arr.write = BP.write
  arr.toString = BP.toString
  arr.toLocaleString = BP.toString
  arr.toJSON = BP.toJSON
  arr.equals = BP.equals
  arr.compare = BP.compare
  arr.indexOf = BP.indexOf
  arr.copy = BP.copy
  arr.slice = BP.slice
  arr.readUIntLE = BP.readUIntLE
  arr.readUIntBE = BP.readUIntBE
  arr.readUInt8 = BP.readUInt8
  arr.readUInt16LE = BP.readUInt16LE
  arr.readUInt16BE = BP.readUInt16BE
  arr.readUInt32LE = BP.readUInt32LE
  arr.readUInt32BE = BP.readUInt32BE
  arr.readIntLE = BP.readIntLE
  arr.readIntBE = BP.readIntBE
  arr.readInt8 = BP.readInt8
  arr.readInt16LE = BP.readInt16LE
  arr.readInt16BE = BP.readInt16BE
  arr.readInt32LE = BP.readInt32LE
  arr.readInt32BE = BP.readInt32BE
  arr.readFloatLE = BP.readFloatLE
  arr.readFloatBE = BP.readFloatBE
  arr.readDoubleLE = BP.readDoubleLE
  arr.readDoubleBE = BP.readDoubleBE
  arr.writeUInt8 = BP.writeUInt8
  arr.writeUIntLE = BP.writeUIntLE
  arr.writeUIntBE = BP.writeUIntBE
  arr.writeUInt16LE = BP.writeUInt16LE
  arr.writeUInt16BE = BP.writeUInt16BE
  arr.writeUInt32LE = BP.writeUInt32LE
  arr.writeUInt32BE = BP.writeUInt32BE
  arr.writeIntLE = BP.writeIntLE
  arr.writeIntBE = BP.writeIntBE
  arr.writeInt8 = BP.writeInt8
  arr.writeInt16LE = BP.writeInt16LE
  arr.writeInt16BE = BP.writeInt16BE
  arr.writeInt32LE = BP.writeInt32LE
  arr.writeInt32BE = BP.writeInt32BE
  arr.writeFloatLE = BP.writeFloatLE
  arr.writeFloatBE = BP.writeFloatBE
  arr.writeDoubleLE = BP.writeDoubleLE
  arr.writeDoubleBE = BP.writeDoubleBE
  arr.fill = BP.fill
  arr.inspect = BP.inspect
  arr.toArrayBuffer = BP.toArrayBuffer

  return arr
}

var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g

function base64clean (str) {
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = stringtrim(str).replace(INVALID_BASE64_RE, '')
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function stringtrim (str) {
  if (str.trim) return str.trim()
  return str.replace(/^\s+|\s+$/g, '')
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (string, units) {
  units = units || Infinity
  var codePoint
  var length = string.length
  var leadSurrogate = null
  var bytes = []

  for (var i = 0; i < length; i++) {
    codePoint = string.charCodeAt(i)

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        }

        // valid lead
        leadSurrogate = codePoint

        continue
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
        leadSurrogate = codePoint
        continue
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
    }

    leadSurrogate = null

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint)
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; i++) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; i++) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  for (var i = 0; i < length; i++) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i]
  }
  return i
}

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"base64-js":70,"ieee754":71,"isarray":72}],70:[function(require,module,exports){
var lookup = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';

;(function (exports) {
	'use strict';

  var Arr = (typeof Uint8Array !== 'undefined')
    ? Uint8Array
    : Array

	var PLUS   = '+'.charCodeAt(0)
	var SLASH  = '/'.charCodeAt(0)
	var NUMBER = '0'.charCodeAt(0)
	var LOWER  = 'a'.charCodeAt(0)
	var UPPER  = 'A'.charCodeAt(0)
	var PLUS_URL_SAFE = '-'.charCodeAt(0)
	var SLASH_URL_SAFE = '_'.charCodeAt(0)

	function decode (elt) {
		var code = elt.charCodeAt(0)
		if (code === PLUS ||
		    code === PLUS_URL_SAFE)
			return 62 // '+'
		if (code === SLASH ||
		    code === SLASH_URL_SAFE)
			return 63 // '/'
		if (code < NUMBER)
			return -1 //no match
		if (code < NUMBER + 10)
			return code - NUMBER + 26 + 26
		if (code < UPPER + 26)
			return code - UPPER
		if (code < LOWER + 26)
			return code - LOWER + 26
	}

	function b64ToByteArray (b64) {
		var i, j, l, tmp, placeHolders, arr

		if (b64.length % 4 > 0) {
			throw new Error('Invalid string. Length must be a multiple of 4')
		}

		// the number of equal signs (place holders)
		// if there are two placeholders, than the two characters before it
		// represent one byte
		// if there is only one, then the three characters before it represent 2 bytes
		// this is just a cheap hack to not do indexOf twice
		var len = b64.length
		placeHolders = '=' === b64.charAt(len - 2) ? 2 : '=' === b64.charAt(len - 1) ? 1 : 0

		// base64 is 4/3 + up to two characters of the original data
		arr = new Arr(b64.length * 3 / 4 - placeHolders)

		// if there are placeholders, only get up to the last complete 4 chars
		l = placeHolders > 0 ? b64.length - 4 : b64.length

		var L = 0

		function push (v) {
			arr[L++] = v
		}

		for (i = 0, j = 0; i < l; i += 4, j += 3) {
			tmp = (decode(b64.charAt(i)) << 18) | (decode(b64.charAt(i + 1)) << 12) | (decode(b64.charAt(i + 2)) << 6) | decode(b64.charAt(i + 3))
			push((tmp & 0xFF0000) >> 16)
			push((tmp & 0xFF00) >> 8)
			push(tmp & 0xFF)
		}

		if (placeHolders === 2) {
			tmp = (decode(b64.charAt(i)) << 2) | (decode(b64.charAt(i + 1)) >> 4)
			push(tmp & 0xFF)
		} else if (placeHolders === 1) {
			tmp = (decode(b64.charAt(i)) << 10) | (decode(b64.charAt(i + 1)) << 4) | (decode(b64.charAt(i + 2)) >> 2)
			push((tmp >> 8) & 0xFF)
			push(tmp & 0xFF)
		}

		return arr
	}

	function uint8ToBase64 (uint8) {
		var i,
			extraBytes = uint8.length % 3, // if we have 1 byte left, pad 2 bytes
			output = "",
			temp, length

		function encode (num) {
			return lookup.charAt(num)
		}

		function tripletToBase64 (num) {
			return encode(num >> 18 & 0x3F) + encode(num >> 12 & 0x3F) + encode(num >> 6 & 0x3F) + encode(num & 0x3F)
		}

		// go through the array every three bytes, we'll deal with trailing stuff later
		for (i = 0, length = uint8.length - extraBytes; i < length; i += 3) {
			temp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])
			output += tripletToBase64(temp)
		}

		// pad the end with zeros, but make sure to not forget the extra bytes
		switch (extraBytes) {
			case 1:
				temp = uint8[uint8.length - 1]
				output += encode(temp >> 2)
				output += encode((temp << 4) & 0x3F)
				output += '=='
				break
			case 2:
				temp = (uint8[uint8.length - 2] << 8) + (uint8[uint8.length - 1])
				output += encode(temp >> 10)
				output += encode((temp >> 4) & 0x3F)
				output += encode((temp << 2) & 0x3F)
				output += '='
				break
		}

		return output
	}

	exports.toByteArray = b64ToByteArray
	exports.fromByteArray = uint8ToBase64
}(typeof exports === 'undefined' ? (this.base64js = {}) : exports))

},{}],71:[function(require,module,exports){
exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = nBytes * 8 - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = nBytes * 8 - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = (value * c - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}

},{}],72:[function(require,module,exports){
var toString = {}.toString;

module.exports = Array.isArray || function (arr) {
  return toString.call(arr) == '[object Array]';
};

},{}],73:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

function EventEmitter() {
  this._events = this._events || {};
  this._maxListeners = this._maxListeners || undefined;
}
module.exports = EventEmitter;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;

EventEmitter.prototype._events = undefined;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
EventEmitter.defaultMaxListeners = 10;

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function(n) {
  if (!isNumber(n) || n < 0 || isNaN(n))
    throw TypeError('n must be a positive number');
  this._maxListeners = n;
  return this;
};

EventEmitter.prototype.emit = function(type) {
  var er, handler, len, args, i, listeners;

  if (!this._events)
    this._events = {};

  // If there is no 'error' event listener then throw.
  if (type === 'error') {
    if (!this._events.error ||
        (isObject(this._events.error) && !this._events.error.length)) {
      er = arguments[1];
      if (er instanceof Error) {
        throw er; // Unhandled 'error' event
      }
      throw TypeError('Uncaught, unspecified "error" event.');
    }
  }

  handler = this._events[type];

  if (isUndefined(handler))
    return false;

  if (isFunction(handler)) {
    switch (arguments.length) {
      // fast cases
      case 1:
        handler.call(this);
        break;
      case 2:
        handler.call(this, arguments[1]);
        break;
      case 3:
        handler.call(this, arguments[1], arguments[2]);
        break;
      // slower
      default:
        len = arguments.length;
        args = new Array(len - 1);
        for (i = 1; i < len; i++)
          args[i - 1] = arguments[i];
        handler.apply(this, args);
    }
  } else if (isObject(handler)) {
    len = arguments.length;
    args = new Array(len - 1);
    for (i = 1; i < len; i++)
      args[i - 1] = arguments[i];

    listeners = handler.slice();
    len = listeners.length;
    for (i = 0; i < len; i++)
      listeners[i].apply(this, args);
  }

  return true;
};

EventEmitter.prototype.addListener = function(type, listener) {
  var m;

  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  if (!this._events)
    this._events = {};

  // To avoid recursion in the case that type === "newListener"! Before
  // adding it to the listeners, first emit "newListener".
  if (this._events.newListener)
    this.emit('newListener', type,
              isFunction(listener.listener) ?
              listener.listener : listener);

  if (!this._events[type])
    // Optimize the case of one listener. Don't need the extra array object.
    this._events[type] = listener;
  else if (isObject(this._events[type]))
    // If we've already got an array, just append.
    this._events[type].push(listener);
  else
    // Adding the second element, need to change to array.
    this._events[type] = [this._events[type], listener];

  // Check for listener leak
  if (isObject(this._events[type]) && !this._events[type].warned) {
    var m;
    if (!isUndefined(this._maxListeners)) {
      m = this._maxListeners;
    } else {
      m = EventEmitter.defaultMaxListeners;
    }

    if (m && m > 0 && this._events[type].length > m) {
      this._events[type].warned = true;
      console.error('(node) warning: possible EventEmitter memory ' +
                    'leak detected. %d listeners added. ' +
                    'Use emitter.setMaxListeners() to increase limit.',
                    this._events[type].length);
      if (typeof console.trace === 'function') {
        // not supported in IE 10
        console.trace();
      }
    }
  }

  return this;
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.once = function(type, listener) {
  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  var fired = false;

  function g() {
    this.removeListener(type, g);

    if (!fired) {
      fired = true;
      listener.apply(this, arguments);
    }
  }

  g.listener = listener;
  this.on(type, g);

  return this;
};

// emits a 'removeListener' event iff the listener was removed
EventEmitter.prototype.removeListener = function(type, listener) {
  var list, position, length, i;

  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  if (!this._events || !this._events[type])
    return this;

  list = this._events[type];
  length = list.length;
  position = -1;

  if (list === listener ||
      (isFunction(list.listener) && list.listener === listener)) {
    delete this._events[type];
    if (this._events.removeListener)
      this.emit('removeListener', type, listener);

  } else if (isObject(list)) {
    for (i = length; i-- > 0;) {
      if (list[i] === listener ||
          (list[i].listener && list[i].listener === listener)) {
        position = i;
        break;
      }
    }

    if (position < 0)
      return this;

    if (list.length === 1) {
      list.length = 0;
      delete this._events[type];
    } else {
      list.splice(position, 1);
    }

    if (this._events.removeListener)
      this.emit('removeListener', type, listener);
  }

  return this;
};

EventEmitter.prototype.removeAllListeners = function(type) {
  var key, listeners;

  if (!this._events)
    return this;

  // not listening for removeListener, no need to emit
  if (!this._events.removeListener) {
    if (arguments.length === 0)
      this._events = {};
    else if (this._events[type])
      delete this._events[type];
    return this;
  }

  // emit removeListener for all listeners on all events
  if (arguments.length === 0) {
    for (key in this._events) {
      if (key === 'removeListener') continue;
      this.removeAllListeners(key);
    }
    this.removeAllListeners('removeListener');
    this._events = {};
    return this;
  }

  listeners = this._events[type];

  if (isFunction(listeners)) {
    this.removeListener(type, listeners);
  } else {
    // LIFO order
    while (listeners.length)
      this.removeListener(type, listeners[listeners.length - 1]);
  }
  delete this._events[type];

  return this;
};

EventEmitter.prototype.listeners = function(type) {
  var ret;
  if (!this._events || !this._events[type])
    ret = [];
  else if (isFunction(this._events[type]))
    ret = [this._events[type]];
  else
    ret = this._events[type].slice();
  return ret;
};

EventEmitter.listenerCount = function(emitter, type) {
  var ret;
  if (!emitter._events || !emitter._events[type])
    ret = 0;
  else if (isFunction(emitter._events[type]))
    ret = 1;
  else
    ret = emitter._events[type].length;
  return ret;
};

function isFunction(arg) {
  return typeof arg === 'function';
}

function isNumber(arg) {
  return typeof arg === 'number';
}

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}

function isUndefined(arg) {
  return arg === void 0;
}

},{}],74:[function(require,module,exports){
if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    ctor.prototype = Object.create(superCtor.prototype, {
      constructor: {
        value: ctor,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    var TempCtor = function () {}
    TempCtor.prototype = superCtor.prototype
    ctor.prototype = new TempCtor()
    ctor.prototype.constructor = ctor
  }
}

},{}],75:[function(require,module,exports){
/**
 * Determine if an object is Buffer
 *
 * Author:   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * License:  MIT
 *
 * `npm install is-buffer`
 */

module.exports = function (obj) {
  return !!(obj != null &&
    (obj._isBuffer || // For Safari 5-7 (missing Object.prototype.constructor)
      (obj.constructor &&
      typeof obj.constructor.isBuffer === 'function' &&
      obj.constructor.isBuffer(obj))
    ))
}

},{}],76:[function(require,module,exports){
module.exports = Array.isArray || function (arr) {
  return Object.prototype.toString.call(arr) == '[object Array]';
};

},{}],77:[function(require,module,exports){
(function (process){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// resolves . and .. elements in a path array with directory names there
// must be no slashes, empty elements, or device names (c:\) in the array
// (so also no leading and trailing slashes - it does not distinguish
// relative and absolute paths)
function normalizeArray(parts, allowAboveRoot) {
  // if the path tries to go above the root, `up` ends up > 0
  var up = 0;
  for (var i = parts.length - 1; i >= 0; i--) {
    var last = parts[i];
    if (last === '.') {
      parts.splice(i, 1);
    } else if (last === '..') {
      parts.splice(i, 1);
      up++;
    } else if (up) {
      parts.splice(i, 1);
      up--;
    }
  }

  // if the path is allowed to go above the root, restore leading ..s
  if (allowAboveRoot) {
    for (; up--; up) {
      parts.unshift('..');
    }
  }

  return parts;
}

// Split a filename into [root, dir, basename, ext], unix version
// 'root' is just a slash, or nothing.
var splitPathRe =
    /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
var splitPath = function(filename) {
  return splitPathRe.exec(filename).slice(1);
};

// path.resolve([from ...], to)
// posix version
exports.resolve = function() {
  var resolvedPath = '',
      resolvedAbsolute = false;

  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
    var path = (i >= 0) ? arguments[i] : process.cwd();

    // Skip empty and invalid entries
    if (typeof path !== 'string') {
      throw new TypeError('Arguments to path.resolve must be strings');
    } else if (!path) {
      continue;
    }

    resolvedPath = path + '/' + resolvedPath;
    resolvedAbsolute = path.charAt(0) === '/';
  }

  // At this point the path should be resolved to a full absolute path, but
  // handle relative paths to be safe (might happen when process.cwd() fails)

  // Normalize the path
  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {
    return !!p;
  }), !resolvedAbsolute).join('/');

  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
};

// path.normalize(path)
// posix version
exports.normalize = function(path) {
  var isAbsolute = exports.isAbsolute(path),
      trailingSlash = substr(path, -1) === '/';

  // Normalize the path
  path = normalizeArray(filter(path.split('/'), function(p) {
    return !!p;
  }), !isAbsolute).join('/');

  if (!path && !isAbsolute) {
    path = '.';
  }
  if (path && trailingSlash) {
    path += '/';
  }

  return (isAbsolute ? '/' : '') + path;
};

// posix version
exports.isAbsolute = function(path) {
  return path.charAt(0) === '/';
};

// posix version
exports.join = function() {
  var paths = Array.prototype.slice.call(arguments, 0);
  return exports.normalize(filter(paths, function(p, index) {
    if (typeof p !== 'string') {
      throw new TypeError('Arguments to path.join must be strings');
    }
    return p;
  }).join('/'));
};


// path.relative(from, to)
// posix version
exports.relative = function(from, to) {
  from = exports.resolve(from).substr(1);
  to = exports.resolve(to).substr(1);

  function trim(arr) {
    var start = 0;
    for (; start < arr.length; start++) {
      if (arr[start] !== '') break;
    }

    var end = arr.length - 1;
    for (; end >= 0; end--) {
      if (arr[end] !== '') break;
    }

    if (start > end) return [];
    return arr.slice(start, end - start + 1);
  }

  var fromParts = trim(from.split('/'));
  var toParts = trim(to.split('/'));

  var length = Math.min(fromParts.length, toParts.length);
  var samePartsLength = length;
  for (var i = 0; i < length; i++) {
    if (fromParts[i] !== toParts[i]) {
      samePartsLength = i;
      break;
    }
  }

  var outputParts = [];
  for (var i = samePartsLength; i < fromParts.length; i++) {
    outputParts.push('..');
  }

  outputParts = outputParts.concat(toParts.slice(samePartsLength));

  return outputParts.join('/');
};

exports.sep = '/';
exports.delimiter = ':';

exports.dirname = function(path) {
  var result = splitPath(path),
      root = result[0],
      dir = result[1];

  if (!root && !dir) {
    // No dirname whatsoever
    return '.';
  }

  if (dir) {
    // It has a dirname, strip trailing slash
    dir = dir.substr(0, dir.length - 1);
  }

  return root + dir;
};


exports.basename = function(path, ext) {
  var f = splitPath(path)[2];
  // TODO: make this comparison case-insensitive on windows?
  if (ext && f.substr(-1 * ext.length) === ext) {
    f = f.substr(0, f.length - ext.length);
  }
  return f;
};


exports.extname = function(path) {
  return splitPath(path)[3];
};

function filter (xs, f) {
    if (xs.filter) return xs.filter(f);
    var res = [];
    for (var i = 0; i < xs.length; i++) {
        if (f(xs[i], i, xs)) res.push(xs[i]);
    }
    return res;
}

// String.prototype.substr - negative index don't work in IE8
var substr = 'ab'.substr(-1) === 'b'
    ? function (str, start, len) { return str.substr(start, len) }
    : function (str, start, len) {
        if (start < 0) start = str.length + start;
        return str.substr(start, len);
    }
;

}).call(this,require('_process'))

},{"_process":78}],78:[function(require,module,exports){
// shim for using process in browser

var process = module.exports = {};
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = setTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    clearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        setTimeout(drainQueue, 0);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}],79:[function(require,module,exports){
(function (global){
/*! https://mths.be/punycode v1.4.0 by @mathias */
;(function(root) {

	/** Detect free variables */
	var freeExports = typeof exports == 'object' && exports &&
		!exports.nodeType && exports;
	var freeModule = typeof module == 'object' && module &&
		!module.nodeType && module;
	var freeGlobal = typeof global == 'object' && global;
	if (
		freeGlobal.global === freeGlobal ||
		freeGlobal.window === freeGlobal ||
		freeGlobal.self === freeGlobal
	) {
		root = freeGlobal;
	}

	/**
	 * The `punycode` object.
	 * @name punycode
	 * @type Object
	 */
	var punycode,

	/** Highest positive signed 32-bit float value */
	maxInt = 2147483647, // aka. 0x7FFFFFFF or 2^31-1

	/** Bootstring parameters */
	base = 36,
	tMin = 1,
	tMax = 26,
	skew = 38,
	damp = 700,
	initialBias = 72,
	initialN = 128, // 0x80
	delimiter = '-', // '\x2D'

	/** Regular expressions */
	regexPunycode = /^xn--/,
	regexNonASCII = /[^\x20-\x7E]/, // unprintable ASCII chars + non-ASCII chars
	regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g, // RFC 3490 separators

	/** Error messages */
	errors = {
		'overflow': 'Overflow: input needs wider integers to process',
		'not-basic': 'Illegal input >= 0x80 (not a basic code point)',
		'invalid-input': 'Invalid input'
	},

	/** Convenience shortcuts */
	baseMinusTMin = base - tMin,
	floor = Math.floor,
	stringFromCharCode = String.fromCharCode,

	/** Temporary variable */
	key;

	/*--------------------------------------------------------------------------*/

	/**
	 * A generic error utility function.
	 * @private
	 * @param {String} type The error type.
	 * @returns {Error} Throws a `RangeError` with the applicable error message.
	 */
	function error(type) {
		throw new RangeError(errors[type]);
	}

	/**
	 * A generic `Array#map` utility function.
	 * @private
	 * @param {Array} array The array to iterate over.
	 * @param {Function} callback The function that gets called for every array
	 * item.
	 * @returns {Array} A new array of values returned by the callback function.
	 */
	function map(array, fn) {
		var length = array.length;
		var result = [];
		while (length--) {
			result[length] = fn(array[length]);
		}
		return result;
	}

	/**
	 * A simple `Array#map`-like wrapper to work with domain name strings or email
	 * addresses.
	 * @private
	 * @param {String} domain The domain name or email address.
	 * @param {Function} callback The function that gets called for every
	 * character.
	 * @returns {Array} A new string of characters returned by the callback
	 * function.
	 */
	function mapDomain(string, fn) {
		var parts = string.split('@');
		var result = '';
		if (parts.length > 1) {
			// In email addresses, only the domain name should be punycoded. Leave
			// the local part (i.e. everything up to `@`) intact.
			result = parts[0] + '@';
			string = parts[1];
		}
		// Avoid `split(regex)` for IE8 compatibility. See #17.
		string = string.replace(regexSeparators, '\x2E');
		var labels = string.split('.');
		var encoded = map(labels, fn).join('.');
		return result + encoded;
	}

	/**
	 * Creates an array containing the numeric code points of each Unicode
	 * character in the string. While JavaScript uses UCS-2 internally,
	 * this function will convert a pair of surrogate halves (each of which
	 * UCS-2 exposes as separate characters) into a single code point,
	 * matching UTF-16.
	 * @see `punycode.ucs2.encode`
	 * @see <https://mathiasbynens.be/notes/javascript-encoding>
	 * @memberOf punycode.ucs2
	 * @name decode
	 * @param {String} string The Unicode input string (UCS-2).
	 * @returns {Array} The new array of code points.
	 */
	function ucs2decode(string) {
		var output = [],
		    counter = 0,
		    length = string.length,
		    value,
		    extra;
		while (counter < length) {
			value = string.charCodeAt(counter++);
			if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
				// high surrogate, and there is a next character
				extra = string.charCodeAt(counter++);
				if ((extra & 0xFC00) == 0xDC00) { // low surrogate
					output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
				} else {
					// unmatched surrogate; only append this code unit, in case the next
					// code unit is the high surrogate of a surrogate pair
					output.push(value);
					counter--;
				}
			} else {
				output.push(value);
			}
		}
		return output;
	}

	/**
	 * Creates a string based on an array of numeric code points.
	 * @see `punycode.ucs2.decode`
	 * @memberOf punycode.ucs2
	 * @name encode
	 * @param {Array} codePoints The array of numeric code points.
	 * @returns {String} The new Unicode string (UCS-2).
	 */
	function ucs2encode(array) {
		return map(array, function(value) {
			var output = '';
			if (value > 0xFFFF) {
				value -= 0x10000;
				output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
				value = 0xDC00 | value & 0x3FF;
			}
			output += stringFromCharCode(value);
			return output;
		}).join('');
	}

	/**
	 * Converts a basic code point into a digit/integer.
	 * @see `digitToBasic()`
	 * @private
	 * @param {Number} codePoint The basic numeric code point value.
	 * @returns {Number} The numeric value of a basic code point (for use in
	 * representing integers) in the range `0` to `base - 1`, or `base` if
	 * the code point does not represent a value.
	 */
	function basicToDigit(codePoint) {
		if (codePoint - 48 < 10) {
			return codePoint - 22;
		}
		if (codePoint - 65 < 26) {
			return codePoint - 65;
		}
		if (codePoint - 97 < 26) {
			return codePoint - 97;
		}
		return base;
	}

	/**
	 * Converts a digit/integer into a basic code point.
	 * @see `basicToDigit()`
	 * @private
	 * @param {Number} digit The numeric value of a basic code point.
	 * @returns {Number} The basic code point whose value (when used for
	 * representing integers) is `digit`, which needs to be in the range
	 * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
	 * used; else, the lowercase form is used. The behavior is undefined
	 * if `flag` is non-zero and `digit` has no uppercase form.
	 */
	function digitToBasic(digit, flag) {
		//  0..25 map to ASCII a..z or A..Z
		// 26..35 map to ASCII 0..9
		return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
	}

	/**
	 * Bias adaptation function as per section 3.4 of RFC 3492.
	 * https://tools.ietf.org/html/rfc3492#section-3.4
	 * @private
	 */
	function adapt(delta, numPoints, firstTime) {
		var k = 0;
		delta = firstTime ? floor(delta / damp) : delta >> 1;
		delta += floor(delta / numPoints);
		for (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {
			delta = floor(delta / baseMinusTMin);
		}
		return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
	}

	/**
	 * Converts a Punycode string of ASCII-only symbols to a string of Unicode
	 * symbols.
	 * @memberOf punycode
	 * @param {String} input The Punycode string of ASCII-only symbols.
	 * @returns {String} The resulting string of Unicode symbols.
	 */
	function decode(input) {
		// Don't use UCS-2
		var output = [],
		    inputLength = input.length,
		    out,
		    i = 0,
		    n = initialN,
		    bias = initialBias,
		    basic,
		    j,
		    index,
		    oldi,
		    w,
		    k,
		    digit,
		    t,
		    /** Cached calculation results */
		    baseMinusT;

		// Handle the basic code points: let `basic` be the number of input code
		// points before the last delimiter, or `0` if there is none, then copy
		// the first basic code points to the output.

		basic = input.lastIndexOf(delimiter);
		if (basic < 0) {
			basic = 0;
		}

		for (j = 0; j < basic; ++j) {
			// if it's not a basic code point
			if (input.charCodeAt(j) >= 0x80) {
				error('not-basic');
			}
			output.push(input.charCodeAt(j));
		}

		// Main decoding loop: start just after the last delimiter if any basic code
		// points were copied; start at the beginning otherwise.

		for (index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {

			// `index` is the index of the next character to be consumed.
			// Decode a generalized variable-length integer into `delta`,
			// which gets added to `i`. The overflow checking is easier
			// if we increase `i` as we go, then subtract off its starting
			// value at the end to obtain `delta`.
			for (oldi = i, w = 1, k = base; /* no condition */; k += base) {

				if (index >= inputLength) {
					error('invalid-input');
				}

				digit = basicToDigit(input.charCodeAt(index++));

				if (digit >= base || digit > floor((maxInt - i) / w)) {
					error('overflow');
				}

				i += digit * w;
				t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);

				if (digit < t) {
					break;
				}

				baseMinusT = base - t;
				if (w > floor(maxInt / baseMinusT)) {
					error('overflow');
				}

				w *= baseMinusT;

			}

			out = output.length + 1;
			bias = adapt(i - oldi, out, oldi == 0);

			// `i` was supposed to wrap around from `out` to `0`,
			// incrementing `n` each time, so we'll fix that now:
			if (floor(i / out) > maxInt - n) {
				error('overflow');
			}

			n += floor(i / out);
			i %= out;

			// Insert `n` at position `i` of the output
			output.splice(i++, 0, n);

		}

		return ucs2encode(output);
	}

	/**
	 * Converts a string of Unicode symbols (e.g. a domain name label) to a
	 * Punycode string of ASCII-only symbols.
	 * @memberOf punycode
	 * @param {String} input The string of Unicode symbols.
	 * @returns {String} The resulting Punycode string of ASCII-only symbols.
	 */
	function encode(input) {
		var n,
		    delta,
		    handledCPCount,
		    basicLength,
		    bias,
		    j,
		    m,
		    q,
		    k,
		    t,
		    currentValue,
		    output = [],
		    /** `inputLength` will hold the number of code points in `input`. */
		    inputLength,
		    /** Cached calculation results */
		    handledCPCountPlusOne,
		    baseMinusT,
		    qMinusT;

		// Convert the input in UCS-2 to Unicode
		input = ucs2decode(input);

		// Cache the length
		inputLength = input.length;

		// Initialize the state
		n = initialN;
		delta = 0;
		bias = initialBias;

		// Handle the basic code points
		for (j = 0; j < inputLength; ++j) {
			currentValue = input[j];
			if (currentValue < 0x80) {
				output.push(stringFromCharCode(currentValue));
			}
		}

		handledCPCount = basicLength = output.length;

		// `handledCPCount` is the number of code points that have been handled;
		// `basicLength` is the number of basic code points.

		// Finish the basic string - if it is not empty - with a delimiter
		if (basicLength) {
			output.push(delimiter);
		}

		// Main encoding loop:
		while (handledCPCount < inputLength) {

			// All non-basic code points < n have been handled already. Find the next
			// larger one:
			for (m = maxInt, j = 0; j < inputLength; ++j) {
				currentValue = input[j];
				if (currentValue >= n && currentValue < m) {
					m = currentValue;
				}
			}

			// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,
			// but guard against overflow
			handledCPCountPlusOne = handledCPCount + 1;
			if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
				error('overflow');
			}

			delta += (m - n) * handledCPCountPlusOne;
			n = m;

			for (j = 0; j < inputLength; ++j) {
				currentValue = input[j];

				if (currentValue < n && ++delta > maxInt) {
					error('overflow');
				}

				if (currentValue == n) {
					// Represent delta as a generalized variable-length integer
					for (q = delta, k = base; /* no condition */; k += base) {
						t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);
						if (q < t) {
							break;
						}
						qMinusT = q - t;
						baseMinusT = base - t;
						output.push(
							stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))
						);
						q = floor(qMinusT / baseMinusT);
					}

					output.push(stringFromCharCode(digitToBasic(q, 0)));
					bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
					delta = 0;
					++handledCPCount;
				}
			}

			++delta;
			++n;

		}
		return output.join('');
	}

	/**
	 * Converts a Punycode string representing a domain name or an email address
	 * to Unicode. Only the Punycoded parts of the input will be converted, i.e.
	 * it doesn't matter if you call it on a string that has already been
	 * converted to Unicode.
	 * @memberOf punycode
	 * @param {String} input The Punycoded domain name or email address to
	 * convert to Unicode.
	 * @returns {String} The Unicode representation of the given Punycode
	 * string.
	 */
	function toUnicode(input) {
		return mapDomain(input, function(string) {
			return regexPunycode.test(string)
				? decode(string.slice(4).toLowerCase())
				: string;
		});
	}

	/**
	 * Converts a Unicode string representing a domain name or an email address to
	 * Punycode. Only the non-ASCII parts of the domain name will be converted,
	 * i.e. it doesn't matter if you call it with a domain that's already in
	 * ASCII.
	 * @memberOf punycode
	 * @param {String} input The domain name or email address to convert, as a
	 * Unicode string.
	 * @returns {String} The Punycode representation of the given domain name or
	 * email address.
	 */
	function toASCII(input) {
		return mapDomain(input, function(string) {
			return regexNonASCII.test(string)
				? 'xn--' + encode(string)
				: string;
		});
	}

	/*--------------------------------------------------------------------------*/

	/** Define the public API */
	punycode = {
		/**
		 * A string representing the current Punycode.js version number.
		 * @memberOf punycode
		 * @type String
		 */
		'version': '1.3.2',
		/**
		 * An object of methods to convert from JavaScript's internal character
		 * representation (UCS-2) to Unicode code points, and back.
		 * @see <https://mathiasbynens.be/notes/javascript-encoding>
		 * @memberOf punycode
		 * @type Object
		 */
		'ucs2': {
			'decode': ucs2decode,
			'encode': ucs2encode
		},
		'decode': decode,
		'encode': encode,
		'toASCII': toASCII,
		'toUnicode': toUnicode
	};

	/** Expose `punycode` */
	// Some AMD build optimizers, like r.js, check for specific condition patterns
	// like the following:
	if (
		typeof define == 'function' &&
		typeof define.amd == 'object' &&
		define.amd
	) {
		define('punycode', function() {
			return punycode;
		});
	} else if (freeExports && freeModule) {
		if (module.exports == freeExports) {
			// in Node.js, io.js, or RingoJS v0.8.0+
			freeModule.exports = punycode;
		} else {
			// in Narwhal or RingoJS v0.7.0-
			for (key in punycode) {
				punycode.hasOwnProperty(key) && (freeExports[key] = punycode[key]);
			}
		}
	} else {
		// in Rhino or a web browser
		root.punycode = punycode;
	}

}(this));

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],80:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

'use strict';

// If obj.hasOwnProperty has been overridden, then calling
// obj.hasOwnProperty(prop) will break.
// See: https://github.com/joyent/node/issues/1707
function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

module.exports = function(qs, sep, eq, options) {
  sep = sep || '&';
  eq = eq || '=';
  var obj = {};

  if (typeof qs !== 'string' || qs.length === 0) {
    return obj;
  }

  var regexp = /\+/g;
  qs = qs.split(sep);

  var maxKeys = 1000;
  if (options && typeof options.maxKeys === 'number') {
    maxKeys = options.maxKeys;
  }

  var len = qs.length;
  // maxKeys <= 0 means that we should not limit keys count
  if (maxKeys > 0 && len > maxKeys) {
    len = maxKeys;
  }

  for (var i = 0; i < len; ++i) {
    var x = qs[i].replace(regexp, '%20'),
        idx = x.indexOf(eq),
        kstr, vstr, k, v;

    if (idx >= 0) {
      kstr = x.substr(0, idx);
      vstr = x.substr(idx + 1);
    } else {
      kstr = x;
      vstr = '';
    }

    k = decodeURIComponent(kstr);
    v = decodeURIComponent(vstr);

    if (!hasOwnProperty(obj, k)) {
      obj[k] = v;
    } else if (isArray(obj[k])) {
      obj[k].push(v);
    } else {
      obj[k] = [obj[k], v];
    }
  }

  return obj;
};

var isArray = Array.isArray || function (xs) {
  return Object.prototype.toString.call(xs) === '[object Array]';
};

},{}],81:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

'use strict';

var stringifyPrimitive = function(v) {
  switch (typeof v) {
    case 'string':
      return v;

    case 'boolean':
      return v ? 'true' : 'false';

    case 'number':
      return isFinite(v) ? v : '';

    default:
      return '';
  }
};

module.exports = function(obj, sep, eq, name) {
  sep = sep || '&';
  eq = eq || '=';
  if (obj === null) {
    obj = undefined;
  }

  if (typeof obj === 'object') {
    return map(objectKeys(obj), function(k) {
      var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;
      if (isArray(obj[k])) {
        return map(obj[k], function(v) {
          return ks + encodeURIComponent(stringifyPrimitive(v));
        }).join(sep);
      } else {
        return ks + encodeURIComponent(stringifyPrimitive(obj[k]));
      }
    }).join(sep);

  }

  if (!name) return '';
  return encodeURIComponent(stringifyPrimitive(name)) + eq +
         encodeURIComponent(stringifyPrimitive(obj));
};

var isArray = Array.isArray || function (xs) {
  return Object.prototype.toString.call(xs) === '[object Array]';
};

function map (xs, f) {
  if (xs.map) return xs.map(f);
  var res = [];
  for (var i = 0; i < xs.length; i++) {
    res.push(f(xs[i], i));
  }
  return res;
}

var objectKeys = Object.keys || function (obj) {
  var res = [];
  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) res.push(key);
  }
  return res;
};

},{}],82:[function(require,module,exports){
'use strict';

exports.decode = exports.parse = require('./decode');
exports.encode = exports.stringify = require('./encode');

},{"./decode":80,"./encode":81}],83:[function(require,module,exports){
module.exports = require("./lib/_stream_duplex.js")

},{"./lib/_stream_duplex.js":84}],84:[function(require,module,exports){
// a duplex stream is just a stream that is both readable and writable.
// Since JS doesn't have multiple prototypal inheritance, this class
// prototypally inherits from Readable, and then parasitically from
// Writable.

'use strict';

/*<replacement>*/
var objectKeys = Object.keys || function (obj) {
  var keys = [];
  for (var key in obj) keys.push(key);
  return keys;
}
/*</replacement>*/


module.exports = Duplex;

/*<replacement>*/
var processNextTick = require('process-nextick-args');
/*</replacement>*/



/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

var Readable = require('./_stream_readable');
var Writable = require('./_stream_writable');

util.inherits(Duplex, Readable);

var keys = objectKeys(Writable.prototype);
for (var v = 0; v < keys.length; v++) {
  var method = keys[v];
  if (!Duplex.prototype[method])
    Duplex.prototype[method] = Writable.prototype[method];
}

function Duplex(options) {
  if (!(this instanceof Duplex))
    return new Duplex(options);

  Readable.call(this, options);
  Writable.call(this, options);

  if (options && options.readable === false)
    this.readable = false;

  if (options && options.writable === false)
    this.writable = false;

  this.allowHalfOpen = true;
  if (options && options.allowHalfOpen === false)
    this.allowHalfOpen = false;

  this.once('end', onend);
}

// the no-half-open enforcer
function onend() {
  // if we allow half-open state, or if the writable side ended,
  // then we're ok.
  if (this.allowHalfOpen || this._writableState.ended)
    return;

  // no more data can be written.
  // But allow more writes to happen in this tick.
  processNextTick(onEndNT, this);
}

function onEndNT(self) {
  self.end();
}

function forEach (xs, f) {
  for (var i = 0, l = xs.length; i < l; i++) {
    f(xs[i], i);
  }
}

},{"./_stream_readable":86,"./_stream_writable":88,"core-util-is":89,"inherits":74,"process-nextick-args":90}],85:[function(require,module,exports){
// a passthrough stream.
// basically just the most minimal sort of Transform stream.
// Every written chunk gets output as-is.

'use strict';

module.exports = PassThrough;

var Transform = require('./_stream_transform');

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

util.inherits(PassThrough, Transform);

function PassThrough(options) {
  if (!(this instanceof PassThrough))
    return new PassThrough(options);

  Transform.call(this, options);
}

PassThrough.prototype._transform = function(chunk, encoding, cb) {
  cb(null, chunk);
};

},{"./_stream_transform":87,"core-util-is":89,"inherits":74}],86:[function(require,module,exports){
(function (process){
'use strict';

module.exports = Readable;

/*<replacement>*/
var processNextTick = require('process-nextick-args');
/*</replacement>*/


/*<replacement>*/
var isArray = require('isarray');
/*</replacement>*/


/*<replacement>*/
var Buffer = require('buffer').Buffer;
/*</replacement>*/

Readable.ReadableState = ReadableState;

var EE = require('events');

/*<replacement>*/
var EElistenerCount = function(emitter, type) {
  return emitter.listeners(type).length;
};
/*</replacement>*/



/*<replacement>*/
var Stream;
(function (){try{
  Stream = require('st' + 'ream');
}catch(_){}finally{
  if (!Stream)
    Stream = require('events').EventEmitter;
}}())
/*</replacement>*/

var Buffer = require('buffer').Buffer;

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/



/*<replacement>*/
var debugUtil = require('util');
var debug;
if (debugUtil && debugUtil.debuglog) {
  debug = debugUtil.debuglog('stream');
} else {
  debug = function () {};
}
/*</replacement>*/

var StringDecoder;

util.inherits(Readable, Stream);

var Duplex;
function ReadableState(options, stream) {
  Duplex = Duplex || require('./_stream_duplex');

  options = options || {};

  // object stream flag. Used to make read(n) ignore n and to
  // make all the buffer merging and length checks go away
  this.objectMode = !!options.objectMode;

  if (stream instanceof Duplex)
    this.objectMode = this.objectMode || !!options.readableObjectMode;

  // the point at which it stops calling _read() to fill the buffer
  // Note: 0 is a valid value, means "don't call _read preemptively ever"
  var hwm = options.highWaterMark;
  var defaultHwm = this.objectMode ? 16 : 16 * 1024;
  this.highWaterMark = (hwm || hwm === 0) ? hwm : defaultHwm;

  // cast to ints.
  this.highWaterMark = ~~this.highWaterMark;

  this.buffer = [];
  this.length = 0;
  this.pipes = null;
  this.pipesCount = 0;
  this.flowing = null;
  this.ended = false;
  this.endEmitted = false;
  this.reading = false;

  // a flag to be able to tell if the onwrite cb is called immediately,
  // or on a later tick.  We set this to true at first, because any
  // actions that shouldn't happen until "later" should generally also
  // not happen before the first write call.
  this.sync = true;

  // whenever we return null, then we set a flag to say
  // that we're awaiting a 'readable' event emission.
  this.needReadable = false;
  this.emittedReadable = false;
  this.readableListening = false;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // when piping, we only care about 'readable' events that happen
  // after read()ing all the bytes and not getting any pushback.
  this.ranOut = false;

  // the number of writers that are awaiting a drain event in .pipe()s
  this.awaitDrain = 0;

  // if true, a maybeReadMore has been scheduled
  this.readingMore = false;

  this.decoder = null;
  this.encoding = null;
  if (options.encoding) {
    if (!StringDecoder)
      StringDecoder = require('string_decoder/').StringDecoder;
    this.decoder = new StringDecoder(options.encoding);
    this.encoding = options.encoding;
  }
}

var Duplex;
function Readable(options) {
  Duplex = Duplex || require('./_stream_duplex');

  if (!(this instanceof Readable))
    return new Readable(options);

  this._readableState = new ReadableState(options, this);

  // legacy
  this.readable = true;

  if (options && typeof options.read === 'function')
    this._read = options.read;

  Stream.call(this);
}

// Manually shove something into the read() buffer.
// This returns true if the highWaterMark has not been hit yet,
// similar to how Writable.write() returns true if you should
// write() some more.
Readable.prototype.push = function(chunk, encoding) {
  var state = this._readableState;

  if (!state.objectMode && typeof chunk === 'string') {
    encoding = encoding || state.defaultEncoding;
    if (encoding !== state.encoding) {
      chunk = new Buffer(chunk, encoding);
      encoding = '';
    }
  }

  return readableAddChunk(this, state, chunk, encoding, false);
};

// Unshift should *always* be something directly out of read()
Readable.prototype.unshift = function(chunk) {
  var state = this._readableState;
  return readableAddChunk(this, state, chunk, '', true);
};

Readable.prototype.isPaused = function() {
  return this._readableState.flowing === false;
};

function readableAddChunk(stream, state, chunk, encoding, addToFront) {
  var er = chunkInvalid(state, chunk);
  if (er) {
    stream.emit('error', er);
  } else if (chunk === null) {
    state.reading = false;
    onEofChunk(stream, state);
  } else if (state.objectMode || chunk && chunk.length > 0) {
    if (state.ended && !addToFront) {
      var e = new Error('stream.push() after EOF');
      stream.emit('error', e);
    } else if (state.endEmitted && addToFront) {
      var e = new Error('stream.unshift() after end event');
      stream.emit('error', e);
    } else {
      if (state.decoder && !addToFront && !encoding)
        chunk = state.decoder.write(chunk);

      if (!addToFront)
        state.reading = false;

      // if we want the data now, just emit it.
      if (state.flowing && state.length === 0 && !state.sync) {
        stream.emit('data', chunk);
        stream.read(0);
      } else {
        // update the buffer info.
        state.length += state.objectMode ? 1 : chunk.length;
        if (addToFront)
          state.buffer.unshift(chunk);
        else
          state.buffer.push(chunk);

        if (state.needReadable)
          emitReadable(stream);
      }

      maybeReadMore(stream, state);
    }
  } else if (!addToFront) {
    state.reading = false;
  }

  return needMoreData(state);
}


// if it's past the high water mark, we can push in some more.
// Also, if we have no data yet, we can stand some
// more bytes.  This is to work around cases where hwm=0,
// such as the repl.  Also, if the push() triggered a
// readable event, and the user called read(largeNumber) such that
// needReadable was set, then we ought to push more, so that another
// 'readable' event will be triggered.
function needMoreData(state) {
  return !state.ended &&
         (state.needReadable ||
          state.length < state.highWaterMark ||
          state.length === 0);
}

// backwards compatibility.
Readable.prototype.setEncoding = function(enc) {
  if (!StringDecoder)
    StringDecoder = require('string_decoder/').StringDecoder;
  this._readableState.decoder = new StringDecoder(enc);
  this._readableState.encoding = enc;
  return this;
};

// Don't raise the hwm > 8MB
var MAX_HWM = 0x800000;
function computeNewHighWaterMark(n) {
  if (n >= MAX_HWM) {
    n = MAX_HWM;
  } else {
    // Get the next highest power of 2
    n--;
    n |= n >>> 1;
    n |= n >>> 2;
    n |= n >>> 4;
    n |= n >>> 8;
    n |= n >>> 16;
    n++;
  }
  return n;
}

function howMuchToRead(n, state) {
  if (state.length === 0 && state.ended)
    return 0;

  if (state.objectMode)
    return n === 0 ? 0 : 1;

  if (n === null || isNaN(n)) {
    // only flow one buffer at a time
    if (state.flowing && state.buffer.length)
      return state.buffer[0].length;
    else
      return state.length;
  }

  if (n <= 0)
    return 0;

  // If we're asking for more than the target buffer level,
  // then raise the water mark.  Bump up to the next highest
  // power of 2, to prevent increasing it excessively in tiny
  // amounts.
  if (n > state.highWaterMark)
    state.highWaterMark = computeNewHighWaterMark(n);

  // don't have that much.  return null, unless we've ended.
  if (n > state.length) {
    if (!state.ended) {
      state.needReadable = true;
      return 0;
    } else {
      return state.length;
    }
  }

  return n;
}

// you can override either this method, or the async _read(n) below.
Readable.prototype.read = function(n) {
  debug('read', n);
  var state = this._readableState;
  var nOrig = n;

  if (typeof n !== 'number' || n > 0)
    state.emittedReadable = false;

  // if we're doing read(0) to trigger a readable event, but we
  // already have a bunch of data in the buffer, then just trigger
  // the 'readable' event and move on.
  if (n === 0 &&
      state.needReadable &&
      (state.length >= state.highWaterMark || state.ended)) {
    debug('read: emitReadable', state.length, state.ended);
    if (state.length === 0 && state.ended)
      endReadable(this);
    else
      emitReadable(this);
    return null;
  }

  n = howMuchToRead(n, state);

  // if we've ended, and we're now clear, then finish it up.
  if (n === 0 && state.ended) {
    if (state.length === 0)
      endReadable(this);
    return null;
  }

  // All the actual chunk generation logic needs to be
  // *below* the call to _read.  The reason is that in certain
  // synthetic stream cases, such as passthrough streams, _read
  // may be a completely synchronous operation which may change
  // the state of the read buffer, providing enough data when
  // before there was *not* enough.
  //
  // So, the steps are:
  // 1. Figure out what the state of things will be after we do
  // a read from the buffer.
  //
  // 2. If that resulting state will trigger a _read, then call _read.
  // Note that this may be asynchronous, or synchronous.  Yes, it is
  // deeply ugly to write APIs this way, but that still doesn't mean
  // that the Readable class should behave improperly, as streams are
  // designed to be sync/async agnostic.
  // Take note if the _read call is sync or async (ie, if the read call
  // has returned yet), so that we know whether or not it's safe to emit
  // 'readable' etc.
  //
  // 3. Actually pull the requested chunks out of the buffer and return.

  // if we need a readable event, then we need to do some reading.
  var doRead = state.needReadable;
  debug('need readable', doRead);

  // if we currently have less than the highWaterMark, then also read some
  if (state.length === 0 || state.length - n < state.highWaterMark) {
    doRead = true;
    debug('length less than watermark', doRead);
  }

  // however, if we've ended, then there's no point, and if we're already
  // reading, then it's unnecessary.
  if (state.ended || state.reading) {
    doRead = false;
    debug('reading or ended', doRead);
  }

  if (doRead) {
    debug('do read');
    state.reading = true;
    state.sync = true;
    // if the length is currently zero, then we *need* a readable event.
    if (state.length === 0)
      state.needReadable = true;
    // call internal read method
    this._read(state.highWaterMark);
    state.sync = false;
  }

  // If _read pushed data synchronously, then `reading` will be false,
  // and we need to re-evaluate how much data we can return to the user.
  if (doRead && !state.reading)
    n = howMuchToRead(nOrig, state);

  var ret;
  if (n > 0)
    ret = fromList(n, state);
  else
    ret = null;

  if (ret === null) {
    state.needReadable = true;
    n = 0;
  }

  state.length -= n;

  // If we have nothing in the buffer, then we want to know
  // as soon as we *do* get something into the buffer.
  if (state.length === 0 && !state.ended)
    state.needReadable = true;

  // If we tried to read() past the EOF, then emit end on the next tick.
  if (nOrig !== n && state.ended && state.length === 0)
    endReadable(this);

  if (ret !== null)
    this.emit('data', ret);

  return ret;
};

function chunkInvalid(state, chunk) {
  var er = null;
  if (!(Buffer.isBuffer(chunk)) &&
      typeof chunk !== 'string' &&
      chunk !== null &&
      chunk !== undefined &&
      !state.objectMode) {
    er = new TypeError('Invalid non-string/buffer chunk');
  }
  return er;
}


function onEofChunk(stream, state) {
  if (state.ended) return;
  if (state.decoder) {
    var chunk = state.decoder.end();
    if (chunk && chunk.length) {
      state.buffer.push(chunk);
      state.length += state.objectMode ? 1 : chunk.length;
    }
  }
  state.ended = true;

  // emit 'readable' now to make sure it gets picked up.
  emitReadable(stream);
}

// Don't emit readable right away in sync mode, because this can trigger
// another read() call => stack overflow.  This way, it might trigger
// a nextTick recursion warning, but that's not so bad.
function emitReadable(stream) {
  var state = stream._readableState;
  state.needReadable = false;
  if (!state.emittedReadable) {
    debug('emitReadable', state.flowing);
    state.emittedReadable = true;
    if (state.sync)
      processNextTick(emitReadable_, stream);
    else
      emitReadable_(stream);
  }
}

function emitReadable_(stream) {
  debug('emit readable');
  stream.emit('readable');
  flow(stream);
}


// at this point, the user has presumably seen the 'readable' event,
// and called read() to consume some data.  that may have triggered
// in turn another _read(n) call, in which case reading = true if
// it's in progress.
// However, if we're not ended, or reading, and the length < hwm,
// then go ahead and try to read some more preemptively.
function maybeReadMore(stream, state) {
  if (!state.readingMore) {
    state.readingMore = true;
    processNextTick(maybeReadMore_, stream, state);
  }
}

function maybeReadMore_(stream, state) {
  var len = state.length;
  while (!state.reading && !state.flowing && !state.ended &&
         state.length < state.highWaterMark) {
    debug('maybeReadMore read 0');
    stream.read(0);
    if (len === state.length)
      // didn't get any data, stop spinning.
      break;
    else
      len = state.length;
  }
  state.readingMore = false;
}

// abstract method.  to be overridden in specific implementation classes.
// call cb(er, data) where data is <= n in length.
// for virtual (non-string, non-buffer) streams, "length" is somewhat
// arbitrary, and perhaps not very meaningful.
Readable.prototype._read = function(n) {
  this.emit('error', new Error('not implemented'));
};

Readable.prototype.pipe = function(dest, pipeOpts) {
  var src = this;
  var state = this._readableState;

  switch (state.pipesCount) {
    case 0:
      state.pipes = dest;
      break;
    case 1:
      state.pipes = [state.pipes, dest];
      break;
    default:
      state.pipes.push(dest);
      break;
  }
  state.pipesCount += 1;
  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);

  var doEnd = (!pipeOpts || pipeOpts.end !== false) &&
              dest !== process.stdout &&
              dest !== process.stderr;

  var endFn = doEnd ? onend : cleanup;
  if (state.endEmitted)
    processNextTick(endFn);
  else
    src.once('end', endFn);

  dest.on('unpipe', onunpipe);
  function onunpipe(readable) {
    debug('onunpipe');
    if (readable === src) {
      cleanup();
    }
  }

  function onend() {
    debug('onend');
    dest.end();
  }

  // when the dest drains, it reduces the awaitDrain counter
  // on the source.  This would be more elegant with a .once()
  // handler in flow(), but adding and removing repeatedly is
  // too slow.
  var ondrain = pipeOnDrain(src);
  dest.on('drain', ondrain);

  var cleanedUp = false;
  function cleanup() {
    debug('cleanup');
    // cleanup event handlers once the pipe is broken
    dest.removeListener('close', onclose);
    dest.removeListener('finish', onfinish);
    dest.removeListener('drain', ondrain);
    dest.removeListener('error', onerror);
    dest.removeListener('unpipe', onunpipe);
    src.removeListener('end', onend);
    src.removeListener('end', cleanup);
    src.removeListener('data', ondata);

    cleanedUp = true;

    // if the reader is waiting for a drain event from this
    // specific writer, then it would cause it to never start
    // flowing again.
    // So, if this is awaiting a drain, then we just call it now.
    // If we don't know, then assume that we are waiting for one.
    if (state.awaitDrain &&
        (!dest._writableState || dest._writableState.needDrain))
      ondrain();
  }

  src.on('data', ondata);
  function ondata(chunk) {
    debug('ondata');
    var ret = dest.write(chunk);
    if (false === ret) {
      // If the user unpiped during `dest.write()`, it is possible
      // to get stuck in a permanently paused state if that write
      // also returned false.
      if (state.pipesCount === 1 &&
          state.pipes[0] === dest &&
          src.listenerCount('data') === 1 &&
          !cleanedUp) {
        debug('false write response, pause', src._readableState.awaitDrain);
        src._readableState.awaitDrain++;
      }
      src.pause();
    }
  }

  // if the dest has an error, then stop piping into it.
  // however, don't suppress the throwing behavior for this.
  function onerror(er) {
    debug('onerror', er);
    unpipe();
    dest.removeListener('error', onerror);
    if (EElistenerCount(dest, 'error') === 0)
      dest.emit('error', er);
  }
  // This is a brutally ugly hack to make sure that our error handler
  // is attached before any userland ones.  NEVER DO THIS.
  if (!dest._events || !dest._events.error)
    dest.on('error', onerror);
  else if (isArray(dest._events.error))
    dest._events.error.unshift(onerror);
  else
    dest._events.error = [onerror, dest._events.error];


  // Both close and finish should trigger unpipe, but only once.
  function onclose() {
    dest.removeListener('finish', onfinish);
    unpipe();
  }
  dest.once('close', onclose);
  function onfinish() {
    debug('onfinish');
    dest.removeListener('close', onclose);
    unpipe();
  }
  dest.once('finish', onfinish);

  function unpipe() {
    debug('unpipe');
    src.unpipe(dest);
  }

  // tell the dest that it's being piped to
  dest.emit('pipe', src);

  // start the flow if it hasn't been started already.
  if (!state.flowing) {
    debug('pipe resume');
    src.resume();
  }

  return dest;
};

function pipeOnDrain(src) {
  return function() {
    var state = src._readableState;
    debug('pipeOnDrain', state.awaitDrain);
    if (state.awaitDrain)
      state.awaitDrain--;
    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {
      state.flowing = true;
      flow(src);
    }
  };
}


Readable.prototype.unpipe = function(dest) {
  var state = this._readableState;

  // if we're not piping anywhere, then do nothing.
  if (state.pipesCount === 0)
    return this;

  // just one destination.  most common case.
  if (state.pipesCount === 1) {
    // passed in one, but it's not the right one.
    if (dest && dest !== state.pipes)
      return this;

    if (!dest)
      dest = state.pipes;

    // got a match.
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;
    if (dest)
      dest.emit('unpipe', this);
    return this;
  }

  // slow case. multiple pipe destinations.

  if (!dest) {
    // remove all.
    var dests = state.pipes;
    var len = state.pipesCount;
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;

    for (var i = 0; i < len; i++)
      dests[i].emit('unpipe', this);
    return this;
  }

  // try to find the right one.
  var i = indexOf(state.pipes, dest);
  if (i === -1)
    return this;

  state.pipes.splice(i, 1);
  state.pipesCount -= 1;
  if (state.pipesCount === 1)
    state.pipes = state.pipes[0];

  dest.emit('unpipe', this);

  return this;
};

// set up data events if they are asked for
// Ensure readable listeners eventually get something
Readable.prototype.on = function(ev, fn) {
  var res = Stream.prototype.on.call(this, ev, fn);

  // If listening to data, and it has not explicitly been paused,
  // then call resume to start the flow of data on the next tick.
  if (ev === 'data' && false !== this._readableState.flowing) {
    this.resume();
  }

  if (ev === 'readable' && this.readable) {
    var state = this._readableState;
    if (!state.readableListening) {
      state.readableListening = true;
      state.emittedReadable = false;
      state.needReadable = true;
      if (!state.reading) {
        processNextTick(nReadingNextTick, this);
      } else if (state.length) {
        emitReadable(this, state);
      }
    }
  }

  return res;
};
Readable.prototype.addListener = Readable.prototype.on;

function nReadingNextTick(self) {
  debug('readable nexttick read 0');
  self.read(0);
}

// pause() and resume() are remnants of the legacy readable stream API
// If the user uses them, then switch into old mode.
Readable.prototype.resume = function() {
  var state = this._readableState;
  if (!state.flowing) {
    debug('resume');
    state.flowing = true;
    resume(this, state);
  }
  return this;
};

function resume(stream, state) {
  if (!state.resumeScheduled) {
    state.resumeScheduled = true;
    processNextTick(resume_, stream, state);
  }
}

function resume_(stream, state) {
  if (!state.reading) {
    debug('resume read 0');
    stream.read(0);
  }

  state.resumeScheduled = false;
  stream.emit('resume');
  flow(stream);
  if (state.flowing && !state.reading)
    stream.read(0);
}

Readable.prototype.pause = function() {
  debug('call pause flowing=%j', this._readableState.flowing);
  if (false !== this._readableState.flowing) {
    debug('pause');
    this._readableState.flowing = false;
    this.emit('pause');
  }
  return this;
};

function flow(stream) {
  var state = stream._readableState;
  debug('flow', state.flowing);
  if (state.flowing) {
    do {
      var chunk = stream.read();
    } while (null !== chunk && state.flowing);
  }
}

// wrap an old-style stream as the async data source.
// This is *not* part of the readable stream interface.
// It is an ugly unfortunate mess of history.
Readable.prototype.wrap = function(stream) {
  var state = this._readableState;
  var paused = false;

  var self = this;
  stream.on('end', function() {
    debug('wrapped end');
    if (state.decoder && !state.ended) {
      var chunk = state.decoder.end();
      if (chunk && chunk.length)
        self.push(chunk);
    }

    self.push(null);
  });

  stream.on('data', function(chunk) {
    debug('wrapped data');
    if (state.decoder)
      chunk = state.decoder.write(chunk);

    // don't skip over falsy values in objectMode
    if (state.objectMode && (chunk === null || chunk === undefined))
      return;
    else if (!state.objectMode && (!chunk || !chunk.length))
      return;

    var ret = self.push(chunk);
    if (!ret) {
      paused = true;
      stream.pause();
    }
  });

  // proxy all the other methods.
  // important when wrapping filters and duplexes.
  for (var i in stream) {
    if (this[i] === undefined && typeof stream[i] === 'function') {
      this[i] = function(method) { return function() {
        return stream[method].apply(stream, arguments);
      }; }(i);
    }
  }

  // proxy certain important events.
  var events = ['error', 'close', 'destroy', 'pause', 'resume'];
  forEach(events, function(ev) {
    stream.on(ev, self.emit.bind(self, ev));
  });

  // when we try to consume some more bytes, simply unpause the
  // underlying stream.
  self._read = function(n) {
    debug('wrapped _read', n);
    if (paused) {
      paused = false;
      stream.resume();
    }
  };

  return self;
};


// exposed for testing purposes only.
Readable._fromList = fromList;

// Pluck off n bytes from an array of buffers.
// Length is the combined lengths of all the buffers in the list.
function fromList(n, state) {
  var list = state.buffer;
  var length = state.length;
  var stringMode = !!state.decoder;
  var objectMode = !!state.objectMode;
  var ret;

  // nothing in the list, definitely empty.
  if (list.length === 0)
    return null;

  if (length === 0)
    ret = null;
  else if (objectMode)
    ret = list.shift();
  else if (!n || n >= length) {
    // read it all, truncate the array.
    if (stringMode)
      ret = list.join('');
    else if (list.length === 1)
      ret = list[0];
    else
      ret = Buffer.concat(list, length);
    list.length = 0;
  } else {
    // read just some of it.
    if (n < list[0].length) {
      // just take a part of the first list item.
      // slice is the same for buffers and strings.
      var buf = list[0];
      ret = buf.slice(0, n);
      list[0] = buf.slice(n);
    } else if (n === list[0].length) {
      // first list is a perfect match
      ret = list.shift();
    } else {
      // complex case.
      // we have enough to cover it, but it spans past the first buffer.
      if (stringMode)
        ret = '';
      else
        ret = new Buffer(n);

      var c = 0;
      for (var i = 0, l = list.length; i < l && c < n; i++) {
        var buf = list[0];
        var cpy = Math.min(n - c, buf.length);

        if (stringMode)
          ret += buf.slice(0, cpy);
        else
          buf.copy(ret, c, 0, cpy);

        if (cpy < buf.length)
          list[0] = buf.slice(cpy);
        else
          list.shift();

        c += cpy;
      }
    }
  }

  return ret;
}

function endReadable(stream) {
  var state = stream._readableState;

  // If we get here before consuming all the bytes, then that is a
  // bug in node.  Should never happen.
  if (state.length > 0)
    throw new Error('endReadable called on non-empty stream');

  if (!state.endEmitted) {
    state.ended = true;
    processNextTick(endReadableNT, state, stream);
  }
}

function endReadableNT(state, stream) {
  // Check that we didn't get one last unshift.
  if (!state.endEmitted && state.length === 0) {
    state.endEmitted = true;
    stream.readable = false;
    stream.emit('end');
  }
}

function forEach (xs, f) {
  for (var i = 0, l = xs.length; i < l; i++) {
    f(xs[i], i);
  }
}

function indexOf (xs, x) {
  for (var i = 0, l = xs.length; i < l; i++) {
    if (xs[i] === x) return i;
  }
  return -1;
}

}).call(this,require('_process'))

},{"./_stream_duplex":84,"_process":78,"buffer":69,"core-util-is":89,"events":73,"inherits":74,"isarray":76,"process-nextick-args":90,"string_decoder/":106,"util":68}],87:[function(require,module,exports){
// a transform stream is a readable/writable stream where you do
// something with the data.  Sometimes it's called a "filter",
// but that's not a great name for it, since that implies a thing where
// some bits pass through, and others are simply ignored.  (That would
// be a valid example of a transform, of course.)
//
// While the output is causally related to the input, it's not a
// necessarily symmetric or synchronous transformation.  For example,
// a zlib stream might take multiple plain-text writes(), and then
// emit a single compressed chunk some time in the future.
//
// Here's how this works:
//
// The Transform stream has all the aspects of the readable and writable
// stream classes.  When you write(chunk), that calls _write(chunk,cb)
// internally, and returns false if there's a lot of pending writes
// buffered up.  When you call read(), that calls _read(n) until
// there's enough pending readable data buffered up.
//
// In a transform stream, the written data is placed in a buffer.  When
// _read(n) is called, it transforms the queued up data, calling the
// buffered _write cb's as it consumes chunks.  If consuming a single
// written chunk would result in multiple output chunks, then the first
// outputted bit calls the readcb, and subsequent chunks just go into
// the read buffer, and will cause it to emit 'readable' if necessary.
//
// This way, back-pressure is actually determined by the reading side,
// since _read has to be called to start processing a new chunk.  However,
// a pathological inflate type of transform can cause excessive buffering
// here.  For example, imagine a stream where every byte of input is
// interpreted as an integer from 0-255, and then results in that many
// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
// 1kb of data being output.  In this case, you could write a very small
// amount of input, and end up with a very large amount of output.  In
// such a pathological inflating mechanism, there'd be no way to tell
// the system to stop doing the transform.  A single 4MB write could
// cause the system to run out of memory.
//
// However, even in such a pathological case, only a single written chunk
// would be consumed, and then the rest would wait (un-transformed) until
// the results of the previous transformed chunk were consumed.

'use strict';

module.exports = Transform;

var Duplex = require('./_stream_duplex');

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

util.inherits(Transform, Duplex);


function TransformState(stream) {
  this.afterTransform = function(er, data) {
    return afterTransform(stream, er, data);
  };

  this.needTransform = false;
  this.transforming = false;
  this.writecb = null;
  this.writechunk = null;
}

function afterTransform(stream, er, data) {
  var ts = stream._transformState;
  ts.transforming = false;

  var cb = ts.writecb;

  if (!cb)
    return stream.emit('error', new Error('no writecb in Transform class'));

  ts.writechunk = null;
  ts.writecb = null;

  if (data !== null && data !== undefined)
    stream.push(data);

  if (cb)
    cb(er);

  var rs = stream._readableState;
  rs.reading = false;
  if (rs.needReadable || rs.length < rs.highWaterMark) {
    stream._read(rs.highWaterMark);
  }
}


function Transform(options) {
  if (!(this instanceof Transform))
    return new Transform(options);

  Duplex.call(this, options);

  this._transformState = new TransformState(this);

  // when the writable side finishes, then flush out anything remaining.
  var stream = this;

  // start out asking for a readable event once data is transformed.
  this._readableState.needReadable = true;

  // we have implemented the _read method, and done the other things
  // that Readable wants before the first _read call, so unset the
  // sync guard flag.
  this._readableState.sync = false;

  if (options) {
    if (typeof options.transform === 'function')
      this._transform = options.transform;

    if (typeof options.flush === 'function')
      this._flush = options.flush;
  }

  this.once('prefinish', function() {
    if (typeof this._flush === 'function')
      this._flush(function(er) {
        done(stream, er);
      });
    else
      done(stream);
  });
}

Transform.prototype.push = function(chunk, encoding) {
  this._transformState.needTransform = false;
  return Duplex.prototype.push.call(this, chunk, encoding);
};

// This is the part where you do stuff!
// override this function in implementation classes.
// 'chunk' is an input chunk.
//
// Call `push(newChunk)` to pass along transformed output
// to the readable side.  You may call 'push' zero or more times.
//
// Call `cb(err)` when you are done with this chunk.  If you pass
// an error, then that'll put the hurt on the whole operation.  If you
// never call cb(), then you'll never get another chunk.
Transform.prototype._transform = function(chunk, encoding, cb) {
  throw new Error('not implemented');
};

Transform.prototype._write = function(chunk, encoding, cb) {
  var ts = this._transformState;
  ts.writecb = cb;
  ts.writechunk = chunk;
  ts.writeencoding = encoding;
  if (!ts.transforming) {
    var rs = this._readableState;
    if (ts.needTransform ||
        rs.needReadable ||
        rs.length < rs.highWaterMark)
      this._read(rs.highWaterMark);
  }
};

// Doesn't matter what the args are here.
// _transform does all the work.
// That we got here means that the readable side wants more data.
Transform.prototype._read = function(n) {
  var ts = this._transformState;

  if (ts.writechunk !== null && ts.writecb && !ts.transforming) {
    ts.transforming = true;
    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
  } else {
    // mark that we need a transform, so that any data that comes in
    // will get processed, now that we've asked for it.
    ts.needTransform = true;
  }
};


function done(stream, er) {
  if (er)
    return stream.emit('error', er);

  // if there's nothing in the write buffer, then that means
  // that nothing more will ever be provided
  var ws = stream._writableState;
  var ts = stream._transformState;

  if (ws.length)
    throw new Error('calling transform done when ws.length != 0');

  if (ts.transforming)
    throw new Error('calling transform done when still transforming');

  return stream.push(null);
}

},{"./_stream_duplex":84,"core-util-is":89,"inherits":74}],88:[function(require,module,exports){
// A bit simpler than readable streams.
// Implement an async ._write(chunk, encoding, cb), and it'll handle all
// the drain event emission and buffering.

'use strict';

module.exports = Writable;

/*<replacement>*/
var processNextTick = require('process-nextick-args');
/*</replacement>*/


/*<replacement>*/
var Buffer = require('buffer').Buffer;
/*</replacement>*/

Writable.WritableState = WritableState;


/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/


/*<replacement>*/
var internalUtil = {
  deprecate: require('util-deprecate')
};
/*</replacement>*/



/*<replacement>*/
var Stream;
(function (){try{
  Stream = require('st' + 'ream');
}catch(_){}finally{
  if (!Stream)
    Stream = require('events').EventEmitter;
}}())
/*</replacement>*/

var Buffer = require('buffer').Buffer;

util.inherits(Writable, Stream);

function nop() {}

function WriteReq(chunk, encoding, cb) {
  this.chunk = chunk;
  this.encoding = encoding;
  this.callback = cb;
  this.next = null;
}

var Duplex;
function WritableState(options, stream) {
  Duplex = Duplex || require('./_stream_duplex');

  options = options || {};

  // object stream flag to indicate whether or not this stream
  // contains buffers or objects.
  this.objectMode = !!options.objectMode;

  if (stream instanceof Duplex)
    this.objectMode = this.objectMode || !!options.writableObjectMode;

  // the point at which write() starts returning false
  // Note: 0 is a valid value, means that we always return false if
  // the entire buffer is not flushed immediately on write()
  var hwm = options.highWaterMark;
  var defaultHwm = this.objectMode ? 16 : 16 * 1024;
  this.highWaterMark = (hwm || hwm === 0) ? hwm : defaultHwm;

  // cast to ints.
  this.highWaterMark = ~~this.highWaterMark;

  this.needDrain = false;
  // at the start of calling end()
  this.ending = false;
  // when end() has been called, and returned
  this.ended = false;
  // when 'finish' is emitted
  this.finished = false;

  // should we decode strings into buffers before passing to _write?
  // this is here so that some node-core streams can optimize string
  // handling at a lower level.
  var noDecode = options.decodeStrings === false;
  this.decodeStrings = !noDecode;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // not an actual buffer we keep track of, but a measurement
  // of how much we're waiting to get pushed to some underlying
  // socket or file.
  this.length = 0;

  // a flag to see when we're in the middle of a write.
  this.writing = false;

  // when true all writes will be buffered until .uncork() call
  this.corked = 0;

  // a flag to be able to tell if the onwrite cb is called immediately,
  // or on a later tick.  We set this to true at first, because any
  // actions that shouldn't happen until "later" should generally also
  // not happen before the first write call.
  this.sync = true;

  // a flag to know if we're processing previously buffered items, which
  // may call the _write() callback in the same tick, so that we don't
  // end up in an overlapped onwrite situation.
  this.bufferProcessing = false;

  // the callback that's passed to _write(chunk,cb)
  this.onwrite = function(er) {
    onwrite(stream, er);
  };

  // the callback that the user supplies to write(chunk,encoding,cb)
  this.writecb = null;

  // the amount that is being written when _write is called.
  this.writelen = 0;

  this.bufferedRequest = null;
  this.lastBufferedRequest = null;

  // number of pending user-supplied write callbacks
  // this must be 0 before 'finish' can be emitted
  this.pendingcb = 0;

  // emit prefinish if the only thing we're waiting for is _write cbs
  // This is relevant for synchronous Transform streams
  this.prefinished = false;

  // True if the error was already emitted and should not be thrown again
  this.errorEmitted = false;
}

WritableState.prototype.getBuffer = function writableStateGetBuffer() {
  var current = this.bufferedRequest;
  var out = [];
  while (current) {
    out.push(current);
    current = current.next;
  }
  return out;
};

(function (){try {
Object.defineProperty(WritableState.prototype, 'buffer', {
  get: internalUtil.deprecate(function() {
    return this.getBuffer();
  }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' +
     'instead.')
});
}catch(_){}}());


var Duplex;
function Writable(options) {
  Duplex = Duplex || require('./_stream_duplex');

  // Writable ctor is applied to Duplexes, though they're not
  // instanceof Writable, they're instanceof Readable.
  if (!(this instanceof Writable) && !(this instanceof Duplex))
    return new Writable(options);

  this._writableState = new WritableState(options, this);

  // legacy.
  this.writable = true;

  if (options) {
    if (typeof options.write === 'function')
      this._write = options.write;

    if (typeof options.writev === 'function')
      this._writev = options.writev;
  }

  Stream.call(this);
}

// Otherwise people can pipe Writable streams, which is just wrong.
Writable.prototype.pipe = function() {
  this.emit('error', new Error('Cannot pipe. Not readable.'));
};


function writeAfterEnd(stream, cb) {
  var er = new Error('write after end');
  // TODO: defer error events consistently everywhere, not just the cb
  stream.emit('error', er);
  processNextTick(cb, er);
}

// If we get something that is not a buffer, string, null, or undefined,
// and we're not in objectMode, then that's an error.
// Otherwise stream chunks are all considered to be of length=1, and the
// watermarks determine how many objects to keep in the buffer, rather than
// how many bytes or characters.
function validChunk(stream, state, chunk, cb) {
  var valid = true;

  if (!(Buffer.isBuffer(chunk)) &&
      typeof chunk !== 'string' &&
      chunk !== null &&
      chunk !== undefined &&
      !state.objectMode) {
    var er = new TypeError('Invalid non-string/buffer chunk');
    stream.emit('error', er);
    processNextTick(cb, er);
    valid = false;
  }
  return valid;
}

Writable.prototype.write = function(chunk, encoding, cb) {
  var state = this._writableState;
  var ret = false;

  if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (Buffer.isBuffer(chunk))
    encoding = 'buffer';
  else if (!encoding)
    encoding = state.defaultEncoding;

  if (typeof cb !== 'function')
    cb = nop;

  if (state.ended)
    writeAfterEnd(this, cb);
  else if (validChunk(this, state, chunk, cb)) {
    state.pendingcb++;
    ret = writeOrBuffer(this, state, chunk, encoding, cb);
  }

  return ret;
};

Writable.prototype.cork = function() {
  var state = this._writableState;

  state.corked++;
};

Writable.prototype.uncork = function() {
  var state = this._writableState;

  if (state.corked) {
    state.corked--;

    if (!state.writing &&
        !state.corked &&
        !state.finished &&
        !state.bufferProcessing &&
        state.bufferedRequest)
      clearBuffer(this, state);
  }
};

Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
  // node::ParseEncoding() requires lower case.
  if (typeof encoding === 'string')
    encoding = encoding.toLowerCase();
  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64',
'ucs2', 'ucs-2','utf16le', 'utf-16le', 'raw']
.indexOf((encoding + '').toLowerCase()) > -1))
    throw new TypeError('Unknown encoding: ' + encoding);
  this._writableState.defaultEncoding = encoding;
};

function decodeChunk(state, chunk, encoding) {
  if (!state.objectMode &&
      state.decodeStrings !== false &&
      typeof chunk === 'string') {
    chunk = new Buffer(chunk, encoding);
  }
  return chunk;
}

// if we're already writing something, then just put this
// in the queue, and wait our turn.  Otherwise, call _write
// If we return false, then we need a drain event, so set that flag.
function writeOrBuffer(stream, state, chunk, encoding, cb) {
  chunk = decodeChunk(state, chunk, encoding);

  if (Buffer.isBuffer(chunk))
    encoding = 'buffer';
  var len = state.objectMode ? 1 : chunk.length;

  state.length += len;

  var ret = state.length < state.highWaterMark;
  // we must ensure that previous needDrain will not be reset to false.
  if (!ret)
    state.needDrain = true;

  if (state.writing || state.corked) {
    var last = state.lastBufferedRequest;
    state.lastBufferedRequest = new WriteReq(chunk, encoding, cb);
    if (last) {
      last.next = state.lastBufferedRequest;
    } else {
      state.bufferedRequest = state.lastBufferedRequest;
    }
  } else {
    doWrite(stream, state, false, len, chunk, encoding, cb);
  }

  return ret;
}

function doWrite(stream, state, writev, len, chunk, encoding, cb) {
  state.writelen = len;
  state.writecb = cb;
  state.writing = true;
  state.sync = true;
  if (writev)
    stream._writev(chunk, state.onwrite);
  else
    stream._write(chunk, encoding, state.onwrite);
  state.sync = false;
}

function onwriteError(stream, state, sync, er, cb) {
  --state.pendingcb;
  if (sync)
    processNextTick(cb, er);
  else
    cb(er);

  stream._writableState.errorEmitted = true;
  stream.emit('error', er);
}

function onwriteStateUpdate(state) {
  state.writing = false;
  state.writecb = null;
  state.length -= state.writelen;
  state.writelen = 0;
}

function onwrite(stream, er) {
  var state = stream._writableState;
  var sync = state.sync;
  var cb = state.writecb;

  onwriteStateUpdate(state);

  if (er)
    onwriteError(stream, state, sync, er, cb);
  else {
    // Check if we're actually ready to finish, but don't emit yet
    var finished = needFinish(state);

    if (!finished &&
        !state.corked &&
        !state.bufferProcessing &&
        state.bufferedRequest) {
      clearBuffer(stream, state);
    }

    if (sync) {
      processNextTick(afterWrite, stream, state, finished, cb);
    } else {
      afterWrite(stream, state, finished, cb);
    }
  }
}

function afterWrite(stream, state, finished, cb) {
  if (!finished)
    onwriteDrain(stream, state);
  state.pendingcb--;
  cb();
  finishMaybe(stream, state);
}

// Must force callback to be called on nextTick, so that we don't
// emit 'drain' before the write() consumer gets the 'false' return
// value, and has a chance to attach a 'drain' listener.
function onwriteDrain(stream, state) {
  if (state.length === 0 && state.needDrain) {
    state.needDrain = false;
    stream.emit('drain');
  }
}


// if there's something in the buffer waiting, then process it
function clearBuffer(stream, state) {
  state.bufferProcessing = true;
  var entry = state.bufferedRequest;

  if (stream._writev && entry && entry.next) {
    // Fast case, write everything using _writev()
    var buffer = [];
    var cbs = [];
    while (entry) {
      cbs.push(entry.callback);
      buffer.push(entry);
      entry = entry.next;
    }

    // count the one we are adding, as well.
    // TODO(isaacs) clean this up
    state.pendingcb++;
    state.lastBufferedRequest = null;
    doWrite(stream, state, true, state.length, buffer, '', function(err) {
      for (var i = 0; i < cbs.length; i++) {
        state.pendingcb--;
        cbs[i](err);
      }
    });

    // Clear buffer
  } else {
    // Slow case, write chunks one-by-one
    while (entry) {
      var chunk = entry.chunk;
      var encoding = entry.encoding;
      var cb = entry.callback;
      var len = state.objectMode ? 1 : chunk.length;

      doWrite(stream, state, false, len, chunk, encoding, cb);
      entry = entry.next;
      // if we didn't call the onwrite immediately, then
      // it means that we need to wait until it does.
      // also, that means that the chunk and cb are currently
      // being processed, so move the buffer counter past them.
      if (state.writing) {
        break;
      }
    }

    if (entry === null)
      state.lastBufferedRequest = null;
  }
  state.bufferedRequest = entry;
  state.bufferProcessing = false;
}

Writable.prototype._write = function(chunk, encoding, cb) {
  cb(new Error('not implemented'));
};

Writable.prototype._writev = null;

Writable.prototype.end = function(chunk, encoding, cb) {
  var state = this._writableState;

  if (typeof chunk === 'function') {
    cb = chunk;
    chunk = null;
    encoding = null;
  } else if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (chunk !== null && chunk !== undefined)
    this.write(chunk, encoding);

  // .end() fully uncorks
  if (state.corked) {
    state.corked = 1;
    this.uncork();
  }

  // ignore unnecessary end() calls.
  if (!state.ending && !state.finished)
    endWritable(this, state, cb);
};


function needFinish(state) {
  return (state.ending &&
          state.length === 0 &&
          state.bufferedRequest === null &&
          !state.finished &&
          !state.writing);
}

function prefinish(stream, state) {
  if (!state.prefinished) {
    state.prefinished = true;
    stream.emit('prefinish');
  }
}

function finishMaybe(stream, state) {
  var need = needFinish(state);
  if (need) {
    if (state.pendingcb === 0) {
      prefinish(stream, state);
      state.finished = true;
      stream.emit('finish');
    } else {
      prefinish(stream, state);
    }
  }
  return need;
}

function endWritable(stream, state, cb) {
  state.ending = true;
  finishMaybe(stream, state);
  if (cb) {
    if (state.finished)
      processNextTick(cb);
    else
      stream.once('finish', cb);
  }
  state.ended = true;
}

},{"./_stream_duplex":84,"buffer":69,"core-util-is":89,"events":73,"inherits":74,"process-nextick-args":90,"util-deprecate":91}],89:[function(require,module,exports){
(function (Buffer){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.

function isArray(arg) {
  if (Array.isArray) {
    return Array.isArray(arg);
  }
  return objectToString(arg) === '[object Array]';
}
exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;

function isSymbol(arg) {
  return typeof arg === 'symbol';
}
exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;

function isRegExp(re) {
  return objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}
exports.isObject = isObject;

function isDate(d) {
  return objectToString(d) === '[object Date]';
}
exports.isDate = isDate;

function isError(e) {
  return (objectToString(e) === '[object Error]' || e instanceof Error);
}
exports.isError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null ||
         typeof arg === 'boolean' ||
         typeof arg === 'number' ||
         typeof arg === 'string' ||
         typeof arg === 'symbol' ||  // ES6 symbol
         typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;

exports.isBuffer = Buffer.isBuffer;

function objectToString(o) {
  return Object.prototype.toString.call(o);
}

}).call(this,{"isBuffer":require("../../../../insert-module-globals/node_modules/is-buffer/index.js")})

},{"../../../../insert-module-globals/node_modules/is-buffer/index.js":75}],90:[function(require,module,exports){
(function (process){
'use strict';

if (!process.version ||
    process.version.indexOf('v0.') === 0 ||
    process.version.indexOf('v1.') === 0 && process.version.indexOf('v1.8.') !== 0) {
  module.exports = nextTick;
} else {
  module.exports = process.nextTick;
}

function nextTick(fn) {
  var args = new Array(arguments.length - 1);
  var i = 0;
  while (i < args.length) {
    args[i++] = arguments[i];
  }
  process.nextTick(function afterTick() {
    fn.apply(null, args);
  });
}

}).call(this,require('_process'))

},{"_process":78}],91:[function(require,module,exports){
(function (global){

/**
 * Module exports.
 */

module.exports = deprecate;

/**
 * Mark that a method should not be used.
 * Returns a modified function which warns once by default.
 *
 * If `localStorage.noDeprecation = true` is set, then it is a no-op.
 *
 * If `localStorage.throwDeprecation = true` is set, then deprecated functions
 * will throw an Error when invoked.
 *
 * If `localStorage.traceDeprecation = true` is set, then deprecated functions
 * will invoke `console.trace()` instead of `console.error()`.
 *
 * @param {Function} fn - the function to deprecate
 * @param {String} msg - the string to print to the console when `fn` is invoked
 * @returns {Function} a new "deprecated" version of `fn`
 * @api public
 */

function deprecate (fn, msg) {
  if (config('noDeprecation')) {
    return fn;
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (config('throwDeprecation')) {
        throw new Error(msg);
      } else if (config('traceDeprecation')) {
        console.trace(msg);
      } else {
        console.warn(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
}

/**
 * Checks `localStorage` for boolean values for the given `name`.
 *
 * @param {String} name
 * @returns {Boolean}
 * @api private
 */

function config (name) {
  // accessing global.localStorage can trigger a DOMException in sandboxed iframes
  try {
    if (!global.localStorage) return false;
  } catch (_) {
    return false;
  }
  var val = global.localStorage[name];
  if (null == val) return false;
  return String(val).toLowerCase() === 'true';
}

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],92:[function(require,module,exports){
module.exports = require("./lib/_stream_passthrough.js")

},{"./lib/_stream_passthrough.js":85}],93:[function(require,module,exports){
var Stream = (function (){
  try {
    return require('st' + 'ream'); // hack to fix a circular dependency issue when used with browserify
  } catch(_){}
}());
exports = module.exports = require('./lib/_stream_readable.js');
exports.Stream = Stream || exports;
exports.Readable = exports;
exports.Writable = require('./lib/_stream_writable.js');
exports.Duplex = require('./lib/_stream_duplex.js');
exports.Transform = require('./lib/_stream_transform.js');
exports.PassThrough = require('./lib/_stream_passthrough.js');

},{"./lib/_stream_duplex.js":84,"./lib/_stream_passthrough.js":85,"./lib/_stream_readable.js":86,"./lib/_stream_transform.js":87,"./lib/_stream_writable.js":88}],94:[function(require,module,exports){
module.exports = require("./lib/_stream_transform.js")

},{"./lib/_stream_transform.js":87}],95:[function(require,module,exports){
module.exports = require("./lib/_stream_writable.js")

},{"./lib/_stream_writable.js":88}],96:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

module.exports = Stream;

var EE = require('events').EventEmitter;
var inherits = require('inherits');

inherits(Stream, EE);
Stream.Readable = require('readable-stream/readable.js');
Stream.Writable = require('readable-stream/writable.js');
Stream.Duplex = require('readable-stream/duplex.js');
Stream.Transform = require('readable-stream/transform.js');
Stream.PassThrough = require('readable-stream/passthrough.js');

// Backwards-compat with node 0.4.x
Stream.Stream = Stream;



// old-style streams.  Note that the pipe method (the only relevant
// part of this class) is overridden in the Readable class.

function Stream() {
  EE.call(this);
}

Stream.prototype.pipe = function(dest, options) {
  var source = this;

  function ondata(chunk) {
    if (dest.writable) {
      if (false === dest.write(chunk) && source.pause) {
        source.pause();
      }
    }
  }

  source.on('data', ondata);

  function ondrain() {
    if (source.readable && source.resume) {
      source.resume();
    }
  }

  dest.on('drain', ondrain);

  // If the 'end' option is not supplied, dest.end() will be called when
  // source gets the 'end' or 'close' events.  Only dest.end() once.
  if (!dest._isStdio && (!options || options.end !== false)) {
    source.on('end', onend);
    source.on('close', onclose);
  }

  var didOnEnd = false;
  function onend() {
    if (didOnEnd) return;
    didOnEnd = true;

    dest.end();
  }


  function onclose() {
    if (didOnEnd) return;
    didOnEnd = true;

    if (typeof dest.destroy === 'function') dest.destroy();
  }

  // don't leave dangling pipes when there are errors.
  function onerror(er) {
    cleanup();
    if (EE.listenerCount(this, 'error') === 0) {
      throw er; // Unhandled stream error in pipe.
    }
  }

  source.on('error', onerror);
  dest.on('error', onerror);

  // remove all the event listeners that were added.
  function cleanup() {
    source.removeListener('data', ondata);
    dest.removeListener('drain', ondrain);

    source.removeListener('end', onend);
    source.removeListener('close', onclose);

    source.removeListener('error', onerror);
    dest.removeListener('error', onerror);

    source.removeListener('end', cleanup);
    source.removeListener('close', cleanup);

    dest.removeListener('close', cleanup);
  }

  source.on('end', cleanup);
  source.on('close', cleanup);

  dest.on('close', cleanup);

  dest.emit('pipe', source);

  // Allow for unix-like usage: A.pipe(B).pipe(C)
  return dest;
};

},{"events":73,"inherits":74,"readable-stream/duplex.js":83,"readable-stream/passthrough.js":92,"readable-stream/readable.js":93,"readable-stream/transform.js":94,"readable-stream/writable.js":95}],97:[function(require,module,exports){
var ClientRequest = require('./lib/request')
var extend = require('xtend')
var statusCodes = require('builtin-status-codes')
var url = require('url')

var http = exports

http.request = function (opts, cb) {
	if (typeof opts === 'string')
		opts = url.parse(opts)
	else
		opts = extend(opts)

	var protocol = opts.protocol || ''
	var host = opts.hostname || opts.host
	var port = opts.port
	var path = opts.path || '/'

	// Necessary for IPv6 addresses
	if (host && host.indexOf(':') !== -1)
		host = '[' + host + ']'

	// This may be a relative url. The browser should always be able to interpret it correctly.
	opts.url = (host ? (protocol + '//' + host) : '') + (port ? ':' + port : '') + path
	opts.method = (opts.method || 'GET').toUpperCase()
	opts.headers = opts.headers || {}

	// Also valid opts.auth, opts.mode

	var req = new ClientRequest(opts)
	if (cb)
		req.on('response', cb)
	return req
}

http.get = function get (opts, cb) {
	var req = http.request(opts, cb)
	req.end()
	return req
}

http.Agent = function () {}
http.Agent.defaultMaxSockets = 4

http.STATUS_CODES = statusCodes

http.METHODS = [
	'CHECKOUT',
	'CONNECT',
	'COPY',
	'DELETE',
	'GET',
	'HEAD',
	'LOCK',
	'M-SEARCH',
	'MERGE',
	'MKACTIVITY',
	'MKCOL',
	'MOVE',
	'NOTIFY',
	'OPTIONS',
	'PATCH',
	'POST',
	'PROPFIND',
	'PROPPATCH',
	'PURGE',
	'PUT',
	'REPORT',
	'SEARCH',
	'SUBSCRIBE',
	'TRACE',
	'UNLOCK',
	'UNSUBSCRIBE'
]
},{"./lib/request":99,"builtin-status-codes":101,"url":107,"xtend":108}],98:[function(require,module,exports){
(function (global){
exports.fetch = isFunction(global.fetch) && isFunction(global.ReadableByteStream)

exports.blobConstructor = false
try {
	new Blob([new ArrayBuffer(1)])
	exports.blobConstructor = true
} catch (e) {}

var xhr = new global.XMLHttpRequest()
// If location.host is empty, e.g. if this page/worker was loaded
// from a Blob, then use example.com to avoid an error
xhr.open('GET', global.location.host ? '/' : 'https://example.com')

function checkTypeSupport (type) {
	try {
		xhr.responseType = type
		return xhr.responseType === type
	} catch (e) {}
	return false
}

// For some strange reason, Safari 7.0 reports typeof global.ArrayBuffer === 'object'.
// Safari 7.1 appears to have fixed this bug.
var haveArrayBuffer = typeof global.ArrayBuffer !== 'undefined'
var haveSlice = haveArrayBuffer && isFunction(global.ArrayBuffer.prototype.slice)

exports.arraybuffer = haveArrayBuffer && checkTypeSupport('arraybuffer')
// These next two tests unavoidably show warnings in Chrome. Since fetch will always
// be used if it's available, just return false for these to avoid the warnings.
exports.msstream = !exports.fetch && haveSlice && checkTypeSupport('ms-stream')
exports.mozchunkedarraybuffer = !exports.fetch && haveArrayBuffer &&
	checkTypeSupport('moz-chunked-arraybuffer')
exports.overrideMimeType = isFunction(xhr.overrideMimeType)
exports.vbArray = isFunction(global.VBArray)

function isFunction (value) {
  return typeof value === 'function'
}

xhr = null // Help gc

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],99:[function(require,module,exports){
(function (process,global,Buffer){
// var Base64 = require('Base64')
var capability = require('./capability')
var foreach = require('foreach')
var indexOf = require('indexof')
var inherits = require('inherits')
var keys = require('object-keys')
var response = require('./response')
var stream = require('stream')

var IncomingMessage = response.IncomingMessage
var rStates = response.readyStates

function decideMode (preferBinary) {
	if (capability.fetch) {
		return 'fetch'
	} else if (capability.mozchunkedarraybuffer) {
		return 'moz-chunked-arraybuffer'
	} else if (capability.msstream) {
		return 'ms-stream'
	} else if (capability.arraybuffer && preferBinary) {
		return 'arraybuffer'
	} else if (capability.vbArray && preferBinary) {
		return 'text:vbarray'
	} else {
		return 'text'
	}
}

var ClientRequest = module.exports = function (opts) {
	var self = this
	stream.Writable.call(self)

	self._opts = opts
	self._body = []
	self._headers = {}
	if (opts.auth)
		self.setHeader('Authorization', 'Basic ' + new Buffer(opts.auth).toString('base64'))
	foreach(keys(opts.headers), function (name) {
		self.setHeader(name, opts.headers[name])
	})

	var preferBinary
	if (opts.mode === 'prefer-streaming') {
		// If streaming is a high priority but binary compatibility and
		// the accuracy of the 'content-type' header aren't
		preferBinary = false
	} else if (opts.mode === 'allow-wrong-content-type') {
		// If streaming is more important than preserving the 'content-type' header
		preferBinary = !capability.overrideMimeType
	} else if (!opts.mode || opts.mode === 'default' || opts.mode === 'prefer-fast') {
		// Use binary if text streaming may corrupt data or the content-type header, or for speed
		preferBinary = true
	} else {
		throw new Error('Invalid value for opts.mode')
	}
	self._mode = decideMode(preferBinary)

	self.on('finish', function () {
		self._onFinish()
	})
}

inherits(ClientRequest, stream.Writable)

ClientRequest.prototype.setHeader = function (name, value) {
	var self = this
	var lowerName = name.toLowerCase()
	// This check is not necessary, but it prevents warnings from browsers about setting unsafe
	// headers. To be honest I'm not entirely sure hiding these warnings is a good thing, but
	// http-browserify did it, so I will too.
	if (indexOf(unsafeHeaders, lowerName) !== -1)
		return

	self._headers[lowerName] = {
		name: name,
		value: value
	}
}

ClientRequest.prototype.getHeader = function (name) {
	var self = this
	return self._headers[name.toLowerCase()].value
}

ClientRequest.prototype.removeHeader = function (name) {
	var self = this
	delete self._headers[name.toLowerCase()]
}

ClientRequest.prototype._onFinish = function () {
	var self = this

	if (self._destroyed)
		return
	var opts = self._opts

	var headersObj = self._headers
	var body
	if (opts.method === 'POST' || opts.method === 'PUT') {
		if (capability.blobConstructor) {
			body = new global.Blob(self._body.map(function (buffer) {
				return buffer.toArrayBuffer()
			}), {
				type: (headersObj['content-type'] || {}).value || ''
			})
		} else {
			// get utf8 string
			body = Buffer.concat(self._body).toString()
		}
	}

	if (self._mode === 'fetch') {
		var headers = keys(headersObj).map(function (name) {
			return [headersObj[name].name, headersObj[name].value]
		})

		global.fetch(self._opts.url, {
			method: self._opts.method,
			headers: headers,
			body: body,
			mode: 'cors',
			credentials: opts.withCredentials ? 'include' : 'same-origin'
		}).then(function (response) {
			self._fetchResponse = response
			self._connect()
		}).then(undefined, function (reason) {
			self.emit('error', reason)
		})
	} else {
		var xhr = self._xhr = new global.XMLHttpRequest()
		try {
			xhr.open(self._opts.method, self._opts.url, true)
		} catch (err) {
			process.nextTick(function () {
				self.emit('error', err)
			})
			return
		}

		// Can't set responseType on really old browsers
		if ('responseType' in xhr)
			xhr.responseType = self._mode.split(':')[0]

		if ('withCredentials' in xhr)
			xhr.withCredentials = !!opts.withCredentials

		if (self._mode === 'text' && 'overrideMimeType' in xhr)
			xhr.overrideMimeType('text/plain; charset=x-user-defined')

		foreach(keys(headersObj), function (name) {
			xhr.setRequestHeader(headersObj[name].name, headersObj[name].value)
		})

		self._response = null
		xhr.onreadystatechange = function () {
			switch (xhr.readyState) {
				case rStates.LOADING:
				case rStates.DONE:
					self._onXHRProgress()
					break
			}
		}
		// Necessary for streaming in Firefox, since xhr.response is ONLY defined
		// in onprogress, not in onreadystatechange with xhr.readyState = 3
		if (self._mode === 'moz-chunked-arraybuffer') {
			xhr.onprogress = function () {
				self._onXHRProgress()
			}
		}

		xhr.onerror = function () {
			if (self._destroyed)
				return
			self.emit('error', new Error('XHR error'))
		}

		try {
			xhr.send(body)
		} catch (err) {
			process.nextTick(function () {
				self.emit('error', err)
			})
			return
		}
	}
}

/**
 * Checks if xhr.status is readable. Even though the spec says it should
 * be available in readyState 3, accessing it throws an exception in IE8
 */
function statusValid (xhr) {
	try {
		return (xhr.status !== null)
	} catch (e) {
		return false
	}
}

ClientRequest.prototype._onXHRProgress = function () {
	var self = this

	if (!statusValid(self._xhr) || self._destroyed)
		return

	if (!self._response)
		self._connect()

	self._response._onXHRProgress()
}

ClientRequest.prototype._connect = function () {
	var self = this

	if (self._destroyed)
		return

	self._response = new IncomingMessage(self._xhr, self._fetchResponse, self._mode)
	self.emit('response', self._response)
}

ClientRequest.prototype._write = function (chunk, encoding, cb) {
	var self = this

	self._body.push(chunk)
	cb()
}

ClientRequest.prototype.abort = ClientRequest.prototype.destroy = function () {
	var self = this
	self._destroyed = true
	if (self._response)
		self._response._destroyed = true
	if (self._xhr)
		self._xhr.abort()
	// Currently, there isn't a way to truly abort a fetch.
	// If you like bikeshedding, see https://github.com/whatwg/fetch/issues/27
}

ClientRequest.prototype.end = function (data, encoding, cb) {
	var self = this
	if (typeof data === 'function') {
		cb = data
		data = undefined
	}

	stream.Writable.prototype.end.call(self, data, encoding, cb)
}

ClientRequest.prototype.flushHeaders = function () {}
ClientRequest.prototype.setTimeout = function () {}
ClientRequest.prototype.setNoDelay = function () {}
ClientRequest.prototype.setSocketKeepAlive = function () {}

// Taken from http://www.w3.org/TR/XMLHttpRequest/#the-setrequestheader%28%29-method
var unsafeHeaders = [
	'accept-charset',
	'accept-encoding',
	'access-control-request-headers',
	'access-control-request-method',
	'connection',
	'content-length',
	'cookie',
	'cookie2',
	'date',
	'dnt',
	'expect',
	'host',
	'keep-alive',
	'origin',
	'referer',
	'te',
	'trailer',
	'transfer-encoding',
	'upgrade',
	'user-agent',
	'via'
]

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer)

},{"./capability":98,"./response":100,"_process":78,"buffer":69,"foreach":102,"indexof":103,"inherits":74,"object-keys":104,"stream":96}],100:[function(require,module,exports){
(function (process,global,Buffer){
var capability = require('./capability')
var foreach = require('foreach')
var inherits = require('inherits')
var stream = require('stream')

var rStates = exports.readyStates = {
	UNSENT: 0,
	OPENED: 1,
	HEADERS_RECEIVED: 2,
	LOADING: 3,
	DONE: 4
}

var IncomingMessage = exports.IncomingMessage = function (xhr, response, mode) {
	var self = this
	stream.Readable.call(self)

	self._mode = mode
	self.headers = {}
	self.rawHeaders = []
	self.trailers = {}
	self.rawTrailers = []

	// Fake the 'close' event, but only once 'end' fires
	self.on('end', function () {
		// The nextTick is necessary to prevent the 'request' module from causing an infinite loop
		process.nextTick(function () {
			self.emit('close')
		})
	})

	if (mode === 'fetch') {
		self._fetchResponse = response

		self.statusCode = response.status
		self.statusMessage = response.statusText
		// backwards compatible version of for (<item> of <iterable>):
		// for (var <item>,_i,_it = <iterable>[Symbol.iterator](); <item> = (_i = _it.next()).value,!_i.done;)
		for (var header, _i, _it = response.headers[Symbol.iterator](); header = (_i = _it.next()).value, !_i.done;) {
			self.headers[header[0].toLowerCase()] = header[1]
			self.rawHeaders.push(header[0], header[1])
		}

		// TODO: this doesn't respect backpressure. Once WritableStream is available, this can be fixed
		var reader = response.body.getReader()
		function read () {
			reader.read().then(function (result) {
				if (self._destroyed)
					return
				if (result.done) {
					self.push(null)
					return
				}
				self.push(new Buffer(result.value))
				read()
			})
		}
		read()

	} else {
		self._xhr = xhr
		self._pos = 0

		self.statusCode = xhr.status
		self.statusMessage = xhr.statusText
		var headers = xhr.getAllResponseHeaders().split(/\r?\n/)
		foreach(headers, function (header) {
			var matches = header.match(/^([^:]+):\s*(.*)/)
			if (matches) {
				var key = matches[1].toLowerCase()
				if (self.headers[key] !== undefined)
					self.headers[key] += ', ' + matches[2]
				else
					self.headers[key] = matches[2]
				self.rawHeaders.push(matches[1], matches[2])
			}
		})

		self._charset = 'x-user-defined'
		if (!capability.overrideMimeType) {
			var mimeType = self.rawHeaders['mime-type']
			if (mimeType) {
				var charsetMatch = mimeType.match(/;\s*charset=([^;])(;|$)/)
				if (charsetMatch) {
					self._charset = charsetMatch[1].toLowerCase()
				}
			}
			if (!self._charset)
				self._charset = 'utf-8' // best guess
		}
	}
}

inherits(IncomingMessage, stream.Readable)

IncomingMessage.prototype._read = function () {}

IncomingMessage.prototype._onXHRProgress = function () {
	var self = this

	var xhr = self._xhr

	var response = null
	switch (self._mode) {
		case 'text:vbarray': // For IE9
			if (xhr.readyState !== rStates.DONE)
				break
			try {
				// This fails in IE8
				response = new global.VBArray(xhr.responseBody).toArray()
			} catch (e) {}
			if (response !== null) {
				self.push(new Buffer(response))
				break
			}
			// Falls through in IE8	
		case 'text':
			try { // This will fail when readyState = 3 in IE9. Switch mode and wait for readyState = 4
				response = xhr.responseText
			} catch (e) {
				self._mode = 'text:vbarray'
				break
			}
			if (response.length > self._pos) {
				var newData = response.substr(self._pos)
				if (self._charset === 'x-user-defined') {
					var buffer = new Buffer(newData.length)
					for (var i = 0; i < newData.length; i++)
						buffer[i] = newData.charCodeAt(i) & 0xff

					self.push(buffer)
				} else {
					self.push(newData, self._charset)
				}
				self._pos = response.length
			}
			break
		case 'arraybuffer':
			if (xhr.readyState !== rStates.DONE)
				break
			response = xhr.response
			self.push(new Buffer(new Uint8Array(response)))
			break
		case 'moz-chunked-arraybuffer': // take whole
			response = xhr.response
			if (xhr.readyState !== rStates.LOADING || !response)
				break
			self.push(new Buffer(new Uint8Array(response)))
			break
		case 'ms-stream':
			response = xhr.response
			if (xhr.readyState !== rStates.LOADING)
				break
			var reader = new global.MSStreamReader()
			reader.onprogress = function () {
				if (reader.result.byteLength > self._pos) {
					self.push(new Buffer(new Uint8Array(reader.result.slice(self._pos))))
					self._pos = reader.result.byteLength
				}
			}
			reader.onload = function () {
				self.push(null)
			}
			// reader.onerror = ??? // TODO: this
			reader.readAsArrayBuffer(response)
			break
	}

	// The ms-stream case handles end separately in reader.onload()
	if (self._xhr.readyState === rStates.DONE && self._mode !== 'ms-stream') {
		self.push(null)
	}
}

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer)

},{"./capability":98,"_process":78,"buffer":69,"foreach":102,"inherits":74,"stream":96}],101:[function(require,module,exports){
module.exports = {
  "100": "Continue",
  "101": "Switching Protocols",
  "102": "Processing",
  "200": "OK",
  "201": "Created",
  "202": "Accepted",
  "203": "Non-Authoritative Information",
  "204": "No Content",
  "205": "Reset Content",
  "206": "Partial Content",
  "207": "Multi-Status",
  "300": "Multiple Choices",
  "301": "Moved Permanently",
  "302": "Moved Temporarily",
  "303": "See Other",
  "304": "Not Modified",
  "305": "Use Proxy",
  "307": "Temporary Redirect",
  "308": "Permanent Redirect",
  "400": "Bad Request",
  "401": "Unauthorized",
  "402": "Payment Required",
  "403": "Forbidden",
  "404": "Not Found",
  "405": "Method Not Allowed",
  "406": "Not Acceptable",
  "407": "Proxy Authentication Required",
  "408": "Request Time-out",
  "409": "Conflict",
  "410": "Gone",
  "411": "Length Required",
  "412": "Precondition Failed",
  "413": "Request Entity Too Large",
  "414": "Request-URI Too Large",
  "415": "Unsupported Media Type",
  "416": "Requested Range Not Satisfiable",
  "417": "Expectation Failed",
  "418": "I'm a teapot",
  "422": "Unprocessable Entity",
  "423": "Locked",
  "424": "Failed Dependency",
  "425": "Unordered Collection",
  "426": "Upgrade Required",
  "428": "Precondition Required",
  "429": "Too Many Requests",
  "431": "Request Header Fields Too Large",
  "500": "Internal Server Error",
  "501": "Not Implemented",
  "502": "Bad Gateway",
  "503": "Service Unavailable",
  "504": "Gateway Time-out",
  "505": "HTTP Version Not Supported",
  "506": "Variant Also Negotiates",
  "507": "Insufficient Storage",
  "509": "Bandwidth Limit Exceeded",
  "510": "Not Extended",
  "511": "Network Authentication Required"
}

},{}],102:[function(require,module,exports){

var hasOwn = Object.prototype.hasOwnProperty;
var toString = Object.prototype.toString;

module.exports = function forEach (obj, fn, ctx) {
    if (toString.call(fn) !== '[object Function]') {
        throw new TypeError('iterator must be a function');
    }
    var l = obj.length;
    if (l === +l) {
        for (var i = 0; i < l; i++) {
            fn.call(ctx, obj[i], i, obj);
        }
    } else {
        for (var k in obj) {
            if (hasOwn.call(obj, k)) {
                fn.call(ctx, obj[k], k, obj);
            }
        }
    }
};


},{}],103:[function(require,module,exports){

var indexOf = [].indexOf;

module.exports = function(arr, obj){
  if (indexOf) return arr.indexOf(obj);
  for (var i = 0; i < arr.length; ++i) {
    if (arr[i] === obj) return i;
  }
  return -1;
};
},{}],104:[function(require,module,exports){
'use strict';

// modified from https://github.com/es-shims/es5-shim
var has = Object.prototype.hasOwnProperty;
var toStr = Object.prototype.toString;
var slice = Array.prototype.slice;
var isArgs = require('./isArguments');
var hasDontEnumBug = !({ toString: null }).propertyIsEnumerable('toString');
var hasProtoEnumBug = function () {}.propertyIsEnumerable('prototype');
var dontEnums = [
	'toString',
	'toLocaleString',
	'valueOf',
	'hasOwnProperty',
	'isPrototypeOf',
	'propertyIsEnumerable',
	'constructor'
];
var equalsConstructorPrototype = function (o) {
	var ctor = o.constructor;
	return ctor && ctor.prototype === o;
};
var blacklistedKeys = {
	$console: true,
	$frame: true,
	$frameElement: true,
	$frames: true,
	$parent: true,
	$self: true,
	$webkitIndexedDB: true,
	$webkitStorageInfo: true,
	$window: true
};
var hasAutomationEqualityBug = (function () {
	/* global window */
	if (typeof window === 'undefined') { return false; }
	for (var k in window) {
		try {
			if (!blacklistedKeys['$' + k] && has.call(window, k) && window[k] !== null && typeof window[k] === 'object') {
				try {
					equalsConstructorPrototype(window[k]);
				} catch (e) {
					return true;
				}
			}
		} catch (e) {
			return true;
		}
	}
	return false;
}());
var equalsConstructorPrototypeIfNotBuggy = function (o) {
	/* global window */
	if (typeof window === 'undefined' || !hasAutomationEqualityBug) {
		return equalsConstructorPrototype(o);
	}
	try {
		return equalsConstructorPrototype(o);
	} catch (e) {
		return false;
	}
};

var keysShim = function keys(object) {
	var isObject = object !== null && typeof object === 'object';
	var isFunction = toStr.call(object) === '[object Function]';
	var isArguments = isArgs(object);
	var isString = isObject && toStr.call(object) === '[object String]';
	var theKeys = [];

	if (!isObject && !isFunction && !isArguments) {
		throw new TypeError('Object.keys called on a non-object');
	}

	var skipProto = hasProtoEnumBug && isFunction;
	if (isString && object.length > 0 && !has.call(object, 0)) {
		for (var i = 0; i < object.length; ++i) {
			theKeys.push(String(i));
		}
	}

	if (isArguments && object.length > 0) {
		for (var j = 0; j < object.length; ++j) {
			theKeys.push(String(j));
		}
	} else {
		for (var name in object) {
			if (!(skipProto && name === 'prototype') && has.call(object, name)) {
				theKeys.push(String(name));
			}
		}
	}

	if (hasDontEnumBug) {
		var skipConstructor = equalsConstructorPrototypeIfNotBuggy(object);

		for (var k = 0; k < dontEnums.length; ++k) {
			if (!(skipConstructor && dontEnums[k] === 'constructor') && has.call(object, dontEnums[k])) {
				theKeys.push(dontEnums[k]);
			}
		}
	}
	return theKeys;
};

keysShim.shim = function shimObjectKeys() {
	if (Object.keys) {
		var keysWorksWithArguments = (function () {
			// Safari 5.0 bug
			return (Object.keys(arguments) || '').length === 2;
		}(1, 2));
		if (!keysWorksWithArguments) {
			var originalKeys = Object.keys;
			Object.keys = function keys(object) {
				if (isArgs(object)) {
					return originalKeys(slice.call(object));
				} else {
					return originalKeys(object);
				}
			};
		}
	} else {
		Object.keys = keysShim;
	}
	return Object.keys || keysShim;
};

module.exports = keysShim;

},{"./isArguments":105}],105:[function(require,module,exports){
'use strict';

var toStr = Object.prototype.toString;

module.exports = function isArguments(value) {
	var str = toStr.call(value);
	var isArgs = str === '[object Arguments]';
	if (!isArgs) {
		isArgs = str !== '[object Array]' &&
			value !== null &&
			typeof value === 'object' &&
			typeof value.length === 'number' &&
			value.length >= 0 &&
			toStr.call(value.callee) === '[object Function]';
	}
	return isArgs;
};

},{}],106:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var Buffer = require('buffer').Buffer;

var isBufferEncoding = Buffer.isEncoding
  || function(encoding) {
       switch (encoding && encoding.toLowerCase()) {
         case 'hex': case 'utf8': case 'utf-8': case 'ascii': case 'binary': case 'base64': case 'ucs2': case 'ucs-2': case 'utf16le': case 'utf-16le': case 'raw': return true;
         default: return false;
       }
     }


function assertEncoding(encoding) {
  if (encoding && !isBufferEncoding(encoding)) {
    throw new Error('Unknown encoding: ' + encoding);
  }
}

// StringDecoder provides an interface for efficiently splitting a series of
// buffers into a series of JS strings without breaking apart multi-byte
// characters. CESU-8 is handled as part of the UTF-8 encoding.
//
// @TODO Handling all encodings inside a single object makes it very difficult
// to reason about this code, so it should be split up in the future.
// @TODO There should be a utf8-strict encoding that rejects invalid UTF-8 code
// points as used by CESU-8.
var StringDecoder = exports.StringDecoder = function(encoding) {
  this.encoding = (encoding || 'utf8').toLowerCase().replace(/[-_]/, '');
  assertEncoding(encoding);
  switch (this.encoding) {
    case 'utf8':
      // CESU-8 represents each of Surrogate Pair by 3-bytes
      this.surrogateSize = 3;
      break;
    case 'ucs2':
    case 'utf16le':
      // UTF-16 represents each of Surrogate Pair by 2-bytes
      this.surrogateSize = 2;
      this.detectIncompleteChar = utf16DetectIncompleteChar;
      break;
    case 'base64':
      // Base-64 stores 3 bytes in 4 chars, and pads the remainder.
      this.surrogateSize = 3;
      this.detectIncompleteChar = base64DetectIncompleteChar;
      break;
    default:
      this.write = passThroughWrite;
      return;
  }

  // Enough space to store all bytes of a single character. UTF-8 needs 4
  // bytes, but CESU-8 may require up to 6 (3 bytes per surrogate).
  this.charBuffer = new Buffer(6);
  // Number of bytes received for the current incomplete multi-byte character.
  this.charReceived = 0;
  // Number of bytes expected for the current incomplete multi-byte character.
  this.charLength = 0;
};


// write decodes the given buffer and returns it as JS string that is
// guaranteed to not contain any partial multi-byte characters. Any partial
// character found at the end of the buffer is buffered up, and will be
// returned when calling write again with the remaining bytes.
//
// Note: Converting a Buffer containing an orphan surrogate to a String
// currently works, but converting a String to a Buffer (via `new Buffer`, or
// Buffer#write) will replace incomplete surrogates with the unicode
// replacement character. See https://codereview.chromium.org/121173009/ .
StringDecoder.prototype.write = function(buffer) {
  var charStr = '';
  // if our last write ended with an incomplete multibyte character
  while (this.charLength) {
    // determine how many remaining bytes this buffer has to offer for this char
    var available = (buffer.length >= this.charLength - this.charReceived) ?
        this.charLength - this.charReceived :
        buffer.length;

    // add the new bytes to the char buffer
    buffer.copy(this.charBuffer, this.charReceived, 0, available);
    this.charReceived += available;

    if (this.charReceived < this.charLength) {
      // still not enough chars in this buffer? wait for more ...
      return '';
    }

    // remove bytes belonging to the current character from the buffer
    buffer = buffer.slice(available, buffer.length);

    // get the character that was split
    charStr = this.charBuffer.slice(0, this.charLength).toString(this.encoding);

    // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
    var charCode = charStr.charCodeAt(charStr.length - 1);
    if (charCode >= 0xD800 && charCode <= 0xDBFF) {
      this.charLength += this.surrogateSize;
      charStr = '';
      continue;
    }
    this.charReceived = this.charLength = 0;

    // if there are no more bytes in this buffer, just emit our char
    if (buffer.length === 0) {
      return charStr;
    }
    break;
  }

  // determine and set charLength / charReceived
  this.detectIncompleteChar(buffer);

  var end = buffer.length;
  if (this.charLength) {
    // buffer the incomplete character bytes we got
    buffer.copy(this.charBuffer, 0, buffer.length - this.charReceived, end);
    end -= this.charReceived;
  }

  charStr += buffer.toString(this.encoding, 0, end);

  var end = charStr.length - 1;
  var charCode = charStr.charCodeAt(end);
  // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
  if (charCode >= 0xD800 && charCode <= 0xDBFF) {
    var size = this.surrogateSize;
    this.charLength += size;
    this.charReceived += size;
    this.charBuffer.copy(this.charBuffer, size, 0, size);
    buffer.copy(this.charBuffer, 0, 0, size);
    return charStr.substring(0, end);
  }

  // or just emit the charStr
  return charStr;
};

// detectIncompleteChar determines if there is an incomplete UTF-8 character at
// the end of the given buffer. If so, it sets this.charLength to the byte
// length that character, and sets this.charReceived to the number of bytes
// that are available for this character.
StringDecoder.prototype.detectIncompleteChar = function(buffer) {
  // determine how many bytes we have to check at the end of this buffer
  var i = (buffer.length >= 3) ? 3 : buffer.length;

  // Figure out if one of the last i bytes of our buffer announces an
  // incomplete char.
  for (; i > 0; i--) {
    var c = buffer[buffer.length - i];

    // See http://en.wikipedia.org/wiki/UTF-8#Description

    // 110XXXXX
    if (i == 1 && c >> 5 == 0x06) {
      this.charLength = 2;
      break;
    }

    // 1110XXXX
    if (i <= 2 && c >> 4 == 0x0E) {
      this.charLength = 3;
      break;
    }

    // 11110XXX
    if (i <= 3 && c >> 3 == 0x1E) {
      this.charLength = 4;
      break;
    }
  }
  this.charReceived = i;
};

StringDecoder.prototype.end = function(buffer) {
  var res = '';
  if (buffer && buffer.length)
    res = this.write(buffer);

  if (this.charReceived) {
    var cr = this.charReceived;
    var buf = this.charBuffer;
    var enc = this.encoding;
    res += buf.slice(0, cr).toString(enc);
  }

  return res;
};

function passThroughWrite(buffer) {
  return buffer.toString(this.encoding);
}

function utf16DetectIncompleteChar(buffer) {
  this.charReceived = buffer.length % 2;
  this.charLength = this.charReceived ? 2 : 0;
}

function base64DetectIncompleteChar(buffer) {
  this.charReceived = buffer.length % 3;
  this.charLength = this.charReceived ? 3 : 0;
}

},{"buffer":69}],107:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var punycode = require('punycode');

exports.parse = urlParse;
exports.resolve = urlResolve;
exports.resolveObject = urlResolveObject;
exports.format = urlFormat;

exports.Url = Url;

function Url() {
  this.protocol = null;
  this.slashes = null;
  this.auth = null;
  this.host = null;
  this.port = null;
  this.hostname = null;
  this.hash = null;
  this.search = null;
  this.query = null;
  this.pathname = null;
  this.path = null;
  this.href = null;
}

// Reference: RFC 3986, RFC 1808, RFC 2396

// define these here so at least they only have to be
// compiled once on the first module load.
var protocolPattern = /^([a-z0-9.+-]+:)/i,
    portPattern = /:[0-9]*$/,

    // RFC 2396: characters reserved for delimiting URLs.
    // We actually just auto-escape these.
    delims = ['<', '>', '"', '`', ' ', '\r', '\n', '\t'],

    // RFC 2396: characters not allowed for various reasons.
    unwise = ['{', '}', '|', '\\', '^', '`'].concat(delims),

    // Allowed by RFCs, but cause of XSS attacks.  Always escape these.
    autoEscape = ['\''].concat(unwise),
    // Characters that are never ever allowed in a hostname.
    // Note that any invalid chars are also handled, but these
    // are the ones that are *expected* to be seen, so we fast-path
    // them.
    nonHostChars = ['%', '/', '?', ';', '#'].concat(autoEscape),
    hostEndingChars = ['/', '?', '#'],
    hostnameMaxLen = 255,
    hostnamePartPattern = /^[a-z0-9A-Z_-]{0,63}$/,
    hostnamePartStart = /^([a-z0-9A-Z_-]{0,63})(.*)$/,
    // protocols that can allow "unsafe" and "unwise" chars.
    unsafeProtocol = {
      'javascript': true,
      'javascript:': true
    },
    // protocols that never have a hostname.
    hostlessProtocol = {
      'javascript': true,
      'javascript:': true
    },
    // protocols that always contain a // bit.
    slashedProtocol = {
      'http': true,
      'https': true,
      'ftp': true,
      'gopher': true,
      'file': true,
      'http:': true,
      'https:': true,
      'ftp:': true,
      'gopher:': true,
      'file:': true
    },
    querystring = require('querystring');

function urlParse(url, parseQueryString, slashesDenoteHost) {
  if (url && isObject(url) && url instanceof Url) return url;

  var u = new Url;
  u.parse(url, parseQueryString, slashesDenoteHost);
  return u;
}

Url.prototype.parse = function(url, parseQueryString, slashesDenoteHost) {
  if (!isString(url)) {
    throw new TypeError("Parameter 'url' must be a string, not " + typeof url);
  }

  var rest = url;

  // trim before proceeding.
  // This is to support parse stuff like "  http://foo.com  \n"
  rest = rest.trim();

  var proto = protocolPattern.exec(rest);
  if (proto) {
    proto = proto[0];
    var lowerProto = proto.toLowerCase();
    this.protocol = lowerProto;
    rest = rest.substr(proto.length);
  }

  // figure out if it's got a host
  // user@server is *always* interpreted as a hostname, and url
  // resolution will treat //foo/bar as host=foo,path=bar because that's
  // how the browser resolves relative URLs.
  if (slashesDenoteHost || proto || rest.match(/^\/\/[^@\/]+@[^@\/]+/)) {
    var slashes = rest.substr(0, 2) === '//';
    if (slashes && !(proto && hostlessProtocol[proto])) {
      rest = rest.substr(2);
      this.slashes = true;
    }
  }

  if (!hostlessProtocol[proto] &&
      (slashes || (proto && !slashedProtocol[proto]))) {

    // there's a hostname.
    // the first instance of /, ?, ;, or # ends the host.
    //
    // If there is an @ in the hostname, then non-host chars *are* allowed
    // to the left of the last @ sign, unless some host-ending character
    // comes *before* the @-sign.
    // URLs are obnoxious.
    //
    // ex:
    // http://a@b@c/ => user:a@b host:c
    // http://a@b?@c => user:a host:c path:/?@c

    // v0.12 TODO(isaacs): This is not quite how Chrome does things.
    // Review our test case against browsers more comprehensively.

    // find the first instance of any hostEndingChars
    var hostEnd = -1;
    for (var i = 0; i < hostEndingChars.length; i++) {
      var hec = rest.indexOf(hostEndingChars[i]);
      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
        hostEnd = hec;
    }

    // at this point, either we have an explicit point where the
    // auth portion cannot go past, or the last @ char is the decider.
    var auth, atSign;
    if (hostEnd === -1) {
      // atSign can be anywhere.
      atSign = rest.lastIndexOf('@');
    } else {
      // atSign must be in auth portion.
      // http://a@b/c@d => host:b auth:a path:/c@d
      atSign = rest.lastIndexOf('@', hostEnd);
    }

    // Now we have a portion which is definitely the auth.
    // Pull that off.
    if (atSign !== -1) {
      auth = rest.slice(0, atSign);
      rest = rest.slice(atSign + 1);
      this.auth = decodeURIComponent(auth);
    }

    // the host is the remaining to the left of the first non-host char
    hostEnd = -1;
    for (var i = 0; i < nonHostChars.length; i++) {
      var hec = rest.indexOf(nonHostChars[i]);
      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
        hostEnd = hec;
    }
    // if we still have not hit it, then the entire thing is a host.
    if (hostEnd === -1)
      hostEnd = rest.length;

    this.host = rest.slice(0, hostEnd);
    rest = rest.slice(hostEnd);

    // pull out port.
    this.parseHost();

    // we've indicated that there is a hostname,
    // so even if it's empty, it has to be present.
    this.hostname = this.hostname || '';

    // if hostname begins with [ and ends with ]
    // assume that it's an IPv6 address.
    var ipv6Hostname = this.hostname[0] === '[' &&
        this.hostname[this.hostname.length - 1] === ']';

    // validate a little.
    if (!ipv6Hostname) {
      var hostparts = this.hostname.split(/\./);
      for (var i = 0, l = hostparts.length; i < l; i++) {
        var part = hostparts[i];
        if (!part) continue;
        if (!part.match(hostnamePartPattern)) {
          var newpart = '';
          for (var j = 0, k = part.length; j < k; j++) {
            if (part.charCodeAt(j) > 127) {
              // we replace non-ASCII char with a temporary placeholder
              // we need this to make sure size of hostname is not
              // broken by replacing non-ASCII by nothing
              newpart += 'x';
            } else {
              newpart += part[j];
            }
          }
          // we test again with ASCII char only
          if (!newpart.match(hostnamePartPattern)) {
            var validParts = hostparts.slice(0, i);
            var notHost = hostparts.slice(i + 1);
            var bit = part.match(hostnamePartStart);
            if (bit) {
              validParts.push(bit[1]);
              notHost.unshift(bit[2]);
            }
            if (notHost.length) {
              rest = '/' + notHost.join('.') + rest;
            }
            this.hostname = validParts.join('.');
            break;
          }
        }
      }
    }

    if (this.hostname.length > hostnameMaxLen) {
      this.hostname = '';
    } else {
      // hostnames are always lower case.
      this.hostname = this.hostname.toLowerCase();
    }

    if (!ipv6Hostname) {
      // IDNA Support: Returns a puny coded representation of "domain".
      // It only converts the part of the domain name that
      // has non ASCII characters. I.e. it dosent matter if
      // you call it with a domain that already is in ASCII.
      var domainArray = this.hostname.split('.');
      var newOut = [];
      for (var i = 0; i < domainArray.length; ++i) {
        var s = domainArray[i];
        newOut.push(s.match(/[^A-Za-z0-9_-]/) ?
            'xn--' + punycode.encode(s) : s);
      }
      this.hostname = newOut.join('.');
    }

    var p = this.port ? ':' + this.port : '';
    var h = this.hostname || '';
    this.host = h + p;
    this.href += this.host;

    // strip [ and ] from the hostname
    // the host field still retains them, though
    if (ipv6Hostname) {
      this.hostname = this.hostname.substr(1, this.hostname.length - 2);
      if (rest[0] !== '/') {
        rest = '/' + rest;
      }
    }
  }

  // now rest is set to the post-host stuff.
  // chop off any delim chars.
  if (!unsafeProtocol[lowerProto]) {

    // First, make 100% sure that any "autoEscape" chars get
    // escaped, even if encodeURIComponent doesn't think they
    // need to be.
    for (var i = 0, l = autoEscape.length; i < l; i++) {
      var ae = autoEscape[i];
      var esc = encodeURIComponent(ae);
      if (esc === ae) {
        esc = escape(ae);
      }
      rest = rest.split(ae).join(esc);
    }
  }


  // chop off from the tail first.
  var hash = rest.indexOf('#');
  if (hash !== -1) {
    // got a fragment string.
    this.hash = rest.substr(hash);
    rest = rest.slice(0, hash);
  }
  var qm = rest.indexOf('?');
  if (qm !== -1) {
    this.search = rest.substr(qm);
    this.query = rest.substr(qm + 1);
    if (parseQueryString) {
      this.query = querystring.parse(this.query);
    }
    rest = rest.slice(0, qm);
  } else if (parseQueryString) {
    // no query string, but parseQueryString still requested
    this.search = '';
    this.query = {};
  }
  if (rest) this.pathname = rest;
  if (slashedProtocol[lowerProto] &&
      this.hostname && !this.pathname) {
    this.pathname = '/';
  }

  //to support http.request
  if (this.pathname || this.search) {
    var p = this.pathname || '';
    var s = this.search || '';
    this.path = p + s;
  }

  // finally, reconstruct the href based on what has been validated.
  this.href = this.format();
  return this;
};

// format a parsed object into a url string
function urlFormat(obj) {
  // ensure it's an object, and not a string url.
  // If it's an obj, this is a no-op.
  // this way, you can call url_format() on strings
  // to clean up potentially wonky urls.
  if (isString(obj)) obj = urlParse(obj);
  if (!(obj instanceof Url)) return Url.prototype.format.call(obj);
  return obj.format();
}

Url.prototype.format = function() {
  var auth = this.auth || '';
  if (auth) {
    auth = encodeURIComponent(auth);
    auth = auth.replace(/%3A/i, ':');
    auth += '@';
  }

  var protocol = this.protocol || '',
      pathname = this.pathname || '',
      hash = this.hash || '',
      host = false,
      query = '';

  if (this.host) {
    host = auth + this.host;
  } else if (this.hostname) {
    host = auth + (this.hostname.indexOf(':') === -1 ?
        this.hostname :
        '[' + this.hostname + ']');
    if (this.port) {
      host += ':' + this.port;
    }
  }

  if (this.query &&
      isObject(this.query) &&
      Object.keys(this.query).length) {
    query = querystring.stringify(this.query);
  }

  var search = this.search || (query && ('?' + query)) || '';

  if (protocol && protocol.substr(-1) !== ':') protocol += ':';

  // only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.
  // unless they had them to begin with.
  if (this.slashes ||
      (!protocol || slashedProtocol[protocol]) && host !== false) {
    host = '//' + (host || '');
    if (pathname && pathname.charAt(0) !== '/') pathname = '/' + pathname;
  } else if (!host) {
    host = '';
  }

  if (hash && hash.charAt(0) !== '#') hash = '#' + hash;
  if (search && search.charAt(0) !== '?') search = '?' + search;

  pathname = pathname.replace(/[?#]/g, function(match) {
    return encodeURIComponent(match);
  });
  search = search.replace('#', '%23');

  return protocol + host + pathname + search + hash;
};

function urlResolve(source, relative) {
  return urlParse(source, false, true).resolve(relative);
}

Url.prototype.resolve = function(relative) {
  return this.resolveObject(urlParse(relative, false, true)).format();
};

function urlResolveObject(source, relative) {
  if (!source) return relative;
  return urlParse(source, false, true).resolveObject(relative);
}

Url.prototype.resolveObject = function(relative) {
  if (isString(relative)) {
    var rel = new Url();
    rel.parse(relative, false, true);
    relative = rel;
  }

  var result = new Url();
  Object.keys(this).forEach(function(k) {
    result[k] = this[k];
  }, this);

  // hash is always overridden, no matter what.
  // even href="" will remove it.
  result.hash = relative.hash;

  // if the relative url is empty, then there's nothing left to do here.
  if (relative.href === '') {
    result.href = result.format();
    return result;
  }

  // hrefs like //foo/bar always cut to the protocol.
  if (relative.slashes && !relative.protocol) {
    // take everything except the protocol from relative
    Object.keys(relative).forEach(function(k) {
      if (k !== 'protocol')
        result[k] = relative[k];
    });

    //urlParse appends trailing / to urls like http://www.example.com
    if (slashedProtocol[result.protocol] &&
        result.hostname && !result.pathname) {
      result.path = result.pathname = '/';
    }

    result.href = result.format();
    return result;
  }

  if (relative.protocol && relative.protocol !== result.protocol) {
    // if it's a known url protocol, then changing
    // the protocol does weird things
    // first, if it's not file:, then we MUST have a host,
    // and if there was a path
    // to begin with, then we MUST have a path.
    // if it is file:, then the host is dropped,
    // because that's known to be hostless.
    // anything else is assumed to be absolute.
    if (!slashedProtocol[relative.protocol]) {
      Object.keys(relative).forEach(function(k) {
        result[k] = relative[k];
      });
      result.href = result.format();
      return result;
    }

    result.protocol = relative.protocol;
    if (!relative.host && !hostlessProtocol[relative.protocol]) {
      var relPath = (relative.pathname || '').split('/');
      while (relPath.length && !(relative.host = relPath.shift()));
      if (!relative.host) relative.host = '';
      if (!relative.hostname) relative.hostname = '';
      if (relPath[0] !== '') relPath.unshift('');
      if (relPath.length < 2) relPath.unshift('');
      result.pathname = relPath.join('/');
    } else {
      result.pathname = relative.pathname;
    }
    result.search = relative.search;
    result.query = relative.query;
    result.host = relative.host || '';
    result.auth = relative.auth;
    result.hostname = relative.hostname || relative.host;
    result.port = relative.port;
    // to support http.request
    if (result.pathname || result.search) {
      var p = result.pathname || '';
      var s = result.search || '';
      result.path = p + s;
    }
    result.slashes = result.slashes || relative.slashes;
    result.href = result.format();
    return result;
  }

  var isSourceAbs = (result.pathname && result.pathname.charAt(0) === '/'),
      isRelAbs = (
          relative.host ||
          relative.pathname && relative.pathname.charAt(0) === '/'
      ),
      mustEndAbs = (isRelAbs || isSourceAbs ||
                    (result.host && relative.pathname)),
      removeAllDots = mustEndAbs,
      srcPath = result.pathname && result.pathname.split('/') || [],
      relPath = relative.pathname && relative.pathname.split('/') || [],
      psychotic = result.protocol && !slashedProtocol[result.protocol];

  // if the url is a non-slashed url, then relative
  // links like ../.. should be able
  // to crawl up to the hostname, as well.  This is strange.
  // result.protocol has already been set by now.
  // Later on, put the first path part into the host field.
  if (psychotic) {
    result.hostname = '';
    result.port = null;
    if (result.host) {
      if (srcPath[0] === '') srcPath[0] = result.host;
      else srcPath.unshift(result.host);
    }
    result.host = '';
    if (relative.protocol) {
      relative.hostname = null;
      relative.port = null;
      if (relative.host) {
        if (relPath[0] === '') relPath[0] = relative.host;
        else relPath.unshift(relative.host);
      }
      relative.host = null;
    }
    mustEndAbs = mustEndAbs && (relPath[0] === '' || srcPath[0] === '');
  }

  if (isRelAbs) {
    // it's absolute.
    result.host = (relative.host || relative.host === '') ?
                  relative.host : result.host;
    result.hostname = (relative.hostname || relative.hostname === '') ?
                      relative.hostname : result.hostname;
    result.search = relative.search;
    result.query = relative.query;
    srcPath = relPath;
    // fall through to the dot-handling below.
  } else if (relPath.length) {
    // it's relative
    // throw away the existing file, and take the new path instead.
    if (!srcPath) srcPath = [];
    srcPath.pop();
    srcPath = srcPath.concat(relPath);
    result.search = relative.search;
    result.query = relative.query;
  } else if (!isNullOrUndefined(relative.search)) {
    // just pull out the search.
    // like href='?foo'.
    // Put this after the other two cases because it simplifies the booleans
    if (psychotic) {
      result.hostname = result.host = srcPath.shift();
      //occationaly the auth can get stuck only in host
      //this especialy happens in cases like
      //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
      var authInHost = result.host && result.host.indexOf('@') > 0 ?
                       result.host.split('@') : false;
      if (authInHost) {
        result.auth = authInHost.shift();
        result.host = result.hostname = authInHost.shift();
      }
    }
    result.search = relative.search;
    result.query = relative.query;
    //to support http.request
    if (!isNull(result.pathname) || !isNull(result.search)) {
      result.path = (result.pathname ? result.pathname : '') +
                    (result.search ? result.search : '');
    }
    result.href = result.format();
    return result;
  }

  if (!srcPath.length) {
    // no path at all.  easy.
    // we've already handled the other stuff above.
    result.pathname = null;
    //to support http.request
    if (result.search) {
      result.path = '/' + result.search;
    } else {
      result.path = null;
    }
    result.href = result.format();
    return result;
  }

  // if a url ENDs in . or .., then it must get a trailing slash.
  // however, if it ends in anything else non-slashy,
  // then it must NOT get a trailing slash.
  var last = srcPath.slice(-1)[0];
  var hasTrailingSlash = (
      (result.host || relative.host) && (last === '.' || last === '..') ||
      last === '');

  // strip single dots, resolve double dots to parent dir
  // if the path tries to go above the root, `up` ends up > 0
  var up = 0;
  for (var i = srcPath.length; i >= 0; i--) {
    last = srcPath[i];
    if (last == '.') {
      srcPath.splice(i, 1);
    } else if (last === '..') {
      srcPath.splice(i, 1);
      up++;
    } else if (up) {
      srcPath.splice(i, 1);
      up--;
    }
  }

  // if the path is allowed to go above the root, restore leading ..s
  if (!mustEndAbs && !removeAllDots) {
    for (; up--; up) {
      srcPath.unshift('..');
    }
  }

  if (mustEndAbs && srcPath[0] !== '' &&
      (!srcPath[0] || srcPath[0].charAt(0) !== '/')) {
    srcPath.unshift('');
  }

  if (hasTrailingSlash && (srcPath.join('/').substr(-1) !== '/')) {
    srcPath.push('');
  }

  var isAbsolute = srcPath[0] === '' ||
      (srcPath[0] && srcPath[0].charAt(0) === '/');

  // put the host back
  if (psychotic) {
    result.hostname = result.host = isAbsolute ? '' :
                                    srcPath.length ? srcPath.shift() : '';
    //occationaly the auth can get stuck only in host
    //this especialy happens in cases like
    //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
    var authInHost = result.host && result.host.indexOf('@') > 0 ?
                     result.host.split('@') : false;
    if (authInHost) {
      result.auth = authInHost.shift();
      result.host = result.hostname = authInHost.shift();
    }
  }

  mustEndAbs = mustEndAbs || (result.host && srcPath.length);

  if (mustEndAbs && !isAbsolute) {
    srcPath.unshift('');
  }

  if (!srcPath.length) {
    result.pathname = null;
    result.path = null;
  } else {
    result.pathname = srcPath.join('/');
  }

  //to support request.http
  if (!isNull(result.pathname) || !isNull(result.search)) {
    result.path = (result.pathname ? result.pathname : '') +
                  (result.search ? result.search : '');
  }
  result.auth = relative.auth || result.auth;
  result.slashes = result.slashes || relative.slashes;
  result.href = result.format();
  return result;
};

Url.prototype.parseHost = function() {
  var host = this.host;
  var port = portPattern.exec(host);
  if (port) {
    port = port[0];
    if (port !== ':') {
      this.port = port.substr(1);
    }
    host = host.substr(0, host.length - port.length);
  }
  if (host) this.hostname = host;
};

function isString(arg) {
  return typeof arg === "string";
}

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}

function isNull(arg) {
  return arg === null;
}
function isNullOrUndefined(arg) {
  return  arg == null;
}

},{"punycode":79,"querystring":82}],108:[function(require,module,exports){
module.exports = extend

var hasOwnProperty = Object.prototype.hasOwnProperty;

function extend() {
    var target = {}

    for (var i = 0; i < arguments.length; i++) {
        var source = arguments[i]

        for (var key in source) {
            if (hasOwnProperty.call(source, key)) {
                target[key] = source[key]
            }
        }
    }

    return target
}

},{}],109:[function(require,module,exports){

module.exports = function(){
  var orig = Error.prepareStackTrace;
  Error.prepareStackTrace = function(_, stack){ return stack; };
  var err = new Error;
  Error.captureStackTrace(err, arguments.callee);
  var stack = err.stack;
  Error.prepareStackTrace = orig;
  return stack;
};

},{}],110:[function(require,module,exports){
var upperCase = require('upper-case')
var sentenceCase = require('sentence-case')

/**
 * Camel case a string.
 *
 * @param  {String} string
 * @param  {String} [locale]
 * @return {String}
 */
module.exports = function (string, locale, mergeNumbers) {
  var result = sentenceCase(string, locale)

  // Replace periods between numeric entities with an underscore.
  if (!mergeNumbers) {
    result = result.replace(/(\d) (?=\d)/g, '$1_')
  }

  // Replace spaces between words with an upper cased character.
  return result.replace(/ (.)/g, function (m, $1) {
    return upperCase($1, locale)
  })
}

},{"sentence-case":112,"upper-case":116}],111:[function(require,module,exports){
/**
 * Special language-specific overrides.
 *
 * Source: ftp://ftp.unicode.org/Public/UCD/latest/ucd/SpecialCasing.txt
 *
 * @type {Object}
 */
var LANGUAGES = {
  tr: {
    regexp: /\u0130|\u0049|\u0049\u0307/g,
    map: {
      '\u0130': '\u0069',
      '\u0049': '\u0131',
      '\u0049\u0307': '\u0069'
    }
  },
  az: {
    regexp: /[\u0130]/g,
    map: {
      '\u0130': '\u0069',
      '\u0049': '\u0131',
      '\u0049\u0307': '\u0069'
    }
  },
  lt: {
    regexp: /[\u0049\u004A\u012E\u00CC\u00CD\u0128]/g,
    map: {
      '\u0049': '\u0069\u0307',
      '\u004A': '\u006A\u0307',
      '\u012E': '\u012F\u0307',
      '\u00CC': '\u0069\u0307\u0300',
      '\u00CD': '\u0069\u0307\u0301',
      '\u0128': '\u0069\u0307\u0303'
    }
  }
}

/**
 * Lowercase a string.
 *
 * @param  {String} str
 * @return {String}
 */
module.exports = function (str, locale) {
  var lang = LANGUAGES[locale]

  str = str == null ? '' : String(str)

  if (lang) {
    str = str.replace(lang.regexp, function (m) { return lang.map[m] })
  }

  return str.toLowerCase()
}

},{}],112:[function(require,module,exports){
var lowerCase = require('lower-case')

var NON_WORD_REGEXP = require('./vendor/non-word-regexp')
var CAMEL_CASE_REGEXP = require('./vendor/camel-case-regexp')
var TRAILING_DIGIT_REGEXP = require('./vendor/trailing-digit-regexp')

/**
 * Sentence case a string.
 *
 * @param  {String} str
 * @param  {String} locale
 * @param  {String} replacement
 * @return {String}
 */
module.exports = function (str, locale, replacement) {
  if (str == null) {
    return ''
  }

  replacement = replacement || ' '

  function replace (match, index, string) {
    if (index === 0 || index === (string.length - match.length)) {
      return ''
    }

    return replacement
  }

  str = String(str)
    // Support camel case ("camelCase" -> "camel Case").
    .replace(CAMEL_CASE_REGEXP, '$1 $2')
    // Support digit groups ("test2012" -> "test 2012").
    .replace(TRAILING_DIGIT_REGEXP, '$1 $2')
    // Remove all non-word characters and replace with a single space.
    .replace(NON_WORD_REGEXP, replace)

  // Lower case the entire string.
  return lowerCase(str, locale)
}

},{"./vendor/camel-case-regexp":113,"./vendor/non-word-regexp":114,"./vendor/trailing-digit-regexp":115,"lower-case":111}],113:[function(require,module,exports){
module.exports = /([\u0061-\u007A\u00B5\u00DF-\u00F6\u00F8-\u00FF\u0101\u0103\u0105\u0107\u0109\u010B\u010D\u010F\u0111\u0113\u0115\u0117\u0119\u011B\u011D\u011F\u0121\u0123\u0125\u0127\u0129\u012B\u012D\u012F\u0131\u0133\u0135\u0137\u0138\u013A\u013C\u013E\u0140\u0142\u0144\u0146\u0148\u0149\u014B\u014D\u014F\u0151\u0153\u0155\u0157\u0159\u015B\u015D\u015F\u0161\u0163\u0165\u0167\u0169\u016B\u016D\u016F\u0171\u0173\u0175\u0177\u017A\u017C\u017E-\u0180\u0183\u0185\u0188\u018C\u018D\u0192\u0195\u0199-\u019B\u019E\u01A1\u01A3\u01A5\u01A8\u01AA\u01AB\u01AD\u01B0\u01B4\u01B6\u01B9\u01BA\u01BD-\u01BF\u01C6\u01C9\u01CC\u01CE\u01D0\u01D2\u01D4\u01D6\u01D8\u01DA\u01DC\u01DD\u01DF\u01E1\u01E3\u01E5\u01E7\u01E9\u01EB\u01ED\u01EF\u01F0\u01F3\u01F5\u01F9\u01FB\u01FD\u01FF\u0201\u0203\u0205\u0207\u0209\u020B\u020D\u020F\u0211\u0213\u0215\u0217\u0219\u021B\u021D\u021F\u0221\u0223\u0225\u0227\u0229\u022B\u022D\u022F\u0231\u0233-\u0239\u023C\u023F\u0240\u0242\u0247\u0249\u024B\u024D\u024F-\u0293\u0295-\u02AF\u0371\u0373\u0377\u037B-\u037D\u0390\u03AC-\u03CE\u03D0\u03D1\u03D5-\u03D7\u03D9\u03DB\u03DD\u03DF\u03E1\u03E3\u03E5\u03E7\u03E9\u03EB\u03ED\u03EF-\u03F3\u03F5\u03F8\u03FB\u03FC\u0430-\u045F\u0461\u0463\u0465\u0467\u0469\u046B\u046D\u046F\u0471\u0473\u0475\u0477\u0479\u047B\u047D\u047F\u0481\u048B\u048D\u048F\u0491\u0493\u0495\u0497\u0499\u049B\u049D\u049F\u04A1\u04A3\u04A5\u04A7\u04A9\u04AB\u04AD\u04AF\u04B1\u04B3\u04B5\u04B7\u04B9\u04BB\u04BD\u04BF\u04C2\u04C4\u04C6\u04C8\u04CA\u04CC\u04CE\u04CF\u04D1\u04D3\u04D5\u04D7\u04D9\u04DB\u04DD\u04DF\u04E1\u04E3\u04E5\u04E7\u04E9\u04EB\u04ED\u04EF\u04F1\u04F3\u04F5\u04F7\u04F9\u04FB\u04FD\u04FF\u0501\u0503\u0505\u0507\u0509\u050B\u050D\u050F\u0511\u0513\u0515\u0517\u0519\u051B\u051D\u051F\u0521\u0523\u0525\u0527\u0561-\u0587\u1D00-\u1D2B\u1D6B-\u1D77\u1D79-\u1D9A\u1E01\u1E03\u1E05\u1E07\u1E09\u1E0B\u1E0D\u1E0F\u1E11\u1E13\u1E15\u1E17\u1E19\u1E1B\u1E1D\u1E1F\u1E21\u1E23\u1E25\u1E27\u1E29\u1E2B\u1E2D\u1E2F\u1E31\u1E33\u1E35\u1E37\u1E39\u1E3B\u1E3D\u1E3F\u1E41\u1E43\u1E45\u1E47\u1E49\u1E4B\u1E4D\u1E4F\u1E51\u1E53\u1E55\u1E57\u1E59\u1E5B\u1E5D\u1E5F\u1E61\u1E63\u1E65\u1E67\u1E69\u1E6B\u1E6D\u1E6F\u1E71\u1E73\u1E75\u1E77\u1E79\u1E7B\u1E7D\u1E7F\u1E81\u1E83\u1E85\u1E87\u1E89\u1E8B\u1E8D\u1E8F\u1E91\u1E93\u1E95-\u1E9D\u1E9F\u1EA1\u1EA3\u1EA5\u1EA7\u1EA9\u1EAB\u1EAD\u1EAF\u1EB1\u1EB3\u1EB5\u1EB7\u1EB9\u1EBB\u1EBD\u1EBF\u1EC1\u1EC3\u1EC5\u1EC7\u1EC9\u1ECB\u1ECD\u1ECF\u1ED1\u1ED3\u1ED5\u1ED7\u1ED9\u1EDB\u1EDD\u1EDF\u1EE1\u1EE3\u1EE5\u1EE7\u1EE9\u1EEB\u1EED\u1EEF\u1EF1\u1EF3\u1EF5\u1EF7\u1EF9\u1EFB\u1EFD\u1EFF-\u1F07\u1F10-\u1F15\u1F20-\u1F27\u1F30-\u1F37\u1F40-\u1F45\u1F50-\u1F57\u1F60-\u1F67\u1F70-\u1F7D\u1F80-\u1F87\u1F90-\u1F97\u1FA0-\u1FA7\u1FB0-\u1FB4\u1FB6\u1FB7\u1FBE\u1FC2-\u1FC4\u1FC6\u1FC7\u1FD0-\u1FD3\u1FD6\u1FD7\u1FE0-\u1FE7\u1FF2-\u1FF4\u1FF6\u1FF7\u210A\u210E\u210F\u2113\u212F\u2134\u2139\u213C\u213D\u2146-\u2149\u214E\u2184\u2C30-\u2C5E\u2C61\u2C65\u2C66\u2C68\u2C6A\u2C6C\u2C71\u2C73\u2C74\u2C76-\u2C7B\u2C81\u2C83\u2C85\u2C87\u2C89\u2C8B\u2C8D\u2C8F\u2C91\u2C93\u2C95\u2C97\u2C99\u2C9B\u2C9D\u2C9F\u2CA1\u2CA3\u2CA5\u2CA7\u2CA9\u2CAB\u2CAD\u2CAF\u2CB1\u2CB3\u2CB5\u2CB7\u2CB9\u2CBB\u2CBD\u2CBF\u2CC1\u2CC3\u2CC5\u2CC7\u2CC9\u2CCB\u2CCD\u2CCF\u2CD1\u2CD3\u2CD5\u2CD7\u2CD9\u2CDB\u2CDD\u2CDF\u2CE1\u2CE3\u2CE4\u2CEC\u2CEE\u2CF3\u2D00-\u2D25\u2D27\u2D2D\uA641\uA643\uA645\uA647\uA649\uA64B\uA64D\uA64F\uA651\uA653\uA655\uA657\uA659\uA65B\uA65D\uA65F\uA661\uA663\uA665\uA667\uA669\uA66B\uA66D\uA681\uA683\uA685\uA687\uA689\uA68B\uA68D\uA68F\uA691\uA693\uA695\uA697\uA723\uA725\uA727\uA729\uA72B\uA72D\uA72F-\uA731\uA733\uA735\uA737\uA739\uA73B\uA73D\uA73F\uA741\uA743\uA745\uA747\uA749\uA74B\uA74D\uA74F\uA751\uA753\uA755\uA757\uA759\uA75B\uA75D\uA75F\uA761\uA763\uA765\uA767\uA769\uA76B\uA76D\uA76F\uA771-\uA778\uA77A\uA77C\uA77F\uA781\uA783\uA785\uA787\uA78C\uA78E\uA791\uA793\uA7A1\uA7A3\uA7A5\uA7A7\uA7A9\uA7FA\uFB00-\uFB06\uFB13-\uFB17\uFF41-\uFF5A])([\u0041-\u005A\u00C0-\u00D6\u00D8-\u00DE\u0100\u0102\u0104\u0106\u0108\u010A\u010C\u010E\u0110\u0112\u0114\u0116\u0118\u011A\u011C\u011E\u0120\u0122\u0124\u0126\u0128\u012A\u012C\u012E\u0130\u0132\u0134\u0136\u0139\u013B\u013D\u013F\u0141\u0143\u0145\u0147\u014A\u014C\u014E\u0150\u0152\u0154\u0156\u0158\u015A\u015C\u015E\u0160\u0162\u0164\u0166\u0168\u016A\u016C\u016E\u0170\u0172\u0174\u0176\u0178\u0179\u017B\u017D\u0181\u0182\u0184\u0186\u0187\u0189-\u018B\u018E-\u0191\u0193\u0194\u0196-\u0198\u019C\u019D\u019F\u01A0\u01A2\u01A4\u01A6\u01A7\u01A9\u01AC\u01AE\u01AF\u01B1-\u01B3\u01B5\u01B7\u01B8\u01BC\u01C4\u01C7\u01CA\u01CD\u01CF\u01D1\u01D3\u01D5\u01D7\u01D9\u01DB\u01DE\u01E0\u01E2\u01E4\u01E6\u01E8\u01EA\u01EC\u01EE\u01F1\u01F4\u01F6-\u01F8\u01FA\u01FC\u01FE\u0200\u0202\u0204\u0206\u0208\u020A\u020C\u020E\u0210\u0212\u0214\u0216\u0218\u021A\u021C\u021E\u0220\u0222\u0224\u0226\u0228\u022A\u022C\u022E\u0230\u0232\u023A\u023B\u023D\u023E\u0241\u0243-\u0246\u0248\u024A\u024C\u024E\u0370\u0372\u0376\u0386\u0388-\u038A\u038C\u038E\u038F\u0391-\u03A1\u03A3-\u03AB\u03CF\u03D2-\u03D4\u03D8\u03DA\u03DC\u03DE\u03E0\u03E2\u03E4\u03E6\u03E8\u03EA\u03EC\u03EE\u03F4\u03F7\u03F9\u03FA\u03FD-\u042F\u0460\u0462\u0464\u0466\u0468\u046A\u046C\u046E\u0470\u0472\u0474\u0476\u0478\u047A\u047C\u047E\u0480\u048A\u048C\u048E\u0490\u0492\u0494\u0496\u0498\u049A\u049C\u049E\u04A0\u04A2\u04A4\u04A6\u04A8\u04AA\u04AC\u04AE\u04B0\u04B2\u04B4\u04B6\u04B8\u04BA\u04BC\u04BE\u04C0\u04C1\u04C3\u04C5\u04C7\u04C9\u04CB\u04CD\u04D0\u04D2\u04D4\u04D6\u04D8\u04DA\u04DC\u04DE\u04E0\u04E2\u04E4\u04E6\u04E8\u04EA\u04EC\u04EE\u04F0\u04F2\u04F4\u04F6\u04F8\u04FA\u04FC\u04FE\u0500\u0502\u0504\u0506\u0508\u050A\u050C\u050E\u0510\u0512\u0514\u0516\u0518\u051A\u051C\u051E\u0520\u0522\u0524\u0526\u0531-\u0556\u10A0-\u10C5\u10C7\u10CD\u1E00\u1E02\u1E04\u1E06\u1E08\u1E0A\u1E0C\u1E0E\u1E10\u1E12\u1E14\u1E16\u1E18\u1E1A\u1E1C\u1E1E\u1E20\u1E22\u1E24\u1E26\u1E28\u1E2A\u1E2C\u1E2E\u1E30\u1E32\u1E34\u1E36\u1E38\u1E3A\u1E3C\u1E3E\u1E40\u1E42\u1E44\u1E46\u1E48\u1E4A\u1E4C\u1E4E\u1E50\u1E52\u1E54\u1E56\u1E58\u1E5A\u1E5C\u1E5E\u1E60\u1E62\u1E64\u1E66\u1E68\u1E6A\u1E6C\u1E6E\u1E70\u1E72\u1E74\u1E76\u1E78\u1E7A\u1E7C\u1E7E\u1E80\u1E82\u1E84\u1E86\u1E88\u1E8A\u1E8C\u1E8E\u1E90\u1E92\u1E94\u1E9E\u1EA0\u1EA2\u1EA4\u1EA6\u1EA8\u1EAA\u1EAC\u1EAE\u1EB0\u1EB2\u1EB4\u1EB6\u1EB8\u1EBA\u1EBC\u1EBE\u1EC0\u1EC2\u1EC4\u1EC6\u1EC8\u1ECA\u1ECC\u1ECE\u1ED0\u1ED2\u1ED4\u1ED6\u1ED8\u1EDA\u1EDC\u1EDE\u1EE0\u1EE2\u1EE4\u1EE6\u1EE8\u1EEA\u1EEC\u1EEE\u1EF0\u1EF2\u1EF4\u1EF6\u1EF8\u1EFA\u1EFC\u1EFE\u1F08-\u1F0F\u1F18-\u1F1D\u1F28-\u1F2F\u1F38-\u1F3F\u1F48-\u1F4D\u1F59\u1F5B\u1F5D\u1F5F\u1F68-\u1F6F\u1FB8-\u1FBB\u1FC8-\u1FCB\u1FD8-\u1FDB\u1FE8-\u1FEC\u1FF8-\u1FFB\u2102\u2107\u210B-\u210D\u2110-\u2112\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u2130-\u2133\u213E\u213F\u2145\u2183\u2C00-\u2C2E\u2C60\u2C62-\u2C64\u2C67\u2C69\u2C6B\u2C6D-\u2C70\u2C72\u2C75\u2C7E-\u2C80\u2C82\u2C84\u2C86\u2C88\u2C8A\u2C8C\u2C8E\u2C90\u2C92\u2C94\u2C96\u2C98\u2C9A\u2C9C\u2C9E\u2CA0\u2CA2\u2CA4\u2CA6\u2CA8\u2CAA\u2CAC\u2CAE\u2CB0\u2CB2\u2CB4\u2CB6\u2CB8\u2CBA\u2CBC\u2CBE\u2CC0\u2CC2\u2CC4\u2CC6\u2CC8\u2CCA\u2CCC\u2CCE\u2CD0\u2CD2\u2CD4\u2CD6\u2CD8\u2CDA\u2CDC\u2CDE\u2CE0\u2CE2\u2CEB\u2CED\u2CF2\uA640\uA642\uA644\uA646\uA648\uA64A\uA64C\uA64E\uA650\uA652\uA654\uA656\uA658\uA65A\uA65C\uA65E\uA660\uA662\uA664\uA666\uA668\uA66A\uA66C\uA680\uA682\uA684\uA686\uA688\uA68A\uA68C\uA68E\uA690\uA692\uA694\uA696\uA722\uA724\uA726\uA728\uA72A\uA72C\uA72E\uA732\uA734\uA736\uA738\uA73A\uA73C\uA73E\uA740\uA742\uA744\uA746\uA748\uA74A\uA74C\uA74E\uA750\uA752\uA754\uA756\uA758\uA75A\uA75C\uA75E\uA760\uA762\uA764\uA766\uA768\uA76A\uA76C\uA76E\uA779\uA77B\uA77D\uA77E\uA780\uA782\uA784\uA786\uA78B\uA78D\uA790\uA792\uA7A0\uA7A2\uA7A4\uA7A6\uA7A8\uA7AA\uFF21-\uFF3A\u0030-\u0039\u00B2\u00B3\u00B9\u00BC-\u00BE\u0660-\u0669\u06F0-\u06F9\u07C0-\u07C9\u0966-\u096F\u09E6-\u09EF\u09F4-\u09F9\u0A66-\u0A6F\u0AE6-\u0AEF\u0B66-\u0B6F\u0B72-\u0B77\u0BE6-\u0BF2\u0C66-\u0C6F\u0C78-\u0C7E\u0CE6-\u0CEF\u0D66-\u0D75\u0E50-\u0E59\u0ED0-\u0ED9\u0F20-\u0F33\u1040-\u1049\u1090-\u1099\u1369-\u137C\u16EE-\u16F0\u17E0-\u17E9\u17F0-\u17F9\u1810-\u1819\u1946-\u194F\u19D0-\u19DA\u1A80-\u1A89\u1A90-\u1A99\u1B50-\u1B59\u1BB0-\u1BB9\u1C40-\u1C49\u1C50-\u1C59\u2070\u2074-\u2079\u2080-\u2089\u2150-\u2182\u2185-\u2189\u2460-\u249B\u24EA-\u24FF\u2776-\u2793\u2CFD\u3007\u3021-\u3029\u3038-\u303A\u3192-\u3195\u3220-\u3229\u3248-\u324F\u3251-\u325F\u3280-\u3289\u32B1-\u32BF\uA620-\uA629\uA6E6-\uA6EF\uA830-\uA835\uA8D0-\uA8D9\uA900-\uA909\uA9D0-\uA9D9\uAA50-\uAA59\uABF0-\uABF9\uFF10-\uFF19])/g

},{}],114:[function(require,module,exports){
module.exports = /[^\u0041-\u005A\u0061-\u007A\u00AA\u00B5\u00BA\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u0527\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u08A0\u08A2-\u08AC\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0977\u0979-\u097F\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C33\u0C35-\u0C39\u0C3D\u0C58\u0C59\u0C60\u0C61\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D60\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F4\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191C\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19C1-\u19C7\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2183\u2184\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005\u3006\u3031-\u3035\u303B\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FCC\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA697\uA6A0-\uA6E5\uA717-\uA71F\uA722-\uA788\uA78B-\uA78E\uA790-\uA793\uA7A0-\uA7AA\uA7F8-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA80-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uABC0-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC\u0030-\u0039\u00B2\u00B3\u00B9\u00BC-\u00BE\u0660-\u0669\u06F0-\u06F9\u07C0-\u07C9\u0966-\u096F\u09E6-\u09EF\u09F4-\u09F9\u0A66-\u0A6F\u0AE6-\u0AEF\u0B66-\u0B6F\u0B72-\u0B77\u0BE6-\u0BF2\u0C66-\u0C6F\u0C78-\u0C7E\u0CE6-\u0CEF\u0D66-\u0D75\u0E50-\u0E59\u0ED0-\u0ED9\u0F20-\u0F33\u1040-\u1049\u1090-\u1099\u1369-\u137C\u16EE-\u16F0\u17E0-\u17E9\u17F0-\u17F9\u1810-\u1819\u1946-\u194F\u19D0-\u19DA\u1A80-\u1A89\u1A90-\u1A99\u1B50-\u1B59\u1BB0-\u1BB9\u1C40-\u1C49\u1C50-\u1C59\u2070\u2074-\u2079\u2080-\u2089\u2150-\u2182\u2185-\u2189\u2460-\u249B\u24EA-\u24FF\u2776-\u2793\u2CFD\u3007\u3021-\u3029\u3038-\u303A\u3192-\u3195\u3220-\u3229\u3248-\u324F\u3251-\u325F\u3280-\u3289\u32B1-\u32BF\uA620-\uA629\uA6E6-\uA6EF\uA830-\uA835\uA8D0-\uA8D9\uA900-\uA909\uA9D0-\uA9D9\uAA50-\uAA59\uABF0-\uABF9\uFF10-\uFF19]+/g

},{}],115:[function(require,module,exports){
module.exports = /([\u0030-\u0039\u00B2\u00B3\u00B9\u00BC-\u00BE\u0660-\u0669\u06F0-\u06F9\u07C0-\u07C9\u0966-\u096F\u09E6-\u09EF\u09F4-\u09F9\u0A66-\u0A6F\u0AE6-\u0AEF\u0B66-\u0B6F\u0B72-\u0B77\u0BE6-\u0BF2\u0C66-\u0C6F\u0C78-\u0C7E\u0CE6-\u0CEF\u0D66-\u0D75\u0E50-\u0E59\u0ED0-\u0ED9\u0F20-\u0F33\u1040-\u1049\u1090-\u1099\u1369-\u137C\u16EE-\u16F0\u17E0-\u17E9\u17F0-\u17F9\u1810-\u1819\u1946-\u194F\u19D0-\u19DA\u1A80-\u1A89\u1A90-\u1A99\u1B50-\u1B59\u1BB0-\u1BB9\u1C40-\u1C49\u1C50-\u1C59\u2070\u2074-\u2079\u2080-\u2089\u2150-\u2182\u2185-\u2189\u2460-\u249B\u24EA-\u24FF\u2776-\u2793\u2CFD\u3007\u3021-\u3029\u3038-\u303A\u3192-\u3195\u3220-\u3229\u3248-\u324F\u3251-\u325F\u3280-\u3289\u32B1-\u32BF\uA620-\uA629\uA6E6-\uA6EF\uA830-\uA835\uA8D0-\uA8D9\uA900-\uA909\uA9D0-\uA9D9\uAA50-\uAA59\uABF0-\uABF9\uFF10-\uFF19])([^\u0030-\u0039\u00B2\u00B3\u00B9\u00BC-\u00BE\u0660-\u0669\u06F0-\u06F9\u07C0-\u07C9\u0966-\u096F\u09E6-\u09EF\u09F4-\u09F9\u0A66-\u0A6F\u0AE6-\u0AEF\u0B66-\u0B6F\u0B72-\u0B77\u0BE6-\u0BF2\u0C66-\u0C6F\u0C78-\u0C7E\u0CE6-\u0CEF\u0D66-\u0D75\u0E50-\u0E59\u0ED0-\u0ED9\u0F20-\u0F33\u1040-\u1049\u1090-\u1099\u1369-\u137C\u16EE-\u16F0\u17E0-\u17E9\u17F0-\u17F9\u1810-\u1819\u1946-\u194F\u19D0-\u19DA\u1A80-\u1A89\u1A90-\u1A99\u1B50-\u1B59\u1BB0-\u1BB9\u1C40-\u1C49\u1C50-\u1C59\u2070\u2074-\u2079\u2080-\u2089\u2150-\u2182\u2185-\u2189\u2460-\u249B\u24EA-\u24FF\u2776-\u2793\u2CFD\u3007\u3021-\u3029\u3038-\u303A\u3192-\u3195\u3220-\u3229\u3248-\u324F\u3251-\u325F\u3280-\u3289\u32B1-\u32BF\uA620-\uA629\uA6E6-\uA6EF\uA830-\uA835\uA8D0-\uA8D9\uA900-\uA909\uA9D0-\uA9D9\uAA50-\uAA59\uABF0-\uABF9\uFF10-\uFF19])/g

},{}],116:[function(require,module,exports){
/**
 * Special language-specific overrides.
 *
 * Source: ftp://ftp.unicode.org/Public/UCD/latest/ucd/SpecialCasing.txt
 *
 * @type {Object}
 */
var LANGUAGES = {
  tr: {
    regexp: /[\u0069]/g,
    map: {
      '\u0069': '\u0130'
    }
  },
  az: {
    regexp: /[\u0069]/g,
    map: {
      '\u0069': '\u0130'
    }
  },
  lt: {
    regexp: /[\u0069\u006A\u012F]\u0307|\u0069\u0307[\u0300\u0301\u0303]/g,
    map: {
      '\u0069\u0307': '\u0049',
      '\u006A\u0307': '\u004A',
      '\u012F\u0307': '\u012E',
      '\u0069\u0307\u0300': '\u00CC',
      '\u0069\u0307\u0301': '\u00CD',
      '\u0069\u0307\u0303': '\u0128'
    }
  }
}

/**
 * Upper case a string.
 *
 * @param  {String} str
 * @return {String}
 */
module.exports = function (str, locale) {
  var lang = LANGUAGES[locale]

  str = str == null ? '' : String(str)

  if (lang) {
    str = str.replace(lang.regexp, function (m) { return lang.map[m] })
  }

  return str.toUpperCase()
}

},{}],117:[function(require,module,exports){

/**
 * Module dependencies.
 */

var colors = require('colors/safe')
  , utils = require('./utils')
  , repeat = utils.repeat
  , truncate = utils.truncate
  , pad = utils.pad;

/**
 * Table constructor
 *
 * @param {Object} options
 * @api public
 */

function Table (options){
  this.options = utils.options({
      chars: {
          'top': '─'
        , 'top-mid': '┬'
        , 'top-left': '┌'
        , 'top-right': '┐'
        , 'bottom': '─'
        , 'bottom-mid': '┴'
        , 'bottom-left': '└'
        , 'bottom-right': '┘'
        , 'left': '│'
        , 'left-mid': '├'
        , 'mid': '─'
        , 'mid-mid': '┼'
        , 'right': '│'
        , 'right-mid': '┤'
        , 'middle': '│'
      }
    , truncate: '…'
    , colWidths: []
    , colAligns: []
    , style: {
          'padding-left': 1
        , 'padding-right': 1
        , head: ['red']
        , border: ['grey']
        , compact : false
      }
    , head: []
  }, options);
};

/**
 * Inherit from Array.
 */

Table.prototype.__proto__ = Array.prototype;

/**
 * Width getter
 *
 * @return {Number} width
 * @api public
 */

Table.prototype.__defineGetter__('width', function (){
  var str = this.toString().split("\n");
  if (str.length) return str[0].length;
  return 0;
});

/**
 * Render to a string.
 *
 * @return {String} table representation
 * @api public
 */

Table.prototype.render
Table.prototype.toString = function (){
  var ret = ''
    , options = this.options
    , style = options.style
    , head = options.head
    , chars = options.chars
    , truncater = options.truncate
      , colWidths = options.colWidths || new Array(this.head.length)
      , totalWidth = 0;

    if (!head.length && !this.length) return '';

    if (!colWidths.length){
      var all_rows = this.slice(0);
      if (head.length) { all_rows = all_rows.concat([head]) };

      all_rows.forEach(function(cells){
        // horizontal (arrays)
        if (typeof cells === 'object' && cells.length) {
          extractColumnWidths(cells);

        // vertical (objects)
        } else {
          var header_cell = Object.keys(cells)[0]
            , value_cell = cells[header_cell];

          colWidths[0] = Math.max(colWidths[0] || 0, get_width(header_cell) || 0);

          // cross (objects w/ array values)
          if (typeof value_cell === 'object' && value_cell.length) {
            extractColumnWidths(value_cell, 1);
          } else {
            colWidths[1] = Math.max(colWidths[1] || 0, get_width(value_cell) || 0);
          }
        }
    });
  };

  totalWidth = (colWidths.length == 1 ? colWidths[0] : colWidths.reduce(
    function (a, b){
      return a + b
    })) + colWidths.length + 1;

  function extractColumnWidths(arr, offset) {
    var offset = offset || 0;
    arr.forEach(function(cell, i){
      colWidths[i + offset] = Math.max(colWidths[i + offset] || 0, get_width(cell) || 0);
    });
  };

  function get_width(obj) {
    return typeof obj == 'object' && obj.width != undefined
         ? obj.width
         : ((typeof obj == 'object' ? utils.strlen(obj.text) : utils.strlen(obj)) + (style['padding-left'] || 0) + (style['padding-right'] || 0))
  }

  // draws a line
  function line (line, left, right, intersection){
    var width = 0
      , line =
          left
        + repeat(line, totalWidth - 2)
        + right;

    colWidths.forEach(function (w, i){
      if (i == colWidths.length - 1) return;
      width += w + 1;
      line = line.substr(0, width) + intersection + line.substr(width + 1);
    });

    return applyStyles(options.style.border, line);
  };

  // draws the top line
  function lineTop (){
    var l = line(chars.top
               , chars['top-left'] || chars.top
               , chars['top-right'] ||  chars.top
               , chars['top-mid']);
    if (l)
      ret += l + "\n";
  };

  function generateRow (items, style) {
    var cells = []
      , max_height = 0;

    // prepare vertical and cross table data
    if (!Array.isArray(items) && typeof items === "object") {
      var key = Object.keys(items)[0]
        , value = items[key]
        , first_cell_head = true;

      if (Array.isArray(value)) {
        items = value;
        items.unshift(key);
      } else {
        items = [key, value];
      }
    }

    // transform array of item strings into structure of cells
    items.forEach(function (item, i) {
      var contents = item.toString().split("\n").reduce(function (memo, l) {
        memo.push(string(l, i));
        return memo;
      }, [])

      var height = contents.length;
      if (height > max_height) { max_height = height };

      cells.push({ contents: contents , height: height });
    });

    // transform vertical cells into horizontal lines
    var lines = new Array(max_height);
    cells.forEach(function (cell, i) {
      cell.contents.forEach(function (line, j) {
        if (!lines[j]) { lines[j] = [] };
        if (style || (first_cell_head && i === 0 && options.style.head)) {
          line = applyStyles(options.style.head, line)
        }

        lines[j].push(line);
      });

      // populate empty lines in cell
      for (var j = cell.height, l = max_height; j < l; j++) {
        if (!lines[j]) { lines[j] = [] };
        lines[j].push(string('', i));
      }
    });
    var ret = "";
    lines.forEach(function (line, index) {
      if (ret.length > 0) {
        ret += "\n" + applyStyles(options.style.border, chars.left);
      }

      ret += line.join(applyStyles(options.style.border, chars.middle)) + applyStyles(options.style.border, chars.right);
    });

    return applyStyles(options.style.border, chars.left) + ret;
  };

  function applyStyles(styles, subject) {
    if (!subject)
      return '';
    styles.forEach(function(style) {
      subject = colors[style](subject);
    });
    return subject;
  };

  // renders a string, by padding it or truncating it
  function string (str, index){
    var str = String(typeof str == 'object' && str.text ? str.text : str)
      , length = utils.strlen(str)
      , width = colWidths[index]
          - (style['padding-left'] || 0)
          - (style['padding-right'] || 0)
      , align = options.colAligns[index] || 'left';

    return repeat(' ', style['padding-left'] || 0)
         + (length == width ? str :
             (length < width
              ? pad(str, ( width + (str.length - length) ), ' ', align == 'left' ? 'right' :
                  (align == 'middle' ? 'both' : 'left'))
              : (truncater ? truncate(str, width, truncater) : str))
           )
         + repeat(' ', style['padding-right'] || 0);
  };

  if (head.length){
    lineTop();

    ret += generateRow(head, style.head) + "\n"
  }

  if (this.length)
    this.forEach(function (cells, i){
      if (!head.length && i == 0)
        lineTop();
      else {
        if (!style.compact || i<(!!head.length) ?1:0 || cells.length == 0){
          var l = line(chars.mid
                     , chars['left-mid']
                     , chars['right-mid']
                     , chars['mid-mid']);
          if (l)
            ret += l + "\n"
        }
      }

      if (cells.hasOwnProperty("length") && !cells.length) {
        return
      } else {
        ret += generateRow(cells) + "\n";
      };
    });

  var l = line(chars.bottom
             , chars['bottom-left'] || chars.bottom
             , chars['bottom-right'] || chars.bottom
             , chars['bottom-mid']);
  if (l)
    ret += l;
  else
    // trim the last '\n' if we didn't add the bottom decoration
    ret = ret.slice(0, -1);

  return ret;
};

/**
 * Module exports.
 */

module.exports = Table;

module.exports.version = '0.0.1';

},{"./utils":118,"colors/safe":128}],118:[function(require,module,exports){

/**
 * Repeats a string.
 *
 * @param {String} char(s)
 * @param {Number} number of times
 * @return {String} repeated string
 */

exports.repeat = function (str, times){
  return Array(times + 1).join(str);
};

/**
 * Pads a string
 *
 * @api public
 */

exports.pad = function (str, len, pad, dir) {
  if (len + 1 >= str.length)
    switch (dir){
      case 'left':
        str = Array(len + 1 - str.length).join(pad) + str;
        break;

      case 'both':
        var right = Math.ceil((padlen = len - str.length) / 2);
        var left = padlen - right;
        str = Array(left + 1).join(pad) + str + Array(right + 1).join(pad);
        break;

      default:
        str = str + Array(len + 1 - str.length).join(pad);
    };

  return str;
};

/**
 * Truncates a string
 *
 * @api public
 */

exports.truncate = function (str, length, chr){
  chr = chr || '…';
  return str.length >= length ? str.substr(0, length - chr.length) + chr : str;
};

/**
 * Copies and merges options with defaults.
 *
 * @param {Object} defaults
 * @param {Object} supplied options
 * @return {Object} new (merged) object
 */

function options(defaults, opts) {
  for (var p in opts) {
    if (opts[p] && opts[p].constructor && opts[p].constructor === Object) {
      defaults[p] = defaults[p] || {};
      options(defaults[p], opts[p]);
    } else {
      defaults[p] = opts[p];
    }
  }
  return defaults;
};
exports.options = options;

//
// For consideration of terminal "color" programs like colors.js,
// which can add ANSI escape color codes to strings,
// we destyle the ANSI color escape codes for padding calculations.
//
// see: http://en.wikipedia.org/wiki/ANSI_escape_code
//
exports.strlen = function(str){
  var code = /\u001b\[(?:\d*;){0,5}\d*m/g;
  var stripped = ("" + str).replace(code,'');
  var split = stripped.split("\n");
  return split.reduce(function (memo, s) { return (s.length > memo) ? s.length : memo }, 0);
}

},{}],119:[function(require,module,exports){
/*

The MIT License (MIT)

Original Library 
  - Copyright (c) Marak Squires

Additional functionality
 - Copyright (c) Sindre Sorhus <sindresorhus@gmail.com> (sindresorhus.com)

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

*/

var colors = {};
module['exports'] = colors;

colors.themes = {};

var ansiStyles = colors.styles = require('./styles');
var defineProps = Object.defineProperties;

colors.supportsColor = require('./system/supports-colors');

if (typeof colors.enabled === "undefined") {
  colors.enabled = colors.supportsColor;
}

colors.stripColors = colors.strip = function(str){
  return ("" + str).replace(/\x1B\[\d+m/g, '');
};


var stylize = colors.stylize = function stylize (str, style) {
  return ansiStyles[style].open + str + ansiStyles[style].close;
}

var matchOperatorsRe = /[|\\{}()[\]^$+*?.]/g;
var escapeStringRegexp = function (str) {
  if (typeof str !== 'string') {
    throw new TypeError('Expected a string');
  }
  return str.replace(matchOperatorsRe,  '\\$&');
}

function build(_styles) {
  var builder = function builder() {
    return applyStyle.apply(builder, arguments);
  };
  builder._styles = _styles;
  // __proto__ is used because we must return a function, but there is
  // no way to create a function with a different prototype.
  builder.__proto__ = proto;
  return builder;
}

var styles = (function () {
  var ret = {};
  ansiStyles.grey = ansiStyles.gray;
  Object.keys(ansiStyles).forEach(function (key) {
    ansiStyles[key].closeRe = new RegExp(escapeStringRegexp(ansiStyles[key].close), 'g');
    ret[key] = {
      get: function () {
        return build(this._styles.concat(key));
      }
    };
  });
  return ret;
})();

var proto = defineProps(function colors() {}, styles);

function applyStyle() {
  var args = arguments;
  var argsLen = args.length;
  var str = argsLen !== 0 && String(arguments[0]);
  if (argsLen > 1) {
    for (var a = 1; a < argsLen; a++) {
      str += ' ' + args[a];
    }
  }

  if (!colors.enabled || !str) {
    return str;
  }

  var nestedStyles = this._styles;

  var i = nestedStyles.length;
  while (i--) {
    var code = ansiStyles[nestedStyles[i]];
    str = code.open + str.replace(code.closeRe, code.open) + code.close;
  }

  return str;
}

function applyTheme (theme) {
  for (var style in theme) {
    (function(style){
      colors[style] = function(str){
        return colors[theme[style]](str);
      };
    })(style)
  }
}

colors.setTheme = function (theme) {
  if (typeof theme === 'string') {
    try {
      colors.themes[theme] = require(theme);
      applyTheme(colors.themes[theme]);
      return colors.themes[theme];
    } catch (err) {
      console.log(err);
      return err;
    }
  } else {
    applyTheme(theme);
  }
};

function init() {
  var ret = {};
  Object.keys(styles).forEach(function (name) {
    ret[name] = {
      get: function () {
        return build([name]);
      }
    };
  });
  return ret;
}

var sequencer = function sequencer (map, str) {
  var exploded = str.split(""), i = 0;
  exploded = exploded.map(map);
  return exploded.join("");
};

// custom formatter methods
colors.trap = require('./custom/trap');
colors.zalgo = require('./custom/zalgo');

// maps
colors.maps = {};
colors.maps.america = require('./maps/america');
colors.maps.zebra = require('./maps/zebra');
colors.maps.rainbow = require('./maps/rainbow');
colors.maps.random = require('./maps/random')

for (var map in colors.maps) {
  (function(map){
    colors[map] = function (str) {
      return sequencer(colors.maps[map], str);
    }
  })(map)
}

defineProps(colors, init());
},{"./custom/trap":120,"./custom/zalgo":121,"./maps/america":122,"./maps/rainbow":123,"./maps/random":124,"./maps/zebra":125,"./styles":126,"./system/supports-colors":127}],120:[function(require,module,exports){
module['exports'] = function runTheTrap (text, options) {
  var result = "";
  text = text || "Run the trap, drop the bass";
  text = text.split('');
  var trap = {
    a: ["\u0040", "\u0104", "\u023a", "\u0245", "\u0394", "\u039b", "\u0414"],
    b: ["\u00df", "\u0181", "\u0243", "\u026e", "\u03b2", "\u0e3f"],
    c: ["\u00a9", "\u023b", "\u03fe"],
    d: ["\u00d0", "\u018a", "\u0500" , "\u0501" ,"\u0502", "\u0503"],
    e: ["\u00cb", "\u0115", "\u018e", "\u0258", "\u03a3", "\u03be", "\u04bc", "\u0a6c"],
    f: ["\u04fa"],
    g: ["\u0262"],
    h: ["\u0126", "\u0195", "\u04a2", "\u04ba", "\u04c7", "\u050a"],
    i: ["\u0f0f"],
    j: ["\u0134"],
    k: ["\u0138", "\u04a0", "\u04c3", "\u051e"],
    l: ["\u0139"],
    m: ["\u028d", "\u04cd", "\u04ce", "\u0520", "\u0521", "\u0d69"],
    n: ["\u00d1", "\u014b", "\u019d", "\u0376", "\u03a0", "\u048a"],
    o: ["\u00d8", "\u00f5", "\u00f8", "\u01fe", "\u0298", "\u047a", "\u05dd", "\u06dd", "\u0e4f"],
    p: ["\u01f7", "\u048e"],
    q: ["\u09cd"],
    r: ["\u00ae", "\u01a6", "\u0210", "\u024c", "\u0280", "\u042f"],
    s: ["\u00a7", "\u03de", "\u03df", "\u03e8"],
    t: ["\u0141", "\u0166", "\u0373"],
    u: ["\u01b1", "\u054d"],
    v: ["\u05d8"],
    w: ["\u0428", "\u0460", "\u047c", "\u0d70"],
    x: ["\u04b2", "\u04fe", "\u04fc", "\u04fd"],
    y: ["\u00a5", "\u04b0", "\u04cb"],
    z: ["\u01b5", "\u0240"]
  }
  text.forEach(function(c){
    c = c.toLowerCase();
    var chars = trap[c] || [" "];
    var rand = Math.floor(Math.random() * chars.length);
    if (typeof trap[c] !== "undefined") {
      result += trap[c][rand];
    } else {
      result += c;
    }
  });
  return result;

}

},{}],121:[function(require,module,exports){
// please no
module['exports'] = function zalgo(text, options) {
  text = text || "   he is here   ";
  var soul = {
    "up" : [
      '̍', '̎', '̄', '̅',
      '̿', '̑', '̆', '̐',
      '͒', '͗', '͑', '̇',
      '̈', '̊', '͂', '̓',
      '̈', '͊', '͋', '͌',
      '̃', '̂', '̌', '͐',
      '̀', '́', '̋', '̏',
      '̒', '̓', '̔', '̽',
      '̉', 'ͣ', 'ͤ', 'ͥ',
      'ͦ', 'ͧ', 'ͨ', 'ͩ',
      'ͪ', 'ͫ', 'ͬ', 'ͭ',
      'ͮ', 'ͯ', '̾', '͛',
      '͆', '̚'
    ],
    "down" : [
      '̖', '̗', '̘', '̙',
      '̜', '̝', '̞', '̟',
      '̠', '̤', '̥', '̦',
      '̩', '̪', '̫', '̬',
      '̭', '̮', '̯', '̰',
      '̱', '̲', '̳', '̹',
      '̺', '̻', '̼', 'ͅ',
      '͇', '͈', '͉', '͍',
      '͎', '͓', '͔', '͕',
      '͖', '͙', '͚', '̣'
    ],
    "mid" : [
      '̕', '̛', '̀', '́',
      '͘', '̡', '̢', '̧',
      '̨', '̴', '̵', '̶',
      '͜', '͝', '͞',
      '͟', '͠', '͢', '̸',
      '̷', '͡', ' ҉'
    ]
  },
  all = [].concat(soul.up, soul.down, soul.mid),
  zalgo = {};

  function randomNumber(range) {
    var r = Math.floor(Math.random() * range);
    return r;
  }

  function is_char(character) {
    var bool = false;
    all.filter(function (i) {
      bool = (i === character);
    });
    return bool;
  }
  

  function heComes(text, options) {
    var result = '', counts, l;
    options = options || {};
    options["up"] = options["up"] || true;
    options["mid"] = options["mid"] || true;
    options["down"] = options["down"] || true;
    options["size"] = options["size"] || "maxi";
    text = text.split('');
    for (l in text) {
      if (is_char(l)) {
        continue;
      }
      result = result + text[l];
      counts = {"up" : 0, "down" : 0, "mid" : 0};
      switch (options.size) {
      case 'mini':
        counts.up = randomNumber(8);
        counts.min = randomNumber(2);
        counts.down = randomNumber(8);
        break;
      case 'maxi':
        counts.up = randomNumber(16) + 3;
        counts.min = randomNumber(4) + 1;
        counts.down = randomNumber(64) + 3;
        break;
      default:
        counts.up = randomNumber(8) + 1;
        counts.mid = randomNumber(6) / 2;
        counts.down = randomNumber(8) + 1;
        break;
      }

      var arr = ["up", "mid", "down"];
      for (var d in arr) {
        var index = arr[d];
        for (var i = 0 ; i <= counts[index]; i++) {
          if (options[index]) {
            result = result + soul[index][randomNumber(soul[index].length)];
          }
        }
      }
    }
    return result;
  }
  // don't summon him
  return heComes(text);
}

},{}],122:[function(require,module,exports){
var colors = require('../colors');

module['exports'] = (function() {
  return function (letter, i, exploded) {
    if(letter === " ") return letter;
    switch(i%3) {
      case 0: return colors.red(letter);
      case 1: return colors.white(letter)
      case 2: return colors.blue(letter)
    }
  }
})();
},{"../colors":119}],123:[function(require,module,exports){
var colors = require('../colors');

module['exports'] = (function () {
  var rainbowColors = ['red', 'yellow', 'green', 'blue', 'magenta']; //RoY G BiV
  return function (letter, i, exploded) {
    if (letter === " ") {
      return letter;
    } else {
      return colors[rainbowColors[i++ % rainbowColors.length]](letter);
    }
  };
})();


},{"../colors":119}],124:[function(require,module,exports){
var colors = require('../colors');

module['exports'] = (function () {
  var available = ['underline', 'inverse', 'grey', 'yellow', 'red', 'green', 'blue', 'white', 'cyan', 'magenta'];
  return function(letter, i, exploded) {
    return letter === " " ? letter : colors[available[Math.round(Math.random() * (available.length - 1))]](letter);
  };
})();
},{"../colors":119}],125:[function(require,module,exports){
var colors = require('../colors');

module['exports'] = function (letter, i, exploded) {
  return i % 2 === 0 ? letter : colors.inverse(letter);
};
},{"../colors":119}],126:[function(require,module,exports){
/*
The MIT License (MIT)

Copyright (c) Sindre Sorhus <sindresorhus@gmail.com> (sindresorhus.com)

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

*/

var styles = {};
module['exports'] = styles;

var codes = {
  reset: [0, 0],

  bold: [1, 22],
  dim: [2, 22],
  italic: [3, 23],
  underline: [4, 24],
  inverse: [7, 27],
  hidden: [8, 28],
  strikethrough: [9, 29],

  black: [30, 39],
  red: [31, 39],
  green: [32, 39],
  yellow: [33, 39],
  blue: [34, 39],
  magenta: [35, 39],
  cyan: [36, 39],
  white: [37, 39],
  gray: [90, 39],
  grey: [90, 39],

  bgBlack: [40, 49],
  bgRed: [41, 49],
  bgGreen: [42, 49],
  bgYellow: [43, 49],
  bgBlue: [44, 49],
  bgMagenta: [45, 49],
  bgCyan: [46, 49],
  bgWhite: [47, 49],

  // legacy styles for colors pre v1.0.0
  blackBG: [40, 49],
  redBG: [41, 49],
  greenBG: [42, 49],
  yellowBG: [43, 49],
  blueBG: [44, 49],
  magentaBG: [45, 49],
  cyanBG: [46, 49],
  whiteBG: [47, 49]

};

Object.keys(codes).forEach(function (key) {
  var val = codes[key];
  var style = styles[key] = [];
  style.open = '\u001b[' + val[0] + 'm';
  style.close = '\u001b[' + val[1] + 'm';
});
},{}],127:[function(require,module,exports){
(function (process){
/*
The MIT License (MIT)

Copyright (c) Sindre Sorhus <sindresorhus@gmail.com> (sindresorhus.com)

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

*/

var argv = process.argv;

module.exports = (function () {
  if (argv.indexOf('--no-color') !== -1 ||
    argv.indexOf('--color=false') !== -1) {
    return false;
  }

  if (argv.indexOf('--color') !== -1 ||
    argv.indexOf('--color=true') !== -1 ||
    argv.indexOf('--color=always') !== -1) {
    return true;
  }

  if (process.stdout && !process.stdout.isTTY) {
    return false;
  }

  if (process.platform === 'win32') {
    return true;
  }

  if ('COLORTERM' in process.env) {
    return true;
  }

  if (process.env.TERM === 'dumb') {
    return false;
  }

  if (/^screen|^xterm|^vt100|color|ansi|cygwin|linux/i.test(process.env.TERM)) {
    return true;
  }

  return false;
})();
}).call(this,require('_process'))

},{"_process":78}],128:[function(require,module,exports){
//
// Remark: Requiring this file will use the "safe" colors API which will not touch String.prototype
//
//   var colors = require('colors/safe);
//   colors.red("foo")
//
//
var colors = require('./lib/colors');
module['exports'] = colors;
},{"./lib/colors":119}],129:[function(require,module,exports){
/*

The MIT License (MIT)

Original Library 
  - Copyright (c) Marak Squires

Additional functionality
 - Copyright (c) Sindre Sorhus <sindresorhus@gmail.com> (sindresorhus.com)

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

*/

var colors = {};
module['exports'] = colors;

colors.themes = {};

var ansiStyles = colors.styles = require('./styles');
var defineProps = Object.defineProperties;

colors.supportsColor = require('./system/supports-colors');

if (typeof colors.enabled === "undefined") {
  colors.enabled = colors.supportsColor;
}

colors.stripColors = colors.strip = function(str){
  return ("" + str).replace(/\x1B\[\d+m/g, '');
};


var stylize = colors.stylize = function stylize (str, style) {
  if (!colors.enabled) {
    return str+'';
  }

  return ansiStyles[style].open + str + ansiStyles[style].close;
}

var matchOperatorsRe = /[|\\{}()[\]^$+*?.]/g;
var escapeStringRegexp = function (str) {
  if (typeof str !== 'string') {
    throw new TypeError('Expected a string');
  }
  return str.replace(matchOperatorsRe,  '\\$&');
}

function build(_styles) {
  var builder = function builder() {
    return applyStyle.apply(builder, arguments);
  };
  builder._styles = _styles;
  // __proto__ is used because we must return a function, but there is
  // no way to create a function with a different prototype.
  builder.__proto__ = proto;
  return builder;
}

var styles = (function () {
  var ret = {};
  ansiStyles.grey = ansiStyles.gray;
  Object.keys(ansiStyles).forEach(function (key) {
    ansiStyles[key].closeRe = new RegExp(escapeStringRegexp(ansiStyles[key].close), 'g');
    ret[key] = {
      get: function () {
        return build(this._styles.concat(key));
      }
    };
  });
  return ret;
})();

var proto = defineProps(function colors() {}, styles);

function applyStyle() {
  var args = arguments;
  var argsLen = args.length;
  var str = argsLen !== 0 && String(arguments[0]);
  if (argsLen > 1) {
    for (var a = 1; a < argsLen; a++) {
      str += ' ' + args[a];
    }
  }

  if (!colors.enabled || !str) {
    return str;
  }

  var nestedStyles = this._styles;

  var i = nestedStyles.length;
  while (i--) {
    var code = ansiStyles[nestedStyles[i]];
    str = code.open + str.replace(code.closeRe, code.open) + code.close;
  }

  return str;
}

function applyTheme (theme) {
  for (var style in theme) {
    (function(style){
      colors[style] = function(str){
        if (typeof theme[style] === 'object'){
          var out = str;
          for (var i in theme[style]){
            out = colors[theme[style][i]](out);
          }
          return out;
        }
        return colors[theme[style]](str);
      };
    })(style)
  }
}

colors.setTheme = function (theme) {
  if (typeof theme === 'string') {
    try {
      colors.themes[theme] = require(theme);
      applyTheme(colors.themes[theme]);
      return colors.themes[theme];
    } catch (err) {
      console.log(err);
      return err;
    }
  } else {
    applyTheme(theme);
  }
};

function init() {
  var ret = {};
  Object.keys(styles).forEach(function (name) {
    ret[name] = {
      get: function () {
        return build([name]);
      }
    };
  });
  return ret;
}

var sequencer = function sequencer (map, str) {
  var exploded = str.split(""), i = 0;
  exploded = exploded.map(map);
  return exploded.join("");
};

// custom formatter methods
colors.trap = require('./custom/trap');
colors.zalgo = require('./custom/zalgo');

// maps
colors.maps = {};
colors.maps.america = require('./maps/america');
colors.maps.zebra = require('./maps/zebra');
colors.maps.rainbow = require('./maps/rainbow');
colors.maps.random = require('./maps/random')

for (var map in colors.maps) {
  (function(map){
    colors[map] = function (str) {
      return sequencer(colors.maps[map], str);
    }
  })(map)
}

defineProps(colors, init());
},{"./custom/trap":130,"./custom/zalgo":131,"./maps/america":132,"./maps/rainbow":133,"./maps/random":134,"./maps/zebra":135,"./styles":136,"./system/supports-colors":137}],130:[function(require,module,exports){
arguments[4][120][0].apply(exports,arguments)
},{"dup":120}],131:[function(require,module,exports){
// please no
module['exports'] = function zalgo(text, options) {
  text = text || "   he is here   ";
  var soul = {
    "up" : [
      '̍', '̎', '̄', '̅',
      '̿', '̑', '̆', '̐',
      '͒', '͗', '͑', '̇',
      '̈', '̊', '͂', '̓',
      '̈', '͊', '͋', '͌',
      '̃', '̂', '̌', '͐',
      '̀', '́', '̋', '̏',
      '̒', '̓', '̔', '̽',
      '̉', 'ͣ', 'ͤ', 'ͥ',
      'ͦ', 'ͧ', 'ͨ', 'ͩ',
      'ͪ', 'ͫ', 'ͬ', 'ͭ',
      'ͮ', 'ͯ', '̾', '͛',
      '͆', '̚'
    ],
    "down" : [
      '̖', '̗', '̘', '̙',
      '̜', '̝', '̞', '̟',
      '̠', '̤', '̥', '̦',
      '̩', '̪', '̫', '̬',
      '̭', '̮', '̯', '̰',
      '̱', '̲', '̳', '̹',
      '̺', '̻', '̼', 'ͅ',
      '͇', '͈', '͉', '͍',
      '͎', '͓', '͔', '͕',
      '͖', '͙', '͚', '̣'
    ],
    "mid" : [
      '̕', '̛', '̀', '́',
      '͘', '̡', '̢', '̧',
      '̨', '̴', '̵', '̶',
      '͜', '͝', '͞',
      '͟', '͠', '͢', '̸',
      '̷', '͡', ' ҉'
    ]
  },
  all = [].concat(soul.up, soul.down, soul.mid),
  zalgo = {};

  function randomNumber(range) {
    var r = Math.floor(Math.random() * range);
    return r;
  }

  function is_char(character) {
    var bool = false;
    all.filter(function (i) {
      bool = (i === character);
    });
    return bool;
  }
  

  function heComes(text, options) {
    var result = '', counts, l;
    options = options || {};
    options["up"] =   typeof options["up"]   !== 'undefined' ? options["up"]   : true;
    options["mid"] =  typeof options["mid"]  !== 'undefined' ? options["mid"]  : true;
    options["down"] = typeof options["down"] !== 'undefined' ? options["down"] : true;
    options["size"] = typeof options["size"] !== 'undefined' ? options["size"] : "maxi";
    text = text.split('');
    for (l in text) {
      if (is_char(l)) {
        continue;
      }
      result = result + text[l];
      counts = {"up" : 0, "down" : 0, "mid" : 0};
      switch (options.size) {
      case 'mini':
        counts.up = randomNumber(8);
        counts.mid = randomNumber(2);
        counts.down = randomNumber(8);
        break;
      case 'maxi':
        counts.up = randomNumber(16) + 3;
        counts.mid = randomNumber(4) + 1;
        counts.down = randomNumber(64) + 3;
        break;
      default:
        counts.up = randomNumber(8) + 1;
        counts.mid = randomNumber(6) / 2;
        counts.down = randomNumber(8) + 1;
        break;
      }

      var arr = ["up", "mid", "down"];
      for (var d in arr) {
        var index = arr[d];
        for (var i = 0 ; i <= counts[index]; i++) {
          if (options[index]) {
            result = result + soul[index][randomNumber(soul[index].length)];
          }
        }
      }
    }
    return result;
  }
  // don't summon him
  return heComes(text, options);
}

},{}],132:[function(require,module,exports){
arguments[4][122][0].apply(exports,arguments)
},{"../colors":129,"dup":122}],133:[function(require,module,exports){
arguments[4][123][0].apply(exports,arguments)
},{"../colors":129,"dup":123}],134:[function(require,module,exports){
arguments[4][124][0].apply(exports,arguments)
},{"../colors":129,"dup":124}],135:[function(require,module,exports){
arguments[4][125][0].apply(exports,arguments)
},{"../colors":129,"dup":125}],136:[function(require,module,exports){
arguments[4][126][0].apply(exports,arguments)
},{"dup":126}],137:[function(require,module,exports){
(function (process){
/*
The MIT License (MIT)

Copyright (c) Sindre Sorhus <sindresorhus@gmail.com> (sindresorhus.com)

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

*/

var argv = process.argv;

module.exports = (function () {
  if (argv.indexOf('--no-color') !== -1 ||
    argv.indexOf('--color=false') !== -1) {
    return false;
  }

  if (argv.indexOf('--color') !== -1 ||
    argv.indexOf('--color=true') !== -1 ||
    argv.indexOf('--color=always') !== -1) {
    return true;
  }

  if (process.stdout && !process.stdout.isTTY) {
    return false;
  }

  if (process.platform === 'win32') {
    return true;
  }

  if ('COLORTERM' in process.env) {
    return true;
  }

  if (process.env.TERM === 'dumb') {
    return false;
  }

  if (/^screen|^xterm|^vt100|color|ansi|cygwin|linux/i.test(process.env.TERM)) {
    return true;
  }

  return false;
})();
}).call(this,require('_process'))

},{"_process":78}],138:[function(require,module,exports){
arguments[4][128][0].apply(exports,arguments)
},{"./lib/colors":129,"dup":128}],139:[function(require,module,exports){
(function (process){
/*!
 * connect
 * Copyright(c) 2010 Sencha Inc.
 * Copyright(c) 2011 TJ Holowaychuk
 * Copyright(c) 2015 Douglas Christopher Wilson
 * MIT Licensed
 */

'use strict';

/**
 * Module dependencies.
 * @private
 */

var debug = require('debug')('connect:dispatcher');
var EventEmitter = require('events').EventEmitter;
var finalhandler = require('finalhandler');
var http = require('http');
var merge = require('utils-merge');
var parseUrl = require('parseurl');

/**
 * Module exports.
 * @public
 */

module.exports = createServer;

/**
 * Module variables.
 * @private
 */

var env = process.env.NODE_ENV || 'development';
var proto = {};

/* istanbul ignore next */
var defer = typeof setImmediate === 'function'
  ? setImmediate
  : function(fn){ process.nextTick(fn.bind.apply(fn, arguments)) }

/**
 * Create a new connect server.
 *
 * @return {function}
 * @public
 */

function createServer() {
  function app(req, res, next){ app.handle(req, res, next); }
  merge(app, proto);
  merge(app, EventEmitter.prototype);
  app.route = '/';
  app.stack = [];
  return app;
}

/**
 * Utilize the given middleware `handle` to the given `route`,
 * defaulting to _/_. This "route" is the mount-point for the
 * middleware, when given a value other than _/_ the middleware
 * is only effective when that segment is present in the request's
 * pathname.
 *
 * For example if we were to mount a function at _/admin_, it would
 * be invoked on _/admin_, and _/admin/settings_, however it would
 * not be invoked for _/_, or _/posts_.
 *
 * @param {String|Function|Server} route, callback or server
 * @param {Function|Server} callback or server
 * @return {Server} for chaining
 * @public
 */

proto.use = function use(route, fn) {
  var handle = fn;
  var path = route;

  // default route to '/'
  if (typeof route !== 'string') {
    handle = route;
    path = '/';
  }

  // wrap sub-apps
  if (typeof handle.handle === 'function') {
    var server = handle;
    server.route = path;
    handle = function (req, res, next) {
      server.handle(req, res, next);
    };
  }

  // wrap vanilla http.Servers
  if (handle instanceof http.Server) {
    handle = handle.listeners('request')[0];
  }

  // strip trailing slash
  if (path[path.length - 1] === '/') {
    path = path.slice(0, -1);
  }

  // add the middleware
  debug('use %s %s', path || '/', handle.name || 'anonymous');
  this.stack.push({ route: path, handle: handle });

  return this;
};

/**
 * Handle server requests, punting them down
 * the middleware stack.
 *
 * @private
 */

proto.handle = function handle(req, res, out) {
  var index = 0;
  var protohost = getProtohost(req.url) || '';
  var removed = '';
  var slashAdded = false;
  var stack = this.stack;

  // final function handler
  var done = out || finalhandler(req, res, {
    env: env,
    onerror: logerror
  });

  // store the original URL
  req.originalUrl = req.originalUrl || req.url;

  function next(err) {
    if (slashAdded) {
      req.url = req.url.substr(1);
      slashAdded = false;
    }

    if (removed.length !== 0) {
      req.url = protohost + removed + req.url.substr(protohost.length);
      removed = '';
    }

    // next callback
    var layer = stack[index++];

    // all done
    if (!layer) {
      defer(done, err);
      return;
    }

    // route data
    var path = parseUrl(req).pathname || '/';
    var route = layer.route;

    // skip this layer if the route doesn't match
    if (path.toLowerCase().substr(0, route.length) !== route.toLowerCase()) {
      return next(err);
    }

    // skip if route match does not border "/", ".", or end
    var c = path[route.length];
    if (c !== undefined && '/' !== c && '.' !== c) {
      return next(err);
    }

    // trim off the part of the url that matches the route
    if (route.length !== 0 && route !== '/') {
      removed = route;
      req.url = protohost + req.url.substr(protohost.length + removed.length);

      // ensure leading slash
      if (!protohost && req.url[0] !== '/') {
        req.url = '/' + req.url;
        slashAdded = true;
      }
    }

    // call the layer handle
    call(layer.handle, route, err, req, res, next);
  }

  next();
};

/**
 * Listen for connections.
 *
 * This method takes the same arguments
 * as node's `http.Server#listen()`.
 *
 * HTTP and HTTPS:
 *
 * If you run your application both as HTTP
 * and HTTPS you may wrap them individually,
 * since your Connect "server" is really just
 * a JavaScript `Function`.
 *
 *      var connect = require('connect')
 *        , http = require('http')
 *        , https = require('https');
 *
 *      var app = connect();
 *
 *      http.createServer(app).listen(80);
 *      https.createServer(options, app).listen(443);
 *
 * @return {http.Server}
 * @api public
 */

proto.listen = function listen() {
  var server = http.createServer(this);
  return server.listen.apply(server, arguments);
};

/**
 * Invoke a route handle.
 * @private
 */

function call(handle, route, err, req, res, next) {
  var arity = handle.length;
  var error = err;
  var hasError = Boolean(err);

  debug('%s %s : %s', handle.name || '<anonymous>', route, req.originalUrl);

  try {
    if (hasError && arity === 4) {
      // error-handling middleware
      handle(err, req, res, next);
      return;
    } else if (!hasError && arity < 4) {
      // request-handling middleware
      handle(req, res, next);
      return;
    }
  } catch (e) {
    // replace the error
    error = e;
  }

  // continue
  next(error);
}

/**
 * Log error using console.error.
 *
 * @param {Error} err
 * @private
 */

function logerror(err) {
  if (env !== 'test') console.error(err.stack || err.toString());
}

/**
 * Get get protocol + host for a URL.
 *
 * @param {string} url
 * @private
 */

function getProtohost(url) {
  if (url.length === 0 || url[0] === '/') {
    return undefined;
  }

  var searchIndex = url.indexOf('?');
  var pathLength = searchIndex !== -1
    ? searchIndex
    : url.length;
  var fqdnIndex = url.substr(0, pathLength).indexOf('://');

  return fqdnIndex !== -1
    ? url.substr(0, url.indexOf('/', 3 + fqdnIndex))
    : undefined;
}

}).call(this,require('_process'))

},{"_process":78,"debug":140,"events":73,"finalhandler":143,"http":97,"parseurl":148,"utils-merge":149}],140:[function(require,module,exports){

/**
 * This is the web browser implementation of `debug()`.
 *
 * Expose `debug()` as the module.
 */

exports = module.exports = require('./debug');
exports.log = log;
exports.formatArgs = formatArgs;
exports.save = save;
exports.load = load;
exports.useColors = useColors;
exports.storage = 'undefined' != typeof chrome
               && 'undefined' != typeof chrome.storage
                  ? chrome.storage.local
                  : localstorage();

/**
 * Colors.
 */

exports.colors = [
  'lightseagreen',
  'forestgreen',
  'goldenrod',
  'dodgerblue',
  'darkorchid',
  'crimson'
];

/**
 * Currently only WebKit-based Web Inspectors, Firefox >= v31,
 * and the Firebug extension (any Firefox version) are known
 * to support "%c" CSS customizations.
 *
 * TODO: add a `localStorage` variable to explicitly enable/disable colors
 */

function useColors() {
  // is webkit? http://stackoverflow.com/a/16459606/376773
  return ('WebkitAppearance' in document.documentElement.style) ||
    // is firebug? http://stackoverflow.com/a/398120/376773
    (window.console && (console.firebug || (console.exception && console.table))) ||
    // is firefox >= v31?
    // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
    (navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31);
}

/**
 * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
 */

exports.formatters.j = function(v) {
  return JSON.stringify(v);
};


/**
 * Colorize log arguments if enabled.
 *
 * @api public
 */

function formatArgs() {
  var args = arguments;
  var useColors = this.useColors;

  args[0] = (useColors ? '%c' : '')
    + this.namespace
    + (useColors ? ' %c' : ' ')
    + args[0]
    + (useColors ? '%c ' : ' ')
    + '+' + exports.humanize(this.diff);

  if (!useColors) return args;

  var c = 'color: ' + this.color;
  args = [args[0], c, 'color: inherit'].concat(Array.prototype.slice.call(args, 1));

  // the final "%c" is somewhat tricky, because there could be other
  // arguments passed either before or after the %c, so we need to
  // figure out the correct index to insert the CSS into
  var index = 0;
  var lastC = 0;
  args[0].replace(/%[a-z%]/g, function(match) {
    if ('%%' === match) return;
    index++;
    if ('%c' === match) {
      // we only are interested in the *last* %c
      // (the user may have provided their own)
      lastC = index;
    }
  });

  args.splice(lastC, 0, c);
  return args;
}

/**
 * Invokes `console.log()` when available.
 * No-op when `console.log` is not a "function".
 *
 * @api public
 */

function log() {
  // this hackery is required for IE8/9, where
  // the `console.log` function doesn't have 'apply'
  return 'object' === typeof console
    && console.log
    && Function.prototype.apply.call(console.log, console, arguments);
}

/**
 * Save `namespaces`.
 *
 * @param {String} namespaces
 * @api private
 */

function save(namespaces) {
  try {
    if (null == namespaces) {
      exports.storage.removeItem('debug');
    } else {
      exports.storage.debug = namespaces;
    }
  } catch(e) {}
}

/**
 * Load `namespaces`.
 *
 * @return {String} returns the previously persisted debug modes
 * @api private
 */

function load() {
  var r;
  try {
    r = exports.storage.debug;
  } catch(e) {}
  return r;
}

/**
 * Enable namespaces listed in `localStorage.debug` initially.
 */

exports.enable(load());

/**
 * Localstorage attempts to return the localstorage.
 *
 * This is necessary because safari throws
 * when a user disables cookies/localstorage
 * and you attempt to access it.
 *
 * @return {LocalStorage}
 * @api private
 */

function localstorage(){
  try {
    return window.localStorage;
  } catch (e) {}
}

},{"./debug":141}],141:[function(require,module,exports){

/**
 * This is the common logic for both the Node.js and web browser
 * implementations of `debug()`.
 *
 * Expose `debug()` as the module.
 */

exports = module.exports = debug;
exports.coerce = coerce;
exports.disable = disable;
exports.enable = enable;
exports.enabled = enabled;
exports.humanize = require('ms');

/**
 * The currently active debug mode names, and names to skip.
 */

exports.names = [];
exports.skips = [];

/**
 * Map of special "%n" handling functions, for the debug "format" argument.
 *
 * Valid key names are a single, lowercased letter, i.e. "n".
 */

exports.formatters = {};

/**
 * Previously assigned color.
 */

var prevColor = 0;

/**
 * Previous log timestamp.
 */

var prevTime;

/**
 * Select a color.
 *
 * @return {Number}
 * @api private
 */

function selectColor() {
  return exports.colors[prevColor++ % exports.colors.length];
}

/**
 * Create a debugger with the given `namespace`.
 *
 * @param {String} namespace
 * @return {Function}
 * @api public
 */

function debug(namespace) {

  // define the `disabled` version
  function disabled() {
  }
  disabled.enabled = false;

  // define the `enabled` version
  function enabled() {

    var self = enabled;

    // set `diff` timestamp
    var curr = +new Date();
    var ms = curr - (prevTime || curr);
    self.diff = ms;
    self.prev = prevTime;
    self.curr = curr;
    prevTime = curr;

    // add the `color` if not set
    if (null == self.useColors) self.useColors = exports.useColors();
    if (null == self.color && self.useColors) self.color = selectColor();

    var args = Array.prototype.slice.call(arguments);

    args[0] = exports.coerce(args[0]);

    if ('string' !== typeof args[0]) {
      // anything else let's inspect with %o
      args = ['%o'].concat(args);
    }

    // apply any `formatters` transformations
    var index = 0;
    args[0] = args[0].replace(/%([a-z%])/g, function(match, format) {
      // if we encounter an escaped % then don't increase the array index
      if (match === '%%') return match;
      index++;
      var formatter = exports.formatters[format];
      if ('function' === typeof formatter) {
        var val = args[index];
        match = formatter.call(self, val);

        // now we need to remove `args[index]` since it's inlined in the `format`
        args.splice(index, 1);
        index--;
      }
      return match;
    });

    if ('function' === typeof exports.formatArgs) {
      args = exports.formatArgs.apply(self, args);
    }
    var logFn = enabled.log || exports.log || console.log.bind(console);
    logFn.apply(self, args);
  }
  enabled.enabled = true;

  var fn = exports.enabled(namespace) ? enabled : disabled;

  fn.namespace = namespace;

  return fn;
}

/**
 * Enables a debug mode by namespaces. This can include modes
 * separated by a colon and wildcards.
 *
 * @param {String} namespaces
 * @api public
 */

function enable(namespaces) {
  exports.save(namespaces);

  var split = (namespaces || '').split(/[\s,]+/);
  var len = split.length;

  for (var i = 0; i < len; i++) {
    if (!split[i]) continue; // ignore empty strings
    namespaces = split[i].replace(/\*/g, '.*?');
    if (namespaces[0] === '-') {
      exports.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));
    } else {
      exports.names.push(new RegExp('^' + namespaces + '$'));
    }
  }
}

/**
 * Disable debug output.
 *
 * @api public
 */

function disable() {
  exports.enable('');
}

/**
 * Returns true if the given mode name is enabled, false otherwise.
 *
 * @param {String} name
 * @return {Boolean}
 * @api public
 */

function enabled(name) {
  var i, len;
  for (i = 0, len = exports.skips.length; i < len; i++) {
    if (exports.skips[i].test(name)) {
      return false;
    }
  }
  for (i = 0, len = exports.names.length; i < len; i++) {
    if (exports.names[i].test(name)) {
      return true;
    }
  }
  return false;
}

/**
 * Coerce `val`.
 *
 * @param {Mixed} val
 * @return {Mixed}
 * @api private
 */

function coerce(val) {
  if (val instanceof Error) return val.stack || val.message;
  return val;
}

},{"ms":142}],142:[function(require,module,exports){
/**
 * Helpers.
 */

var s = 1000;
var m = s * 60;
var h = m * 60;
var d = h * 24;
var y = d * 365.25;

/**
 * Parse or format the given `val`.
 *
 * Options:
 *
 *  - `long` verbose formatting [false]
 *
 * @param {String|Number} val
 * @param {Object} options
 * @return {String|Number}
 * @api public
 */

module.exports = function(val, options){
  options = options || {};
  if ('string' == typeof val) return parse(val);
  return options.long
    ? long(val)
    : short(val);
};

/**
 * Parse the given `str` and return milliseconds.
 *
 * @param {String} str
 * @return {Number}
 * @api private
 */

function parse(str) {
  str = '' + str;
  if (str.length > 10000) return;
  var match = /^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(str);
  if (!match) return;
  var n = parseFloat(match[1]);
  var type = (match[2] || 'ms').toLowerCase();
  switch (type) {
    case 'years':
    case 'year':
    case 'yrs':
    case 'yr':
    case 'y':
      return n * y;
    case 'days':
    case 'day':
    case 'd':
      return n * d;
    case 'hours':
    case 'hour':
    case 'hrs':
    case 'hr':
    case 'h':
      return n * h;
    case 'minutes':
    case 'minute':
    case 'mins':
    case 'min':
    case 'm':
      return n * m;
    case 'seconds':
    case 'second':
    case 'secs':
    case 'sec':
    case 's':
      return n * s;
    case 'milliseconds':
    case 'millisecond':
    case 'msecs':
    case 'msec':
    case 'ms':
      return n;
  }
}

/**
 * Short format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */

function short(ms) {
  if (ms >= d) return Math.round(ms / d) + 'd';
  if (ms >= h) return Math.round(ms / h) + 'h';
  if (ms >= m) return Math.round(ms / m) + 'm';
  if (ms >= s) return Math.round(ms / s) + 's';
  return ms + 'ms';
}

/**
 * Long format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */

function long(ms) {
  return plural(ms, d, 'day')
    || plural(ms, h, 'hour')
    || plural(ms, m, 'minute')
    || plural(ms, s, 'second')
    || ms + ' ms';
}

/**
 * Pluralization helper.
 */

function plural(ms, n, name) {
  if (ms < n) return;
  if (ms < n * 1.5) return Math.floor(ms / n) + ' ' + name;
  return Math.ceil(ms / n) + ' ' + name + 's';
}

},{}],143:[function(require,module,exports){
(function (process,Buffer){
/*!
 * finalhandler
 * Copyright(c) 2014-2015 Douglas Christopher Wilson
 * MIT Licensed
 */

'use strict'

/**
 * Module dependencies.
 * @private
 */

var debug = require('debug')('finalhandler')
var escapeHtml = require('escape-html')
var http = require('http')
var onFinished = require('on-finished')
var unpipe = require('unpipe')

/**
 * Module variables.
 * @private
 */

/* istanbul ignore next */
var defer = typeof setImmediate === 'function'
  ? setImmediate
  : function(fn){ process.nextTick(fn.bind.apply(fn, arguments)) }
var isFinished = onFinished.isFinished

/**
 * Module exports.
 * @public
 */

module.exports = finalhandler

/**
 * Create a function to handle the final response.
 *
 * @param {Request} req
 * @param {Response} res
 * @param {Object} [options]
 * @return {Function}
 * @public
 */

function finalhandler(req, res, options) {
  var opts = options || {}

  // get environment
  var env = opts.env || process.env.NODE_ENV || 'development'

  // get error callback
  var onerror = opts.onerror

  return function (err) {
    var status = res.statusCode

    // ignore 404 on in-flight response
    if (!err && res._header) {
      debug('cannot 404 after headers sent')
      return
    }

    // unhandled error
    if (err) {
      // respect err.statusCode
      if (err.statusCode) {
        status = err.statusCode
      }

      // respect err.status
      if (err.status) {
        status = err.status
      }

      // default status code to 500
      if (!status || status < 400) {
        status = 500
      }

      // production gets a basic error message
      var msg = env === 'production'
        ? http.STATUS_CODES[status]
        : err.stack || err.toString()
      msg = escapeHtml(msg)
        .replace(/\n/g, '<br>')
        .replace(/  /g, ' &nbsp;') + '\n'
    } else {
      status = 404
      msg = 'Cannot ' + escapeHtml(req.method) + ' ' + escapeHtml(req.originalUrl || req.url) + '\n'
    }

    debug('default %s', status)

    // schedule onerror callback
    if (err && onerror) {
      defer(onerror, err, req, res)
    }

    // cannot actually respond
    if (res._header) {
      return req.socket.destroy()
    }

    send(req, res, status, msg)
  }
}

/**
 * Send response.
 *
 * @param {IncomingMessage} req
 * @param {OutgoingMessage} res
 * @param {number} status
 * @param {string} body
 * @private
 */

function send(req, res, status, body) {
  function write() {
    res.statusCode = status

    // security header for content sniffing
    res.setHeader('X-Content-Type-Options', 'nosniff')

    // standard headers
    res.setHeader('Content-Type', 'text/html; charset=utf-8')
    res.setHeader('Content-Length', Buffer.byteLength(body, 'utf8'))

    if (req.method === 'HEAD') {
      res.end()
      return
    }

    res.end(body, 'utf8')
  }

  if (isFinished(req)) {
    write()
    return
  }

  // unpipe everything from the request
  unpipe(req)

  // flush the request
  onFinished(req, write)
  req.resume()
}

}).call(this,require('_process'),require("buffer").Buffer)

},{"_process":78,"buffer":69,"debug":140,"escape-html":144,"http":97,"on-finished":145,"unpipe":147}],144:[function(require,module,exports){
/*!
 * escape-html
 * Copyright(c) 2012-2013 TJ Holowaychuk
 * MIT Licensed
 */

/**
 * Module exports.
 * @public
 */

module.exports = escapeHtml;

/**
 * Escape special characters in the given string of html.
 *
 * @param  {string} str The string to escape for inserting into HTML
 * @return {string}
 * @public
 */

function escapeHtml(html) {
  return String(html)
    .replace(/&/g, '&amp;')
    .replace(/"/g, '&quot;')
    .replace(/'/g, '&#39;')
    .replace(/</g, '&lt;')
    .replace(/>/g, '&gt;');
}

},{}],145:[function(require,module,exports){
(function (process){
/*!
 * on-finished
 * Copyright(c) 2013 Jonathan Ong
 * Copyright(c) 2014 Douglas Christopher Wilson
 * MIT Licensed
 */

'use strict'

/**
 * Module exports.
 * @public
 */

module.exports = onFinished
module.exports.isFinished = isFinished

/**
 * Module dependencies.
 * @private
 */

var first = require('ee-first')

/**
 * Variables.
 * @private
 */

/* istanbul ignore next */
var defer = typeof setImmediate === 'function'
  ? setImmediate
  : function(fn){ process.nextTick(fn.bind.apply(fn, arguments)) }

/**
 * Invoke callback when the response has finished, useful for
 * cleaning up resources afterwards.
 *
 * @param {object} msg
 * @param {function} listener
 * @return {object}
 * @public
 */

function onFinished(msg, listener) {
  if (isFinished(msg) !== false) {
    defer(listener, null, msg)
    return msg
  }

  // attach the listener to the message
  attachListener(msg, listener)

  return msg
}

/**
 * Determine if message is already finished.
 *
 * @param {object} msg
 * @return {boolean}
 * @public
 */

function isFinished(msg) {
  var socket = msg.socket

  if (typeof msg.finished === 'boolean') {
    // OutgoingMessage
    return Boolean(msg.finished || (socket && !socket.writable))
  }

  if (typeof msg.complete === 'boolean') {
    // IncomingMessage
    return Boolean(msg.upgrade || !socket || !socket.readable || (msg.complete && !msg.readable))
  }

  // don't know
  return undefined
}

/**
 * Attach a finished listener to the message.
 *
 * @param {object} msg
 * @param {function} callback
 * @private
 */

function attachFinishedListener(msg, callback) {
  var eeMsg
  var eeSocket
  var finished = false

  function onFinish(error) {
    eeMsg.cancel()
    eeSocket.cancel()

    finished = true
    callback(error)
  }

  // finished on first message event
  eeMsg = eeSocket = first([[msg, 'end', 'finish']], onFinish)

  function onSocket(socket) {
    // remove listener
    msg.removeListener('socket', onSocket)

    if (finished) return
    if (eeMsg !== eeSocket) return

    // finished on first socket event
    eeSocket = first([[socket, 'error', 'close']], onFinish)
  }

  if (msg.socket) {
    // socket already assigned
    onSocket(msg.socket)
    return
  }

  // wait for socket to be assigned
  msg.on('socket', onSocket)

  if (msg.socket === undefined) {
    // node.js 0.8 patch
    patchAssignSocket(msg, onSocket)
  }
}

/**
 * Attach the listener to the message.
 *
 * @param {object} msg
 * @return {function}
 * @private
 */

function attachListener(msg, listener) {
  var attached = msg.__onFinished

  // create a private single listener with queue
  if (!attached || !attached.queue) {
    attached = msg.__onFinished = createListener(msg)
    attachFinishedListener(msg, attached)
  }

  attached.queue.push(listener)
}

/**
 * Create listener on message.
 *
 * @param {object} msg
 * @return {function}
 * @private
 */

function createListener(msg) {
  function listener(err) {
    if (msg.__onFinished === listener) msg.__onFinished = null
    if (!listener.queue) return

    var queue = listener.queue
    listener.queue = null

    for (var i = 0; i < queue.length; i++) {
      queue[i](err, msg)
    }
  }

  listener.queue = []

  return listener
}

/**
 * Patch ServerResponse.prototype.assignSocket for node.js 0.8.
 *
 * @param {ServerResponse} res
 * @param {function} callback
 * @private
 */

function patchAssignSocket(res, callback) {
  var assignSocket = res.assignSocket

  if (typeof assignSocket !== 'function') return

  // res.on('socket', callback) is broken in 0.8
  res.assignSocket = function _assignSocket(socket) {
    assignSocket.call(this, socket)
    callback(socket)
  }
}

}).call(this,require('_process'))

},{"_process":78,"ee-first":146}],146:[function(require,module,exports){
/*!
 * ee-first
 * Copyright(c) 2014 Jonathan Ong
 * MIT Licensed
 */

'use strict'

/**
 * Module exports.
 * @public
 */

module.exports = first

/**
 * Get the first event in a set of event emitters and event pairs.
 *
 * @param {array} stuff
 * @param {function} done
 * @public
 */

function first(stuff, done) {
  if (!Array.isArray(stuff))
    throw new TypeError('arg must be an array of [ee, events...] arrays')

  var cleanups = []

  for (var i = 0; i < stuff.length; i++) {
    var arr = stuff[i]

    if (!Array.isArray(arr) || arr.length < 2)
      throw new TypeError('each array member must be [ee, events...]')

    var ee = arr[0]

    for (var j = 1; j < arr.length; j++) {
      var event = arr[j]
      var fn = listener(event, callback)

      // listen to the event
      ee.on(event, fn)
      // push this listener to the list of cleanups
      cleanups.push({
        ee: ee,
        event: event,
        fn: fn,
      })
    }
  }

  function callback() {
    cleanup()
    done.apply(null, arguments)
  }

  function cleanup() {
    var x
    for (var i = 0; i < cleanups.length; i++) {
      x = cleanups[i]
      x.ee.removeListener(x.event, x.fn)
    }
  }

  function thunk(fn) {
    done = fn
  }

  thunk.cancel = cleanup

  return thunk
}

/**
 * Create the event listener.
 * @private
 */

function listener(event, done) {
  return function onevent(arg1) {
    var args = new Array(arguments.length)
    var ee = this
    var err = event === 'error'
      ? arg1
      : null

    // copy args to prevent arguments escaping scope
    for (var i = 0; i < args.length; i++) {
      args[i] = arguments[i]
    }

    done(err, ee, event, args)
  }
}

},{}],147:[function(require,module,exports){
/*!
 * unpipe
 * Copyright(c) 2015 Douglas Christopher Wilson
 * MIT Licensed
 */

'use strict'

/**
 * Module exports.
 * @public
 */

module.exports = unpipe

/**
 * Determine if there are Node.js pipe-like data listeners.
 * @private
 */

function hasPipeDataListeners(stream) {
  var listeners = stream.listeners('data')

  for (var i = 0; i < listeners.length; i++) {
    if (listeners[i].name === 'ondata') {
      return true
    }
  }

  return false
}

/**
 * Unpipe a stream from all destinations.
 *
 * @param {object} stream
 * @public
 */

function unpipe(stream) {
  if (!stream) {
    throw new TypeError('argument stream is required')
  }

  if (typeof stream.unpipe === 'function') {
    // new-style
    stream.unpipe()
    return
  }

  // Node.js 0.8 hack
  if (!hasPipeDataListeners(stream)) {
    return
  }

  var listener
  var listeners = stream.listeners('close')

  for (var i = 0; i < listeners.length; i++) {
    listener = listeners[i]

    if (listener.name !== 'cleanup' && listener.name !== 'onclose') {
      continue
    }

    // invoke the listener
    listener.call(stream)
  }
}

},{}],148:[function(require,module,exports){
/*!
 * parseurl
 * Copyright(c) 2014 Jonathan Ong
 * Copyright(c) 2014 Douglas Christopher Wilson
 * MIT Licensed
 */

'use strict'

/**
 * Module dependencies.
 */

var url = require('url')
var parse = url.parse
var Url = url.Url

/**
 * Pattern for a simple path case.
 * See: https://github.com/joyent/node/pull/7878
 */

var simplePathRegExp = /^(\/\/?(?!\/)[^\?#\s]*)(\?[^#\s]*)?$/

/**
 * Exports.
 */

module.exports = parseurl
module.exports.original = originalurl

/**
 * Parse the `req` url with memoization.
 *
 * @param {ServerRequest} req
 * @return {Object}
 * @api public
 */

function parseurl(req) {
  var url = req.url

  if (url === undefined) {
    // URL is undefined
    return undefined
  }

  var parsed = req._parsedUrl

  if (fresh(url, parsed)) {
    // Return cached URL parse
    return parsed
  }

  // Parse the URL
  parsed = fastparse(url)
  parsed._raw = url

  return req._parsedUrl = parsed
};

/**
 * Parse the `req` original url with fallback and memoization.
 *
 * @param {ServerRequest} req
 * @return {Object}
 * @api public
 */

function originalurl(req) {
  var url = req.originalUrl

  if (typeof url !== 'string') {
    // Fallback
    return parseurl(req)
  }

  var parsed = req._parsedOriginalUrl

  if (fresh(url, parsed)) {
    // Return cached URL parse
    return parsed
  }

  // Parse the URL
  parsed = fastparse(url)
  parsed._raw = url

  return req._parsedOriginalUrl = parsed
};

/**
 * Parse the `str` url with fast-path short-cut.
 *
 * @param {string} str
 * @return {Object}
 * @api private
 */

function fastparse(str) {
  // Try fast path regexp
  // See: https://github.com/joyent/node/pull/7878
  var simplePath = typeof str === 'string' && simplePathRegExp.exec(str)

  // Construct simple URL
  if (simplePath) {
    var pathname = simplePath[1]
    var search = simplePath[2] || null
    var url = Url !== undefined
      ? new Url()
      : {}
    url.path = str
    url.href = str
    url.pathname = pathname
    url.search = search
    url.query = search && search.substr(1)

    return url
  }

  return parse(str)
}

/**
 * Determine if parsed is still fresh for url.
 *
 * @param {string} url
 * @param {object} parsedUrl
 * @return {boolean}
 * @api private
 */

function fresh(url, parsedUrl) {
  return typeof parsedUrl === 'object'
    && parsedUrl !== null
    && (Url === undefined || parsedUrl instanceof Url)
    && parsedUrl._raw === url
}

},{"url":107}],149:[function(require,module,exports){
/**
 * Merge object b with object a.
 *
 *     var a = { foo: 'bar' }
 *       , b = { bar: 'baz' };
 *
 *     merge(a, b);
 *     // => { foo: 'bar', bar: 'baz' }
 *
 * @param {Object} a
 * @param {Object} b
 * @return {Object}
 * @api public
 */

exports = module.exports = function(a, b){
  if (a && b) {
    for (var key in b) {
      a[key] = b[key];
    }
  }
  return a;
};

},{}],150:[function(require,module,exports){
var CucumberHTML = {};

CucumberHTML.DOMFormatter = function(rootNode) {
  var currentUri;
  var currentFeature;
  var currentElement;
  var currentSteps;

  var currentStepIndex;
  var currentStep;
  var $templates = $(CucumberHTML.templates);

  this.uri = function(uri) {
    currentUri = uri;
  };

  this.feature = function(feature) {
    currentFeature = blockElement(rootNode, feature, 'feature');
  };

  this.background = function(background) {
    currentElement = featureElement(background, 'background');
    currentStepIndex = 1;
  };

  this.scenario = function(scenario) {
    currentElement = featureElement(scenario, 'scenario');
    currentStepIndex = 1;
  };

  this.scenarioOutline = function(scenarioOutline) {
    currentElement = featureElement(scenarioOutline, 'scenario_outline');
    currentStepIndex = 1;
  };

  this.step = function(step) {
    var stepElement = $('.step', $templates).clone();
    stepElement.appendTo(currentSteps);
    populate(stepElement, step, 'step');

    if (step.doc_string) {
      docString = $('.doc_string', $templates).clone();
      docString.appendTo(stepElement);
      // TODO: use a syntax highlighter based on the content_type
      docString.text(step.doc_string.value);
    }
    if (step.rows) {
      dataTable = $('.data_table', $templates).clone();
      dataTable.appendTo(stepElement);
      var tBody = dataTable.find('tbody');
      $.each(step.rows, function(index, row) {
        var tr = $('<tr></tr>').appendTo(tBody);
        $.each(row.cells, function(index, cell) {
          var td = $('<td>' + cell + '</td>').appendTo(tBody);
        });
      });
    }
  };

  this.examples = function(examples) {
    var examplesElement = blockElement(currentElement.children('details'), examples, 'examples');
    var examplesTable = $('.examples_table', $templates).clone();
    examplesTable.appendTo(examplesElement.children('details'));

    $.each(examples.rows, function(index, row) {
      var parent = index == 0 ? examplesTable.find('thead') : examplesTable.find('tbody');
      var tr = $('<tr></tr>').appendTo(parent);
      $.each(row.cells, function(index, cell) {
        var td = $('<td>' + cell + '</td>').appendTo(tr);
      });
    });
  };

  this.match = function(match) {
    currentStep = currentSteps.find('li:nth-child(' + currentStepIndex + ')');
    currentStepIndex++;
  };

  this.result = function(result) {
    currentStep.addClass(result.status);
    if (result.status == 'failed') {
      populateStepError(currentStep, result.error_message);
    }
    currentElement.addClass(result.status);
    var isLastStep = currentSteps.find('li:nth-child(' + currentStepIndex + ')').length == 0;
    if (isLastStep) {
      if (currentSteps.find('.failed').length == 0) {
        // No failed steps. Collapse it.
        currentElement.find('details').removeAttr('open');
      } else {
        currentElement.find('details').attr('open', 'open');
      }
    }
  };

  this.embedding = function(mimeType, data) {
    if (mimeType.match(/^image\//)) 
    {
      currentStep.append('<img src="' + data + '">');
    }
    else if (mimeType.match(/^video\//)) 
    {
      currentStep.append('<video src="' + data + '" type="' + mimeType + '" autobuffer controls>Your browser doesn\'t support video.</video>');
    }
    else if (mimeType.match(/^text\//)) 
    {
      this.write(data);
    }
  };

  this.write = function(text) {
    currentStep.append('<pre class="embedded-text">' + text + '</pre>');
  };

  this.before = function(before) {
    if(before.status != 'passed') {
      currentElement = featureElement({keyword: 'Before', name: '', description: ''}, 'before');
      currentStepIndex = 1;
      populateStepError($('details', currentElement), before.error_message);
    }
  };

  this.after = function(after) {
    if(after.status != 'passed') {
      currentElement = featureElement({keyword: 'After', name: '', description: ''}, 'after');
      currentStepIndex++;
      populateStepError($('details', currentElement), after.error_message);
    }
  };

  function featureElement(statement, itemtype) {
    var e = blockElement(currentFeature.children('details'), statement, itemtype);

    currentSteps = $('.steps', $templates).clone();
    currentSteps.appendTo(e.children('details'));

    return e;
  }

  function blockElement(parent, statement, itemtype) {
    var e = $('.blockelement', $templates).clone();
    e.appendTo(parent);
    return populate(e, statement, itemtype);
  }

  function populate(e, statement, itemtype) {
    populateTags(e, statement.tags);
    populateComments(e, statement.comments);
    e.find('.keyword').text(statement.keyword);
    e.find('.name').text(statement.name);
    e.find('.description').text(statement.description);
    e.attr('itemtype', 'http://cukes.info/microformat/' + itemtype);
    e.addClass(itemtype);
    return e;
  }

  function populateComments(e, comments) {
    if (comments !== undefined) {
      var commentsNode = $('.comments', $templates).clone().prependTo(e.find('.header'));
      $.each(comments, function(index, comment) {
        var commentNode = $('.comment', $templates).clone().appendTo(commentsNode);
        commentNode.text(comment.value);
      });
    }
  }

  function populateTags(e, tags) {
    if (tags !== undefined) {
      var tagsNode = $('.tags', $templates).clone().prependTo(e.find('.header'));
      $.each(tags, function(index, tag) {
        var tagNode = $('.tag', $templates).clone().appendTo(tagsNode);
        tagNode.text(tag.name);
      });
    }
  }

  function populateStepError(e, error) {
    if (error !== undefined) {
      errorNode = $('.error', $templates).clone().appendTo(e);
      errorNode.text(error);
    }
  }
};

CucumberHTML.templates = '<div>\
  <section class="blockelement" itemscope>\
    <details open>\
      <summary class="header">\
        <span class="keyword" itemprop="keyword">Keyword</span>: <span itemprop="name" class="name">This is the block name</span>\
      </summary>\
      <div itemprop="description" class="description">The description goes here</div>\
    </details>\
  </section>\
\
  <ol class="steps"></ol>\
\
  <ol>\
    <li class="step"><span class="keyword" itemprop="keyword">Keyword</span><span class="name" itemprop="name">Name</span></li>\
  </ol>\
\
  <pre class="doc_string"></pre>\
\
  <pre class="error"></pre>\
\
  <table class="data_table">\
    <tbody>\
    </tbody>\
  </table>\
\
  <table class="examples_table">\
    <thead></thead>\
    <tbody></tbody>\
  </table>\
\
  <section class="embed">\
    <img itemprop="screenshot" class="screenshot" />\
  </section>\
  <div class="tags"></div>\
  <span class="tag"></span>\
  <div class="comments"></div>\
  <div class="comment"></div>\
<div>';

if (typeof module !== 'undefined') {
  module.exports = CucumberHTML;
} else if (typeof define !== 'undefined') {
  define([], function() { return CucumberHTML; });
}

},{}],151:[function(require,module,exports){
'use strict';

var d           = require('d')
  , pad         = require('es5-ext/number/#/pad')
  , date        = require('es5-ext/date/valid-date')
  , daysInMonth = require('es5-ext/date/#/days-in-month')
  , copy        = require('es5-ext/date/#/copy')
  , dfloor      = require('es5-ext/date/#/floor-day')
  , mfloor      = require('es5-ext/date/#/floor-month')
  , yfloor      = require('es5-ext/date/#/floor-year')
  , toInteger   = require('es5-ext/number/to-integer')
  , toPosInt    = require('es5-ext/number/to-pos-integer')

  , abs = Math.abs

  , format, valueOf, getYear, Duration, getCalcData;

format = require('es5-ext/string/format-method')({
	y: function () { return String(abs(this.year)); },
	m: function () { return pad.call(abs(this.month), 2); },
	d: function () { return pad.call(abs(this.day), 2); },
	H: function () { return pad.call(abs(this.hour), 2); },
	M: function () { return pad.call(abs(this.minute), 2); },
	S: function () { return pad.call(abs(this.second), 2); },
	L: function () { return pad.call(abs(this.millisecond), 3); },

	ms: function () { return String(abs(this.months)); },
	ds: function () { return String(abs(this.days)); },
	Hs: function () { return String(abs(this.hours)); },
	Ms: function () { return String(abs(this.minutes)); },
	Ss: function () { return String(abs(this.seconds)); },
	Ls: function () { return String(abs(this.milliseconds)); },

	sign: function () { return (this.to < this.from) ? '-' : ''; }
});

getCalcData = function (duration) {
	return (duration.to < duration.from) ?
			{ to: duration.from, from: duration.to, sign: -1 } :
			{ to: duration.to, from: duration.from, sign: 1 };
};

Duration = module.exports = function (from, to) {
	// Make it both constructor and factory
	if (!(this instanceof Duration)) return new Duration(from, to);

	this.from = date(from);
	this.to = (to == null) ? new Date() : date(to);
};

Duration.prototype = Object.create(Object.prototype, {
	valueOf: d(valueOf = function () { return this.to - this.from; }),
	millisecond: d.gs(function () { return this.milliseconds % 1000; }),
	second: d.gs(function () { return this.seconds % 60; }),
	minute: d.gs(function () { return this.minutes % 60; }),
	hour: d.gs(function () { return this.hours % 24; }),
	day: d.gs(function () {
		var data = getCalcData(this)
		  , x = copy.call(data.to);
		x.setMonth(x.getMonth() - 1);
		x = daysInMonth.call(x);
		return data.sign * ((x - data.from.getDate() + data.to.getDate()) % x -
			((data.from - dfloor.call(copy.call(data.from))) >
				(data.to - dfloor.call(copy.call(data.to)))));
	}),
	month: d.gs(function () {
		var data = getCalcData(this);
		return data.sign * ((12 - data.from.getMonth() + data.to.getMonth()) % 12 -
			((data.from - mfloor.call(copy.call(data.from))) >
				(data.to - mfloor.call(copy.call(data.to)))));
	}),
	year: d.gs(getYear = function () {
		var data = getCalcData(this);
		return data.sign * (data.to.getFullYear() - data.from.getFullYear() -
			((data.from - yfloor.call(copy.call(data.from))) >
				(data.to - yfloor.call(copy.call(data.to)))));
	}),

	milliseconds: d.gs(valueOf, null),
	seconds: d.gs(function () { return toInteger(this.valueOf() / 1000); }),
	minutes: d.gs(function () {
		return toInteger(this.valueOf() / (1000 * 60));
	}),
	hours: d.gs(function () {
		return toInteger(this.valueOf() / (1000 * 60 * 60));
	}),
	days: d.gs(function () {
		return toInteger(this.valueOf() / (1000 * 60 * 60 * 24));
	}),
	months: d.gs(function () {
		var data = getCalcData(this);
		return data.sign * ((data.to.getFullYear() - data.from.getFullYear()) * 12 +
			data.to.getMonth() - data.from.getMonth() -
			((data.from - mfloor.call(copy.call(data.from))) >
				(data.to - mfloor.call(copy.call(data.to)))));
	}),
	years: d.gs(getYear),

	toString: d(function (pattern/*, threshold*/) {
		var s, threshold, last;
		if (pattern == null) pattern = 0;
		if (isNaN(pattern)) return format.call(this, pattern);
		pattern = Number(pattern);
		threshold = toPosInt(arguments[1]);
		s = "";
		if (pattern === 1) {
			if (threshold-- <= 0) s += abs(last = this.millisecond) + "ms";
			if (this.seconds || (threshold >= 0)) {
				if (threshold-- <= 0) {
					s = abs(last = this.second) + "s" + (s ? " " : "") + s;
				}
				if (this.minutes || (threshold >= 0)) {
					if (threshold-- <= 0) {
						s = abs(last = this.minute) + "m" + (s ? " " : "") + s;
					}
					if (this.hours || (threshold >= 0)) {
						if (threshold-- <= 0) {
							s = abs(last = this.hour) + "h" + (s ? " " : "") + s;
						}
						if (this.days || (threshold >= 0)) {
							if (threshold-- <= 0) {
								s = abs(last = this.day) + "d" + (s ? " " : "") + s;
							}
							if (this.months || (threshold >= 0)) {
								if (threshold-- <= 0) {
									s = abs(last = this.month) + "m" + (s ? " " : "") + s;
								}
								if (this.years || (threshold >= 0)) {
									s = abs(last = this.year) + "y" +
										(s ? " " : "") + s;
								}
							}
						}
					}
				}
			}
		} else {
			if (threshold-- <= 0) {
				s += "." +  pad.call(abs(last = this.millisecond), 3);
			}
			if (this.seconds || (threshold >= 0)) {
				if (threshold-- <= 0) {
					last = this.second;
					s = (this.minutes ? pad.call(abs(last), 2) :
							abs(last)) + s;
				}
				if (this.minutes || (threshold >= 0)) {
					if (threshold-- <= 0) {
						last = this.minute;
						s = ((this.hours || s) ? pad.call(abs(last), 2) : abs(last)) +
							(s ? ":" : "") + s;
					}
					if (this.hours || (threshold >= 0)) {
						if (threshold-- <= 0) {
							s = pad.call(abs(last = this.hour), 2) + (s ? ":" : "") + s;
						}
						if (this.days || (threshold >= 0)) {
							if (threshold-- <= 0) {
								s = abs(last = this.day) + "d" + (s ? " " : "") + s;
							}
							if (this.months || (threshold >= 0)) {
								if (threshold-- <= 0) {
									s = abs(last = this.month) + "m" + (s ? " " : "") + s;
								}
								if (this.years || (threshold >= 0)) {
									s = abs(last = this.year) + "y" +
										(s ? " " : "") + s;
								}
							}
						}
					}
				}
			}
		}
		if (last && (this.to < this.from)) (s = '-' + s);
		return s;
	})
});

},{"d":152,"es5-ext/date/#/copy":153,"es5-ext/date/#/days-in-month":154,"es5-ext/date/#/floor-day":155,"es5-ext/date/#/floor-month":156,"es5-ext/date/#/floor-year":157,"es5-ext/date/valid-date":159,"es5-ext/number/#/pad":163,"es5-ext/number/to-integer":164,"es5-ext/number/to-pos-integer":165,"es5-ext/string/format-method":182}],152:[function(require,module,exports){
'use strict';

var assign        = require('es5-ext/object/assign')
  , normalizeOpts = require('es5-ext/object/normalize-options')
  , isCallable    = require('es5-ext/object/is-callable')
  , contains      = require('es5-ext/string/#/contains')

  , d;

d = module.exports = function (dscr, value/*, options*/) {
	var c, e, w, options, desc;
	if ((arguments.length < 2) || (typeof dscr !== 'string')) {
		options = value;
		value = dscr;
		dscr = null;
	} else {
		options = arguments[2];
	}
	if (dscr == null) {
		c = w = true;
		e = false;
	} else {
		c = contains.call(dscr, 'c');
		e = contains.call(dscr, 'e');
		w = contains.call(dscr, 'w');
	}

	desc = { value: value, configurable: c, enumerable: e, writable: w };
	return !options ? desc : assign(normalizeOpts(options), desc);
};

d.gs = function (dscr, get, set/*, options*/) {
	var c, e, options, desc;
	if (typeof dscr !== 'string') {
		options = set;
		set = get;
		get = dscr;
		dscr = null;
	} else {
		options = arguments[3];
	}
	if (get == null) {
		get = undefined;
	} else if (!isCallable(get)) {
		options = get;
		get = set = undefined;
	} else if (set == null) {
		set = undefined;
	} else if (!isCallable(set)) {
		options = set;
		set = undefined;
	}
	if (dscr == null) {
		c = true;
		e = false;
	} else {
		c = contains.call(dscr, 'c');
		e = contains.call(dscr, 'e');
	}

	desc = { get: get, set: set, configurable: c, enumerable: e };
	return !options ? desc : assign(normalizeOpts(options), desc);
};

},{"es5-ext/object/assign":166,"es5-ext/object/is-callable":169,"es5-ext/object/normalize-options":173,"es5-ext/string/#/contains":175}],153:[function(require,module,exports){
'use strict';

var getTime = Date.prototype.getTime;

module.exports = function () { return new Date(getTime.call(this)); };

},{}],154:[function(require,module,exports){
'use strict';

var getMonth = Date.prototype.getMonth;

module.exports = function () {
	switch (getMonth.call(this)) {
	case 1:
		return this.getFullYear() % 4 ? 28 : 29;
	case 3:
	case 5:
	case 8:
	case 10:
		return 30;
	default:
		return 31;
	}
};

},{}],155:[function(require,module,exports){
'use strict';

var setHours = Date.prototype.setHours;

module.exports = function () {
	setHours.call(this, 0, 0, 0, 0);
	return this;
};

},{}],156:[function(require,module,exports){
'use strict';

var floorDay = require('./floor-day');

module.exports = function () {
	floorDay.call(this).setDate(1);
	return this;
};

},{"./floor-day":155}],157:[function(require,module,exports){
'use strict';

var floorMonth = require('./floor-month');

module.exports = function () {
	floorMonth.call(this).setMonth(0);
	return this;
};

},{"./floor-month":156}],158:[function(require,module,exports){
'use strict';

var toString = Object.prototype.toString

  , id = toString.call(new Date());

module.exports = function (x) {
	return (x && ((x instanceof Date) || (toString.call(x) === id))) || false;
};

},{}],159:[function(require,module,exports){
'use strict';

var isDate = require('./is-date');

module.exports = function (x) {
	if (!isDate(x)) throw new TypeError(x + " is not a Date object");
	return x;
};

},{"./is-date":158}],160:[function(require,module,exports){
'use strict';

module.exports = require('./is-implemented')()
	? Math.sign
	: require('./shim');

},{"./is-implemented":161,"./shim":162}],161:[function(require,module,exports){
'use strict';

module.exports = function () {
	var sign = Math.sign;
	if (typeof sign !== 'function') return false;
	return ((sign(10) === 1) && (sign(-20) === -1));
};

},{}],162:[function(require,module,exports){
'use strict';

module.exports = function (value) {
	value = Number(value);
	if (isNaN(value) || (value === 0)) return value;
	return (value > 0) ? 1 : -1;
};

},{}],163:[function(require,module,exports){
'use strict';

var pad      = require('../../string/#/pad')
  , toPosInt = require('../to-pos-integer')

  , toFixed = Number.prototype.toFixed;

module.exports = function (length/*, precision*/) {
	var precision;
	length = toPosInt(length);
	precision = toPosInt(arguments[1]);

	return pad.call(precision ? toFixed.call(this, precision) : this,
		'0', length + (precision ? (1 + precision) : 0));
};

},{"../../string/#/pad":178,"../to-pos-integer":165}],164:[function(require,module,exports){
'use strict';

var sign = require('../math/sign')

  , abs = Math.abs, floor = Math.floor;

module.exports = function (value) {
	if (isNaN(value)) return 0;
	value = Number(value);
	if ((value === 0) || !isFinite(value)) return value;
	return sign(value) * floor(abs(value));
};

},{"../math/sign":160}],165:[function(require,module,exports){
'use strict';

var toInteger = require('./to-integer')

  , max = Math.max;

module.exports = function (value) { return max(0, toInteger(value)); };

},{"./to-integer":164}],166:[function(require,module,exports){
'use strict';

module.exports = require('./is-implemented')()
	? Object.assign
	: require('./shim');

},{"./is-implemented":167,"./shim":168}],167:[function(require,module,exports){
'use strict';

module.exports = function () {
	var assign = Object.assign, obj;
	if (typeof assign !== 'function') return false;
	obj = { foo: 'raz' };
	assign(obj, { bar: 'dwa' }, { trzy: 'trzy' });
	return (obj.foo + obj.bar + obj.trzy) === 'razdwatrzy';
};

},{}],168:[function(require,module,exports){
'use strict';

var keys  = require('../keys')
  , value = require('../valid-value')

  , max = Math.max;

module.exports = function (dest, src/*, …srcn*/) {
	var error, i, l = max(arguments.length, 2), assign;
	dest = Object(value(dest));
	assign = function (key) {
		try { dest[key] = src[key]; } catch (e) {
			if (!error) error = e;
		}
	};
	for (i = 1; i < l; ++i) {
		src = arguments[i];
		keys(src).forEach(assign);
	}
	if (error !== undefined) throw error;
	return dest;
};

},{"../keys":170,"../valid-value":174}],169:[function(require,module,exports){
// Deprecated

'use strict';

module.exports = function (obj) { return typeof obj === 'function'; };

},{}],170:[function(require,module,exports){
'use strict';

module.exports = require('./is-implemented')()
	? Object.keys
	: require('./shim');

},{"./is-implemented":171,"./shim":172}],171:[function(require,module,exports){
'use strict';

module.exports = function () {
	try {
		Object.keys('primitive');
		return true;
	} catch (e) { return false; }
};

},{}],172:[function(require,module,exports){
'use strict';

var keys = Object.keys;

module.exports = function (object) {
	return keys(object == null ? object : Object(object));
};

},{}],173:[function(require,module,exports){
'use strict';

var forEach = Array.prototype.forEach, create = Object.create;

var process = function (src, obj) {
	var key;
	for (key in src) obj[key] = src[key];
};

module.exports = function (options/*, …options*/) {
	var result = create(null);
	forEach.call(arguments, function (options) {
		if (options == null) return;
		process(Object(options), result);
	});
	return result;
};

},{}],174:[function(require,module,exports){
'use strict';

module.exports = function (value) {
	if (value == null) throw new TypeError("Cannot use null or undefined");
	return value;
};

},{}],175:[function(require,module,exports){
'use strict';

module.exports = require('./is-implemented')()
	? String.prototype.contains
	: require('./shim');

},{"./is-implemented":176,"./shim":177}],176:[function(require,module,exports){
'use strict';

var str = 'razdwatrzy';

module.exports = function () {
	if (typeof str.contains !== 'function') return false;
	return ((str.contains('dwa') === true) && (str.contains('foo') === false));
};

},{}],177:[function(require,module,exports){
'use strict';

var indexOf = String.prototype.indexOf;

module.exports = function (searchString/*, position*/) {
	return indexOf.call(this, searchString, arguments[1]) > -1;
};

},{}],178:[function(require,module,exports){
'use strict';

var toInteger = require('../../number/to-integer')
  , value     = require('../../object/valid-value')
  , repeat    = require('./repeat')

  , abs = Math.abs, max = Math.max;

module.exports = function (fill/*, length*/) {
	var self = String(value(this))
	  , sLength = self.length
	  , length = arguments[1];

	length = isNaN(length) ? 1 : toInteger(length);
	fill = repeat.call(String(fill), abs(length));
	if (length >= 0) return fill.slice(0, max(0, length - sLength)) + self;
	return self + (((sLength + length) >= 0) ? '' : fill.slice(length + sLength));
};

},{"../../number/to-integer":164,"../../object/valid-value":174,"./repeat":179}],179:[function(require,module,exports){
'use strict';

module.exports = require('./is-implemented')()
	? String.prototype.repeat
	: require('./shim');

},{"./is-implemented":180,"./shim":181}],180:[function(require,module,exports){
'use strict';

var str = 'foo';

module.exports = function () {
	if (typeof str.repeat !== 'function') return false;
	return (str.repeat(2) === 'foofoo');
};

},{}],181:[function(require,module,exports){
// Thanks: http://www.2ality.com/2014/01/efficient-string-repeat.html

'use strict';

var value     = require('../../../object/valid-value')
  , toInteger = require('../../../number/to-integer');

module.exports = function (count) {
	var str = String(value(this)), result;
	count = toInteger(count);
	if (count < 0) throw new RangeError("Count must be >= 0");
	if (!isFinite(count)) throw new RangeError("Count must be < ∞");
	result = '';
	if (!count) return result;
	while (true) {
		if (count & 1) result += str;
		count >>>= 1;
		if (count <= 0) break;
		str += str;
	}
	return result;
};

},{"../../../number/to-integer":164,"../../../object/valid-value":174}],182:[function(require,module,exports){
'use strict';

var isCallable = require('../object/is-callable')
  , value      = require('../object/valid-value')

  , call = Function.prototype.call;

module.exports = function (fmap) {
	fmap = Object(value(fmap));
	return function (pattern) {
		var context = value(this);
		pattern = String(pattern);
		return pattern.replace(/%([a-zA-Z]+)|\\([\u0000-\uffff])/g,
			function (match, token, escape) {
				var t, r;
				if (escape) return escape;
				t = token;
				while (t && !(r = fmap[t])) t = t.slice(0, -1);
				if (!r) return match;
				if (isCallable(r)) r = call.call(r, context);
				return r + token.slice(t.length);
			});
	};
};

},{"../object/is-callable":169,"../object/valid-value":174}],183:[function(require,module,exports){
(function (__dirname){
require("./gherkin/lexer/ar");
require("./gherkin/lexer/bg");
require("./gherkin/lexer/bm");
require("./gherkin/lexer/ca");
require("./gherkin/lexer/cs");
require("./gherkin/lexer/cy_gb");
require("./gherkin/lexer/da");
require("./gherkin/lexer/de");
require("./gherkin/lexer/el");
require("./gherkin/lexer/en");
require("./gherkin/lexer/en_au");
require("./gherkin/lexer/en_lol");
require("./gherkin/lexer/en_old");
require("./gherkin/lexer/en_pirate");
require("./gherkin/lexer/en_scouse");
require("./gherkin/lexer/en_tx");
require("./gherkin/lexer/eo");
require("./gherkin/lexer/es");
require("./gherkin/lexer/et");
require("./gherkin/lexer/fa");
require("./gherkin/lexer/fi");
require("./gherkin/lexer/fr");
require("./gherkin/lexer/gl");
require("./gherkin/lexer/he");
require("./gherkin/lexer/hi");
require("./gherkin/lexer/hr");
require("./gherkin/lexer/hu");
require("./gherkin/lexer/id");
require("./gherkin/lexer/is");
require("./gherkin/lexer/it");
require("./gherkin/lexer/ja");
require("./gherkin/lexer/kn");
require("./gherkin/lexer/ko");
require("./gherkin/lexer/lt");
require("./gherkin/lexer/lu");
require("./gherkin/lexer/lv");
require("./gherkin/lexer/nl");
require("./gherkin/lexer/no");
require("./gherkin/lexer/pa");
require("./gherkin/lexer/pl");
require("./gherkin/lexer/pt");
require("./gherkin/lexer/ro");
require("./gherkin/lexer/ru");
require("./gherkin/lexer/sk");
require("./gherkin/lexer/sr_cyrl");
require("./gherkin/lexer/sr_latn");
require("./gherkin/lexer/sv");
require("./gherkin/lexer/th");
require("./gherkin/lexer/tl");
require("./gherkin/lexer/tr");
require("./gherkin/lexer/tt");
require("./gherkin/lexer/uk");
require("./gherkin/lexer/uz");
require("./gherkin/lexer/vi");
require("./gherkin/lexer/zh_cn");
require("./gherkin/lexer/zh_tw");
/**
 * Creates a new Lexer for a specific language.
 */
module.exports.Lexer = function(lang) {
  return require('./gherkin/lexer/' + lang);
};

/**
 * Creates a connect middleware for loading lexer sources (typically for browsers).
 */
module.exports.connect = function(path) {
  var gherkinFiles = require('connect').static(__dirname);

  return function(req, res, next) {
    if(req.url.indexOf(path) == 0) {
      req.url = req.url.slice(path.length);
      gherkinFiles(req, res, next);
    } else {
      next();
    }
  };
};

}).call(this,"/node_modules/gherkin/lib")

},{"./gherkin/lexer/ar":185,"./gherkin/lexer/bg":186,"./gherkin/lexer/bm":187,"./gherkin/lexer/ca":188,"./gherkin/lexer/cs":189,"./gherkin/lexer/cy_gb":190,"./gherkin/lexer/da":191,"./gherkin/lexer/de":192,"./gherkin/lexer/el":193,"./gherkin/lexer/en":194,"./gherkin/lexer/en_au":195,"./gherkin/lexer/en_lol":196,"./gherkin/lexer/en_old":197,"./gherkin/lexer/en_pirate":198,"./gherkin/lexer/en_scouse":199,"./gherkin/lexer/en_tx":200,"./gherkin/lexer/eo":201,"./gherkin/lexer/es":202,"./gherkin/lexer/et":203,"./gherkin/lexer/fa":204,"./gherkin/lexer/fi":205,"./gherkin/lexer/fr":206,"./gherkin/lexer/gl":207,"./gherkin/lexer/he":208,"./gherkin/lexer/hi":209,"./gherkin/lexer/hr":210,"./gherkin/lexer/hu":211,"./gherkin/lexer/id":212,"./gherkin/lexer/is":213,"./gherkin/lexer/it":214,"./gherkin/lexer/ja":215,"./gherkin/lexer/kn":216,"./gherkin/lexer/ko":217,"./gherkin/lexer/lt":218,"./gherkin/lexer/lu":219,"./gherkin/lexer/lv":220,"./gherkin/lexer/nl":221,"./gherkin/lexer/no":222,"./gherkin/lexer/pa":223,"./gherkin/lexer/pl":224,"./gherkin/lexer/pt":225,"./gherkin/lexer/ro":226,"./gherkin/lexer/ru":227,"./gherkin/lexer/sk":228,"./gherkin/lexer/sr_cyrl":229,"./gherkin/lexer/sr_latn":230,"./gherkin/lexer/sv":231,"./gherkin/lexer/th":232,"./gherkin/lexer/tl":233,"./gherkin/lexer/tr":234,"./gherkin/lexer/tt":235,"./gherkin/lexer/uk":236,"./gherkin/lexer/uz":237,"./gherkin/lexer/vi":238,"./gherkin/lexer/zh_cn":239,"./gherkin/lexer/zh_tw":240,"connect":139}],184:[function(require,module,exports){
// This is a straight port of json_formatter.rb
var JSONFormatter = function(io) {
    var feature_hashes = [];
    var uri, feature_hash, current_step_or_hook;

    this.done = function() {
        io.write(JSON.stringify(feature_hashes, null, 2));
    };

    this.uri = function(_uri) {
        uri = _uri;
    };
    
    this.feature = function(feature) {
        feature_hash = feature;
        feature_hash['uri'] = uri;
        feature_hashes.push(feature_hash);
    };

    this.background = function(background) {
        feature_elements().push(background);
    };
    
    this.scenario = function(scenario) {
        feature_elements().push(scenario);
    };

    this.scenario_outline = function(scenario_outline) {
        feature_elements().push(scenario_outline);
    };

    this.examples = function(examples) {
        all_examples().push(examples);
    };

    this.step = function(step) {
        current_step_or_hook = step;
        steps().push(current_step_or_hook);
    }
    
    this.match = function(match) {
        current_step_or_hook['match'] = match;
    }

    this.result = function(result) {
        current_step_or_hook['result'] = result;
    }

    this.before = function(match, result) {
        add_hook(match, result, "before");
    }

    this.after = function(match, result) {
        add_hook(match, result, "after");
    }

    this.embedding = function(mime_type, data) {
        embeddings().push({'mime_type': mime_type, 'data': encode64s(data)})
    }

    this.write = function(text) {
        output().push(text);
    };

    this.eof = function() {};

    this.append_duration = function(timestamp) {
        if (current_step_or_hook['result']) {
            timestamp = timestamp * 1000000000
            rshash = current_step_or_hook['result']
            rshash['duration'] = timestamp
            current_step_or_hook['result'] = rshash
        }
    }

    // "private" methods

    function add_hook(match, result, hook) {
        if(!feature_element()[hook]) {
            feature_element()[hook] = [];
        }
        var hooks = feature_element()[hook];
        hooks.push({'match': match, 'result': result});
    }

    function feature_elements() {
        if(!feature_hash['elements']) {
            feature_hash['elements'] = [];
        }
        return feature_hash['elements'];
    }

    function feature_element() {
        return feature_elements()[feature_elements().length - 1];
    }

    function all_examples() {
        if(!feature_element()['examples']) {
            feature_element()['examples'] = [];
        }
        return feature_element()['examples'];
    }

    function steps() {
        if(!feature_element()['steps']) {
            feature_element()['steps'] = [];
        }
        return feature_element()['steps'];
    }

    function embeddings() {
        if(!current_step_or_hook['embeddings']) {
            current_step_or_hook['embeddings'] = [];
        }
        return current_step_or_hook['embeddings'];
    }

    function output() {
        if(!current_step_or_hook['output']) {
            current_step_or_hook['output'] = [];
        }
        return current_step_or_hook['output'];
    }
    
    // http://gitorious.org/javascript-base64/javascript-base64/blobs/master/base64.js
    function encode64s(input) {
        var swaps = ["A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z","a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z","0","1","2","3","4","5","6","7","8","9","+","/"];
        var input_binary = "";
        var output = "";
        var temp_binary;
        var index;
        for (index=0; index < input.length; index++) {
            temp_binary = input.charCodeAt(index).toString(2);
            while (temp_binary.length < 8) {
                temp_binary = "0"+temp_binary;
            }
            input_binary = input_binary + temp_binary;
            while (input_binary.length >= 6) {
                output = output + swaps[parseInt(input_binary.substring(0,6),2)];
                input_binary = input_binary.substring(6);
            }
        }
        if (input_binary.length == 4) {
            temp_binary = input_binary + "00";
            output = output + swaps[parseInt(temp_binary,2)];
            output = output + "=";
        }
        if (input_binary.length == 2) {
            temp_binary = input_binary + "0000";
            output = output + swaps[parseInt(temp_binary,2)];
            output = output + "==";
        }
        return output;
    }
}

module.exports = JSONFormatter;

},{}],185:[function(require,module,exports){
(function (Buffer){

/* line 1 "ragel/i18n/ar.js.rl" */
;(function() {


/* line 126 "ragel/i18n/ar.js.rl" */



/* line 11 "js/lib/gherkin/lexer/ar.js" */
var _lexer_actions = [
	0, 1, 0, 1, 1, 1, 2, 1, 
	3, 1, 4, 1, 5, 1, 6, 1, 
	7, 1, 8, 1, 9, 1, 10, 1, 
	11, 1, 12, 1, 13, 1, 16, 1, 
	17, 1, 18, 1, 19, 1, 20, 1, 
	21, 1, 22, 1, 23, 2, 2, 18, 
	2, 3, 4, 2, 13, 0, 2, 14, 
	15, 2, 17, 0, 2, 17, 1, 2, 
	17, 16, 2, 17, 19, 2, 18, 6, 
	2, 18, 7, 2, 18, 8, 2, 18, 
	9, 2, 18, 10, 2, 18, 16, 2, 
	20, 21, 2, 22, 0, 2, 22, 1, 
	2, 22, 16, 2, 22, 19, 3, 4, 
	14, 15, 3, 5, 14, 15, 3, 11, 
	14, 15, 3, 12, 14, 15, 3, 13, 
	14, 15, 3, 14, 15, 18, 3, 17, 
	0, 11, 3, 17, 14, 15, 4, 2, 
	14, 15, 18, 4, 3, 4, 14, 15, 
	4, 17, 0, 14, 15, 5, 17, 0, 
	11, 14, 15
];

var _lexer_key_offsets = [
	0, 0, 13, 19, 21, 22, 23, 24, 
	25, 26, 27, 29, 31, 43, 46, 47, 
	48, 49, 50, 51, 52, 53, 54, 55, 
	56, 58, 60, 65, 70, 75, 80, 84, 
	88, 90, 91, 92, 93, 94, 95, 96, 
	97, 98, 99, 100, 101, 102, 103, 104, 
	105, 110, 117, 122, 126, 132, 135, 137, 
	143, 155, 157, 158, 159, 160, 161, 162, 
	163, 164, 165, 166, 167, 168, 169, 170, 
	180, 187, 189, 191, 193, 195, 197, 199, 
	201, 213, 215, 217, 219, 221, 223, 225, 
	227, 229, 231, 233, 235, 237, 239, 241, 
	243, 245, 247, 249, 251, 253, 255, 257, 
	259, 261, 263, 265, 267, 269, 271, 274, 
	276, 278, 280, 282, 284, 286, 288, 290, 
	292, 294, 296, 298, 300, 302, 304, 306, 
	310, 312, 314, 316, 318, 320, 322, 324, 
	326, 328, 330, 332, 334, 336, 338, 340, 
	342, 344, 346, 348, 350, 352, 354, 355, 
	356, 357, 358, 359, 360, 361, 362, 363, 
	370, 372, 374, 376, 378, 380, 382, 384, 
	386, 388, 390, 391, 392, 393, 394, 395, 
	396, 397, 398, 399, 400, 401, 402, 403, 
	404, 405, 406, 407, 408, 409, 417, 421, 
	423, 426, 428, 430, 432, 434, 436, 438, 
	440, 442, 444, 446, 448, 450, 452, 454, 
	456, 458, 460, 462, 464, 466, 468, 470, 
	472, 474, 476, 478, 480, 482, 484, 486, 
	488, 491, 493, 495, 497, 499, 501, 503, 
	505, 507, 509, 511, 513, 515, 517, 519, 
	521, 523, 525, 527, 529, 531, 533, 535, 
	536, 537, 538, 539, 540, 541, 542, 543, 
	544, 545, 546, 547, 549, 550, 551, 552, 
	553, 554, 555, 556, 557, 558, 559, 560, 
	570, 577, 579, 581, 583, 585, 587, 589, 
	591, 593, 595, 597, 599, 601, 603, 605, 
	607, 609, 611, 613, 615, 617, 619, 621, 
	623, 625, 627, 629, 631, 633, 635, 637, 
	639, 641, 643, 645, 647, 649, 651, 653, 
	655, 657, 659, 661, 663, 665, 669, 671, 
	673, 675, 677, 679, 681, 683, 685, 687, 
	689, 691, 693, 695, 697, 699, 701, 703, 
	705, 707, 709, 711, 713, 714, 715, 725, 
	732, 735, 737, 739, 741, 743, 745, 747, 
	749, 751, 753, 755, 757, 759, 761, 763, 
	765, 767, 769, 771, 773, 775, 777, 779, 
	781, 783, 785, 787, 789, 791, 793, 795, 
	797, 799, 801, 803, 805, 807, 809, 811, 
	813, 815, 817, 819, 822, 824, 826, 828, 
	830, 832, 834, 836, 838, 840, 842, 844, 
	846, 848, 850, 852, 854, 858, 860, 862, 
	864, 866, 868, 870, 872, 874, 876, 878, 
	880, 882, 884, 886, 888, 890, 892, 894, 
	896, 898, 900, 902, 903, 904, 905, 906, 
	907, 908, 909, 910, 911, 912
];

var _lexer_trans_keys = [
	-40, -39, 10, 32, 34, 35, 37, 42, 
	64, 124, 239, 9, 13, -89, -88, -85, 
	-82, -77, -71, -40, -39, -80, -40, -89, 
	-39, -117, 32, 10, 13, 10, 13, -40, 
	-39, 10, 32, 34, 35, 37, 42, 64, 
	124, 9, 13, -124, -123, -120, -39, -125, 
	-39, -122, -40, -86, -39, -119, 34, 34, 
	10, 13, 10, 13, 10, 32, 34, 9, 
	13, 10, 32, 34, 9, 13, 10, 32, 
	34, 9, 13, 10, 32, 34, 9, 13, 
	10, 32, 9, 13, 10, 32, 9, 13, 
	10, 13, 10, 95, 70, 69, 65, 84, 
	85, 82, 69, 95, 69, 78, 68, 95, 
	37, 13, 32, 64, 9, 10, 9, 10, 
	13, 32, 64, 11, 12, 10, 32, 64, 
	9, 13, 32, 124, 9, 13, 10, 32, 
	92, 124, 9, 13, 10, 92, 124, 10, 
	92, 10, 32, 92, 124, 9, 13, -40, 
	-39, 10, 32, 34, 35, 37, 42, 64, 
	124, 9, 13, -124, -123, -40, -82, -39, 
	-124, -39, -127, -39, -118, -40, -87, 58, 
	10, 10, -40, -39, 10, 32, 35, 37, 
	42, 64, 9, 13, -89, -88, -85, -82, 
	-77, -71, 10, -40, 10, -80, 10, -40, 
	10, -89, 10, -39, 10, -117, 10, 10, 
	32, -40, -39, 10, 32, 34, 35, 37, 
	42, 64, 124, 9, 13, -39, 10, -127, 
	10, -40, 10, -79, 10, -40, 10, -74, 
	10, -39, 10, -123, 10, -40, 10, -89, 
	10, -40, 10, -75, 10, -39, 10, -118, 
	10, -40, 10, -87, 10, 10, 58, -39, 
	10, -118, 10, -39, 10, -122, 10, -40, 
	10, -89, 10, -40, 10, -79, 10, -39, 
	10, -118, 10, -39, 10, -120, 10, 10, 
	32, 58, -39, 10, -123, 10, -40, 10, 
	-82, 10, -40, 10, -73, 10, -40, 10, 
	-73, 10, -39, 10, -122, 10, -40, 10, 
	-81, 10, -39, 10, -123, 10, -40, 10, 
	-89, 10, -124, -123, -120, 10, -39, 10, 
	-125, 10, -39, 10, -122, 10, -40, 10, 
	-86, 10, -39, 10, -119, 10, 10, 95, 
	10, 70, 10, 69, 10, 65, 10, 84, 
	10, 85, 10, 82, 10, 69, 10, 95, 
	10, 69, 10, 78, 10, 68, 10, 95, 
	10, 37, -40, -85, -39, -124, -40, -87, 
	58, 10, 10, -40, 10, 32, 35, 124, 
	9, 13, -82, 10, -40, 10, -89, 10, 
	-40, 10, -75, 10, -39, 10, -118, 10, 
	-40, 10, -87, 10, 10, 58, -39, -127, 
	-40, -79, -40, -74, -39, -123, -40, -89, 
	-40, -75, -39, -118, -40, -87, 58, 10, 
	10, -40, 10, 32, 35, 37, 64, 9, 
	13, -89, -82, -77, 10, -39, 10, -124, 
	-123, 10, -40, 10, -82, 10, -39, 10, 
	-124, 10, -39, 10, -127, 10, -39, 10, 
	-118, 10, -40, 10, -87, 10, 10, 58, 
	-40, 10, -85, 10, -39, 10, -124, 10, 
	-40, 10, -89, 10, -40, 10, -75, 10, 
	-39, 10, -118, 10, -39, 10, -122, 10, 
	-40, 10, -89, 10, -40, 10, -79, 10, 
	-39, 10, -118, 10, -39, 10, -120, 10, 
	10, 32, 58, -39, 10, -123, 10, -40, 
	10, -82, 10, -40, 10, -73, 10, -40, 
	10, -73, 10, 10, 95, 10, 70, 10, 
	69, 10, 65, 10, 84, 10, 85, 10, 
	82, 10, 69, 10, 95, 10, 69, 10, 
	78, 10, 68, 10, 95, 10, 37, -39, 
	-118, -39, -122, -40, -89, -40, -79, -39, 
	-118, -39, -120, 32, 58, -39, -123, -40, 
	-82, -40, -73, -40, -73, 58, 10, 10, 
	-40, -39, 10, 32, 35, 37, 42, 64, 
	9, 13, -89, -88, -85, -82, -77, -71, 
	10, -40, 10, -80, 10, -40, 10, -89, 
	10, -39, 10, -117, 10, 10, 32, -39, 
	10, -127, 10, -40, 10, -79, 10, -40, 
	10, -74, 10, -39, 10, -123, 10, -40, 
	10, -89, 10, -40, 10, -75, 10, -39, 
	10, -118, 10, -40, 10, -87, 10, 10, 
	58, -39, 10, -118, 10, -39, 10, -122, 
	10, -40, 10, -89, 10, -40, 10, -79, 
	10, -39, 10, -118, 10, -39, 10, -120, 
	10, -39, 10, -122, 10, -40, 10, -81, 
	10, -39, 10, -123, 10, -40, 10, -89, 
	10, -124, -123, -120, 10, -39, 10, -125, 
	10, -39, 10, -122, 10, -40, 10, -86, 
	10, -39, 10, -119, 10, 10, 95, 10, 
	70, 10, 69, 10, 65, 10, 84, 10, 
	85, 10, 82, 10, 69, 10, 95, 10, 
	69, 10, 78, 10, 68, 10, 95, 10, 
	37, 10, 10, -40, -39, 10, 32, 35, 
	37, 42, 64, 9, 13, -89, -88, -85, 
	-82, -77, -71, 10, -40, -39, 10, -80, 
	10, -40, 10, -89, 10, -39, 10, -117, 
	10, 10, 32, -124, 10, -40, 10, -82, 
	10, -39, 10, -124, 10, -39, 10, -127, 
	10, -39, 10, -118, 10, -40, 10, -87, 
	10, 10, 58, -39, 10, -127, 10, -40, 
	10, -79, 10, -40, 10, -74, 10, -39, 
	10, -123, 10, -40, 10, -89, 10, -40, 
	10, -75, 10, -39, 10, -118, 10, -39, 
	10, -122, 10, -40, 10, -89, 10, -40, 
	10, -79, 10, -39, 10, -118, 10, -39, 
	10, -120, 10, 10, 32, 58, -39, 10, 
	-123, 10, -40, 10, -82, 10, -40, 10, 
	-73, 10, -40, 10, -73, 10, -39, 10, 
	-122, 10, -40, 10, -81, 10, -39, 10, 
	-123, 10, -40, 10, -89, 10, -124, -123, 
	-120, 10, -39, 10, -125, 10, -39, 10, 
	-122, 10, -40, 10, -86, 10, -39, 10, 
	-119, 10, 10, 95, 10, 70, 10, 69, 
	10, 65, 10, 84, 10, 85, 10, 82, 
	10, 69, 10, 95, 10, 69, 10, 78, 
	10, 68, 10, 95, 10, 37, -39, -122, 
	-40, -81, -39, -123, -40, -89, 187, 191, 
	0
];

var _lexer_single_lengths = [
	0, 11, 6, 2, 1, 1, 1, 1, 
	1, 1, 2, 2, 10, 3, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	2, 2, 3, 3, 3, 3, 2, 2, 
	2, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	3, 5, 3, 2, 4, 3, 2, 4, 
	10, 2, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 8, 
	7, 2, 2, 2, 2, 2, 2, 2, 
	10, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 3, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 4, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 5, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 6, 4, 2, 
	3, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	3, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 2, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 8, 
	7, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 4, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 1, 1, 8, 7, 
	3, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 3, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 4, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 0
];

var _lexer_range_lengths = [
	0, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 1, 1, 1, 1, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 1, 1, 1, 1, 0, 0, 1, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0
];

var _lexer_index_offsets = [
	0, 0, 13, 20, 23, 25, 27, 29, 
	31, 33, 35, 38, 41, 53, 57, 59, 
	61, 63, 65, 67, 69, 71, 73, 75, 
	77, 80, 83, 88, 93, 98, 103, 107, 
	111, 114, 116, 118, 120, 122, 124, 126, 
	128, 130, 132, 134, 136, 138, 140, 142, 
	144, 149, 156, 161, 165, 171, 175, 178, 
	184, 196, 199, 201, 203, 205, 207, 209, 
	211, 213, 215, 217, 219, 221, 223, 225, 
	235, 243, 246, 249, 252, 255, 258, 261, 
	264, 276, 279, 282, 285, 288, 291, 294, 
	297, 300, 303, 306, 309, 312, 315, 318, 
	321, 324, 327, 330, 333, 336, 339, 342, 
	345, 348, 351, 354, 357, 360, 363, 367, 
	370, 373, 376, 379, 382, 385, 388, 391, 
	394, 397, 400, 403, 406, 409, 412, 415, 
	420, 423, 426, 429, 432, 435, 438, 441, 
	444, 447, 450, 453, 456, 459, 462, 465, 
	468, 471, 474, 477, 480, 483, 486, 488, 
	490, 492, 494, 496, 498, 500, 502, 504, 
	511, 514, 517, 520, 523, 526, 529, 532, 
	535, 538, 541, 543, 545, 547, 549, 551, 
	553, 555, 557, 559, 561, 563, 565, 567, 
	569, 571, 573, 575, 577, 579, 587, 592, 
	595, 599, 602, 605, 608, 611, 614, 617, 
	620, 623, 626, 629, 632, 635, 638, 641, 
	644, 647, 650, 653, 656, 659, 662, 665, 
	668, 671, 674, 677, 680, 683, 686, 689, 
	692, 696, 699, 702, 705, 708, 711, 714, 
	717, 720, 723, 726, 729, 732, 735, 738, 
	741, 744, 747, 750, 753, 756, 759, 762, 
	764, 766, 768, 770, 772, 774, 776, 778, 
	780, 782, 784, 786, 789, 791, 793, 795, 
	797, 799, 801, 803, 805, 807, 809, 811, 
	821, 829, 832, 835, 838, 841, 844, 847, 
	850, 853, 856, 859, 862, 865, 868, 871, 
	874, 877, 880, 883, 886, 889, 892, 895, 
	898, 901, 904, 907, 910, 913, 916, 919, 
	922, 925, 928, 931, 934, 937, 940, 943, 
	946, 949, 952, 955, 958, 961, 966, 969, 
	972, 975, 978, 981, 984, 987, 990, 993, 
	996, 999, 1002, 1005, 1008, 1011, 1014, 1017, 
	1020, 1023, 1026, 1029, 1032, 1034, 1036, 1046, 
	1054, 1058, 1061, 1064, 1067, 1070, 1073, 1076, 
	1079, 1082, 1085, 1088, 1091, 1094, 1097, 1100, 
	1103, 1106, 1109, 1112, 1115, 1118, 1121, 1124, 
	1127, 1130, 1133, 1136, 1139, 1142, 1145, 1148, 
	1151, 1154, 1157, 1160, 1163, 1166, 1169, 1172, 
	1175, 1178, 1181, 1184, 1188, 1191, 1194, 1197, 
	1200, 1203, 1206, 1209, 1212, 1215, 1218, 1221, 
	1224, 1227, 1230, 1233, 1236, 1241, 1244, 1247, 
	1250, 1253, 1256, 1259, 1262, 1265, 1268, 1271, 
	1274, 1277, 1280, 1283, 1286, 1289, 1292, 1295, 
	1298, 1301, 1304, 1307, 1309, 1311, 1313, 1315, 
	1317, 1319, 1321, 1323, 1325, 1327
];

var _lexer_indicies = [
	1, 2, 4, 3, 5, 6, 7, 8, 
	9, 10, 11, 3, 0, 12, 13, 14, 
	15, 16, 17, 0, 18, 19, 0, 20, 
	0, 21, 0, 22, 0, 23, 0, 24, 
	0, 25, 0, 27, 28, 26, 30, 31, 
	29, 1, 2, 4, 3, 5, 6, 7, 
	8, 9, 10, 3, 0, 32, 33, 24, 
	0, 34, 0, 35, 0, 36, 0, 24, 
	0, 37, 0, 38, 0, 39, 0, 24, 
	0, 40, 0, 41, 0, 43, 44, 42, 
	46, 47, 45, 50, 49, 51, 49, 48, 
	54, 53, 55, 53, 52, 54, 53, 56, 
	53, 52, 54, 53, 57, 53, 52, 59, 
	58, 58, 0, 4, 60, 60, 0, 62, 
	63, 61, 4, 0, 64, 0, 65, 0, 
	66, 0, 67, 0, 68, 0, 69, 0, 
	70, 0, 71, 0, 72, 0, 73, 0, 
	74, 0, 75, 0, 76, 0, 77, 0, 
	0, 0, 0, 0, 78, 79, 80, 79, 
	79, 82, 81, 78, 4, 83, 9, 83, 
	0, 84, 85, 84, 0, 88, 87, 89, 
	90, 87, 86, 0, 92, 93, 91, 0, 
	92, 91, 88, 94, 92, 93, 94, 91, 
	95, 96, 88, 97, 98, 99, 100, 101, 
	102, 103, 97, 0, 104, 105, 0, 106, 
	0, 107, 0, 108, 0, 109, 0, 110, 
	0, 111, 0, 112, 0, 113, 0, 114, 
	0, 115, 0, 116, 0, 118, 117, 120, 
	119, 121, 122, 120, 123, 124, 125, 126, 
	124, 123, 119, 127, 128, 129, 130, 131, 
	132, 120, 119, 133, 120, 119, 134, 120, 
	119, 135, 120, 119, 136, 120, 119, 137, 
	120, 119, 138, 120, 119, 120, 139, 119, 
	140, 141, 143, 142, 144, 145, 146, 147, 
	148, 149, 142, 0, 150, 120, 119, 151, 
	120, 119, 152, 120, 119, 153, 120, 119, 
	154, 120, 119, 138, 120, 119, 155, 120, 
	119, 138, 120, 119, 156, 120, 119, 157, 
	120, 119, 158, 120, 119, 159, 120, 119, 
	160, 120, 119, 161, 120, 119, 162, 120, 
	119, 163, 120, 119, 120, 139, 119, 164, 
	120, 119, 165, 120, 119, 166, 120, 119, 
	167, 120, 119, 168, 120, 119, 169, 120, 
	119, 170, 120, 119, 171, 120, 119, 172, 
	120, 119, 173, 120, 119, 174, 120, 119, 
	175, 120, 119, 120, 176, 139, 119, 177, 
	120, 119, 178, 120, 119, 179, 120, 119, 
	180, 120, 119, 181, 120, 119, 182, 120, 
	119, 183, 120, 119, 163, 120, 119, 184, 
	120, 119, 185, 120, 119, 186, 120, 119, 
	187, 120, 119, 188, 120, 119, 189, 120, 
	119, 190, 120, 119, 138, 120, 119, 191, 
	192, 138, 120, 119, 193, 120, 119, 194, 
	120, 119, 195, 120, 119, 138, 120, 119, 
	196, 120, 119, 197, 120, 119, 198, 120, 
	119, 138, 120, 119, 120, 199, 119, 120, 
	200, 119, 120, 201, 119, 120, 202, 119, 
	120, 203, 119, 120, 204, 119, 120, 205, 
	119, 120, 206, 119, 120, 207, 119, 120, 
	208, 119, 120, 209, 119, 120, 210, 119, 
	120, 211, 119, 120, 212, 119, 213, 0, 
	214, 0, 215, 0, 216, 0, 217, 0, 
	218, 0, 219, 0, 221, 220, 223, 222, 
	224, 223, 225, 226, 226, 225, 222, 227, 
	223, 222, 228, 223, 222, 229, 223, 222, 
	230, 223, 222, 231, 223, 222, 232, 223, 
	222, 233, 223, 222, 234, 223, 222, 235, 
	223, 222, 223, 236, 222, 237, 0, 238, 
	0, 239, 0, 240, 0, 241, 0, 24, 
	0, 242, 0, 24, 0, 243, 0, 244, 
	0, 245, 0, 246, 0, 247, 0, 248, 
	0, 249, 0, 250, 0, 251, 0, 253, 
	252, 255, 254, 256, 255, 257, 258, 259, 
	258, 257, 254, 260, 261, 262, 255, 254, 
	263, 255, 254, 264, 265, 255, 254, 266, 
	255, 254, 267, 255, 254, 268, 255, 254, 
	269, 255, 254, 270, 255, 254, 271, 255, 
	254, 272, 255, 254, 273, 255, 254, 274, 
	255, 254, 275, 255, 254, 255, 276, 254, 
	277, 255, 254, 278, 255, 254, 279, 255, 
	254, 273, 255, 254, 280, 255, 254, 281, 
	255, 254, 282, 255, 254, 271, 255, 254, 
	283, 255, 254, 284, 255, 254, 285, 255, 
	254, 286, 255, 254, 287, 255, 254, 288, 
	255, 254, 289, 255, 254, 290, 255, 254, 
	291, 255, 254, 292, 255, 254, 293, 255, 
	254, 294, 255, 254, 255, 295, 276, 254, 
	296, 255, 254, 297, 255, 254, 298, 255, 
	254, 299, 255, 254, 300, 255, 254, 301, 
	255, 254, 302, 255, 254, 275, 255, 254, 
	255, 303, 254, 255, 304, 254, 255, 305, 
	254, 255, 306, 254, 255, 307, 254, 255, 
	308, 254, 255, 309, 254, 255, 310, 254, 
	255, 311, 254, 255, 312, 254, 255, 313, 
	254, 255, 314, 254, 255, 315, 254, 255, 
	316, 254, 317, 0, 318, 0, 319, 0, 
	320, 0, 321, 0, 322, 0, 323, 0, 
	324, 0, 325, 0, 326, 0, 327, 0, 
	328, 0, 329, 330, 0, 331, 0, 332, 
	0, 333, 0, 334, 0, 335, 0, 336, 
	0, 337, 0, 338, 0, 339, 0, 341, 
	340, 343, 342, 344, 345, 343, 346, 347, 
	348, 349, 347, 346, 342, 350, 351, 352, 
	353, 354, 355, 343, 342, 356, 343, 342, 
	357, 343, 342, 358, 343, 342, 359, 343, 
	342, 360, 343, 342, 361, 343, 342, 343, 
	362, 342, 363, 343, 342, 364, 343, 342, 
	365, 343, 342, 366, 343, 342, 367, 343, 
	342, 361, 343, 342, 368, 343, 342, 361, 
	343, 342, 369, 343, 342, 370, 343, 342, 
	371, 343, 342, 372, 343, 342, 373, 343, 
	342, 374, 343, 342, 375, 343, 342, 376, 
	343, 342, 343, 362, 342, 377, 343, 342, 
	378, 343, 342, 379, 343, 342, 380, 343, 
	342, 381, 343, 342, 382, 343, 342, 383, 
	343, 342, 384, 343, 342, 385, 343, 342, 
	386, 343, 342, 387, 343, 342, 376, 343, 
	342, 388, 343, 342, 389, 343, 342, 390, 
	343, 342, 391, 343, 342, 392, 343, 342, 
	393, 343, 342, 394, 343, 342, 361, 343, 
	342, 395, 396, 361, 343, 342, 397, 343, 
	342, 398, 343, 342, 399, 343, 342, 361, 
	343, 342, 400, 343, 342, 401, 343, 342, 
	402, 343, 342, 361, 343, 342, 343, 403, 
	342, 343, 404, 342, 343, 405, 342, 343, 
	406, 342, 343, 407, 342, 343, 408, 342, 
	343, 409, 342, 343, 410, 342, 343, 411, 
	342, 343, 412, 342, 343, 413, 342, 343, 
	414, 342, 343, 415, 342, 343, 416, 342, 
	418, 417, 420, 419, 421, 422, 420, 423, 
	424, 425, 426, 424, 423, 419, 427, 428, 
	429, 430, 431, 432, 420, 419, 433, 434, 
	420, 419, 435, 420, 419, 436, 420, 419, 
	437, 420, 419, 438, 420, 419, 439, 420, 
	419, 420, 440, 419, 441, 420, 419, 442, 
	420, 419, 443, 420, 419, 444, 420, 419, 
	445, 420, 419, 446, 420, 419, 447, 420, 
	419, 448, 420, 419, 449, 420, 419, 450, 
	420, 419, 451, 420, 419, 420, 440, 419, 
	452, 420, 419, 453, 420, 419, 454, 420, 
	419, 455, 420, 419, 456, 420, 419, 439, 
	420, 419, 457, 420, 419, 439, 420, 419, 
	458, 420, 419, 459, 420, 419, 460, 420, 
	419, 447, 420, 419, 461, 420, 419, 462, 
	420, 419, 463, 420, 419, 464, 420, 419, 
	465, 420, 419, 466, 420, 419, 467, 420, 
	419, 468, 420, 419, 469, 420, 419, 470, 
	420, 419, 471, 420, 419, 472, 420, 419, 
	420, 473, 440, 419, 474, 420, 419, 475, 
	420, 419, 476, 420, 419, 477, 420, 419, 
	478, 420, 419, 479, 420, 419, 480, 420, 
	419, 451, 420, 419, 481, 420, 419, 482, 
	420, 419, 483, 420, 419, 484, 420, 419, 
	485, 420, 419, 486, 420, 419, 487, 420, 
	419, 439, 420, 419, 488, 489, 439, 420, 
	419, 490, 420, 419, 491, 420, 419, 492, 
	420, 419, 439, 420, 419, 493, 420, 419, 
	494, 420, 419, 495, 420, 419, 439, 420, 
	419, 420, 496, 419, 420, 497, 419, 420, 
	498, 419, 420, 499, 419, 420, 500, 419, 
	420, 501, 419, 420, 502, 419, 420, 503, 
	419, 420, 504, 419, 420, 505, 419, 420, 
	506, 419, 420, 507, 419, 420, 508, 419, 
	420, 509, 419, 510, 0, 511, 0, 512, 
	0, 513, 0, 514, 0, 515, 0, 516, 
	0, 24, 0, 517, 0, 3, 0, 518, 
	0
];

var _lexer_trans_targs = [
	0, 2, 13, 12, 12, 22, 32, 34, 
	9, 48, 51, 435, 3, 170, 176, 178, 
	247, 427, 4, 57, 5, 6, 7, 8, 
	9, 10, 11, 12, 33, 11, 12, 33, 
	14, 18, 15, 16, 17, 19, 20, 21, 
	23, 24, 25, 26, 25, 25, 26, 25, 
	27, 27, 27, 28, 27, 27, 27, 28, 
	29, 30, 31, 12, 31, 32, 12, 33, 
	35, 36, 37, 38, 39, 40, 41, 42, 
	43, 44, 45, 46, 47, 437, 49, 50, 
	12, 49, 48, 50, 51, 52, 53, 55, 
	56, 54, 52, 53, 54, 52, 55, 2, 
	13, 56, 22, 32, 34, 9, 48, 51, 
	58, 150, 59, 60, 61, 62, 63, 64, 
	65, 66, 67, 68, 69, 70, 71, 70, 
	71, 72, 127, 71, 12, 136, 79, 73, 
	81, 87, 89, 98, 119, 74, 75, 76, 
	77, 78, 79, 80, 2, 13, 12, 12, 
	22, 32, 34, 9, 48, 51, 82, 83, 
	84, 85, 86, 88, 90, 91, 92, 93, 
	94, 95, 96, 97, 99, 100, 101, 102, 
	103, 104, 105, 106, 107, 108, 109, 110, 
	111, 112, 113, 114, 115, 116, 117, 118, 
	120, 121, 122, 123, 124, 125, 126, 128, 
	132, 129, 130, 131, 133, 134, 135, 137, 
	138, 139, 140, 141, 142, 143, 144, 145, 
	146, 147, 148, 149, 12, 151, 152, 153, 
	154, 155, 156, 157, 158, 159, 158, 159, 
	160, 159, 12, 161, 162, 163, 164, 165, 
	166, 167, 168, 169, 80, 171, 172, 173, 
	174, 175, 177, 179, 180, 181, 182, 183, 
	184, 185, 186, 187, 188, 189, 188, 189, 
	190, 189, 12, 233, 191, 208, 212, 192, 
	193, 204, 194, 195, 196, 197, 198, 199, 
	200, 201, 202, 203, 80, 205, 206, 207, 
	209, 210, 211, 213, 214, 215, 216, 217, 
	218, 219, 220, 221, 222, 223, 224, 225, 
	226, 227, 228, 229, 230, 231, 232, 234, 
	235, 236, 237, 238, 239, 240, 241, 242, 
	243, 244, 245, 246, 12, 248, 249, 250, 
	251, 252, 253, 254, 255, 256, 257, 258, 
	259, 260, 340, 261, 262, 263, 264, 265, 
	266, 267, 268, 269, 270, 271, 270, 271, 
	272, 317, 271, 12, 326, 279, 273, 280, 
	286, 288, 297, 309, 274, 275, 276, 277, 
	278, 279, 80, 281, 282, 283, 284, 285, 
	287, 289, 290, 291, 292, 293, 294, 295, 
	296, 298, 299, 300, 301, 302, 303, 304, 
	305, 306, 307, 308, 310, 311, 312, 313, 
	314, 315, 316, 318, 322, 319, 320, 321, 
	323, 324, 325, 327, 328, 329, 330, 331, 
	332, 333, 334, 335, 336, 337, 338, 339, 
	12, 341, 342, 341, 342, 343, 404, 342, 
	12, 413, 350, 344, 363, 369, 371, 375, 
	396, 345, 351, 346, 347, 348, 349, 350, 
	80, 352, 353, 354, 355, 356, 357, 358, 
	359, 360, 361, 362, 364, 365, 366, 367, 
	368, 370, 372, 373, 374, 376, 377, 378, 
	379, 380, 381, 382, 383, 384, 385, 386, 
	387, 388, 389, 390, 391, 392, 393, 394, 
	395, 397, 398, 399, 400, 401, 402, 403, 
	405, 409, 406, 407, 408, 410, 411, 412, 
	414, 415, 416, 417, 418, 419, 420, 421, 
	422, 423, 424, 425, 426, 12, 428, 429, 
	430, 431, 432, 433, 434, 436, 0
];

var _lexer_trans_actions = [
	43, 29, 29, 0, 54, 3, 1, 0, 
	29, 1, 35, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 57, 149, 126, 0, 110, 23, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 7, 139, 48, 0, 102, 9, 
	5, 45, 134, 45, 0, 33, 122, 33, 
	33, 0, 11, 106, 0, 0, 114, 25, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 27, 
	118, 27, 51, 0, 0, 0, 37, 37, 
	54, 37, 87, 0, 0, 39, 0, 96, 
	96, 0, 93, 90, 41, 96, 90, 99, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 57, 144, 0, 
	54, 84, 84, 0, 72, 33, 84, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 15, 63, 63, 31, 130, 
	60, 57, 31, 63, 57, 66, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 15, 0, 0, 0, 
	0, 0, 0, 0, 57, 144, 0, 54, 
	84, 0, 81, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 21, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 57, 144, 0, 54, 
	84, 0, 69, 33, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 13, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 13, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 57, 144, 0, 54, 
	84, 84, 0, 78, 33, 84, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 19, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	19, 57, 144, 0, 54, 84, 84, 0, 
	75, 33, 84, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	17, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 17, 0, 0, 
	0, 0, 0, 0, 0, 0, 0
];

var _lexer_eof_actions = [
	0, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43
];

var lexer_start = 1;
var lexer_first_final = 437;
var lexer_error = 0;

var lexer_en_main = 1;


/* line 129 "ragel/i18n/ar.js.rl" */

/* line 130 "ragel/i18n/ar.js.rl" */

/* line 131 "ragel/i18n/ar.js.rl" */

/* line 132 "ragel/i18n/ar.js.rl" */

var Lexer = function(listener) {
  // Check that listener has the required functions
  var events = ['comment', 'tag', 'feature', 'background', 'scenario', 'scenario_outline', 'examples', 'step', 'doc_string', 'row', 'eof'];
  for(var i=0, len=events.length; i<len; i++) {
    var event = events[i];
    if(typeof listener[event] != 'function') {
      throw new Error("Error. No " + event + " function exists on " + JSON.stringify(listener));
    }
  }
  this.listener = listener;
};

Lexer.prototype.scan = function(data) {
  var ending = "\n%_FEATURE_END_%";
  if(typeof data == 'string') {
    data = this.stringToBytes(data + ending);
  } else if(typeof Buffer != 'undefined' && Buffer.isBuffer(data)) {
    // Node.js
    var buf = new Buffer(data.length + ending.length);
    data.copy(buf, 0, 0);
    new Buffer(ending).copy(buf, data.length, 0);
    data = buf;
  }
  var eof = pe = data.length;
  var p = 0;

  this.line_number = 1;
  this.last_newline = 0;
  var signedCharValue=function(v){return v > 127 ? v-256 : v; };

  
/* line 795 "js/lib/gherkin/lexer/ar.js" */
{
	  this.cs = lexer_start;
} /* JSCodeGen::writeInit */

/* line 164 "ragel/i18n/ar.js.rl" */
  
/* line 802 "js/lib/gherkin/lexer/ar.js" */
{
	var _klen, _trans, _keys, _ps, _widec, _acts, _nacts;
	var _goto_level, _resume, _eof_trans, _again, _test_eof;
	var _out;
	_klen = _trans = _keys = _acts = _nacts = null;
	_goto_level = 0;
	_resume = 10;
	_eof_trans = 15;
	_again = 20;
	_test_eof = 30;
	_out = 40;
	while (true) {
	_trigger_goto = false;
	if (_goto_level <= 0) {
	if (p == pe) {
		_goto_level = _test_eof;
		continue;
	}
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	}
	if (_goto_level <= _resume) {
	_keys = _lexer_key_offsets[ this.cs];
	_trans = _lexer_index_offsets[ this.cs];
	_klen = _lexer_single_lengths[ this.cs];
	_break_match = false;
	
	do {
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + _klen - 1;

	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + ( (_upper - _lower) >> 1 );

	        if (( signedCharValue(data[p])) < _lexer_trans_keys[_mid]) {
	           _upper = _mid - 1;
	        } else if (( signedCharValue(data[p])) > _lexer_trans_keys[_mid]) {
	           _lower = _mid + 1;
	        } else {
	           _trans += (_mid - _keys);
	           _break_match = true;
	           break;
	        };
	     } /* while */
	     if (_break_match) { break; }
	     _keys += _klen;
	     _trans += _klen;
	  }
	  _klen = _lexer_range_lengths[ this.cs];
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + (_klen << 1) - 2;
	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + (((_upper-_lower) >> 1) & ~1);
	        if (( signedCharValue(data[p])) < _lexer_trans_keys[_mid]) {
	          _upper = _mid - 2;
	         } else if (( signedCharValue(data[p])) > _lexer_trans_keys[_mid+1]) {
	          _lower = _mid + 2;
	        } else {
	          _trans += ((_mid - _keys) >> 1);
	          _break_match = true;
	          break;
	        }
	     } /* while */
	     if (_break_match) { break; }
	     _trans += _klen
	  }
	} while (false);
	_trans = _lexer_indicies[_trans];
	 this.cs = _lexer_trans_targs[_trans];
	if (_lexer_trans_actions[_trans] != 0) {
		_acts = _lexer_trans_actions[_trans];
		_nacts = _lexer_actions[_acts];
		_acts += 1;
		while (_nacts > 0) {
			_nacts -= 1;
			_acts += 1;
			switch (_lexer_actions[_acts - 1]) {
case 0:
/* line 6 "ragel/i18n/ar.js.rl" */

    this.content_start = p;
    this.current_line = this.line_number;
    this.start_col = p - this.last_newline - (this.keyword+':').length;
  		break;
case 1:
/* line 12 "ragel/i18n/ar.js.rl" */

    this.current_line = this.line_number;
    this.start_col = p - this.last_newline;
  		break;
case 2:
/* line 17 "ragel/i18n/ar.js.rl" */

    this.content_start = p;
  		break;
case 3:
/* line 21 "ragel/i18n/ar.js.rl" */

    this.docstring_content_type_start = p;
  		break;
case 4:
/* line 25 "ragel/i18n/ar.js.rl" */

    this.docstring_content_type_end = p;
  		break;
case 5:
/* line 29 "ragel/i18n/ar.js.rl" */

    var con = this.unindent(
      this.start_col, 
      this.bytesToString(data.slice(this.content_start, this.next_keyword_start-1)).replace(/(\r?\n)?([\t ])*$/, '').replace(/\\\"\\\"\\\"/mg, '"""')
    );
    var con_type = this.bytesToString(data.slice(this.docstring_content_type_start, this.docstring_content_type_end)).trim();
    this.listener.doc_string(con_type, con, this.current_line); 
  		break;
case 6:
/* line 38 "ragel/i18n/ar.js.rl" */

    p = this.store_keyword_content('feature', data, p, eof);
  		break;
case 7:
/* line 42 "ragel/i18n/ar.js.rl" */

    p = this.store_keyword_content('background', data, p, eof);
  		break;
case 8:
/* line 46 "ragel/i18n/ar.js.rl" */

    p = this.store_keyword_content('scenario', data, p, eof);
  		break;
case 9:
/* line 50 "ragel/i18n/ar.js.rl" */

    p = this.store_keyword_content('scenario_outline', data, p, eof);
  		break;
case 10:
/* line 54 "ragel/i18n/ar.js.rl" */

    p = this.store_keyword_content('examples', data, p, eof);
  		break;
case 11:
/* line 58 "ragel/i18n/ar.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.step(this.keyword, con, this.current_line);
  		break;
case 12:
/* line 63 "ragel/i18n/ar.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.comment(con, this.line_number);
    this.keyword_start = null;
  		break;
case 13:
/* line 69 "ragel/i18n/ar.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.tag(con, this.line_number);
    this.keyword_start = null;
  		break;
case 14:
/* line 75 "ragel/i18n/ar.js.rl" */

    this.line_number++;
  		break;
case 15:
/* line 79 "ragel/i18n/ar.js.rl" */

    this.last_newline = p + 1;
  		break;
case 16:
/* line 83 "ragel/i18n/ar.js.rl" */

    this.keyword_start = this.keyword_start || p;
  		break;
case 17:
/* line 87 "ragel/i18n/ar.js.rl" */

    this.keyword = this.bytesToString(data.slice(this.keyword_start, p)).replace(/:$/, '');
    this.keyword_start = null;
  		break;
case 18:
/* line 92 "ragel/i18n/ar.js.rl" */

    this.next_keyword_start = p;
  		break;
case 19:
/* line 96 "ragel/i18n/ar.js.rl" */

    p = p - 1;
    current_row = [];
    this.current_line = this.line_number;
  		break;
case 20:
/* line 102 "ragel/i18n/ar.js.rl" */

    this.content_start = p;
  		break;
case 21:
/* line 106 "ragel/i18n/ar.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    current_row.push(con.replace(/\\\|/, "|").replace(/\\n/, "\n").replace(/\\\\/, "\\"));
  		break;
case 22:
/* line 111 "ragel/i18n/ar.js.rl" */

    this.listener.row(current_row, this.current_line);
  		break;
case 23:
/* line 115 "ragel/i18n/ar.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw new Error("Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.");
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 1029 "js/lib/gherkin/lexer/ar.js" */
			} /* action switch */
		}
	}
	if (_trigger_goto) {
		continue;
	}
	}
	if (_goto_level <= _again) {
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	p += 1;
	if (p != pe) {
		_goto_level = _resume;
		continue;
	}
	}
	if (_goto_level <= _test_eof) {
	if (p == eof) {
	__acts = _lexer_eof_actions[ this.cs];
	__nacts =  _lexer_actions[__acts];
	__acts += 1;
	while (__nacts > 0) {
		__nacts -= 1;
		__acts += 1;
		switch (_lexer_actions[__acts - 1]) {
case 23:
/* line 115 "ragel/i18n/ar.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw new Error("Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.");
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 1068 "js/lib/gherkin/lexer/ar.js" */
		} /* eof action switch */
	}
	if (_trigger_goto) {
		continue;
	}
}
	}
	if (_goto_level <= _out) {
		break;
	}
	}
	}

/* line 165 "ragel/i18n/ar.js.rl" */
};


/*
 * Decode utf-8 byte sequence to string.
 */
var decodeUtf8 = function(bytes) {
  var result = "";
  var i = 0;
  var wc;
  var c;

  while (i < bytes.length) {
    /* parse as UTF-8 lead byte */
    wc = bytes[i++];
    if (wc < 0x80) {
      count = 0;
    } else if (wc < 0xC2 || wc >= 0xF8) {
      throw new Error("input is not a valid UTF-8 lead octet");
    } else if (wc < 0xE0) {
      count = 1;
      wc = (wc & 0x1F) << 6;
    } else if (wc < 0xF0) {
      count = 2;
      wc = (wc & 0x0F) << 12;
    } else /* wc < 0xF8 */ {
      count = 3;
      wc = (wc & 0x07) << 18;
    }

    /* parse trail bytes, if any */
    while (count) {
      if (!(i < bytes.length)) {
        throw new Error("short read");
      }
      if ((c = bytes[i++] ^ 0x80) > 0x3F) {
        throw new Error("input is not a valid UTF-8 trail octet");
      }
      wc |= c << (6 * --count);
      if (wc < (1 << (5 * count + 6))) {
        throw new Error("invalid non-minimal encoded input");
      }
    }

    /* handle conversion to UTF-16 if needed */
    if (wc > 0xFFFF) {
      wc -= 0x10000;
      result += String.fromCharCode(0xD800 + (wc >> 10));
      wc = 0xDC00 + (wc & 0x3FF);
    }
    result += String.fromCharCode(wc);
  }

  return result;
};

/*
 * Encode string to an array of bytes using utf8 encoding.
 *
 * Javascript internally stores character data as utf16 (like java).
 * String.charCodeAt() does *not* produce unicode points, but simply
 * reflects this internal representation. Thus, it is necessary
 * to first decode the utf-16 representation before encoding to
 * utf-8.
 */
var encodeUtf8 = function(string) {
  var bytes = [];
  var i = 0;
  var j = 0;
  var wc;

  while (i < string.length) {
    wc = string.charCodeAt(i++);
    if (wc >= 0xD800 && wc <= 0xDBFF && i < string.length && string.charCodeAt(i) >= 0xDC00 && string.charCodeAt(i) <= 0xDFFF) {
      /* decode UTF-16 */
      wc = 0x10000 + ((wc & 0x3FF) << 10) + (string.charCodeAt(i++) & 0x3FF);
    }

    /* emit lead byte */
    if (wc < 0x80) {
      bytes[j++] = wc;
      count = 0;
    } else if (wc < 0x800) {
      bytes[j++] = 0xC0 | (wc >> 6);
      count = 1;
    } else if (wc < 0x10000) {
      bytes[j++] = 0xE0 | (wc >> 12);
      count = 2;
    } else {
      /* SMP: 21-bit Unicode */
      bytes[j++] = 0xF0 | (wc >> 18);
      count = 3;
    }

    /* emit trail bytes, if any */
    while (count) {
      bytes[j++] = 0x80 | ((wc >> (6 * --count)) & 0x3F);
    }
  }

  return bytes;

};

Lexer.prototype.bytesToString = function(bytes) {
  if(typeof bytes.write == 'function') {
    // Node.js
    return bytes.toString('utf-8');
  }
  return decodeUtf8(bytes);
};

Lexer.prototype.stringToBytes = function(string) {
  return encodeUtf8(string);
};

Lexer.prototype.unindent = function(startcol, text) {
  startcol = startcol || 0;
  return text.replace(new RegExp('^[\t ]{0,' + startcol + '}', 'gm'), ''); 
};

Lexer.prototype.store_keyword_content = function(event, data, p, eof) {
  var end_point = (!this.next_keyword_start || (p == eof)) ? p : this.next_keyword_start;
  var content = this.unindent(this.start_col + 2, this.bytesToString(data.slice(this.content_start, end_point))).replace(/\s+$/,"");
  var content_lines = content.split("\n")
  var name = content_lines.shift() || "";
  name = name.trim();
  var description = content_lines.join("\n");
  this.listener[event](this.keyword, name, description, this.current_line);
  var nks = this.next_keyword_start;
  this.next_keyword_start = null;
  return nks ? nks - 1 : p;
};

Lexer.prototype.current_line_content = function(data, p) {
  var rest = Array.prototype.slice.call(data,this.last_newline, -1);
  var end = rest.indexOf(10) || -1;
  return this.bytesToString(rest.slice(0, end)).trim();
};

// Node.js export
if(typeof module !== 'undefined') {
  module.exports = Lexer;
}
// Require.js export
if (typeof define !== 'undefined') {
  if(define.amd) {
    define('gherkin/lexer/ar', [], function() {
      return Lexer;
    });
  } else {
    define('gherkin/lexer/ar', function(require, exports, module) {
      exports.Lexer = Lexer;
    });
  }
}

})();

}).call(this,require("buffer").Buffer)

},{"buffer":69}],186:[function(require,module,exports){
(function (Buffer){

/* line 1 "ragel/i18n/bg.js.rl" */
;(function() {


/* line 126 "ragel/i18n/bg.js.rl" */



/* line 11 "js/lib/gherkin/lexer/bg.js" */
var _lexer_actions = [
	0, 1, 0, 1, 1, 1, 2, 1, 
	3, 1, 4, 1, 5, 1, 6, 1, 
	7, 1, 8, 1, 9, 1, 10, 1, 
	11, 1, 12, 1, 13, 1, 16, 1, 
	17, 1, 18, 1, 19, 1, 20, 1, 
	21, 1, 22, 1, 23, 2, 2, 18, 
	2, 3, 4, 2, 13, 0, 2, 14, 
	15, 2, 17, 0, 2, 17, 1, 2, 
	17, 16, 2, 17, 19, 2, 18, 6, 
	2, 18, 7, 2, 18, 8, 2, 18, 
	9, 2, 18, 10, 2, 18, 16, 2, 
	20, 21, 2, 22, 0, 2, 22, 1, 
	2, 22, 16, 2, 22, 19, 3, 4, 
	14, 15, 3, 5, 14, 15, 3, 11, 
	14, 15, 3, 12, 14, 15, 3, 13, 
	14, 15, 3, 14, 15, 18, 3, 17, 
	0, 11, 3, 17, 14, 15, 4, 2, 
	14, 15, 18, 4, 3, 4, 14, 15, 
	4, 17, 0, 14, 15, 5, 17, 0, 
	11, 14, 15
];

var _lexer_key_offsets = [
	0, 0, 12, 21, 22, 23, 24, 25, 
	26, 27, 28, 29, 30, 31, 32, 34, 
	36, 47, 48, 49, 51, 53, 58, 63, 
	68, 73, 77, 81, 83, 84, 85, 86, 
	87, 88, 89, 90, 91, 92, 93, 94, 
	95, 96, 97, 98, 103, 110, 115, 119, 
	125, 128, 130, 136, 147, 148, 149, 150, 
	151, 152, 153, 154, 155, 156, 157, 158, 
	160, 161, 162, 163, 164, 165, 166, 167, 
	168, 169, 170, 171, 172, 173, 174, 175, 
	176, 177, 178, 179, 188, 197, 199, 201, 
	203, 205, 207, 209, 211, 213, 215, 217, 
	219, 230, 232, 234, 236, 238, 240, 242, 
	244, 246, 248, 250, 252, 254, 256, 258, 
	260, 262, 264, 266, 268, 270, 272, 274, 
	276, 278, 280, 282, 284, 286, 288, 290, 
	292, 294, 296, 298, 300, 302, 304, 306, 
	308, 310, 312, 314, 316, 318, 320, 322, 
	324, 326, 328, 330, 332, 334, 336, 338, 
	340, 342, 344, 346, 348, 350, 352, 354, 
	356, 358, 360, 362, 364, 366, 368, 370, 
	372, 374, 376, 378, 380, 382, 384, 386, 
	388, 389, 390, 391, 392, 393, 394, 395, 
	396, 397, 398, 399, 406, 408, 410, 412, 
	414, 416, 418, 420, 422, 424, 426, 428, 
	430, 432, 434, 436, 438, 440, 442, 444, 
	446, 448, 450, 452, 454, 456, 458, 460, 
	462, 463, 464, 465, 466, 467, 468, 469, 
	470, 471, 472, 473, 474, 475, 476, 477, 
	478, 479, 480, 481, 482, 483, 484, 485, 
	486, 487, 488, 489, 490, 491, 492, 493, 
	494, 495, 504, 512, 514, 516, 518, 520, 
	522, 524, 526, 528, 530, 532, 534, 536, 
	538, 540, 542, 544, 546, 548, 550, 552, 
	554, 556, 558, 560, 562, 564, 566, 568, 
	570, 572, 574, 576, 578, 580, 582, 584, 
	586, 588, 590, 592, 594, 596, 598, 600, 
	602, 604, 606, 608, 610, 612, 614, 616, 
	618, 620, 622, 624, 626, 628, 630, 632, 
	634, 636, 638, 640, 642, 644, 646, 648, 
	650, 652, 654, 656, 658, 660, 661, 662, 
	663, 664, 665, 666, 667, 668, 669, 670, 
	671, 672, 673, 674, 675, 676, 677, 686, 
	696, 698, 700, 702, 704, 706, 708, 710, 
	712, 714, 716, 718, 720, 722, 724, 726, 
	728, 730, 732, 734, 736, 738, 740, 742, 
	744, 746, 748, 750, 752, 754, 756, 758, 
	760, 762, 764, 766, 768, 770, 772, 774, 
	776, 778, 780, 782, 784, 786, 788, 790, 
	792, 794, 796, 798, 800, 802, 804, 806, 
	808, 810, 812, 814, 816, 818, 820, 822, 
	824, 826, 828, 830, 832, 834, 836, 838, 
	840, 842, 844, 846, 848, 850, 852, 854, 
	856, 858, 860, 862, 864, 866, 868, 870, 
	872, 874, 876, 878, 880, 882, 884, 886, 
	888, 890, 892, 894, 896, 898, 900, 902, 
	904, 906, 908, 910, 912, 914, 916, 917, 
	918, 919, 920, 921, 922, 923, 924, 925, 
	926, 927, 928, 929, 930, 931, 932, 933, 
	934, 935, 936, 937, 938, 939, 940, 941, 
	942, 943, 944, 945, 953, 958, 960, 962, 
	964, 967, 969, 971, 973, 975, 977, 979, 
	981, 983, 985, 987, 989, 991, 993, 995, 
	997, 999, 1001, 1003, 1005, 1007, 1009, 1011, 
	1013, 1015, 1017, 1019, 1021, 1023, 1025, 1027, 
	1029, 1031, 1033, 1035, 1037, 1039, 1041, 1043, 
	1045, 1047, 1049, 1051, 1053, 1055, 1057, 1059, 
	1061, 1063, 1065, 1067, 1069, 1071, 1073, 1075, 
	1077, 1079, 1081, 1083, 1085, 1087, 1089, 1091, 
	1093, 1095, 1097, 1099, 1101, 1103, 1105, 1107, 
	1109, 1111, 1113, 1115, 1117, 1119, 1121, 1123, 
	1125, 1127, 1129, 1131, 1133, 1135, 1137, 1139, 
	1141, 1143, 1145, 1147, 1149, 1151, 1153, 1155, 
	1157, 1158, 1159
];

var _lexer_trans_keys = [
	-48, 10, 32, 34, 35, 37, 42, 64, 
	124, 239, 9, 13, -108, -104, -102, -99, 
	-97, -96, -95, -94, -92, -48, -80, -48, 
	-76, -48, -75, -48, -67, -48, -66, 32, 
	10, 13, 10, 13, -48, 10, 32, 34, 
	35, 37, 42, 64, 124, 9, 13, 34, 
	34, 10, 13, 10, 13, 10, 32, 34, 
	9, 13, 10, 32, 34, 9, 13, 10, 
	32, 34, 9, 13, 10, 32, 34, 9, 
	13, 10, 32, 9, 13, 10, 32, 9, 
	13, 10, 13, 10, 95, 70, 69, 65, 
	84, 85, 82, 69, 95, 69, 78, 68, 
	95, 37, 13, 32, 64, 9, 10, 9, 
	10, 13, 32, 64, 11, 12, 10, 32, 
	64, 9, 13, 32, 124, 9, 13, 10, 
	32, 92, 124, 9, 13, 10, 92, 124, 
	10, 92, 10, 32, 92, 124, 9, 13, 
	-48, 10, 32, 34, 35, 37, 42, 64, 
	124, 9, 13, -48, -66, -48, -77, -48, 
	-80, -47, -126, -47, -128, -48, -75, -72, 
	-48, -76, -48, -72, -47, -127, -47, -126, 
	-48, -66, -47, -128, -48, -72, -47, -113, 
	58, 10, 10, -48, 10, 32, 35, 37, 
	42, 64, 9, 13, -108, -104, -102, -99, 
	-96, -95, -94, -92, 10, -48, 10, -80, 
	10, -48, 10, -76, 10, -48, 10, -75, 
	10, -48, 10, -67, 10, -48, 10, -66, 
	10, 10, 32, -48, 10, 32, 34, 35, 
	37, 42, 64, 124, 9, 13, -48, 10, 
	-66, 10, -48, 10, -77, 10, -48, 10, 
	-80, 10, -47, 10, -126, 10, -48, 10, 
	-80, 10, -48, 10, -68, 10, -48, 10, 
	-70, 10, -48, 10, -80, 10, 10, 32, 
	-48, 10, -67, 10, -48, 10, -80, 10, 
	10, 32, -47, 10, -127, 10, -47, 10, 
	-122, 10, -48, 10, -75, 10, -48, 10, 
	-67, 10, -48, 10, -80, 10, -47, 10, 
	-128, 10, -48, 10, -72, 10, -48, 10, 
	-71, 10, 10, 58, -47, 10, -125, 10, 
	-48, 10, -67, 10, -48, 10, -70, 10, 
	-47, 10, -122, 10, -48, 10, -72, 10, 
	-48, 10, -66, 10, -48, 10, -67, 10, 
	-48, 10, -80, 10, -48, 10, -69, 10, 
	-48, 10, -67, 10, -48, 10, -66, 10, 
	-47, 10, -127, 10, -47, 10, -126, 10, 
	10, 95, 10, 70, 10, 69, 10, 65, 
	10, 84, 10, 85, 10, 82, 10, 69, 
	10, 95, 10, 69, 10, 78, 10, 68, 
	10, 95, 10, 37, -48, -68, -48, -75, 
	-47, -128, -48, -72, 58, 10, 10, -48, 
	10, 32, 35, 124, 9, 13, -92, 10, 
	-47, 10, -125, 10, -48, 10, -67, 10, 
	-48, 10, -70, 10, -47, 10, -122, 10, 
	-48, 10, -72, 10, -48, 10, -66, 10, 
	-48, 10, -67, 10, -48, 10, -80, 10, 
	-48, 10, -69, 10, -48, 10, -67, 10, 
	-48, 10, -66, 10, -47, 10, -127, 10, 
	-47, 10, -126, 10, 10, 58, -48, -80, 
	-48, -68, -48, -70, -48, -80, 32, -48, 
	-67, -48, -80, 32, -47, -127, -47, -122, 
	-48, -75, -48, -67, -48, -80, -47, -128, 
	-48, -72, -48, -71, 58, 10, 10, -48, 
	10, 32, 35, 37, 42, 64, 9, 13, 
	-108, -104, -102, -99, -95, -94, -92, 10, 
	-48, 10, -80, 10, -48, 10, -76, 10, 
	-48, 10, -75, 10, -48, 10, -67, 10, 
	-48, 10, -66, 10, 10, 32, -48, 10, 
	-66, 10, -48, 10, -77, 10, -48, 10, 
	-80, 10, -47, 10, -126, 10, -47, 10, 
	-122, 10, -48, 10, -75, 10, -48, 10, 
	-67, 10, -48, 10, -80, 10, -47, 10, 
	-128, 10, -48, 10, -72, 10, -48, 10, 
	-71, 10, 10, 58, -47, 10, -125, 10, 
	-48, 10, -67, 10, -48, 10, -70, 10, 
	-47, 10, -122, 10, -48, 10, -72, 10, 
	-48, 10, -66, 10, -48, 10, -67, 10, 
	-48, 10, -80, 10, -48, 10, -69, 10, 
	-48, 10, -67, 10, -48, 10, -66, 10, 
	-47, 10, -127, 10, -47, 10, -126, 10, 
	10, 95, 10, 70, 10, 69, 10, 65, 
	10, 84, 10, 85, 10, 82, 10, 69, 
	10, 95, 10, 69, 10, 78, 10, 68, 
	10, 95, 10, 37, -47, -122, -48, -75, 
	-48, -67, -48, -80, -47, -128, -48, -72, 
	-48, -71, 58, 10, 10, -48, 10, 32, 
	35, 37, 42, 64, 9, 13, -108, -104, 
	-102, -99, -97, -96, -95, -94, -92, 10, 
	-48, 10, -80, 10, -48, 10, -76, 10, 
	-48, 10, -75, 10, -48, 10, -67, 10, 
	-48, 10, -66, 10, 10, 32, -48, 10, 
	-66, 10, -48, 10, -77, 10, -48, 10, 
	-80, 10, -47, 10, -126, 10, -47, 10, 
	-128, 10, -48, 10, -75, 10, -48, 10, 
	-76, 10, -48, 10, -72, 10, -47, 10, 
	-127, 10, -47, 10, -126, 10, -48, 10, 
	-66, 10, -47, 10, -128, 10, -48, 10, 
	-72, 10, -47, 10, -113, 10, 10, 58, 
	-48, 10, -80, 10, -48, 10, -68, 10, 
	-48, 10, -70, 10, -48, 10, -80, 10, 
	10, 32, -48, 10, -67, 10, -48, 10, 
	-80, 10, 10, 32, -47, 10, -127, 10, 
	-47, 10, -122, 10, -48, 10, -75, 10, 
	-48, 10, -67, 10, -48, 10, -80, 10, 
	-47, 10, -128, 10, -48, 10, -72, 10, 
	-48, 10, -71, 10, -47, 10, -125, 10, 
	-48, 10, -67, 10, -48, 10, -70, 10, 
	-47, 10, -122, 10, -48, 10, -72, 10, 
	-48, 10, -66, 10, -48, 10, -67, 10, 
	-48, 10, -80, 10, -48, 10, -69, 10, 
	-48, 10, -67, 10, -48, 10, -66, 10, 
	-47, 10, -127, 10, -47, 10, -126, 10, 
	10, 95, 10, 70, 10, 69, 10, 65, 
	10, 84, 10, 85, 10, 82, 10, 69, 
	10, 95, 10, 69, 10, 78, 10, 68, 
	10, 95, 10, 37, -47, -125, -48, -67, 
	-48, -70, -47, -122, -48, -72, -48, -66, 
	-48, -67, -48, -80, -48, -69, -48, -67, 
	-48, -66, -47, -127, -47, -126, 58, 10, 
	10, -48, 10, 32, 35, 37, 64, 9, 
	13, -97, -96, -95, -92, 10, -47, 10, 
	-128, 10, -48, 10, -75, -72, 10, -48, 
	10, -76, 10, -48, 10, -72, 10, -47, 
	10, -127, 10, -47, 10, -126, 10, -48, 
	10, -66, 10, -47, 10, -128, 10, -48, 
	10, -72, 10, -47, 10, -113, 10, 10, 
	58, -48, 10, -68, 10, -48, 10, -75, 
	10, -47, 10, -128, 10, -48, 10, -72, 
	10, -48, 10, -80, 10, -48, 10, -68, 
	10, -48, 10, -70, 10, -48, 10, -80, 
	10, 10, 32, -48, 10, -67, 10, -48, 
	10, -80, 10, 10, 32, -47, 10, -127, 
	10, -47, 10, -122, 10, -48, 10, -75, 
	10, -48, 10, -67, 10, -48, 10, -80, 
	10, -47, 10, -128, 10, -48, 10, -72, 
	10, -48, 10, -71, 10, -47, 10, -125, 
	10, -48, 10, -67, 10, -48, 10, -70, 
	10, -47, 10, -122, 10, -48, 10, -72, 
	10, -48, 10, -66, 10, -48, 10, -67, 
	10, -48, 10, -80, 10, -48, 10, -69, 
	10, -48, 10, -67, 10, -48, 10, -66, 
	10, -47, 10, -127, 10, -47, 10, -126, 
	10, 10, 95, 10, 70, 10, 69, 10, 
	65, 10, 84, 10, 85, 10, 82, 10, 
	69, 10, 95, 10, 69, 10, 78, 10, 
	68, 10, 95, 10, 37, 187, 191, 0
];

var _lexer_single_lengths = [
	0, 10, 9, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 2, 2, 
	9, 1, 1, 2, 2, 3, 3, 3, 
	3, 2, 2, 2, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 3, 5, 3, 2, 4, 
	3, 2, 4, 9, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 2, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 7, 9, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	9, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 5, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 7, 8, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 7, 10, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 6, 5, 2, 2, 2, 
	3, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	1, 1, 0
];

var _lexer_range_lengths = [
	0, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 0, 0, 0, 0, 1, 1, 1, 
	1, 1, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 1, 1, 1, 1, 
	0, 0, 1, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0
];

var _lexer_index_offsets = [
	0, 0, 12, 22, 24, 26, 28, 30, 
	32, 34, 36, 38, 40, 42, 44, 47, 
	50, 61, 63, 65, 68, 71, 76, 81, 
	86, 91, 95, 99, 102, 104, 106, 108, 
	110, 112, 114, 116, 118, 120, 122, 124, 
	126, 128, 130, 132, 137, 144, 149, 153, 
	159, 163, 166, 172, 183, 185, 187, 189, 
	191, 193, 195, 197, 199, 201, 203, 205, 
	208, 210, 212, 214, 216, 218, 220, 222, 
	224, 226, 228, 230, 232, 234, 236, 238, 
	240, 242, 244, 246, 255, 265, 268, 271, 
	274, 277, 280, 283, 286, 289, 292, 295, 
	298, 309, 312, 315, 318, 321, 324, 327, 
	330, 333, 336, 339, 342, 345, 348, 351, 
	354, 357, 360, 363, 366, 369, 372, 375, 
	378, 381, 384, 387, 390, 393, 396, 399, 
	402, 405, 408, 411, 414, 417, 420, 423, 
	426, 429, 432, 435, 438, 441, 444, 447, 
	450, 453, 456, 459, 462, 465, 468, 471, 
	474, 477, 480, 483, 486, 489, 492, 495, 
	498, 501, 504, 507, 510, 513, 516, 519, 
	522, 525, 528, 531, 534, 537, 540, 543, 
	546, 548, 550, 552, 554, 556, 558, 560, 
	562, 564, 566, 568, 575, 578, 581, 584, 
	587, 590, 593, 596, 599, 602, 605, 608, 
	611, 614, 617, 620, 623, 626, 629, 632, 
	635, 638, 641, 644, 647, 650, 653, 656, 
	659, 661, 663, 665, 667, 669, 671, 673, 
	675, 677, 679, 681, 683, 685, 687, 689, 
	691, 693, 695, 697, 699, 701, 703, 705, 
	707, 709, 711, 713, 715, 717, 719, 721, 
	723, 725, 734, 743, 746, 749, 752, 755, 
	758, 761, 764, 767, 770, 773, 776, 779, 
	782, 785, 788, 791, 794, 797, 800, 803, 
	806, 809, 812, 815, 818, 821, 824, 827, 
	830, 833, 836, 839, 842, 845, 848, 851, 
	854, 857, 860, 863, 866, 869, 872, 875, 
	878, 881, 884, 887, 890, 893, 896, 899, 
	902, 905, 908, 911, 914, 917, 920, 923, 
	926, 929, 932, 935, 938, 941, 944, 947, 
	950, 953, 956, 959, 962, 965, 967, 969, 
	971, 973, 975, 977, 979, 981, 983, 985, 
	987, 989, 991, 993, 995, 997, 999, 1008, 
	1019, 1022, 1025, 1028, 1031, 1034, 1037, 1040, 
	1043, 1046, 1049, 1052, 1055, 1058, 1061, 1064, 
	1067, 1070, 1073, 1076, 1079, 1082, 1085, 1088, 
	1091, 1094, 1097, 1100, 1103, 1106, 1109, 1112, 
	1115, 1118, 1121, 1124, 1127, 1130, 1133, 1136, 
	1139, 1142, 1145, 1148, 1151, 1154, 1157, 1160, 
	1163, 1166, 1169, 1172, 1175, 1178, 1181, 1184, 
	1187, 1190, 1193, 1196, 1199, 1202, 1205, 1208, 
	1211, 1214, 1217, 1220, 1223, 1226, 1229, 1232, 
	1235, 1238, 1241, 1244, 1247, 1250, 1253, 1256, 
	1259, 1262, 1265, 1268, 1271, 1274, 1277, 1280, 
	1283, 1286, 1289, 1292, 1295, 1298, 1301, 1304, 
	1307, 1310, 1313, 1316, 1319, 1322, 1325, 1328, 
	1331, 1334, 1337, 1340, 1343, 1346, 1349, 1351, 
	1353, 1355, 1357, 1359, 1361, 1363, 1365, 1367, 
	1369, 1371, 1373, 1375, 1377, 1379, 1381, 1383, 
	1385, 1387, 1389, 1391, 1393, 1395, 1397, 1399, 
	1401, 1403, 1405, 1407, 1415, 1421, 1424, 1427, 
	1430, 1434, 1437, 1440, 1443, 1446, 1449, 1452, 
	1455, 1458, 1461, 1464, 1467, 1470, 1473, 1476, 
	1479, 1482, 1485, 1488, 1491, 1494, 1497, 1500, 
	1503, 1506, 1509, 1512, 1515, 1518, 1521, 1524, 
	1527, 1530, 1533, 1536, 1539, 1542, 1545, 1548, 
	1551, 1554, 1557, 1560, 1563, 1566, 1569, 1572, 
	1575, 1578, 1581, 1584, 1587, 1590, 1593, 1596, 
	1599, 1602, 1605, 1608, 1611, 1614, 1617, 1620, 
	1623, 1626, 1629, 1632, 1635, 1638, 1641, 1644, 
	1647, 1650, 1653, 1656, 1659, 1662, 1665, 1668, 
	1671, 1674, 1677, 1680, 1683, 1686, 1689, 1692, 
	1695, 1698, 1701, 1704, 1707, 1710, 1713, 1716, 
	1719, 1721, 1723
];

var _lexer_indicies = [
	1, 3, 2, 4, 5, 6, 7, 8, 
	9, 10, 2, 0, 11, 12, 13, 14, 
	15, 16, 17, 14, 18, 0, 19, 0, 
	20, 0, 21, 0, 22, 0, 23, 0, 
	24, 0, 25, 0, 14, 0, 26, 0, 
	12, 0, 27, 0, 29, 30, 28, 32, 
	33, 31, 1, 3, 2, 4, 5, 6, 
	7, 8, 9, 2, 0, 34, 0, 35, 
	0, 37, 38, 36, 40, 41, 39, 44, 
	43, 45, 43, 42, 48, 47, 49, 47, 
	46, 48, 47, 50, 47, 46, 48, 47, 
	51, 47, 46, 53, 52, 52, 0, 3, 
	54, 54, 0, 56, 57, 55, 3, 0, 
	58, 0, 59, 0, 60, 0, 61, 0, 
	62, 0, 63, 0, 64, 0, 65, 0, 
	66, 0, 67, 0, 68, 0, 69, 0, 
	70, 0, 71, 0, 0, 0, 0, 0, 
	72, 73, 74, 73, 73, 76, 75, 72, 
	3, 77, 8, 77, 0, 78, 79, 78, 
	0, 82, 81, 83, 84, 81, 80, 0, 
	86, 87, 85, 0, 86, 85, 82, 88, 
	86, 87, 88, 85, 89, 82, 90, 91, 
	92, 93, 94, 95, 96, 90, 0, 97, 
	0, 98, 0, 99, 0, 100, 0, 101, 
	0, 102, 0, 103, 0, 14, 0, 104, 
	0, 105, 0, 106, 0, 107, 108, 0, 
	109, 0, 110, 0, 111, 0, 112, 0, 
	113, 0, 114, 0, 115, 0, 116, 0, 
	117, 0, 118, 0, 119, 0, 120, 0, 
	121, 0, 122, 0, 123, 0, 124, 0, 
	125, 0, 127, 126, 129, 128, 130, 129, 
	131, 132, 133, 134, 132, 131, 128, 135, 
	136, 137, 138, 139, 140, 138, 141, 129, 
	128, 142, 129, 128, 143, 129, 128, 144, 
	129, 128, 145, 129, 128, 146, 129, 128, 
	147, 129, 128, 148, 129, 128, 138, 129, 
	128, 149, 129, 128, 136, 129, 128, 129, 
	150, 128, 151, 153, 152, 154, 155, 156, 
	157, 158, 159, 152, 0, 160, 129, 128, 
	161, 129, 128, 162, 129, 128, 163, 129, 
	128, 164, 129, 128, 165, 129, 128, 166, 
	129, 128, 138, 129, 128, 167, 129, 128, 
	168, 129, 128, 169, 129, 128, 170, 129, 
	128, 171, 129, 128, 172, 129, 128, 173, 
	129, 128, 174, 129, 128, 129, 175, 128, 
	176, 129, 128, 177, 129, 128, 178, 129, 
	128, 179, 129, 128, 129, 180, 128, 181, 
	129, 128, 140, 129, 128, 182, 129, 128, 
	183, 129, 128, 184, 129, 128, 185, 129, 
	128, 186, 129, 128, 187, 129, 128, 188, 
	129, 128, 189, 129, 128, 190, 129, 128, 
	191, 129, 128, 192, 129, 128, 193, 129, 
	128, 194, 129, 128, 195, 129, 128, 129, 
	150, 128, 196, 129, 128, 197, 129, 128, 
	198, 129, 128, 199, 129, 128, 200, 129, 
	128, 201, 129, 128, 202, 129, 128, 203, 
	129, 128, 204, 129, 128, 205, 129, 128, 
	206, 129, 128, 207, 129, 128, 208, 129, 
	128, 209, 129, 128, 210, 129, 128, 211, 
	129, 128, 212, 129, 128, 213, 129, 128, 
	214, 129, 128, 215, 129, 128, 216, 129, 
	128, 217, 129, 128, 218, 129, 128, 219, 
	129, 128, 220, 129, 128, 195, 129, 128, 
	129, 221, 128, 129, 222, 128, 129, 223, 
	128, 129, 224, 128, 129, 225, 128, 129, 
	226, 128, 129, 227, 128, 129, 228, 128, 
	129, 229, 128, 129, 230, 128, 129, 231, 
	128, 129, 232, 128, 129, 233, 128, 129, 
	234, 128, 235, 0, 236, 0, 237, 0, 
	238, 0, 239, 0, 240, 0, 241, 0, 
	242, 0, 243, 0, 245, 244, 247, 246, 
	248, 247, 249, 250, 250, 249, 246, 251, 
	247, 246, 252, 247, 246, 253, 247, 246, 
	254, 247, 246, 255, 247, 246, 256, 247, 
	246, 257, 247, 246, 258, 247, 246, 259, 
	247, 246, 260, 247, 246, 261, 247, 246, 
	262, 247, 246, 263, 247, 246, 264, 247, 
	246, 265, 247, 246, 266, 247, 246, 267, 
	247, 246, 268, 247, 246, 269, 247, 246, 
	270, 247, 246, 271, 247, 246, 272, 247, 
	246, 273, 247, 246, 274, 247, 246, 275, 
	247, 246, 276, 247, 246, 277, 247, 246, 
	247, 278, 246, 279, 0, 280, 0, 281, 
	0, 282, 0, 283, 0, 284, 0, 285, 
	0, 286, 0, 287, 0, 288, 0, 289, 
	0, 290, 0, 291, 0, 292, 0, 293, 
	0, 294, 0, 295, 0, 296, 0, 297, 
	0, 298, 0, 299, 0, 300, 0, 301, 
	0, 302, 0, 303, 0, 304, 0, 305, 
	0, 306, 0, 307, 0, 308, 0, 309, 
	0, 311, 310, 313, 312, 314, 313, 315, 
	316, 317, 318, 316, 315, 312, 319, 320, 
	321, 322, 323, 322, 324, 313, 312, 325, 
	313, 312, 326, 313, 312, 327, 313, 312, 
	328, 313, 312, 329, 313, 312, 330, 313, 
	312, 331, 313, 312, 322, 313, 312, 332, 
	313, 312, 320, 313, 312, 313, 333, 312, 
	334, 313, 312, 335, 313, 312, 336, 313, 
	312, 337, 313, 312, 338, 313, 312, 339, 
	313, 312, 340, 313, 312, 322, 313, 312, 
	341, 313, 312, 342, 313, 312, 343, 313, 
	312, 344, 313, 312, 345, 313, 312, 346, 
	313, 312, 347, 313, 312, 348, 313, 312, 
	349, 313, 312, 350, 313, 312, 351, 313, 
	312, 352, 313, 312, 353, 313, 312, 354, 
	313, 312, 313, 333, 312, 355, 313, 312, 
	356, 313, 312, 357, 313, 312, 358, 313, 
	312, 359, 313, 312, 360, 313, 312, 361, 
	313, 312, 362, 313, 312, 363, 313, 312, 
	364, 313, 312, 365, 313, 312, 366, 313, 
	312, 367, 313, 312, 368, 313, 312, 369, 
	313, 312, 370, 313, 312, 371, 313, 312, 
	372, 313, 312, 373, 313, 312, 374, 313, 
	312, 375, 313, 312, 376, 313, 312, 377, 
	313, 312, 378, 313, 312, 379, 313, 312, 
	354, 313, 312, 313, 380, 312, 313, 381, 
	312, 313, 382, 312, 313, 383, 312, 313, 
	384, 312, 313, 385, 312, 313, 386, 312, 
	313, 387, 312, 313, 388, 312, 313, 389, 
	312, 313, 390, 312, 313, 391, 312, 313, 
	392, 312, 313, 393, 312, 394, 0, 395, 
	0, 396, 0, 397, 0, 398, 0, 399, 
	0, 400, 0, 401, 0, 402, 0, 403, 
	0, 404, 0, 405, 0, 406, 0, 407, 
	0, 408, 0, 410, 409, 412, 411, 413, 
	412, 414, 415, 416, 417, 415, 414, 411, 
	418, 419, 420, 421, 422, 423, 424, 421, 
	425, 412, 411, 426, 412, 411, 427, 412, 
	411, 428, 412, 411, 429, 412, 411, 430, 
	412, 411, 431, 412, 411, 432, 412, 411, 
	421, 412, 411, 433, 412, 411, 419, 412, 
	411, 412, 434, 411, 435, 412, 411, 436, 
	412, 411, 437, 412, 411, 438, 412, 411, 
	439, 412, 411, 440, 412, 411, 441, 412, 
	411, 421, 412, 411, 442, 412, 411, 443, 
	412, 411, 444, 412, 411, 445, 412, 411, 
	446, 412, 411, 447, 412, 411, 448, 412, 
	411, 449, 412, 411, 450, 412, 411, 451, 
	412, 411, 452, 412, 411, 453, 412, 411, 
	454, 412, 411, 455, 412, 411, 456, 412, 
	411, 457, 412, 411, 458, 412, 411, 459, 
	412, 411, 460, 412, 411, 461, 412, 411, 
	412, 434, 411, 462, 412, 411, 463, 412, 
	411, 464, 412, 411, 465, 412, 411, 466, 
	412, 411, 467, 412, 411, 468, 412, 411, 
	469, 412, 411, 412, 470, 411, 471, 412, 
	411, 472, 412, 411, 473, 412, 411, 474, 
	412, 411, 412, 475, 411, 476, 412, 411, 
	424, 412, 411, 477, 412, 411, 478, 412, 
	411, 479, 412, 411, 480, 412, 411, 481, 
	412, 411, 482, 412, 411, 483, 412, 411, 
	484, 412, 411, 485, 412, 411, 486, 412, 
	411, 487, 412, 411, 488, 412, 411, 489, 
	412, 411, 461, 412, 411, 490, 412, 411, 
	491, 412, 411, 492, 412, 411, 493, 412, 
	411, 494, 412, 411, 495, 412, 411, 496, 
	412, 411, 497, 412, 411, 498, 412, 411, 
	499, 412, 411, 500, 412, 411, 501, 412, 
	411, 502, 412, 411, 503, 412, 411, 504, 
	412, 411, 505, 412, 411, 506, 412, 411, 
	507, 412, 411, 508, 412, 411, 509, 412, 
	411, 510, 412, 411, 511, 412, 411, 512, 
	412, 411, 513, 412, 411, 514, 412, 411, 
	461, 412, 411, 412, 515, 411, 412, 516, 
	411, 412, 517, 411, 412, 518, 411, 412, 
	519, 411, 412, 520, 411, 412, 521, 411, 
	412, 522, 411, 412, 523, 411, 412, 524, 
	411, 412, 525, 411, 412, 526, 411, 412, 
	527, 411, 412, 528, 411, 529, 0, 530, 
	0, 531, 0, 532, 0, 533, 0, 534, 
	0, 535, 0, 536, 0, 537, 0, 538, 
	0, 539, 0, 540, 0, 541, 0, 542, 
	0, 543, 0, 544, 0, 545, 0, 546, 
	0, 547, 0, 548, 0, 549, 0, 550, 
	0, 551, 0, 552, 0, 553, 0, 554, 
	0, 555, 0, 557, 556, 559, 558, 560, 
	559, 561, 562, 563, 562, 561, 558, 564, 
	565, 566, 567, 559, 558, 568, 559, 558, 
	569, 559, 558, 570, 559, 558, 571, 572, 
	559, 558, 573, 559, 558, 574, 559, 558, 
	575, 559, 558, 576, 559, 558, 577, 559, 
	558, 578, 559, 558, 579, 559, 558, 580, 
	559, 558, 581, 559, 558, 582, 559, 558, 
	583, 559, 558, 584, 559, 558, 585, 559, 
	558, 586, 559, 558, 587, 559, 558, 588, 
	559, 558, 559, 589, 558, 590, 559, 558, 
	591, 559, 558, 592, 559, 558, 593, 559, 
	558, 594, 559, 558, 595, 559, 558, 596, 
	559, 558, 588, 559, 558, 597, 559, 558, 
	598, 559, 558, 599, 559, 558, 600, 559, 
	558, 601, 559, 558, 602, 559, 558, 603, 
	559, 558, 604, 559, 558, 559, 605, 558, 
	606, 559, 558, 607, 559, 558, 608, 559, 
	558, 609, 559, 558, 559, 610, 558, 611, 
	559, 558, 566, 559, 558, 612, 559, 558, 
	613, 559, 558, 614, 559, 558, 615, 559, 
	558, 616, 559, 558, 617, 559, 558, 618, 
	559, 558, 619, 559, 558, 620, 559, 558, 
	621, 559, 558, 622, 559, 558, 623, 559, 
	558, 624, 559, 558, 588, 559, 558, 625, 
	559, 558, 626, 559, 558, 627, 559, 558, 
	628, 559, 558, 629, 559, 558, 630, 559, 
	558, 631, 559, 558, 632, 559, 558, 633, 
	559, 558, 634, 559, 558, 635, 559, 558, 
	636, 559, 558, 637, 559, 558, 638, 559, 
	558, 639, 559, 558, 640, 559, 558, 641, 
	559, 558, 642, 559, 558, 643, 559, 558, 
	644, 559, 558, 645, 559, 558, 646, 559, 
	558, 647, 559, 558, 648, 559, 558, 649, 
	559, 558, 588, 559, 558, 559, 650, 558, 
	559, 651, 558, 559, 652, 558, 559, 653, 
	558, 559, 654, 558, 559, 655, 558, 559, 
	656, 558, 559, 657, 558, 559, 658, 558, 
	559, 659, 558, 559, 660, 558, 559, 661, 
	558, 559, 662, 558, 559, 663, 558, 664, 
	0, 2, 0, 665, 0
];

var _lexer_trans_targs = [
	0, 2, 16, 16, 17, 27, 29, 13, 
	43, 46, 584, 3, 13, 52, 11, 60, 
	216, 325, 454, 4, 5, 6, 7, 8, 
	9, 10, 12, 14, 15, 16, 28, 15, 
	16, 28, 18, 19, 20, 21, 20, 20, 
	21, 20, 22, 22, 22, 23, 22, 22, 
	22, 23, 24, 25, 26, 16, 26, 27, 
	16, 28, 30, 31, 32, 33, 34, 35, 
	36, 37, 38, 39, 40, 41, 42, 586, 
	44, 45, 16, 44, 43, 45, 46, 47, 
	48, 50, 51, 49, 47, 48, 49, 47, 
	50, 2, 51, 17, 27, 29, 13, 43, 
	46, 53, 54, 55, 56, 57, 58, 59, 
	61, 62, 63, 64, 176, 65, 66, 67, 
	68, 69, 70, 71, 72, 73, 74, 75, 
	76, 77, 78, 79, 80, 81, 82, 83, 
	82, 83, 84, 83, 16, 162, 95, 85, 
	95, 97, 93, 105, 121, 136, 86, 87, 
	88, 89, 90, 91, 92, 94, 96, 2, 
	16, 16, 17, 27, 29, 13, 43, 46, 
	98, 99, 100, 101, 102, 103, 104, 106, 
	107, 108, 109, 110, 111, 112, 113, 114, 
	115, 116, 117, 118, 119, 120, 122, 123, 
	124, 125, 126, 127, 128, 129, 130, 131, 
	132, 133, 134, 135, 137, 138, 139, 140, 
	141, 142, 143, 144, 145, 146, 147, 148, 
	149, 150, 151, 152, 153, 154, 155, 156, 
	157, 158, 159, 160, 161, 163, 164, 165, 
	166, 167, 168, 169, 170, 171, 172, 173, 
	174, 175, 16, 177, 178, 179, 180, 181, 
	182, 183, 184, 185, 186, 187, 186, 187, 
	188, 187, 16, 189, 190, 191, 192, 193, 
	194, 195, 196, 197, 198, 199, 200, 201, 
	202, 203, 204, 205, 206, 207, 208, 209, 
	210, 211, 212, 213, 214, 215, 96, 217, 
	218, 219, 220, 221, 222, 223, 224, 225, 
	226, 227, 228, 229, 230, 231, 232, 233, 
	234, 235, 236, 237, 238, 239, 240, 241, 
	242, 243, 244, 245, 246, 247, 248, 249, 
	248, 249, 250, 249, 16, 311, 261, 251, 
	261, 262, 259, 270, 285, 252, 253, 254, 
	255, 256, 257, 258, 260, 96, 263, 264, 
	265, 266, 267, 268, 269, 271, 272, 273, 
	274, 275, 276, 277, 278, 279, 280, 281, 
	282, 283, 284, 286, 287, 288, 289, 290, 
	291, 292, 293, 294, 295, 296, 297, 298, 
	299, 300, 301, 302, 303, 304, 305, 306, 
	307, 308, 309, 310, 312, 313, 314, 315, 
	316, 317, 318, 319, 320, 321, 322, 323, 
	324, 16, 326, 327, 328, 329, 330, 331, 
	332, 333, 334, 335, 336, 337, 338, 339, 
	340, 341, 342, 341, 342, 343, 342, 16, 
	440, 354, 344, 354, 355, 352, 363, 384, 
	400, 414, 345, 346, 347, 348, 349, 350, 
	351, 353, 96, 356, 357, 358, 359, 360, 
	361, 362, 364, 365, 366, 367, 368, 369, 
	370, 371, 372, 373, 374, 375, 376, 377, 
	378, 379, 380, 381, 382, 383, 385, 386, 
	387, 388, 389, 390, 391, 392, 393, 394, 
	395, 396, 397, 398, 399, 401, 402, 403, 
	404, 405, 406, 407, 408, 409, 410, 411, 
	412, 413, 415, 416, 417, 418, 419, 420, 
	421, 422, 423, 424, 425, 426, 427, 428, 
	429, 430, 431, 432, 433, 434, 435, 436, 
	437, 438, 439, 441, 442, 443, 444, 445, 
	446, 447, 448, 449, 450, 451, 452, 453, 
	16, 455, 456, 457, 458, 459, 460, 461, 
	462, 463, 464, 465, 466, 467, 468, 469, 
	470, 471, 472, 473, 474, 475, 476, 477, 
	478, 479, 480, 481, 482, 483, 482, 483, 
	484, 483, 16, 570, 485, 514, 530, 544, 
	486, 487, 488, 489, 506, 490, 491, 492, 
	493, 494, 495, 496, 497, 498, 499, 500, 
	501, 502, 503, 504, 505, 96, 507, 508, 
	509, 510, 511, 512, 513, 515, 516, 517, 
	518, 519, 520, 521, 522, 523, 524, 525, 
	526, 527, 528, 529, 531, 532, 533, 534, 
	535, 536, 537, 538, 539, 540, 541, 542, 
	543, 545, 546, 547, 548, 549, 550, 551, 
	552, 553, 554, 555, 556, 557, 558, 559, 
	560, 561, 562, 563, 564, 565, 566, 567, 
	568, 569, 571, 572, 573, 574, 575, 576, 
	577, 578, 579, 580, 581, 582, 583, 16, 
	585, 0
];

var _lexer_trans_actions = [
	43, 29, 0, 54, 3, 1, 0, 29, 
	1, 35, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 57, 149, 126, 0, 
	110, 23, 0, 0, 7, 139, 48, 0, 
	102, 9, 5, 45, 134, 45, 0, 33, 
	122, 33, 33, 0, 11, 106, 0, 0, 
	114, 25, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 27, 118, 27, 51, 0, 0, 0, 
	37, 37, 54, 37, 87, 0, 0, 39, 
	0, 96, 0, 93, 90, 41, 96, 90, 
	99, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 57, 144, 
	0, 54, 84, 0, 72, 33, 84, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 15, 63, 
	31, 130, 60, 57, 31, 63, 57, 66, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 15, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 57, 144, 0, 54, 
	84, 0, 81, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 21, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 57, 144, 
	0, 54, 84, 0, 78, 33, 84, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 19, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 19, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 57, 144, 0, 54, 84, 0, 75, 
	33, 84, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 17, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	17, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 57, 144, 0, 54, 
	84, 0, 69, 33, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 13, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 13, 
	0, 0
];

var _lexer_eof_actions = [
	0, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43
];

var lexer_start = 1;
var lexer_first_final = 586;
var lexer_error = 0;

var lexer_en_main = 1;


/* line 129 "ragel/i18n/bg.js.rl" */

/* line 130 "ragel/i18n/bg.js.rl" */

/* line 131 "ragel/i18n/bg.js.rl" */

/* line 132 "ragel/i18n/bg.js.rl" */

var Lexer = function(listener) {
  // Check that listener has the required functions
  var events = ['comment', 'tag', 'feature', 'background', 'scenario', 'scenario_outline', 'examples', 'step', 'doc_string', 'row', 'eof'];
  for(var i=0, len=events.length; i<len; i++) {
    var event = events[i];
    if(typeof listener[event] != 'function') {
      throw new Error("Error. No " + event + " function exists on " + JSON.stringify(listener));
    }
  }
  this.listener = listener;
};

Lexer.prototype.scan = function(data) {
  var ending = "\n%_FEATURE_END_%";
  if(typeof data == 'string') {
    data = this.stringToBytes(data + ending);
  } else if(typeof Buffer != 'undefined' && Buffer.isBuffer(data)) {
    // Node.js
    var buf = new Buffer(data.length + ending.length);
    data.copy(buf, 0, 0);
    new Buffer(ending).copy(buf, data.length, 0);
    data = buf;
  }
  var eof = pe = data.length;
  var p = 0;

  this.line_number = 1;
  this.last_newline = 0;
  var signedCharValue=function(v){return v > 127 ? v-256 : v; };

  
/* line 1007 "js/lib/gherkin/lexer/bg.js" */
{
	  this.cs = lexer_start;
} /* JSCodeGen::writeInit */

/* line 164 "ragel/i18n/bg.js.rl" */
  
/* line 1014 "js/lib/gherkin/lexer/bg.js" */
{
	var _klen, _trans, _keys, _ps, _widec, _acts, _nacts;
	var _goto_level, _resume, _eof_trans, _again, _test_eof;
	var _out;
	_klen = _trans = _keys = _acts = _nacts = null;
	_goto_level = 0;
	_resume = 10;
	_eof_trans = 15;
	_again = 20;
	_test_eof = 30;
	_out = 40;
	while (true) {
	_trigger_goto = false;
	if (_goto_level <= 0) {
	if (p == pe) {
		_goto_level = _test_eof;
		continue;
	}
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	}
	if (_goto_level <= _resume) {
	_keys = _lexer_key_offsets[ this.cs];
	_trans = _lexer_index_offsets[ this.cs];
	_klen = _lexer_single_lengths[ this.cs];
	_break_match = false;
	
	do {
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + _klen - 1;

	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + ( (_upper - _lower) >> 1 );

	        if (( signedCharValue(data[p])) < _lexer_trans_keys[_mid]) {
	           _upper = _mid - 1;
	        } else if (( signedCharValue(data[p])) > _lexer_trans_keys[_mid]) {
	           _lower = _mid + 1;
	        } else {
	           _trans += (_mid - _keys);
	           _break_match = true;
	           break;
	        };
	     } /* while */
	     if (_break_match) { break; }
	     _keys += _klen;
	     _trans += _klen;
	  }
	  _klen = _lexer_range_lengths[ this.cs];
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + (_klen << 1) - 2;
	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + (((_upper-_lower) >> 1) & ~1);
	        if (( signedCharValue(data[p])) < _lexer_trans_keys[_mid]) {
	          _upper = _mid - 2;
	         } else if (( signedCharValue(data[p])) > _lexer_trans_keys[_mid+1]) {
	          _lower = _mid + 2;
	        } else {
	          _trans += ((_mid - _keys) >> 1);
	          _break_match = true;
	          break;
	        }
	     } /* while */
	     if (_break_match) { break; }
	     _trans += _klen
	  }
	} while (false);
	_trans = _lexer_indicies[_trans];
	 this.cs = _lexer_trans_targs[_trans];
	if (_lexer_trans_actions[_trans] != 0) {
		_acts = _lexer_trans_actions[_trans];
		_nacts = _lexer_actions[_acts];
		_acts += 1;
		while (_nacts > 0) {
			_nacts -= 1;
			_acts += 1;
			switch (_lexer_actions[_acts - 1]) {
case 0:
/* line 6 "ragel/i18n/bg.js.rl" */

    this.content_start = p;
    this.current_line = this.line_number;
    this.start_col = p - this.last_newline - (this.keyword+':').length;
  		break;
case 1:
/* line 12 "ragel/i18n/bg.js.rl" */

    this.current_line = this.line_number;
    this.start_col = p - this.last_newline;
  		break;
case 2:
/* line 17 "ragel/i18n/bg.js.rl" */

    this.content_start = p;
  		break;
case 3:
/* line 21 "ragel/i18n/bg.js.rl" */

    this.docstring_content_type_start = p;
  		break;
case 4:
/* line 25 "ragel/i18n/bg.js.rl" */

    this.docstring_content_type_end = p;
  		break;
case 5:
/* line 29 "ragel/i18n/bg.js.rl" */

    var con = this.unindent(
      this.start_col, 
      this.bytesToString(data.slice(this.content_start, this.next_keyword_start-1)).replace(/(\r?\n)?([\t ])*$/, '').replace(/\\\"\\\"\\\"/mg, '"""')
    );
    var con_type = this.bytesToString(data.slice(this.docstring_content_type_start, this.docstring_content_type_end)).trim();
    this.listener.doc_string(con_type, con, this.current_line); 
  		break;
case 6:
/* line 38 "ragel/i18n/bg.js.rl" */

    p = this.store_keyword_content('feature', data, p, eof);
  		break;
case 7:
/* line 42 "ragel/i18n/bg.js.rl" */

    p = this.store_keyword_content('background', data, p, eof);
  		break;
case 8:
/* line 46 "ragel/i18n/bg.js.rl" */

    p = this.store_keyword_content('scenario', data, p, eof);
  		break;
case 9:
/* line 50 "ragel/i18n/bg.js.rl" */

    p = this.store_keyword_content('scenario_outline', data, p, eof);
  		break;
case 10:
/* line 54 "ragel/i18n/bg.js.rl" */

    p = this.store_keyword_content('examples', data, p, eof);
  		break;
case 11:
/* line 58 "ragel/i18n/bg.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.step(this.keyword, con, this.current_line);
  		break;
case 12:
/* line 63 "ragel/i18n/bg.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.comment(con, this.line_number);
    this.keyword_start = null;
  		break;
case 13:
/* line 69 "ragel/i18n/bg.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.tag(con, this.line_number);
    this.keyword_start = null;
  		break;
case 14:
/* line 75 "ragel/i18n/bg.js.rl" */

    this.line_number++;
  		break;
case 15:
/* line 79 "ragel/i18n/bg.js.rl" */

    this.last_newline = p + 1;
  		break;
case 16:
/* line 83 "ragel/i18n/bg.js.rl" */

    this.keyword_start = this.keyword_start || p;
  		break;
case 17:
/* line 87 "ragel/i18n/bg.js.rl" */

    this.keyword = this.bytesToString(data.slice(this.keyword_start, p)).replace(/:$/, '');
    this.keyword_start = null;
  		break;
case 18:
/* line 92 "ragel/i18n/bg.js.rl" */

    this.next_keyword_start = p;
  		break;
case 19:
/* line 96 "ragel/i18n/bg.js.rl" */

    p = p - 1;
    current_row = [];
    this.current_line = this.line_number;
  		break;
case 20:
/* line 102 "ragel/i18n/bg.js.rl" */

    this.content_start = p;
  		break;
case 21:
/* line 106 "ragel/i18n/bg.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    current_row.push(con.replace(/\\\|/, "|").replace(/\\n/, "\n").replace(/\\\\/, "\\"));
  		break;
case 22:
/* line 111 "ragel/i18n/bg.js.rl" */

    this.listener.row(current_row, this.current_line);
  		break;
case 23:
/* line 115 "ragel/i18n/bg.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw new Error("Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.");
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 1241 "js/lib/gherkin/lexer/bg.js" */
			} /* action switch */
		}
	}
	if (_trigger_goto) {
		continue;
	}
	}
	if (_goto_level <= _again) {
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	p += 1;
	if (p != pe) {
		_goto_level = _resume;
		continue;
	}
	}
	if (_goto_level <= _test_eof) {
	if (p == eof) {
	__acts = _lexer_eof_actions[ this.cs];
	__nacts =  _lexer_actions[__acts];
	__acts += 1;
	while (__nacts > 0) {
		__nacts -= 1;
		__acts += 1;
		switch (_lexer_actions[__acts - 1]) {
case 23:
/* line 115 "ragel/i18n/bg.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw new Error("Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.");
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 1280 "js/lib/gherkin/lexer/bg.js" */
		} /* eof action switch */
	}
	if (_trigger_goto) {
		continue;
	}
}
	}
	if (_goto_level <= _out) {
		break;
	}
	}
	}

/* line 165 "ragel/i18n/bg.js.rl" */
};


/*
 * Decode utf-8 byte sequence to string.
 */
var decodeUtf8 = function(bytes) {
  var result = "";
  var i = 0;
  var wc;
  var c;

  while (i < bytes.length) {
    /* parse as UTF-8 lead byte */
    wc = bytes[i++];
    if (wc < 0x80) {
      count = 0;
    } else if (wc < 0xC2 || wc >= 0xF8) {
      throw new Error("input is not a valid UTF-8 lead octet");
    } else if (wc < 0xE0) {
      count = 1;
      wc = (wc & 0x1F) << 6;
    } else if (wc < 0xF0) {
      count = 2;
      wc = (wc & 0x0F) << 12;
    } else /* wc < 0xF8 */ {
      count = 3;
      wc = (wc & 0x07) << 18;
    }

    /* parse trail bytes, if any */
    while (count) {
      if (!(i < bytes.length)) {
        throw new Error("short read");
      }
      if ((c = bytes[i++] ^ 0x80) > 0x3F) {
        throw new Error("input is not a valid UTF-8 trail octet");
      }
      wc |= c << (6 * --count);
      if (wc < (1 << (5 * count + 6))) {
        throw new Error("invalid non-minimal encoded input");
      }
    }

    /* handle conversion to UTF-16 if needed */
    if (wc > 0xFFFF) {
      wc -= 0x10000;
      result += String.fromCharCode(0xD800 + (wc >> 10));
      wc = 0xDC00 + (wc & 0x3FF);
    }
    result += String.fromCharCode(wc);
  }

  return result;
};

/*
 * Encode string to an array of bytes using utf8 encoding.
 *
 * Javascript internally stores character data as utf16 (like java).
 * String.charCodeAt() does *not* produce unicode points, but simply
 * reflects this internal representation. Thus, it is necessary
 * to first decode the utf-16 representation before encoding to
 * utf-8.
 */
var encodeUtf8 = function(string) {
  var bytes = [];
  var i = 0;
  var j = 0;
  var wc;

  while (i < string.length) {
    wc = string.charCodeAt(i++);
    if (wc >= 0xD800 && wc <= 0xDBFF && i < string.length && string.charCodeAt(i) >= 0xDC00 && string.charCodeAt(i) <= 0xDFFF) {
      /* decode UTF-16 */
      wc = 0x10000 + ((wc & 0x3FF) << 10) + (string.charCodeAt(i++) & 0x3FF);
    }

    /* emit lead byte */
    if (wc < 0x80) {
      bytes[j++] = wc;
      count = 0;
    } else if (wc < 0x800) {
      bytes[j++] = 0xC0 | (wc >> 6);
      count = 1;
    } else if (wc < 0x10000) {
      bytes[j++] = 0xE0 | (wc >> 12);
      count = 2;
    } else {
      /* SMP: 21-bit Unicode */
      bytes[j++] = 0xF0 | (wc >> 18);
      count = 3;
    }

    /* emit trail bytes, if any */
    while (count) {
      bytes[j++] = 0x80 | ((wc >> (6 * --count)) & 0x3F);
    }
  }

  return bytes;

};

Lexer.prototype.bytesToString = function(bytes) {
  if(typeof bytes.write == 'function') {
    // Node.js
    return bytes.toString('utf-8');
  }
  return decodeUtf8(bytes);
};

Lexer.prototype.stringToBytes = function(string) {
  return encodeUtf8(string);
};

Lexer.prototype.unindent = function(startcol, text) {
  startcol = startcol || 0;
  return text.replace(new RegExp('^[\t ]{0,' + startcol + '}', 'gm'), ''); 
};

Lexer.prototype.store_keyword_content = function(event, data, p, eof) {
  var end_point = (!this.next_keyword_start || (p == eof)) ? p : this.next_keyword_start;
  var content = this.unindent(this.start_col + 2, this.bytesToString(data.slice(this.content_start, end_point))).replace(/\s+$/,"");
  var content_lines = content.split("\n")
  var name = content_lines.shift() || "";
  name = name.trim();
  var description = content_lines.join("\n");
  this.listener[event](this.keyword, name, description, this.current_line);
  var nks = this.next_keyword_start;
  this.next_keyword_start = null;
  return nks ? nks - 1 : p;
};

Lexer.prototype.current_line_content = function(data, p) {
  var rest = Array.prototype.slice.call(data,this.last_newline, -1);
  var end = rest.indexOf(10) || -1;
  return this.bytesToString(rest.slice(0, end)).trim();
};

// Node.js export
if(typeof module !== 'undefined') {
  module.exports = Lexer;
}
// Require.js export
if (typeof define !== 'undefined') {
  if(define.amd) {
    define('gherkin/lexer/bg', [], function() {
      return Lexer;
    });
  } else {
    define('gherkin/lexer/bg', function(require, exports, module) {
      exports.Lexer = Lexer;
    });
  }
}

})();

}).call(this,require("buffer").Buffer)

},{"buffer":69}],187:[function(require,module,exports){
(function (Buffer){

/* line 1 "ragel/i18n/bm.js.rl" */
;(function() {


/* line 126 "ragel/i18n/bm.js.rl" */



/* line 11 "js/lib/gherkin/lexer/bm.js" */
var _lexer_actions = [
	0, 1, 0, 1, 1, 1, 2, 1, 
	3, 1, 4, 1, 5, 1, 6, 1, 
	7, 1, 8, 1, 9, 1, 10, 1, 
	11, 1, 12, 1, 13, 1, 16, 1, 
	17, 1, 18, 1, 19, 1, 20, 1, 
	21, 1, 22, 1, 23, 2, 2, 18, 
	2, 3, 4, 2, 13, 0, 2, 14, 
	15, 2, 17, 0, 2, 17, 1, 2, 
	17, 16, 2, 17, 19, 2, 18, 6, 
	2, 18, 7, 2, 18, 8, 2, 18, 
	9, 2, 18, 10, 2, 18, 16, 2, 
	20, 21, 2, 22, 0, 2, 22, 1, 
	2, 22, 16, 2, 22, 19, 3, 4, 
	14, 15, 3, 5, 14, 15, 3, 11, 
	14, 15, 3, 12, 14, 15, 3, 13, 
	14, 15, 3, 14, 15, 18, 3, 17, 
	0, 11, 3, 17, 14, 15, 4, 2, 
	14, 15, 18, 4, 3, 4, 14, 15, 
	4, 17, 0, 14, 15, 5, 17, 0, 
	11, 14, 15
];

var _lexer_key_offsets = [
	0, 0, 21, 41, 42, 43, 45, 47, 
	52, 57, 62, 67, 71, 75, 77, 78, 
	79, 80, 81, 82, 83, 84, 85, 86, 
	87, 88, 89, 90, 91, 92, 93, 95, 
	97, 102, 109, 114, 115, 116, 117, 118, 
	119, 120, 121, 122, 123, 124, 125, 126, 
	127, 128, 129, 130, 131, 138, 140, 142, 
	144, 146, 148, 150, 170, 172, 173, 174, 
	175, 176, 177, 178, 179, 180, 181, 182, 
	183, 184, 198, 200, 202, 204, 206, 208, 
	210, 212, 214, 216, 218, 220, 222, 224, 
	226, 228, 230, 232, 234, 236, 238, 240, 
	242, 244, 246, 248, 250, 252, 254, 256, 
	258, 260, 262, 264, 266, 268, 270, 272, 
	274, 276, 278, 280, 282, 284, 286, 288, 
	290, 292, 294, 296, 298, 300, 302, 304, 
	306, 308, 310, 312, 314, 316, 318, 320, 
	322, 324, 327, 329, 331, 333, 335, 337, 
	339, 341, 343, 345, 347, 349, 352, 353, 
	355, 356, 357, 358, 359, 360, 361, 362, 
	379, 381, 383, 385, 387, 389, 391, 393, 
	395, 397, 399, 401, 403, 405, 407, 409, 
	411, 413, 415, 417, 419, 421, 423, 425, 
	427, 430, 432, 434, 436, 438, 440, 442, 
	444, 446, 448, 450, 452, 455, 457, 459, 
	461, 463, 465, 467, 469, 471, 473, 475, 
	477, 479, 481, 483, 485, 487, 489, 491, 
	493, 495, 497, 500, 502, 504, 506, 508, 
	510, 512, 514, 516, 518, 520, 522, 524, 
	526, 528, 530, 532, 534, 536, 538, 541, 
	543, 545, 547, 550, 552, 555, 557, 559, 
	561, 563, 565, 567, 570, 572, 574, 576, 
	577, 578, 579, 580, 581, 582, 583, 584, 
	585, 586, 587, 588, 589, 590, 591, 592, 
	593, 594, 595, 596, 612, 614, 616, 618, 
	620, 622, 624, 626, 628, 630, 632, 634, 
	636, 638, 640, 642, 644, 646, 648, 650, 
	652, 654, 656, 658, 660, 663, 665, 667, 
	669, 671, 673, 675, 677, 679, 681, 683, 
	685, 688, 690, 692, 694, 696, 698, 700, 
	702, 704, 707, 709, 711, 713, 715, 717, 
	719, 721, 723, 725, 727, 729, 731, 733, 
	735, 737, 739, 741, 743, 745, 748, 750, 
	752, 754, 757, 759, 762, 764, 766, 768, 
	770, 772, 774, 777, 779, 781, 783, 785, 
	786, 787, 788, 789, 790, 791, 792, 793, 
	794, 795, 796, 797, 798, 799, 800, 801, 
	802, 803, 804, 805, 806, 807, 823, 825, 
	827, 829, 831, 833, 835, 837, 839, 841, 
	843, 845, 847, 849, 851, 853, 855, 857, 
	859, 861, 863, 865, 867, 869, 871, 874, 
	876, 878, 880, 882, 884, 886, 888, 890, 
	892, 894, 896, 899, 901, 903, 905, 907, 
	909, 911, 913, 915, 917, 919, 922, 924, 
	926, 928, 930, 932, 934, 936, 938, 941, 
	943, 945, 947, 949, 950, 951, 952, 953, 
	954, 955, 956, 957, 958, 960, 961, 963, 
	964, 965, 966, 967, 968, 969, 971, 972, 
	973, 974, 975, 976, 977, 979, 980, 981, 
	982, 983, 984, 988, 994, 997, 999, 1005, 
	1025, 1026, 1027
];

var _lexer_trans_keys = [
	10, 32, 34, 35, 37, 42, 64, 65, 
	66, 67, 68, 70, 75, 76, 77, 83, 
	84, 124, 239, 9, 13, 10, 32, 34, 
	35, 37, 42, 64, 65, 66, 67, 68, 
	70, 75, 76, 77, 83, 84, 124, 9, 
	13, 34, 34, 10, 13, 10, 13, 10, 
	32, 34, 9, 13, 10, 32, 34, 9, 
	13, 10, 32, 34, 9, 13, 10, 32, 
	34, 9, 13, 10, 32, 9, 13, 10, 
	32, 9, 13, 10, 13, 10, 95, 70, 
	69, 65, 84, 85, 82, 69, 95, 69, 
	78, 68, 95, 37, 32, 10, 13, 10, 
	13, 13, 32, 64, 9, 10, 9, 10, 
	13, 32, 64, 11, 12, 10, 32, 64, 
	9, 13, 112, 97, 98, 105, 108, 97, 
	97, 103, 105, 111, 110, 116, 111, 104, 
	58, 10, 10, 10, 32, 35, 70, 124, 
	9, 13, 10, 117, 10, 110, 10, 103, 
	10, 115, 10, 105, 10, 58, 10, 32, 
	34, 35, 37, 42, 64, 65, 66, 67, 
	68, 70, 75, 76, 77, 83, 84, 124, 
	9, 13, 97, 105, 110, 98, 101, 114, 
	117, 110, 103, 115, 105, 58, 10, 10, 
	10, 32, 35, 37, 64, 67, 70, 75, 
	76, 77, 83, 84, 9, 13, 10, 95, 
	10, 70, 10, 69, 10, 65, 10, 84, 
	10, 85, 10, 82, 10, 69, 10, 95, 
	10, 69, 10, 78, 10, 68, 10, 95, 
	10, 37, 10, 111, 10, 110, 10, 116, 
	10, 111, 10, 104, 10, 58, 10, 117, 
	10, 110, 10, 103, 10, 115, 10, 105, 
	10, 101, 10, 97, 10, 100, 10, 97, 
	10, 97, 10, 110, 10, 97, 10, 116, 
	10, 97, 10, 114, 10, 32, 10, 66, 
	10, 101, 10, 108, 10, 97, 10, 107, 
	10, 97, 10, 110, 10, 103, 10, 101, 
	10, 110, 10, 103, 10, 103, 10, 97, 
	10, 114, 10, 105, 10, 115, 10, 107, 
	10, 97, 10, 110, 10, 32, 10, 83, 
	10, 101, 10, 110, 10, 97, 10, 114, 
	10, 105, 10, 111, 10, 101, 105, 10, 
	116, 10, 117, 10, 97, 10, 101, 10, 
	109, 10, 112, 10, 108, 10, 97, 10, 
	116, 10, 101, 10, 32, 10, 75, 83, 
	101, 97, 109, 100, 97, 97, 110, 58, 
	10, 10, 10, 32, 35, 37, 42, 64, 
	65, 66, 68, 70, 75, 76, 77, 83, 
	84, 9, 13, 10, 95, 10, 70, 10, 
	69, 10, 65, 10, 84, 10, 85, 10, 
	82, 10, 69, 10, 95, 10, 69, 10, 
	78, 10, 68, 10, 95, 10, 37, 10, 
	32, 10, 112, 10, 97, 10, 98, 10, 
	105, 10, 108, 10, 97, 10, 97, 10, 
	103, 10, 105, 10, 97, 105, 10, 110, 
	10, 98, 10, 101, 10, 114, 10, 117, 
	10, 110, 10, 103, 10, 115, 10, 105, 
	10, 58, 10, 101, 10, 97, 109, 10, 
	100, 10, 97, 10, 97, 10, 110, 10, 
	117, 10, 100, 10, 105, 10, 97, 10, 
	97, 10, 116, 10, 97, 10, 114, 10, 
	32, 10, 66, 10, 101, 10, 108, 10, 
	97, 10, 107, 10, 97, 10, 110, 10, 
	103, 10, 97, 101, 10, 107, 10, 110, 
	10, 103, 10, 103, 10, 97, 10, 114, 
	10, 105, 10, 115, 10, 107, 10, 97, 
	10, 110, 10, 32, 10, 83, 10, 101, 
	10, 110, 10, 97, 10, 114, 10, 105, 
	10, 111, 10, 101, 105, 10, 116, 10, 
	117, 10, 97, 10, 97, 101, 10, 112, 
	10, 109, 116, 10, 112, 10, 108, 10, 
	97, 10, 116, 10, 101, 10, 32, 10, 
	75, 83, 10, 101, 10, 97, 10, 97, 
	117, 100, 105, 97, 97, 116, 97, 114, 
	32, 66, 101, 108, 97, 107, 97, 110, 
	103, 58, 10, 10, 10, 32, 35, 37, 
	42, 64, 65, 66, 68, 70, 75, 77, 
	83, 84, 9, 13, 10, 95, 10, 70, 
	10, 69, 10, 65, 10, 84, 10, 85, 
	10, 82, 10, 69, 10, 95, 10, 69, 
	10, 78, 10, 68, 10, 95, 10, 37, 
	10, 32, 10, 112, 10, 97, 10, 98, 
	10, 105, 10, 108, 10, 97, 10, 97, 
	10, 103, 10, 105, 10, 97, 105, 10, 
	110, 10, 98, 10, 101, 10, 114, 10, 
	117, 10, 110, 10, 103, 10, 115, 10, 
	105, 10, 58, 10, 101, 10, 97, 109, 
	10, 100, 10, 97, 10, 97, 10, 110, 
	10, 117, 10, 100, 10, 105, 10, 97, 
	10, 97, 101, 10, 107, 10, 110, 10, 
	103, 10, 103, 10, 97, 10, 114, 10, 
	105, 10, 115, 10, 107, 10, 97, 10, 
	110, 10, 32, 10, 83, 10, 101, 10, 
	110, 10, 97, 10, 114, 10, 105, 10, 
	111, 10, 101, 105, 10, 116, 10, 117, 
	10, 97, 10, 97, 101, 10, 112, 10, 
	109, 116, 10, 112, 10, 108, 10, 97, 
	10, 116, 10, 101, 10, 32, 10, 75, 
	83, 10, 101, 10, 97, 10, 97, 97, 
	101, 107, 110, 103, 103, 97, 114, 105, 
	115, 107, 97, 110, 32, 83, 101, 110, 
	97, 114, 105, 111, 58, 10, 10, 10, 
	32, 35, 37, 42, 64, 65, 66, 68, 
	70, 75, 77, 83, 84, 9, 13, 10, 
	95, 10, 70, 10, 69, 10, 65, 10, 
	84, 10, 85, 10, 82, 10, 69, 10, 
	95, 10, 69, 10, 78, 10, 68, 10, 
	95, 10, 37, 10, 32, 10, 112, 10, 
	97, 10, 98, 10, 105, 10, 108, 10, 
	97, 10, 97, 10, 103, 10, 105, 10, 
	97, 105, 10, 110, 10, 98, 10, 101, 
	10, 114, 10, 117, 10, 110, 10, 103, 
	10, 115, 10, 105, 10, 58, 10, 101, 
	10, 97, 109, 10, 100, 10, 97, 10, 
	97, 10, 110, 10, 117, 10, 100, 10, 
	105, 10, 97, 10, 97, 10, 107, 10, 
	101, 105, 10, 110, 10, 97, 10, 114, 
	10, 105, 10, 111, 10, 116, 10, 117, 
	10, 97, 10, 97, 101, 10, 112, 10, 
	116, 10, 97, 101, 105, 110, 97, 114, 
	105, 111, 116, 117, 97, 105, 97, 101, 
	112, 109, 116, 112, 108, 97, 116, 101, 
	32, 75, 83, 101, 97, 100, 97, 97, 
	110, 101, 105, 116, 117, 97, 105, 97, 
	32, 124, 9, 13, 10, 32, 92, 124, 
	9, 13, 10, 92, 124, 10, 92, 10, 
	32, 92, 124, 9, 13, 10, 32, 34, 
	35, 37, 42, 64, 65, 66, 67, 68, 
	70, 75, 76, 77, 83, 84, 124, 9, 
	13, 187, 191, 0
];

var _lexer_single_lengths = [
	0, 19, 18, 1, 1, 2, 2, 3, 
	3, 3, 3, 2, 2, 2, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 2, 2, 
	3, 5, 3, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 5, 2, 2, 2, 
	2, 2, 2, 18, 2, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 12, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 3, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 3, 1, 2, 
	1, 1, 1, 1, 1, 1, 1, 15, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	3, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 3, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 3, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 3, 2, 
	2, 2, 3, 2, 3, 2, 2, 2, 
	2, 2, 2, 3, 2, 2, 2, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 14, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 3, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	3, 2, 2, 2, 2, 2, 2, 2, 
	2, 3, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 3, 2, 2, 
	2, 3, 2, 3, 2, 2, 2, 2, 
	2, 2, 3, 2, 2, 2, 2, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 14, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 3, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 3, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 3, 2, 2, 
	2, 2, 2, 2, 2, 2, 3, 2, 
	2, 2, 2, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 2, 1, 2, 1, 
	1, 1, 1, 1, 1, 2, 1, 1, 
	1, 1, 1, 1, 2, 1, 1, 1, 
	1, 1, 2, 4, 3, 2, 4, 18, 
	1, 1, 0
];

var _lexer_range_lengths = [
	0, 1, 1, 0, 0, 0, 0, 1, 
	1, 1, 1, 1, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 1, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 0, 0, 0, 
	0, 0, 0, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 1, 0, 0, 1, 1, 
	0, 0, 0
];

var _lexer_index_offsets = [
	0, 0, 21, 41, 43, 45, 48, 51, 
	56, 61, 66, 71, 75, 79, 82, 84, 
	86, 88, 90, 92, 94, 96, 98, 100, 
	102, 104, 106, 108, 110, 112, 114, 117, 
	120, 125, 132, 137, 139, 141, 143, 145, 
	147, 149, 151, 153, 155, 157, 159, 161, 
	163, 165, 167, 169, 171, 178, 181, 184, 
	187, 190, 193, 196, 216, 219, 221, 223, 
	225, 227, 229, 231, 233, 235, 237, 239, 
	241, 243, 257, 260, 263, 266, 269, 272, 
	275, 278, 281, 284, 287, 290, 293, 296, 
	299, 302, 305, 308, 311, 314, 317, 320, 
	323, 326, 329, 332, 335, 338, 341, 344, 
	347, 350, 353, 356, 359, 362, 365, 368, 
	371, 374, 377, 380, 383, 386, 389, 392, 
	395, 398, 401, 404, 407, 410, 413, 416, 
	419, 422, 425, 428, 431, 434, 437, 440, 
	443, 446, 450, 453, 456, 459, 462, 465, 
	468, 471, 474, 477, 480, 483, 487, 489, 
	492, 494, 496, 498, 500, 502, 504, 506, 
	523, 526, 529, 532, 535, 538, 541, 544, 
	547, 550, 553, 556, 559, 562, 565, 568, 
	571, 574, 577, 580, 583, 586, 589, 592, 
	595, 599, 602, 605, 608, 611, 614, 617, 
	620, 623, 626, 629, 632, 636, 639, 642, 
	645, 648, 651, 654, 657, 660, 663, 666, 
	669, 672, 675, 678, 681, 684, 687, 690, 
	693, 696, 699, 703, 706, 709, 712, 715, 
	718, 721, 724, 727, 730, 733, 736, 739, 
	742, 745, 748, 751, 754, 757, 760, 764, 
	767, 770, 773, 777, 780, 784, 787, 790, 
	793, 796, 799, 802, 806, 809, 812, 815, 
	817, 819, 821, 823, 825, 827, 829, 831, 
	833, 835, 837, 839, 841, 843, 845, 847, 
	849, 851, 853, 855, 871, 874, 877, 880, 
	883, 886, 889, 892, 895, 898, 901, 904, 
	907, 910, 913, 916, 919, 922, 925, 928, 
	931, 934, 937, 940, 943, 947, 950, 953, 
	956, 959, 962, 965, 968, 971, 974, 977, 
	980, 984, 987, 990, 993, 996, 999, 1002, 
	1005, 1008, 1012, 1015, 1018, 1021, 1024, 1027, 
	1030, 1033, 1036, 1039, 1042, 1045, 1048, 1051, 
	1054, 1057, 1060, 1063, 1066, 1069, 1073, 1076, 
	1079, 1082, 1086, 1089, 1093, 1096, 1099, 1102, 
	1105, 1108, 1111, 1115, 1118, 1121, 1124, 1127, 
	1129, 1131, 1133, 1135, 1137, 1139, 1141, 1143, 
	1145, 1147, 1149, 1151, 1153, 1155, 1157, 1159, 
	1161, 1163, 1165, 1167, 1169, 1171, 1187, 1190, 
	1193, 1196, 1199, 1202, 1205, 1208, 1211, 1214, 
	1217, 1220, 1223, 1226, 1229, 1232, 1235, 1238, 
	1241, 1244, 1247, 1250, 1253, 1256, 1259, 1263, 
	1266, 1269, 1272, 1275, 1278, 1281, 1284, 1287, 
	1290, 1293, 1296, 1300, 1303, 1306, 1309, 1312, 
	1315, 1318, 1321, 1324, 1327, 1330, 1334, 1337, 
	1340, 1343, 1346, 1349, 1352, 1355, 1358, 1362, 
	1365, 1368, 1371, 1374, 1376, 1378, 1380, 1382, 
	1384, 1386, 1388, 1390, 1392, 1395, 1397, 1400, 
	1402, 1404, 1406, 1408, 1410, 1412, 1415, 1417, 
	1419, 1421, 1423, 1425, 1427, 1430, 1432, 1434, 
	1436, 1438, 1440, 1444, 1450, 1454, 1457, 1463, 
	1483, 1485, 1487
];

var _lexer_indicies = [
	2, 1, 3, 4, 5, 6, 7, 8, 
	9, 10, 11, 12, 13, 14, 15, 16, 
	17, 18, 19, 1, 0, 2, 1, 3, 
	4, 5, 6, 7, 8, 9, 10, 11, 
	12, 13, 14, 15, 16, 17, 18, 1, 
	0, 20, 0, 21, 0, 23, 24, 22, 
	26, 27, 25, 30, 29, 31, 29, 28, 
	34, 33, 35, 33, 32, 34, 33, 36, 
	33, 32, 34, 33, 37, 33, 32, 39, 
	38, 38, 0, 2, 40, 40, 0, 42, 
	43, 41, 2, 0, 44, 0, 45, 0, 
	46, 0, 47, 0, 48, 0, 49, 0, 
	50, 0, 51, 0, 52, 0, 53, 0, 
	54, 0, 55, 0, 56, 0, 57, 0, 
	58, 0, 60, 61, 59, 63, 64, 62, 
	0, 0, 0, 0, 65, 66, 67, 66, 
	66, 69, 68, 65, 2, 70, 7, 70, 
	0, 71, 0, 72, 0, 73, 0, 74, 
	0, 75, 0, 76, 0, 77, 0, 78, 
	0, 76, 0, 79, 0, 80, 0, 81, 
	0, 82, 0, 83, 0, 84, 0, 86, 
	85, 88, 87, 88, 89, 90, 91, 90, 
	89, 87, 88, 92, 87, 88, 93, 87, 
	88, 94, 87, 88, 95, 87, 88, 96, 
	87, 88, 97, 87, 99, 98, 100, 101, 
	102, 103, 104, 105, 106, 107, 108, 109, 
	110, 111, 112, 113, 114, 115, 98, 0, 
	116, 117, 0, 76, 0, 118, 0, 119, 
	0, 78, 0, 120, 0, 121, 0, 122, 
	0, 123, 0, 124, 0, 125, 0, 127, 
	126, 129, 128, 129, 130, 131, 132, 131, 
	133, 134, 135, 136, 137, 138, 139, 130, 
	128, 129, 140, 128, 129, 141, 128, 129, 
	142, 128, 129, 143, 128, 129, 144, 128, 
	129, 145, 128, 129, 146, 128, 129, 147, 
	128, 129, 148, 128, 129, 149, 128, 129, 
	150, 128, 129, 151, 128, 129, 152, 128, 
	129, 153, 128, 129, 154, 128, 129, 155, 
	128, 129, 156, 128, 129, 157, 128, 129, 
	158, 128, 129, 159, 128, 129, 160, 128, 
	129, 161, 128, 129, 162, 128, 129, 163, 
	128, 129, 158, 128, 129, 164, 128, 129, 
	165, 128, 129, 166, 128, 129, 167, 128, 
	129, 168, 128, 129, 158, 128, 129, 169, 
	128, 129, 170, 128, 129, 171, 128, 129, 
	172, 128, 129, 173, 128, 129, 174, 128, 
	129, 175, 128, 129, 176, 128, 129, 177, 
	128, 129, 178, 128, 129, 179, 128, 129, 
	180, 128, 129, 158, 128, 129, 181, 128, 
	129, 182, 128, 129, 183, 128, 129, 184, 
	128, 129, 185, 128, 129, 186, 128, 129, 
	187, 128, 129, 188, 128, 129, 189, 128, 
	129, 190, 128, 129, 191, 128, 129, 192, 
	128, 129, 193, 128, 129, 194, 128, 129, 
	195, 128, 129, 196, 128, 129, 197, 128, 
	129, 198, 128, 129, 158, 128, 129, 194, 
	199, 128, 129, 200, 128, 129, 201, 128, 
	129, 163, 128, 129, 202, 128, 129, 203, 
	128, 129, 204, 128, 129, 205, 128, 129, 
	206, 128, 129, 207, 128, 129, 208, 128, 
	129, 209, 128, 129, 210, 211, 128, 212, 
	0, 213, 214, 0, 215, 0, 216, 0, 
	217, 0, 218, 0, 219, 0, 221, 220, 
	223, 222, 223, 224, 225, 226, 227, 225, 
	228, 229, 230, 231, 232, 233, 234, 235, 
	236, 224, 222, 223, 237, 222, 223, 238, 
	222, 223, 239, 222, 223, 240, 222, 223, 
	241, 222, 223, 242, 222, 223, 243, 222, 
	223, 244, 222, 223, 245, 222, 223, 246, 
	222, 223, 247, 222, 223, 248, 222, 223, 
	249, 222, 223, 250, 222, 223, 251, 222, 
	223, 252, 222, 223, 253, 222, 223, 254, 
	222, 223, 255, 222, 223, 256, 222, 223, 
	257, 222, 223, 258, 222, 223, 259, 222, 
	223, 257, 222, 223, 260, 261, 222, 223, 
	257, 222, 223, 262, 222, 223, 263, 222, 
	223, 259, 222, 223, 264, 222, 223, 265, 
	222, 223, 266, 222, 223, 267, 222, 223, 
	268, 222, 223, 251, 222, 223, 269, 222, 
	223, 270, 271, 222, 223, 272, 222, 223, 
	273, 222, 223, 274, 222, 223, 268, 222, 
	223, 275, 222, 223, 276, 222, 223, 277, 
	222, 223, 260, 222, 223, 278, 222, 223, 
	279, 222, 223, 280, 222, 223, 281, 222, 
	223, 282, 222, 223, 283, 222, 223, 284, 
	222, 223, 285, 222, 223, 286, 222, 223, 
	287, 222, 223, 288, 222, 223, 289, 222, 
	223, 268, 222, 223, 290, 291, 222, 223, 
	256, 222, 223, 292, 222, 223, 293, 222, 
	223, 294, 222, 223, 295, 222, 223, 296, 
	222, 223, 297, 222, 223, 298, 222, 223, 
	299, 222, 223, 300, 222, 223, 301, 222, 
	223, 302, 222, 223, 303, 222, 223, 304, 
	222, 223, 305, 222, 223, 306, 222, 223, 
	307, 222, 223, 308, 222, 223, 268, 222, 
	223, 304, 309, 222, 223, 310, 222, 223, 
	311, 222, 223, 267, 222, 223, 312, 313, 
	222, 223, 259, 222, 223, 314, 315, 222, 
	223, 316, 222, 223, 317, 222, 223, 318, 
	222, 223, 319, 222, 223, 320, 222, 223, 
	321, 222, 223, 322, 323, 222, 223, 324, 
	222, 223, 270, 222, 223, 312, 222, 325, 
	0, 326, 0, 327, 0, 116, 0, 328, 
	0, 329, 0, 330, 0, 331, 0, 332, 
	0, 333, 0, 334, 0, 335, 0, 336, 
	0, 337, 0, 338, 0, 339, 0, 340, 
	0, 341, 0, 343, 342, 345, 344, 345, 
	346, 347, 348, 349, 347, 350, 351, 352, 
	353, 354, 355, 356, 357, 346, 344, 345, 
	358, 344, 345, 359, 344, 345, 360, 344, 
	345, 361, 344, 345, 362, 344, 345, 363, 
	344, 345, 364, 344, 345, 365, 344, 345, 
	366, 344, 345, 367, 344, 345, 368, 344, 
	345, 369, 344, 345, 370, 344, 345, 371, 
	344, 345, 372, 344, 345, 373, 344, 345, 
	374, 344, 345, 375, 344, 345, 376, 344, 
	345, 377, 344, 345, 378, 344, 345, 379, 
	344, 345, 380, 344, 345, 378, 344, 345, 
	381, 382, 344, 345, 378, 344, 345, 383, 
	344, 345, 384, 344, 345, 380, 344, 345, 
	385, 344, 345, 386, 344, 345, 387, 344, 
	345, 388, 344, 345, 389, 344, 345, 372, 
	344, 345, 390, 344, 345, 391, 392, 344, 
	345, 393, 344, 345, 394, 344, 345, 395, 
	344, 345, 389, 344, 345, 396, 344, 345, 
	397, 344, 345, 398, 344, 345, 381, 344, 
	345, 399, 400, 344, 345, 377, 344, 345, 
	401, 344, 345, 402, 344, 345, 403, 344, 
	345, 404, 344, 345, 405, 344, 345, 406, 
	344, 345, 407, 344, 345, 408, 344, 345, 
	409, 344, 345, 410, 344, 345, 411, 344, 
	345, 412, 344, 345, 413, 344, 345, 414, 
	344, 345, 415, 344, 345, 416, 344, 345, 
	417, 344, 345, 389, 344, 345, 413, 418, 
	344, 345, 419, 344, 345, 420, 344, 345, 
	388, 344, 345, 421, 422, 344, 345, 380, 
	344, 345, 423, 424, 344, 345, 425, 344, 
	345, 426, 344, 345, 427, 344, 345, 428, 
	344, 345, 429, 344, 345, 430, 344, 345, 
	431, 432, 344, 345, 433, 344, 345, 391, 
	344, 345, 421, 344, 434, 435, 0, 75, 
	0, 436, 0, 437, 0, 438, 0, 439, 
	0, 440, 0, 441, 0, 442, 0, 443, 
	0, 444, 0, 445, 0, 446, 0, 447, 
	0, 448, 0, 449, 0, 450, 0, 451, 
	0, 452, 0, 453, 0, 454, 0, 456, 
	455, 458, 457, 458, 459, 460, 461, 462, 
	460, 463, 464, 465, 466, 467, 468, 469, 
	470, 459, 457, 458, 471, 457, 458, 472, 
	457, 458, 473, 457, 458, 474, 457, 458, 
	475, 457, 458, 476, 457, 458, 477, 457, 
	458, 478, 457, 458, 479, 457, 458, 480, 
	457, 458, 481, 457, 458, 482, 457, 458, 
	483, 457, 458, 484, 457, 458, 485, 457, 
	458, 486, 457, 458, 487, 457, 458, 488, 
	457, 458, 489, 457, 458, 490, 457, 458, 
	491, 457, 458, 492, 457, 458, 493, 457, 
	458, 491, 457, 458, 494, 495, 457, 458, 
	491, 457, 458, 496, 457, 458, 497, 457, 
	458, 493, 457, 458, 498, 457, 458, 499, 
	457, 458, 500, 457, 458, 501, 457, 458, 
	502, 457, 458, 485, 457, 458, 503, 457, 
	458, 504, 505, 457, 458, 506, 457, 458, 
	507, 457, 458, 508, 457, 458, 502, 457, 
	458, 509, 457, 458, 510, 457, 458, 511, 
	457, 458, 494, 457, 458, 512, 457, 458, 
	490, 457, 458, 513, 514, 457, 458, 515, 
	457, 458, 516, 457, 458, 517, 457, 458, 
	518, 457, 458, 502, 457, 458, 519, 457, 
	458, 520, 457, 458, 501, 457, 458, 521, 
	522, 457, 458, 493, 457, 458, 523, 457, 
	458, 521, 457, 524, 525, 0, 526, 0, 
	527, 0, 528, 0, 529, 0, 218, 0, 
	530, 0, 531, 0, 532, 0, 218, 0, 
	533, 534, 0, 78, 0, 535, 536, 0, 
	537, 0, 538, 0, 539, 0, 540, 0, 
	541, 0, 542, 0, 543, 544, 0, 545, 
	0, 546, 0, 547, 0, 548, 0, 549, 
	0, 453, 0, 448, 550, 0, 551, 0, 
	552, 0, 553, 0, 453, 0, 533, 0, 
	554, 555, 554, 0, 558, 557, 559, 560, 
	557, 556, 0, 562, 563, 561, 0, 562, 
	561, 558, 564, 562, 563, 564, 561, 558, 
	565, 566, 567, 568, 569, 570, 571, 572, 
	573, 574, 575, 576, 577, 578, 579, 580, 
	581, 565, 0, 582, 0, 1, 0, 583, 
	0
];

var _lexer_trans_targs = [
	0, 2, 2, 3, 13, 15, 29, 32, 
	35, 41, 44, 60, 65, 150, 259, 358, 
	442, 452, 474, 480, 4, 5, 6, 7, 
	6, 6, 7, 6, 8, 8, 8, 9, 
	8, 8, 8, 9, 10, 11, 12, 2, 
	12, 13, 2, 14, 16, 17, 18, 19, 
	20, 21, 22, 23, 24, 25, 26, 27, 
	28, 482, 30, 31, 2, 14, 31, 2, 
	14, 33, 34, 2, 33, 32, 34, 36, 
	37, 38, 39, 40, 29, 42, 43, 45, 
	46, 47, 48, 49, 50, 51, 52, 51, 
	52, 52, 2, 53, 54, 55, 56, 57, 
	58, 59, 2, 2, 3, 13, 15, 29, 
	32, 35, 41, 44, 60, 65, 150, 259, 
	358, 442, 452, 474, 61, 62, 63, 64, 
	66, 67, 68, 69, 70, 71, 72, 73, 
	72, 73, 73, 2, 74, 88, 94, 99, 
	105, 118, 137, 141, 75, 76, 77, 78, 
	79, 80, 81, 82, 83, 84, 85, 86, 
	87, 2, 89, 90, 91, 92, 93, 59, 
	95, 96, 97, 98, 100, 101, 102, 103, 
	104, 106, 107, 108, 109, 110, 111, 112, 
	113, 114, 115, 116, 117, 119, 120, 121, 
	122, 123, 124, 125, 126, 127, 128, 129, 
	130, 131, 132, 133, 134, 135, 136, 138, 
	139, 140, 142, 143, 144, 145, 146, 147, 
	148, 149, 99, 137, 151, 152, 255, 153, 
	154, 155, 156, 157, 158, 159, 158, 159, 
	159, 2, 160, 174, 175, 181, 184, 189, 
	195, 205, 218, 238, 242, 161, 162, 163, 
	164, 165, 166, 167, 168, 169, 170, 171, 
	172, 173, 2, 59, 176, 177, 178, 179, 
	180, 174, 182, 183, 185, 186, 187, 188, 
	190, 191, 192, 193, 194, 196, 197, 201, 
	198, 199, 200, 202, 203, 204, 206, 207, 
	208, 209, 210, 211, 212, 213, 214, 215, 
	216, 217, 219, 220, 221, 222, 223, 224, 
	225, 226, 227, 228, 229, 230, 231, 232, 
	233, 234, 235, 236, 237, 239, 240, 241, 
	243, 244, 245, 254, 246, 247, 248, 249, 
	250, 251, 252, 238, 253, 256, 257, 258, 
	260, 261, 262, 263, 264, 265, 266, 267, 
	268, 269, 270, 271, 272, 273, 274, 275, 
	274, 275, 275, 2, 276, 290, 291, 297, 
	300, 305, 311, 321, 341, 345, 277, 278, 
	279, 280, 281, 282, 283, 284, 285, 286, 
	287, 288, 289, 2, 59, 292, 293, 294, 
	295, 296, 290, 298, 299, 301, 302, 303, 
	304, 306, 307, 308, 309, 310, 312, 313, 
	317, 314, 315, 316, 318, 319, 320, 322, 
	323, 324, 325, 326, 327, 328, 329, 330, 
	331, 332, 333, 334, 335, 336, 337, 338, 
	339, 340, 342, 343, 344, 346, 347, 348, 
	357, 349, 350, 351, 352, 353, 354, 355, 
	341, 356, 359, 360, 361, 362, 363, 364, 
	365, 366, 367, 368, 369, 370, 371, 372, 
	373, 374, 375, 376, 377, 378, 379, 380, 
	381, 380, 381, 381, 2, 382, 396, 397, 
	403, 406, 411, 417, 427, 429, 438, 383, 
	384, 385, 386, 387, 388, 389, 390, 391, 
	392, 393, 394, 395, 2, 59, 398, 399, 
	400, 401, 402, 396, 404, 405, 407, 408, 
	409, 410, 412, 413, 414, 415, 416, 418, 
	419, 423, 420, 421, 422, 424, 425, 426, 
	428, 430, 435, 431, 432, 433, 434, 436, 
	437, 439, 440, 441, 443, 448, 444, 445, 
	446, 447, 449, 450, 451, 453, 454, 455, 
	473, 456, 457, 458, 459, 460, 461, 462, 
	468, 463, 464, 465, 466, 467, 469, 470, 
	471, 472, 474, 475, 476, 478, 479, 477, 
	475, 476, 477, 475, 478, 479, 3, 13, 
	15, 29, 32, 35, 41, 44, 60, 65, 
	150, 259, 358, 442, 452, 474, 481, 0
];

var _lexer_trans_actions = [
	43, 0, 54, 3, 1, 0, 29, 1, 
	29, 29, 29, 29, 29, 29, 29, 29, 
	29, 29, 35, 0, 0, 0, 7, 139, 
	48, 0, 102, 9, 5, 45, 134, 45, 
	0, 33, 122, 33, 33, 0, 11, 106, 
	0, 0, 114, 25, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 57, 149, 126, 0, 110, 
	23, 0, 27, 118, 27, 51, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 57, 144, 0, 
	54, 0, 81, 84, 0, 0, 0, 0, 
	0, 21, 31, 130, 60, 57, 31, 63, 
	57, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 66, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 57, 144, 
	0, 54, 0, 69, 33, 84, 84, 84, 
	84, 84, 84, 84, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 13, 0, 0, 0, 0, 0, 13, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 57, 144, 0, 54, 
	0, 75, 33, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 17, 17, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 57, 144, 
	0, 54, 0, 72, 33, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 15, 15, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 57, 
	144, 0, 54, 0, 78, 33, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 19, 19, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 37, 37, 54, 37, 
	87, 0, 0, 39, 0, 0, 93, 90, 
	41, 96, 90, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 99, 0, 0
];

var _lexer_eof_actions = [
	0, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43
];

var lexer_start = 1;
var lexer_first_final = 482;
var lexer_error = 0;

var lexer_en_main = 1;


/* line 129 "ragel/i18n/bm.js.rl" */

/* line 130 "ragel/i18n/bm.js.rl" */

/* line 131 "ragel/i18n/bm.js.rl" */

/* line 132 "ragel/i18n/bm.js.rl" */

var Lexer = function(listener) {
  // Check that listener has the required functions
  var events = ['comment', 'tag', 'feature', 'background', 'scenario', 'scenario_outline', 'examples', 'step', 'doc_string', 'row', 'eof'];
  for(var i=0, len=events.length; i<len; i++) {
    var event = events[i];
    if(typeof listener[event] != 'function') {
      throw new Error("Error. No " + event + " function exists on " + JSON.stringify(listener));
    }
  }
  this.listener = listener;
};

Lexer.prototype.scan = function(data) {
  var ending = "\n%_FEATURE_END_%";
  if(typeof data == 'string') {
    data = this.stringToBytes(data + ending);
  } else if(typeof Buffer != 'undefined' && Buffer.isBuffer(data)) {
    // Node.js
    var buf = new Buffer(data.length + ending.length);
    data.copy(buf, 0, 0);
    new Buffer(ending).copy(buf, data.length, 0);
    data = buf;
  }
  var eof = pe = data.length;
  var p = 0;

  this.line_number = 1;
  this.last_newline = 0;
  var signedCharValue=function(v){return v > 127 ? v-256 : v; };

  
/* line 875 "js/lib/gherkin/lexer/bm.js" */
{
	  this.cs = lexer_start;
} /* JSCodeGen::writeInit */

/* line 164 "ragel/i18n/bm.js.rl" */
  
/* line 882 "js/lib/gherkin/lexer/bm.js" */
{
	var _klen, _trans, _keys, _ps, _widec, _acts, _nacts;
	var _goto_level, _resume, _eof_trans, _again, _test_eof;
	var _out;
	_klen = _trans = _keys = _acts = _nacts = null;
	_goto_level = 0;
	_resume = 10;
	_eof_trans = 15;
	_again = 20;
	_test_eof = 30;
	_out = 40;
	while (true) {
	_trigger_goto = false;
	if (_goto_level <= 0) {
	if (p == pe) {
		_goto_level = _test_eof;
		continue;
	}
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	}
	if (_goto_level <= _resume) {
	_keys = _lexer_key_offsets[ this.cs];
	_trans = _lexer_index_offsets[ this.cs];
	_klen = _lexer_single_lengths[ this.cs];
	_break_match = false;
	
	do {
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + _klen - 1;

	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + ( (_upper - _lower) >> 1 );

	        if (( signedCharValue(data[p])) < _lexer_trans_keys[_mid]) {
	           _upper = _mid - 1;
	        } else if (( signedCharValue(data[p])) > _lexer_trans_keys[_mid]) {
	           _lower = _mid + 1;
	        } else {
	           _trans += (_mid - _keys);
	           _break_match = true;
	           break;
	        };
	     } /* while */
	     if (_break_match) { break; }
	     _keys += _klen;
	     _trans += _klen;
	  }
	  _klen = _lexer_range_lengths[ this.cs];
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + (_klen << 1) - 2;
	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + (((_upper-_lower) >> 1) & ~1);
	        if (( signedCharValue(data[p])) < _lexer_trans_keys[_mid]) {
	          _upper = _mid - 2;
	         } else if (( signedCharValue(data[p])) > _lexer_trans_keys[_mid+1]) {
	          _lower = _mid + 2;
	        } else {
	          _trans += ((_mid - _keys) >> 1);
	          _break_match = true;
	          break;
	        }
	     } /* while */
	     if (_break_match) { break; }
	     _trans += _klen
	  }
	} while (false);
	_trans = _lexer_indicies[_trans];
	 this.cs = _lexer_trans_targs[_trans];
	if (_lexer_trans_actions[_trans] != 0) {
		_acts = _lexer_trans_actions[_trans];
		_nacts = _lexer_actions[_acts];
		_acts += 1;
		while (_nacts > 0) {
			_nacts -= 1;
			_acts += 1;
			switch (_lexer_actions[_acts - 1]) {
case 0:
/* line 6 "ragel/i18n/bm.js.rl" */

    this.content_start = p;
    this.current_line = this.line_number;
    this.start_col = p - this.last_newline - (this.keyword+':').length;
  		break;
case 1:
/* line 12 "ragel/i18n/bm.js.rl" */

    this.current_line = this.line_number;
    this.start_col = p - this.last_newline;
  		break;
case 2:
/* line 17 "ragel/i18n/bm.js.rl" */

    this.content_start = p;
  		break;
case 3:
/* line 21 "ragel/i18n/bm.js.rl" */

    this.docstring_content_type_start = p;
  		break;
case 4:
/* line 25 "ragel/i18n/bm.js.rl" */

    this.docstring_content_type_end = p;
  		break;
case 5:
/* line 29 "ragel/i18n/bm.js.rl" */

    var con = this.unindent(
      this.start_col, 
      this.bytesToString(data.slice(this.content_start, this.next_keyword_start-1)).replace(/(\r?\n)?([\t ])*$/, '').replace(/\\\"\\\"\\\"/mg, '"""')
    );
    var con_type = this.bytesToString(data.slice(this.docstring_content_type_start, this.docstring_content_type_end)).trim();
    this.listener.doc_string(con_type, con, this.current_line); 
  		break;
case 6:
/* line 38 "ragel/i18n/bm.js.rl" */

    p = this.store_keyword_content('feature', data, p, eof);
  		break;
case 7:
/* line 42 "ragel/i18n/bm.js.rl" */

    p = this.store_keyword_content('background', data, p, eof);
  		break;
case 8:
/* line 46 "ragel/i18n/bm.js.rl" */

    p = this.store_keyword_content('scenario', data, p, eof);
  		break;
case 9:
/* line 50 "ragel/i18n/bm.js.rl" */

    p = this.store_keyword_content('scenario_outline', data, p, eof);
  		break;
case 10:
/* line 54 "ragel/i18n/bm.js.rl" */

    p = this.store_keyword_content('examples', data, p, eof);
  		break;
case 11:
/* line 58 "ragel/i18n/bm.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.step(this.keyword, con, this.current_line);
  		break;
case 12:
/* line 63 "ragel/i18n/bm.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.comment(con, this.line_number);
    this.keyword_start = null;
  		break;
case 13:
/* line 69 "ragel/i18n/bm.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.tag(con, this.line_number);
    this.keyword_start = null;
  		break;
case 14:
/* line 75 "ragel/i18n/bm.js.rl" */

    this.line_number++;
  		break;
case 15:
/* line 79 "ragel/i18n/bm.js.rl" */

    this.last_newline = p + 1;
  		break;
case 16:
/* line 83 "ragel/i18n/bm.js.rl" */

    this.keyword_start = this.keyword_start || p;
  		break;
case 17:
/* line 87 "ragel/i18n/bm.js.rl" */

    this.keyword = this.bytesToString(data.slice(this.keyword_start, p)).replace(/:$/, '');
    this.keyword_start = null;
  		break;
case 18:
/* line 92 "ragel/i18n/bm.js.rl" */

    this.next_keyword_start = p;
  		break;
case 19:
/* line 96 "ragel/i18n/bm.js.rl" */

    p = p - 1;
    current_row = [];
    this.current_line = this.line_number;
  		break;
case 20:
/* line 102 "ragel/i18n/bm.js.rl" */

    this.content_start = p;
  		break;
case 21:
/* line 106 "ragel/i18n/bm.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    current_row.push(con.replace(/\\\|/, "|").replace(/\\n/, "\n").replace(/\\\\/, "\\"));
  		break;
case 22:
/* line 111 "ragel/i18n/bm.js.rl" */

    this.listener.row(current_row, this.current_line);
  		break;
case 23:
/* line 115 "ragel/i18n/bm.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw new Error("Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.");
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 1109 "js/lib/gherkin/lexer/bm.js" */
			} /* action switch */
		}
	}
	if (_trigger_goto) {
		continue;
	}
	}
	if (_goto_level <= _again) {
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	p += 1;
	if (p != pe) {
		_goto_level = _resume;
		continue;
	}
	}
	if (_goto_level <= _test_eof) {
	if (p == eof) {
	__acts = _lexer_eof_actions[ this.cs];
	__nacts =  _lexer_actions[__acts];
	__acts += 1;
	while (__nacts > 0) {
		__nacts -= 1;
		__acts += 1;
		switch (_lexer_actions[__acts - 1]) {
case 23:
/* line 115 "ragel/i18n/bm.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw new Error("Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.");
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 1148 "js/lib/gherkin/lexer/bm.js" */
		} /* eof action switch */
	}
	if (_trigger_goto) {
		continue;
	}
}
	}
	if (_goto_level <= _out) {
		break;
	}
	}
	}

/* line 165 "ragel/i18n/bm.js.rl" */
};


/*
 * Decode utf-8 byte sequence to string.
 */
var decodeUtf8 = function(bytes) {
  var result = "";
  var i = 0;
  var wc;
  var c;

  while (i < bytes.length) {
    /* parse as UTF-8 lead byte */
    wc = bytes[i++];
    if (wc < 0x80) {
      count = 0;
    } else if (wc < 0xC2 || wc >= 0xF8) {
      throw new Error("input is not a valid UTF-8 lead octet");
    } else if (wc < 0xE0) {
      count = 1;
      wc = (wc & 0x1F) << 6;
    } else if (wc < 0xF0) {
      count = 2;
      wc = (wc & 0x0F) << 12;
    } else /* wc < 0xF8 */ {
      count = 3;
      wc = (wc & 0x07) << 18;
    }

    /* parse trail bytes, if any */
    while (count) {
      if (!(i < bytes.length)) {
        throw new Error("short read");
      }
      if ((c = bytes[i++] ^ 0x80) > 0x3F) {
        throw new Error("input is not a valid UTF-8 trail octet");
      }
      wc |= c << (6 * --count);
      if (wc < (1 << (5 * count + 6))) {
        throw new Error("invalid non-minimal encoded input");
      }
    }

    /* handle conversion to UTF-16 if needed */
    if (wc > 0xFFFF) {
      wc -= 0x10000;
      result += String.fromCharCode(0xD800 + (wc >> 10));
      wc = 0xDC00 + (wc & 0x3FF);
    }
    result += String.fromCharCode(wc);
  }

  return result;
};

/*
 * Encode string to an array of bytes using utf8 encoding.
 *
 * Javascript internally stores character data as utf16 (like java).
 * String.charCodeAt() does *not* produce unicode points, but simply
 * reflects this internal representation. Thus, it is necessary
 * to first decode the utf-16 representation before encoding to
 * utf-8.
 */
var encodeUtf8 = function(string) {
  var bytes = [];
  var i = 0;
  var j = 0;
  var wc;

  while (i < string.length) {
    wc = string.charCodeAt(i++);
    if (wc >= 0xD800 && wc <= 0xDBFF && i < string.length && string.charCodeAt(i) >= 0xDC00 && string.charCodeAt(i) <= 0xDFFF) {
      /* decode UTF-16 */
      wc = 0x10000 + ((wc & 0x3FF) << 10) + (string.charCodeAt(i++) & 0x3FF);
    }

    /* emit lead byte */
    if (wc < 0x80) {
      bytes[j++] = wc;
      count = 0;
    } else if (wc < 0x800) {
      bytes[j++] = 0xC0 | (wc >> 6);
      count = 1;
    } else if (wc < 0x10000) {
      bytes[j++] = 0xE0 | (wc >> 12);
      count = 2;
    } else {
      /* SMP: 21-bit Unicode */
      bytes[j++] = 0xF0 | (wc >> 18);
      count = 3;
    }

    /* emit trail bytes, if any */
    while (count) {
      bytes[j++] = 0x80 | ((wc >> (6 * --count)) & 0x3F);
    }
  }

  return bytes;

};

Lexer.prototype.bytesToString = function(bytes) {
  if(typeof bytes.write == 'function') {
    // Node.js
    return bytes.toString('utf-8');
  }
  return decodeUtf8(bytes);
};

Lexer.prototype.stringToBytes = function(string) {
  return encodeUtf8(string);
};

Lexer.prototype.unindent = function(startcol, text) {
  startcol = startcol || 0;
  return text.replace(new RegExp('^[\t ]{0,' + startcol + '}', 'gm'), ''); 
};

Lexer.prototype.store_keyword_content = function(event, data, p, eof) {
  var end_point = (!this.next_keyword_start || (p == eof)) ? p : this.next_keyword_start;
  var content = this.unindent(this.start_col + 2, this.bytesToString(data.slice(this.content_start, end_point))).replace(/\s+$/,"");
  var content_lines = content.split("\n")
  var name = content_lines.shift() || "";
  name = name.trim();
  var description = content_lines.join("\n");
  this.listener[event](this.keyword, name, description, this.current_line);
  var nks = this.next_keyword_start;
  this.next_keyword_start = null;
  return nks ? nks - 1 : p;
};

Lexer.prototype.current_line_content = function(data, p) {
  var rest = Array.prototype.slice.call(data,this.last_newline, -1);
  var end = rest.indexOf(10) || -1;
  return this.bytesToString(rest.slice(0, end)).trim();
};

// Node.js export
if(typeof module !== 'undefined') {
  module.exports = Lexer;
}
// Require.js export
if (typeof define !== 'undefined') {
  if(define.amd) {
    define('gherkin/lexer/bm', [], function() {
      return Lexer;
    });
  } else {
    define('gherkin/lexer/bm', function(require, exports, module) {
      exports.Lexer = Lexer;
    });
  }
}

})();

}).call(this,require("buffer").Buffer)

},{"buffer":69}],188:[function(require,module,exports){
(function (Buffer){

/* line 1 "ragel/i18n/ca.js.rl" */
;(function() {


/* line 126 "ragel/i18n/ca.js.rl" */



/* line 11 "js/lib/gherkin/lexer/ca.js" */
var _lexer_actions = [
	0, 1, 0, 1, 1, 1, 2, 1, 
	3, 1, 4, 1, 5, 1, 6, 1, 
	7, 1, 8, 1, 9, 1, 10, 1, 
	11, 1, 12, 1, 13, 1, 16, 1, 
	17, 1, 18, 1, 19, 1, 20, 1, 
	21, 1, 22, 1, 23, 2, 2, 18, 
	2, 3, 4, 2, 13, 0, 2, 14, 
	15, 2, 17, 0, 2, 17, 1, 2, 
	17, 16, 2, 17, 19, 2, 18, 6, 
	2, 18, 7, 2, 18, 8, 2, 18, 
	9, 2, 18, 10, 2, 18, 16, 2, 
	20, 21, 2, 22, 0, 2, 22, 1, 
	2, 22, 16, 2, 22, 19, 3, 4, 
	14, 15, 3, 5, 14, 15, 3, 11, 
	14, 15, 3, 12, 14, 15, 3, 13, 
	14, 15, 3, 14, 15, 18, 3, 17, 
	0, 11, 3, 17, 14, 15, 4, 2, 
	14, 15, 18, 4, 3, 4, 14, 15, 
	4, 17, 0, 14, 15, 5, 17, 0, 
	11, 14, 15
];

var _lexer_key_offsets = [
	0, 0, 20, 39, 40, 41, 43, 45, 
	50, 55, 60, 65, 69, 73, 75, 76, 
	77, 78, 79, 80, 81, 82, 83, 84, 
	85, 86, 87, 88, 89, 90, 91, 93, 
	95, 100, 107, 112, 115, 116, 117, 118, 
	119, 120, 121, 122, 123, 124, 125, 126, 
	127, 128, 129, 130, 131, 132, 133, 134, 
	150, 152, 154, 156, 158, 160, 162, 164, 
	166, 168, 170, 172, 174, 176, 178, 180, 
	199, 200, 202, 203, 204, 205, 206, 207, 
	208, 209, 210, 211, 212, 213, 214, 215, 
	216, 217, 229, 231, 233, 235, 237, 239, 
	241, 243, 245, 247, 249, 251, 253, 255, 
	257, 259, 261, 263, 265, 267, 269, 271, 
	273, 275, 277, 279, 281, 283, 285, 287, 
	289, 291, 293, 295, 297, 299, 301, 303, 
	305, 307, 310, 313, 315, 317, 319, 321, 
	323, 325, 327, 329, 331, 333, 335, 337, 
	339, 341, 343, 345, 347, 349, 351, 353, 
	355, 357, 359, 361, 363, 365, 367, 369, 
	371, 373, 375, 377, 379, 381, 383, 385, 
	387, 389, 391, 393, 395, 396, 397, 398, 
	400, 401, 403, 405, 406, 407, 408, 409, 
	410, 411, 412, 413, 430, 432, 434, 436, 
	438, 440, 442, 444, 446, 448, 450, 452, 
	454, 456, 458, 460, 464, 466, 468, 470, 
	472, 474, 476, 478, 480, 482, 484, 486, 
	488, 490, 492, 494, 496, 498, 501, 503, 
	505, 507, 509, 512, 514, 516, 518, 520, 
	522, 524, 526, 528, 530, 532, 534, 536, 
	538, 540, 542, 545, 547, 550, 552, 554, 
	556, 558, 560, 562, 564, 566, 568, 570, 
	572, 574, 576, 578, 580, 582, 584, 586, 
	588, 590, 592, 594, 596, 598, 600, 602, 
	604, 606, 608, 610, 612, 614, 616, 618, 
	620, 622, 624, 626, 628, 630, 632, 634, 
	636, 637, 638, 639, 640, 641, 642, 643, 
	644, 645, 646, 647, 648, 649, 650, 651, 
	652, 653, 654, 655, 656, 657, 673, 675, 
	677, 679, 681, 683, 685, 687, 689, 691, 
	693, 695, 697, 699, 701, 703, 706, 708, 
	710, 712, 714, 716, 718, 720, 723, 725, 
	727, 729, 731, 734, 736, 738, 740, 742, 
	744, 746, 748, 750, 752, 754, 756, 758, 
	760, 762, 764, 766, 769, 771, 773, 775, 
	777, 779, 781, 783, 785, 787, 789, 791, 
	793, 795, 797, 799, 801, 803, 805, 807, 
	809, 811, 813, 815, 817, 819, 821, 822, 
	823, 824, 825, 826, 827, 828, 829, 830, 
	838, 840, 842, 844, 846, 848, 850, 852, 
	854, 856, 858, 860, 862, 864, 866, 868, 
	870, 872, 874, 876, 878, 880, 882, 884, 
	886, 888, 890, 892, 893, 894, 895, 896, 
	897, 898, 899, 900, 901, 902, 903, 904, 
	905, 906, 907, 908, 909, 910, 911, 912, 
	913, 914, 915, 916, 917, 921, 927, 930, 
	932, 938, 957, 960, 962, 964, 966, 968, 
	970, 972, 974, 977, 979, 981, 983, 985, 
	988, 990, 992, 994, 996, 998, 1000, 1002, 
	1004, 1006, 1008, 1010, 1012, 1014, 1016, 1018, 
	1020, 1023, 1025, 1028, 1030, 1032, 1034, 1036, 
	1038, 1040, 1042, 1044, 1046, 1048, 1050, 1052, 
	1054, 1056, 1058, 1060, 1062, 1064, 1066, 1068, 
	1070, 1072, 1074, 1076, 1078, 1080, 1082, 1084, 
	1086, 1088, 1090, 1092, 1094, 1096, 1098, 1100, 
	1102, 1104, 1105, 1106, 1107, 1108
];

var _lexer_trans_keys = [
	10, 32, 34, 35, 37, 42, 64, 65, 
	67, 68, 69, 70, 73, 80, 81, 82, 
	124, 239, 9, 13, 10, 32, 34, 35, 
	37, 42, 64, 65, 67, 68, 69, 70, 
	73, 80, 81, 82, 124, 9, 13, 34, 
	34, 10, 13, 10, 13, 10, 32, 34, 
	9, 13, 10, 32, 34, 9, 13, 10, 
	32, 34, 9, 13, 10, 32, 34, 9, 
	13, 10, 32, 9, 13, 10, 32, 9, 
	13, 10, 13, 10, 95, 70, 69, 65, 
	84, 85, 82, 69, 95, 69, 78, 68, 
	95, 37, 32, 10, 13, 10, 13, 13, 
	32, 64, 9, 10, 9, 10, 13, 32, 
	64, 11, 12, 10, 32, 64, 9, 13, 
	108, 110, 116, 101, 115, 104, 111, 114, 
	101, 115, 116, 101, 99, 101, 100, 101, 
	110, 116, 115, 58, 10, 10, 10, 32, 
	35, 37, 42, 64, 65, 67, 68, 69, 
	70, 73, 80, 81, 9, 13, 10, 95, 
	10, 70, 10, 69, 10, 65, 10, 84, 
	10, 85, 10, 82, 10, 69, 10, 95, 
	10, 69, 10, 78, 10, 68, 10, 95, 
	10, 37, 10, 32, 10, 32, 34, 35, 
	37, 42, 64, 65, 67, 68, 69, 70, 
	73, 80, 81, 82, 124, 9, 13, 97, 
	108, 114, 97, 99, 116, 101, 114, -61, 
	-83, 115, 116, 105, 99, 97, 58, 10, 
	10, 10, 32, 35, 37, 64, 65, 67, 
	69, 70, 82, 9, 13, 10, 95, 10, 
	70, 10, 69, 10, 65, 10, 84, 10, 
	85, 10, 82, 10, 69, 10, 95, 10, 
	69, 10, 78, 10, 68, 10, 95, 10, 
	37, 10, 110, 10, 116, 10, 101, 10, 
	99, 10, 101, 10, 100, 10, 101, 10, 
	110, 10, 116, 10, 115, 10, 58, 10, 
	97, 10, 114, 10, 97, 10, 99, 10, 
	116, 10, 101, 10, 114, -61, 10, -83, 
	10, 10, 115, 10, 116, 10, 105, 10, 
	99, 10, 97, 10, 115, 120, 10, 99, 
	113, 10, 101, 10, 110, 10, 97, 10, 
	114, 10, 105, 10, 117, 10, 101, 10, 
	109, 10, 97, 10, 32, 10, 100, 10, 
	101, 10, 32, 10, 108, 10, 39, 10, 
	101, 10, 115, 10, 99, 10, 101, 10, 
	109, 10, 112, 10, 108, 10, 101, 10, 
	117, 10, 110, 10, 99, 10, 105, 10, 
	111, 10, 110, 10, 97, 10, 108, 10, 
	105, 10, 116, 10, 97, 10, 116, 10, 
	101, 10, 114, 10, 101, 10, 102, 10, 
	111, 10, 110, 111, 110, 97, 100, 116, 
	97, 115, 120, 99, 113, 101, 110, 97, 
	114, 105, 58, 10, 10, 10, 32, 35, 
	37, 42, 64, 65, 67, 68, 69, 70, 
	73, 80, 81, 82, 9, 13, 10, 95, 
	10, 70, 10, 69, 10, 65, 10, 84, 
	10, 85, 10, 82, 10, 69, 10, 95, 
	10, 69, 10, 78, 10, 68, 10, 95, 
	10, 37, 10, 32, 10, 108, 110, 116, 
	10, 101, 10, 115, 10, 104, 10, 111, 
	10, 114, 10, 101, 10, 115, 10, 116, 
	10, 101, 10, 99, 10, 101, 10, 100, 
	10, 101, 10, 110, 10, 116, 10, 115, 
	10, 58, -61, 10, 101, -88, 10, 10, 
	115, 10, 97, 10, 97, 10, 108, 114, 
	10, 97, 10, 99, 10, 116, 10, 101, 
	10, 114, -61, 10, -83, 10, 10, 115, 
	10, 116, 10, 105, 10, 99, 10, 97, 
	10, 111, 10, 110, 10, 97, 10, 100, 
	116, 10, 115, 10, 99, 113, 10, 101, 
	10, 110, 10, 97, 10, 114, 10, 105, 
	10, 117, 10, 101, 10, 109, 10, 97, 
	10, 32, 10, 100, 10, 101, 10, 32, 
	10, 108, 10, 39, 10, 101, 10, 115, 
	10, 99, 10, 117, 10, 110, 10, 99, 
	10, 105, 10, 111, 10, 110, 10, 97, 
	10, 108, 10, 105, 10, 116, 10, 97, 
	10, 116, 10, 101, 10, 114, -61, 10, 
	-78, 10, 10, 117, 10, 97, 10, 110, 
	10, 101, 10, 114, 10, 101, 10, 102, 
	10, 111, 10, 110, 117, 101, 109, 97, 
	32, 100, 101, 32, 108, 39, 101, 115, 
	99, 101, 110, 97, 114, 105, 58, 10, 
	10, 10, 32, 35, 37, 42, 64, 65, 
	67, 68, 69, 70, 73, 80, 81, 9, 
	13, 10, 95, 10, 70, 10, 69, 10, 
	65, 10, 84, 10, 85, 10, 82, 10, 
	69, 10, 95, 10, 69, 10, 78, 10, 
	68, 10, 95, 10, 37, 10, 32, 10, 
	108, 116, 10, 101, 10, 115, 10, 104, 
	10, 111, 10, 114, 10, 101, 10, 115, 
	-61, 10, 101, -88, 10, 10, 115, 10, 
	97, 10, 97, 10, 108, 114, 10, 97, 
	10, 99, 10, 116, 10, 101, 10, 114, 
	-61, 10, -83, 10, 10, 115, 10, 116, 
	10, 105, 10, 99, 10, 97, 10, 58, 
	10, 111, 10, 110, 10, 97, 10, 100, 
	116, 10, 115, 10, 99, 10, 101, 10, 
	110, 10, 97, 10, 114, 10, 105, 10, 
	117, 10, 110, 10, 99, 10, 105, 10, 
	111, 10, 110, 10, 97, 10, 108, 10, 
	105, 10, 116, 10, 97, 10, 116, 10, 
	101, 10, 114, -61, 10, -78, 10, 10, 
	117, 10, 97, 10, 110, 101, 109, 112, 
	108, 101, 115, 58, 10, 10, 10, 32, 
	35, 67, 70, 124, 9, 13, 10, 97, 
	10, 114, 10, 97, 10, 99, 10, 116, 
	10, 101, 10, 114, -61, 10, -83, 10, 
	10, 115, 10, 116, 10, 105, 10, 99, 
	10, 97, 10, 58, 10, 117, 10, 110, 
	10, 99, 10, 105, 10, 111, 10, 110, 
	10, 97, 10, 108, 10, 105, 10, 116, 
	10, 97, 10, 116, 117, 110, 99, 105, 
	111, 110, 97, 108, 105, 116, 97, 116, 
	101, 114, -61, -78, 117, 97, 110, 101, 
	114, 101, 102, 111, 110, 32, 124, 9, 
	13, 10, 32, 92, 124, 9, 13, 10, 
	92, 124, 10, 92, 10, 32, 92, 124, 
	9, 13, 10, 32, 34, 35, 37, 42, 
	64, 65, 67, 68, 69, 70, 73, 80, 
	81, 82, 124, 9, 13, 10, 108, 116, 
	10, 101, 10, 115, 10, 104, 10, 111, 
	10, 114, 10, 101, 10, 115, -61, 10, 
	101, -88, 10, 10, 115, 10, 97, 10, 
	97, 10, 108, 114, 10, 97, 10, 99, 
	10, 116, 10, 101, 10, 114, -61, 10, 
	-83, 10, 10, 115, 10, 116, 10, 105, 
	10, 99, 10, 97, 10, 58, 10, 111, 
	10, 110, 10, 97, 10, 100, 116, 10, 
	115, 10, 99, 113, 10, 101, 10, 110, 
	10, 97, 10, 114, 10, 105, 10, 117, 
	10, 101, 10, 109, 10, 97, 10, 32, 
	10, 100, 10, 101, 10, 32, 10, 108, 
	10, 39, 10, 101, 10, 115, 10, 99, 
	10, 117, 10, 110, 10, 99, 10, 105, 
	10, 111, 10, 110, 10, 97, 10, 108, 
	10, 105, 10, 116, 10, 97, 10, 116, 
	10, 101, 10, 114, -61, 10, -78, 10, 
	10, 117, 10, 97, 10, 110, -61, 101, 
	-88, 115, 187, 191, 0
];

var _lexer_single_lengths = [
	0, 18, 17, 1, 1, 2, 2, 3, 
	3, 3, 3, 2, 2, 2, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 2, 2, 
	3, 5, 3, 3, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 14, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 17, 
	1, 2, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 10, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 3, 3, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 1, 1, 1, 2, 
	1, 2, 2, 1, 1, 1, 1, 1, 
	1, 1, 1, 15, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 4, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 3, 2, 2, 
	2, 2, 3, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 3, 2, 3, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 14, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 3, 2, 2, 
	2, 2, 2, 2, 2, 3, 2, 2, 
	2, 2, 3, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 3, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 6, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 2, 4, 3, 2, 
	4, 17, 3, 2, 2, 2, 2, 2, 
	2, 2, 3, 2, 2, 2, 2, 3, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	3, 2, 3, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 1, 1, 1, 1, 0
];

var _lexer_range_lengths = [
	0, 1, 1, 0, 0, 0, 0, 1, 
	1, 1, 1, 1, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 1, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 1, 0, 0, 
	1, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0
];

var _lexer_index_offsets = [
	0, 0, 20, 39, 41, 43, 46, 49, 
	54, 59, 64, 69, 73, 77, 80, 82, 
	84, 86, 88, 90, 92, 94, 96, 98, 
	100, 102, 104, 106, 108, 110, 112, 115, 
	118, 123, 130, 135, 139, 141, 143, 145, 
	147, 149, 151, 153, 155, 157, 159, 161, 
	163, 165, 167, 169, 171, 173, 175, 177, 
	193, 196, 199, 202, 205, 208, 211, 214, 
	217, 220, 223, 226, 229, 232, 235, 238, 
	257, 259, 262, 264, 266, 268, 270, 272, 
	274, 276, 278, 280, 282, 284, 286, 288, 
	290, 292, 304, 307, 310, 313, 316, 319, 
	322, 325, 328, 331, 334, 337, 340, 343, 
	346, 349, 352, 355, 358, 361, 364, 367, 
	370, 373, 376, 379, 382, 385, 388, 391, 
	394, 397, 400, 403, 406, 409, 412, 415, 
	418, 421, 425, 429, 432, 435, 438, 441, 
	444, 447, 450, 453, 456, 459, 462, 465, 
	468, 471, 474, 477, 480, 483, 486, 489, 
	492, 495, 498, 501, 504, 507, 510, 513, 
	516, 519, 522, 525, 528, 531, 534, 537, 
	540, 543, 546, 549, 552, 554, 556, 558, 
	561, 563, 566, 569, 571, 573, 575, 577, 
	579, 581, 583, 585, 602, 605, 608, 611, 
	614, 617, 620, 623, 626, 629, 632, 635, 
	638, 641, 644, 647, 652, 655, 658, 661, 
	664, 667, 670, 673, 676, 679, 682, 685, 
	688, 691, 694, 697, 700, 703, 707, 710, 
	713, 716, 719, 723, 726, 729, 732, 735, 
	738, 741, 744, 747, 750, 753, 756, 759, 
	762, 765, 768, 772, 775, 779, 782, 785, 
	788, 791, 794, 797, 800, 803, 806, 809, 
	812, 815, 818, 821, 824, 827, 830, 833, 
	836, 839, 842, 845, 848, 851, 854, 857, 
	860, 863, 866, 869, 872, 875, 878, 881, 
	884, 887, 890, 893, 896, 899, 902, 905, 
	908, 910, 912, 914, 916, 918, 920, 922, 
	924, 926, 928, 930, 932, 934, 936, 938, 
	940, 942, 944, 946, 948, 950, 966, 969, 
	972, 975, 978, 981, 984, 987, 990, 993, 
	996, 999, 1002, 1005, 1008, 1011, 1015, 1018, 
	1021, 1024, 1027, 1030, 1033, 1036, 1040, 1043, 
	1046, 1049, 1052, 1056, 1059, 1062, 1065, 1068, 
	1071, 1074, 1077, 1080, 1083, 1086, 1089, 1092, 
	1095, 1098, 1101, 1104, 1108, 1111, 1114, 1117, 
	1120, 1123, 1126, 1129, 1132, 1135, 1138, 1141, 
	1144, 1147, 1150, 1153, 1156, 1159, 1162, 1165, 
	1168, 1171, 1174, 1177, 1180, 1183, 1186, 1188, 
	1190, 1192, 1194, 1196, 1198, 1200, 1202, 1204, 
	1212, 1215, 1218, 1221, 1224, 1227, 1230, 1233, 
	1236, 1239, 1242, 1245, 1248, 1251, 1254, 1257, 
	1260, 1263, 1266, 1269, 1272, 1275, 1278, 1281, 
	1284, 1287, 1290, 1293, 1295, 1297, 1299, 1301, 
	1303, 1305, 1307, 1309, 1311, 1313, 1315, 1317, 
	1319, 1321, 1323, 1325, 1327, 1329, 1331, 1333, 
	1335, 1337, 1339, 1341, 1343, 1347, 1353, 1357, 
	1360, 1366, 1385, 1389, 1392, 1395, 1398, 1401, 
	1404, 1407, 1410, 1414, 1417, 1420, 1423, 1426, 
	1430, 1433, 1436, 1439, 1442, 1445, 1448, 1451, 
	1454, 1457, 1460, 1463, 1466, 1469, 1472, 1475, 
	1478, 1482, 1485, 1489, 1492, 1495, 1498, 1501, 
	1504, 1507, 1510, 1513, 1516, 1519, 1522, 1525, 
	1528, 1531, 1534, 1537, 1540, 1543, 1546, 1549, 
	1552, 1555, 1558, 1561, 1564, 1567, 1570, 1573, 
	1576, 1579, 1582, 1585, 1588, 1591, 1594, 1597, 
	1600, 1603, 1605, 1607, 1609, 1611
];

var _lexer_indicies = [
	2, 1, 3, 4, 5, 6, 7, 8, 
	9, 10, 11, 12, 6, 13, 14, 15, 
	16, 17, 1, 0, 2, 1, 3, 4, 
	5, 6, 7, 8, 9, 10, 11, 12, 
	6, 13, 14, 15, 16, 1, 0, 18, 
	0, 19, 0, 21, 22, 20, 24, 25, 
	23, 28, 27, 29, 27, 26, 32, 31, 
	33, 31, 30, 32, 31, 34, 31, 30, 
	32, 31, 35, 31, 30, 37, 36, 36, 
	0, 2, 38, 38, 0, 40, 41, 39, 
	2, 0, 42, 0, 43, 0, 44, 0, 
	45, 0, 46, 0, 47, 0, 48, 0, 
	49, 0, 50, 0, 51, 0, 52, 0, 
	53, 0, 54, 0, 55, 0, 56, 0, 
	58, 59, 57, 61, 62, 60, 0, 0, 
	0, 0, 63, 64, 65, 64, 64, 67, 
	66, 63, 2, 68, 7, 68, 0, 69, 
	70, 71, 0, 72, 0, 73, 0, 74, 
	0, 75, 0, 76, 0, 77, 0, 78, 
	0, 79, 0, 80, 0, 81, 0, 82, 
	0, 83, 0, 84, 0, 85, 0, 86, 
	0, 87, 0, 88, 0, 90, 89, 92, 
	91, 92, 93, 94, 95, 96, 94, 97, 
	98, 99, 100, 101, 96, 102, 103, 93, 
	91, 92, 104, 91, 92, 105, 91, 92, 
	106, 91, 92, 107, 91, 92, 108, 91, 
	92, 109, 91, 92, 110, 91, 92, 111, 
	91, 92, 112, 91, 92, 113, 91, 92, 
	114, 91, 92, 115, 91, 92, 116, 91, 
	92, 117, 91, 92, 118, 91, 120, 119, 
	121, 122, 123, 124, 125, 126, 127, 128, 
	129, 130, 124, 131, 132, 133, 134, 119, 
	0, 135, 0, 78, 136, 0, 137, 0, 
	138, 0, 139, 0, 140, 0, 141, 0, 
	142, 0, 143, 0, 144, 0, 145, 0, 
	146, 0, 147, 0, 148, 0, 149, 0, 
	151, 150, 153, 152, 153, 154, 155, 156, 
	155, 157, 158, 159, 160, 161, 154, 152, 
	153, 162, 152, 153, 163, 152, 153, 164, 
	152, 153, 165, 152, 153, 166, 152, 153, 
	167, 152, 153, 168, 152, 153, 169, 152, 
	153, 170, 152, 153, 171, 152, 153, 172, 
	152, 153, 173, 152, 153, 174, 152, 153, 
	175, 152, 153, 176, 152, 153, 177, 152, 
	153, 178, 152, 153, 179, 152, 153, 180, 
	152, 153, 181, 152, 153, 182, 152, 153, 
	183, 152, 153, 184, 152, 153, 185, 152, 
	153, 186, 152, 153, 187, 152, 153, 188, 
	152, 153, 189, 152, 153, 190, 152, 153, 
	191, 152, 153, 192, 152, 153, 193, 152, 
	194, 153, 152, 195, 153, 152, 153, 196, 
	152, 153, 197, 152, 153, 198, 152, 153, 
	199, 152, 153, 185, 152, 153, 200, 201, 
	152, 153, 202, 203, 152, 153, 204, 152, 
	153, 205, 152, 153, 206, 152, 153, 207, 
	152, 153, 185, 152, 153, 208, 152, 153, 
	209, 152, 153, 210, 152, 153, 211, 152, 
	153, 212, 152, 153, 213, 152, 153, 214, 
	152, 153, 215, 152, 153, 216, 152, 153, 
	217, 152, 153, 218, 152, 153, 219, 152, 
	153, 202, 152, 153, 220, 152, 153, 221, 
	152, 153, 222, 152, 153, 223, 152, 153, 
	184, 152, 153, 224, 152, 153, 225, 152, 
	153, 226, 152, 153, 227, 152, 153, 228, 
	152, 153, 229, 152, 153, 230, 152, 153, 
	231, 152, 153, 232, 152, 153, 233, 152, 
	153, 234, 152, 153, 185, 152, 153, 235, 
	152, 153, 236, 152, 153, 237, 152, 153, 
	238, 152, 153, 239, 152, 153, 184, 152, 
	240, 0, 241, 0, 242, 0, 243, 78, 
	0, 78, 0, 244, 245, 0, 246, 247, 
	0, 248, 0, 249, 0, 250, 0, 251, 
	0, 252, 0, 253, 0, 255, 254, 257, 
	256, 257, 258, 259, 260, 261, 259, 262, 
	263, 264, 265, 266, 261, 267, 268, 269, 
	258, 256, 257, 270, 256, 257, 271, 256, 
	257, 272, 256, 257, 273, 256, 257, 274, 
	256, 257, 275, 256, 257, 276, 256, 257, 
	277, 256, 257, 278, 256, 257, 279, 256, 
	257, 280, 256, 257, 281, 256, 257, 282, 
	256, 257, 283, 256, 257, 284, 256, 257, 
	285, 286, 287, 256, 257, 288, 256, 257, 
	289, 256, 257, 290, 256, 257, 291, 256, 
	257, 292, 256, 257, 293, 256, 257, 294, 
	256, 257, 295, 256, 257, 296, 256, 257, 
	297, 256, 257, 298, 256, 257, 299, 256, 
	257, 300, 256, 257, 301, 256, 257, 302, 
	256, 257, 303, 256, 257, 284, 256, 304, 
	257, 305, 256, 293, 257, 256, 257, 306, 
	256, 257, 294, 256, 257, 307, 256, 257, 
	294, 308, 256, 257, 309, 256, 257, 310, 
	256, 257, 311, 256, 257, 312, 256, 257, 
	313, 256, 314, 257, 256, 315, 257, 256, 
	257, 316, 256, 257, 317, 256, 257, 318, 
	256, 257, 319, 256, 257, 303, 256, 257, 
	320, 256, 257, 321, 256, 257, 322, 256, 
	257, 306, 294, 256, 257, 323, 256, 257, 
	324, 325, 256, 257, 326, 256, 257, 327, 
	256, 257, 328, 256, 257, 329, 256, 257, 
	303, 256, 257, 330, 256, 257, 331, 256, 
	257, 332, 256, 257, 333, 256, 257, 334, 
	256, 257, 335, 256, 257, 336, 256, 257, 
	337, 256, 257, 338, 256, 257, 339, 256, 
	257, 340, 256, 257, 341, 256, 257, 324, 
	256, 257, 342, 256, 257, 343, 256, 257, 
	344, 256, 257, 345, 256, 257, 346, 256, 
	257, 347, 256, 257, 348, 256, 257, 349, 
	256, 257, 350, 256, 257, 351, 256, 257, 
	352, 256, 257, 303, 256, 257, 353, 256, 
	257, 354, 256, 355, 257, 256, 294, 257, 
	256, 257, 356, 256, 257, 357, 256, 257, 
	294, 256, 257, 358, 256, 257, 359, 256, 
	257, 360, 256, 257, 361, 256, 257, 362, 
	256, 257, 302, 256, 363, 0, 364, 0, 
	365, 0, 366, 0, 367, 0, 368, 0, 
	369, 0, 370, 0, 371, 0, 372, 0, 
	373, 0, 374, 0, 375, 0, 376, 0, 
	377, 0, 378, 0, 379, 0, 380, 0, 
	381, 0, 383, 382, 385, 384, 385, 386, 
	387, 388, 389, 387, 390, 391, 392, 393, 
	394, 389, 395, 396, 386, 384, 385, 397, 
	384, 385, 398, 384, 385, 399, 384, 385, 
	400, 384, 385, 401, 384, 385, 402, 384, 
	385, 403, 384, 385, 404, 384, 385, 405, 
	384, 385, 406, 384, 385, 407, 384, 385, 
	408, 384, 385, 409, 384, 385, 410, 384, 
	385, 411, 384, 385, 412, 413, 384, 385, 
	414, 384, 385, 415, 384, 385, 416, 384, 
	385, 417, 384, 385, 418, 384, 385, 419, 
	384, 385, 420, 384, 421, 385, 422, 384, 
	419, 385, 384, 385, 423, 384, 385, 420, 
	384, 385, 424, 384, 385, 420, 425, 384, 
	385, 426, 384, 385, 427, 384, 385, 428, 
	384, 385, 429, 384, 385, 430, 384, 431, 
	385, 384, 432, 385, 384, 385, 433, 384, 
	385, 434, 384, 385, 435, 384, 385, 436, 
	384, 385, 437, 384, 385, 411, 384, 385, 
	438, 384, 385, 439, 384, 385, 440, 384, 
	385, 423, 420, 384, 385, 441, 384, 385, 
	442, 384, 385, 443, 384, 385, 444, 384, 
	385, 445, 384, 385, 446, 384, 385, 437, 
	384, 385, 447, 384, 385, 448, 384, 385, 
	449, 384, 385, 450, 384, 385, 451, 384, 
	385, 452, 384, 385, 453, 384, 385, 454, 
	384, 385, 455, 384, 385, 456, 384, 385, 
	457, 384, 385, 437, 384, 385, 458, 384, 
	385, 459, 384, 460, 385, 384, 420, 385, 
	384, 385, 461, 384, 385, 462, 384, 385, 
	420, 384, 463, 0, 464, 0, 465, 0, 
	466, 0, 467, 0, 468, 0, 469, 0, 
	471, 470, 473, 472, 473, 474, 475, 476, 
	477, 475, 474, 472, 473, 478, 472, 473, 
	479, 472, 473, 480, 472, 473, 481, 472, 
	473, 482, 472, 473, 483, 472, 473, 484, 
	472, 485, 473, 472, 486, 473, 472, 473, 
	487, 472, 473, 488, 472, 473, 489, 472, 
	473, 490, 472, 473, 491, 472, 473, 492, 
	472, 473, 493, 472, 473, 494, 472, 473, 
	495, 472, 473, 496, 472, 473, 497, 472, 
	473, 498, 472, 473, 499, 472, 473, 500, 
	472, 473, 501, 472, 473, 502, 472, 473, 
	503, 472, 473, 491, 472, 504, 0, 505, 
	0, 506, 0, 507, 0, 508, 0, 509, 
	0, 510, 0, 511, 0, 512, 0, 513, 
	0, 514, 0, 148, 0, 515, 0, 516, 
	0, 517, 0, 78, 0, 518, 0, 519, 
	0, 78, 0, 520, 0, 521, 0, 522, 
	0, 523, 0, 524, 0, 86, 0, 525, 
	526, 525, 0, 529, 528, 530, 531, 528, 
	527, 0, 533, 534, 532, 0, 533, 532, 
	529, 535, 533, 534, 535, 532, 529, 536, 
	537, 538, 539, 540, 541, 542, 543, 544, 
	545, 546, 540, 547, 548, 549, 550, 536, 
	0, 92, 551, 552, 91, 92, 553, 91, 
	92, 554, 91, 92, 555, 91, 92, 556, 
	91, 92, 557, 91, 92, 558, 91, 92, 
	559, 91, 560, 92, 561, 91, 558, 92, 
	91, 92, 562, 91, 92, 559, 91, 92, 
	563, 91, 92, 559, 564, 91, 92, 565, 
	91, 92, 566, 91, 92, 567, 91, 92, 
	568, 91, 92, 569, 91, 570, 92, 91, 
	571, 92, 91, 92, 572, 91, 92, 573, 
	91, 92, 574, 91, 92, 575, 91, 92, 
	576, 91, 92, 118, 91, 92, 577, 91, 
	92, 578, 91, 92, 579, 91, 92, 562, 
	559, 91, 92, 580, 91, 92, 581, 582, 
	91, 92, 583, 91, 92, 584, 91, 92, 
	585, 91, 92, 586, 91, 92, 576, 91, 
	92, 587, 91, 92, 588, 91, 92, 589, 
	91, 92, 590, 91, 92, 591, 91, 92, 
	592, 91, 92, 593, 91, 92, 594, 91, 
	92, 595, 91, 92, 596, 91, 92, 597, 
	91, 92, 598, 91, 92, 581, 91, 92, 
	599, 91, 92, 600, 91, 92, 601, 91, 
	92, 602, 91, 92, 603, 91, 92, 604, 
	91, 92, 605, 91, 92, 606, 91, 92, 
	607, 91, 92, 608, 91, 92, 609, 91, 
	92, 576, 91, 92, 610, 91, 92, 611, 
	91, 612, 92, 91, 559, 92, 91, 92, 
	613, 91, 92, 614, 91, 92, 559, 91, 
	615, 616, 0, 77, 0, 243, 0, 617, 
	0, 1, 0, 618, 0
];

var _lexer_trans_targs = [
	0, 2, 2, 3, 13, 15, 29, 32, 
	35, 72, 172, 177, 419, 431, 435, 438, 
	444, 523, 4, 5, 6, 7, 6, 6, 
	7, 6, 8, 8, 8, 9, 8, 8, 
	8, 9, 10, 11, 12, 2, 12, 13, 
	2, 14, 16, 17, 18, 19, 20, 21, 
	22, 23, 24, 25, 26, 27, 28, 525, 
	30, 31, 2, 14, 31, 2, 14, 33, 
	34, 2, 33, 32, 34, 36, 43, 520, 
	37, 38, 39, 40, 41, 42, 29, 44, 
	45, 46, 47, 48, 49, 50, 51, 52, 
	53, 54, 55, 54, 55, 55, 2, 56, 
	70, 450, 462, 477, 481, 501, 513, 517, 
	57, 58, 59, 60, 61, 62, 63, 64, 
	65, 66, 67, 68, 69, 2, 71, 2, 
	2, 3, 13, 15, 29, 32, 35, 72, 
	172, 177, 419, 431, 435, 438, 444, 73, 
	74, 75, 76, 77, 78, 79, 80, 81, 
	82, 83, 84, 85, 86, 87, 88, 89, 
	88, 89, 89, 2, 90, 104, 115, 129, 
	154, 166, 91, 92, 93, 94, 95, 96, 
	97, 98, 99, 100, 101, 102, 103, 2, 
	105, 106, 107, 108, 109, 110, 111, 112, 
	113, 114, 71, 116, 117, 118, 119, 120, 
	121, 122, 123, 124, 125, 126, 127, 128, 
	130, 149, 131, 136, 132, 133, 134, 135, 
	137, 138, 139, 140, 141, 142, 143, 144, 
	145, 146, 147, 148, 150, 151, 152, 153, 
	155, 156, 157, 158, 159, 160, 161, 162, 
	163, 164, 165, 167, 168, 169, 170, 171, 
	173, 174, 175, 176, 178, 382, 179, 288, 
	180, 181, 182, 183, 184, 185, 186, 187, 
	186, 187, 187, 2, 188, 202, 203, 225, 
	239, 243, 263, 275, 279, 282, 189, 190, 
	191, 192, 193, 194, 195, 196, 197, 198, 
	199, 200, 201, 2, 71, 204, 211, 221, 
	205, 206, 207, 208, 209, 210, 202, 212, 
	213, 214, 215, 216, 217, 218, 219, 220, 
	222, 223, 224, 226, 227, 228, 229, 230, 
	231, 232, 233, 234, 235, 236, 237, 238, 
	240, 241, 242, 244, 245, 250, 246, 247, 
	248, 249, 251, 252, 253, 254, 255, 256, 
	257, 258, 259, 260, 261, 262, 264, 265, 
	266, 267, 268, 269, 270, 271, 272, 273, 
	274, 276, 277, 278, 280, 281, 283, 284, 
	285, 286, 287, 289, 290, 291, 292, 293, 
	294, 295, 296, 297, 298, 299, 300, 301, 
	302, 303, 304, 305, 306, 307, 308, 309, 
	308, 309, 309, 2, 310, 324, 325, 337, 
	352, 356, 363, 375, 379, 311, 312, 313, 
	314, 315, 316, 317, 318, 319, 320, 321, 
	322, 323, 2, 71, 326, 333, 327, 328, 
	329, 330, 331, 332, 324, 334, 335, 336, 
	338, 339, 340, 341, 342, 343, 344, 345, 
	346, 347, 348, 349, 350, 351, 353, 354, 
	355, 357, 358, 359, 360, 361, 362, 364, 
	365, 366, 367, 368, 369, 370, 371, 372, 
	373, 374, 376, 377, 378, 380, 381, 383, 
	384, 385, 386, 387, 388, 389, 390, 391, 
	390, 391, 391, 2, 392, 407, 393, 394, 
	395, 396, 397, 398, 399, 400, 401, 402, 
	403, 404, 405, 406, 71, 408, 409, 410, 
	411, 412, 413, 414, 415, 416, 417, 418, 
	420, 421, 422, 423, 424, 425, 426, 427, 
	428, 429, 430, 432, 433, 434, 436, 437, 
	439, 440, 441, 442, 443, 444, 445, 446, 
	448, 449, 447, 445, 446, 447, 445, 448, 
	449, 3, 13, 15, 29, 32, 35, 72, 
	172, 177, 419, 431, 435, 438, 444, 451, 
	458, 452, 453, 454, 455, 456, 457, 70, 
	459, 460, 461, 463, 464, 465, 466, 467, 
	468, 469, 470, 471, 472, 473, 474, 475, 
	476, 478, 479, 480, 482, 483, 488, 484, 
	485, 486, 487, 489, 490, 491, 492, 493, 
	494, 495, 496, 497, 498, 499, 500, 502, 
	503, 504, 505, 506, 507, 508, 509, 510, 
	511, 512, 514, 515, 516, 518, 519, 521, 
	522, 524, 0
];

var _lexer_trans_actions = [
	43, 0, 54, 3, 1, 0, 29, 1, 
	29, 29, 29, 29, 29, 29, 29, 29, 
	35, 0, 0, 0, 7, 139, 48, 0, 
	102, 9, 5, 45, 134, 45, 0, 33, 
	122, 33, 33, 0, 11, 106, 0, 0, 
	114, 25, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 57, 149, 126, 0, 110, 23, 0, 
	27, 118, 27, 51, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 57, 144, 0, 54, 0, 72, 33, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 15, 15, 31, 
	130, 60, 57, 31, 63, 57, 63, 63, 
	63, 63, 63, 63, 63, 63, 66, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 57, 144, 
	0, 54, 0, 69, 33, 84, 84, 84, 
	84, 84, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 13, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 13, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 57, 144, 
	0, 54, 0, 75, 33, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 17, 17, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 57, 144, 
	0, 54, 0, 78, 33, 84, 84, 84, 
	84, 84, 84, 84, 84, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 19, 19, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 57, 144, 
	0, 54, 0, 81, 84, 84, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 21, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 37, 
	37, 54, 37, 87, 0, 0, 39, 0, 
	0, 93, 90, 41, 96, 90, 96, 96, 
	96, 96, 96, 96, 96, 96, 99, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0
];

var _lexer_eof_actions = [
	0, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43
];

var lexer_start = 1;
var lexer_first_final = 525;
var lexer_error = 0;

var lexer_en_main = 1;


/* line 129 "ragel/i18n/ca.js.rl" */

/* line 130 "ragel/i18n/ca.js.rl" */

/* line 131 "ragel/i18n/ca.js.rl" */

/* line 132 "ragel/i18n/ca.js.rl" */

var Lexer = function(listener) {
  // Check that listener has the required functions
  var events = ['comment', 'tag', 'feature', 'background', 'scenario', 'scenario_outline', 'examples', 'step', 'doc_string', 'row', 'eof'];
  for(var i=0, len=events.length; i<len; i++) {
    var event = events[i];
    if(typeof listener[event] != 'function') {
      throw new Error("Error. No " + event + " function exists on " + JSON.stringify(listener));
    }
  }
  this.listener = listener;
};

Lexer.prototype.scan = function(data) {
  var ending = "\n%_FEATURE_END_%";
  if(typeof data == 'string') {
    data = this.stringToBytes(data + ending);
  } else if(typeof Buffer != 'undefined' && Buffer.isBuffer(data)) {
    // Node.js
    var buf = new Buffer(data.length + ending.length);
    data.copy(buf, 0, 0);
    new Buffer(ending).copy(buf, data.length, 0);
    data = buf;
  }
  var eof = pe = data.length;
  var p = 0;

  this.line_number = 1;
  this.last_newline = 0;
  var signedCharValue=function(v){return v > 127 ? v-256 : v; };

  
/* line 935 "js/lib/gherkin/lexer/ca.js" */
{
	  this.cs = lexer_start;
} /* JSCodeGen::writeInit */

/* line 164 "ragel/i18n/ca.js.rl" */
  
/* line 942 "js/lib/gherkin/lexer/ca.js" */
{
	var _klen, _trans, _keys, _ps, _widec, _acts, _nacts;
	var _goto_level, _resume, _eof_trans, _again, _test_eof;
	var _out;
	_klen = _trans = _keys = _acts = _nacts = null;
	_goto_level = 0;
	_resume = 10;
	_eof_trans = 15;
	_again = 20;
	_test_eof = 30;
	_out = 40;
	while (true) {
	_trigger_goto = false;
	if (_goto_level <= 0) {
	if (p == pe) {
		_goto_level = _test_eof;
		continue;
	}
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	}
	if (_goto_level <= _resume) {
	_keys = _lexer_key_offsets[ this.cs];
	_trans = _lexer_index_offsets[ this.cs];
	_klen = _lexer_single_lengths[ this.cs];
	_break_match = false;
	
	do {
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + _klen - 1;

	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + ( (_upper - _lower) >> 1 );

	        if (( signedCharValue(data[p])) < _lexer_trans_keys[_mid]) {
	           _upper = _mid - 1;
	        } else if (( signedCharValue(data[p])) > _lexer_trans_keys[_mid]) {
	           _lower = _mid + 1;
	        } else {
	           _trans += (_mid - _keys);
	           _break_match = true;
	           break;
	        };
	     } /* while */
	     if (_break_match) { break; }
	     _keys += _klen;
	     _trans += _klen;
	  }
	  _klen = _lexer_range_lengths[ this.cs];
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + (_klen << 1) - 2;
	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + (((_upper-_lower) >> 1) & ~1);
	        if (( signedCharValue(data[p])) < _lexer_trans_keys[_mid]) {
	          _upper = _mid - 2;
	         } else if (( signedCharValue(data[p])) > _lexer_trans_keys[_mid+1]) {
	          _lower = _mid + 2;
	        } else {
	          _trans += ((_mid - _keys) >> 1);
	          _break_match = true;
	          break;
	        }
	     } /* while */
	     if (_break_match) { break; }
	     _trans += _klen
	  }
	} while (false);
	_trans = _lexer_indicies[_trans];
	 this.cs = _lexer_trans_targs[_trans];
	if (_lexer_trans_actions[_trans] != 0) {
		_acts = _lexer_trans_actions[_trans];
		_nacts = _lexer_actions[_acts];
		_acts += 1;
		while (_nacts > 0) {
			_nacts -= 1;
			_acts += 1;
			switch (_lexer_actions[_acts - 1]) {
case 0:
/* line 6 "ragel/i18n/ca.js.rl" */

    this.content_start = p;
    this.current_line = this.line_number;
    this.start_col = p - this.last_newline - (this.keyword+':').length;
  		break;
case 1:
/* line 12 "ragel/i18n/ca.js.rl" */

    this.current_line = this.line_number;
    this.start_col = p - this.last_newline;
  		break;
case 2:
/* line 17 "ragel/i18n/ca.js.rl" */

    this.content_start = p;
  		break;
case 3:
/* line 21 "ragel/i18n/ca.js.rl" */

    this.docstring_content_type_start = p;
  		break;
case 4:
/* line 25 "ragel/i18n/ca.js.rl" */

    this.docstring_content_type_end = p;
  		break;
case 5:
/* line 29 "ragel/i18n/ca.js.rl" */

    var con = this.unindent(
      this.start_col, 
      this.bytesToString(data.slice(this.content_start, this.next_keyword_start-1)).replace(/(\r?\n)?([\t ])*$/, '').replace(/\\\"\\\"\\\"/mg, '"""')
    );
    var con_type = this.bytesToString(data.slice(this.docstring_content_type_start, this.docstring_content_type_end)).trim();
    this.listener.doc_string(con_type, con, this.current_line); 
  		break;
case 6:
/* line 38 "ragel/i18n/ca.js.rl" */

    p = this.store_keyword_content('feature', data, p, eof);
  		break;
case 7:
/* line 42 "ragel/i18n/ca.js.rl" */

    p = this.store_keyword_content('background', data, p, eof);
  		break;
case 8:
/* line 46 "ragel/i18n/ca.js.rl" */

    p = this.store_keyword_content('scenario', data, p, eof);
  		break;
case 9:
/* line 50 "ragel/i18n/ca.js.rl" */

    p = this.store_keyword_content('scenario_outline', data, p, eof);
  		break;
case 10:
/* line 54 "ragel/i18n/ca.js.rl" */

    p = this.store_keyword_content('examples', data, p, eof);
  		break;
case 11:
/* line 58 "ragel/i18n/ca.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.step(this.keyword, con, this.current_line);
  		break;
case 12:
/* line 63 "ragel/i18n/ca.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.comment(con, this.line_number);
    this.keyword_start = null;
  		break;
case 13:
/* line 69 "ragel/i18n/ca.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.tag(con, this.line_number);
    this.keyword_start = null;
  		break;
case 14:
/* line 75 "ragel/i18n/ca.js.rl" */

    this.line_number++;
  		break;
case 15:
/* line 79 "ragel/i18n/ca.js.rl" */

    this.last_newline = p + 1;
  		break;
case 16:
/* line 83 "ragel/i18n/ca.js.rl" */

    this.keyword_start = this.keyword_start || p;
  		break;
case 17:
/* line 87 "ragel/i18n/ca.js.rl" */

    this.keyword = this.bytesToString(data.slice(this.keyword_start, p)).replace(/:$/, '');
    this.keyword_start = null;
  		break;
case 18:
/* line 92 "ragel/i18n/ca.js.rl" */

    this.next_keyword_start = p;
  		break;
case 19:
/* line 96 "ragel/i18n/ca.js.rl" */

    p = p - 1;
    current_row = [];
    this.current_line = this.line_number;
  		break;
case 20:
/* line 102 "ragel/i18n/ca.js.rl" */

    this.content_start = p;
  		break;
case 21:
/* line 106 "ragel/i18n/ca.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    current_row.push(con.replace(/\\\|/, "|").replace(/\\n/, "\n").replace(/\\\\/, "\\"));
  		break;
case 22:
/* line 111 "ragel/i18n/ca.js.rl" */

    this.listener.row(current_row, this.current_line);
  		break;
case 23:
/* line 115 "ragel/i18n/ca.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw new Error("Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.");
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 1169 "js/lib/gherkin/lexer/ca.js" */
			} /* action switch */
		}
	}
	if (_trigger_goto) {
		continue;
	}
	}
	if (_goto_level <= _again) {
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	p += 1;
	if (p != pe) {
		_goto_level = _resume;
		continue;
	}
	}
	if (_goto_level <= _test_eof) {
	if (p == eof) {
	__acts = _lexer_eof_actions[ this.cs];
	__nacts =  _lexer_actions[__acts];
	__acts += 1;
	while (__nacts > 0) {
		__nacts -= 1;
		__acts += 1;
		switch (_lexer_actions[__acts - 1]) {
case 23:
/* line 115 "ragel/i18n/ca.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw new Error("Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.");
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 1208 "js/lib/gherkin/lexer/ca.js" */
		} /* eof action switch */
	}
	if (_trigger_goto) {
		continue;
	}
}
	}
	if (_goto_level <= _out) {
		break;
	}
	}
	}

/* line 165 "ragel/i18n/ca.js.rl" */
};


/*
 * Decode utf-8 byte sequence to string.
 */
var decodeUtf8 = function(bytes) {
  var result = "";
  var i = 0;
  var wc;
  var c;

  while (i < bytes.length) {
    /* parse as UTF-8 lead byte */
    wc = bytes[i++];
    if (wc < 0x80) {
      count = 0;
    } else if (wc < 0xC2 || wc >= 0xF8) {
      throw new Error("input is not a valid UTF-8 lead octet");
    } else if (wc < 0xE0) {
      count = 1;
      wc = (wc & 0x1F) << 6;
    } else if (wc < 0xF0) {
      count = 2;
      wc = (wc & 0x0F) << 12;
    } else /* wc < 0xF8 */ {
      count = 3;
      wc = (wc & 0x07) << 18;
    }

    /* parse trail bytes, if any */
    while (count) {
      if (!(i < bytes.length)) {
        throw new Error("short read");
      }
      if ((c = bytes[i++] ^ 0x80) > 0x3F) {
        throw new Error("input is not a valid UTF-8 trail octet");
      }
      wc |= c << (6 * --count);
      if (wc < (1 << (5 * count + 6))) {
        throw new Error("invalid non-minimal encoded input");
      }
    }

    /* handle conversion to UTF-16 if needed */
    if (wc > 0xFFFF) {
      wc -= 0x10000;
      result += String.fromCharCode(0xD800 + (wc >> 10));
      wc = 0xDC00 + (wc & 0x3FF);
    }
    result += String.fromCharCode(wc);
  }

  return result;
};

/*
 * Encode string to an array of bytes using utf8 encoding.
 *
 * Javascript internally stores character data as utf16 (like java).
 * String.charCodeAt() does *not* produce unicode points, but simply
 * reflects this internal representation. Thus, it is necessary
 * to first decode the utf-16 representation before encoding to
 * utf-8.
 */
var encodeUtf8 = function(string) {
  var bytes = [];
  var i = 0;
  var j = 0;
  var wc;

  while (i < string.length) {
    wc = string.charCodeAt(i++);
    if (wc >= 0xD800 && wc <= 0xDBFF && i < string.length && string.charCodeAt(i) >= 0xDC00 && string.charCodeAt(i) <= 0xDFFF) {
      /* decode UTF-16 */
      wc = 0x10000 + ((wc & 0x3FF) << 10) + (string.charCodeAt(i++) & 0x3FF);
    }

    /* emit lead byte */
    if (wc < 0x80) {
      bytes[j++] = wc;
      count = 0;
    } else if (wc < 0x800) {
      bytes[j++] = 0xC0 | (wc >> 6);
      count = 1;
    } else if (wc < 0x10000) {
      bytes[j++] = 0xE0 | (wc >> 12);
      count = 2;
    } else {
      /* SMP: 21-bit Unicode */
      bytes[j++] = 0xF0 | (wc >> 18);
      count = 3;
    }

    /* emit trail bytes, if any */
    while (count) {
      bytes[j++] = 0x80 | ((wc >> (6 * --count)) & 0x3F);
    }
  }

  return bytes;

};

Lexer.prototype.bytesToString = function(bytes) {
  if(typeof bytes.write == 'function') {
    // Node.js
    return bytes.toString('utf-8');
  }
  return decodeUtf8(bytes);
};

Lexer.prototype.stringToBytes = function(string) {
  return encodeUtf8(string);
};

Lexer.prototype.unindent = function(startcol, text) {
  startcol = startcol || 0;
  return text.replace(new RegExp('^[\t ]{0,' + startcol + '}', 'gm'), ''); 
};

Lexer.prototype.store_keyword_content = function(event, data, p, eof) {
  var end_point = (!this.next_keyword_start || (p == eof)) ? p : this.next_keyword_start;
  var content = this.unindent(this.start_col + 2, this.bytesToString(data.slice(this.content_start, end_point))).replace(/\s+$/,"");
  var content_lines = content.split("\n")
  var name = content_lines.shift() || "";
  name = name.trim();
  var description = content_lines.join("\n");
  this.listener[event](this.keyword, name, description, this.current_line);
  var nks = this.next_keyword_start;
  this.next_keyword_start = null;
  return nks ? nks - 1 : p;
};

Lexer.prototype.current_line_content = function(data, p) {
  var rest = Array.prototype.slice.call(data,this.last_newline, -1);
  var end = rest.indexOf(10) || -1;
  return this.bytesToString(rest.slice(0, end)).trim();
};

// Node.js export
if(typeof module !== 'undefined') {
  module.exports = Lexer;
}
// Require.js export
if (typeof define !== 'undefined') {
  if(define.amd) {
    define('gherkin/lexer/ca', [], function() {
      return Lexer;
    });
  } else {
    define('gherkin/lexer/ca', function(require, exports, module) {
      exports.Lexer = Lexer;
    });
  }
}

})();

}).call(this,require("buffer").Buffer)

},{"buffer":69}],189:[function(require,module,exports){
(function (Buffer){

/* line 1 "ragel/i18n/cs.js.rl" */
;(function() {


/* line 126 "ragel/i18n/cs.js.rl" */



/* line 11 "js/lib/gherkin/lexer/cs.js" */
var _lexer_actions = [
	0, 1, 0, 1, 1, 1, 2, 1, 
	3, 1, 4, 1, 5, 1, 6, 1, 
	7, 1, 8, 1, 9, 1, 10, 1, 
	11, 1, 12, 1, 13, 1, 16, 1, 
	17, 1, 18, 1, 19, 1, 20, 1, 
	21, 1, 22, 1, 23, 2, 2, 18, 
	2, 3, 4, 2, 13, 0, 2, 14, 
	15, 2, 17, 0, 2, 17, 1, 2, 
	17, 16, 2, 17, 19, 2, 18, 6, 
	2, 18, 7, 2, 18, 8, 2, 18, 
	9, 2, 18, 10, 2, 18, 16, 2, 
	20, 21, 2, 22, 0, 2, 22, 1, 
	2, 22, 16, 2, 22, 19, 3, 4, 
	14, 15, 3, 5, 14, 15, 3, 11, 
	14, 15, 3, 12, 14, 15, 3, 13, 
	14, 15, 3, 14, 15, 18, 3, 17, 
	0, 11, 3, 17, 14, 15, 4, 2, 
	14, 15, 18, 4, 3, 4, 14, 15, 
	4, 17, 0, 14, 15, 5, 17, 0, 
	11, 14, 15
];

var _lexer_key_offsets = [
	0, 0, 18, 35, 36, 37, 39, 41, 
	46, 51, 56, 61, 65, 69, 71, 72, 
	73, 74, 75, 76, 77, 78, 79, 80, 
	81, 82, 83, 84, 85, 86, 87, 89, 
	91, 96, 103, 108, 110, 113, 116, 119, 
	122, 125, 128, 129, 131, 132, 133, 134, 
	135, 136, 137, 138, 139, 140, 141, 142, 
	157, 159, 161, 163, 165, 167, 169, 171, 
	173, 175, 177, 179, 181, 183, 185, 187, 
	204, 205, 206, 207, 208, 209, 210, 211, 
	212, 213, 214, 215, 216, 217, 218, 219, 
	220, 221, 222, 223, 224, 237, 239, 241, 
	243, 245, 247, 249, 251, 253, 255, 257, 
	259, 261, 263, 265, 267, 270, 288, 289, 
	290, 291, 292, 293, 294, 295, 298, 299, 
	300, 301, 302, 303, 304, 305, 306, 307, 
	308, 309, 316, 318, 320, 322, 324, 326, 
	328, 330, 332, 334, 336, 337, 340, 341, 
	342, 343, 344, 345, 346, 347, 348, 349, 
	350, 362, 364, 366, 368, 370, 372, 374, 
	376, 378, 380, 382, 384, 386, 388, 390, 
	392, 394, 396, 398, 400, 402, 404, 406, 
	408, 410, 412, 414, 416, 418, 420, 422, 
	424, 426, 428, 430, 432, 434, 436, 438, 
	440, 442, 444, 446, 448, 450, 452, 455, 
	457, 459, 461, 463, 465, 467, 469, 471, 
	474, 476, 478, 480, 482, 484, 486, 488, 
	490, 492, 494, 496, 498, 500, 502, 504, 
	506, 508, 510, 512, 513, 514, 515, 516, 
	517, 518, 519, 520, 521, 522, 523, 524, 
	525, 526, 527, 528, 529, 544, 546, 548, 
	550, 552, 554, 556, 558, 560, 562, 564, 
	566, 568, 570, 572, 574, 577, 595, 596, 
	597, 598, 599, 600, 601, 602, 603, 604, 
	605, 606, 607, 608, 609, 610, 611, 612, 
	613, 614, 618, 624, 627, 629, 635, 652, 
	654, 657, 659, 661, 663, 665, 667, 669, 
	671, 673, 675, 677, 679, 681, 683, 685, 
	687, 689, 691, 693, 695, 697, 699, 701, 
	703, 705, 707, 709, 711, 713, 715, 717, 
	719, 721, 723, 726, 728, 732, 734, 736, 
	738, 740, 742, 744, 746, 748, 750, 752, 
	754, 756, 758, 760, 762, 764, 766, 768, 
	770, 772, 774, 776, 778, 780, 782, 784, 
	786, 788, 790, 792, 794, 796, 798, 800, 
	802, 803, 804, 805, 806, 807, 809, 811, 
	813, 815, 817, 820, 822, 825, 827, 829, 
	831, 833, 835, 837, 839, 841, 843, 845, 
	847, 849, 851, 853, 855, 857, 859, 861, 
	863, 865, 867, 869, 871, 873, 875, 877, 
	879, 881, 883, 885, 887, 889, 892, 910, 
	911, 912, 913, 914, 915, 917, 919, 921, 
	923, 925, 927, 929, 931, 933, 935, 937, 
	939, 941, 943, 945, 947, 949, 951, 953, 
	955, 957, 959, 961, 963, 965, 967, 969, 
	971, 973, 975, 978, 980, 983, 985, 987, 
	989, 991, 993, 995, 997, 999, 1001, 1003, 
	1005, 1007, 1009, 1011, 1013, 1015, 1017, 1019, 
	1021, 1023, 1025, 1027, 1029, 1031, 1033, 1035, 
	1037, 1039, 1041, 1043, 1045, 1046, 1047
];

var _lexer_trans_keys = [
	10, 32, 34, 35, 37, 42, 64, 65, 
	75, 78, 79, 80, 83, 90, 124, 239, 
	9, 13, 10, 32, 34, 35, 37, 42, 
	64, 65, 75, 78, 79, 80, 83, 90, 
	124, 9, 13, 34, 34, 10, 13, 10, 
	13, 10, 32, 34, 9, 13, 10, 32, 
	34, 9, 13, 10, 32, 34, 9, 13, 
	10, 32, 34, 9, 13, 10, 32, 9, 
	13, 10, 32, 9, 13, 10, 13, 10, 
	95, 70, 69, 65, 84, 85, 82, 69, 
	95, 69, 78, 68, 95, 37, 32, 10, 
	13, 10, 13, 13, 32, 64, 9, 10, 
	9, 10, 13, 32, 64, 11, 12, 10, 
	32, 64, 9, 13, 32, 108, 10, 13, 
	116, 10, 13, 97, 10, 13, 107, -61, 
	10, 13, -87, 10, 13, 10, 13, 32, 
	101, 100, 111, 121, -59, -66, 110, 116, 
	101, 120, 116, 58, 10, 10, 10, 32, 
	35, 37, 42, 64, 65, 75, 78, 79, 
	80, 83, 90, 9, 13, 10, 95, 10, 
	70, 10, 69, 10, 65, 10, 84, 10, 
	85, 10, 82, 10, 69, 10, 95, 10, 
	69, 10, 78, 10, 68, 10, 95, 10, 
	37, 10, 32, 10, 32, 34, 35, 37, 
	42, 64, 65, 75, 78, 79, 80, 83, 
	90, 124, 9, 13, -61, -95, -60, -115, 
	114, 116, 32, 83, 99, -61, -87, 110, 
	-61, -95, -59, -103, 101, 58, 10, 10, 
	10, 32, 35, 37, 42, 64, 65, 75, 
	80, 83, 90, 9, 13, 10, 95, 10, 
	70, 10, 69, 10, 65, 10, 84, 10, 
	85, 10, 82, 10, 69, 10, 95, 10, 
	69, 10, 78, 10, 68, 10, 95, 10, 
	37, 10, 32, 10, 32, 108, 10, 32, 
	34, 35, 37, 42, 64, 65, 75, 78, 
	79, 80, 83, 90, 116, 124, 9, 13, 
	115, 110, 111, 118, 97, 32, 115, -59, 
	97, 111, -103, -61, -83, 107, 108, 97, 
	100, 121, 58, 10, 10, 10, 32, 35, 
	80, 124, 9, 13, 10, 111, -59, 10, 
	-66, 10, 10, 97, 10, 100, 10, 97, 
	10, 118, 10, 101, 10, 107, 10, 58, 
	107, -59, 107, 122, -66, 97, 100, 97, 
	118, 101, 107, 58, 10, 10, 10, 32, 
	35, 37, 64, 75, 78, 79, 80, 83, 
	9, 13, 10, 95, 10, 70, 10, 69, 
	10, 65, 10, 84, 10, 85, 10, 82, 
	10, 69, 10, 95, 10, 69, 10, 78, 
	10, 68, 10, 95, 10, 37, 10, 111, 
	10, 110, 10, 116, 10, 101, 10, 120, 
	10, 116, 10, 58, -61, 10, -95, 10, 
	-60, 10, -115, 10, 10, 114, 10, 116, 
	10, 32, 10, 83, 10, 99, -61, 10, 
	-87, 10, 10, 110, -61, 10, -95, 10, 
	-59, 10, -103, 10, 10, 101, 10, 115, 
	10, 110, 10, 111, 10, 118, 10, 97, 
	10, 32, 10, 115, -59, 10, 111, -103, 
	10, -61, 10, -83, 10, 10, 107, 10, 
	108, 10, 97, 10, 100, 10, 121, -59, 
	10, 122, -66, 10, 10, 97, 10, 100, 
	10, 97, 10, 118, 10, 101, 10, 107, 
	10, 97, 10, 100, -61, 10, -83, 10, 
	10, 99, -61, 10, -87, 10, 10, 110, 
	-61, 10, -95, 10, -59, 10, -103, 10, 
	117, 100, 97, 100, -61, -83, 99, -61, 
	-87, 110, -61, -95, -59, -103, 58, 10, 
	10, 10, 32, 35, 37, 42, 64, 65, 
	75, 78, 79, 80, 83, 90, 9, 13, 
	10, 95, 10, 70, 10, 69, 10, 65, 
	10, 84, 10, 85, 10, 82, 10, 69, 
	10, 95, 10, 69, 10, 78, 10, 68, 
	10, 95, 10, 37, 10, 32, 10, 32, 
	108, 10, 32, 34, 35, 37, 42, 64, 
	65, 75, 78, 79, 80, 83, 90, 116, 
	124, 9, 13, 97, 32, 112, -59, -103, 
	101, 100, 112, 111, 107, 108, 97, 100, 
	117, 97, 107, -61, -87, 32, 32, 124, 
	9, 13, 10, 32, 92, 124, 9, 13, 
	10, 92, 124, 10, 92, 10, 32, 92, 
	124, 9, 13, 10, 32, 34, 35, 37, 
	42, 64, 65, 75, 78, 79, 80, 83, 
	90, 124, 9, 13, 10, 101, 10, 100, 
	111, 10, 121, -59, 10, -66, 10, 10, 
	110, 10, 116, 10, 101, 10, 120, 10, 
	116, 10, 58, -61, 10, -95, 10, -60, 
	10, -115, 10, 10, 114, 10, 116, 10, 
	32, 10, 83, 10, 99, -61, 10, -87, 
	10, 10, 110, -61, 10, -95, 10, -59, 
	10, -103, 10, 10, 101, 10, 115, 10, 
	110, 10, 111, 10, 118, 10, 97, 10, 
	32, 10, 115, 10, 97, 111, 10, 107, 
	-59, 10, 107, 122, -66, 10, 10, 97, 
	10, 100, 10, 97, 10, 118, 10, 101, 
	10, 107, 10, 117, 10, 100, 10, 97, 
	10, 100, -61, 10, -83, 10, 10, 99, 
	-61, 10, -87, 10, 10, 110, -61, 10, 
	-95, 10, -59, 10, -103, 10, 10, 97, 
	10, 32, 10, 112, -59, 10, -103, 10, 
	10, 101, 10, 100, 10, 112, 10, 111, 
	10, 107, 10, 108, 10, 97, 10, 100, 
	10, 117, 97, 107, -61, -87, 32, 10, 
	101, 10, 100, 10, 121, -59, 10, -66, 
	10, 10, 97, 111, 10, 107, -59, 10, 
	107, -66, 10, 10, 97, 10, 100, 10, 
	97, 10, 118, 10, 101, 10, 107, 10, 
	58, 10, 117, 10, 100, 10, 99, -61, 
	10, -87, 10, 10, 110, -61, 10, -95, 
	10, -59, 10, -103, 10, 10, 97, 10, 
	32, 10, 112, -59, 10, -103, 10, 10, 
	101, 10, 100, 10, 112, 10, 111, 10, 
	107, 10, 108, 10, 97, 10, 100, 10, 
	117, 10, 32, 108, 10, 32, 34, 35, 
	37, 42, 64, 65, 75, 78, 79, 80, 
	83, 90, 116, 124, 9, 13, 97, 107, 
	-61, -87, 32, 10, 101, 10, 100, 10, 
	121, -59, 10, -66, 10, -61, 10, -95, 
	10, -60, 10, -115, 10, 10, 114, 10, 
	116, 10, 32, 10, 83, 10, 99, -61, 
	10, -87, 10, 10, 110, -61, 10, -95, 
	10, -59, 10, -103, 10, 10, 101, 10, 
	58, 10, 115, 10, 110, 10, 111, 10, 
	118, 10, 97, 10, 32, 10, 115, 10, 
	97, 111, 10, 107, -59, 10, 107, -66, 
	10, 10, 97, 10, 100, 10, 97, 10, 
	118, 10, 101, 10, 107, 10, 117, 10, 
	100, 10, 99, -61, 10, -87, 10, 10, 
	110, -61, 10, -95, 10, -59, 10, -103, 
	10, 10, 97, 10, 32, 10, 112, -59, 
	10, -103, 10, 10, 101, 10, 100, 10, 
	112, 10, 111, 10, 107, 10, 108, 10, 
	97, 10, 100, 10, 117, 187, 191, 0
];

var _lexer_single_lengths = [
	0, 16, 15, 1, 1, 2, 2, 3, 
	3, 3, 3, 2, 2, 2, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 2, 2, 
	3, 5, 3, 2, 3, 3, 3, 3, 
	3, 3, 1, 2, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 13, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 15, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 11, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 3, 16, 1, 1, 
	1, 1, 1, 1, 1, 3, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 5, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 1, 3, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	10, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 3, 2, 
	2, 2, 2, 2, 2, 2, 2, 3, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 13, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 3, 16, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 2, 4, 3, 2, 4, 15, 2, 
	3, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 3, 2, 4, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	1, 1, 1, 1, 1, 2, 2, 2, 
	2, 2, 3, 2, 3, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 3, 16, 1, 
	1, 1, 1, 1, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 3, 2, 3, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 1, 1, 0
];

var _lexer_range_lengths = [
	0, 1, 1, 0, 0, 0, 0, 1, 
	1, 1, 1, 1, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 1, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 1, 0, 0, 1, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0
];

var _lexer_index_offsets = [
	0, 0, 18, 35, 37, 39, 42, 45, 
	50, 55, 60, 65, 69, 73, 76, 78, 
	80, 82, 84, 86, 88, 90, 92, 94, 
	96, 98, 100, 102, 104, 106, 108, 111, 
	114, 119, 126, 131, 134, 138, 142, 146, 
	150, 154, 158, 160, 163, 165, 167, 169, 
	171, 173, 175, 177, 179, 181, 183, 185, 
	200, 203, 206, 209, 212, 215, 218, 221, 
	224, 227, 230, 233, 236, 239, 242, 245, 
	262, 264, 266, 268, 270, 272, 274, 276, 
	278, 280, 282, 284, 286, 288, 290, 292, 
	294, 296, 298, 300, 302, 315, 318, 321, 
	324, 327, 330, 333, 336, 339, 342, 345, 
	348, 351, 354, 357, 360, 364, 382, 384, 
	386, 388, 390, 392, 394, 396, 400, 402, 
	404, 406, 408, 410, 412, 414, 416, 418, 
	420, 422, 429, 432, 435, 438, 441, 444, 
	447, 450, 453, 456, 459, 461, 465, 467, 
	469, 471, 473, 475, 477, 479, 481, 483, 
	485, 497, 500, 503, 506, 509, 512, 515, 
	518, 521, 524, 527, 530, 533, 536, 539, 
	542, 545, 548, 551, 554, 557, 560, 563, 
	566, 569, 572, 575, 578, 581, 584, 587, 
	590, 593, 596, 599, 602, 605, 608, 611, 
	614, 617, 620, 623, 626, 629, 632, 636, 
	639, 642, 645, 648, 651, 654, 657, 660, 
	664, 667, 670, 673, 676, 679, 682, 685, 
	688, 691, 694, 697, 700, 703, 706, 709, 
	712, 715, 718, 721, 723, 725, 727, 729, 
	731, 733, 735, 737, 739, 741, 743, 745, 
	747, 749, 751, 753, 755, 770, 773, 776, 
	779, 782, 785, 788, 791, 794, 797, 800, 
	803, 806, 809, 812, 815, 819, 837, 839, 
	841, 843, 845, 847, 849, 851, 853, 855, 
	857, 859, 861, 863, 865, 867, 869, 871, 
	873, 875, 879, 885, 889, 892, 898, 915, 
	918, 922, 925, 928, 931, 934, 937, 940, 
	943, 946, 949, 952, 955, 958, 961, 964, 
	967, 970, 973, 976, 979, 982, 985, 988, 
	991, 994, 997, 1000, 1003, 1006, 1009, 1012, 
	1015, 1018, 1021, 1025, 1028, 1033, 1036, 1039, 
	1042, 1045, 1048, 1051, 1054, 1057, 1060, 1063, 
	1066, 1069, 1072, 1075, 1078, 1081, 1084, 1087, 
	1090, 1093, 1096, 1099, 1102, 1105, 1108, 1111, 
	1114, 1117, 1120, 1123, 1126, 1129, 1132, 1135, 
	1138, 1140, 1142, 1144, 1146, 1148, 1151, 1154, 
	1157, 1160, 1163, 1167, 1170, 1174, 1177, 1180, 
	1183, 1186, 1189, 1192, 1195, 1198, 1201, 1204, 
	1207, 1210, 1213, 1216, 1219, 1222, 1225, 1228, 
	1231, 1234, 1237, 1240, 1243, 1246, 1249, 1252, 
	1255, 1258, 1261, 1264, 1267, 1270, 1274, 1292, 
	1294, 1296, 1298, 1300, 1302, 1305, 1308, 1311, 
	1314, 1317, 1320, 1323, 1326, 1329, 1332, 1335, 
	1338, 1341, 1344, 1347, 1350, 1353, 1356, 1359, 
	1362, 1365, 1368, 1371, 1374, 1377, 1380, 1383, 
	1386, 1389, 1392, 1396, 1399, 1403, 1406, 1409, 
	1412, 1415, 1418, 1421, 1424, 1427, 1430, 1433, 
	1436, 1439, 1442, 1445, 1448, 1451, 1454, 1457, 
	1460, 1463, 1466, 1469, 1472, 1475, 1478, 1481, 
	1484, 1487, 1490, 1493, 1496, 1498, 1500
];

var _lexer_indicies = [
	2, 1, 3, 4, 5, 6, 7, 8, 
	9, 10, 11, 12, 13, 14, 15, 16, 
	1, 0, 2, 1, 3, 4, 5, 6, 
	7, 8, 9, 10, 11, 12, 13, 14, 
	15, 1, 0, 17, 0, 18, 0, 20, 
	21, 19, 23, 24, 22, 27, 26, 28, 
	26, 25, 31, 30, 32, 30, 29, 31, 
	30, 33, 30, 29, 31, 30, 34, 30, 
	29, 36, 35, 35, 0, 2, 37, 37, 
	0, 39, 40, 38, 2, 0, 41, 0, 
	42, 0, 43, 0, 44, 0, 45, 0, 
	46, 0, 47, 0, 48, 0, 49, 0, 
	50, 0, 51, 0, 52, 0, 53, 0, 
	54, 0, 55, 0, 57, 58, 56, 60, 
	61, 59, 0, 0, 0, 0, 62, 63, 
	64, 63, 63, 66, 65, 62, 2, 67, 
	7, 67, 0, 68, 69, 0, 57, 58, 
	70, 56, 60, 61, 71, 59, 60, 61, 
	72, 59, 73, 60, 61, 59, 74, 60, 
	61, 59, 60, 61, 55, 59, 75, 0, 
	76, 77, 0, 78, 0, 79, 0, 75, 
	0, 80, 0, 81, 0, 82, 0, 83, 
	0, 84, 0, 85, 0, 87, 86, 89, 
	88, 89, 90, 91, 92, 93, 91, 94, 
	95, 96, 97, 98, 99, 100, 90, 88, 
	89, 101, 88, 89, 102, 88, 89, 103, 
	88, 89, 104, 88, 89, 105, 88, 89, 
	106, 88, 89, 107, 88, 89, 108, 88, 
	89, 109, 88, 89, 110, 88, 89, 111, 
	88, 89, 112, 88, 89, 113, 88, 89, 
	114, 88, 89, 115, 88, 117, 116, 118, 
	119, 120, 121, 122, 123, 124, 125, 126, 
	127, 128, 129, 130, 116, 0, 131, 0, 
	132, 0, 133, 0, 134, 0, 135, 0, 
	136, 0, 137, 0, 138, 0, 139, 0, 
	140, 0, 141, 0, 142, 0, 143, 0, 
	144, 0, 145, 0, 146, 0, 147, 0, 
	148, 0, 150, 149, 152, 151, 152, 153, 
	154, 155, 156, 154, 157, 158, 159, 160, 
	161, 153, 151, 152, 162, 151, 152, 163, 
	151, 152, 164, 151, 152, 165, 151, 152, 
	166, 151, 152, 167, 151, 152, 168, 151, 
	152, 169, 151, 152, 170, 151, 152, 171, 
	151, 152, 172, 151, 152, 173, 151, 152, 
	174, 151, 152, 175, 151, 152, 176, 151, 
	152, 177, 178, 151, 117, 116, 118, 119, 
	120, 121, 122, 123, 124, 125, 126, 127, 
	128, 129, 179, 130, 116, 0, 180, 0, 
	181, 0, 182, 0, 183, 0, 184, 0, 
	185, 0, 138, 0, 186, 187, 188, 0, 
	189, 0, 190, 0, 191, 0, 192, 0, 
	193, 0, 194, 0, 195, 0, 196, 0, 
	197, 0, 199, 198, 201, 200, 201, 202, 
	203, 204, 203, 202, 200, 201, 205, 200, 
	206, 201, 200, 207, 201, 200, 201, 208, 
	200, 201, 209, 200, 201, 210, 200, 201, 
	211, 200, 201, 212, 200, 201, 213, 200, 
	201, 214, 200, 75, 0, 215, 216, 217, 
	0, 218, 0, 219, 0, 220, 0, 221, 
	0, 222, 0, 223, 0, 224, 0, 225, 
	0, 227, 226, 229, 228, 229, 230, 231, 
	232, 231, 233, 234, 235, 236, 237, 230, 
	228, 229, 238, 228, 229, 239, 228, 229, 
	240, 228, 229, 241, 228, 229, 242, 228, 
	229, 243, 228, 229, 244, 228, 229, 245, 
	228, 229, 246, 228, 229, 247, 228, 229, 
	248, 228, 229, 249, 228, 229, 250, 228, 
	229, 251, 228, 229, 252, 228, 229, 253, 
	228, 229, 254, 228, 229, 255, 228, 229, 
	256, 228, 229, 257, 228, 229, 258, 228, 
	259, 229, 228, 260, 229, 228, 261, 229, 
	228, 262, 229, 228, 229, 263, 228, 229, 
	264, 228, 229, 265, 228, 229, 266, 228, 
	229, 267, 228, 268, 229, 228, 269, 229, 
	228, 229, 270, 228, 271, 229, 228, 272, 
	229, 228, 273, 229, 228, 274, 229, 228, 
	229, 257, 228, 229, 275, 228, 229, 276, 
	228, 229, 277, 228, 229, 278, 228, 229, 
	279, 228, 229, 280, 228, 229, 266, 228, 
	281, 229, 282, 228, 283, 229, 228, 284, 
	229, 228, 285, 229, 228, 229, 286, 228, 
	229, 287, 228, 229, 288, 228, 229, 289, 
	228, 229, 257, 228, 290, 229, 291, 228, 
	292, 229, 228, 229, 293, 228, 229, 294, 
	228, 229, 295, 228, 229, 296, 228, 229, 
	297, 228, 229, 257, 228, 229, 298, 228, 
	229, 299, 228, 300, 229, 228, 257, 229, 
	228, 229, 301, 228, 302, 229, 228, 303, 
	229, 228, 229, 304, 228, 305, 229, 228, 
	306, 229, 228, 307, 229, 228, 257, 229, 
	228, 308, 0, 75, 0, 309, 0, 310, 
	0, 311, 0, 84, 0, 312, 0, 313, 
	0, 314, 0, 315, 0, 316, 0, 317, 
	0, 318, 0, 319, 0, 320, 0, 322, 
	321, 324, 323, 324, 325, 326, 327, 328, 
	326, 329, 330, 331, 332, 333, 334, 335, 
	325, 323, 324, 336, 323, 324, 337, 323, 
	324, 338, 323, 324, 339, 323, 324, 340, 
	323, 324, 341, 323, 324, 342, 323, 324, 
	343, 323, 324, 344, 323, 324, 345, 323, 
	324, 346, 323, 324, 347, 323, 324, 348, 
	323, 324, 349, 323, 324, 350, 323, 324, 
	351, 352, 323, 117, 116, 118, 119, 120, 
	121, 122, 123, 124, 125, 126, 127, 128, 
	129, 353, 130, 116, 0, 354, 0, 355, 
	0, 356, 0, 357, 0, 358, 0, 359, 
	0, 360, 0, 361, 0, 362, 0, 363, 
	0, 364, 0, 365, 0, 366, 0, 75, 
	0, 367, 0, 368, 0, 369, 0, 370, 
	0, 350, 0, 371, 372, 371, 0, 375, 
	374, 376, 377, 374, 373, 0, 379, 380, 
	378, 0, 379, 378, 375, 381, 379, 380, 
	381, 378, 375, 382, 383, 384, 385, 386, 
	387, 388, 389, 390, 391, 392, 393, 394, 
	395, 382, 0, 324, 396, 323, 324, 397, 
	398, 323, 324, 399, 323, 400, 324, 323, 
	396, 324, 323, 324, 401, 323, 324, 402, 
	323, 324, 403, 323, 324, 404, 323, 324, 
	405, 323, 324, 350, 323, 406, 324, 323, 
	407, 324, 323, 408, 324, 323, 409, 324, 
	323, 324, 410, 323, 324, 411, 323, 324, 
	412, 323, 324, 413, 323, 324, 414, 323, 
	415, 324, 323, 416, 324, 323, 324, 417, 
	323, 418, 324, 323, 419, 324, 323, 420, 
	324, 323, 421, 324, 323, 324, 405, 323, 
	324, 422, 323, 324, 423, 323, 324, 424, 
	323, 324, 425, 323, 324, 426, 323, 324, 
	427, 323, 324, 413, 323, 324, 428, 429, 
	323, 324, 396, 323, 430, 324, 431, 432, 
	323, 433, 324, 323, 324, 434, 323, 324, 
	435, 323, 324, 436, 323, 324, 437, 323, 
	324, 438, 323, 324, 405, 323, 324, 439, 
	323, 324, 396, 323, 324, 440, 323, 324, 
	441, 323, 442, 324, 323, 405, 324, 323, 
	324, 443, 323, 444, 324, 323, 445, 324, 
	323, 324, 446, 323, 447, 324, 323, 448, 
	324, 323, 449, 324, 323, 405, 324, 323, 
	324, 450, 323, 324, 451, 323, 324, 452, 
	323, 453, 324, 323, 454, 324, 323, 324, 
	455, 323, 324, 456, 323, 324, 457, 323, 
	324, 458, 323, 324, 459, 323, 324, 460, 
	323, 324, 461, 323, 324, 462, 323, 324, 
	396, 323, 463, 0, 464, 0, 465, 0, 
	466, 0, 176, 0, 152, 467, 151, 152, 
	468, 151, 152, 469, 151, 470, 152, 151, 
	467, 152, 151, 152, 471, 472, 151, 152, 
	467, 151, 473, 152, 474, 151, 475, 152, 
	151, 152, 476, 151, 152, 477, 151, 152, 
	478, 151, 152, 479, 151, 152, 480, 151, 
	152, 481, 151, 152, 176, 151, 152, 482, 
	151, 152, 467, 151, 152, 483, 151, 484, 
	152, 151, 485, 152, 151, 152, 486, 151, 
	487, 152, 151, 488, 152, 151, 489, 152, 
	151, 481, 152, 151, 152, 490, 151, 152, 
	491, 151, 152, 492, 151, 493, 152, 151, 
	494, 152, 151, 152, 495, 151, 152, 496, 
	151, 152, 497, 151, 152, 498, 151, 152, 
	499, 151, 152, 500, 151, 152, 501, 151, 
	152, 502, 151, 152, 467, 151, 89, 503, 
	504, 88, 117, 116, 118, 119, 120, 121, 
	122, 123, 124, 125, 126, 127, 128, 129, 
	505, 130, 116, 0, 506, 0, 507, 0, 
	508, 0, 509, 0, 115, 0, 89, 510, 
	88, 89, 511, 88, 89, 512, 88, 513, 
	89, 88, 510, 89, 88, 514, 89, 88, 
	515, 89, 88, 516, 89, 88, 517, 89, 
	88, 89, 518, 88, 89, 519, 88, 89, 
	520, 88, 89, 521, 88, 89, 522, 88, 
	523, 89, 88, 524, 89, 88, 89, 525, 
	88, 526, 89, 88, 527, 89, 88, 528, 
	89, 88, 529, 89, 88, 89, 530, 88, 
	89, 115, 88, 89, 531, 88, 89, 532, 
	88, 89, 533, 88, 89, 534, 88, 89, 
	535, 88, 89, 536, 88, 89, 521, 88, 
	89, 537, 538, 88, 89, 510, 88, 539, 
	89, 540, 88, 541, 89, 88, 89, 542, 
	88, 89, 543, 88, 89, 544, 88, 89, 
	545, 88, 89, 546, 88, 89, 530, 88, 
	89, 547, 88, 89, 510, 88, 89, 548, 
	88, 549, 89, 88, 550, 89, 88, 89, 
	551, 88, 552, 89, 88, 553, 89, 88, 
	554, 89, 88, 530, 89, 88, 89, 555, 
	88, 89, 556, 88, 89, 557, 88, 558, 
	89, 88, 559, 89, 88, 89, 560, 88, 
	89, 561, 88, 89, 562, 88, 89, 563, 
	88, 89, 564, 88, 89, 565, 88, 89, 
	566, 88, 89, 567, 88, 89, 510, 88, 
	568, 0, 1, 0, 569, 0
];

var _lexer_trans_targs = [
	0, 2, 2, 3, 13, 15, 29, 32, 
	35, 43, 72, 110, 117, 233, 262, 281, 
	476, 4, 5, 6, 7, 6, 6, 7, 
	6, 8, 8, 8, 9, 8, 8, 8, 
	9, 10, 11, 12, 2, 12, 13, 2, 
	14, 16, 17, 18, 19, 20, 21, 22, 
	23, 24, 25, 26, 27, 28, 478, 30, 
	31, 2, 14, 31, 2, 14, 33, 34, 
	2, 33, 32, 34, 36, 42, 37, 38, 
	39, 40, 41, 29, 44, 47, 45, 46, 
	48, 49, 50, 51, 52, 53, 54, 55, 
	54, 55, 55, 2, 56, 70, 405, 413, 
	417, 435, 442, 454, 462, 57, 58, 59, 
	60, 61, 62, 63, 64, 65, 66, 67, 
	68, 69, 2, 71, 2, 2, 3, 13, 
	15, 29, 32, 35, 43, 72, 110, 117, 
	233, 262, 281, 73, 74, 75, 76, 77, 
	78, 79, 80, 81, 82, 83, 84, 85, 
	86, 87, 88, 89, 90, 91, 92, 91, 
	92, 92, 2, 93, 107, 108, 366, 370, 
	383, 391, 94, 95, 96, 97, 98, 99, 
	100, 101, 102, 103, 104, 105, 106, 2, 
	71, 109, 365, 360, 111, 112, 113, 114, 
	115, 116, 118, 140, 141, 119, 120, 121, 
	122, 123, 124, 125, 126, 127, 128, 129, 
	128, 129, 129, 2, 130, 131, 132, 133, 
	134, 135, 136, 137, 138, 139, 71, 142, 
	227, 229, 143, 144, 145, 146, 147, 148, 
	149, 150, 151, 152, 151, 152, 152, 2, 
	153, 167, 174, 191, 198, 219, 154, 155, 
	156, 157, 158, 159, 160, 161, 162, 163, 
	164, 165, 166, 2, 168, 169, 170, 171, 
	172, 173, 71, 175, 176, 177, 178, 179, 
	180, 181, 182, 183, 184, 185, 186, 187, 
	188, 189, 190, 192, 193, 194, 195, 196, 
	197, 199, 207, 200, 201, 202, 203, 204, 
	205, 206, 208, 215, 209, 210, 211, 212, 
	213, 214, 216, 217, 218, 220, 221, 222, 
	223, 224, 225, 226, 228, 230, 231, 232, 
	234, 235, 236, 237, 238, 239, 240, 241, 
	242, 243, 244, 243, 244, 244, 2, 245, 
	259, 260, 288, 298, 315, 322, 338, 346, 
	246, 247, 248, 249, 250, 251, 252, 253, 
	254, 255, 256, 257, 258, 2, 71, 261, 
	287, 276, 263, 264, 265, 266, 267, 268, 
	269, 270, 271, 272, 273, 274, 275, 277, 
	278, 279, 280, 281, 282, 283, 285, 286, 
	284, 282, 283, 284, 282, 285, 286, 3, 
	13, 15, 29, 32, 35, 43, 72, 110, 
	117, 233, 262, 281, 259, 289, 292, 290, 
	291, 293, 294, 295, 296, 297, 299, 300, 
	301, 302, 303, 304, 305, 306, 307, 308, 
	309, 310, 311, 312, 313, 314, 316, 317, 
	318, 319, 320, 321, 323, 324, 325, 332, 
	334, 326, 327, 328, 329, 330, 331, 333, 
	335, 336, 337, 339, 340, 341, 342, 343, 
	344, 345, 347, 348, 349, 350, 351, 352, 
	353, 354, 355, 356, 357, 358, 359, 361, 
	362, 363, 364, 107, 367, 368, 369, 371, 
	372, 373, 381, 374, 375, 376, 377, 378, 
	379, 380, 382, 384, 385, 386, 387, 388, 
	389, 390, 392, 393, 394, 395, 396, 397, 
	398, 399, 400, 401, 402, 403, 404, 406, 
	412, 407, 408, 409, 410, 411, 70, 414, 
	415, 416, 418, 419, 420, 421, 422, 423, 
	424, 425, 426, 427, 428, 429, 430, 431, 
	432, 433, 434, 436, 437, 438, 439, 440, 
	441, 443, 444, 445, 452, 446, 447, 448, 
	449, 450, 451, 453, 455, 456, 457, 458, 
	459, 460, 461, 463, 464, 465, 466, 467, 
	468, 469, 470, 471, 472, 473, 474, 475, 
	477, 0
];

var _lexer_trans_actions = [
	43, 0, 54, 3, 1, 0, 29, 1, 
	29, 29, 29, 29, 29, 29, 29, 35, 
	0, 0, 0, 7, 139, 48, 0, 102, 
	9, 5, 45, 134, 45, 0, 33, 122, 
	33, 33, 0, 11, 106, 0, 0, 114, 
	25, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	57, 149, 126, 0, 110, 23, 0, 27, 
	118, 27, 51, 0, 0, 0, 57, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 57, 144, 
	0, 54, 0, 72, 33, 84, 84, 84, 
	84, 84, 84, 84, 84, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 15, 15, 31, 130, 60, 57, 
	31, 63, 57, 63, 63, 63, 63, 63, 
	63, 63, 66, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 57, 144, 0, 
	54, 0, 78, 33, 84, 84, 84, 84, 
	84, 84, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 19, 
	19, 19, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 57, 144, 
	0, 54, 0, 81, 84, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 21, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 57, 144, 0, 54, 0, 69, 
	33, 84, 84, 84, 84, 84, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 13, 0, 0, 0, 0, 
	0, 0, 13, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 57, 144, 0, 54, 0, 75, 33, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 17, 17, 17, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 37, 37, 54, 
	37, 87, 0, 0, 39, 0, 0, 93, 
	90, 41, 96, 90, 96, 96, 96, 96, 
	96, 96, 96, 99, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 15, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0
];

var _lexer_eof_actions = [
	0, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43
];

var lexer_start = 1;
var lexer_first_final = 478;
var lexer_error = 0;

var lexer_en_main = 1;


/* line 129 "ragel/i18n/cs.js.rl" */

/* line 130 "ragel/i18n/cs.js.rl" */

/* line 131 "ragel/i18n/cs.js.rl" */

/* line 132 "ragel/i18n/cs.js.rl" */

var Lexer = function(listener) {
  // Check that listener has the required functions
  var events = ['comment', 'tag', 'feature', 'background', 'scenario', 'scenario_outline', 'examples', 'step', 'doc_string', 'row', 'eof'];
  for(var i=0, len=events.length; i<len; i++) {
    var event = events[i];
    if(typeof listener[event] != 'function') {
      throw new Error("Error. No " + event + " function exists on " + JSON.stringify(listener));
    }
  }
  this.listener = listener;
};

Lexer.prototype.scan = function(data) {
  var ending = "\n%_FEATURE_END_%";
  if(typeof data == 'string') {
    data = this.stringToBytes(data + ending);
  } else if(typeof Buffer != 'undefined' && Buffer.isBuffer(data)) {
    // Node.js
    var buf = new Buffer(data.length + ending.length);
    data.copy(buf, 0, 0);
    new Buffer(ending).copy(buf, data.length, 0);
    data = buf;
  }
  var eof = pe = data.length;
  var p = 0;

  this.line_number = 1;
  this.last_newline = 0;
  var signedCharValue=function(v){return v > 127 ? v-256 : v; };

  
/* line 871 "js/lib/gherkin/lexer/cs.js" */
{
	  this.cs = lexer_start;
} /* JSCodeGen::writeInit */

/* line 164 "ragel/i18n/cs.js.rl" */
  
/* line 878 "js/lib/gherkin/lexer/cs.js" */
{
	var _klen, _trans, _keys, _ps, _widec, _acts, _nacts;
	var _goto_level, _resume, _eof_trans, _again, _test_eof;
	var _out;
	_klen = _trans = _keys = _acts = _nacts = null;
	_goto_level = 0;
	_resume = 10;
	_eof_trans = 15;
	_again = 20;
	_test_eof = 30;
	_out = 40;
	while (true) {
	_trigger_goto = false;
	if (_goto_level <= 0) {
	if (p == pe) {
		_goto_level = _test_eof;
		continue;
	}
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	}
	if (_goto_level <= _resume) {
	_keys = _lexer_key_offsets[ this.cs];
	_trans = _lexer_index_offsets[ this.cs];
	_klen = _lexer_single_lengths[ this.cs];
	_break_match = false;
	
	do {
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + _klen - 1;

	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + ( (_upper - _lower) >> 1 );

	        if (( signedCharValue(data[p])) < _lexer_trans_keys[_mid]) {
	           _upper = _mid - 1;
	        } else if (( signedCharValue(data[p])) > _lexer_trans_keys[_mid]) {
	           _lower = _mid + 1;
	        } else {
	           _trans += (_mid - _keys);
	           _break_match = true;
	           break;
	        };
	     } /* while */
	     if (_break_match) { break; }
	     _keys += _klen;
	     _trans += _klen;
	  }
	  _klen = _lexer_range_lengths[ this.cs];
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + (_klen << 1) - 2;
	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + (((_upper-_lower) >> 1) & ~1);
	        if (( signedCharValue(data[p])) < _lexer_trans_keys[_mid]) {
	          _upper = _mid - 2;
	         } else if (( signedCharValue(data[p])) > _lexer_trans_keys[_mid+1]) {
	          _lower = _mid + 2;
	        } else {
	          _trans += ((_mid - _keys) >> 1);
	          _break_match = true;
	          break;
	        }
	     } /* while */
	     if (_break_match) { break; }
	     _trans += _klen
	  }
	} while (false);
	_trans = _lexer_indicies[_trans];
	 this.cs = _lexer_trans_targs[_trans];
	if (_lexer_trans_actions[_trans] != 0) {
		_acts = _lexer_trans_actions[_trans];
		_nacts = _lexer_actions[_acts];
		_acts += 1;
		while (_nacts > 0) {
			_nacts -= 1;
			_acts += 1;
			switch (_lexer_actions[_acts - 1]) {
case 0:
/* line 6 "ragel/i18n/cs.js.rl" */

    this.content_start = p;
    this.current_line = this.line_number;
    this.start_col = p - this.last_newline - (this.keyword+':').length;
  		break;
case 1:
/* line 12 "ragel/i18n/cs.js.rl" */

    this.current_line = this.line_number;
    this.start_col = p - this.last_newline;
  		break;
case 2:
/* line 17 "ragel/i18n/cs.js.rl" */

    this.content_start = p;
  		break;
case 3:
/* line 21 "ragel/i18n/cs.js.rl" */

    this.docstring_content_type_start = p;
  		break;
case 4:
/* line 25 "ragel/i18n/cs.js.rl" */

    this.docstring_content_type_end = p;
  		break;
case 5:
/* line 29 "ragel/i18n/cs.js.rl" */

    var con = this.unindent(
      this.start_col, 
      this.bytesToString(data.slice(this.content_start, this.next_keyword_start-1)).replace(/(\r?\n)?([\t ])*$/, '').replace(/\\\"\\\"\\\"/mg, '"""')
    );
    var con_type = this.bytesToString(data.slice(this.docstring_content_type_start, this.docstring_content_type_end)).trim();
    this.listener.doc_string(con_type, con, this.current_line); 
  		break;
case 6:
/* line 38 "ragel/i18n/cs.js.rl" */

    p = this.store_keyword_content('feature', data, p, eof);
  		break;
case 7:
/* line 42 "ragel/i18n/cs.js.rl" */

    p = this.store_keyword_content('background', data, p, eof);
  		break;
case 8:
/* line 46 "ragel/i18n/cs.js.rl" */

    p = this.store_keyword_content('scenario', data, p, eof);
  		break;
case 9:
/* line 50 "ragel/i18n/cs.js.rl" */

    p = this.store_keyword_content('scenario_outline', data, p, eof);
  		break;
case 10:
/* line 54 "ragel/i18n/cs.js.rl" */

    p = this.store_keyword_content('examples', data, p, eof);
  		break;
case 11:
/* line 58 "ragel/i18n/cs.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.step(this.keyword, con, this.current_line);
  		break;
case 12:
/* line 63 "ragel/i18n/cs.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.comment(con, this.line_number);
    this.keyword_start = null;
  		break;
case 13:
/* line 69 "ragel/i18n/cs.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.tag(con, this.line_number);
    this.keyword_start = null;
  		break;
case 14:
/* line 75 "ragel/i18n/cs.js.rl" */

    this.line_number++;
  		break;
case 15:
/* line 79 "ragel/i18n/cs.js.rl" */

    this.last_newline = p + 1;
  		break;
case 16:
/* line 83 "ragel/i18n/cs.js.rl" */

    this.keyword_start = this.keyword_start || p;
  		break;
case 17:
/* line 87 "ragel/i18n/cs.js.rl" */

    this.keyword = this.bytesToString(data.slice(this.keyword_start, p)).replace(/:$/, '');
    this.keyword_start = null;
  		break;
case 18:
/* line 92 "ragel/i18n/cs.js.rl" */

    this.next_keyword_start = p;
  		break;
case 19:
/* line 96 "ragel/i18n/cs.js.rl" */

    p = p - 1;
    current_row = [];
    this.current_line = this.line_number;
  		break;
case 20:
/* line 102 "ragel/i18n/cs.js.rl" */

    this.content_start = p;
  		break;
case 21:
/* line 106 "ragel/i18n/cs.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    current_row.push(con.replace(/\\\|/, "|").replace(/\\n/, "\n").replace(/\\\\/, "\\"));
  		break;
case 22:
/* line 111 "ragel/i18n/cs.js.rl" */

    this.listener.row(current_row, this.current_line);
  		break;
case 23:
/* line 115 "ragel/i18n/cs.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw new Error("Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.");
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 1105 "js/lib/gherkin/lexer/cs.js" */
			} /* action switch */
		}
	}
	if (_trigger_goto) {
		continue;
	}
	}
	if (_goto_level <= _again) {
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	p += 1;
	if (p != pe) {
		_goto_level = _resume;
		continue;
	}
	}
	if (_goto_level <= _test_eof) {
	if (p == eof) {
	__acts = _lexer_eof_actions[ this.cs];
	__nacts =  _lexer_actions[__acts];
	__acts += 1;
	while (__nacts > 0) {
		__nacts -= 1;
		__acts += 1;
		switch (_lexer_actions[__acts - 1]) {
case 23:
/* line 115 "ragel/i18n/cs.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw new Error("Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.");
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 1144 "js/lib/gherkin/lexer/cs.js" */
		} /* eof action switch */
	}
	if (_trigger_goto) {
		continue;
	}
}
	}
	if (_goto_level <= _out) {
		break;
	}
	}
	}

/* line 165 "ragel/i18n/cs.js.rl" */
};


/*
 * Decode utf-8 byte sequence to string.
 */
var decodeUtf8 = function(bytes) {
  var result = "";
  var i = 0;
  var wc;
  var c;

  while (i < bytes.length) {
    /* parse as UTF-8 lead byte */
    wc = bytes[i++];
    if (wc < 0x80) {
      count = 0;
    } else if (wc < 0xC2 || wc >= 0xF8) {
      throw new Error("input is not a valid UTF-8 lead octet");
    } else if (wc < 0xE0) {
      count = 1;
      wc = (wc & 0x1F) << 6;
    } else if (wc < 0xF0) {
      count = 2;
      wc = (wc & 0x0F) << 12;
    } else /* wc < 0xF8 */ {
      count = 3;
      wc = (wc & 0x07) << 18;
    }

    /* parse trail bytes, if any */
    while (count) {
      if (!(i < bytes.length)) {
        throw new Error("short read");
      }
      if ((c = bytes[i++] ^ 0x80) > 0x3F) {
        throw new Error("input is not a valid UTF-8 trail octet");
      }
      wc |= c << (6 * --count);
      if (wc < (1 << (5 * count + 6))) {
        throw new Error("invalid non-minimal encoded input");
      }
    }

    /* handle conversion to UTF-16 if needed */
    if (wc > 0xFFFF) {
      wc -= 0x10000;
      result += String.fromCharCode(0xD800 + (wc >> 10));
      wc = 0xDC00 + (wc & 0x3FF);
    }
    result += String.fromCharCode(wc);
  }

  return result;
};

/*
 * Encode string to an array of bytes using utf8 encoding.
 *
 * Javascript internally stores character data as utf16 (like java).
 * String.charCodeAt() does *not* produce unicode points, but simply
 * reflects this internal representation. Thus, it is necessary
 * to first decode the utf-16 representation before encoding to
 * utf-8.
 */
var encodeUtf8 = function(string) {
  var bytes = [];
  var i = 0;
  var j = 0;
  var wc;

  while (i < string.length) {
    wc = string.charCodeAt(i++);
    if (wc >= 0xD800 && wc <= 0xDBFF && i < string.length && string.charCodeAt(i) >= 0xDC00 && string.charCodeAt(i) <= 0xDFFF) {
      /* decode UTF-16 */
      wc = 0x10000 + ((wc & 0x3FF) << 10) + (string.charCodeAt(i++) & 0x3FF);
    }

    /* emit lead byte */
    if (wc < 0x80) {
      bytes[j++] = wc;
      count = 0;
    } else if (wc < 0x800) {
      bytes[j++] = 0xC0 | (wc >> 6);
      count = 1;
    } else if (wc < 0x10000) {
      bytes[j++] = 0xE0 | (wc >> 12);
      count = 2;
    } else {
      /* SMP: 21-bit Unicode */
      bytes[j++] = 0xF0 | (wc >> 18);
      count = 3;
    }

    /* emit trail bytes, if any */
    while (count) {
      bytes[j++] = 0x80 | ((wc >> (6 * --count)) & 0x3F);
    }
  }

  return bytes;

};

Lexer.prototype.bytesToString = function(bytes) {
  if(typeof bytes.write == 'function') {
    // Node.js
    return bytes.toString('utf-8');
  }
  return decodeUtf8(bytes);
};

Lexer.prototype.stringToBytes = function(string) {
  return encodeUtf8(string);
};

Lexer.prototype.unindent = function(startcol, text) {
  startcol = startcol || 0;
  return text.replace(new RegExp('^[\t ]{0,' + startcol + '}', 'gm'), ''); 
};

Lexer.prototype.store_keyword_content = function(event, data, p, eof) {
  var end_point = (!this.next_keyword_start || (p == eof)) ? p : this.next_keyword_start;
  var content = this.unindent(this.start_col + 2, this.bytesToString(data.slice(this.content_start, end_point))).replace(/\s+$/,"");
  var content_lines = content.split("\n")
  var name = content_lines.shift() || "";
  name = name.trim();
  var description = content_lines.join("\n");
  this.listener[event](this.keyword, name, description, this.current_line);
  var nks = this.next_keyword_start;
  this.next_keyword_start = null;
  return nks ? nks - 1 : p;
};

Lexer.prototype.current_line_content = function(data, p) {
  var rest = Array.prototype.slice.call(data,this.last_newline, -1);
  var end = rest.indexOf(10) || -1;
  return this.bytesToString(rest.slice(0, end)).trim();
};

// Node.js export
if(typeof module !== 'undefined') {
  module.exports = Lexer;
}
// Require.js export
if (typeof define !== 'undefined') {
  if(define.amd) {
    define('gherkin/lexer/cs', [], function() {
      return Lexer;
    });
  } else {
    define('gherkin/lexer/cs', function(require, exports, module) {
      exports.Lexer = Lexer;
    });
  }
}

})();

}).call(this,require("buffer").Buffer)

},{"buffer":69}],190:[function(require,module,exports){
(function (Buffer){

/* line 1 "ragel/i18n/cy_gb.js.rl" */
;(function() {


/* line 126 "ragel/i18n/cy_gb.js.rl" */



/* line 11 "js/lib/gherkin/lexer/cy_gb.js" */
var _lexer_actions = [
	0, 1, 0, 1, 1, 1, 2, 1, 
	3, 1, 4, 1, 5, 1, 6, 1, 
	7, 1, 8, 1, 9, 1, 10, 1, 
	11, 1, 12, 1, 13, 1, 16, 1, 
	17, 1, 18, 1, 19, 1, 20, 1, 
	21, 1, 22, 1, 23, 2, 2, 18, 
	2, 3, 4, 2, 13, 0, 2, 14, 
	15, 2, 17, 0, 2, 17, 1, 2, 
	17, 16, 2, 17, 19, 2, 18, 6, 
	2, 18, 7, 2, 18, 8, 2, 18, 
	9, 2, 18, 10, 2, 18, 16, 2, 
	20, 21, 2, 22, 0, 2, 22, 1, 
	2, 22, 16, 2, 22, 19, 3, 4, 
	14, 15, 3, 5, 14, 15, 3, 11, 
	14, 15, 3, 12, 14, 15, 3, 13, 
	14, 15, 3, 14, 15, 18, 3, 17, 
	0, 11, 3, 17, 14, 15, 4, 2, 
	14, 15, 18, 4, 3, 4, 14, 15, 
	4, 17, 0, 14, 15, 5, 17, 0, 
	11, 14, 15
];

var _lexer_key_offsets = [
	0, 0, 18, 35, 36, 37, 39, 41, 
	46, 51, 56, 61, 65, 69, 71, 72, 
	73, 74, 75, 76, 77, 78, 79, 80, 
	81, 82, 83, 84, 85, 86, 87, 89, 
	91, 96, 103, 108, 111, 112, 113, 114, 
	115, 116, 117, 118, 119, 120, 121, 122, 
	123, 124, 125, 126, 127, 128, 139, 141, 
	143, 145, 147, 149, 151, 153, 155, 157, 
	159, 161, 163, 165, 167, 169, 171, 173, 
	175, 177, 179, 196, 197, 198, 199, 200, 
	201, 202, 203, 204, 205, 218, 220, 222, 
	224, 226, 228, 230, 232, 234, 236, 238, 
	240, 242, 244, 246, 248, 252, 254, 256, 
	258, 260, 262, 264, 266, 268, 270, 272, 
	274, 276, 278, 280, 282, 284, 286, 288, 
	290, 292, 294, 296, 298, 300, 302, 304, 
	307, 309, 311, 313, 315, 317, 319, 321, 
	323, 325, 327, 329, 330, 331, 332, 333, 
	334, 335, 336, 337, 338, 339, 340, 341, 
	342, 343, 344, 351, 353, 355, 357, 359, 
	361, 363, 364, 365, 366, 367, 368, 369, 
	370, 371, 372, 373, 374, 376, 377, 378, 
	379, 380, 381, 382, 383, 384, 385, 386, 
	387, 388, 389, 402, 404, 406, 408, 410, 
	412, 414, 416, 418, 420, 422, 424, 426, 
	428, 430, 432, 436, 438, 440, 442, 444, 
	446, 448, 450, 452, 454, 456, 458, 460, 
	462, 464, 466, 468, 470, 472, 474, 476, 
	478, 480, 482, 484, 486, 488, 490, 491, 
	492, 506, 508, 510, 512, 514, 516, 518, 
	520, 522, 524, 526, 528, 530, 532, 534, 
	536, 540, 542, 544, 546, 548, 550, 552, 
	554, 556, 558, 560, 562, 564, 566, 568, 
	570, 572, 574, 576, 578, 580, 582, 584, 
	586, 588, 590, 592, 594, 596, 598, 600, 
	602, 604, 607, 609, 611, 613, 615, 617, 
	619, 621, 623, 625, 627, 629, 630, 634, 
	640, 643, 645, 651, 668, 670, 672, 674, 
	676, 678, 680, 682, 684, 686, 688, 690, 
	692, 694, 696, 698, 700, 702, 704, 706, 
	708, 710, 712, 714, 716, 718, 721, 723, 
	725, 727, 729, 731, 733, 735, 737, 739, 
	741, 742, 743
];

var _lexer_trans_keys = [
	10, 32, 34, 35, 37, 42, 64, 65, 
	67, 69, 79, 80, 83, 89, 124, 239, 
	9, 13, 10, 32, 34, 35, 37, 42, 
	64, 65, 67, 69, 79, 80, 83, 89, 
	124, 9, 13, 34, 34, 10, 13, 10, 
	13, 10, 32, 34, 9, 13, 10, 32, 
	34, 9, 13, 10, 32, 34, 9, 13, 
	10, 32, 34, 9, 13, 10, 32, 9, 
	13, 10, 32, 9, 13, 10, 13, 10, 
	95, 70, 69, 65, 84, 85, 82, 69, 
	95, 69, 78, 68, 95, 37, 32, 10, 
	13, 10, 13, 13, 32, 64, 9, 10, 
	9, 10, 13, 32, 64, 11, 12, 10, 
	32, 64, 9, 13, 32, 110, 114, 114, 
	104, 101, 103, 101, 100, 105, 103, 32, 
	97, 119, 101, 100, 100, 58, 10, 10, 
	10, 32, 35, 37, 64, 65, 67, 69, 
	83, 9, 13, 10, 95, 10, 70, 10, 
	69, 10, 65, 10, 84, 10, 85, 10, 
	82, 10, 69, 10, 95, 10, 69, 10, 
	78, 10, 68, 10, 95, 10, 37, 10, 
	114, 10, 119, 10, 101, 10, 100, 10, 
	100, 10, 58, 10, 32, 34, 35, 37, 
	42, 64, 65, 67, 69, 79, 80, 83, 
	89, 124, 9, 13, 101, 102, 110, 100, 
	105, 114, 58, 10, 10, 10, 32, 35, 
	37, 42, 64, 65, 79, 80, 83, 89, 
	9, 13, 10, 95, 10, 70, 10, 69, 
	10, 65, 10, 84, 10, 85, 10, 82, 
	10, 69, 10, 95, 10, 69, 10, 78, 
	10, 68, 10, 95, 10, 37, 10, 32, 
	10, 32, 110, 114, 10, 114, 10, 104, 
	10, 101, 10, 103, 10, 101, 10, 100, 
	10, 105, 10, 103, 10, 32, 10, 97, 
	10, 119, 10, 101, 10, 100, 10, 100, 
	10, 58, 10, 110, 10, 100, 10, 114, 
	10, 121, 10, 99, 10, 101, 10, 110, 
	10, 97, 10, 114, 10, 105, 10, 111, 
	10, 32, 58, 10, 65, 10, 109, 10, 
	108, 10, 105, 10, 110, 10, 101, 10, 
	108, 10, 108, 10, 111, 10, 108, 10, 
	110, 110, 103, 104, 114, 101, 105, 102, 
	102, 116, 105, 97, 117, 58, 10, 10, 
	10, 32, 35, 65, 124, 9, 13, 10, 
	114, 10, 119, 10, 101, 10, 100, 10, 
	100, 10, 58, 110, 100, 114, 121, 99, 
	101, 110, 97, 114, 105, 111, 32, 58, 
	65, 109, 108, 105, 110, 101, 108, 108, 
	111, 108, 58, 10, 10, 10, 32, 35, 
	37, 42, 64, 65, 79, 80, 83, 89, 
	9, 13, 10, 95, 10, 70, 10, 69, 
	10, 65, 10, 84, 10, 85, 10, 82, 
	10, 69, 10, 95, 10, 69, 10, 78, 
	10, 68, 10, 95, 10, 37, 10, 32, 
	10, 32, 110, 114, 10, 114, 10, 104, 
	10, 101, 10, 103, 10, 101, 10, 100, 
	10, 105, 10, 103, 10, 32, 10, 97, 
	10, 119, 10, 101, 10, 100, 10, 100, 
	10, 58, 10, 110, 10, 100, 10, 114, 
	10, 121, 10, 99, 10, 101, 10, 110, 
	10, 97, 10, 114, 10, 105, 10, 111, 
	10, 110, 10, 10, 10, 32, 35, 37, 
	42, 64, 65, 67, 79, 80, 83, 89, 
	9, 13, 10, 95, 10, 70, 10, 69, 
	10, 65, 10, 84, 10, 85, 10, 82, 
	10, 69, 10, 95, 10, 69, 10, 78, 
	10, 68, 10, 95, 10, 37, 10, 32, 
	10, 32, 110, 114, 10, 114, 10, 104, 
	10, 101, 10, 103, 10, 101, 10, 100, 
	10, 105, 10, 103, 10, 32, 10, 97, 
	10, 119, 10, 101, 10, 100, 10, 100, 
	10, 58, 10, 101, 10, 102, 10, 110, 
	10, 100, 10, 105, 10, 114, 10, 110, 
	10, 100, 10, 114, 10, 121, 10, 99, 
	10, 101, 10, 110, 10, 97, 10, 114, 
	10, 105, 10, 111, 10, 32, 58, 10, 
	65, 10, 109, 10, 108, 10, 105, 10, 
	110, 10, 101, 10, 108, 10, 108, 10, 
	111, 10, 108, 10, 110, 110, 32, 124, 
	9, 13, 10, 32, 92, 124, 9, 13, 
	10, 92, 124, 10, 92, 10, 32, 92, 
	124, 9, 13, 10, 32, 34, 35, 37, 
	42, 64, 65, 67, 69, 79, 80, 83, 
	89, 124, 9, 13, 10, 101, 10, 102, 
	10, 110, 10, 100, 10, 105, 10, 114, 
	10, 110, 10, 103, 10, 104, 10, 114, 
	10, 101, 10, 105, 10, 102, 10, 102, 
	10, 116, 10, 105, 10, 97, 10, 117, 
	10, 99, 10, 101, 10, 110, 10, 97, 
	10, 114, 10, 105, 10, 111, 10, 32, 
	58, 10, 65, 10, 109, 10, 108, 10, 
	105, 10, 110, 10, 101, 10, 108, 10, 
	108, 10, 111, 10, 108, 187, 191, 0
];

var _lexer_single_lengths = [
	0, 16, 15, 1, 1, 2, 2, 3, 
	3, 3, 3, 2, 2, 2, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 2, 2, 
	3, 5, 3, 3, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 9, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 15, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 11, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 4, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 3, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 5, 2, 2, 2, 2, 2, 
	2, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 2, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 11, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 4, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 1, 1, 
	12, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	4, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 3, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 1, 2, 4, 
	3, 2, 4, 15, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 3, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	1, 1, 0
];

var _lexer_range_lengths = [
	0, 1, 1, 0, 0, 0, 0, 1, 
	1, 1, 1, 1, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 1, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 1, 
	0, 0, 1, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0
];

var _lexer_index_offsets = [
	0, 0, 18, 35, 37, 39, 42, 45, 
	50, 55, 60, 65, 69, 73, 76, 78, 
	80, 82, 84, 86, 88, 90, 92, 94, 
	96, 98, 100, 102, 104, 106, 108, 111, 
	114, 119, 126, 131, 135, 137, 139, 141, 
	143, 145, 147, 149, 151, 153, 155, 157, 
	159, 161, 163, 165, 167, 169, 180, 183, 
	186, 189, 192, 195, 198, 201, 204, 207, 
	210, 213, 216, 219, 222, 225, 228, 231, 
	234, 237, 240, 257, 259, 261, 263, 265, 
	267, 269, 271, 273, 275, 288, 291, 294, 
	297, 300, 303, 306, 309, 312, 315, 318, 
	321, 324, 327, 330, 333, 338, 341, 344, 
	347, 350, 353, 356, 359, 362, 365, 368, 
	371, 374, 377, 380, 383, 386, 389, 392, 
	395, 398, 401, 404, 407, 410, 413, 416, 
	420, 423, 426, 429, 432, 435, 438, 441, 
	444, 447, 450, 453, 455, 457, 459, 461, 
	463, 465, 467, 469, 471, 473, 475, 477, 
	479, 481, 483, 490, 493, 496, 499, 502, 
	505, 508, 510, 512, 514, 516, 518, 520, 
	522, 524, 526, 528, 530, 533, 535, 537, 
	539, 541, 543, 545, 547, 549, 551, 553, 
	555, 557, 559, 572, 575, 578, 581, 584, 
	587, 590, 593, 596, 599, 602, 605, 608, 
	611, 614, 617, 622, 625, 628, 631, 634, 
	637, 640, 643, 646, 649, 652, 655, 658, 
	661, 664, 667, 670, 673, 676, 679, 682, 
	685, 688, 691, 694, 697, 700, 703, 705, 
	707, 721, 724, 727, 730, 733, 736, 739, 
	742, 745, 748, 751, 754, 757, 760, 763, 
	766, 771, 774, 777, 780, 783, 786, 789, 
	792, 795, 798, 801, 804, 807, 810, 813, 
	816, 819, 822, 825, 828, 831, 834, 837, 
	840, 843, 846, 849, 852, 855, 858, 861, 
	864, 867, 871, 874, 877, 880, 883, 886, 
	889, 892, 895, 898, 901, 904, 906, 910, 
	916, 920, 923, 929, 946, 949, 952, 955, 
	958, 961, 964, 967, 970, 973, 976, 979, 
	982, 985, 988, 991, 994, 997, 1000, 1003, 
	1006, 1009, 1012, 1015, 1018, 1021, 1025, 1028, 
	1031, 1034, 1037, 1040, 1043, 1046, 1049, 1052, 
	1055, 1057, 1059
];

var _lexer_indicies = [
	2, 1, 3, 4, 5, 6, 7, 8, 
	9, 10, 11, 12, 13, 14, 15, 16, 
	1, 0, 2, 1, 3, 4, 5, 6, 
	7, 8, 9, 10, 11, 12, 13, 14, 
	15, 1, 0, 17, 0, 18, 0, 20, 
	21, 19, 23, 24, 22, 27, 26, 28, 
	26, 25, 31, 30, 32, 30, 29, 31, 
	30, 33, 30, 29, 31, 30, 34, 30, 
	29, 36, 35, 35, 0, 2, 37, 37, 
	0, 39, 40, 38, 2, 0, 41, 0, 
	42, 0, 43, 0, 44, 0, 45, 0, 
	46, 0, 47, 0, 48, 0, 49, 0, 
	50, 0, 51, 0, 52, 0, 53, 0, 
	54, 0, 55, 0, 57, 58, 56, 60, 
	61, 59, 0, 0, 0, 0, 62, 63, 
	64, 63, 63, 66, 65, 62, 2, 67, 
	7, 67, 0, 55, 68, 69, 0, 70, 
	0, 71, 0, 72, 0, 73, 0, 74, 
	0, 75, 0, 76, 0, 77, 0, 78, 
	0, 79, 0, 80, 0, 81, 0, 82, 
	0, 83, 0, 84, 0, 86, 85, 88, 
	87, 88, 89, 90, 91, 90, 92, 93, 
	94, 95, 89, 87, 88, 96, 87, 88, 
	97, 87, 88, 98, 87, 88, 99, 87, 
	88, 100, 87, 88, 101, 87, 88, 102, 
	87, 88, 103, 87, 88, 104, 87, 88, 
	105, 87, 88, 106, 87, 88, 107, 87, 
	88, 108, 87, 88, 109, 87, 88, 110, 
	87, 88, 111, 87, 88, 112, 87, 88, 
	113, 87, 88, 114, 87, 88, 115, 87, 
	117, 116, 118, 119, 120, 121, 122, 123, 
	124, 125, 126, 127, 128, 129, 130, 116, 
	0, 131, 0, 132, 0, 133, 0, 134, 
	0, 135, 0, 136, 0, 137, 0, 139, 
	138, 141, 140, 141, 142, 143, 144, 145, 
	143, 146, 147, 148, 149, 150, 142, 140, 
	141, 151, 140, 141, 152, 140, 141, 153, 
	140, 141, 154, 140, 141, 155, 140, 141, 
	156, 140, 141, 157, 140, 141, 158, 140, 
	141, 159, 140, 141, 160, 140, 141, 161, 
	140, 141, 162, 140, 141, 163, 140, 141, 
	164, 140, 141, 165, 140, 141, 165, 166, 
	167, 140, 141, 168, 140, 141, 169, 140, 
	141, 170, 140, 141, 171, 140, 141, 172, 
	140, 141, 173, 140, 141, 174, 140, 141, 
	175, 140, 141, 176, 140, 141, 177, 140, 
	141, 178, 140, 141, 179, 140, 141, 180, 
	140, 141, 181, 140, 141, 165, 140, 141, 
	182, 140, 141, 177, 140, 141, 183, 140, 
	141, 182, 140, 141, 184, 140, 141, 185, 
	140, 141, 186, 140, 141, 187, 140, 141, 
	188, 140, 141, 189, 140, 141, 190, 140, 
	141, 191, 165, 140, 141, 192, 140, 141, 
	193, 140, 141, 194, 140, 141, 195, 140, 
	141, 196, 140, 141, 197, 140, 141, 198, 
	140, 141, 199, 140, 141, 200, 140, 141, 
	181, 140, 141, 176, 140, 201, 0, 202, 
	0, 203, 0, 204, 0, 205, 0, 206, 
	0, 207, 0, 208, 0, 209, 0, 210, 
	0, 211, 0, 212, 0, 213, 0, 215, 
	214, 217, 216, 217, 218, 219, 220, 219, 
	218, 216, 217, 221, 216, 217, 222, 216, 
	217, 223, 216, 217, 224, 216, 217, 225, 
	216, 217, 226, 216, 227, 0, 79, 0, 
	228, 0, 227, 0, 229, 0, 230, 0, 
	231, 0, 232, 0, 233, 0, 234, 0, 
	235, 0, 236, 237, 0, 238, 0, 239, 
	0, 240, 0, 241, 0, 242, 0, 243, 
	0, 244, 0, 245, 0, 246, 0, 247, 
	0, 248, 0, 250, 249, 252, 251, 252, 
	253, 254, 255, 256, 254, 257, 258, 259, 
	260, 261, 253, 251, 252, 262, 251, 252, 
	263, 251, 252, 264, 251, 252, 265, 251, 
	252, 266, 251, 252, 267, 251, 252, 268, 
	251, 252, 269, 251, 252, 270, 251, 252, 
	271, 251, 252, 272, 251, 252, 273, 251, 
	252, 274, 251, 252, 275, 251, 252, 276, 
	251, 252, 276, 277, 278, 251, 252, 279, 
	251, 252, 280, 251, 252, 281, 251, 252, 
	282, 251, 252, 283, 251, 252, 284, 251, 
	252, 285, 251, 252, 286, 251, 252, 287, 
	251, 252, 288, 251, 252, 289, 251, 252, 
	290, 251, 252, 291, 251, 252, 292, 251, 
	252, 276, 251, 252, 293, 251, 252, 288, 
	251, 252, 294, 251, 252, 293, 251, 252, 
	295, 251, 252, 296, 251, 252, 297, 251, 
	252, 298, 251, 252, 299, 251, 252, 300, 
	251, 252, 292, 251, 252, 287, 251, 302, 
	301, 304, 303, 304, 305, 306, 307, 308, 
	306, 309, 310, 311, 312, 313, 314, 305, 
	303, 304, 315, 303, 304, 316, 303, 304, 
	317, 303, 304, 318, 303, 304, 319, 303, 
	304, 320, 303, 304, 321, 303, 304, 322, 
	303, 304, 323, 303, 304, 324, 303, 304, 
	325, 303, 304, 326, 303, 304, 327, 303, 
	304, 328, 303, 304, 329, 303, 304, 329, 
	330, 331, 303, 304, 332, 303, 304, 333, 
	303, 304, 334, 303, 304, 335, 303, 304, 
	336, 303, 304, 337, 303, 304, 338, 303, 
	304, 339, 303, 304, 340, 303, 304, 341, 
	303, 304, 342, 303, 304, 343, 303, 304, 
	344, 303, 304, 345, 303, 304, 329, 303, 
	304, 346, 303, 304, 347, 303, 304, 348, 
	303, 304, 349, 303, 304, 350, 303, 304, 
	345, 303, 304, 351, 303, 304, 341, 303, 
	304, 352, 303, 304, 351, 303, 304, 353, 
	303, 304, 354, 303, 304, 355, 303, 304, 
	356, 303, 304, 357, 303, 304, 358, 303, 
	304, 359, 303, 304, 360, 329, 303, 304, 
	361, 303, 304, 362, 303, 304, 363, 303, 
	304, 364, 303, 304, 365, 303, 304, 366, 
	303, 304, 367, 303, 304, 368, 303, 304, 
	369, 303, 304, 345, 303, 304, 340, 303, 
	78, 0, 370, 371, 370, 0, 374, 373, 
	375, 376, 373, 372, 0, 378, 379, 377, 
	0, 378, 377, 374, 380, 378, 379, 380, 
	377, 374, 381, 382, 383, 384, 385, 386, 
	387, 388, 389, 390, 391, 392, 393, 394, 
	381, 0, 88, 395, 87, 88, 396, 87, 
	88, 397, 87, 88, 398, 87, 88, 399, 
	87, 88, 114, 87, 88, 400, 87, 88, 
	401, 87, 88, 402, 87, 88, 403, 87, 
	88, 404, 87, 88, 405, 87, 88, 406, 
	87, 88, 407, 87, 88, 408, 87, 88, 
	409, 87, 88, 410, 87, 88, 114, 87, 
	88, 411, 87, 88, 412, 87, 88, 413, 
	87, 88, 414, 87, 88, 415, 87, 88, 
	416, 87, 88, 417, 87, 88, 418, 115, 
	87, 88, 419, 87, 88, 420, 87, 88, 
	421, 87, 88, 422, 87, 88, 423, 87, 
	88, 424, 87, 88, 425, 87, 88, 426, 
	87, 88, 427, 87, 88, 114, 87, 428, 
	0, 1, 0, 429, 0
];

var _lexer_trans_targs = [
	0, 2, 2, 3, 13, 15, 29, 32, 
	35, 75, 139, 161, 163, 165, 293, 294, 
	336, 4, 5, 6, 7, 6, 6, 7, 
	6, 8, 8, 8, 9, 8, 8, 8, 
	9, 10, 11, 12, 2, 12, 13, 2, 
	14, 16, 17, 18, 19, 20, 21, 22, 
	23, 24, 25, 26, 27, 28, 338, 30, 
	31, 2, 14, 31, 2, 14, 33, 34, 
	2, 33, 32, 34, 36, 46, 37, 38, 
	39, 40, 41, 42, 43, 44, 45, 29, 
	47, 48, 49, 50, 51, 52, 53, 52, 
	53, 53, 2, 54, 68, 300, 306, 318, 
	55, 56, 57, 58, 59, 60, 61, 62, 
	63, 64, 65, 66, 67, 2, 69, 70, 
	71, 72, 73, 74, 2, 2, 3, 13, 
	15, 29, 32, 35, 75, 139, 161, 163, 
	165, 293, 294, 76, 77, 78, 79, 80, 
	81, 82, 83, 84, 83, 84, 84, 2, 
	85, 99, 100, 116, 118, 120, 138, 86, 
	87, 88, 89, 90, 91, 92, 93, 94, 
	95, 96, 97, 98, 2, 74, 101, 111, 
	102, 103, 104, 105, 106, 107, 108, 109, 
	110, 99, 112, 113, 114, 115, 117, 119, 
	121, 122, 123, 124, 125, 126, 127, 128, 
	129, 130, 131, 132, 133, 134, 135, 136, 
	137, 140, 141, 142, 143, 144, 145, 146, 
	147, 148, 149, 150, 151, 152, 153, 154, 
	153, 154, 154, 2, 155, 156, 157, 158, 
	159, 160, 74, 162, 164, 166, 167, 168, 
	169, 170, 171, 172, 173, 230, 174, 175, 
	176, 177, 178, 179, 180, 181, 182, 183, 
	184, 185, 186, 185, 186, 186, 2, 187, 
	201, 202, 218, 220, 222, 229, 188, 189, 
	190, 191, 192, 193, 194, 195, 196, 197, 
	198, 199, 200, 2, 74, 203, 213, 204, 
	205, 206, 207, 208, 209, 210, 211, 212, 
	201, 214, 215, 216, 217, 219, 221, 223, 
	224, 225, 226, 227, 228, 231, 232, 231, 
	232, 232, 2, 233, 247, 248, 264, 270, 
	272, 274, 292, 234, 235, 236, 237, 238, 
	239, 240, 241, 242, 243, 244, 245, 246, 
	2, 74, 249, 259, 250, 251, 252, 253, 
	254, 255, 256, 257, 258, 247, 260, 261, 
	262, 263, 265, 266, 267, 268, 269, 271, 
	273, 275, 276, 277, 278, 279, 280, 281, 
	282, 283, 284, 285, 286, 287, 288, 289, 
	290, 291, 294, 295, 296, 298, 299, 297, 
	295, 296, 297, 295, 298, 299, 3, 13, 
	15, 29, 32, 35, 75, 139, 161, 163, 
	165, 293, 294, 301, 302, 303, 304, 305, 
	307, 308, 309, 310, 311, 312, 313, 314, 
	315, 316, 317, 319, 320, 321, 322, 323, 
	324, 325, 326, 327, 328, 329, 330, 331, 
	332, 333, 334, 335, 337, 0
];

var _lexer_trans_actions = [
	43, 0, 54, 3, 1, 0, 29, 1, 
	29, 29, 29, 29, 29, 29, 29, 35, 
	0, 0, 0, 7, 139, 48, 0, 102, 
	9, 5, 45, 134, 45, 0, 33, 122, 
	33, 33, 0, 11, 106, 0, 0, 114, 
	25, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	57, 149, 126, 0, 110, 23, 0, 27, 
	118, 27, 51, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 57, 144, 0, 
	54, 0, 69, 33, 84, 84, 84, 84, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 13, 0, 0, 
	0, 0, 0, 13, 31, 130, 60, 57, 
	31, 63, 57, 63, 63, 63, 63, 63, 
	63, 63, 66, 0, 0, 0, 0, 0, 
	0, 0, 57, 144, 0, 54, 0, 72, 
	33, 84, 84, 84, 84, 84, 84, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 15, 15, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 57, 144, 
	0, 54, 0, 81, 84, 0, 0, 0, 
	0, 0, 21, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 57, 144, 0, 54, 0, 78, 33, 
	84, 84, 84, 84, 84, 84, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 19, 19, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 57, 144, 0, 
	54, 0, 75, 33, 84, 84, 84, 84, 
	84, 84, 84, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	17, 17, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 37, 37, 54, 37, 
	87, 0, 0, 39, 0, 0, 93, 90, 
	41, 96, 90, 96, 96, 96, 96, 96, 
	96, 96, 99, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0
];

var _lexer_eof_actions = [
	0, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43
];

var lexer_start = 1;
var lexer_first_final = 338;
var lexer_error = 0;

var lexer_en_main = 1;


/* line 129 "ragel/i18n/cy_gb.js.rl" */

/* line 130 "ragel/i18n/cy_gb.js.rl" */

/* line 131 "ragel/i18n/cy_gb.js.rl" */

/* line 132 "ragel/i18n/cy_gb.js.rl" */

var Lexer = function(listener) {
  // Check that listener has the required functions
  var events = ['comment', 'tag', 'feature', 'background', 'scenario', 'scenario_outline', 'examples', 'step', 'doc_string', 'row', 'eof'];
  for(var i=0, len=events.length; i<len; i++) {
    var event = events[i];
    if(typeof listener[event] != 'function') {
      throw new Error("Error. No " + event + " function exists on " + JSON.stringify(listener));
    }
  }
  this.listener = listener;
};

Lexer.prototype.scan = function(data) {
  var ending = "\n%_FEATURE_END_%";
  if(typeof data == 'string') {
    data = this.stringToBytes(data + ending);
  } else if(typeof Buffer != 'undefined' && Buffer.isBuffer(data)) {
    // Node.js
    var buf = new Buffer(data.length + ending.length);
    data.copy(buf, 0, 0);
    new Buffer(ending).copy(buf, data.length, 0);
    data = buf;
  }
  var eof = pe = data.length;
  var p = 0;

  this.line_number = 1;
  this.last_newline = 0;
  var signedCharValue=function(v){return v > 127 ? v-256 : v; };

  
/* line 657 "js/lib/gherkin/lexer/cy_gb.js" */
{
	  this.cs = lexer_start;
} /* JSCodeGen::writeInit */

/* line 164 "ragel/i18n/cy_gb.js.rl" */
  
/* line 664 "js/lib/gherkin/lexer/cy_gb.js" */
{
	var _klen, _trans, _keys, _ps, _widec, _acts, _nacts;
	var _goto_level, _resume, _eof_trans, _again, _test_eof;
	var _out;
	_klen = _trans = _keys = _acts = _nacts = null;
	_goto_level = 0;
	_resume = 10;
	_eof_trans = 15;
	_again = 20;
	_test_eof = 30;
	_out = 40;
	while (true) {
	_trigger_goto = false;
	if (_goto_level <= 0) {
	if (p == pe) {
		_goto_level = _test_eof;
		continue;
	}
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	}
	if (_goto_level <= _resume) {
	_keys = _lexer_key_offsets[ this.cs];
	_trans = _lexer_index_offsets[ this.cs];
	_klen = _lexer_single_lengths[ this.cs];
	_break_match = false;
	
	do {
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + _klen - 1;

	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + ( (_upper - _lower) >> 1 );

	        if (( signedCharValue(data[p])) < _lexer_trans_keys[_mid]) {
	           _upper = _mid - 1;
	        } else if (( signedCharValue(data[p])) > _lexer_trans_keys[_mid]) {
	           _lower = _mid + 1;
	        } else {
	           _trans += (_mid - _keys);
	           _break_match = true;
	           break;
	        };
	     } /* while */
	     if (_break_match) { break; }
	     _keys += _klen;
	     _trans += _klen;
	  }
	  _klen = _lexer_range_lengths[ this.cs];
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + (_klen << 1) - 2;
	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + (((_upper-_lower) >> 1) & ~1);
	        if (( signedCharValue(data[p])) < _lexer_trans_keys[_mid]) {
	          _upper = _mid - 2;
	         } else if (( signedCharValue(data[p])) > _lexer_trans_keys[_mid+1]) {
	          _lower = _mid + 2;
	        } else {
	          _trans += ((_mid - _keys) >> 1);
	          _break_match = true;
	          break;
	        }
	     } /* while */
	     if (_break_match) { break; }
	     _trans += _klen
	  }
	} while (false);
	_trans = _lexer_indicies[_trans];
	 this.cs = _lexer_trans_targs[_trans];
	if (_lexer_trans_actions[_trans] != 0) {
		_acts = _lexer_trans_actions[_trans];
		_nacts = _lexer_actions[_acts];
		_acts += 1;
		while (_nacts > 0) {
			_nacts -= 1;
			_acts += 1;
			switch (_lexer_actions[_acts - 1]) {
case 0:
/* line 6 "ragel/i18n/cy_gb.js.rl" */

    this.content_start = p;
    this.current_line = this.line_number;
    this.start_col = p - this.last_newline - (this.keyword+':').length;
  		break;
case 1:
/* line 12 "ragel/i18n/cy_gb.js.rl" */

    this.current_line = this.line_number;
    this.start_col = p - this.last_newline;
  		break;
case 2:
/* line 17 "ragel/i18n/cy_gb.js.rl" */

    this.content_start = p;
  		break;
case 3:
/* line 21 "ragel/i18n/cy_gb.js.rl" */

    this.docstring_content_type_start = p;
  		break;
case 4:
/* line 25 "ragel/i18n/cy_gb.js.rl" */

    this.docstring_content_type_end = p;
  		break;
case 5:
/* line 29 "ragel/i18n/cy_gb.js.rl" */

    var con = this.unindent(
      this.start_col, 
      this.bytesToString(data.slice(this.content_start, this.next_keyword_start-1)).replace(/(\r?\n)?([\t ])*$/, '').replace(/\\\"\\\"\\\"/mg, '"""')
    );
    var con_type = this.bytesToString(data.slice(this.docstring_content_type_start, this.docstring_content_type_end)).trim();
    this.listener.doc_string(con_type, con, this.current_line); 
  		break;
case 6:
/* line 38 "ragel/i18n/cy_gb.js.rl" */

    p = this.store_keyword_content('feature', data, p, eof);
  		break;
case 7:
/* line 42 "ragel/i18n/cy_gb.js.rl" */

    p = this.store_keyword_content('background', data, p, eof);
  		break;
case 8:
/* line 46 "ragel/i18n/cy_gb.js.rl" */

    p = this.store_keyword_content('scenario', data, p, eof);
  		break;
case 9:
/* line 50 "ragel/i18n/cy_gb.js.rl" */

    p = this.store_keyword_content('scenario_outline', data, p, eof);
  		break;
case 10:
/* line 54 "ragel/i18n/cy_gb.js.rl" */

    p = this.store_keyword_content('examples', data, p, eof);
  		break;
case 11:
/* line 58 "ragel/i18n/cy_gb.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.step(this.keyword, con, this.current_line);
  		break;
case 12:
/* line 63 "ragel/i18n/cy_gb.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.comment(con, this.line_number);
    this.keyword_start = null;
  		break;
case 13:
/* line 69 "ragel/i18n/cy_gb.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.tag(con, this.line_number);
    this.keyword_start = null;
  		break;
case 14:
/* line 75 "ragel/i18n/cy_gb.js.rl" */

    this.line_number++;
  		break;
case 15:
/* line 79 "ragel/i18n/cy_gb.js.rl" */

    this.last_newline = p + 1;
  		break;
case 16:
/* line 83 "ragel/i18n/cy_gb.js.rl" */

    this.keyword_start = this.keyword_start || p;
  		break;
case 17:
/* line 87 "ragel/i18n/cy_gb.js.rl" */

    this.keyword = this.bytesToString(data.slice(this.keyword_start, p)).replace(/:$/, '');
    this.keyword_start = null;
  		break;
case 18:
/* line 92 "ragel/i18n/cy_gb.js.rl" */

    this.next_keyword_start = p;
  		break;
case 19:
/* line 96 "ragel/i18n/cy_gb.js.rl" */

    p = p - 1;
    current_row = [];
    this.current_line = this.line_number;
  		break;
case 20:
/* line 102 "ragel/i18n/cy_gb.js.rl" */

    this.content_start = p;
  		break;
case 21:
/* line 106 "ragel/i18n/cy_gb.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    current_row.push(con.replace(/\\\|/, "|").replace(/\\n/, "\n").replace(/\\\\/, "\\"));
  		break;
case 22:
/* line 111 "ragel/i18n/cy_gb.js.rl" */

    this.listener.row(current_row, this.current_line);
  		break;
case 23:
/* line 115 "ragel/i18n/cy_gb.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw new Error("Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.");
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 891 "js/lib/gherkin/lexer/cy_gb.js" */
			} /* action switch */
		}
	}
	if (_trigger_goto) {
		continue;
	}
	}
	if (_goto_level <= _again) {
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	p += 1;
	if (p != pe) {
		_goto_level = _resume;
		continue;
	}
	}
	if (_goto_level <= _test_eof) {
	if (p == eof) {
	__acts = _lexer_eof_actions[ this.cs];
	__nacts =  _lexer_actions[__acts];
	__acts += 1;
	while (__nacts > 0) {
		__nacts -= 1;
		__acts += 1;
		switch (_lexer_actions[__acts - 1]) {
case 23:
/* line 115 "ragel/i18n/cy_gb.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw new Error("Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.");
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 930 "js/lib/gherkin/lexer/cy_gb.js" */
		} /* eof action switch */
	}
	if (_trigger_goto) {
		continue;
	}
}
	}
	if (_goto_level <= _out) {
		break;
	}
	}
	}

/* line 165 "ragel/i18n/cy_gb.js.rl" */
};


/*
 * Decode utf-8 byte sequence to string.
 */
var decodeUtf8 = function(bytes) {
  var result = "";
  var i = 0;
  var wc;
  var c;

  while (i < bytes.length) {
    /* parse as UTF-8 lead byte */
    wc = bytes[i++];
    if (wc < 0x80) {
      count = 0;
    } else if (wc < 0xC2 || wc >= 0xF8) {
      throw new Error("input is not a valid UTF-8 lead octet");
    } else if (wc < 0xE0) {
      count = 1;
      wc = (wc & 0x1F) << 6;
    } else if (wc < 0xF0) {
      count = 2;
      wc = (wc & 0x0F) << 12;
    } else /* wc < 0xF8 */ {
      count = 3;
      wc = (wc & 0x07) << 18;
    }

    /* parse trail bytes, if any */
    while (count) {
      if (!(i < bytes.length)) {
        throw new Error("short read");
      }
      if ((c = bytes[i++] ^ 0x80) > 0x3F) {
        throw new Error("input is not a valid UTF-8 trail octet");
      }
      wc |= c << (6 * --count);
      if (wc < (1 << (5 * count + 6))) {
        throw new Error("invalid non-minimal encoded input");
      }
    }

    /* handle conversion to UTF-16 if needed */
    if (wc > 0xFFFF) {
      wc -= 0x10000;
      result += String.fromCharCode(0xD800 + (wc >> 10));
      wc = 0xDC00 + (wc & 0x3FF);
    }
    result += String.fromCharCode(wc);
  }

  return result;
};

/*
 * Encode string to an array of bytes using utf8 encoding.
 *
 * Javascript internally stores character data as utf16 (like java).
 * String.charCodeAt() does *not* produce unicode points, but simply
 * reflects this internal representation. Thus, it is necessary
 * to first decode the utf-16 representation before encoding to
 * utf-8.
 */
var encodeUtf8 = function(string) {
  var bytes = [];
  var i = 0;
  var j = 0;
  var wc;

  while (i < string.length) {
    wc = string.charCodeAt(i++);
    if (wc >= 0xD800 && wc <= 0xDBFF && i < string.length && string.charCodeAt(i) >= 0xDC00 && string.charCodeAt(i) <= 0xDFFF) {
      /* decode UTF-16 */
      wc = 0x10000 + ((wc & 0x3FF) << 10) + (string.charCodeAt(i++) & 0x3FF);
    }

    /* emit lead byte */
    if (wc < 0x80) {
      bytes[j++] = wc;
      count = 0;
    } else if (wc < 0x800) {
      bytes[j++] = 0xC0 | (wc >> 6);
      count = 1;
    } else if (wc < 0x10000) {
      bytes[j++] = 0xE0 | (wc >> 12);
      count = 2;
    } else {
      /* SMP: 21-bit Unicode */
      bytes[j++] = 0xF0 | (wc >> 18);
      count = 3;
    }

    /* emit trail bytes, if any */
    while (count) {
      bytes[j++] = 0x80 | ((wc >> (6 * --count)) & 0x3F);
    }
  }

  return bytes;

};

Lexer.prototype.bytesToString = function(bytes) {
  if(typeof bytes.write == 'function') {
    // Node.js
    return bytes.toString('utf-8');
  }
  return decodeUtf8(bytes);
};

Lexer.prototype.stringToBytes = function(string) {
  return encodeUtf8(string);
};

Lexer.prototype.unindent = function(startcol, text) {
  startcol = startcol || 0;
  return text.replace(new RegExp('^[\t ]{0,' + startcol + '}', 'gm'), ''); 
};

Lexer.prototype.store_keyword_content = function(event, data, p, eof) {
  var end_point = (!this.next_keyword_start || (p == eof)) ? p : this.next_keyword_start;
  var content = this.unindent(this.start_col + 2, this.bytesToString(data.slice(this.content_start, end_point))).replace(/\s+$/,"");
  var content_lines = content.split("\n")
  var name = content_lines.shift() || "";
  name = name.trim();
  var description = content_lines.join("\n");
  this.listener[event](this.keyword, name, description, this.current_line);
  var nks = this.next_keyword_start;
  this.next_keyword_start = null;
  return nks ? nks - 1 : p;
};

Lexer.prototype.current_line_content = function(data, p) {
  var rest = Array.prototype.slice.call(data,this.last_newline, -1);
  var end = rest.indexOf(10) || -1;
  return this.bytesToString(rest.slice(0, end)).trim();
};

// Node.js export
if(typeof module !== 'undefined') {
  module.exports = Lexer;
}
// Require.js export
if (typeof define !== 'undefined') {
  if(define.amd) {
    define('gherkin/lexer/cy_gb', [], function() {
      return Lexer;
    });
  } else {
    define('gherkin/lexer/cy_gb', function(require, exports, module) {
      exports.Lexer = Lexer;
    });
  }
}

})();

}).call(this,require("buffer").Buffer)

},{"buffer":69}],191:[function(require,module,exports){
(function (Buffer){

/* line 1 "ragel/i18n/da.js.rl" */
;(function() {


/* line 126 "ragel/i18n/da.js.rl" */



/* line 11 "js/lib/gherkin/lexer/da.js" */
var _lexer_actions = [
	0, 1, 0, 1, 1, 1, 2, 1, 
	3, 1, 4, 1, 5, 1, 6, 1, 
	7, 1, 8, 1, 9, 1, 10, 1, 
	11, 1, 12, 1, 13, 1, 16, 1, 
	17, 1, 18, 1, 19, 1, 20, 1, 
	21, 1, 22, 1, 23, 2, 2, 18, 
	2, 3, 4, 2, 13, 0, 2, 14, 
	15, 2, 17, 0, 2, 17, 1, 2, 
	17, 16, 2, 17, 19, 2, 18, 6, 
	2, 18, 7, 2, 18, 8, 2, 18, 
	9, 2, 18, 10, 2, 18, 16, 2, 
	20, 21, 2, 22, 0, 2, 22, 1, 
	2, 22, 16, 2, 22, 19, 3, 4, 
	14, 15, 3, 5, 14, 15, 3, 11, 
	14, 15, 3, 12, 14, 15, 3, 13, 
	14, 15, 3, 14, 15, 18, 3, 17, 
	0, 11, 3, 17, 14, 15, 4, 2, 
	14, 15, 18, 4, 3, 4, 14, 15, 
	4, 17, 0, 14, 15, 5, 17, 0, 
	11, 14, 15
];

var _lexer_key_offsets = [
	0, 0, 19, 37, 38, 39, 41, 43, 
	48, 53, 58, 63, 67, 71, 73, 74, 
	75, 76, 77, 78, 79, 80, 81, 82, 
	83, 84, 85, 86, 87, 88, 89, 91, 
	93, 98, 105, 110, 111, 112, 113, 114, 
	115, 116, 117, 118, 119, 120, 121, 122, 
	123, 124, 125, 126, 127, 128, 129, 143, 
	145, 147, 149, 151, 153, 155, 157, 159, 
	161, 163, 165, 167, 169, 171, 173, 191, 
	192, 193, 194, 195, 196, 197, 198, 199, 
	200, 201, 216, 218, 220, 222, 224, 226, 
	228, 230, 232, 234, 236, 238, 240, 242, 
	244, 246, 248, 250, 252, 254, 256, 258, 
	260, 262, 264, 266, 268, 270, 272, 274, 
	276, 278, 280, 282, 284, 286, 288, 290, 
	292, 294, 296, 298, 300, 302, 304, 306, 
	308, 310, 312, 314, 317, 319, 321, 323, 
	325, 327, 329, 331, 333, 334, 335, 336, 
	337, 338, 339, 340, 341, 342, 353, 355, 
	357, 359, 361, 363, 365, 367, 369, 371, 
	373, 375, 377, 379, 381, 383, 385, 387, 
	389, 391, 393, 395, 397, 399, 401, 403, 
	405, 407, 409, 411, 413, 415, 417, 419, 
	421, 423, 425, 427, 429, 432, 434, 436, 
	438, 440, 442, 444, 446, 448, 450, 452, 
	454, 456, 458, 460, 462, 464, 466, 468, 
	470, 472, 473, 474, 475, 476, 477, 478, 
	479, 480, 481, 482, 489, 491, 493, 495, 
	497, 499, 501, 503, 505, 506, 507, 508, 
	509, 510, 511, 512, 513, 514, 515, 517, 
	518, 519, 520, 521, 522, 523, 524, 525, 
	526, 527, 543, 545, 547, 549, 551, 553, 
	555, 557, 559, 561, 563, 565, 567, 569, 
	571, 573, 575, 577, 579, 581, 583, 585, 
	587, 589, 591, 593, 595, 597, 599, 601, 
	603, 605, 607, 609, 611, 613, 615, 617, 
	619, 621, 623, 625, 627, 629, 631, 633, 
	635, 637, 639, 641, 643, 645, 647, 649, 
	651, 653, 655, 658, 660, 662, 664, 666, 
	668, 670, 672, 676, 682, 685, 687, 693, 
	711, 713, 715, 717, 719, 721, 723, 725, 
	727, 729, 731, 733, 735, 737, 739, 741, 
	743, 745, 747, 750, 752, 754, 756, 758, 
	760, 762, 764, 765, 766
];

var _lexer_trans_keys = [
	10, 32, 34, 35, 37, 42, 64, 65, 
	66, 69, 71, 77, 78, 79, 83, 124, 
	239, 9, 13, 10, 32, 34, 35, 37, 
	42, 64, 65, 66, 69, 71, 77, 78, 
	79, 83, 124, 9, 13, 34, 34, 10, 
	13, 10, 13, 10, 32, 34, 9, 13, 
	10, 32, 34, 9, 13, 10, 32, 34, 
	9, 13, 10, 32, 34, 9, 13, 10, 
	32, 9, 13, 10, 32, 9, 13, 10, 
	13, 10, 95, 70, 69, 65, 84, 85, 
	82, 69, 95, 69, 78, 68, 95, 37, 
	32, 10, 13, 10, 13, 13, 32, 64, 
	9, 10, 9, 10, 13, 32, 64, 11, 
	12, 10, 32, 64, 9, 13, 98, 115, 
	116, 114, 97, 107, 116, 32, 83, 99, 
	101, 110, 97, 114, 105, 111, 58, 10, 
	10, 10, 32, 35, 37, 42, 64, 69, 
	71, 77, 78, 79, 83, 9, 13, 10, 
	95, 10, 70, 10, 69, 10, 65, 10, 
	84, 10, 85, 10, 82, 10, 69, 10, 
	95, 10, 69, 10, 78, 10, 68, 10, 
	95, 10, 37, 10, 32, 10, 32, 34, 
	35, 37, 42, 64, 65, 66, 69, 71, 
	77, 78, 79, 83, 124, 9, 13, 97, 
	103, 103, 114, 117, 110, 100, 58, 10, 
	10, 10, 32, 35, 37, 42, 64, 65, 
	69, 71, 77, 78, 79, 83, 9, 13, 
	10, 95, 10, 70, 10, 69, 10, 65, 
	10, 84, 10, 85, 10, 82, 10, 69, 
	10, 95, 10, 69, 10, 78, 10, 68, 
	10, 95, 10, 37, 10, 32, 10, 98, 
	10, 115, 10, 116, 10, 114, 10, 97, 
	10, 107, 10, 116, 10, 32, 10, 83, 
	10, 99, 10, 101, 10, 110, 10, 97, 
	10, 114, 10, 105, 10, 111, 10, 58, 
	10, 103, 10, 101, 10, 110, 10, 115, 
	10, 107, 10, 97, 10, 98, 10, 105, 
	10, 118, 10, 101, 10, 116, 10, 101, 
	10, 110, -61, 10, -91, 10, 10, 114, 
	10, 103, -61, 10, 99, -91, 10, 10, 
	101, 10, 110, 10, 97, 10, 114, 10, 
	105, 10, 101, 103, 107, 101, 110, 115, 
	107, 97, 98, 58, 10, 10, 10, 32, 
	35, 37, 64, 65, 66, 69, 83, 9, 
	13, 10, 95, 10, 70, 10, 69, 10, 
	65, 10, 84, 10, 85, 10, 82, 10, 
	69, 10, 95, 10, 69, 10, 78, 10, 
	68, 10, 95, 10, 37, 10, 98, 10, 
	115, 10, 116, 10, 114, 10, 97, 10, 
	107, 10, 116, 10, 32, 10, 83, 10, 
	99, 10, 101, 10, 110, 10, 97, 10, 
	114, 10, 105, 10, 111, 10, 58, 10, 
	97, 10, 103, 10, 103, 10, 114, 10, 
	117, 10, 110, 10, 100, 10, 103, 107, 
	10, 101, 10, 110, 10, 115, 10, 107, 
	10, 97, 10, 98, 10, 115, 10, 101, 
	10, 109, 10, 112, 10, 108, 10, 101, 
	10, 114, 10, 99, 10, 101, 10, 110, 
	10, 97, 10, 114, 10, 105, 10, 101, 
	115, 101, 109, 112, 108, 101, 114, 58, 
	10, 10, 10, 32, 35, 69, 124, 9, 
	13, 10, 103, 10, 101, 10, 110, 10, 
	115, 10, 107, 10, 97, 10, 98, 10, 
	58, 105, 118, 101, 116, 101, 110, -61, 
	-91, 114, 103, -61, 99, -91, 101, 110, 
	97, 114, 105, 101, 58, 10, 10, 10, 
	32, 35, 37, 42, 64, 65, 66, 69, 
	71, 77, 78, 79, 83, 9, 13, 10, 
	95, 10, 70, 10, 69, 10, 65, 10, 
	84, 10, 85, 10, 82, 10, 69, 10, 
	95, 10, 69, 10, 78, 10, 68, 10, 
	95, 10, 37, 10, 32, 10, 98, 10, 
	115, 10, 116, 10, 114, 10, 97, 10, 
	107, 10, 116, 10, 32, 10, 83, 10, 
	99, 10, 101, 10, 110, 10, 97, 10, 
	114, 10, 105, 10, 111, 10, 58, 10, 
	97, 10, 103, 10, 103, 10, 114, 10, 
	117, 10, 110, 10, 100, 10, 103, 10, 
	101, 10, 110, 10, 115, 10, 107, 10, 
	97, 10, 98, 10, 105, 10, 118, 10, 
	101, 10, 116, 10, 101, 10, 110, -61, 
	10, -91, 10, 10, 114, 10, 103, -61, 
	10, 99, -91, 10, 10, 101, 10, 110, 
	10, 97, 10, 114, 10, 105, 10, 101, 
	32, 124, 9, 13, 10, 32, 92, 124, 
	9, 13, 10, 92, 124, 10, 92, 10, 
	32, 92, 124, 9, 13, 10, 32, 34, 
	35, 37, 42, 64, 65, 66, 69, 71, 
	77, 78, 79, 83, 124, 9, 13, 10, 
	103, 10, 101, 10, 110, 10, 115, 10, 
	107, 10, 97, 10, 98, 10, 58, 10, 
	105, 10, 118, 10, 101, 10, 116, 10, 
	101, 10, 110, -61, 10, -91, 10, 10, 
	114, 10, 103, -61, 10, 99, -91, 10, 
	10, 101, 10, 110, 10, 97, 10, 114, 
	10, 105, 10, 101, 187, 191, 0
];

var _lexer_single_lengths = [
	0, 17, 16, 1, 1, 2, 2, 3, 
	3, 3, 3, 2, 2, 2, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 2, 2, 
	3, 5, 3, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 12, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 16, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 13, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 3, 2, 2, 2, 2, 
	2, 2, 2, 2, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 9, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 3, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 5, 2, 2, 2, 2, 
	2, 2, 2, 2, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 2, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 14, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 3, 2, 2, 2, 2, 2, 
	2, 2, 2, 4, 3, 2, 4, 16, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 3, 2, 2, 2, 2, 2, 
	2, 2, 1, 1, 0
];

var _lexer_range_lengths = [
	0, 1, 1, 0, 0, 0, 0, 1, 
	1, 1, 1, 1, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 1, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 1, 0, 0, 1, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0
];

var _lexer_index_offsets = [
	0, 0, 19, 37, 39, 41, 44, 47, 
	52, 57, 62, 67, 71, 75, 78, 80, 
	82, 84, 86, 88, 90, 92, 94, 96, 
	98, 100, 102, 104, 106, 108, 110, 113, 
	116, 121, 128, 133, 135, 137, 139, 141, 
	143, 145, 147, 149, 151, 153, 155, 157, 
	159, 161, 163, 165, 167, 169, 171, 185, 
	188, 191, 194, 197, 200, 203, 206, 209, 
	212, 215, 218, 221, 224, 227, 230, 248, 
	250, 252, 254, 256, 258, 260, 262, 264, 
	266, 268, 283, 286, 289, 292, 295, 298, 
	301, 304, 307, 310, 313, 316, 319, 322, 
	325, 328, 331, 334, 337, 340, 343, 346, 
	349, 352, 355, 358, 361, 364, 367, 370, 
	373, 376, 379, 382, 385, 388, 391, 394, 
	397, 400, 403, 406, 409, 412, 415, 418, 
	421, 424, 427, 430, 434, 437, 440, 443, 
	446, 449, 452, 455, 458, 460, 462, 464, 
	466, 468, 470, 472, 474, 476, 487, 490, 
	493, 496, 499, 502, 505, 508, 511, 514, 
	517, 520, 523, 526, 529, 532, 535, 538, 
	541, 544, 547, 550, 553, 556, 559, 562, 
	565, 568, 571, 574, 577, 580, 583, 586, 
	589, 592, 595, 598, 601, 605, 608, 611, 
	614, 617, 620, 623, 626, 629, 632, 635, 
	638, 641, 644, 647, 650, 653, 656, 659, 
	662, 665, 667, 669, 671, 673, 675, 677, 
	679, 681, 683, 685, 692, 695, 698, 701, 
	704, 707, 710, 713, 716, 718, 720, 722, 
	724, 726, 728, 730, 732, 734, 736, 739, 
	741, 743, 745, 747, 749, 751, 753, 755, 
	757, 759, 775, 778, 781, 784, 787, 790, 
	793, 796, 799, 802, 805, 808, 811, 814, 
	817, 820, 823, 826, 829, 832, 835, 838, 
	841, 844, 847, 850, 853, 856, 859, 862, 
	865, 868, 871, 874, 877, 880, 883, 886, 
	889, 892, 895, 898, 901, 904, 907, 910, 
	913, 916, 919, 922, 925, 928, 931, 934, 
	937, 940, 943, 947, 950, 953, 956, 959, 
	962, 965, 968, 972, 978, 982, 985, 991, 
	1009, 1012, 1015, 1018, 1021, 1024, 1027, 1030, 
	1033, 1036, 1039, 1042, 1045, 1048, 1051, 1054, 
	1057, 1060, 1063, 1067, 1070, 1073, 1076, 1079, 
	1082, 1085, 1088, 1090, 1092
];

var _lexer_indicies = [
	2, 1, 3, 4, 5, 6, 7, 8, 
	9, 10, 11, 12, 13, 14, 15, 16, 
	17, 1, 0, 2, 1, 3, 4, 5, 
	6, 7, 8, 9, 10, 11, 12, 13, 
	14, 15, 16, 1, 0, 18, 0, 19, 
	0, 21, 22, 20, 24, 25, 23, 28, 
	27, 29, 27, 26, 32, 31, 33, 31, 
	30, 32, 31, 34, 31, 30, 32, 31, 
	35, 31, 30, 37, 36, 36, 0, 2, 
	38, 38, 0, 40, 41, 39, 2, 0, 
	42, 0, 43, 0, 44, 0, 45, 0, 
	46, 0, 47, 0, 48, 0, 49, 0, 
	50, 0, 51, 0, 52, 0, 53, 0, 
	54, 0, 55, 0, 56, 0, 58, 59, 
	57, 61, 62, 60, 0, 0, 0, 0, 
	63, 64, 65, 64, 64, 67, 66, 63, 
	2, 68, 7, 68, 0, 69, 0, 70, 
	0, 71, 0, 72, 0, 73, 0, 74, 
	0, 75, 0, 76, 0, 77, 0, 78, 
	0, 79, 0, 80, 0, 81, 0, 82, 
	0, 83, 0, 84, 0, 85, 0, 87, 
	86, 89, 88, 89, 90, 91, 92, 93, 
	91, 94, 95, 96, 97, 98, 99, 90, 
	88, 89, 100, 88, 89, 101, 88, 89, 
	102, 88, 89, 103, 88, 89, 104, 88, 
	89, 105, 88, 89, 106, 88, 89, 107, 
	88, 89, 108, 88, 89, 109, 88, 89, 
	110, 88, 89, 111, 88, 89, 112, 88, 
	89, 113, 88, 89, 114, 88, 116, 115, 
	117, 118, 119, 120, 121, 122, 123, 124, 
	125, 126, 127, 128, 129, 130, 115, 0, 
	131, 0, 132, 0, 133, 0, 134, 0, 
	135, 0, 136, 0, 137, 0, 138, 0, 
	140, 139, 142, 141, 142, 143, 144, 145, 
	146, 144, 147, 148, 149, 150, 151, 152, 
	153, 143, 141, 142, 154, 141, 142, 155, 
	141, 142, 156, 141, 142, 157, 141, 142, 
	158, 141, 142, 159, 141, 142, 160, 141, 
	142, 161, 141, 142, 162, 141, 142, 163, 
	141, 142, 164, 141, 142, 165, 141, 142, 
	166, 141, 142, 167, 141, 142, 168, 141, 
	142, 169, 141, 142, 170, 141, 142, 171, 
	141, 142, 172, 141, 142, 173, 141, 142, 
	174, 141, 142, 175, 141, 142, 176, 141, 
	142, 177, 141, 142, 178, 141, 142, 179, 
	141, 142, 180, 141, 142, 181, 141, 142, 
	182, 141, 142, 183, 141, 142, 184, 141, 
	142, 168, 141, 142, 185, 141, 142, 186, 
	141, 142, 187, 141, 142, 188, 141, 142, 
	189, 141, 142, 190, 141, 142, 184, 141, 
	142, 191, 141, 142, 192, 141, 142, 193, 
	141, 142, 194, 141, 142, 195, 141, 142, 
	194, 141, 196, 142, 141, 197, 142, 141, 
	142, 194, 141, 142, 194, 141, 198, 142, 
	199, 141, 194, 142, 141, 142, 200, 141, 
	142, 201, 141, 142, 202, 141, 142, 203, 
	141, 142, 204, 141, 142, 184, 141, 205, 
	206, 0, 207, 0, 208, 0, 209, 0, 
	210, 0, 211, 0, 212, 0, 213, 0, 
	215, 214, 217, 216, 217, 218, 219, 220, 
	219, 221, 222, 223, 224, 218, 216, 217, 
	225, 216, 217, 226, 216, 217, 227, 216, 
	217, 228, 216, 217, 229, 216, 217, 230, 
	216, 217, 231, 216, 217, 232, 216, 217, 
	233, 216, 217, 234, 216, 217, 235, 216, 
	217, 236, 216, 217, 237, 216, 217, 238, 
	216, 217, 239, 216, 217, 240, 216, 217, 
	241, 216, 217, 242, 216, 217, 243, 216, 
	217, 244, 216, 217, 245, 216, 217, 246, 
	216, 217, 247, 216, 217, 248, 216, 217, 
	249, 216, 217, 250, 216, 217, 251, 216, 
	217, 252, 216, 217, 253, 216, 217, 254, 
	216, 217, 255, 216, 217, 256, 216, 217, 
	257, 216, 217, 258, 216, 217, 259, 216, 
	217, 260, 216, 217, 261, 216, 217, 254, 
	216, 217, 262, 263, 216, 217, 264, 216, 
	217, 265, 216, 217, 266, 216, 217, 267, 
	216, 217, 268, 216, 217, 254, 216, 217, 
	269, 216, 217, 270, 216, 217, 271, 216, 
	217, 272, 216, 217, 273, 216, 217, 274, 
	216, 217, 254, 216, 217, 275, 216, 217, 
	276, 216, 217, 277, 216, 217, 278, 216, 
	217, 279, 216, 217, 280, 216, 217, 254, 
	216, 281, 0, 282, 0, 283, 0, 284, 
	0, 285, 0, 286, 0, 287, 0, 288, 
	0, 290, 289, 292, 291, 292, 293, 294, 
	295, 294, 293, 291, 292, 296, 291, 292, 
	297, 291, 292, 298, 291, 292, 299, 291, 
	292, 300, 291, 292, 301, 291, 292, 302, 
	291, 292, 303, 291, 304, 0, 305, 0, 
	306, 0, 307, 0, 308, 0, 307, 0, 
	309, 0, 310, 0, 307, 0, 307, 0, 
	311, 312, 0, 307, 0, 313, 0, 314, 
	0, 315, 0, 316, 0, 317, 0, 318, 
	0, 319, 0, 321, 320, 323, 322, 323, 
	324, 325, 326, 327, 325, 328, 329, 330, 
	331, 332, 333, 334, 335, 324, 322, 323, 
	336, 322, 323, 337, 322, 323, 338, 322, 
	323, 339, 322, 323, 340, 322, 323, 341, 
	322, 323, 342, 322, 323, 343, 322, 323, 
	344, 322, 323, 345, 322, 323, 346, 322, 
	323, 347, 322, 323, 348, 322, 323, 349, 
	322, 323, 350, 322, 323, 351, 322, 323, 
	352, 322, 323, 353, 322, 323, 354, 322, 
	323, 355, 322, 323, 356, 322, 323, 357, 
	322, 323, 358, 322, 323, 359, 322, 323, 
	360, 322, 323, 361, 322, 323, 362, 322, 
	323, 363, 322, 323, 364, 322, 323, 365, 
	322, 323, 366, 322, 323, 350, 322, 323, 
	367, 322, 323, 368, 322, 323, 369, 322, 
	323, 370, 322, 323, 371, 322, 323, 372, 
	322, 323, 366, 322, 323, 373, 322, 323, 
	374, 322, 323, 375, 322, 323, 376, 322, 
	323, 377, 322, 323, 378, 322, 323, 366, 
	322, 323, 379, 322, 323, 380, 322, 323, 
	381, 322, 323, 382, 322, 323, 383, 322, 
	323, 382, 322, 384, 323, 322, 385, 323, 
	322, 323, 382, 322, 323, 382, 322, 386, 
	323, 387, 322, 382, 323, 322, 323, 388, 
	322, 323, 389, 322, 323, 390, 322, 323, 
	391, 322, 323, 392, 322, 323, 366, 322, 
	393, 394, 393, 0, 397, 396, 398, 399, 
	396, 395, 0, 401, 402, 400, 0, 401, 
	400, 397, 403, 401, 402, 403, 400, 397, 
	404, 405, 406, 407, 408, 409, 410, 411, 
	412, 413, 414, 415, 416, 417, 418, 404, 
	0, 89, 419, 88, 89, 420, 88, 89, 
	421, 88, 89, 422, 88, 89, 423, 88, 
	89, 424, 88, 89, 425, 88, 89, 114, 
	88, 89, 426, 88, 89, 427, 88, 89, 
	428, 88, 89, 429, 88, 89, 430, 88, 
	89, 429, 88, 431, 89, 88, 432, 89, 
	88, 89, 429, 88, 89, 429, 88, 433, 
	89, 434, 88, 429, 89, 88, 89, 435, 
	88, 89, 436, 88, 89, 437, 88, 89, 
	438, 88, 89, 439, 88, 89, 425, 88, 
	440, 0, 1, 0, 441, 0
];

var _lexer_trans_targs = [
	0, 2, 2, 3, 13, 15, 29, 32, 
	35, 71, 139, 228, 232, 234, 237, 238, 
	314, 346, 4, 5, 6, 7, 6, 6, 
	7, 6, 8, 8, 8, 9, 8, 8, 
	8, 9, 10, 11, 12, 2, 12, 13, 
	2, 14, 16, 17, 18, 19, 20, 21, 
	22, 23, 24, 25, 26, 27, 28, 348, 
	30, 31, 2, 14, 31, 2, 14, 33, 
	34, 2, 33, 32, 34, 36, 37, 38, 
	39, 40, 41, 42, 43, 44, 45, 46, 
	47, 48, 49, 50, 51, 52, 53, 54, 
	53, 54, 54, 2, 55, 69, 320, 328, 
	332, 334, 337, 338, 56, 57, 58, 59, 
	60, 61, 62, 63, 64, 65, 66, 67, 
	68, 2, 70, 2, 2, 3, 13, 15, 
	29, 32, 35, 71, 139, 228, 232, 234, 
	237, 238, 314, 72, 73, 74, 75, 76, 
	77, 78, 79, 80, 81, 80, 81, 81, 
	2, 82, 96, 97, 114, 121, 125, 127, 
	130, 131, 83, 84, 85, 86, 87, 88, 
	89, 90, 91, 92, 93, 94, 95, 2, 
	70, 98, 99, 100, 101, 102, 103, 104, 
	105, 106, 107, 108, 109, 110, 111, 112, 
	113, 115, 116, 117, 118, 119, 120, 122, 
	123, 124, 96, 126, 128, 129, 132, 133, 
	134, 135, 136, 137, 138, 140, 209, 141, 
	142, 143, 144, 145, 146, 147, 148, 149, 
	148, 149, 149, 2, 150, 164, 181, 188, 
	202, 151, 152, 153, 154, 155, 156, 157, 
	158, 159, 160, 161, 162, 163, 2, 165, 
	166, 167, 168, 169, 170, 171, 172, 173, 
	174, 175, 176, 177, 178, 179, 180, 70, 
	182, 183, 184, 185, 186, 187, 189, 195, 
	190, 191, 192, 193, 194, 196, 197, 198, 
	199, 200, 201, 203, 204, 205, 206, 207, 
	208, 210, 211, 212, 213, 214, 215, 216, 
	217, 218, 219, 218, 219, 219, 2, 220, 
	221, 222, 223, 224, 225, 226, 227, 70, 
	229, 230, 231, 29, 233, 235, 236, 239, 
	240, 241, 242, 243, 244, 245, 246, 247, 
	248, 249, 248, 249, 249, 2, 250, 264, 
	265, 282, 289, 296, 300, 302, 305, 306, 
	251, 252, 253, 254, 255, 256, 257, 258, 
	259, 260, 261, 262, 263, 2, 70, 266, 
	267, 268, 269, 270, 271, 272, 273, 274, 
	275, 276, 277, 278, 279, 280, 281, 283, 
	284, 285, 286, 287, 288, 290, 291, 292, 
	293, 294, 295, 297, 298, 299, 264, 301, 
	303, 304, 307, 308, 309, 310, 311, 312, 
	313, 314, 315, 316, 318, 319, 317, 315, 
	316, 317, 315, 318, 319, 3, 13, 15, 
	29, 32, 35, 71, 139, 228, 232, 234, 
	237, 238, 314, 321, 322, 323, 324, 325, 
	326, 327, 329, 330, 331, 69, 333, 335, 
	336, 339, 340, 341, 342, 343, 344, 345, 
	347, 0
];

var _lexer_trans_actions = [
	43, 0, 54, 3, 1, 0, 29, 1, 
	29, 29, 29, 29, 29, 29, 29, 29, 
	35, 0, 0, 0, 7, 139, 48, 0, 
	102, 9, 5, 45, 134, 45, 0, 33, 
	122, 33, 33, 0, 11, 106, 0, 0, 
	114, 25, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 57, 149, 126, 0, 110, 23, 0, 
	27, 118, 27, 51, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 57, 144, 
	0, 54, 0, 78, 33, 84, 84, 84, 
	84, 84, 84, 84, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 19, 19, 31, 130, 60, 57, 31, 
	63, 57, 63, 63, 63, 63, 63, 63, 
	63, 63, 66, 0, 0, 0, 0, 0, 
	0, 0, 0, 57, 144, 0, 54, 0, 
	72, 33, 84, 84, 84, 84, 84, 84, 
	84, 84, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 15, 
	15, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 57, 144, 
	0, 54, 0, 69, 33, 84, 84, 84, 
	84, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 13, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 13, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 57, 144, 0, 54, 0, 81, 84, 
	0, 0, 0, 0, 0, 0, 0, 21, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	57, 144, 0, 54, 0, 75, 33, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 17, 17, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 37, 37, 54, 37, 87, 
	0, 0, 39, 0, 0, 93, 90, 41, 
	96, 90, 96, 96, 96, 96, 96, 96, 
	96, 96, 99, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0
];

var _lexer_eof_actions = [
	0, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43
];

var lexer_start = 1;
var lexer_first_final = 348;
var lexer_error = 0;

var lexer_en_main = 1;


/* line 129 "ragel/i18n/da.js.rl" */

/* line 130 "ragel/i18n/da.js.rl" */

/* line 131 "ragel/i18n/da.js.rl" */

/* line 132 "ragel/i18n/da.js.rl" */

var Lexer = function(listener) {
  // Check that listener has the required functions
  var events = ['comment', 'tag', 'feature', 'background', 'scenario', 'scenario_outline', 'examples', 'step', 'doc_string', 'row', 'eof'];
  for(var i=0, len=events.length; i<len; i++) {
    var event = events[i];
    if(typeof listener[event] != 'function') {
      throw new Error("Error. No " + event + " function exists on " + JSON.stringify(listener));
    }
  }
  this.listener = listener;
};

Lexer.prototype.scan = function(data) {
  var ending = "\n%_FEATURE_END_%";
  if(typeof data == 'string') {
    data = this.stringToBytes(data + ending);
  } else if(typeof Buffer != 'undefined' && Buffer.isBuffer(data)) {
    // Node.js
    var buf = new Buffer(data.length + ending.length);
    data.copy(buf, 0, 0);
    new Buffer(ending).copy(buf, data.length, 0);
    data = buf;
  }
  var eof = pe = data.length;
  var p = 0;

  this.line_number = 1;
  this.last_newline = 0;
  var signedCharValue=function(v){return v > 127 ? v-256 : v; };

  
/* line 673 "js/lib/gherkin/lexer/da.js" */
{
	  this.cs = lexer_start;
} /* JSCodeGen::writeInit */

/* line 164 "ragel/i18n/da.js.rl" */
  
/* line 680 "js/lib/gherkin/lexer/da.js" */
{
	var _klen, _trans, _keys, _ps, _widec, _acts, _nacts;
	var _goto_level, _resume, _eof_trans, _again, _test_eof;
	var _out;
	_klen = _trans = _keys = _acts = _nacts = null;
	_goto_level = 0;
	_resume = 10;
	_eof_trans = 15;
	_again = 20;
	_test_eof = 30;
	_out = 40;
	while (true) {
	_trigger_goto = false;
	if (_goto_level <= 0) {
	if (p == pe) {
		_goto_level = _test_eof;
		continue;
	}
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	}
	if (_goto_level <= _resume) {
	_keys = _lexer_key_offsets[ this.cs];
	_trans = _lexer_index_offsets[ this.cs];
	_klen = _lexer_single_lengths[ this.cs];
	_break_match = false;
	
	do {
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + _klen - 1;

	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + ( (_upper - _lower) >> 1 );

	        if (( signedCharValue(data[p])) < _lexer_trans_keys[_mid]) {
	           _upper = _mid - 1;
	        } else if (( signedCharValue(data[p])) > _lexer_trans_keys[_mid]) {
	           _lower = _mid + 1;
	        } else {
	           _trans += (_mid - _keys);
	           _break_match = true;
	           break;
	        };
	     } /* while */
	     if (_break_match) { break; }
	     _keys += _klen;
	     _trans += _klen;
	  }
	  _klen = _lexer_range_lengths[ this.cs];
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + (_klen << 1) - 2;
	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + (((_upper-_lower) >> 1) & ~1);
	        if (( signedCharValue(data[p])) < _lexer_trans_keys[_mid]) {
	          _upper = _mid - 2;
	         } else if (( signedCharValue(data[p])) > _lexer_trans_keys[_mid+1]) {
	          _lower = _mid + 2;
	        } else {
	          _trans += ((_mid - _keys) >> 1);
	          _break_match = true;
	          break;
	        }
	     } /* while */
	     if (_break_match) { break; }
	     _trans += _klen
	  }
	} while (false);
	_trans = _lexer_indicies[_trans];
	 this.cs = _lexer_trans_targs[_trans];
	if (_lexer_trans_actions[_trans] != 0) {
		_acts = _lexer_trans_actions[_trans];
		_nacts = _lexer_actions[_acts];
		_acts += 1;
		while (_nacts > 0) {
			_nacts -= 1;
			_acts += 1;
			switch (_lexer_actions[_acts - 1]) {
case 0:
/* line 6 "ragel/i18n/da.js.rl" */

    this.content_start = p;
    this.current_line = this.line_number;
    this.start_col = p - this.last_newline - (this.keyword+':').length;
  		break;
case 1:
/* line 12 "ragel/i18n/da.js.rl" */

    this.current_line = this.line_number;
    this.start_col = p - this.last_newline;
  		break;
case 2:
/* line 17 "ragel/i18n/da.js.rl" */

    this.content_start = p;
  		break;
case 3:
/* line 21 "ragel/i18n/da.js.rl" */

    this.docstring_content_type_start = p;
  		break;
case 4:
/* line 25 "ragel/i18n/da.js.rl" */

    this.docstring_content_type_end = p;
  		break;
case 5:
/* line 29 "ragel/i18n/da.js.rl" */

    var con = this.unindent(
      this.start_col, 
      this.bytesToString(data.slice(this.content_start, this.next_keyword_start-1)).replace(/(\r?\n)?([\t ])*$/, '').replace(/\\\"\\\"\\\"/mg, '"""')
    );
    var con_type = this.bytesToString(data.slice(this.docstring_content_type_start, this.docstring_content_type_end)).trim();
    this.listener.doc_string(con_type, con, this.current_line); 
  		break;
case 6:
/* line 38 "ragel/i18n/da.js.rl" */

    p = this.store_keyword_content('feature', data, p, eof);
  		break;
case 7:
/* line 42 "ragel/i18n/da.js.rl" */

    p = this.store_keyword_content('background', data, p, eof);
  		break;
case 8:
/* line 46 "ragel/i18n/da.js.rl" */

    p = this.store_keyword_content('scenario', data, p, eof);
  		break;
case 9:
/* line 50 "ragel/i18n/da.js.rl" */

    p = this.store_keyword_content('scenario_outline', data, p, eof);
  		break;
case 10:
/* line 54 "ragel/i18n/da.js.rl" */

    p = this.store_keyword_content('examples', data, p, eof);
  		break;
case 11:
/* line 58 "ragel/i18n/da.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.step(this.keyword, con, this.current_line);
  		break;
case 12:
/* line 63 "ragel/i18n/da.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.comment(con, this.line_number);
    this.keyword_start = null;
  		break;
case 13:
/* line 69 "ragel/i18n/da.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.tag(con, this.line_number);
    this.keyword_start = null;
  		break;
case 14:
/* line 75 "ragel/i18n/da.js.rl" */

    this.line_number++;
  		break;
case 15:
/* line 79 "ragel/i18n/da.js.rl" */

    this.last_newline = p + 1;
  		break;
case 16:
/* line 83 "ragel/i18n/da.js.rl" */

    this.keyword_start = this.keyword_start || p;
  		break;
case 17:
/* line 87 "ragel/i18n/da.js.rl" */

    this.keyword = this.bytesToString(data.slice(this.keyword_start, p)).replace(/:$/, '');
    this.keyword_start = null;
  		break;
case 18:
/* line 92 "ragel/i18n/da.js.rl" */

    this.next_keyword_start = p;
  		break;
case 19:
/* line 96 "ragel/i18n/da.js.rl" */

    p = p - 1;
    current_row = [];
    this.current_line = this.line_number;
  		break;
case 20:
/* line 102 "ragel/i18n/da.js.rl" */

    this.content_start = p;
  		break;
case 21:
/* line 106 "ragel/i18n/da.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    current_row.push(con.replace(/\\\|/, "|").replace(/\\n/, "\n").replace(/\\\\/, "\\"));
  		break;
case 22:
/* line 111 "ragel/i18n/da.js.rl" */

    this.listener.row(current_row, this.current_line);
  		break;
case 23:
/* line 115 "ragel/i18n/da.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw new Error("Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.");
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 907 "js/lib/gherkin/lexer/da.js" */
			} /* action switch */
		}
	}
	if (_trigger_goto) {
		continue;
	}
	}
	if (_goto_level <= _again) {
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	p += 1;
	if (p != pe) {
		_goto_level = _resume;
		continue;
	}
	}
	if (_goto_level <= _test_eof) {
	if (p == eof) {
	__acts = _lexer_eof_actions[ this.cs];
	__nacts =  _lexer_actions[__acts];
	__acts += 1;
	while (__nacts > 0) {
		__nacts -= 1;
		__acts += 1;
		switch (_lexer_actions[__acts - 1]) {
case 23:
/* line 115 "ragel/i18n/da.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw new Error("Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.");
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 946 "js/lib/gherkin/lexer/da.js" */
		} /* eof action switch */
	}
	if (_trigger_goto) {
		continue;
	}
}
	}
	if (_goto_level <= _out) {
		break;
	}
	}
	}

/* line 165 "ragel/i18n/da.js.rl" */
};


/*
 * Decode utf-8 byte sequence to string.
 */
var decodeUtf8 = function(bytes) {
  var result = "";
  var i = 0;
  var wc;
  var c;

  while (i < bytes.length) {
    /* parse as UTF-8 lead byte */
    wc = bytes[i++];
    if (wc < 0x80) {
      count = 0;
    } else if (wc < 0xC2 || wc >= 0xF8) {
      throw new Error("input is not a valid UTF-8 lead octet");
    } else if (wc < 0xE0) {
      count = 1;
      wc = (wc & 0x1F) << 6;
    } else if (wc < 0xF0) {
      count = 2;
      wc = (wc & 0x0F) << 12;
    } else /* wc < 0xF8 */ {
      count = 3;
      wc = (wc & 0x07) << 18;
    }

    /* parse trail bytes, if any */
    while (count) {
      if (!(i < bytes.length)) {
        throw new Error("short read");
      }
      if ((c = bytes[i++] ^ 0x80) > 0x3F) {
        throw new Error("input is not a valid UTF-8 trail octet");
      }
      wc |= c << (6 * --count);
      if (wc < (1 << (5 * count + 6))) {
        throw new Error("invalid non-minimal encoded input");
      }
    }

    /* handle conversion to UTF-16 if needed */
    if (wc > 0xFFFF) {
      wc -= 0x10000;
      result += String.fromCharCode(0xD800 + (wc >> 10));
      wc = 0xDC00 + (wc & 0x3FF);
    }
    result += String.fromCharCode(wc);
  }

  return result;
};

/*
 * Encode string to an array of bytes using utf8 encoding.
 *
 * Javascript internally stores character data as utf16 (like java).
 * String.charCodeAt() does *not* produce unicode points, but simply
 * reflects this internal representation. Thus, it is necessary
 * to first decode the utf-16 representation before encoding to
 * utf-8.
 */
var encodeUtf8 = function(string) {
  var bytes = [];
  var i = 0;
  var j = 0;
  var wc;

  while (i < string.length) {
    wc = string.charCodeAt(i++);
    if (wc >= 0xD800 && wc <= 0xDBFF && i < string.length && string.charCodeAt(i) >= 0xDC00 && string.charCodeAt(i) <= 0xDFFF) {
      /* decode UTF-16 */
      wc = 0x10000 + ((wc & 0x3FF) << 10) + (string.charCodeAt(i++) & 0x3FF);
    }

    /* emit lead byte */
    if (wc < 0x80) {
      bytes[j++] = wc;
      count = 0;
    } else if (wc < 0x800) {
      bytes[j++] = 0xC0 | (wc >> 6);
      count = 1;
    } else if (wc < 0x10000) {
      bytes[j++] = 0xE0 | (wc >> 12);
      count = 2;
    } else {
      /* SMP: 21-bit Unicode */
      bytes[j++] = 0xF0 | (wc >> 18);
      count = 3;
    }

    /* emit trail bytes, if any */
    while (count) {
      bytes[j++] = 0x80 | ((wc >> (6 * --count)) & 0x3F);
    }
  }

  return bytes;

};

Lexer.prototype.bytesToString = function(bytes) {
  if(typeof bytes.write == 'function') {
    // Node.js
    return bytes.toString('utf-8');
  }
  return decodeUtf8(bytes);
};

Lexer.prototype.stringToBytes = function(string) {
  return encodeUtf8(string);
};

Lexer.prototype.unindent = function(startcol, text) {
  startcol = startcol || 0;
  return text.replace(new RegExp('^[\t ]{0,' + startcol + '}', 'gm'), ''); 
};

Lexer.prototype.store_keyword_content = function(event, data, p, eof) {
  var end_point = (!this.next_keyword_start || (p == eof)) ? p : this.next_keyword_start;
  var content = this.unindent(this.start_col + 2, this.bytesToString(data.slice(this.content_start, end_point))).replace(/\s+$/,"");
  var content_lines = content.split("\n")
  var name = content_lines.shift() || "";
  name = name.trim();
  var description = content_lines.join("\n");
  this.listener[event](this.keyword, name, description, this.current_line);
  var nks = this.next_keyword_start;
  this.next_keyword_start = null;
  return nks ? nks - 1 : p;
};

Lexer.prototype.current_line_content = function(data, p) {
  var rest = Array.prototype.slice.call(data,this.last_newline, -1);
  var end = rest.indexOf(10) || -1;
  return this.bytesToString(rest.slice(0, end)).trim();
};

// Node.js export
if(typeof module !== 'undefined') {
  module.exports = Lexer;
}
// Require.js export
if (typeof define !== 'undefined') {
  if(define.amd) {
    define('gherkin/lexer/da', [], function() {
      return Lexer;
    });
  } else {
    define('gherkin/lexer/da', function(require, exports, module) {
      exports.Lexer = Lexer;
    });
  }
}

})();

}).call(this,require("buffer").Buffer)

},{"buffer":69}],192:[function(require,module,exports){
(function (Buffer){

/* line 1 "ragel/i18n/de.js.rl" */
;(function() {


/* line 126 "ragel/i18n/de.js.rl" */



/* line 11 "js/lib/gherkin/lexer/de.js" */
var _lexer_actions = [
	0, 1, 0, 1, 1, 1, 2, 1, 
	3, 1, 4, 1, 5, 1, 6, 1, 
	7, 1, 8, 1, 9, 1, 10, 1, 
	11, 1, 12, 1, 13, 1, 16, 1, 
	17, 1, 18, 1, 19, 1, 20, 1, 
	21, 1, 22, 1, 23, 2, 2, 18, 
	2, 3, 4, 2, 13, 0, 2, 14, 
	15, 2, 17, 0, 2, 17, 1, 2, 
	17, 16, 2, 17, 19, 2, 18, 6, 
	2, 18, 7, 2, 18, 8, 2, 18, 
	9, 2, 18, 10, 2, 18, 16, 2, 
	20, 21, 2, 22, 0, 2, 22, 1, 
	2, 22, 16, 2, 22, 19, 3, 4, 
	14, 15, 3, 5, 14, 15, 3, 11, 
	14, 15, 3, 12, 14, 15, 3, 13, 
	14, 15, 3, 14, 15, 18, 3, 17, 
	0, 11, 3, 17, 14, 15, 4, 2, 
	14, 15, 18, 4, 3, 4, 14, 15, 
	4, 17, 0, 14, 15, 5, 17, 0, 
	11, 14, 15
];

var _lexer_key_offsets = [
	0, 0, 19, 37, 38, 39, 41, 43, 
	48, 53, 58, 63, 67, 71, 73, 74, 
	75, 76, 77, 78, 79, 80, 81, 82, 
	83, 84, 85, 86, 87, 88, 89, 91, 
	93, 98, 105, 110, 112, 113, 114, 115, 
	116, 117, 118, 119, 120, 121, 122, 123, 
	124, 125, 126, 127, 128, 129, 130, 131, 
	132, 133, 140, 142, 144, 146, 148, 150, 
	152, 154, 156, 158, 160, 162, 164, 166, 
	168, 170, 188, 189, 190, 191, 192, 193, 
	194, 195, 196, 197, 198, 199, 200, 201, 
	202, 203, 204, 205, 206, 207, 218, 220, 
	222, 224, 226, 228, 230, 232, 234, 236, 
	238, 240, 242, 244, 246, 248, 250, 252, 
	254, 256, 258, 260, 262, 264, 266, 268, 
	270, 272, 274, 276, 278, 280, 282, 284, 
	286, 288, 290, 292, 294, 296, 298, 300, 
	302, 304, 306, 308, 310, 312, 314, 316, 
	318, 320, 323, 325, 327, 329, 331, 333, 
	335, 337, 339, 341, 342, 343, 344, 345, 
	346, 347, 348, 349, 350, 352, 353, 354, 
	355, 356, 357, 358, 359, 360, 361, 362, 
	377, 379, 381, 383, 385, 387, 389, 391, 
	393, 395, 397, 399, 401, 403, 405, 407, 
	410, 412, 414, 416, 418, 420, 422, 424, 
	426, 428, 430, 432, 434, 436, 438, 440, 
	442, 444, 446, 448, 450, 452, 454, 456, 
	458, 460, 462, 464, 466, 468, 470, 472, 
	474, 476, 478, 480, 482, 484, 487, 489, 
	491, 493, 495, 497, 499, 501, 504, 506, 
	508, 510, 512, 514, 516, 518, 520, 522, 
	524, 526, 527, 528, 529, 530, 531, 532, 
	533, 535, 536, 537, 552, 554, 556, 558, 
	560, 562, 564, 566, 568, 570, 572, 574, 
	576, 578, 580, 582, 585, 587, 589, 591, 
	593, 595, 597, 599, 601, 603, 605, 607, 
	609, 611, 613, 615, 617, 619, 621, 623, 
	625, 627, 629, 631, 633, 635, 637, 639, 
	642, 644, 646, 648, 650, 652, 654, 656, 
	658, 660, 663, 665, 667, 669, 671, 673, 
	675, 677, 679, 681, 683, 685, 687, 689, 
	691, 694, 696, 698, 700, 702, 704, 706, 
	708, 710, 712, 714, 716, 717, 718, 719, 
	720, 721, 722, 723, 724, 725, 726, 727, 
	742, 744, 746, 748, 750, 752, 754, 756, 
	758, 760, 762, 764, 766, 768, 770, 772, 
	775, 777, 779, 781, 783, 785, 787, 789, 
	791, 793, 795, 797, 799, 801, 803, 805, 
	807, 809, 811, 813, 815, 817, 819, 821, 
	823, 825, 827, 829, 831, 833, 835, 837, 
	839, 841, 843, 845, 847, 849, 852, 854, 
	856, 858, 860, 862, 864, 866, 868, 870, 
	872, 873, 874, 875, 879, 885, 888, 890, 
	896, 914, 915, 916
];

var _lexer_trans_keys = [
	10, 32, 34, 35, 37, 42, 64, 65, 
	66, 68, 70, 71, 83, 85, 87, 124, 
	239, 9, 13, 10, 32, 34, 35, 37, 
	42, 64, 65, 66, 68, 70, 71, 83, 
	85, 87, 124, 9, 13, 34, 34, 10, 
	13, 10, 13, 10, 32, 34, 9, 13, 
	10, 32, 34, 9, 13, 10, 32, 34, 
	9, 13, 10, 32, 34, 9, 13, 10, 
	32, 9, 13, 10, 32, 9, 13, 10, 
	13, 10, 95, 70, 69, 65, 84, 85, 
	82, 69, 95, 69, 78, 68, 95, 37, 
	32, 10, 13, 10, 13, 13, 32, 64, 
	9, 10, 9, 10, 13, 32, 64, 11, 
	12, 10, 32, 64, 9, 13, 98, 110, 
	101, 114, 103, 101, 110, 111, 109, 109, 
	101, 110, 101, 105, 115, 112, 105, 101, 
	108, 101, 58, 10, 10, 10, 32, 35, 
	70, 124, 9, 13, 10, 117, 10, 110, 
	10, 107, 10, 116, 10, 105, 10, 111, 
	10, 110, 10, 97, 10, 108, 10, 105, 
	10, 116, -61, 10, -92, 10, 10, 116, 
	10, 58, 10, 32, 34, 35, 37, 42, 
	64, 65, 66, 68, 70, 71, 83, 85, 
	87, 124, 9, 13, 97, 110, 117, 110, 
	107, 116, 105, 111, 110, 97, 108, 105, 
	116, -61, -92, 116, 58, 10, 10, 10, 
	32, 35, 37, 64, 66, 70, 71, 83, 
	9, 13, 10, 95, 10, 70, 10, 69, 
	10, 65, 10, 84, 10, 85, 10, 82, 
	10, 69, 10, 95, 10, 69, 10, 78, 
	10, 68, 10, 95, 10, 37, 10, 101, 
	10, 105, 10, 115, 10, 112, 10, 105, 
	10, 101, 10, 108, 10, 101, 10, 58, 
	10, 117, 10, 110, 10, 107, 10, 116, 
	10, 105, 10, 111, 10, 110, 10, 97, 
	10, 108, 10, 105, 10, 116, -61, 10, 
	-92, 10, 10, 116, 10, 114, 10, 117, 
	10, 110, 10, 100, 10, 108, 10, 97, 
	10, 103, 10, 122, 10, 101, 10, 110, 
	10, 97, 10, 114, 10, 105, 10, 111, 
	10, 58, 103, 10, 114, 10, 117, 10, 
	110, 10, 100, 10, 114, 10, 105, 10, 
	115, 10, 115, 101, 114, 103, 101, 98, 
	101, 110, 32, 115, 101, 105, 32, 101, 
	117, 110, 100, 108, 97, 103, 101, 58, 
	10, 10, 10, 32, 35, 37, 42, 64, 
	65, 68, 70, 71, 83, 85, 87, 9, 
	13, 10, 95, 10, 70, 10, 69, 10, 
	65, 10, 84, 10, 85, 10, 82, 10, 
	69, 10, 95, 10, 69, 10, 78, 10, 
	68, 10, 95, 10, 37, 10, 32, 10, 
	98, 110, 10, 101, 10, 114, 10, 103, 
	10, 101, 10, 110, 10, 111, 10, 109, 
	10, 109, 10, 101, 10, 110, 10, 97, 
	10, 110, 10, 117, 10, 110, 10, 107, 
	10, 116, 10, 105, 10, 111, 10, 110, 
	10, 97, 10, 108, 10, 105, 10, 116, 
	-61, 10, -92, 10, 10, 116, 10, 58, 
	10, 101, 10, 103, 10, 101, 10, 98, 
	10, 101, 10, 110, 10, 32, 10, 115, 
	10, 101, 10, 105, 10, 32, 101, 10, 
	122, 10, 101, 10, 110, 10, 97, 10, 
	114, 10, 105, 10, 111, 10, 58, 103, 
	10, 114, 10, 117, 10, 110, 10, 100, 
	10, 114, 10, 105, 10, 115, 10, 115, 
	10, 110, 10, 100, 10, 101, 122, 101, 
	110, 97, 114, 105, 111, 58, 103, 10, 
	10, 10, 32, 35, 37, 42, 64, 65, 
	68, 70, 71, 83, 85, 87, 9, 13, 
	10, 95, 10, 70, 10, 69, 10, 65, 
	10, 84, 10, 85, 10, 82, 10, 69, 
	10, 95, 10, 69, 10, 78, 10, 68, 
	10, 95, 10, 37, 10, 32, 10, 98, 
	110, 10, 101, 10, 114, 10, 103, 10, 
	101, 10, 110, 10, 111, 10, 109, 10, 
	109, 10, 101, 10, 110, 10, 97, 10, 
	110, 10, 117, 10, 110, 10, 107, 10, 
	116, 10, 105, 10, 111, 10, 110, 10, 
	97, 10, 108, 10, 105, 10, 116, -61, 
	10, -92, 10, 10, 116, 10, 58, 10, 
	101, 114, 10, 103, 10, 101, 10, 98, 
	10, 101, 10, 110, 10, 32, 10, 115, 
	10, 101, 10, 105, 10, 32, 101, 10, 
	117, 10, 110, 10, 100, 10, 108, 10, 
	97, 10, 103, 10, 101, 10, 122, 10, 
	101, 10, 110, 10, 97, 10, 114, 10, 
	105, 10, 111, 10, 58, 103, 10, 114, 
	10, 117, 10, 110, 10, 100, 10, 114, 
	10, 105, 10, 115, 10, 115, 10, 110, 
	10, 100, 10, 101, 114, 117, 110, 100, 
	114, 105, 115, 115, 58, 10, 10, 10, 
	32, 35, 37, 42, 64, 65, 68, 70, 
	71, 83, 85, 87, 9, 13, 10, 95, 
	10, 70, 10, 69, 10, 65, 10, 84, 
	10, 85, 10, 82, 10, 69, 10, 95, 
	10, 69, 10, 78, 10, 68, 10, 95, 
	10, 37, 10, 32, 10, 98, 110, 10, 
	101, 10, 114, 10, 103, 10, 101, 10, 
	110, 10, 111, 10, 109, 10, 109, 10, 
	101, 10, 110, 10, 97, 10, 110, 10, 
	117, 10, 110, 10, 107, 10, 116, 10, 
	105, 10, 111, 10, 110, 10, 97, 10, 
	108, 10, 105, 10, 116, -61, 10, -92, 
	10, 10, 116, 10, 58, 10, 101, 10, 
	103, 10, 101, 10, 98, 10, 101, 10, 
	110, 10, 32, 10, 115, 10, 101, 10, 
	105, 10, 32, 101, 10, 122, 10, 101, 
	10, 110, 10, 97, 10, 114, 10, 105, 
	10, 111, 10, 110, 10, 100, 10, 101, 
	110, 100, 101, 32, 124, 9, 13, 10, 
	32, 92, 124, 9, 13, 10, 92, 124, 
	10, 92, 10, 32, 92, 124, 9, 13, 
	10, 32, 34, 35, 37, 42, 64, 65, 
	66, 68, 70, 71, 83, 85, 87, 124, 
	9, 13, 187, 191, 0
];

var _lexer_single_lengths = [
	0, 17, 16, 1, 1, 2, 2, 3, 
	3, 3, 3, 2, 2, 2, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 2, 2, 
	3, 5, 3, 2, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 5, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 16, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 9, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 3, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 2, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 13, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 3, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 3, 2, 2, 
	2, 2, 2, 2, 2, 3, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 1, 1, 1, 1, 1, 1, 1, 
	2, 1, 1, 13, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 3, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 3, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 3, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	3, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 13, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 3, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 3, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	1, 1, 1, 2, 4, 3, 2, 4, 
	16, 1, 1, 0
];

var _lexer_range_lengths = [
	0, 1, 1, 0, 0, 0, 0, 1, 
	1, 1, 1, 1, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 1, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 1, 0, 0, 1, 
	1, 0, 0, 0
];

var _lexer_index_offsets = [
	0, 0, 19, 37, 39, 41, 44, 47, 
	52, 57, 62, 67, 71, 75, 78, 80, 
	82, 84, 86, 88, 90, 92, 94, 96, 
	98, 100, 102, 104, 106, 108, 110, 113, 
	116, 121, 128, 133, 136, 138, 140, 142, 
	144, 146, 148, 150, 152, 154, 156, 158, 
	160, 162, 164, 166, 168, 170, 172, 174, 
	176, 178, 185, 188, 191, 194, 197, 200, 
	203, 206, 209, 212, 215, 218, 221, 224, 
	227, 230, 248, 250, 252, 254, 256, 258, 
	260, 262, 264, 266, 268, 270, 272, 274, 
	276, 278, 280, 282, 284, 286, 297, 300, 
	303, 306, 309, 312, 315, 318, 321, 324, 
	327, 330, 333, 336, 339, 342, 345, 348, 
	351, 354, 357, 360, 363, 366, 369, 372, 
	375, 378, 381, 384, 387, 390, 393, 396, 
	399, 402, 405, 408, 411, 414, 417, 420, 
	423, 426, 429, 432, 435, 438, 441, 444, 
	447, 450, 454, 457, 460, 463, 466, 469, 
	472, 475, 478, 481, 483, 485, 487, 489, 
	491, 493, 495, 497, 499, 502, 504, 506, 
	508, 510, 512, 514, 516, 518, 520, 522, 
	537, 540, 543, 546, 549, 552, 555, 558, 
	561, 564, 567, 570, 573, 576, 579, 582, 
	586, 589, 592, 595, 598, 601, 604, 607, 
	610, 613, 616, 619, 622, 625, 628, 631, 
	634, 637, 640, 643, 646, 649, 652, 655, 
	658, 661, 664, 667, 670, 673, 676, 679, 
	682, 685, 688, 691, 694, 697, 701, 704, 
	707, 710, 713, 716, 719, 722, 726, 729, 
	732, 735, 738, 741, 744, 747, 750, 753, 
	756, 759, 761, 763, 765, 767, 769, 771, 
	773, 776, 778, 780, 795, 798, 801, 804, 
	807, 810, 813, 816, 819, 822, 825, 828, 
	831, 834, 837, 840, 844, 847, 850, 853, 
	856, 859, 862, 865, 868, 871, 874, 877, 
	880, 883, 886, 889, 892, 895, 898, 901, 
	904, 907, 910, 913, 916, 919, 922, 925, 
	929, 932, 935, 938, 941, 944, 947, 950, 
	953, 956, 960, 963, 966, 969, 972, 975, 
	978, 981, 984, 987, 990, 993, 996, 999, 
	1002, 1006, 1009, 1012, 1015, 1018, 1021, 1024, 
	1027, 1030, 1033, 1036, 1039, 1041, 1043, 1045, 
	1047, 1049, 1051, 1053, 1055, 1057, 1059, 1061, 
	1076, 1079, 1082, 1085, 1088, 1091, 1094, 1097, 
	1100, 1103, 1106, 1109, 1112, 1115, 1118, 1121, 
	1125, 1128, 1131, 1134, 1137, 1140, 1143, 1146, 
	1149, 1152, 1155, 1158, 1161, 1164, 1167, 1170, 
	1173, 1176, 1179, 1182, 1185, 1188, 1191, 1194, 
	1197, 1200, 1203, 1206, 1209, 1212, 1215, 1218, 
	1221, 1224, 1227, 1230, 1233, 1236, 1240, 1243, 
	1246, 1249, 1252, 1255, 1258, 1261, 1264, 1267, 
	1270, 1272, 1274, 1276, 1280, 1286, 1290, 1293, 
	1299, 1317, 1319, 1321
];

var _lexer_indicies = [
	2, 1, 3, 4, 5, 6, 7, 8, 
	9, 10, 11, 12, 13, 14, 15, 16, 
	17, 1, 0, 2, 1, 3, 4, 5, 
	6, 7, 8, 9, 10, 11, 12, 13, 
	14, 15, 16, 1, 0, 18, 0, 19, 
	0, 21, 22, 20, 24, 25, 23, 28, 
	27, 29, 27, 26, 32, 31, 33, 31, 
	30, 32, 31, 34, 31, 30, 32, 31, 
	35, 31, 30, 37, 36, 36, 0, 2, 
	38, 38, 0, 40, 41, 39, 2, 0, 
	42, 0, 43, 0, 44, 0, 45, 0, 
	46, 0, 47, 0, 48, 0, 49, 0, 
	50, 0, 51, 0, 52, 0, 53, 0, 
	54, 0, 55, 0, 56, 0, 58, 59, 
	57, 61, 62, 60, 0, 0, 0, 0, 
	63, 64, 65, 64, 64, 67, 66, 63, 
	2, 68, 7, 68, 0, 69, 70, 0, 
	71, 0, 72, 0, 73, 0, 74, 0, 
	75, 0, 76, 0, 77, 0, 78, 0, 
	79, 0, 72, 0, 80, 0, 81, 0, 
	82, 0, 83, 0, 84, 0, 85, 0, 
	86, 0, 87, 0, 88, 0, 90, 89, 
	92, 91, 92, 93, 94, 95, 94, 93, 
	91, 92, 96, 91, 92, 97, 91, 92, 
	98, 91, 92, 99, 91, 92, 100, 91, 
	92, 101, 91, 92, 102, 91, 92, 103, 
	91, 92, 104, 91, 92, 105, 91, 92, 
	106, 91, 107, 92, 91, 108, 92, 91, 
	92, 109, 91, 92, 110, 91, 112, 111, 
	113, 114, 115, 116, 117, 118, 119, 120, 
	121, 122, 123, 124, 125, 126, 111, 0, 
	127, 0, 79, 0, 128, 0, 129, 0, 
	130, 0, 131, 0, 132, 0, 133, 0, 
	134, 0, 135, 0, 136, 0, 137, 0, 
	138, 0, 139, 0, 140, 0, 141, 0, 
	142, 0, 144, 143, 146, 145, 146, 147, 
	148, 149, 148, 150, 151, 152, 153, 147, 
	145, 146, 154, 145, 146, 155, 145, 146, 
	156, 145, 146, 157, 145, 146, 158, 145, 
	146, 159, 145, 146, 160, 145, 146, 161, 
	145, 146, 162, 145, 146, 163, 145, 146, 
	164, 145, 146, 165, 145, 146, 166, 145, 
	146, 167, 145, 146, 168, 145, 146, 169, 
	145, 146, 170, 145, 146, 171, 145, 146, 
	172, 145, 146, 173, 145, 146, 174, 145, 
	146, 175, 145, 146, 176, 145, 146, 177, 
	145, 146, 178, 145, 146, 179, 145, 146, 
	180, 145, 146, 181, 145, 146, 182, 145, 
	146, 183, 145, 146, 184, 145, 146, 185, 
	145, 146, 186, 145, 146, 187, 145, 188, 
	146, 145, 189, 146, 145, 146, 175, 145, 
	146, 190, 145, 146, 191, 145, 146, 192, 
	145, 146, 193, 145, 146, 194, 145, 146, 
	195, 145, 146, 174, 145, 146, 196, 145, 
	146, 197, 145, 146, 198, 145, 146, 199, 
	145, 146, 200, 145, 146, 201, 145, 146, 
	202, 145, 146, 176, 203, 145, 146, 204, 
	145, 146, 205, 145, 146, 206, 145, 146, 
	207, 145, 146, 208, 145, 146, 209, 145, 
	146, 210, 145, 146, 175, 145, 211, 212, 
	0, 213, 0, 214, 0, 215, 0, 216, 
	0, 217, 0, 218, 0, 219, 0, 220, 
	0, 221, 0, 56, 79, 0, 222, 0, 
	223, 0, 224, 0, 225, 0, 226, 0, 
	227, 0, 228, 0, 229, 0, 231, 230, 
	233, 232, 233, 234, 235, 236, 237, 235, 
	238, 239, 240, 241, 242, 243, 244, 234, 
	232, 233, 245, 232, 233, 246, 232, 233, 
	247, 232, 233, 248, 232, 233, 249, 232, 
	233, 250, 232, 233, 251, 232, 233, 252, 
	232, 233, 253, 232, 233, 254, 232, 233, 
	255, 232, 233, 256, 232, 233, 257, 232, 
	233, 258, 232, 233, 259, 232, 233, 260, 
	261, 232, 233, 262, 232, 233, 263, 232, 
	233, 264, 232, 233, 265, 232, 233, 266, 
	232, 233, 267, 232, 233, 268, 232, 233, 
	269, 232, 233, 270, 232, 233, 263, 232, 
	233, 271, 232, 233, 270, 232, 233, 272, 
	232, 233, 273, 232, 233, 274, 232, 233, 
	275, 232, 233, 276, 232, 233, 277, 232, 
	233, 278, 232, 233, 279, 232, 233, 280, 
	232, 233, 281, 232, 233, 282, 232, 283, 
	233, 232, 284, 233, 232, 233, 285, 232, 
	233, 259, 232, 233, 286, 232, 233, 287, 
	232, 233, 288, 232, 233, 289, 232, 233, 
	290, 232, 233, 291, 232, 233, 292, 232, 
	233, 293, 232, 233, 294, 232, 233, 295, 
	232, 233, 259, 270, 232, 233, 296, 232, 
	233, 297, 232, 233, 298, 232, 233, 299, 
	232, 233, 300, 232, 233, 301, 232, 233, 
	302, 232, 233, 259, 303, 232, 233, 304, 
	232, 233, 305, 232, 233, 306, 232, 233, 
	307, 232, 233, 308, 232, 233, 309, 232, 
	233, 310, 232, 233, 285, 232, 233, 311, 
	232, 233, 263, 232, 233, 271, 232, 312, 
	0, 313, 0, 314, 0, 315, 0, 316, 
	0, 317, 0, 318, 0, 319, 320, 0, 
	322, 321, 324, 323, 324, 325, 326, 327, 
	328, 326, 329, 330, 331, 332, 333, 334, 
	335, 325, 323, 324, 336, 323, 324, 337, 
	323, 324, 338, 323, 324, 339, 323, 324, 
	340, 323, 324, 341, 323, 324, 342, 323, 
	324, 343, 323, 324, 344, 323, 324, 345, 
	323, 324, 346, 323, 324, 347, 323, 324, 
	348, 323, 324, 349, 323, 324, 350, 323, 
	324, 351, 352, 323, 324, 353, 323, 324, 
	354, 323, 324, 355, 323, 324, 356, 323, 
	324, 357, 323, 324, 358, 323, 324, 359, 
	323, 324, 360, 323, 324, 361, 323, 324, 
	354, 323, 324, 362, 323, 324, 361, 323, 
	324, 363, 323, 324, 364, 323, 324, 365, 
	323, 324, 366, 323, 324, 367, 323, 324, 
	368, 323, 324, 369, 323, 324, 370, 323, 
	324, 371, 323, 324, 372, 323, 324, 373, 
	323, 374, 324, 323, 375, 324, 323, 324, 
	376, 323, 324, 350, 323, 324, 377, 378, 
	323, 324, 379, 323, 324, 380, 323, 324, 
	381, 323, 324, 382, 323, 324, 383, 323, 
	324, 384, 323, 324, 385, 323, 324, 386, 
	323, 324, 387, 323, 324, 350, 361, 323, 
	324, 388, 323, 324, 389, 323, 324, 390, 
	323, 324, 391, 323, 324, 392, 323, 324, 
	393, 323, 324, 376, 323, 324, 394, 323, 
	324, 395, 323, 324, 396, 323, 324, 397, 
	323, 324, 398, 323, 324, 399, 323, 324, 
	400, 323, 324, 350, 401, 323, 324, 402, 
	323, 324, 403, 323, 324, 404, 323, 324, 
	405, 323, 324, 406, 323, 324, 407, 323, 
	324, 408, 323, 324, 376, 323, 324, 409, 
	323, 324, 354, 323, 324, 362, 323, 410, 
	0, 411, 0, 412, 0, 413, 0, 414, 
	0, 415, 0, 416, 0, 417, 0, 418, 
	0, 420, 419, 422, 421, 422, 423, 424, 
	425, 426, 424, 427, 428, 429, 430, 431, 
	432, 433, 423, 421, 422, 434, 421, 422, 
	435, 421, 422, 436, 421, 422, 437, 421, 
	422, 438, 421, 422, 439, 421, 422, 440, 
	421, 422, 441, 421, 422, 442, 421, 422, 
	443, 421, 422, 444, 421, 422, 445, 421, 
	422, 446, 421, 422, 447, 421, 422, 448, 
	421, 422, 449, 450, 421, 422, 451, 421, 
	422, 452, 421, 422, 453, 421, 422, 454, 
	421, 422, 455, 421, 422, 456, 421, 422, 
	457, 421, 422, 458, 421, 422, 459, 421, 
	422, 452, 421, 422, 460, 421, 422, 459, 
	421, 422, 461, 421, 422, 462, 421, 422, 
	463, 421, 422, 464, 421, 422, 465, 421, 
	422, 466, 421, 422, 467, 421, 422, 468, 
	421, 422, 469, 421, 422, 470, 421, 422, 
	471, 421, 472, 422, 421, 473, 422, 421, 
	422, 474, 421, 422, 448, 421, 422, 475, 
	421, 422, 476, 421, 422, 477, 421, 422, 
	478, 421, 422, 479, 421, 422, 480, 421, 
	422, 481, 421, 422, 482, 421, 422, 483, 
	421, 422, 484, 421, 422, 448, 459, 421, 
	422, 485, 421, 422, 486, 421, 422, 487, 
	421, 422, 488, 421, 422, 489, 421, 422, 
	490, 421, 422, 474, 421, 422, 491, 421, 
	422, 452, 421, 422, 460, 421, 492, 0, 
	72, 0, 127, 0, 493, 494, 493, 0, 
	497, 496, 498, 499, 496, 495, 0, 501, 
	502, 500, 0, 501, 500, 497, 503, 501, 
	502, 503, 500, 497, 504, 505, 506, 507, 
	508, 509, 510, 511, 512, 513, 514, 515, 
	516, 517, 518, 504, 0, 519, 0, 1, 
	0, 520, 0
];

var _lexer_trans_targs = [
	0, 2, 2, 3, 13, 15, 29, 32, 
	35, 46, 74, 76, 154, 249, 416, 418, 
	419, 425, 4, 5, 6, 7, 6, 6, 
	7, 6, 8, 8, 8, 9, 8, 8, 
	8, 9, 10, 11, 12, 2, 12, 13, 
	2, 14, 16, 17, 18, 19, 20, 21, 
	22, 23, 24, 25, 26, 27, 28, 427, 
	30, 31, 2, 14, 31, 2, 14, 33, 
	34, 2, 33, 32, 34, 36, 38, 37, 
	29, 39, 40, 41, 42, 43, 44, 45, 
	47, 48, 49, 50, 51, 52, 53, 54, 
	55, 56, 57, 56, 57, 57, 2, 58, 
	59, 60, 61, 62, 63, 64, 65, 66, 
	67, 68, 69, 70, 71, 72, 73, 2, 
	2, 3, 13, 15, 29, 32, 35, 46, 
	74, 76, 154, 249, 416, 418, 419, 75, 
	77, 78, 79, 80, 81, 82, 83, 84, 
	85, 86, 87, 88, 89, 90, 91, 92, 
	93, 92, 93, 93, 2, 94, 108, 117, 
	131, 138, 95, 96, 97, 98, 99, 100, 
	101, 102, 103, 104, 105, 106, 107, 2, 
	109, 110, 111, 112, 113, 114, 115, 116, 
	73, 118, 119, 120, 121, 122, 123, 124, 
	125, 126, 127, 128, 129, 130, 132, 133, 
	134, 135, 136, 137, 139, 140, 141, 142, 
	143, 144, 145, 146, 147, 148, 149, 150, 
	151, 152, 153, 155, 165, 156, 157, 158, 
	159, 160, 161, 162, 163, 164, 166, 167, 
	168, 169, 170, 171, 172, 173, 174, 175, 
	174, 175, 175, 2, 176, 190, 191, 202, 
	204, 219, 230, 246, 248, 177, 178, 179, 
	180, 181, 182, 183, 184, 185, 186, 187, 
	188, 189, 2, 73, 192, 194, 193, 190, 
	195, 196, 197, 198, 199, 200, 201, 203, 
	205, 206, 207, 208, 209, 210, 211, 212, 
	213, 214, 215, 216, 217, 218, 220, 221, 
	222, 223, 224, 225, 226, 227, 228, 229, 
	231, 232, 233, 234, 235, 236, 237, 238, 
	239, 240, 241, 242, 243, 244, 245, 247, 
	250, 251, 252, 253, 254, 255, 256, 257, 
	340, 258, 259, 258, 259, 259, 2, 260, 
	274, 275, 286, 288, 303, 321, 337, 339, 
	261, 262, 263, 264, 265, 266, 267, 268, 
	269, 270, 271, 272, 273, 2, 73, 276, 
	278, 277, 274, 279, 280, 281, 282, 283, 
	284, 285, 287, 289, 290, 291, 292, 293, 
	294, 295, 296, 297, 298, 299, 300, 301, 
	302, 304, 314, 305, 306, 307, 308, 309, 
	310, 311, 312, 313, 315, 316, 317, 318, 
	319, 320, 322, 323, 324, 325, 326, 327, 
	328, 329, 330, 331, 332, 333, 334, 335, 
	336, 338, 341, 342, 343, 344, 345, 346, 
	347, 348, 349, 350, 351, 350, 351, 351, 
	2, 352, 366, 367, 378, 380, 395, 406, 
	413, 415, 353, 354, 355, 356, 357, 358, 
	359, 360, 361, 362, 363, 364, 365, 2, 
	73, 368, 370, 369, 366, 371, 372, 373, 
	374, 375, 376, 377, 379, 381, 382, 383, 
	384, 385, 386, 387, 388, 389, 390, 391, 
	392, 393, 394, 396, 397, 398, 399, 400, 
	401, 402, 403, 404, 405, 407, 408, 409, 
	410, 411, 412, 414, 417, 419, 420, 421, 
	423, 424, 422, 420, 421, 422, 420, 423, 
	424, 3, 13, 15, 29, 32, 35, 46, 
	74, 76, 154, 249, 416, 418, 419, 426, 
	0
];

var _lexer_trans_actions = [
	43, 0, 54, 3, 1, 0, 29, 1, 
	29, 29, 29, 29, 29, 29, 29, 29, 
	35, 0, 0, 0, 7, 139, 48, 0, 
	102, 9, 5, 45, 134, 45, 0, 33, 
	122, 33, 33, 0, 11, 106, 0, 0, 
	114, 25, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 57, 149, 126, 0, 110, 23, 0, 
	27, 118, 27, 51, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 57, 144, 0, 54, 0, 81, 84, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 21, 31, 
	130, 60, 57, 31, 63, 57, 63, 63, 
	63, 63, 63, 63, 63, 63, 66, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 57, 
	144, 0, 54, 0, 69, 33, 84, 84, 
	84, 84, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 13, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	13, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 57, 144, 
	0, 54, 0, 72, 33, 84, 84, 84, 
	84, 84, 84, 84, 84, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 15, 15, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 57, 144, 0, 54, 0, 75, 33, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 17, 17, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 57, 144, 0, 54, 0, 
	78, 33, 84, 84, 84, 84, 84, 84, 
	84, 84, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 19, 
	19, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 37, 
	37, 54, 37, 87, 0, 0, 39, 0, 
	0, 93, 90, 41, 96, 90, 96, 96, 
	96, 96, 96, 96, 96, 96, 99, 0, 
	0
];

var _lexer_eof_actions = [
	0, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43
];

var lexer_start = 1;
var lexer_first_final = 427;
var lexer_error = 0;

var lexer_en_main = 1;


/* line 129 "ragel/i18n/de.js.rl" */

/* line 130 "ragel/i18n/de.js.rl" */

/* line 131 "ragel/i18n/de.js.rl" */

/* line 132 "ragel/i18n/de.js.rl" */

var Lexer = function(listener) {
  // Check that listener has the required functions
  var events = ['comment', 'tag', 'feature', 'background', 'scenario', 'scenario_outline', 'examples', 'step', 'doc_string', 'row', 'eof'];
  for(var i=0, len=events.length; i<len; i++) {
    var event = events[i];
    if(typeof listener[event] != 'function') {
      throw new Error("Error. No " + event + " function exists on " + JSON.stringify(listener));
    }
  }
  this.listener = listener;
};

Lexer.prototype.scan = function(data) {
  var ending = "\n%_FEATURE_END_%";
  if(typeof data == 'string') {
    data = this.stringToBytes(data + ending);
  } else if(typeof Buffer != 'undefined' && Buffer.isBuffer(data)) {
    // Node.js
    var buf = new Buffer(data.length + ending.length);
    data.copy(buf, 0, 0);
    new Buffer(ending).copy(buf, data.length, 0);
    data = buf;
  }
  var eof = pe = data.length;
  var p = 0;

  this.line_number = 1;
  this.last_newline = 0;
  var signedCharValue=function(v){return v > 127 ? v-256 : v; };

  
/* line 791 "js/lib/gherkin/lexer/de.js" */
{
	  this.cs = lexer_start;
} /* JSCodeGen::writeInit */

/* line 164 "ragel/i18n/de.js.rl" */
  
/* line 798 "js/lib/gherkin/lexer/de.js" */
{
	var _klen, _trans, _keys, _ps, _widec, _acts, _nacts;
	var _goto_level, _resume, _eof_trans, _again, _test_eof;
	var _out;
	_klen = _trans = _keys = _acts = _nacts = null;
	_goto_level = 0;
	_resume = 10;
	_eof_trans = 15;
	_again = 20;
	_test_eof = 30;
	_out = 40;
	while (true) {
	_trigger_goto = false;
	if (_goto_level <= 0) {
	if (p == pe) {
		_goto_level = _test_eof;
		continue;
	}
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	}
	if (_goto_level <= _resume) {
	_keys = _lexer_key_offsets[ this.cs];
	_trans = _lexer_index_offsets[ this.cs];
	_klen = _lexer_single_lengths[ this.cs];
	_break_match = false;
	
	do {
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + _klen - 1;

	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + ( (_upper - _lower) >> 1 );

	        if (( signedCharValue(data[p])) < _lexer_trans_keys[_mid]) {
	           _upper = _mid - 1;
	        } else if (( signedCharValue(data[p])) > _lexer_trans_keys[_mid]) {
	           _lower = _mid + 1;
	        } else {
	           _trans += (_mid - _keys);
	           _break_match = true;
	           break;
	        };
	     } /* while */
	     if (_break_match) { break; }
	     _keys += _klen;
	     _trans += _klen;
	  }
	  _klen = _lexer_range_lengths[ this.cs];
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + (_klen << 1) - 2;
	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + (((_upper-_lower) >> 1) & ~1);
	        if (( signedCharValue(data[p])) < _lexer_trans_keys[_mid]) {
	          _upper = _mid - 2;
	         } else if (( signedCharValue(data[p])) > _lexer_trans_keys[_mid+1]) {
	          _lower = _mid + 2;
	        } else {
	          _trans += ((_mid - _keys) >> 1);
	          _break_match = true;
	          break;
	        }
	     } /* while */
	     if (_break_match) { break; }
	     _trans += _klen
	  }
	} while (false);
	_trans = _lexer_indicies[_trans];
	 this.cs = _lexer_trans_targs[_trans];
	if (_lexer_trans_actions[_trans] != 0) {
		_acts = _lexer_trans_actions[_trans];
		_nacts = _lexer_actions[_acts];
		_acts += 1;
		while (_nacts > 0) {
			_nacts -= 1;
			_acts += 1;
			switch (_lexer_actions[_acts - 1]) {
case 0:
/* line 6 "ragel/i18n/de.js.rl" */

    this.content_start = p;
    this.current_line = this.line_number;
    this.start_col = p - this.last_newline - (this.keyword+':').length;
  		break;
case 1:
/* line 12 "ragel/i18n/de.js.rl" */

    this.current_line = this.line_number;
    this.start_col = p - this.last_newline;
  		break;
case 2:
/* line 17 "ragel/i18n/de.js.rl" */

    this.content_start = p;
  		break;
case 3:
/* line 21 "ragel/i18n/de.js.rl" */

    this.docstring_content_type_start = p;
  		break;
case 4:
/* line 25 "ragel/i18n/de.js.rl" */

    this.docstring_content_type_end = p;
  		break;
case 5:
/* line 29 "ragel/i18n/de.js.rl" */

    var con = this.unindent(
      this.start_col, 
      this.bytesToString(data.slice(this.content_start, this.next_keyword_start-1)).replace(/(\r?\n)?([\t ])*$/, '').replace(/\\\"\\\"\\\"/mg, '"""')
    );
    var con_type = this.bytesToString(data.slice(this.docstring_content_type_start, this.docstring_content_type_end)).trim();
    this.listener.doc_string(con_type, con, this.current_line); 
  		break;
case 6:
/* line 38 "ragel/i18n/de.js.rl" */

    p = this.store_keyword_content('feature', data, p, eof);
  		break;
case 7:
/* line 42 "ragel/i18n/de.js.rl" */

    p = this.store_keyword_content('background', data, p, eof);
  		break;
case 8:
/* line 46 "ragel/i18n/de.js.rl" */

    p = this.store_keyword_content('scenario', data, p, eof);
  		break;
case 9:
/* line 50 "ragel/i18n/de.js.rl" */

    p = this.store_keyword_content('scenario_outline', data, p, eof);
  		break;
case 10:
/* line 54 "ragel/i18n/de.js.rl" */

    p = this.store_keyword_content('examples', data, p, eof);
  		break;
case 11:
/* line 58 "ragel/i18n/de.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.step(this.keyword, con, this.current_line);
  		break;
case 12:
/* line 63 "ragel/i18n/de.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.comment(con, this.line_number);
    this.keyword_start = null;
  		break;
case 13:
/* line 69 "ragel/i18n/de.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.tag(con, this.line_number);
    this.keyword_start = null;
  		break;
case 14:
/* line 75 "ragel/i18n/de.js.rl" */

    this.line_number++;
  		break;
case 15:
/* line 79 "ragel/i18n/de.js.rl" */

    this.last_newline = p + 1;
  		break;
case 16:
/* line 83 "ragel/i18n/de.js.rl" */

    this.keyword_start = this.keyword_start || p;
  		break;
case 17:
/* line 87 "ragel/i18n/de.js.rl" */

    this.keyword = this.bytesToString(data.slice(this.keyword_start, p)).replace(/:$/, '');
    this.keyword_start = null;
  		break;
case 18:
/* line 92 "ragel/i18n/de.js.rl" */

    this.next_keyword_start = p;
  		break;
case 19:
/* line 96 "ragel/i18n/de.js.rl" */

    p = p - 1;
    current_row = [];
    this.current_line = this.line_number;
  		break;
case 20:
/* line 102 "ragel/i18n/de.js.rl" */

    this.content_start = p;
  		break;
case 21:
/* line 106 "ragel/i18n/de.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    current_row.push(con.replace(/\\\|/, "|").replace(/\\n/, "\n").replace(/\\\\/, "\\"));
  		break;
case 22:
/* line 111 "ragel/i18n/de.js.rl" */

    this.listener.row(current_row, this.current_line);
  		break;
case 23:
/* line 115 "ragel/i18n/de.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw new Error("Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.");
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 1025 "js/lib/gherkin/lexer/de.js" */
			} /* action switch */
		}
	}
	if (_trigger_goto) {
		continue;
	}
	}
	if (_goto_level <= _again) {
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	p += 1;
	if (p != pe) {
		_goto_level = _resume;
		continue;
	}
	}
	if (_goto_level <= _test_eof) {
	if (p == eof) {
	__acts = _lexer_eof_actions[ this.cs];
	__nacts =  _lexer_actions[__acts];
	__acts += 1;
	while (__nacts > 0) {
		__nacts -= 1;
		__acts += 1;
		switch (_lexer_actions[__acts - 1]) {
case 23:
/* line 115 "ragel/i18n/de.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw new Error("Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.");
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 1064 "js/lib/gherkin/lexer/de.js" */
		} /* eof action switch */
	}
	if (_trigger_goto) {
		continue;
	}
}
	}
	if (_goto_level <= _out) {
		break;
	}
	}
	}

/* line 165 "ragel/i18n/de.js.rl" */
};


/*
 * Decode utf-8 byte sequence to string.
 */
var decodeUtf8 = function(bytes) {
  var result = "";
  var i = 0;
  var wc;
  var c;

  while (i < bytes.length) {
    /* parse as UTF-8 lead byte */
    wc = bytes[i++];
    if (wc < 0x80) {
      count = 0;
    } else if (wc < 0xC2 || wc >= 0xF8) {
      throw new Error("input is not a valid UTF-8 lead octet");
    } else if (wc < 0xE0) {
      count = 1;
      wc = (wc & 0x1F) << 6;
    } else if (wc < 0xF0) {
      count = 2;
      wc = (wc & 0x0F) << 12;
    } else /* wc < 0xF8 */ {
      count = 3;
      wc = (wc & 0x07) << 18;
    }

    /* parse trail bytes, if any */
    while (count) {
      if (!(i < bytes.length)) {
        throw new Error("short read");
      }
      if ((c = bytes[i++] ^ 0x80) > 0x3F) {
        throw new Error("input is not a valid UTF-8 trail octet");
      }
      wc |= c << (6 * --count);
      if (wc < (1 << (5 * count + 6))) {
        throw new Error("invalid non-minimal encoded input");
      }
    }

    /* handle conversion to UTF-16 if needed */
    if (wc > 0xFFFF) {
      wc -= 0x10000;
      result += String.fromCharCode(0xD800 + (wc >> 10));
      wc = 0xDC00 + (wc & 0x3FF);
    }
    result += String.fromCharCode(wc);
  }

  return result;
};

/*
 * Encode string to an array of bytes using utf8 encoding.
 *
 * Javascript internally stores character data as utf16 (like java).
 * String.charCodeAt() does *not* produce unicode points, but simply
 * reflects this internal representation. Thus, it is necessary
 * to first decode the utf-16 representation before encoding to
 * utf-8.
 */
var encodeUtf8 = function(string) {
  var bytes = [];
  var i = 0;
  var j = 0;
  var wc;

  while (i < string.length) {
    wc = string.charCodeAt(i++);
    if (wc >= 0xD800 && wc <= 0xDBFF && i < string.length && string.charCodeAt(i) >= 0xDC00 && string.charCodeAt(i) <= 0xDFFF) {
      /* decode UTF-16 */
      wc = 0x10000 + ((wc & 0x3FF) << 10) + (string.charCodeAt(i++) & 0x3FF);
    }

    /* emit lead byte */
    if (wc < 0x80) {
      bytes[j++] = wc;
      count = 0;
    } else if (wc < 0x800) {
      bytes[j++] = 0xC0 | (wc >> 6);
      count = 1;
    } else if (wc < 0x10000) {
      bytes[j++] = 0xE0 | (wc >> 12);
      count = 2;
    } else {
      /* SMP: 21-bit Unicode */
      bytes[j++] = 0xF0 | (wc >> 18);
      count = 3;
    }

    /* emit trail bytes, if any */
    while (count) {
      bytes[j++] = 0x80 | ((wc >> (6 * --count)) & 0x3F);
    }
  }

  return bytes;

};

Lexer.prototype.bytesToString = function(bytes) {
  if(typeof bytes.write == 'function') {
    // Node.js
    return bytes.toString('utf-8');
  }
  return decodeUtf8(bytes);
};

Lexer.prototype.stringToBytes = function(string) {
  return encodeUtf8(string);
};

Lexer.prototype.unindent = function(startcol, text) {
  startcol = startcol || 0;
  return text.replace(new RegExp('^[\t ]{0,' + startcol + '}', 'gm'), ''); 
};

Lexer.prototype.store_keyword_content = function(event, data, p, eof) {
  var end_point = (!this.next_keyword_start || (p == eof)) ? p : this.next_keyword_start;
  var content = this.unindent(this.start_col + 2, this.bytesToString(data.slice(this.content_start, end_point))).replace(/\s+$/,"");
  var content_lines = content.split("\n")
  var name = content_lines.shift() || "";
  name = name.trim();
  var description = content_lines.join("\n");
  this.listener[event](this.keyword, name, description, this.current_line);
  var nks = this.next_keyword_start;
  this.next_keyword_start = null;
  return nks ? nks - 1 : p;
};

Lexer.prototype.current_line_content = function(data, p) {
  var rest = Array.prototype.slice.call(data,this.last_newline, -1);
  var end = rest.indexOf(10) || -1;
  return this.bytesToString(rest.slice(0, end)).trim();
};

// Node.js export
if(typeof module !== 'undefined') {
  module.exports = Lexer;
}
// Require.js export
if (typeof define !== 'undefined') {
  if(define.amd) {
    define('gherkin/lexer/de', [], function() {
      return Lexer;
    });
  } else {
    define('gherkin/lexer/de', function(require, exports, module) {
      exports.Lexer = Lexer;
    });
  }
}

})();

}).call(this,require("buffer").Buffer)

},{"buffer":69}],193:[function(require,module,exports){
(function (Buffer){

/* line 1 "ragel/i18n/el.js.rl" */
;(function() {


/* line 126 "ragel/i18n/el.js.rl" */



/* line 11 "js/lib/gherkin/lexer/el.js" */
var _lexer_actions = [
	0, 1, 0, 1, 1, 1, 2, 1, 
	3, 1, 4, 1, 5, 1, 6, 1, 
	7, 1, 8, 1, 9, 1, 10, 1, 
	11, 1, 12, 1, 13, 1, 16, 1, 
	17, 1, 18, 1, 19, 1, 20, 1, 
	21, 1, 22, 1, 23, 2, 2, 18, 
	2, 3, 4, 2, 13, 0, 2, 14, 
	15, 2, 17, 0, 2, 17, 1, 2, 
	17, 16, 2, 17, 19, 2, 18, 6, 
	2, 18, 7, 2, 18, 8, 2, 18, 
	9, 2, 18, 10, 2, 18, 16, 2, 
	20, 21, 2, 22, 0, 2, 22, 1, 
	2, 22, 16, 2, 22, 19, 3, 4, 
	14, 15, 3, 5, 14, 15, 3, 11, 
	14, 15, 3, 12, 14, 15, 3, 13, 
	14, 15, 3, 14, 15, 18, 3, 17, 
	0, 11, 3, 17, 14, 15, 4, 2, 
	14, 15, 18, 4, 3, 4, 14, 15, 
	4, 17, 0, 14, 15, 5, 17, 0, 
	11, 14, 15
];

var _lexer_key_offsets = [
	0, 0, 12, 21, 22, 23, 24, 25, 
	26, 27, 28, 30, 32, 43, 44, 45, 
	47, 49, 54, 59, 64, 69, 73, 77, 
	79, 80, 81, 82, 83, 84, 85, 86, 
	87, 88, 89, 90, 91, 92, 93, 94, 
	99, 106, 111, 115, 121, 124, 126, 132, 
	143, 144, 145, 146, 147, 148, 149, 151, 
	152, 153, 154, 155, 156, 157, 158, 159, 
	160, 161, 162, 163, 164, 165, 166, 167, 
	168, 169, 170, 171, 172, 173, 174, 175, 
	176, 177, 178, 179, 180, 181, 182, 183, 
	184, 185, 186, 194, 200, 202, 204, 206, 
	208, 210, 212, 214, 216, 218, 220, 222, 
	224, 226, 228, 230, 232, 234, 236, 238, 
	249, 251, 253, 255, 257, 259, 261, 263, 
	265, 267, 269, 271, 273, 275, 277, 279, 
	281, 283, 286, 288, 290, 292, 294, 296, 
	298, 300, 302, 304, 306, 308, 310, 312, 
	314, 316, 318, 320, 322, 324, 326, 328, 
	330, 332, 334, 336, 338, 340, 342, 344, 
	346, 348, 350, 352, 354, 356, 358, 360, 
	362, 364, 366, 368, 370, 372, 374, 376, 
	378, 380, 382, 384, 386, 388, 390, 392, 
	394, 396, 398, 400, 402, 405, 407, 409, 
	411, 413, 415, 417, 419, 421, 423, 425, 
	427, 429, 431, 433, 435, 437, 439, 441, 
	443, 445, 447, 449, 451, 453, 455, 457, 
	459, 461, 462, 463, 464, 465, 466, 467, 
	468, 469, 470, 471, 472, 473, 474, 475, 
	476, 477, 478, 479, 480, 481, 482, 484, 
	485, 486, 487, 488, 489, 490, 491, 492, 
	493, 494, 495, 496, 497, 498, 499, 500, 
	501, 502, 503, 504, 505, 506, 507, 514, 
	517, 519, 521, 523, 525, 527, 529, 531, 
	533, 535, 537, 539, 541, 543, 545, 547, 
	549, 551, 553, 555, 557, 559, 561, 563, 
	565, 567, 569, 571, 573, 575, 577, 579, 
	581, 583, 585, 587, 588, 589, 590, 591, 
	592, 593, 594, 595, 596, 597, 598, 599, 
	600, 601, 602, 603, 604, 605, 606, 607, 
	608, 609, 610, 611, 612, 613, 614, 615, 
	616, 617, 618, 619, 620, 621, 630, 638, 
	640, 642, 644, 646, 648, 650, 652, 654, 
	656, 658, 660, 662, 664, 667, 669, 671, 
	673, 675, 677, 679, 681, 683, 685, 687, 
	689, 691, 693, 695, 697, 699, 701, 703, 
	705, 707, 709, 711, 713, 715, 717, 719, 
	721, 723, 725, 727, 729, 731, 733, 735, 
	737, 739, 741, 743, 745, 747, 749, 751, 
	753, 755, 757, 759, 761, 763, 765, 767, 
	769, 771, 773, 775, 777, 779, 781, 783, 
	785, 787, 789, 791, 793, 795, 797, 799, 
	801, 803, 805, 807, 809, 811, 813, 815, 
	817, 819, 821, 823, 825, 827, 829, 831, 
	833, 835, 837, 838, 839, 840, 841, 842, 
	843, 844, 845, 846, 847, 848, 850, 851, 
	852, 853, 862, 872, 874, 876, 878, 880, 
	882, 884, 886, 888, 890, 892, 894, 896, 
	898, 901, 903, 905, 907, 909, 911, 913, 
	915, 917, 919, 921, 923, 925, 927, 929, 
	931, 933, 935, 937, 939, 941, 943, 945, 
	947, 949, 951, 953, 955, 957, 959, 961, 
	963, 965, 967, 969, 971, 973, 975, 977, 
	979, 981, 983, 985, 987, 989, 991, 993, 
	995, 997, 999, 1001, 1003, 1005, 1007, 1009, 
	1011, 1013, 1015, 1017, 1019, 1021, 1023, 1025, 
	1027, 1029, 1031, 1033, 1035, 1037, 1039, 1041, 
	1043, 1045, 1047, 1049, 1051, 1053, 1055, 1057, 
	1059, 1061, 1063, 1065, 1067, 1069, 1071, 1073, 
	1075, 1077, 1079, 1081, 1083, 1085, 1087, 1089, 
	1091, 1093, 1095, 1097, 1099, 1101, 1103, 1105, 
	1107, 1109, 1111, 1113, 1115, 1117, 1119, 1121, 
	1123, 1125, 1127, 1129, 1131, 1133, 1135, 1137, 
	1139, 1141, 1143, 1145, 1147, 1149, 1151, 1153, 
	1155, 1157, 1159, 1161, 1162, 1163, 1164, 1165, 
	1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 
	1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 
	1182, 1183, 1184, 1193, 1202, 1204, 1206, 1208, 
	1210, 1212, 1214, 1216, 1218, 1220, 1222, 1224, 
	1226, 1228, 1231, 1233, 1235, 1237, 1239, 1241, 
	1243, 1245, 1247, 1249, 1251, 1253, 1255, 1257, 
	1259, 1261, 1263, 1265, 1267, 1269, 1271, 1273, 
	1275, 1277, 1279, 1281, 1283, 1285, 1287, 1289, 
	1291, 1293, 1295, 1297, 1299, 1301, 1303, 1305, 
	1307, 1309, 1311, 1313, 1315, 1317, 1319, 1321, 
	1323, 1325, 1327, 1329, 1331, 1333, 1335, 1337, 
	1339, 1341, 1343, 1345, 1347, 1349, 1351, 1353, 
	1355, 1357, 1359, 1361, 1363, 1365, 1367, 1369, 
	1371, 1373, 1375, 1377, 1379, 1381, 1383, 1385, 
	1387, 1389, 1391, 1393, 1395, 1397, 1399, 1401, 
	1403, 1405, 1407, 1409, 1411, 1413, 1415, 1417, 
	1419, 1421, 1423, 1425, 1427, 1429, 1431, 1433, 
	1435, 1437, 1439, 1441, 1443, 1445, 1447, 1449, 
	1451, 1453, 1455, 1457, 1459, 1461, 1463, 1465, 
	1467, 1468, 1469
];

var _lexer_trans_keys = [
	-50, 10, 32, 34, 35, 37, 42, 64, 
	124, 239, 9, 13, -116, -111, -108, -102, 
	-101, -96, -93, -92, -91, -49, -124, -50, 
	-79, -50, -67, 32, 10, 13, 10, 13, 
	-50, 10, 32, 34, 35, 37, 42, 64, 
	124, 9, 13, 34, 34, 10, 13, 10, 
	13, 10, 32, 34, 9, 13, 10, 32, 
	34, 9, 13, 10, 32, 34, 9, 13, 
	10, 32, 34, 9, 13, 10, 32, 9, 
	13, 10, 32, 9, 13, 10, 13, 10, 
	95, 70, 69, 65, 84, 85, 82, 69, 
	95, 69, 78, 68, 95, 37, 13, 32, 
	64, 9, 10, 9, 10, 13, 32, 64, 
	11, 12, 10, 32, 64, 9, 13, 32, 
	124, 9, 13, 10, 32, 92, 124, 9, 
	13, 10, 92, 124, 10, 92, 10, 32, 
	92, 124, 9, 13, -50, 10, 32, 34, 
	35, 37, 42, 64, 124, 9, 13, -50, 
	-69, -50, -69, -50, -84, -50, -49, -75, 
	-50, -76, -50, -65, -50, -68, -50, -83, 
	-50, -67, -50, -65, -49, -123, -123, -50, 
	-67, -50, -79, -49, -124, -49, -116, -49, 
	-124, -50, -73, -49, -124, -50, -79, 58, 
	10, 10, -50, 10, 32, 35, 37, 64, 
	9, 13, -108, -101, -96, -93, -91, 10, 
	-49, 10, -123, 10, -50, 10, -67, 10, 
	-50, 10, -79, 10, -49, 10, -124, 10, 
	-49, 10, -116, 10, -49, 10, -124, 10, 
	-50, 10, -73, 10, -49, 10, -124, 10, 
	-50, 10, -79, 10, 10, 58, -50, 10, 
	32, 34, 35, 37, 42, 64, 124, 9, 
	13, -50, 10, -75, 10, -50, 10, -71, 
	10, -49, 10, -124, 10, -50, 10, -65, 
	10, -49, 10, -123, 10, -49, 10, -127, 
	10, -50, 10, -77, 10, -50, 10, -81, 
	10, -50, 10, -79, -75, 10, -49, 10, 
	-127, 10, -50, 10, -79, 10, -50, 10, 
	-76, 10, -50, 10, -75, 10, -50, 10, 
	-81, 10, -50, 10, -77, 10, -50, 10, 
	-68, 10, -50, 10, -79, 10, -49, 10, 
	-127, 10, -50, 10, -71, 10, -50, 10, 
	-77, 10, -49, 10, -127, 10, -50, 10, 
	-79, 10, -49, 10, -122, 10, -50, 10, 
	-82, 10, 10, 32, -50, 10, -93, 10, 
	-50, 10, -75, 10, -50, 10, -67, 10, 
	-50, 10, -79, 10, -49, 10, -127, 10, 
	-50, 10, -81, 10, -50, 10, -65, 10, 
	-49, 10, -123, 10, -50, 10, -75, 10, 
	-50, 10, -67, 10, -50, 10, -84, 10, 
	-49, 10, -127, 10, -50, 10, -71, 10, 
	-50, 10, -79, -65, 10, -49, 10, -128, 
	10, -49, 10, -116, 10, -50, 10, -78, 
	10, -50, 10, -79, 10, -50, 10, -72, 
	10, -49, 10, -127, 10, -50, 10, -65, 
	10, 10, 95, 10, 70, 10, 69, 10, 
	65, 10, 84, 10, 85, 10, 82, 10, 
	69, 10, 95, 10, 69, 10, 78, 10, 
	68, 10, 95, 10, 37, -50, -79, -50, 
	-71, -50, -75, -50, -71, -49, -124, -50, 
	-65, -49, -123, -49, -127, -50, -77, -50, 
	-81, -50, -79, -75, -49, -127, -50, -79, 
	-50, -76, -50, -75, -50, -81, -50, -77, 
	-50, -68, -50, -79, -49, -124, -50, -79, 
	58, 10, 10, -50, 10, 32, 35, 124, 
	9, 13, -108, -101, 10, -49, 10, -123, 
	10, -50, 10, -67, 10, -50, 10, -79, 
	10, -49, 10, -124, 10, -49, 10, -116, 
	10, -49, 10, -124, 10, -50, 10, -73, 
	10, -49, 10, -124, 10, -50, 10, -79, 
	10, 10, 58, -50, 10, -75, 10, -50, 
	10, -71, 10, -49, 10, -124, 10, -50, 
	10, -65, 10, -49, 10, -123, 10, -49, 
	10, -127, 10, -50, 10, -77, 10, -50, 
	10, -81, 10, -49, -127, -50, -71, -50, 
	-77, -49, -127, -50, -79, -49, -122, -50, 
	-82, 32, -50, -93, -50, -75, -50, -67, 
	-50, -79, -49, -127, -50, -81, -50, -65, 
	-49, -123, 58, 10, 10, -50, 10, 32, 
	35, 37, 42, 64, 9, 13, -116, -111, 
	-108, -102, -101, -93, -92, 10, -49, 10, 
	-124, 10, -50, 10, -79, 10, -50, 10, 
	-67, 10, 10, 32, -50, 10, -69, 10, 
	-50, 10, -69, 10, -50, 10, -84, 10, 
	-50, -49, 10, -75, 10, -50, 10, -76, 
	10, -50, 10, -65, 10, -50, 10, -68, 
	10, -50, 10, -83, 10, -50, 10, -67, 
	10, -50, 10, -65, 10, -49, 10, -123, 
	10, -123, 10, -50, 10, -67, 10, -50, 
	10, -79, 10, -49, 10, -124, 10, -49, 
	10, -116, 10, -49, 10, -124, 10, -50, 
	10, -73, 10, -49, 10, -124, 10, -50, 
	10, -79, 10, 10, 58, -50, 10, -79, 
	10, -50, 10, -71, 10, -50, 10, -75, 
	10, -50, 10, -71, 10, -49, 10, -124, 
	10, -50, 10, -65, 10, -49, 10, -123, 
	10, -49, 10, -127, 10, -50, 10, -77, 
	10, -50, 10, -81, 10, -50, 10, -75, 
	10, -50, 10, -67, 10, -50, 10, -84, 
	10, -49, 10, -127, 10, -50, 10, -71, 
	10, -50, 10, -65, 10, -49, 10, -116, 
	10, -49, 10, -124, 10, -50, 10, -75, 
	10, 10, 95, 10, 70, 10, 69, 10, 
	65, 10, 84, 10, 85, 10, 82, 10, 
	69, 10, 95, 10, 69, 10, 78, 10, 
	68, 10, 95, 10, 37, -50, -75, -50, 
	-67, -50, -84, -49, -127, -50, -71, -50, 
	-79, -65, 58, 10, 10, -50, 10, 32, 
	35, 37, 42, 64, 9, 13, -116, -111, 
	-108, -102, -101, -96, -93, -92, -91, 10, 
	-49, 10, -124, 10, -50, 10, -79, 10, 
	-50, 10, -67, 10, 10, 32, -50, 10, 
	-69, 10, -50, 10, -69, 10, -50, 10, 
	-84, 10, -50, -49, 10, -75, 10, -50, 
	10, -76, 10, -50, 10, -65, 10, -50, 
	10, -68, 10, -50, 10, -83, 10, -50, 
	10, -67, 10, -50, 10, -65, 10, -49, 
	10, -123, 10, -123, 10, -50, 10, -67, 
	10, -50, 10, -79, 10, -49, 10, -124, 
	10, -49, 10, -116, 10, -49, 10, -124, 
	10, -50, 10, -73, 10, -49, 10, -124, 
	10, -50, 10, -79, 10, 10, 58, -50, 
	10, -79, 10, -50, 10, -71, 10, -50, 
	10, -75, 10, -50, 10, -71, 10, -49, 
	10, -124, 10, -50, 10, -65, 10, -49, 
	10, -123, 10, -49, 10, -127, 10, -50, 
	10, -77, 10, -50, 10, -81, 10, -50, 
	10, -75, 10, -49, 10, -127, 10, -50, 
	10, -71, 10, -50, 10, -77, 10, -49, 
	10, -127, 10, -50, 10, -79, 10, -49, 
	10, -122, 10, -50, 10, -82, 10, 10, 
	32, -50, 10, -93, 10, -50, 10, -75, 
	10, -50, 10, -67, 10, -50, 10, -79, 
	10, -49, 10, -127, 10, -50, 10, -81, 
	10, -50, 10, -65, 10, -49, 10, -123, 
	10, -50, 10, -75, 10, -50, 10, -67, 
	10, -50, 10, -84, 10, -49, 10, -127, 
	10, -50, 10, -71, 10, -50, 10, -65, 
	10, -49, 10, -116, 10, -49, 10, -124, 
	10, -50, 10, -75, 10, -49, 10, -128, 
	10, -49, 10, -116, 10, -50, 10, -78, 
	10, -50, 10, -79, 10, -50, 10, -72, 
	10, -49, 10, -127, 10, 10, 95, 10, 
	70, 10, 69, 10, 65, 10, 84, 10, 
	85, 10, 82, 10, 69, 10, 95, 10, 
	69, 10, 78, 10, 68, 10, 95, 10, 
	37, -49, -116, -49, -124, -50, -75, -49, 
	-128, -49, -116, -50, -78, -50, -79, -50, 
	-72, -49, -127, -50, -65, 58, 10, 10, 
	-50, 10, 32, 35, 37, 42, 64, 9, 
	13, -116, -111, -108, -102, -101, -96, -93, 
	-92, 10, -49, 10, -124, 10, -50, 10, 
	-79, 10, -50, 10, -67, 10, 10, 32, 
	-50, 10, -69, 10, -50, 10, -69, 10, 
	-50, 10, -84, 10, -50, -49, 10, -75, 
	10, -50, 10, -76, 10, -50, 10, -65, 
	10, -50, 10, -68, 10, -50, 10, -83, 
	10, -50, 10, -67, 10, -50, 10, -65, 
	10, -49, 10, -123, 10, -123, 10, -50, 
	10, -67, 10, -50, 10, -79, 10, -49, 
	10, -124, 10, -49, 10, -116, 10, -49, 
	10, -124, 10, -50, 10, -73, 10, -49, 
	10, -124, 10, -50, 10, -79, 10, 10, 
	58, -50, 10, -79, 10, -50, 10, -71, 
	10, -50, 10, -75, 10, -50, 10, -71, 
	10, -49, 10, -124, 10, -50, 10, -65, 
	10, -49, 10, -123, 10, -49, 10, -127, 
	10, -50, 10, -77, 10, -50, 10, -81, 
	10, -50, 10, -75, 10, -49, 10, -127, 
	10, -50, 10, -71, 10, -50, 10, -77, 
	10, -49, 10, -127, 10, -50, 10, -79, 
	10, -49, 10, -122, 10, -50, 10, -82, 
	10, 10, 32, -50, 10, -93, 10, -50, 
	10, -75, 10, -50, 10, -67, 10, -50, 
	10, -79, 10, -49, 10, -127, 10, -50, 
	10, -81, 10, -50, 10, -65, 10, -49, 
	10, -123, 10, -50, 10, -75, 10, -50, 
	10, -67, 10, -50, 10, -84, 10, -49, 
	10, -127, 10, -50, 10, -71, 10, -50, 
	10, -65, 10, -49, 10, -116, 10, -49, 
	10, -124, 10, -50, 10, -75, 10, 10, 
	95, 10, 70, 10, 69, 10, 65, 10, 
	84, 10, 85, 10, 82, 10, 69, 10, 
	95, 10, 69, 10, 78, 10, 68, 10, 
	95, 10, 37, 187, 191, 0
];

var _lexer_single_lengths = [
	0, 10, 9, 1, 1, 1, 1, 1, 
	1, 1, 2, 2, 9, 1, 1, 2, 
	2, 3, 3, 3, 3, 2, 2, 2, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 3, 
	5, 3, 2, 4, 3, 2, 4, 9, 
	1, 1, 1, 1, 1, 1, 2, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 6, 6, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 9, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 3, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 3, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 2, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 5, 3, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 7, 8, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 3, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 2, 1, 1, 
	1, 7, 10, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	3, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 7, 9, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 3, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	1, 1, 0
];

var _lexer_range_lengths = [
	0, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 0, 0, 0, 
	0, 1, 1, 1, 1, 1, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	1, 1, 1, 1, 0, 0, 1, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0
];

var _lexer_index_offsets = [
	0, 0, 12, 22, 24, 26, 28, 30, 
	32, 34, 36, 39, 42, 53, 55, 57, 
	60, 63, 68, 73, 78, 83, 87, 91, 
	94, 96, 98, 100, 102, 104, 106, 108, 
	110, 112, 114, 116, 118, 120, 122, 124, 
	129, 136, 141, 145, 151, 155, 158, 164, 
	175, 177, 179, 181, 183, 185, 187, 190, 
	192, 194, 196, 198, 200, 202, 204, 206, 
	208, 210, 212, 214, 216, 218, 220, 222, 
	224, 226, 228, 230, 232, 234, 236, 238, 
	240, 242, 244, 246, 248, 250, 252, 254, 
	256, 258, 260, 268, 275, 278, 281, 284, 
	287, 290, 293, 296, 299, 302, 305, 308, 
	311, 314, 317, 320, 323, 326, 329, 332, 
	343, 346, 349, 352, 355, 358, 361, 364, 
	367, 370, 373, 376, 379, 382, 385, 388, 
	391, 394, 398, 401, 404, 407, 410, 413, 
	416, 419, 422, 425, 428, 431, 434, 437, 
	440, 443, 446, 449, 452, 455, 458, 461, 
	464, 467, 470, 473, 476, 479, 482, 485, 
	488, 491, 494, 497, 500, 503, 506, 509, 
	512, 515, 518, 521, 524, 527, 530, 533, 
	536, 539, 542, 545, 548, 551, 554, 557, 
	560, 563, 566, 569, 572, 576, 579, 582, 
	585, 588, 591, 594, 597, 600, 603, 606, 
	609, 612, 615, 618, 621, 624, 627, 630, 
	633, 636, 639, 642, 645, 648, 651, 654, 
	657, 660, 662, 664, 666, 668, 670, 672, 
	674, 676, 678, 680, 682, 684, 686, 688, 
	690, 692, 694, 696, 698, 700, 702, 705, 
	707, 709, 711, 713, 715, 717, 719, 721, 
	723, 725, 727, 729, 731, 733, 735, 737, 
	739, 741, 743, 745, 747, 749, 751, 758, 
	762, 765, 768, 771, 774, 777, 780, 783, 
	786, 789, 792, 795, 798, 801, 804, 807, 
	810, 813, 816, 819, 822, 825, 828, 831, 
	834, 837, 840, 843, 846, 849, 852, 855, 
	858, 861, 864, 867, 869, 871, 873, 875, 
	877, 879, 881, 883, 885, 887, 889, 891, 
	893, 895, 897, 899, 901, 903, 905, 907, 
	909, 911, 913, 915, 917, 919, 921, 923, 
	925, 927, 929, 931, 933, 935, 944, 953, 
	956, 959, 962, 965, 968, 971, 974, 977, 
	980, 983, 986, 989, 992, 996, 999, 1002, 
	1005, 1008, 1011, 1014, 1017, 1020, 1023, 1026, 
	1029, 1032, 1035, 1038, 1041, 1044, 1047, 1050, 
	1053, 1056, 1059, 1062, 1065, 1068, 1071, 1074, 
	1077, 1080, 1083, 1086, 1089, 1092, 1095, 1098, 
	1101, 1104, 1107, 1110, 1113, 1116, 1119, 1122, 
	1125, 1128, 1131, 1134, 1137, 1140, 1143, 1146, 
	1149, 1152, 1155, 1158, 1161, 1164, 1167, 1170, 
	1173, 1176, 1179, 1182, 1185, 1188, 1191, 1194, 
	1197, 1200, 1203, 1206, 1209, 1212, 1215, 1218, 
	1221, 1224, 1227, 1230, 1233, 1236, 1239, 1242, 
	1245, 1248, 1251, 1253, 1255, 1257, 1259, 1261, 
	1263, 1265, 1267, 1269, 1271, 1273, 1276, 1278, 
	1280, 1282, 1291, 1302, 1305, 1308, 1311, 1314, 
	1317, 1320, 1323, 1326, 1329, 1332, 1335, 1338, 
	1341, 1345, 1348, 1351, 1354, 1357, 1360, 1363, 
	1366, 1369, 1372, 1375, 1378, 1381, 1384, 1387, 
	1390, 1393, 1396, 1399, 1402, 1405, 1408, 1411, 
	1414, 1417, 1420, 1423, 1426, 1429, 1432, 1435, 
	1438, 1441, 1444, 1447, 1450, 1453, 1456, 1459, 
	1462, 1465, 1468, 1471, 1474, 1477, 1480, 1483, 
	1486, 1489, 1492, 1495, 1498, 1501, 1504, 1507, 
	1510, 1513, 1516, 1519, 1522, 1525, 1528, 1531, 
	1534, 1537, 1540, 1543, 1546, 1549, 1552, 1555, 
	1558, 1561, 1564, 1567, 1570, 1573, 1576, 1579, 
	1582, 1585, 1588, 1591, 1594, 1597, 1600, 1603, 
	1606, 1609, 1612, 1615, 1618, 1621, 1624, 1627, 
	1630, 1633, 1636, 1639, 1642, 1645, 1648, 1651, 
	1654, 1657, 1660, 1663, 1666, 1669, 1672, 1675, 
	1678, 1681, 1684, 1687, 1690, 1693, 1696, 1699, 
	1702, 1705, 1708, 1711, 1714, 1717, 1720, 1723, 
	1726, 1729, 1732, 1735, 1737, 1739, 1741, 1743, 
	1745, 1747, 1749, 1751, 1753, 1755, 1757, 1759, 
	1761, 1763, 1765, 1767, 1769, 1771, 1773, 1775, 
	1777, 1779, 1781, 1790, 1800, 1803, 1806, 1809, 
	1812, 1815, 1818, 1821, 1824, 1827, 1830, 1833, 
	1836, 1839, 1843, 1846, 1849, 1852, 1855, 1858, 
	1861, 1864, 1867, 1870, 1873, 1876, 1879, 1882, 
	1885, 1888, 1891, 1894, 1897, 1900, 1903, 1906, 
	1909, 1912, 1915, 1918, 1921, 1924, 1927, 1930, 
	1933, 1936, 1939, 1942, 1945, 1948, 1951, 1954, 
	1957, 1960, 1963, 1966, 1969, 1972, 1975, 1978, 
	1981, 1984, 1987, 1990, 1993, 1996, 1999, 2002, 
	2005, 2008, 2011, 2014, 2017, 2020, 2023, 2026, 
	2029, 2032, 2035, 2038, 2041, 2044, 2047, 2050, 
	2053, 2056, 2059, 2062, 2065, 2068, 2071, 2074, 
	2077, 2080, 2083, 2086, 2089, 2092, 2095, 2098, 
	2101, 2104, 2107, 2110, 2113, 2116, 2119, 2122, 
	2125, 2128, 2131, 2134, 2137, 2140, 2143, 2146, 
	2149, 2152, 2155, 2158, 2161, 2164, 2167, 2170, 
	2173, 2176, 2179, 2182, 2185, 2188, 2191, 2194, 
	2197, 2199, 2201
];

var _lexer_indicies = [
	1, 3, 2, 4, 5, 6, 7, 8, 
	9, 10, 2, 0, 11, 12, 13, 14, 
	15, 16, 17, 18, 19, 0, 20, 0, 
	21, 0, 22, 0, 23, 0, 24, 0, 
	25, 0, 26, 0, 28, 29, 27, 31, 
	32, 30, 1, 3, 2, 4, 5, 6, 
	7, 8, 9, 2, 0, 33, 0, 34, 
	0, 36, 37, 35, 39, 40, 38, 43, 
	42, 44, 42, 41, 47, 46, 48, 46, 
	45, 47, 46, 49, 46, 45, 47, 46, 
	50, 46, 45, 52, 51, 51, 0, 3, 
	53, 53, 0, 55, 56, 54, 3, 0, 
	57, 0, 58, 0, 59, 0, 60, 0, 
	61, 0, 62, 0, 63, 0, 64, 0, 
	65, 0, 66, 0, 67, 0, 68, 0, 
	69, 0, 70, 0, 0, 0, 0, 0, 
	71, 72, 73, 72, 72, 75, 74, 71, 
	3, 76, 8, 76, 0, 77, 78, 77, 
	0, 81, 80, 82, 83, 80, 79, 0, 
	85, 86, 84, 0, 85, 84, 81, 87, 
	85, 86, 87, 84, 88, 81, 89, 90, 
	91, 92, 93, 94, 95, 89, 0, 96, 
	0, 97, 0, 98, 0, 99, 0, 100, 
	0, 25, 0, 101, 102, 0, 103, 0, 
	104, 0, 105, 0, 106, 0, 107, 0, 
	108, 0, 109, 0, 110, 0, 111, 0, 
	112, 0, 113, 0, 114, 0, 115, 0, 
	116, 0, 25, 0, 117, 0, 118, 0, 
	119, 0, 120, 0, 121, 0, 122, 0, 
	123, 0, 124, 0, 125, 0, 126, 0, 
	127, 0, 128, 0, 129, 0, 130, 0, 
	131, 0, 132, 0, 133, 0, 134, 0, 
	136, 135, 138, 137, 139, 138, 140, 141, 
	142, 141, 140, 137, 143, 144, 145, 146, 
	147, 138, 137, 148, 138, 137, 149, 138, 
	137, 150, 138, 137, 151, 138, 137, 152, 
	138, 137, 153, 138, 137, 154, 138, 137, 
	155, 138, 137, 156, 138, 137, 157, 138, 
	137, 158, 138, 137, 159, 138, 137, 160, 
	138, 137, 161, 138, 137, 162, 138, 137, 
	163, 138, 137, 164, 138, 137, 165, 138, 
	137, 138, 166, 137, 167, 169, 168, 170, 
	171, 172, 173, 174, 175, 168, 0, 176, 
	138, 137, 177, 138, 137, 178, 138, 137, 
	179, 138, 137, 180, 138, 137, 181, 138, 
	137, 182, 138, 137, 183, 138, 137, 184, 
	138, 137, 185, 138, 137, 186, 138, 137, 
	187, 138, 137, 188, 138, 137, 189, 138, 
	137, 190, 138, 137, 163, 138, 137, 191, 
	138, 137, 192, 193, 138, 137, 194, 138, 
	137, 195, 138, 137, 196, 138, 137, 197, 
	138, 137, 198, 138, 137, 199, 138, 137, 
	200, 138, 137, 201, 138, 137, 202, 138, 
	137, 203, 138, 137, 204, 138, 137, 205, 
	138, 137, 206, 138, 137, 207, 138, 137, 
	208, 138, 137, 161, 138, 137, 209, 138, 
	137, 210, 138, 137, 211, 138, 137, 212, 
	138, 137, 213, 138, 137, 214, 138, 137, 
	215, 138, 137, 216, 138, 137, 217, 138, 
	137, 218, 138, 137, 219, 138, 137, 220, 
	138, 137, 221, 138, 137, 222, 138, 137, 
	138, 223, 137, 224, 138, 137, 225, 138, 
	137, 226, 138, 137, 227, 138, 137, 228, 
	138, 137, 229, 138, 137, 230, 138, 137, 
	231, 138, 137, 232, 138, 137, 233, 138, 
	137, 234, 138, 137, 235, 138, 137, 236, 
	138, 137, 237, 138, 137, 238, 138, 137, 
	165, 138, 137, 239, 138, 137, 240, 138, 
	137, 241, 138, 137, 242, 138, 137, 243, 
	138, 137, 244, 138, 137, 245, 138, 137, 
	246, 138, 137, 247, 138, 137, 248, 138, 
	137, 249, 138, 137, 165, 165, 138, 137, 
	250, 138, 137, 251, 138, 137, 252, 138, 
	137, 253, 138, 137, 254, 138, 137, 255, 
	138, 137, 256, 138, 137, 257, 138, 137, 
	258, 138, 137, 259, 138, 137, 260, 138, 
	137, 261, 138, 137, 262, 138, 137, 165, 
	138, 137, 138, 263, 137, 138, 264, 137, 
	138, 265, 137, 138, 266, 137, 138, 267, 
	137, 138, 268, 137, 138, 269, 137, 138, 
	270, 137, 138, 271, 137, 138, 272, 137, 
	138, 273, 137, 138, 274, 137, 138, 275, 
	137, 138, 276, 137, 277, 0, 278, 0, 
	279, 0, 25, 0, 280, 0, 281, 0, 
	282, 0, 283, 0, 284, 0, 285, 0, 
	286, 0, 287, 0, 288, 0, 289, 0, 
	290, 0, 291, 0, 292, 0, 293, 0, 
	294, 0, 131, 0, 295, 0, 296, 297, 
	0, 298, 0, 299, 0, 300, 0, 301, 
	0, 302, 0, 303, 0, 304, 0, 305, 
	0, 306, 0, 307, 0, 308, 0, 309, 
	0, 310, 0, 311, 0, 312, 0, 313, 
	0, 314, 0, 315, 0, 316, 0, 317, 
	0, 318, 0, 320, 319, 322, 321, 323, 
	322, 324, 325, 325, 324, 321, 326, 327, 
	322, 321, 328, 322, 321, 329, 322, 321, 
	330, 322, 321, 331, 322, 321, 332, 322, 
	321, 333, 322, 321, 334, 322, 321, 335, 
	322, 321, 336, 322, 321, 337, 322, 321, 
	338, 322, 321, 339, 322, 321, 340, 322, 
	321, 341, 322, 321, 342, 322, 321, 343, 
	322, 321, 344, 322, 321, 345, 322, 321, 
	322, 346, 321, 347, 322, 321, 348, 322, 
	321, 349, 322, 321, 350, 322, 321, 351, 
	322, 321, 352, 322, 321, 353, 322, 321, 
	354, 322, 321, 355, 322, 321, 356, 322, 
	321, 357, 322, 321, 358, 322, 321, 359, 
	322, 321, 360, 322, 321, 361, 322, 321, 
	343, 322, 321, 362, 0, 363, 0, 364, 
	0, 365, 0, 366, 0, 367, 0, 368, 
	0, 369, 0, 370, 0, 371, 0, 372, 
	0, 373, 0, 374, 0, 375, 0, 376, 
	0, 377, 0, 378, 0, 379, 0, 380, 
	0, 381, 0, 382, 0, 383, 0, 384, 
	0, 385, 0, 386, 0, 387, 0, 388, 
	0, 389, 0, 390, 0, 391, 0, 392, 
	0, 393, 0, 395, 394, 397, 396, 398, 
	397, 399, 400, 401, 402, 400, 399, 396, 
	403, 404, 405, 406, 407, 408, 409, 397, 
	396, 410, 397, 396, 411, 397, 396, 412, 
	397, 396, 413, 397, 396, 414, 397, 396, 
	415, 397, 396, 397, 416, 396, 417, 397, 
	396, 418, 397, 396, 419, 397, 396, 420, 
	397, 396, 421, 397, 396, 415, 397, 396, 
	422, 423, 397, 396, 424, 397, 396, 425, 
	397, 396, 426, 397, 396, 427, 397, 396, 
	428, 397, 396, 429, 397, 396, 430, 397, 
	396, 431, 397, 396, 432, 397, 396, 433, 
	397, 396, 434, 397, 396, 435, 397, 396, 
	436, 397, 396, 437, 397, 396, 415, 397, 
	396, 438, 397, 396, 439, 397, 396, 440, 
	397, 396, 441, 397, 396, 442, 397, 396, 
	443, 397, 396, 444, 397, 396, 445, 397, 
	396, 446, 397, 396, 447, 397, 396, 448, 
	397, 396, 449, 397, 396, 450, 397, 396, 
	451, 397, 396, 452, 397, 396, 453, 397, 
	396, 454, 397, 396, 397, 416, 396, 455, 
	397, 396, 456, 397, 396, 457, 397, 396, 
	415, 397, 396, 458, 397, 396, 459, 397, 
	396, 460, 397, 396, 461, 397, 396, 462, 
	397, 396, 463, 397, 396, 464, 397, 396, 
	465, 397, 396, 466, 397, 396, 467, 397, 
	396, 468, 397, 396, 469, 397, 396, 470, 
	397, 396, 471, 397, 396, 472, 397, 396, 
	452, 397, 396, 473, 397, 396, 474, 397, 
	396, 475, 397, 396, 476, 397, 396, 477, 
	397, 396, 478, 397, 396, 479, 397, 396, 
	480, 397, 396, 481, 397, 396, 482, 397, 
	396, 483, 397, 396, 454, 397, 396, 484, 
	397, 396, 485, 397, 396, 486, 397, 396, 
	487, 397, 396, 488, 397, 396, 415, 397, 
	396, 397, 489, 396, 397, 490, 396, 397, 
	491, 396, 397, 492, 396, 397, 493, 396, 
	397, 494, 396, 397, 495, 396, 397, 496, 
	396, 397, 497, 396, 397, 498, 396, 397, 
	499, 396, 397, 500, 396, 397, 501, 396, 
	397, 502, 396, 503, 0, 504, 0, 505, 
	0, 506, 0, 507, 0, 508, 0, 509, 
	0, 510, 0, 511, 0, 512, 0, 513, 
	0, 317, 514, 0, 515, 0, 517, 516, 
	519, 518, 520, 519, 521, 522, 523, 524, 
	522, 521, 518, 525, 526, 527, 528, 529, 
	530, 531, 532, 533, 519, 518, 534, 519, 
	518, 535, 519, 518, 536, 519, 518, 537, 
	519, 518, 538, 519, 518, 539, 519, 518, 
	519, 540, 518, 541, 519, 518, 542, 519, 
	518, 543, 519, 518, 544, 519, 518, 545, 
	519, 518, 539, 519, 518, 546, 547, 519, 
	518, 548, 519, 518, 549, 519, 518, 550, 
	519, 518, 551, 519, 518, 552, 519, 518, 
	553, 519, 518, 554, 519, 518, 555, 519, 
	518, 556, 519, 518, 557, 519, 518, 558, 
	519, 518, 559, 519, 518, 560, 519, 518, 
	561, 519, 518, 539, 519, 518, 562, 519, 
	518, 563, 519, 518, 564, 519, 518, 565, 
	519, 518, 566, 519, 518, 567, 519, 518, 
	568, 519, 518, 569, 519, 518, 570, 519, 
	518, 571, 519, 518, 572, 519, 518, 573, 
	519, 518, 574, 519, 518, 575, 519, 518, 
	576, 519, 518, 577, 519, 518, 578, 519, 
	518, 519, 540, 518, 579, 519, 518, 580, 
	519, 518, 581, 519, 518, 539, 519, 518, 
	582, 519, 518, 583, 519, 518, 584, 519, 
	518, 585, 519, 518, 586, 519, 518, 587, 
	519, 518, 588, 519, 518, 589, 519, 518, 
	590, 519, 518, 591, 519, 518, 592, 519, 
	518, 593, 519, 518, 594, 519, 518, 595, 
	519, 518, 596, 519, 518, 576, 519, 518, 
	597, 519, 518, 598, 519, 518, 599, 519, 
	518, 600, 519, 518, 601, 519, 518, 602, 
	519, 518, 603, 519, 518, 604, 519, 518, 
	605, 519, 518, 606, 519, 518, 607, 519, 
	518, 608, 519, 518, 609, 519, 518, 610, 
	519, 518, 611, 519, 518, 612, 519, 518, 
	519, 613, 518, 614, 519, 518, 615, 519, 
	518, 616, 519, 518, 617, 519, 518, 618, 
	519, 518, 619, 519, 518, 620, 519, 518, 
	621, 519, 518, 622, 519, 518, 623, 519, 
	518, 624, 519, 518, 625, 519, 518, 626, 
	519, 518, 627, 519, 518, 628, 519, 518, 
	578, 519, 518, 629, 519, 518, 630, 519, 
	518, 631, 519, 518, 632, 519, 518, 633, 
	519, 518, 634, 519, 518, 635, 519, 518, 
	636, 519, 518, 637, 519, 518, 638, 519, 
	518, 639, 519, 518, 578, 519, 518, 640, 
	519, 518, 641, 519, 518, 642, 519, 518, 
	643, 519, 518, 644, 519, 518, 539, 519, 
	518, 645, 519, 518, 646, 519, 518, 647, 
	519, 518, 648, 519, 518, 649, 519, 518, 
	650, 519, 518, 651, 519, 518, 652, 519, 
	518, 653, 519, 518, 654, 519, 518, 655, 
	519, 518, 638, 519, 518, 519, 656, 518, 
	519, 657, 518, 519, 658, 518, 519, 659, 
	518, 519, 660, 518, 519, 661, 518, 519, 
	662, 518, 519, 663, 518, 519, 664, 518, 
	519, 665, 518, 519, 666, 518, 519, 667, 
	518, 519, 668, 518, 519, 669, 518, 670, 
	0, 671, 0, 672, 0, 673, 0, 674, 
	0, 25, 0, 675, 0, 676, 0, 677, 
	0, 678, 0, 679, 0, 680, 0, 681, 
	0, 682, 0, 683, 0, 684, 0, 685, 
	0, 686, 0, 687, 0, 688, 0, 689, 
	0, 691, 690, 693, 692, 694, 693, 695, 
	696, 697, 698, 696, 695, 692, 699, 700, 
	701, 702, 703, 704, 705, 706, 693, 692, 
	707, 693, 692, 708, 693, 692, 709, 693, 
	692, 710, 693, 692, 711, 693, 692, 712, 
	693, 692, 693, 713, 692, 714, 693, 692, 
	715, 693, 692, 716, 693, 692, 717, 693, 
	692, 718, 693, 692, 712, 693, 692, 719, 
	720, 693, 692, 721, 693, 692, 722, 693, 
	692, 723, 693, 692, 724, 693, 692, 725, 
	693, 692, 726, 693, 692, 727, 693, 692, 
	728, 693, 692, 729, 693, 692, 730, 693, 
	692, 731, 693, 692, 732, 693, 692, 733, 
	693, 692, 734, 693, 692, 712, 693, 692, 
	735, 693, 692, 736, 693, 692, 737, 693, 
	692, 738, 693, 692, 739, 693, 692, 740, 
	693, 692, 741, 693, 692, 742, 693, 692, 
	743, 693, 692, 744, 693, 692, 745, 693, 
	692, 746, 693, 692, 747, 693, 692, 748, 
	693, 692, 749, 693, 692, 750, 693, 692, 
	751, 693, 692, 693, 713, 692, 752, 693, 
	692, 753, 693, 692, 754, 693, 692, 712, 
	693, 692, 755, 693, 692, 756, 693, 692, 
	757, 693, 692, 758, 693, 692, 759, 693, 
	692, 760, 693, 692, 761, 693, 692, 762, 
	693, 692, 763, 693, 692, 764, 693, 692, 
	765, 693, 692, 766, 693, 692, 767, 693, 
	692, 768, 693, 692, 769, 693, 692, 749, 
	693, 692, 770, 693, 692, 771, 693, 692, 
	772, 693, 692, 773, 693, 692, 774, 693, 
	692, 775, 693, 692, 776, 693, 692, 777, 
	693, 692, 778, 693, 692, 779, 693, 692, 
	780, 693, 692, 781, 693, 692, 782, 693, 
	692, 783, 693, 692, 784, 693, 692, 785, 
	693, 692, 693, 786, 692, 787, 693, 692, 
	788, 693, 692, 789, 693, 692, 790, 693, 
	692, 791, 693, 692, 792, 693, 692, 793, 
	693, 692, 794, 693, 692, 795, 693, 692, 
	796, 693, 692, 797, 693, 692, 798, 693, 
	692, 799, 693, 692, 800, 693, 692, 801, 
	693, 692, 751, 693, 692, 802, 693, 692, 
	803, 693, 692, 804, 693, 692, 805, 693, 
	692, 806, 693, 692, 807, 693, 692, 808, 
	693, 692, 809, 693, 692, 810, 693, 692, 
	811, 693, 692, 812, 693, 692, 751, 693, 
	692, 813, 693, 692, 814, 693, 692, 815, 
	693, 692, 816, 693, 692, 817, 693, 692, 
	712, 693, 692, 693, 818, 692, 693, 819, 
	692, 693, 820, 692, 693, 821, 692, 693, 
	822, 692, 693, 823, 692, 693, 824, 692, 
	693, 825, 692, 693, 826, 692, 693, 827, 
	692, 693, 828, 692, 693, 829, 692, 693, 
	830, 692, 693, 831, 692, 832, 0, 2, 
	0, 833, 0
];

var _lexer_trans_targs = [
	0, 2, 12, 12, 13, 23, 25, 9, 
	39, 42, 752, 3, 48, 54, 217, 221, 
	237, 434, 595, 601, 4, 5, 6, 7, 
	8, 9, 10, 11, 12, 24, 11, 12, 
	24, 14, 15, 16, 17, 16, 16, 17, 
	16, 18, 18, 18, 19, 18, 18, 18, 
	19, 20, 21, 22, 12, 22, 23, 12, 
	24, 26, 27, 28, 29, 30, 31, 32, 
	33, 34, 35, 36, 37, 38, 754, 40, 
	41, 12, 40, 39, 41, 42, 43, 44, 
	46, 47, 45, 43, 44, 45, 43, 46, 
	2, 47, 13, 23, 25, 9, 39, 42, 
	49, 50, 51, 52, 53, 55, 70, 56, 
	57, 58, 59, 60, 61, 62, 63, 64, 
	65, 66, 67, 68, 69, 71, 72, 73, 
	74, 75, 76, 77, 78, 79, 80, 81, 
	82, 83, 84, 85, 86, 87, 88, 89, 
	90, 89, 90, 91, 90, 12, 203, 92, 
	112, 128, 177, 189, 93, 94, 95, 96, 
	97, 98, 99, 100, 101, 102, 103, 104, 
	105, 106, 107, 108, 109, 110, 111, 2, 
	12, 12, 13, 23, 25, 9, 39, 42, 
	113, 114, 115, 116, 117, 118, 119, 120, 
	121, 122, 123, 124, 125, 126, 127, 129, 
	130, 146, 131, 132, 133, 134, 135, 136, 
	137, 138, 139, 140, 141, 142, 143, 144, 
	145, 147, 148, 149, 150, 151, 152, 153, 
	154, 155, 156, 157, 158, 159, 160, 161, 
	162, 163, 164, 165, 166, 167, 168, 169, 
	170, 171, 172, 173, 174, 175, 176, 178, 
	179, 180, 181, 182, 183, 184, 185, 186, 
	187, 188, 190, 191, 192, 193, 194, 195, 
	196, 197, 198, 199, 200, 201, 202, 204, 
	205, 206, 207, 208, 209, 210, 211, 212, 
	213, 214, 215, 216, 12, 218, 219, 220, 
	222, 223, 224, 225, 226, 227, 228, 229, 
	230, 231, 232, 233, 234, 235, 236, 238, 
	239, 299, 240, 241, 242, 243, 244, 245, 
	246, 247, 248, 249, 250, 251, 252, 253, 
	254, 255, 256, 257, 258, 259, 260, 261, 
	262, 261, 262, 263, 262, 12, 264, 283, 
	265, 266, 267, 268, 269, 270, 271, 272, 
	273, 274, 275, 276, 277, 278, 279, 280, 
	281, 282, 111, 284, 285, 286, 287, 288, 
	289, 290, 291, 292, 293, 294, 295, 296, 
	297, 298, 300, 301, 302, 303, 304, 305, 
	306, 307, 308, 309, 310, 311, 312, 313, 
	314, 315, 316, 317, 318, 319, 320, 321, 
	322, 323, 324, 325, 326, 327, 328, 329, 
	330, 331, 332, 333, 332, 333, 334, 333, 
	12, 420, 341, 335, 342, 348, 382, 386, 
	402, 414, 336, 337, 338, 339, 340, 341, 
	111, 343, 344, 345, 346, 347, 349, 364, 
	350, 351, 352, 353, 354, 355, 356, 357, 
	358, 359, 360, 361, 362, 363, 365, 366, 
	367, 368, 369, 370, 371, 372, 373, 374, 
	375, 376, 377, 378, 379, 380, 381, 383, 
	384, 385, 387, 388, 389, 390, 391, 392, 
	393, 394, 395, 396, 397, 398, 399, 400, 
	401, 403, 404, 405, 406, 407, 408, 409, 
	410, 411, 412, 413, 415, 416, 417, 418, 
	419, 421, 422, 423, 424, 425, 426, 427, 
	428, 429, 430, 431, 432, 433, 12, 435, 
	436, 437, 438, 439, 440, 441, 442, 443, 
	444, 445, 446, 447, 448, 449, 448, 449, 
	450, 449, 12, 581, 457, 451, 458, 464, 
	498, 502, 518, 551, 563, 569, 452, 453, 
	454, 455, 456, 457, 111, 459, 460, 461, 
	462, 463, 465, 480, 466, 467, 468, 469, 
	470, 471, 472, 473, 474, 475, 476, 477, 
	478, 479, 481, 482, 483, 484, 485, 486, 
	487, 488, 489, 490, 491, 492, 493, 494, 
	495, 496, 497, 499, 500, 501, 503, 504, 
	505, 506, 507, 508, 509, 510, 511, 512, 
	513, 514, 515, 516, 517, 519, 520, 521, 
	522, 523, 524, 525, 526, 527, 528, 529, 
	530, 531, 532, 533, 534, 535, 536, 537, 
	538, 539, 540, 541, 542, 543, 544, 545, 
	546, 547, 548, 549, 550, 552, 553, 554, 
	555, 556, 557, 558, 559, 560, 561, 562, 
	564, 565, 566, 567, 568, 570, 571, 572, 
	573, 574, 575, 576, 577, 578, 579, 580, 
	582, 583, 584, 585, 586, 587, 588, 589, 
	590, 591, 592, 593, 594, 12, 596, 597, 
	598, 599, 600, 602, 603, 604, 605, 606, 
	607, 608, 609, 610, 611, 612, 613, 614, 
	615, 616, 617, 618, 617, 618, 619, 618, 
	12, 738, 626, 620, 627, 633, 667, 671, 
	687, 720, 732, 621, 622, 623, 624, 625, 
	626, 111, 628, 629, 630, 631, 632, 634, 
	649, 635, 636, 637, 638, 639, 640, 641, 
	642, 643, 644, 645, 646, 647, 648, 650, 
	651, 652, 653, 654, 655, 656, 657, 658, 
	659, 660, 661, 662, 663, 664, 665, 666, 
	668, 669, 670, 672, 673, 674, 675, 676, 
	677, 678, 679, 680, 681, 682, 683, 684, 
	685, 686, 688, 689, 690, 691, 692, 693, 
	694, 695, 696, 697, 698, 699, 700, 701, 
	702, 703, 704, 705, 706, 707, 708, 709, 
	710, 711, 712, 713, 714, 715, 716, 717, 
	718, 719, 721, 722, 723, 724, 725, 726, 
	727, 728, 729, 730, 731, 733, 734, 735, 
	736, 737, 739, 740, 741, 742, 743, 744, 
	745, 746, 747, 748, 749, 750, 751, 12, 
	753, 0
];

var _lexer_trans_actions = [
	43, 29, 0, 54, 3, 1, 0, 29, 
	1, 35, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 57, 149, 126, 0, 110, 
	23, 0, 0, 7, 139, 48, 0, 102, 
	9, 5, 45, 134, 45, 0, 33, 122, 
	33, 33, 0, 11, 106, 0, 0, 114, 
	25, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	27, 118, 27, 51, 0, 0, 0, 37, 
	37, 54, 37, 87, 0, 0, 39, 0, 
	96, 0, 93, 90, 41, 96, 90, 99, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 57, 
	144, 0, 54, 84, 0, 69, 33, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 13, 63, 
	31, 130, 60, 57, 31, 63, 57, 66, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 13, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 57, 
	144, 0, 54, 84, 0, 81, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 21, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 57, 144, 0, 54, 84, 0, 
	78, 33, 84, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	19, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 19, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 57, 144, 0, 54, 
	84, 0, 75, 33, 84, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 17, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 17, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 57, 144, 0, 54, 84, 0, 
	72, 33, 84, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 15, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 15, 
	0, 0
];

var _lexer_eof_actions = [
	0, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43
];

var lexer_start = 1;
var lexer_first_final = 754;
var lexer_error = 0;

var lexer_en_main = 1;


/* line 129 "ragel/i18n/el.js.rl" */

/* line 130 "ragel/i18n/el.js.rl" */

/* line 131 "ragel/i18n/el.js.rl" */

/* line 132 "ragel/i18n/el.js.rl" */

var Lexer = function(listener) {
  // Check that listener has the required functions
  var events = ['comment', 'tag', 'feature', 'background', 'scenario', 'scenario_outline', 'examples', 'step', 'doc_string', 'row', 'eof'];
  for(var i=0, len=events.length; i<len; i++) {
    var event = events[i];
    if(typeof listener[event] != 'function') {
      throw new Error("Error. No " + event + " function exists on " + JSON.stringify(listener));
    }
  }
  this.listener = listener;
};

Lexer.prototype.scan = function(data) {
  var ending = "\n%_FEATURE_END_%";
  if(typeof data == 'string') {
    data = this.stringToBytes(data + ending);
  } else if(typeof Buffer != 'undefined' && Buffer.isBuffer(data)) {
    // Node.js
    var buf = new Buffer(data.length + ending.length);
    data.copy(buf, 0, 0);
    new Buffer(ending).copy(buf, data.length, 0);
    data = buf;
  }
  var eof = pe = data.length;
  var p = 0;

  this.line_number = 1;
  this.last_newline = 0;
  var signedCharValue=function(v){return v > 127 ? v-256 : v; };

  
/* line 1253 "js/lib/gherkin/lexer/el.js" */
{
	  this.cs = lexer_start;
} /* JSCodeGen::writeInit */

/* line 164 "ragel/i18n/el.js.rl" */
  
/* line 1260 "js/lib/gherkin/lexer/el.js" */
{
	var _klen, _trans, _keys, _ps, _widec, _acts, _nacts;
	var _goto_level, _resume, _eof_trans, _again, _test_eof;
	var _out;
	_klen = _trans = _keys = _acts = _nacts = null;
	_goto_level = 0;
	_resume = 10;
	_eof_trans = 15;
	_again = 20;
	_test_eof = 30;
	_out = 40;
	while (true) {
	_trigger_goto = false;
	if (_goto_level <= 0) {
	if (p == pe) {
		_goto_level = _test_eof;
		continue;
	}
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	}
	if (_goto_level <= _resume) {
	_keys = _lexer_key_offsets[ this.cs];
	_trans = _lexer_index_offsets[ this.cs];
	_klen = _lexer_single_lengths[ this.cs];
	_break_match = false;
	
	do {
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + _klen - 1;

	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + ( (_upper - _lower) >> 1 );

	        if (( signedCharValue(data[p])) < _lexer_trans_keys[_mid]) {
	           _upper = _mid - 1;
	        } else if (( signedCharValue(data[p])) > _lexer_trans_keys[_mid]) {
	           _lower = _mid + 1;
	        } else {
	           _trans += (_mid - _keys);
	           _break_match = true;
	           break;
	        };
	     } /* while */
	     if (_break_match) { break; }
	     _keys += _klen;
	     _trans += _klen;
	  }
	  _klen = _lexer_range_lengths[ this.cs];
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + (_klen << 1) - 2;
	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + (((_upper-_lower) >> 1) & ~1);
	        if (( signedCharValue(data[p])) < _lexer_trans_keys[_mid]) {
	          _upper = _mid - 2;
	         } else if (( signedCharValue(data[p])) > _lexer_trans_keys[_mid+1]) {
	          _lower = _mid + 2;
	        } else {
	          _trans += ((_mid - _keys) >> 1);
	          _break_match = true;
	          break;
	        }
	     } /* while */
	     if (_break_match) { break; }
	     _trans += _klen
	  }
	} while (false);
	_trans = _lexer_indicies[_trans];
	 this.cs = _lexer_trans_targs[_trans];
	if (_lexer_trans_actions[_trans] != 0) {
		_acts = _lexer_trans_actions[_trans];
		_nacts = _lexer_actions[_acts];
		_acts += 1;
		while (_nacts > 0) {
			_nacts -= 1;
			_acts += 1;
			switch (_lexer_actions[_acts - 1]) {
case 0:
/* line 6 "ragel/i18n/el.js.rl" */

    this.content_start = p;
    this.current_line = this.line_number;
    this.start_col = p - this.last_newline - (this.keyword+':').length;
  		break;
case 1:
/* line 12 "ragel/i18n/el.js.rl" */

    this.current_line = this.line_number;
    this.start_col = p - this.last_newline;
  		break;
case 2:
/* line 17 "ragel/i18n/el.js.rl" */

    this.content_start = p;
  		break;
case 3:
/* line 21 "ragel/i18n/el.js.rl" */

    this.docstring_content_type_start = p;
  		break;
case 4:
/* line 25 "ragel/i18n/el.js.rl" */

    this.docstring_content_type_end = p;
  		break;
case 5:
/* line 29 "ragel/i18n/el.js.rl" */

    var con = this.unindent(
      this.start_col, 
      this.bytesToString(data.slice(this.content_start, this.next_keyword_start-1)).replace(/(\r?\n)?([\t ])*$/, '').replace(/\\\"\\\"\\\"/mg, '"""')
    );
    var con_type = this.bytesToString(data.slice(this.docstring_content_type_start, this.docstring_content_type_end)).trim();
    this.listener.doc_string(con_type, con, this.current_line); 
  		break;
case 6:
/* line 38 "ragel/i18n/el.js.rl" */

    p = this.store_keyword_content('feature', data, p, eof);
  		break;
case 7:
/* line 42 "ragel/i18n/el.js.rl" */

    p = this.store_keyword_content('background', data, p, eof);
  		break;
case 8:
/* line 46 "ragel/i18n/el.js.rl" */

    p = this.store_keyword_content('scenario', data, p, eof);
  		break;
case 9:
/* line 50 "ragel/i18n/el.js.rl" */

    p = this.store_keyword_content('scenario_outline', data, p, eof);
  		break;
case 10:
/* line 54 "ragel/i18n/el.js.rl" */

    p = this.store_keyword_content('examples', data, p, eof);
  		break;
case 11:
/* line 58 "ragel/i18n/el.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.step(this.keyword, con, this.current_line);
  		break;
case 12:
/* line 63 "ragel/i18n/el.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.comment(con, this.line_number);
    this.keyword_start = null;
  		break;
case 13:
/* line 69 "ragel/i18n/el.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.tag(con, this.line_number);
    this.keyword_start = null;
  		break;
case 14:
/* line 75 "ragel/i18n/el.js.rl" */

    this.line_number++;
  		break;
case 15:
/* line 79 "ragel/i18n/el.js.rl" */

    this.last_newline = p + 1;
  		break;
case 16:
/* line 83 "ragel/i18n/el.js.rl" */

    this.keyword_start = this.keyword_start || p;
  		break;
case 17:
/* line 87 "ragel/i18n/el.js.rl" */

    this.keyword = this.bytesToString(data.slice(this.keyword_start, p)).replace(/:$/, '');
    this.keyword_start = null;
  		break;
case 18:
/* line 92 "ragel/i18n/el.js.rl" */

    this.next_keyword_start = p;
  		break;
case 19:
/* line 96 "ragel/i18n/el.js.rl" */

    p = p - 1;
    current_row = [];
    this.current_line = this.line_number;
  		break;
case 20:
/* line 102 "ragel/i18n/el.js.rl" */

    this.content_start = p;
  		break;
case 21:
/* line 106 "ragel/i18n/el.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    current_row.push(con.replace(/\\\|/, "|").replace(/\\n/, "\n").replace(/\\\\/, "\\"));
  		break;
case 22:
/* line 111 "ragel/i18n/el.js.rl" */

    this.listener.row(current_row, this.current_line);
  		break;
case 23:
/* line 115 "ragel/i18n/el.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw new Error("Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.");
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 1487 "js/lib/gherkin/lexer/el.js" */
			} /* action switch */
		}
	}
	if (_trigger_goto) {
		continue;
	}
	}
	if (_goto_level <= _again) {
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	p += 1;
	if (p != pe) {
		_goto_level = _resume;
		continue;
	}
	}
	if (_goto_level <= _test_eof) {
	if (p == eof) {
	__acts = _lexer_eof_actions[ this.cs];
	__nacts =  _lexer_actions[__acts];
	__acts += 1;
	while (__nacts > 0) {
		__nacts -= 1;
		__acts += 1;
		switch (_lexer_actions[__acts - 1]) {
case 23:
/* line 115 "ragel/i18n/el.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw new Error("Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.");
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 1526 "js/lib/gherkin/lexer/el.js" */
		} /* eof action switch */
	}
	if (_trigger_goto) {
		continue;
	}
}
	}
	if (_goto_level <= _out) {
		break;
	}
	}
	}

/* line 165 "ragel/i18n/el.js.rl" */
};


/*
 * Decode utf-8 byte sequence to string.
 */
var decodeUtf8 = function(bytes) {
  var result = "";
  var i = 0;
  var wc;
  var c;

  while (i < bytes.length) {
    /* parse as UTF-8 lead byte */
    wc = bytes[i++];
    if (wc < 0x80) {
      count = 0;
    } else if (wc < 0xC2 || wc >= 0xF8) {
      throw new Error("input is not a valid UTF-8 lead octet");
    } else if (wc < 0xE0) {
      count = 1;
      wc = (wc & 0x1F) << 6;
    } else if (wc < 0xF0) {
      count = 2;
      wc = (wc & 0x0F) << 12;
    } else /* wc < 0xF8 */ {
      count = 3;
      wc = (wc & 0x07) << 18;
    }

    /* parse trail bytes, if any */
    while (count) {
      if (!(i < bytes.length)) {
        throw new Error("short read");
      }
      if ((c = bytes[i++] ^ 0x80) > 0x3F) {
        throw new Error("input is not a valid UTF-8 trail octet");
      }
      wc |= c << (6 * --count);
      if (wc < (1 << (5 * count + 6))) {
        throw new Error("invalid non-minimal encoded input");
      }
    }

    /* handle conversion to UTF-16 if needed */
    if (wc > 0xFFFF) {
      wc -= 0x10000;
      result += String.fromCharCode(0xD800 + (wc >> 10));
      wc = 0xDC00 + (wc & 0x3FF);
    }
    result += String.fromCharCode(wc);
  }

  return result;
};

/*
 * Encode string to an array of bytes using utf8 encoding.
 *
 * Javascript internally stores character data as utf16 (like java).
 * String.charCodeAt() does *not* produce unicode points, but simply
 * reflects this internal representation. Thus, it is necessary
 * to first decode the utf-16 representation before encoding to
 * utf-8.
 */
var encodeUtf8 = function(string) {
  var bytes = [];
  var i = 0;
  var j = 0;
  var wc;

  while (i < string.length) {
    wc = string.charCodeAt(i++);
    if (wc >= 0xD800 && wc <= 0xDBFF && i < string.length && string.charCodeAt(i) >= 0xDC00 && string.charCodeAt(i) <= 0xDFFF) {
      /* decode UTF-16 */
      wc = 0x10000 + ((wc & 0x3FF) << 10) + (string.charCodeAt(i++) & 0x3FF);
    }

    /* emit lead byte */
    if (wc < 0x80) {
      bytes[j++] = wc;
      count = 0;
    } else if (wc < 0x800) {
      bytes[j++] = 0xC0 | (wc >> 6);
      count = 1;
    } else if (wc < 0x10000) {
      bytes[j++] = 0xE0 | (wc >> 12);
      count = 2;
    } else {
      /* SMP: 21-bit Unicode */
      bytes[j++] = 0xF0 | (wc >> 18);
      count = 3;
    }

    /* emit trail bytes, if any */
    while (count) {
      bytes[j++] = 0x80 | ((wc >> (6 * --count)) & 0x3F);
    }
  }

  return bytes;

};

Lexer.prototype.bytesToString = function(bytes) {
  if(typeof bytes.write == 'function') {
    // Node.js
    return bytes.toString('utf-8');
  }
  return decodeUtf8(bytes);
};

Lexer.prototype.stringToBytes = function(string) {
  return encodeUtf8(string);
};

Lexer.prototype.unindent = function(startcol, text) {
  startcol = startcol || 0;
  return text.replace(new RegExp('^[\t ]{0,' + startcol + '}', 'gm'), ''); 
};

Lexer.prototype.store_keyword_content = function(event, data, p, eof) {
  var end_point = (!this.next_keyword_start || (p == eof)) ? p : this.next_keyword_start;
  var content = this.unindent(this.start_col + 2, this.bytesToString(data.slice(this.content_start, end_point))).replace(/\s+$/,"");
  var content_lines = content.split("\n")
  var name = content_lines.shift() || "";
  name = name.trim();
  var description = content_lines.join("\n");
  this.listener[event](this.keyword, name, description, this.current_line);
  var nks = this.next_keyword_start;
  this.next_keyword_start = null;
  return nks ? nks - 1 : p;
};

Lexer.prototype.current_line_content = function(data, p) {
  var rest = Array.prototype.slice.call(data,this.last_newline, -1);
  var end = rest.indexOf(10) || -1;
  return this.bytesToString(rest.slice(0, end)).trim();
};

// Node.js export
if(typeof module !== 'undefined') {
  module.exports = Lexer;
}
// Require.js export
if (typeof define !== 'undefined') {
  if(define.amd) {
    define('gherkin/lexer/el', [], function() {
      return Lexer;
    });
  } else {
    define('gherkin/lexer/el', function(require, exports, module) {
      exports.Lexer = Lexer;
    });
  }
}

})();

}).call(this,require("buffer").Buffer)

},{"buffer":69}],194:[function(require,module,exports){
(function (Buffer){

/* line 1 "ragel/i18n/en.js.rl" */
;(function() {


/* line 126 "ragel/i18n/en.js.rl" */



/* line 11 "js/lib/gherkin/lexer/en.js" */
var _lexer_actions = [
	0, 1, 0, 1, 1, 1, 2, 1, 
	3, 1, 4, 1, 5, 1, 6, 1, 
	7, 1, 8, 1, 9, 1, 10, 1, 
	11, 1, 12, 1, 13, 1, 16, 1, 
	17, 1, 18, 1, 19, 1, 20, 1, 
	21, 1, 22, 1, 23, 2, 2, 18, 
	2, 3, 4, 2, 13, 0, 2, 14, 
	15, 2, 17, 0, 2, 17, 1, 2, 
	17, 16, 2, 17, 19, 2, 18, 6, 
	2, 18, 7, 2, 18, 8, 2, 18, 
	9, 2, 18, 10, 2, 18, 16, 2, 
	20, 21, 2, 22, 0, 2, 22, 1, 
	2, 22, 16, 2, 22, 19, 3, 4, 
	14, 15, 3, 5, 14, 15, 3, 11, 
	14, 15, 3, 12, 14, 15, 3, 13, 
	14, 15, 3, 14, 15, 18, 3, 17, 
	0, 11, 3, 17, 14, 15, 4, 2, 
	14, 15, 18, 4, 3, 4, 14, 15, 
	4, 17, 0, 14, 15, 5, 17, 0, 
	11, 14, 15
];

var _lexer_key_offsets = [
	0, 0, 19, 37, 38, 39, 41, 43, 
	48, 53, 58, 63, 67, 71, 73, 74, 
	75, 76, 77, 78, 79, 80, 81, 82, 
	83, 84, 85, 86, 87, 88, 89, 91, 
	93, 98, 105, 110, 112, 113, 114, 115, 
	116, 117, 118, 119, 120, 132, 134, 136, 
	138, 140, 142, 144, 146, 148, 150, 152, 
	154, 156, 158, 160, 162, 164, 166, 168, 
	170, 172, 174, 192, 194, 195, 196, 197, 
	198, 199, 200, 201, 202, 203, 204, 205, 
	220, 222, 224, 226, 228, 230, 232, 234, 
	236, 238, 240, 242, 244, 246, 248, 250, 
	253, 255, 257, 259, 261, 263, 265, 267, 
	269, 272, 274, 276, 278, 280, 282, 284, 
	286, 288, 290, 292, 294, 296, 298, 300, 
	302, 304, 306, 308, 310, 312, 314, 316, 
	318, 320, 322, 324, 326, 329, 332, 334, 
	336, 338, 340, 342, 344, 346, 348, 350, 
	352, 354, 356, 358, 359, 360, 361, 362, 
	363, 364, 365, 366, 367, 368, 369, 370, 
	371, 372, 373, 374, 375, 376, 377, 378, 
	387, 389, 391, 393, 395, 397, 399, 401, 
	403, 405, 407, 409, 411, 413, 415, 417, 
	419, 421, 423, 425, 427, 429, 431, 433, 
	435, 437, 438, 439, 440, 441, 442, 443, 
	444, 445, 446, 447, 448, 449, 450, 451, 
	452, 453, 454, 457, 459, 460, 461, 462, 
	463, 464, 465, 466, 467, 468, 483, 485, 
	487, 489, 491, 493, 495, 497, 499, 501, 
	503, 505, 507, 509, 511, 513, 516, 518, 
	520, 522, 524, 526, 528, 530, 532, 535, 
	537, 539, 541, 543, 545, 547, 549, 551, 
	553, 555, 557, 559, 561, 563, 565, 567, 
	569, 571, 573, 575, 577, 579, 581, 583, 
	585, 587, 589, 591, 592, 593, 594, 595, 
	596, 597, 598, 599, 614, 616, 618, 620, 
	622, 624, 626, 628, 630, 632, 634, 636, 
	638, 640, 642, 644, 647, 649, 651, 653, 
	655, 657, 659, 661, 664, 666, 668, 670, 
	672, 674, 676, 678, 680, 683, 685, 687, 
	689, 691, 693, 695, 697, 699, 701, 703, 
	705, 707, 709, 711, 713, 715, 717, 719, 
	721, 723, 725, 727, 729, 731, 733, 735, 
	738, 741, 743, 745, 747, 749, 751, 753, 
	755, 757, 759, 761, 763, 765, 766, 770, 
	776, 779, 781, 787, 805, 808, 810, 812, 
	814, 816, 818, 820, 822, 824, 826, 828, 
	830, 832, 834, 836, 838, 840, 842, 844, 
	846, 848, 850, 852, 854, 856, 858, 860, 
	862, 864, 866, 868, 870, 872, 874, 876, 
	878, 880, 882, 884, 888, 891, 893, 895, 
	897, 899, 901, 903, 905, 907, 909, 911, 
	913, 914, 915, 916
];

var _lexer_trans_keys = [
	10, 32, 34, 35, 37, 42, 64, 65, 
	66, 69, 70, 71, 83, 84, 87, 124, 
	239, 9, 13, 10, 32, 34, 35, 37, 
	42, 64, 65, 66, 69, 70, 71, 83, 
	84, 87, 124, 9, 13, 34, 34, 10, 
	13, 10, 13, 10, 32, 34, 9, 13, 
	10, 32, 34, 9, 13, 10, 32, 34, 
	9, 13, 10, 32, 34, 9, 13, 10, 
	32, 9, 13, 10, 32, 9, 13, 10, 
	13, 10, 95, 70, 69, 65, 84, 85, 
	82, 69, 95, 69, 78, 68, 95, 37, 
	32, 10, 13, 10, 13, 13, 32, 64, 
	9, 10, 9, 10, 13, 32, 64, 11, 
	12, 10, 32, 64, 9, 13, 98, 110, 
	105, 108, 105, 116, 121, 58, 10, 10, 
	10, 32, 35, 37, 64, 65, 66, 69, 
	70, 83, 9, 13, 10, 95, 10, 70, 
	10, 69, 10, 65, 10, 84, 10, 85, 
	10, 82, 10, 69, 10, 95, 10, 69, 
	10, 78, 10, 68, 10, 95, 10, 37, 
	10, 98, 10, 105, 10, 108, 10, 105, 
	10, 116, 10, 121, 10, 58, 10, 32, 
	34, 35, 37, 42, 64, 65, 66, 69, 
	70, 71, 83, 84, 87, 124, 9, 13, 
	97, 117, 99, 107, 103, 114, 111, 117, 
	110, 100, 58, 10, 10, 10, 32, 35, 
	37, 42, 64, 65, 66, 70, 71, 83, 
	84, 87, 9, 13, 10, 95, 10, 70, 
	10, 69, 10, 65, 10, 84, 10, 85, 
	10, 82, 10, 69, 10, 95, 10, 69, 
	10, 78, 10, 68, 10, 95, 10, 37, 
	10, 32, 10, 98, 110, 10, 105, 10, 
	108, 10, 105, 10, 116, 10, 121, 10, 
	58, 10, 100, 10, 117, 10, 115, 116, 
	10, 105, 10, 110, 10, 101, 10, 115, 
	10, 115, 10, 32, 10, 78, 10, 101, 
	10, 101, 10, 100, 10, 101, 10, 97, 
	10, 116, 10, 117, 10, 114, 10, 101, 
	10, 105, 10, 118, 10, 101, 10, 110, 
	10, 99, 10, 101, 10, 110, 10, 97, 
	10, 114, 10, 105, 10, 111, 10, 32, 
	58, 10, 79, 84, 10, 117, 10, 116, 
	10, 108, 10, 105, 10, 110, 10, 101, 
	10, 109, 10, 112, 10, 108, 10, 97, 
	10, 116, 10, 104, 115, 116, 105, 110, 
	101, 115, 115, 32, 78, 101, 101, 100, 
	120, 97, 109, 112, 108, 101, 115, 58, 
	10, 10, 10, 32, 35, 65, 66, 70, 
	124, 9, 13, 10, 98, 10, 105, 10, 
	108, 10, 105, 10, 116, 10, 121, 10, 
	58, 10, 117, 10, 115, 10, 105, 10, 
	110, 10, 101, 10, 115, 10, 115, 10, 
	32, 10, 78, 10, 101, 10, 101, 10, 
	100, 10, 101, 10, 97, 10, 116, 10, 
	117, 10, 114, 10, 101, 101, 97, 116, 
	117, 114, 101, 105, 118, 101, 110, 99, 
	101, 110, 97, 114, 105, 111, 32, 58, 
	115, 79, 84, 117, 116, 108, 105, 110, 
	101, 58, 10, 10, 10, 32, 35, 37, 
	42, 64, 65, 66, 70, 71, 83, 84, 
	87, 9, 13, 10, 95, 10, 70, 10, 
	69, 10, 65, 10, 84, 10, 85, 10, 
	82, 10, 69, 10, 95, 10, 69, 10, 
	78, 10, 68, 10, 95, 10, 37, 10, 
	32, 10, 98, 110, 10, 105, 10, 108, 
	10, 105, 10, 116, 10, 121, 10, 58, 
	10, 100, 10, 117, 10, 115, 116, 10, 
	105, 10, 110, 10, 101, 10, 115, 10, 
	115, 10, 32, 10, 78, 10, 101, 10, 
	101, 10, 100, 10, 101, 10, 97, 10, 
	116, 10, 117, 10, 114, 10, 101, 10, 
	105, 10, 118, 10, 101, 10, 110, 10, 
	99, 10, 101, 10, 110, 10, 97, 10, 
	114, 10, 105, 10, 111, 10, 104, 101, 
	109, 112, 108, 97, 116, 10, 10, 10, 
	32, 35, 37, 42, 64, 65, 66, 70, 
	71, 83, 84, 87, 9, 13, 10, 95, 
	10, 70, 10, 69, 10, 65, 10, 84, 
	10, 85, 10, 82, 10, 69, 10, 95, 
	10, 69, 10, 78, 10, 68, 10, 95, 
	10, 37, 10, 32, 10, 98, 110, 10, 
	105, 10, 108, 10, 105, 10, 116, 10, 
	121, 10, 58, 10, 100, 10, 97, 117, 
	10, 99, 10, 107, 10, 103, 10, 114, 
	10, 111, 10, 117, 10, 110, 10, 100, 
	10, 115, 116, 10, 105, 10, 110, 10, 
	101, 10, 115, 10, 115, 10, 32, 10, 
	78, 10, 101, 10, 101, 10, 101, 10, 
	97, 10, 116, 10, 117, 10, 114, 10, 
	101, 10, 105, 10, 118, 10, 101, 10, 
	110, 10, 99, 10, 101, 10, 110, 10, 
	97, 10, 114, 10, 105, 10, 111, 10, 
	32, 58, 10, 79, 84, 10, 117, 10, 
	116, 10, 108, 10, 105, 10, 110, 10, 
	101, 10, 109, 10, 112, 10, 108, 10, 
	97, 10, 116, 10, 104, 104, 32, 124, 
	9, 13, 10, 32, 92, 124, 9, 13, 
	10, 92, 124, 10, 92, 10, 32, 92, 
	124, 9, 13, 10, 32, 34, 35, 37, 
	42, 64, 65, 66, 69, 70, 71, 83, 
	84, 87, 124, 9, 13, 10, 97, 117, 
	10, 99, 10, 107, 10, 103, 10, 114, 
	10, 111, 10, 117, 10, 110, 10, 100, 
	10, 115, 10, 105, 10, 110, 10, 101, 
	10, 115, 10, 115, 10, 32, 10, 78, 
	10, 101, 10, 101, 10, 120, 10, 97, 
	10, 109, 10, 112, 10, 108, 10, 101, 
	10, 115, 10, 101, 10, 97, 10, 116, 
	10, 117, 10, 114, 10, 101, 10, 99, 
	10, 101, 10, 110, 10, 97, 10, 114, 
	10, 105, 10, 111, 10, 32, 58, 115, 
	10, 79, 84, 10, 117, 10, 116, 10, 
	108, 10, 105, 10, 110, 10, 101, 10, 
	109, 10, 112, 10, 108, 10, 97, 10, 
	116, 100, 187, 191, 0
];

var _lexer_single_lengths = [
	0, 17, 16, 1, 1, 2, 2, 3, 
	3, 3, 3, 2, 2, 2, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 2, 2, 
	3, 5, 3, 2, 1, 1, 1, 1, 
	1, 1, 1, 1, 10, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 16, 2, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 13, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 3, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	3, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 3, 3, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 7, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 3, 2, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 13, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 3, 2, 2, 
	2, 2, 2, 2, 2, 2, 3, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 1, 1, 1, 1, 1, 
	1, 1, 1, 13, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 3, 2, 2, 2, 2, 
	2, 2, 2, 3, 2, 2, 2, 2, 
	2, 2, 2, 2, 3, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 3, 
	3, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 1, 2, 4, 
	3, 2, 4, 16, 3, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 4, 3, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	1, 1, 1, 0
];

var _lexer_range_lengths = [
	0, 1, 1, 0, 0, 0, 0, 1, 
	1, 1, 1, 1, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 1, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 1, 
	0, 0, 1, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0
];

var _lexer_index_offsets = [
	0, 0, 19, 37, 39, 41, 44, 47, 
	52, 57, 62, 67, 71, 75, 78, 80, 
	82, 84, 86, 88, 90, 92, 94, 96, 
	98, 100, 102, 104, 106, 108, 110, 113, 
	116, 121, 128, 133, 136, 138, 140, 142, 
	144, 146, 148, 150, 152, 164, 167, 170, 
	173, 176, 179, 182, 185, 188, 191, 194, 
	197, 200, 203, 206, 209, 212, 215, 218, 
	221, 224, 227, 245, 248, 250, 252, 254, 
	256, 258, 260, 262, 264, 266, 268, 270, 
	285, 288, 291, 294, 297, 300, 303, 306, 
	309, 312, 315, 318, 321, 324, 327, 330, 
	334, 337, 340, 343, 346, 349, 352, 355, 
	358, 362, 365, 368, 371, 374, 377, 380, 
	383, 386, 389, 392, 395, 398, 401, 404, 
	407, 410, 413, 416, 419, 422, 425, 428, 
	431, 434, 437, 440, 443, 447, 451, 454, 
	457, 460, 463, 466, 469, 472, 475, 478, 
	481, 484, 487, 490, 492, 494, 496, 498, 
	500, 502, 504, 506, 508, 510, 512, 514, 
	516, 518, 520, 522, 524, 526, 528, 530, 
	539, 542, 545, 548, 551, 554, 557, 560, 
	563, 566, 569, 572, 575, 578, 581, 584, 
	587, 590, 593, 596, 599, 602, 605, 608, 
	611, 614, 616, 618, 620, 622, 624, 626, 
	628, 630, 632, 634, 636, 638, 640, 642, 
	644, 646, 648, 652, 655, 657, 659, 661, 
	663, 665, 667, 669, 671, 673, 688, 691, 
	694, 697, 700, 703, 706, 709, 712, 715, 
	718, 721, 724, 727, 730, 733, 737, 740, 
	743, 746, 749, 752, 755, 758, 761, 765, 
	768, 771, 774, 777, 780, 783, 786, 789, 
	792, 795, 798, 801, 804, 807, 810, 813, 
	816, 819, 822, 825, 828, 831, 834, 837, 
	840, 843, 846, 849, 851, 853, 855, 857, 
	859, 861, 863, 865, 880, 883, 886, 889, 
	892, 895, 898, 901, 904, 907, 910, 913, 
	916, 919, 922, 925, 929, 932, 935, 938, 
	941, 944, 947, 950, 954, 957, 960, 963, 
	966, 969, 972, 975, 978, 982, 985, 988, 
	991, 994, 997, 1000, 1003, 1006, 1009, 1012, 
	1015, 1018, 1021, 1024, 1027, 1030, 1033, 1036, 
	1039, 1042, 1045, 1048, 1051, 1054, 1057, 1060, 
	1064, 1068, 1071, 1074, 1077, 1080, 1083, 1086, 
	1089, 1092, 1095, 1098, 1101, 1104, 1106, 1110, 
	1116, 1120, 1123, 1129, 1147, 1151, 1154, 1157, 
	1160, 1163, 1166, 1169, 1172, 1175, 1178, 1181, 
	1184, 1187, 1190, 1193, 1196, 1199, 1202, 1205, 
	1208, 1211, 1214, 1217, 1220, 1223, 1226, 1229, 
	1232, 1235, 1238, 1241, 1244, 1247, 1250, 1253, 
	1256, 1259, 1262, 1265, 1270, 1274, 1277, 1280, 
	1283, 1286, 1289, 1292, 1295, 1298, 1301, 1304, 
	1307, 1309, 1311, 1313
];

var _lexer_indicies = [
	2, 1, 3, 4, 5, 6, 7, 8, 
	9, 10, 11, 12, 13, 14, 14, 15, 
	16, 1, 0, 2, 1, 3, 4, 5, 
	6, 7, 8, 9, 10, 11, 12, 13, 
	14, 14, 15, 1, 0, 17, 0, 18, 
	0, 20, 21, 19, 23, 24, 22, 27, 
	26, 28, 26, 25, 31, 30, 32, 30, 
	29, 31, 30, 33, 30, 29, 31, 30, 
	34, 30, 29, 36, 35, 35, 0, 2, 
	37, 37, 0, 39, 40, 38, 2, 0, 
	41, 0, 42, 0, 43, 0, 44, 0, 
	45, 0, 46, 0, 47, 0, 48, 0, 
	49, 0, 50, 0, 51, 0, 52, 0, 
	53, 0, 54, 0, 55, 0, 57, 58, 
	56, 60, 61, 59, 0, 0, 0, 0, 
	62, 63, 64, 63, 63, 66, 65, 62, 
	2, 67, 7, 67, 0, 68, 69, 0, 
	70, 0, 71, 0, 72, 0, 73, 0, 
	74, 0, 75, 0, 77, 76, 79, 78, 
	79, 80, 81, 82, 81, 83, 84, 85, 
	86, 87, 80, 78, 79, 88, 78, 79, 
	89, 78, 79, 90, 78, 79, 91, 78, 
	79, 92, 78, 79, 93, 78, 79, 94, 
	78, 79, 95, 78, 79, 96, 78, 79, 
	97, 78, 79, 98, 78, 79, 99, 78, 
	79, 100, 78, 79, 101, 78, 79, 102, 
	78, 79, 103, 78, 79, 104, 78, 79, 
	105, 78, 79, 106, 78, 79, 107, 78, 
	79, 108, 78, 110, 109, 111, 112, 113, 
	114, 115, 116, 117, 118, 119, 120, 121, 
	122, 122, 123, 109, 0, 124, 125, 0, 
	126, 0, 127, 0, 128, 0, 129, 0, 
	130, 0, 131, 0, 132, 0, 133, 0, 
	134, 0, 136, 135, 138, 137, 138, 139, 
	140, 141, 142, 140, 143, 144, 145, 146, 
	147, 148, 148, 139, 137, 138, 149, 137, 
	138, 150, 137, 138, 151, 137, 138, 152, 
	137, 138, 153, 137, 138, 154, 137, 138, 
	155, 137, 138, 156, 137, 138, 157, 137, 
	138, 158, 137, 138, 159, 137, 138, 160, 
	137, 138, 161, 137, 138, 162, 137, 138, 
	163, 137, 138, 164, 165, 137, 138, 166, 
	137, 138, 167, 137, 138, 168, 137, 138, 
	169, 137, 138, 170, 137, 138, 163, 137, 
	138, 171, 137, 138, 172, 137, 138, 173, 
	171, 137, 138, 174, 137, 138, 175, 137, 
	138, 176, 137, 138, 177, 137, 138, 178, 
	137, 138, 179, 137, 138, 180, 137, 138, 
	181, 137, 138, 182, 137, 138, 170, 137, 
	138, 183, 137, 138, 184, 137, 138, 185, 
	137, 138, 186, 137, 138, 187, 137, 138, 
	170, 137, 138, 188, 137, 138, 189, 137, 
	138, 190, 137, 138, 171, 137, 138, 191, 
	137, 138, 192, 137, 138, 193, 137, 138, 
	194, 137, 138, 195, 137, 138, 196, 137, 
	138, 197, 137, 138, 198, 163, 137, 138, 
	199, 200, 137, 138, 201, 137, 138, 202, 
	137, 138, 203, 137, 138, 204, 137, 138, 
	187, 137, 138, 205, 137, 138, 206, 137, 
	138, 207, 137, 138, 208, 137, 138, 209, 
	137, 138, 187, 137, 138, 189, 137, 210, 
	211, 0, 212, 0, 213, 0, 214, 0, 
	215, 0, 216, 0, 217, 0, 218, 0, 
	219, 0, 220, 0, 74, 0, 221, 0, 
	222, 0, 223, 0, 224, 0, 225, 0, 
	226, 0, 227, 0, 228, 0, 230, 229, 
	232, 231, 232, 233, 234, 235, 236, 237, 
	234, 233, 231, 232, 238, 231, 232, 239, 
	231, 232, 240, 231, 232, 241, 231, 232, 
	242, 231, 232, 243, 231, 232, 244, 231, 
	232, 245, 231, 232, 246, 231, 232, 247, 
	231, 232, 248, 231, 232, 249, 231, 232, 
	250, 231, 232, 251, 231, 232, 252, 231, 
	232, 253, 231, 232, 254, 231, 232, 255, 
	231, 232, 243, 231, 232, 256, 231, 232, 
	257, 231, 232, 258, 231, 232, 259, 231, 
	232, 260, 231, 232, 243, 231, 261, 0, 
	262, 0, 263, 0, 264, 0, 265, 0, 
	74, 0, 266, 0, 267, 0, 268, 0, 
	211, 0, 269, 0, 270, 0, 271, 0, 
	272, 0, 273, 0, 274, 0, 275, 0, 
	276, 277, 227, 0, 278, 279, 0, 280, 
	0, 281, 0, 282, 0, 283, 0, 284, 
	0, 285, 0, 286, 0, 288, 287, 290, 
	289, 290, 291, 292, 293, 294, 292, 295, 
	296, 297, 298, 299, 300, 300, 291, 289, 
	290, 301, 289, 290, 302, 289, 290, 303, 
	289, 290, 304, 289, 290, 305, 289, 290, 
	306, 289, 290, 307, 289, 290, 308, 289, 
	290, 309, 289, 290, 310, 289, 290, 311, 
	289, 290, 312, 289, 290, 313, 289, 290, 
	314, 289, 290, 315, 289, 290, 316, 317, 
	289, 290, 318, 289, 290, 319, 289, 290, 
	320, 289, 290, 321, 289, 290, 322, 289, 
	290, 315, 289, 290, 323, 289, 290, 324, 
	289, 290, 325, 323, 289, 290, 326, 289, 
	290, 327, 289, 290, 328, 289, 290, 329, 
	289, 290, 330, 289, 290, 331, 289, 290, 
	332, 289, 290, 333, 289, 290, 334, 289, 
	290, 322, 289, 290, 335, 289, 290, 336, 
	289, 290, 337, 289, 290, 338, 289, 290, 
	339, 289, 290, 322, 289, 290, 340, 289, 
	290, 341, 289, 290, 342, 289, 290, 323, 
	289, 290, 343, 289, 290, 344, 289, 290, 
	345, 289, 290, 346, 289, 290, 347, 289, 
	290, 348, 289, 290, 322, 289, 290, 341, 
	289, 349, 0, 350, 0, 351, 0, 352, 
	0, 353, 0, 284, 0, 355, 354, 357, 
	356, 357, 358, 359, 360, 361, 359, 362, 
	363, 364, 365, 366, 367, 367, 358, 356, 
	357, 368, 356, 357, 369, 356, 357, 370, 
	356, 357, 371, 356, 357, 372, 356, 357, 
	373, 356, 357, 374, 356, 357, 375, 356, 
	357, 376, 356, 357, 377, 356, 357, 378, 
	356, 357, 379, 356, 357, 380, 356, 357, 
	381, 356, 357, 382, 356, 357, 383, 384, 
	356, 357, 385, 356, 357, 386, 356, 357, 
	387, 356, 357, 388, 356, 357, 389, 356, 
	357, 382, 356, 357, 390, 356, 357, 391, 
	392, 356, 357, 393, 356, 357, 394, 356, 
	357, 395, 356, 357, 396, 356, 357, 397, 
	356, 357, 398, 356, 357, 399, 356, 357, 
	389, 356, 357, 400, 390, 356, 357, 401, 
	356, 357, 402, 356, 357, 403, 356, 357, 
	404, 356, 357, 405, 356, 357, 406, 356, 
	357, 407, 356, 357, 408, 356, 357, 399, 
	356, 357, 409, 356, 357, 410, 356, 357, 
	411, 356, 357, 412, 356, 357, 413, 356, 
	357, 389, 356, 357, 414, 356, 357, 415, 
	356, 357, 416, 356, 357, 390, 356, 357, 
	417, 356, 357, 418, 356, 357, 419, 356, 
	357, 420, 356, 357, 421, 356, 357, 422, 
	356, 357, 423, 356, 357, 424, 382, 356, 
	357, 425, 426, 356, 357, 427, 356, 357, 
	428, 356, 357, 429, 356, 357, 430, 356, 
	357, 413, 356, 357, 431, 356, 357, 432, 
	356, 357, 433, 356, 357, 434, 356, 357, 
	435, 356, 357, 413, 356, 357, 415, 356, 
	267, 0, 436, 437, 436, 0, 440, 439, 
	441, 442, 439, 438, 0, 444, 445, 443, 
	0, 444, 443, 440, 446, 444, 445, 446, 
	443, 440, 447, 448, 449, 450, 451, 452, 
	453, 454, 455, 456, 457, 458, 459, 459, 
	460, 447, 0, 79, 461, 462, 78, 79, 
	463, 78, 79, 464, 78, 79, 465, 78, 
	79, 466, 78, 79, 467, 78, 79, 468, 
	78, 79, 469, 78, 79, 107, 78, 79, 
	470, 78, 79, 471, 78, 79, 472, 78, 
	79, 473, 78, 79, 474, 78, 79, 475, 
	78, 79, 476, 78, 79, 477, 78, 79, 
	478, 78, 79, 469, 78, 79, 479, 78, 
	79, 480, 78, 79, 481, 78, 79, 482, 
	78, 79, 483, 78, 79, 484, 78, 79, 
	107, 78, 79, 485, 78, 79, 486, 78, 
	79, 487, 78, 79, 488, 78, 79, 489, 
	78, 79, 107, 78, 79, 490, 78, 79, 
	491, 78, 79, 492, 78, 79, 493, 78, 
	79, 494, 78, 79, 495, 78, 79, 496, 
	78, 79, 497, 108, 107, 78, 79, 498, 
	499, 78, 79, 500, 78, 79, 501, 78, 
	79, 502, 78, 79, 503, 78, 79, 489, 
	78, 79, 504, 78, 79, 505, 78, 79, 
	506, 78, 79, 507, 78, 79, 508, 78, 
	79, 489, 78, 211, 0, 509, 0, 1, 
	0, 510, 0
];

var _lexer_trans_targs = [
	0, 2, 2, 3, 13, 15, 29, 32, 
	35, 67, 157, 193, 199, 203, 357, 358, 
	417, 4, 5, 6, 7, 6, 6, 7, 
	6, 8, 8, 8, 9, 8, 8, 8, 
	9, 10, 11, 12, 2, 12, 13, 2, 
	14, 16, 17, 18, 19, 20, 21, 22, 
	23, 24, 25, 26, 27, 28, 419, 30, 
	31, 2, 14, 31, 2, 14, 33, 34, 
	2, 33, 32, 34, 36, 416, 37, 38, 
	39, 40, 41, 42, 43, 44, 43, 44, 
	44, 2, 45, 59, 364, 383, 390, 396, 
	46, 47, 48, 49, 50, 51, 52, 53, 
	54, 55, 56, 57, 58, 2, 60, 61, 
	62, 63, 64, 65, 66, 2, 2, 3, 
	13, 15, 29, 32, 35, 67, 157, 193, 
	199, 203, 357, 358, 68, 146, 69, 70, 
	71, 72, 73, 74, 75, 76, 77, 78, 
	79, 78, 79, 79, 2, 80, 94, 95, 
	103, 115, 121, 125, 145, 81, 82, 83, 
	84, 85, 86, 87, 88, 89, 90, 91, 
	92, 93, 2, 66, 96, 102, 97, 98, 
	99, 100, 101, 94, 104, 105, 106, 107, 
	108, 109, 110, 111, 112, 113, 114, 116, 
	117, 118, 119, 120, 122, 123, 124, 126, 
	127, 128, 129, 130, 131, 132, 133, 134, 
	139, 135, 136, 137, 138, 140, 141, 142, 
	143, 144, 147, 29, 148, 149, 150, 151, 
	152, 153, 154, 155, 156, 158, 159, 160, 
	161, 162, 163, 164, 165, 166, 167, 166, 
	167, 167, 2, 168, 175, 187, 169, 170, 
	171, 172, 173, 174, 66, 176, 177, 178, 
	179, 180, 181, 182, 183, 184, 185, 186, 
	188, 189, 190, 191, 192, 194, 195, 196, 
	197, 198, 200, 201, 202, 204, 205, 206, 
	207, 208, 209, 210, 211, 281, 212, 275, 
	213, 214, 215, 216, 217, 218, 219, 220, 
	221, 220, 221, 221, 2, 222, 236, 237, 
	245, 257, 263, 267, 274, 223, 224, 225, 
	226, 227, 228, 229, 230, 231, 232, 233, 
	234, 235, 2, 66, 238, 244, 239, 240, 
	241, 242, 243, 236, 246, 247, 248, 249, 
	250, 251, 252, 253, 254, 255, 256, 258, 
	259, 260, 261, 262, 264, 265, 266, 268, 
	269, 270, 271, 272, 273, 276, 277, 278, 
	279, 280, 282, 283, 282, 283, 283, 2, 
	284, 298, 299, 307, 326, 332, 336, 356, 
	285, 286, 287, 288, 289, 290, 291, 292, 
	293, 294, 295, 296, 297, 2, 66, 300, 
	306, 301, 302, 303, 304, 305, 298, 308, 
	316, 309, 310, 311, 312, 313, 314, 315, 
	317, 318, 319, 320, 321, 322, 323, 324, 
	325, 327, 328, 329, 330, 331, 333, 334, 
	335, 337, 338, 339, 340, 341, 342, 343, 
	344, 345, 350, 346, 347, 348, 349, 351, 
	352, 353, 354, 355, 358, 359, 360, 362, 
	363, 361, 359, 360, 361, 359, 362, 363, 
	3, 13, 15, 29, 32, 35, 67, 157, 
	193, 199, 203, 357, 358, 365, 373, 366, 
	367, 368, 369, 370, 371, 372, 374, 375, 
	376, 377, 378, 379, 380, 381, 382, 384, 
	385, 386, 387, 388, 389, 391, 392, 393, 
	394, 395, 397, 398, 399, 400, 401, 402, 
	403, 404, 405, 410, 406, 407, 408, 409, 
	411, 412, 413, 414, 415, 418, 0
];

var _lexer_trans_actions = [
	43, 0, 54, 3, 1, 0, 29, 1, 
	29, 29, 29, 29, 29, 29, 29, 35, 
	0, 0, 0, 7, 139, 48, 0, 102, 
	9, 5, 45, 134, 45, 0, 33, 122, 
	33, 33, 0, 11, 106, 0, 0, 114, 
	25, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	57, 149, 126, 0, 110, 23, 0, 27, 
	118, 27, 51, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 57, 144, 0, 54, 
	0, 69, 33, 84, 84, 84, 84, 84, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 13, 0, 0, 
	0, 0, 0, 0, 13, 31, 130, 60, 
	57, 31, 63, 57, 63, 63, 63, 63, 
	63, 63, 63, 66, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 57, 
	144, 0, 54, 0, 72, 33, 84, 84, 
	84, 84, 84, 84, 84, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 15, 15, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 57, 144, 0, 
	54, 0, 81, 84, 84, 84, 0, 0, 
	0, 0, 0, 0, 21, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 57, 
	144, 0, 54, 0, 78, 33, 84, 84, 
	84, 84, 84, 84, 84, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 19, 19, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 57, 144, 0, 54, 0, 75, 
	33, 84, 84, 84, 84, 84, 84, 84, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 17, 17, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 37, 37, 
	54, 37, 87, 0, 0, 39, 0, 0, 
	93, 90, 41, 96, 90, 96, 96, 96, 
	96, 96, 96, 96, 99, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0
];

var _lexer_eof_actions = [
	0, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43
];

var lexer_start = 1;
var lexer_first_final = 419;
var lexer_error = 0;

var lexer_en_main = 1;


/* line 129 "ragel/i18n/en.js.rl" */

/* line 130 "ragel/i18n/en.js.rl" */

/* line 131 "ragel/i18n/en.js.rl" */

/* line 132 "ragel/i18n/en.js.rl" */

var Lexer = function(listener) {
  // Check that listener has the required functions
  var events = ['comment', 'tag', 'feature', 'background', 'scenario', 'scenario_outline', 'examples', 'step', 'doc_string', 'row', 'eof'];
  for(var i=0, len=events.length; i<len; i++) {
    var event = events[i];
    if(typeof listener[event] != 'function') {
      throw new Error("Error. No " + event + " function exists on " + JSON.stringify(listener));
    }
  }
  this.listener = listener;
};

Lexer.prototype.scan = function(data) {
  var ending = "\n%_FEATURE_END_%";
  if(typeof data == 'string') {
    data = this.stringToBytes(data + ending);
  } else if(typeof Buffer != 'undefined' && Buffer.isBuffer(data)) {
    // Node.js
    var buf = new Buffer(data.length + ending.length);
    data.copy(buf, 0, 0);
    new Buffer(ending).copy(buf, data.length, 0);
    data = buf;
  }
  var eof = pe = data.length;
  var p = 0;

  this.line_number = 1;
  this.last_newline = 0;
  var signedCharValue=function(v){return v > 127 ? v-256 : v; };

  
/* line 781 "js/lib/gherkin/lexer/en.js" */
{
	  this.cs = lexer_start;
} /* JSCodeGen::writeInit */

/* line 164 "ragel/i18n/en.js.rl" */
  
/* line 788 "js/lib/gherkin/lexer/en.js" */
{
	var _klen, _trans, _keys, _ps, _widec, _acts, _nacts;
	var _goto_level, _resume, _eof_trans, _again, _test_eof;
	var _out;
	_klen = _trans = _keys = _acts = _nacts = null;
	_goto_level = 0;
	_resume = 10;
	_eof_trans = 15;
	_again = 20;
	_test_eof = 30;
	_out = 40;
	while (true) {
	_trigger_goto = false;
	if (_goto_level <= 0) {
	if (p == pe) {
		_goto_level = _test_eof;
		continue;
	}
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	}
	if (_goto_level <= _resume) {
	_keys = _lexer_key_offsets[ this.cs];
	_trans = _lexer_index_offsets[ this.cs];
	_klen = _lexer_single_lengths[ this.cs];
	_break_match = false;
	
	do {
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + _klen - 1;

	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + ( (_upper - _lower) >> 1 );

	        if (( signedCharValue(data[p])) < _lexer_trans_keys[_mid]) {
	           _upper = _mid - 1;
	        } else if (( signedCharValue(data[p])) > _lexer_trans_keys[_mid]) {
	           _lower = _mid + 1;
	        } else {
	           _trans += (_mid - _keys);
	           _break_match = true;
	           break;
	        };
	     } /* while */
	     if (_break_match) { break; }
	     _keys += _klen;
	     _trans += _klen;
	  }
	  _klen = _lexer_range_lengths[ this.cs];
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + (_klen << 1) - 2;
	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + (((_upper-_lower) >> 1) & ~1);
	        if (( signedCharValue(data[p])) < _lexer_trans_keys[_mid]) {
	          _upper = _mid - 2;
	         } else if (( signedCharValue(data[p])) > _lexer_trans_keys[_mid+1]) {
	          _lower = _mid + 2;
	        } else {
	          _trans += ((_mid - _keys) >> 1);
	          _break_match = true;
	          break;
	        }
	     } /* while */
	     if (_break_match) { break; }
	     _trans += _klen
	  }
	} while (false);
	_trans = _lexer_indicies[_trans];
	 this.cs = _lexer_trans_targs[_trans];
	if (_lexer_trans_actions[_trans] != 0) {
		_acts = _lexer_trans_actions[_trans];
		_nacts = _lexer_actions[_acts];
		_acts += 1;
		while (_nacts > 0) {
			_nacts -= 1;
			_acts += 1;
			switch (_lexer_actions[_acts - 1]) {
case 0:
/* line 6 "ragel/i18n/en.js.rl" */

    this.content_start = p;
    this.current_line = this.line_number;
    this.start_col = p - this.last_newline - (this.keyword+':').length;
  		break;
case 1:
/* line 12 "ragel/i18n/en.js.rl" */

    this.current_line = this.line_number;
    this.start_col = p - this.last_newline;
  		break;
case 2:
/* line 17 "ragel/i18n/en.js.rl" */

    this.content_start = p;
  		break;
case 3:
/* line 21 "ragel/i18n/en.js.rl" */

    this.docstring_content_type_start = p;
  		break;
case 4:
/* line 25 "ragel/i18n/en.js.rl" */

    this.docstring_content_type_end = p;
  		break;
case 5:
/* line 29 "ragel/i18n/en.js.rl" */

    var con = this.unindent(
      this.start_col, 
      this.bytesToString(data.slice(this.content_start, this.next_keyword_start-1)).replace(/(\r?\n)?([\t ])*$/, '').replace(/\\\"\\\"\\\"/mg, '"""')
    );
    var con_type = this.bytesToString(data.slice(this.docstring_content_type_start, this.docstring_content_type_end)).trim();
    this.listener.doc_string(con_type, con, this.current_line); 
  		break;
case 6:
/* line 38 "ragel/i18n/en.js.rl" */

    p = this.store_keyword_content('feature', data, p, eof);
  		break;
case 7:
/* line 42 "ragel/i18n/en.js.rl" */

    p = this.store_keyword_content('background', data, p, eof);
  		break;
case 8:
/* line 46 "ragel/i18n/en.js.rl" */

    p = this.store_keyword_content('scenario', data, p, eof);
  		break;
case 9:
/* line 50 "ragel/i18n/en.js.rl" */

    p = this.store_keyword_content('scenario_outline', data, p, eof);
  		break;
case 10:
/* line 54 "ragel/i18n/en.js.rl" */

    p = this.store_keyword_content('examples', data, p, eof);
  		break;
case 11:
/* line 58 "ragel/i18n/en.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.step(this.keyword, con, this.current_line);
  		break;
case 12:
/* line 63 "ragel/i18n/en.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.comment(con, this.line_number);
    this.keyword_start = null;
  		break;
case 13:
/* line 69 "ragel/i18n/en.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.tag(con, this.line_number);
    this.keyword_start = null;
  		break;
case 14:
/* line 75 "ragel/i18n/en.js.rl" */

    this.line_number++;
  		break;
case 15:
/* line 79 "ragel/i18n/en.js.rl" */

    this.last_newline = p + 1;
  		break;
case 16:
/* line 83 "ragel/i18n/en.js.rl" */

    this.keyword_start = this.keyword_start || p;
  		break;
case 17:
/* line 87 "ragel/i18n/en.js.rl" */

    this.keyword = this.bytesToString(data.slice(this.keyword_start, p)).replace(/:$/, '');
    this.keyword_start = null;
  		break;
case 18:
/* line 92 "ragel/i18n/en.js.rl" */

    this.next_keyword_start = p;
  		break;
case 19:
/* line 96 "ragel/i18n/en.js.rl" */

    p = p - 1;
    current_row = [];
    this.current_line = this.line_number;
  		break;
case 20:
/* line 102 "ragel/i18n/en.js.rl" */

    this.content_start = p;
  		break;
case 21:
/* line 106 "ragel/i18n/en.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    current_row.push(con.replace(/\\\|/, "|").replace(/\\n/, "\n").replace(/\\\\/, "\\"));
  		break;
case 22:
/* line 111 "ragel/i18n/en.js.rl" */

    this.listener.row(current_row, this.current_line);
  		break;
case 23:
/* line 115 "ragel/i18n/en.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw new Error("Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.");
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 1015 "js/lib/gherkin/lexer/en.js" */
			} /* action switch */
		}
	}
	if (_trigger_goto) {
		continue;
	}
	}
	if (_goto_level <= _again) {
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	p += 1;
	if (p != pe) {
		_goto_level = _resume;
		continue;
	}
	}
	if (_goto_level <= _test_eof) {
	if (p == eof) {
	__acts = _lexer_eof_actions[ this.cs];
	__nacts =  _lexer_actions[__acts];
	__acts += 1;
	while (__nacts > 0) {
		__nacts -= 1;
		__acts += 1;
		switch (_lexer_actions[__acts - 1]) {
case 23:
/* line 115 "ragel/i18n/en.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw new Error("Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.");
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 1054 "js/lib/gherkin/lexer/en.js" */
		} /* eof action switch */
	}
	if (_trigger_goto) {
		continue;
	}
}
	}
	if (_goto_level <= _out) {
		break;
	}
	}
	}

/* line 165 "ragel/i18n/en.js.rl" */
};


/*
 * Decode utf-8 byte sequence to string.
 */
var decodeUtf8 = function(bytes) {
  var result = "";
  var i = 0;
  var wc;
  var c;

  while (i < bytes.length) {
    /* parse as UTF-8 lead byte */
    wc = bytes[i++];
    if (wc < 0x80) {
      count = 0;
    } else if (wc < 0xC2 || wc >= 0xF8) {
      throw new Error("input is not a valid UTF-8 lead octet");
    } else if (wc < 0xE0) {
      count = 1;
      wc = (wc & 0x1F) << 6;
    } else if (wc < 0xF0) {
      count = 2;
      wc = (wc & 0x0F) << 12;
    } else /* wc < 0xF8 */ {
      count = 3;
      wc = (wc & 0x07) << 18;
    }

    /* parse trail bytes, if any */
    while (count) {
      if (!(i < bytes.length)) {
        throw new Error("short read");
      }
      if ((c = bytes[i++] ^ 0x80) > 0x3F) {
        throw new Error("input is not a valid UTF-8 trail octet");
      }
      wc |= c << (6 * --count);
      if (wc < (1 << (5 * count + 6))) {
        throw new Error("invalid non-minimal encoded input");
      }
    }

    /* handle conversion to UTF-16 if needed */
    if (wc > 0xFFFF) {
      wc -= 0x10000;
      result += String.fromCharCode(0xD800 + (wc >> 10));
      wc = 0xDC00 + (wc & 0x3FF);
    }
    result += String.fromCharCode(wc);
  }

  return result;
};

/*
 * Encode string to an array of bytes using utf8 encoding.
 *
 * Javascript internally stores character data as utf16 (like java).
 * String.charCodeAt() does *not* produce unicode points, but simply
 * reflects this internal representation. Thus, it is necessary
 * to first decode the utf-16 representation before encoding to
 * utf-8.
 */
var encodeUtf8 = function(string) {
  var bytes = [];
  var i = 0;
  var j = 0;
  var wc;

  while (i < string.length) {
    wc = string.charCodeAt(i++);
    if (wc >= 0xD800 && wc <= 0xDBFF && i < string.length && string.charCodeAt(i) >= 0xDC00 && string.charCodeAt(i) <= 0xDFFF) {
      /* decode UTF-16 */
      wc = 0x10000 + ((wc & 0x3FF) << 10) + (string.charCodeAt(i++) & 0x3FF);
    }

    /* emit lead byte */
    if (wc < 0x80) {
      bytes[j++] = wc;
      count = 0;
    } else if (wc < 0x800) {
      bytes[j++] = 0xC0 | (wc >> 6);
      count = 1;
    } else if (wc < 0x10000) {
      bytes[j++] = 0xE0 | (wc >> 12);
      count = 2;
    } else {
      /* SMP: 21-bit Unicode */
      bytes[j++] = 0xF0 | (wc >> 18);
      count = 3;
    }

    /* emit trail bytes, if any */
    while (count) {
      bytes[j++] = 0x80 | ((wc >> (6 * --count)) & 0x3F);
    }
  }

  return bytes;

};

Lexer.prototype.bytesToString = function(bytes) {
  if(typeof bytes.write == 'function') {
    // Node.js
    return bytes.toString('utf-8');
  }
  return decodeUtf8(bytes);
};

Lexer.prototype.stringToBytes = function(string) {
  return encodeUtf8(string);
};

Lexer.prototype.unindent = function(startcol, text) {
  startcol = startcol || 0;
  return text.replace(new RegExp('^[\t ]{0,' + startcol + '}', 'gm'), ''); 
};

Lexer.prototype.store_keyword_content = function(event, data, p, eof) {
  var end_point = (!this.next_keyword_start || (p == eof)) ? p : this.next_keyword_start;
  var content = this.unindent(this.start_col + 2, this.bytesToString(data.slice(this.content_start, end_point))).replace(/\s+$/,"");
  var content_lines = content.split("\n")
  var name = content_lines.shift() || "";
  name = name.trim();
  var description = content_lines.join("\n");
  this.listener[event](this.keyword, name, description, this.current_line);
  var nks = this.next_keyword_start;
  this.next_keyword_start = null;
  return nks ? nks - 1 : p;
};

Lexer.prototype.current_line_content = function(data, p) {
  var rest = Array.prototype.slice.call(data,this.last_newline, -1);
  var end = rest.indexOf(10) || -1;
  return this.bytesToString(rest.slice(0, end)).trim();
};

// Node.js export
if(typeof module !== 'undefined') {
  module.exports = Lexer;
}
// Require.js export
if (typeof define !== 'undefined') {
  if(define.amd) {
    define('gherkin/lexer/en', [], function() {
      return Lexer;
    });
  } else {
    define('gherkin/lexer/en', function(require, exports, module) {
      exports.Lexer = Lexer;
    });
  }
}

})();

}).call(this,require("buffer").Buffer)

},{"buffer":69}],195:[function(require,module,exports){
(function (Buffer){

/* line 1 "ragel/i18n/en_au.js.rl" */
;(function() {


/* line 126 "ragel/i18n/en_au.js.rl" */



/* line 11 "js/lib/gherkin/lexer/en_au.js" */
var _lexer_actions = [
	0, 1, 0, 1, 1, 1, 2, 1, 
	3, 1, 4, 1, 5, 1, 6, 1, 
	7, 1, 8, 1, 9, 1, 10, 1, 
	11, 1, 12, 1, 13, 1, 16, 1, 
	17, 1, 18, 1, 19, 1, 20, 1, 
	21, 1, 22, 1, 23, 2, 2, 18, 
	2, 3, 4, 2, 13, 0, 2, 14, 
	15, 2, 17, 0, 2, 17, 1, 2, 
	17, 16, 2, 17, 19, 2, 18, 6, 
	2, 18, 7, 2, 18, 8, 2, 18, 
	9, 2, 18, 10, 2, 18, 16, 2, 
	20, 21, 2, 22, 0, 2, 22, 1, 
	2, 22, 16, 2, 22, 19, 3, 4, 
	14, 15, 3, 5, 14, 15, 3, 11, 
	14, 15, 3, 12, 14, 15, 3, 13, 
	14, 15, 3, 14, 15, 18, 3, 17, 
	0, 11, 3, 17, 14, 15, 4, 2, 
	14, 15, 18, 4, 3, 4, 14, 15, 
	4, 17, 0, 14, 15, 5, 17, 0, 
	11, 14, 15
];

var _lexer_key_offsets = [
	0, 0, 19, 37, 38, 39, 41, 43, 
	48, 53, 58, 63, 67, 71, 73, 74, 
	75, 76, 77, 78, 79, 80, 81, 82, 
	83, 84, 85, 86, 87, 88, 89, 91, 
	93, 98, 105, 110, 111, 112, 113, 114, 
	115, 116, 117, 118, 119, 120, 121, 122, 
	123, 124, 125, 126, 127, 143, 145, 147, 
	149, 151, 153, 155, 157, 159, 161, 163, 
	165, 167, 169, 171, 173, 191, 192, 193, 
	194, 195, 196, 197, 198, 199, 200, 201, 
	202, 203, 204, 205, 206, 207, 208, 209, 
	210, 211, 212, 213, 214, 215, 216, 217, 
	218, 219, 220, 221, 222, 223, 224, 225, 
	226, 227, 228, 229, 230, 231, 232, 233, 
	234, 235, 250, 252, 254, 256, 258, 260, 
	262, 264, 266, 268, 270, 272, 274, 276, 
	278, 280, 282, 284, 286, 288, 290, 292, 
	294, 296, 298, 300, 302, 304, 306, 308, 
	310, 312, 314, 316, 318, 320, 322, 324, 
	326, 328, 330, 332, 334, 336, 338, 340, 
	342, 344, 346, 348, 350, 352, 354, 356, 
	358, 360, 362, 364, 366, 368, 370, 372, 
	374, 376, 378, 380, 382, 384, 386, 388, 
	390, 392, 394, 396, 398, 400, 402, 404, 
	406, 408, 410, 412, 414, 416, 418, 420, 
	422, 424, 426, 428, 430, 432, 434, 436, 
	438, 440, 442, 444, 446, 448, 450, 452, 
	454, 456, 458, 460, 462, 464, 466, 468, 
	470, 472, 474, 476, 478, 480, 482, 485, 
	487, 489, 491, 493, 495, 497, 499, 501, 
	503, 505, 506, 507, 508, 509, 510, 511, 
	512, 513, 514, 515, 516, 517, 518, 519, 
	520, 521, 522, 523, 524, 525, 526, 527, 
	528, 529, 530, 531, 532, 533, 534, 535, 
	536, 537, 538, 539, 551, 553, 555, 557, 
	559, 561, 563, 565, 567, 569, 571, 573, 
	575, 577, 579, 581, 583, 585, 587, 589, 
	591, 593, 595, 597, 599, 601, 603, 605, 
	607, 609, 611, 613, 615, 617, 619, 621, 
	623, 625, 627, 629, 631, 633, 635, 637, 
	639, 641, 643, 645, 647, 649, 651, 653, 
	655, 657, 659, 661, 663, 665, 667, 669, 
	671, 673, 675, 677, 679, 681, 683, 685, 
	687, 689, 691, 693, 695, 696, 697, 698, 
	699, 700, 701, 702, 703, 704, 705, 706, 
	707, 708, 709, 710, 711, 712, 713, 727, 
	729, 731, 733, 735, 737, 739, 741, 743, 
	745, 747, 749, 751, 753, 755, 757, 759, 
	761, 763, 765, 767, 769, 771, 773, 775, 
	777, 779, 781, 783, 785, 787, 789, 791, 
	793, 795, 797, 799, 801, 803, 805, 807, 
	809, 811, 813, 815, 817, 819, 821, 823, 
	825, 827, 829, 831, 833, 835, 837, 839, 
	841, 843, 845, 847, 849, 851, 853, 855, 
	857, 859, 861, 863, 865, 867, 869, 871, 
	873, 875, 877, 879, 881, 883, 885, 887, 
	889, 891, 893, 895, 897, 899, 901, 903, 
	905, 907, 909, 911, 913, 915, 917, 919, 
	921, 923, 925, 927, 929, 931, 934, 936, 
	938, 940, 942, 944, 946, 948, 950, 952, 
	954, 955, 956, 957, 958, 959, 960, 961, 
	962, 965, 966, 967, 968, 969, 970, 971, 
	972, 973, 974, 975, 976, 977, 978, 979, 
	980, 981, 982, 983, 984, 985, 986, 987, 
	988, 995, 997, 999, 1001, 1003, 1005, 1007, 
	1009, 1011, 1013, 1015, 1017, 1021, 1027, 1030, 
	1032, 1038, 1056, 1058, 1060, 1062, 1064, 1066, 
	1068, 1070, 1072, 1074, 1076, 1078, 1080, 1082, 
	1084, 1086, 1088, 1090, 1092, 1094, 1096, 1098, 
	1100, 1102, 1104, 1106, 1108, 1110, 1112, 1114, 
	1116, 1118, 1120, 1122, 1124, 1126, 1128, 1130, 
	1132, 1134, 1136, 1138, 1140, 1142, 1144, 1146, 
	1148, 1150, 1152, 1154, 1156, 1158, 1160, 1162, 
	1164, 1166, 1168, 1170, 1172, 1174, 1176, 1178, 
	1180, 1182, 1184, 1186, 1188, 1190, 1192, 1194, 
	1196, 1198, 1200, 1202, 1204, 1206, 1208, 1210, 
	1212, 1214, 1216, 1218, 1220, 1222, 1224, 1226, 
	1228, 1230, 1232, 1234, 1236, 1238, 1240, 1242, 
	1244, 1246, 1248, 1250, 1252, 1254, 1256, 1258, 
	1260, 1262, 1264, 1266, 1268, 1270, 1272, 1274, 
	1277, 1279, 1281, 1283, 1285, 1287, 1289, 1291, 
	1293, 1295, 1297, 1298, 1299
];

var _lexer_trans_keys = [
	10, 32, 34, 35, 37, 42, 64, 65, 
	66, 70, 73, 80, 82, 84, 89, 124, 
	239, 9, 13, 10, 32, 34, 35, 37, 
	42, 64, 65, 66, 70, 73, 80, 82, 
	84, 89, 124, 9, 13, 34, 34, 10, 
	13, 10, 13, 10, 32, 34, 9, 13, 
	10, 32, 34, 9, 13, 10, 32, 34, 
	9, 13, 10, 32, 34, 9, 13, 10, 
	32, 9, 13, 10, 32, 9, 13, 10, 
	13, 10, 95, 70, 69, 65, 84, 85, 
	82, 69, 95, 69, 78, 68, 95, 37, 
	32, 10, 13, 10, 13, 13, 32, 64, 
	9, 10, 9, 10, 13, 32, 64, 11, 
	12, 10, 32, 64, 9, 13, 119, 119, 
	119, 44, 32, 108, 111, 111, 107, 32, 
	109, 97, 116, 101, 58, 10, 10, 10, 
	32, 35, 37, 42, 64, 65, 66, 70, 
	73, 80, 82, 84, 89, 9, 13, 10, 
	95, 10, 70, 10, 69, 10, 65, 10, 
	84, 10, 85, 10, 82, 10, 69, 10, 
	95, 10, 69, 10, 78, 10, 68, 10, 
	95, 10, 37, 10, 32, 10, 32, 34, 
	35, 37, 42, 64, 65, 66, 70, 73, 
	80, 82, 84, 89, 124, 9, 13, 117, 
	116, 32, 97, 116, 32, 116, 104, 101, 
	32, 101, 110, 100, 32, 111, 102, 32, 
	116, 104, 101, 32, 100, 97, 121, 32, 
	73, 32, 114, 101, 99, 107, 111, 110, 
	105, 114, 115, 116, 32, 111, 102, 102, 
	58, 10, 10, 10, 32, 35, 37, 42, 
	64, 65, 66, 73, 80, 82, 84, 89, 
	9, 13, 10, 95, 10, 70, 10, 69, 
	10, 65, 10, 84, 10, 85, 10, 82, 
	10, 69, 10, 95, 10, 69, 10, 78, 
	10, 68, 10, 95, 10, 37, 10, 32, 
	10, 119, 10, 119, 10, 119, 10, 44, 
	10, 32, 10, 108, 10, 111, 10, 111, 
	10, 107, 10, 32, 10, 109, 10, 97, 
	10, 116, 10, 101, 10, 58, 10, 117, 
	10, 116, 10, 32, 10, 97, 10, 116, 
	10, 32, 10, 116, 10, 104, 10, 101, 
	10, 32, 10, 101, 10, 110, 10, 100, 
	10, 32, 10, 111, 10, 102, 10, 32, 
	10, 116, 10, 104, 10, 101, 10, 32, 
	10, 100, 10, 97, 10, 121, 10, 32, 
	10, 73, 10, 32, 10, 114, 10, 101, 
	10, 99, 10, 107, 10, 111, 10, 110, 
	10, 116, 10, 39, 10, 115, 10, 32, 
	10, 106, 10, 117, 10, 115, 10, 116, 
	10, 32, 10, 117, 10, 110, 10, 98, 
	10, 101, 10, 108, 10, 105, 10, 101, 
	10, 118, 10, 97, 10, 98, 10, 108, 
	10, 101, 10, 114, 10, 101, 10, 116, 
	10, 116, 10, 121, 10, 32, 10, 109, 
	10, 117, 10, 99, 10, 104, 10, 101, 
	10, 99, 10, 107, 10, 111, 10, 110, 
	10, 32, 10, 105, 10, 116, 10, 39, 
	10, 115, 10, 32, 10, 108, 10, 105, 
	10, 107, 10, 111, 10, 111, 10, 32, 
	10, 114, 10, 105, 10, 103, 10, 104, 
	10, 116, 10, 39, 101, 10, 107, 10, 
	110, 10, 111, 10, 119, 10, 97, 10, 
	104, 10, 32, 10, 110, 10, 97, 10, 
	104, 116, 39, 115, 32, 106, 117, 115, 
	116, 32, 117, 110, 98, 101, 108, 105, 
	101, 118, 97, 98, 108, 101, 114, 101, 
	116, 116, 121, 32, 109, 117, 99, 104, 
	58, 10, 10, 10, 32, 35, 37, 64, 
	65, 70, 80, 82, 89, 9, 13, 10, 
	95, 10, 70, 10, 69, 10, 65, 10, 
	84, 10, 85, 10, 82, 10, 69, 10, 
	95, 10, 69, 10, 78, 10, 68, 10, 
	95, 10, 37, 10, 119, 10, 119, 10, 
	119, 10, 44, 10, 32, 10, 108, 10, 
	111, 10, 111, 10, 107, 10, 32, 10, 
	109, 10, 97, 10, 116, 10, 101, 10, 
	58, 10, 105, 10, 114, 10, 115, 10, 
	116, 10, 32, 10, 111, 10, 102, 10, 
	102, 10, 114, 10, 101, 10, 116, 10, 
	116, 10, 121, 10, 32, 10, 109, 10, 
	117, 10, 99, 10, 104, 10, 101, 10, 
	99, 10, 107, 10, 111, 10, 110, 10, 
	32, 10, 105, 10, 116, 10, 39, 10, 
	115, 10, 32, 10, 108, 10, 105, 10, 
	107, 10, 111, 10, 117, 10, 39, 10, 
	108, 10, 108, 10, 32, 10, 119, 10, 
	97, 10, 110, 10, 110, 10, 97, 101, 
	99, 107, 111, 110, 32, 105, 116, 39, 
	115, 32, 108, 105, 107, 101, 58, 10, 
	10, 10, 32, 35, 37, 42, 64, 65, 
	66, 73, 80, 84, 89, 9, 13, 10, 
	95, 10, 70, 10, 69, 10, 65, 10, 
	84, 10, 85, 10, 82, 10, 69, 10, 
	95, 10, 69, 10, 78, 10, 68, 10, 
	95, 10, 37, 10, 32, 10, 119, 10, 
	119, 10, 119, 10, 44, 10, 32, 10, 
	108, 10, 111, 10, 111, 10, 107, 10, 
	32, 10, 109, 10, 97, 10, 116, 10, 
	101, 10, 58, 10, 117, 10, 116, 10, 
	32, 10, 97, 10, 116, 10, 32, 10, 
	116, 10, 104, 10, 101, 10, 32, 10, 
	101, 10, 110, 10, 100, 10, 32, 10, 
	111, 10, 102, 10, 32, 10, 116, 10, 
	104, 10, 101, 10, 32, 10, 100, 10, 
	97, 10, 121, 10, 32, 10, 73, 10, 
	32, 10, 114, 10, 101, 10, 99, 10, 
	107, 10, 111, 10, 110, 10, 116, 10, 
	39, 10, 115, 10, 32, 10, 106, 10, 
	117, 10, 115, 10, 116, 10, 32, 10, 
	117, 10, 110, 10, 98, 10, 101, 10, 
	108, 10, 105, 10, 101, 10, 118, 10, 
	97, 10, 98, 10, 108, 10, 101, 10, 
	114, 10, 101, 10, 116, 10, 116, 10, 
	121, 10, 32, 10, 109, 10, 117, 10, 
	99, 10, 104, 10, 111, 10, 111, 10, 
	32, 10, 114, 10, 105, 10, 103, 10, 
	104, 10, 116, 10, 39, 101, 10, 107, 
	10, 110, 10, 111, 10, 119, 10, 97, 
	10, 104, 10, 32, 10, 110, 10, 97, 
	10, 104, 111, 111, 32, 114, 105, 103, 
	104, 116, 39, 101, 111, 107, 110, 111, 
	119, 97, 104, 32, 110, 97, 104, 117, 
	39, 108, 108, 32, 119, 97, 110, 110, 
	97, 58, 10, 10, 10, 32, 35, 80, 
	124, 9, 13, 10, 114, 10, 101, 10, 
	116, 10, 116, 10, 121, 10, 32, 10, 
	109, 10, 117, 10, 99, 10, 104, 10, 
	58, 32, 124, 9, 13, 10, 32, 92, 
	124, 9, 13, 10, 92, 124, 10, 92, 
	10, 32, 92, 124, 9, 13, 10, 32, 
	34, 35, 37, 42, 64, 65, 66, 70, 
	73, 80, 82, 84, 89, 124, 9, 13, 
	10, 119, 10, 119, 10, 119, 10, 44, 
	10, 32, 10, 108, 10, 111, 10, 111, 
	10, 107, 10, 32, 10, 109, 10, 97, 
	10, 116, 10, 101, 10, 58, 10, 117, 
	10, 116, 10, 32, 10, 97, 10, 116, 
	10, 32, 10, 116, 10, 104, 10, 101, 
	10, 32, 10, 101, 10, 110, 10, 100, 
	10, 32, 10, 111, 10, 102, 10, 32, 
	10, 116, 10, 104, 10, 101, 10, 32, 
	10, 100, 10, 97, 10, 121, 10, 32, 
	10, 73, 10, 32, 10, 114, 10, 101, 
	10, 99, 10, 107, 10, 111, 10, 110, 
	10, 105, 10, 114, 10, 115, 10, 116, 
	10, 32, 10, 111, 10, 102, 10, 102, 
	10, 116, 10, 39, 10, 115, 10, 32, 
	10, 106, 10, 117, 10, 115, 10, 116, 
	10, 32, 10, 117, 10, 110, 10, 98, 
	10, 101, 10, 108, 10, 105, 10, 101, 
	10, 118, 10, 97, 10, 98, 10, 108, 
	10, 101, 10, 114, 10, 101, 10, 116, 
	10, 116, 10, 121, 10, 32, 10, 109, 
	10, 117, 10, 99, 10, 104, 10, 101, 
	10, 99, 10, 107, 10, 111, 10, 110, 
	10, 32, 10, 105, 10, 116, 10, 39, 
	10, 115, 10, 32, 10, 108, 10, 105, 
	10, 107, 10, 111, 10, 111, 10, 32, 
	10, 114, 10, 105, 10, 103, 10, 104, 
	10, 116, 10, 39, 101, 10, 107, 10, 
	110, 10, 111, 10, 119, 10, 97, 10, 
	104, 10, 32, 10, 110, 10, 97, 10, 
	104, 187, 191, 0
];

var _lexer_single_lengths = [
	0, 17, 16, 1, 1, 2, 2, 3, 
	3, 3, 3, 2, 2, 2, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 2, 2, 
	3, 5, 3, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 14, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 16, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 13, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 3, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 10, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 12, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 3, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	3, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	5, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 4, 3, 2, 
	4, 16, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 3, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 1, 1, 0
];

var _lexer_range_lengths = [
	0, 1, 1, 0, 0, 0, 0, 1, 
	1, 1, 1, 1, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 1, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 1, 0, 0, 
	1, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0
];

var _lexer_index_offsets = [
	0, 0, 19, 37, 39, 41, 44, 47, 
	52, 57, 62, 67, 71, 75, 78, 80, 
	82, 84, 86, 88, 90, 92, 94, 96, 
	98, 100, 102, 104, 106, 108, 110, 113, 
	116, 121, 128, 133, 135, 137, 139, 141, 
	143, 145, 147, 149, 151, 153, 155, 157, 
	159, 161, 163, 165, 167, 183, 186, 189, 
	192, 195, 198, 201, 204, 207, 210, 213, 
	216, 219, 222, 225, 228, 246, 248, 250, 
	252, 254, 256, 258, 260, 262, 264, 266, 
	268, 270, 272, 274, 276, 278, 280, 282, 
	284, 286, 288, 290, 292, 294, 296, 298, 
	300, 302, 304, 306, 308, 310, 312, 314, 
	316, 318, 320, 322, 324, 326, 328, 330, 
	332, 334, 349, 352, 355, 358, 361, 364, 
	367, 370, 373, 376, 379, 382, 385, 388, 
	391, 394, 397, 400, 403, 406, 409, 412, 
	415, 418, 421, 424, 427, 430, 433, 436, 
	439, 442, 445, 448, 451, 454, 457, 460, 
	463, 466, 469, 472, 475, 478, 481, 484, 
	487, 490, 493, 496, 499, 502, 505, 508, 
	511, 514, 517, 520, 523, 526, 529, 532, 
	535, 538, 541, 544, 547, 550, 553, 556, 
	559, 562, 565, 568, 571, 574, 577, 580, 
	583, 586, 589, 592, 595, 598, 601, 604, 
	607, 610, 613, 616, 619, 622, 625, 628, 
	631, 634, 637, 640, 643, 646, 649, 652, 
	655, 658, 661, 664, 667, 670, 673, 676, 
	679, 682, 685, 688, 691, 694, 697, 701, 
	704, 707, 710, 713, 716, 719, 722, 725, 
	728, 731, 733, 735, 737, 739, 741, 743, 
	745, 747, 749, 751, 753, 755, 757, 759, 
	761, 763, 765, 767, 769, 771, 773, 775, 
	777, 779, 781, 783, 785, 787, 789, 791, 
	793, 795, 797, 799, 811, 814, 817, 820, 
	823, 826, 829, 832, 835, 838, 841, 844, 
	847, 850, 853, 856, 859, 862, 865, 868, 
	871, 874, 877, 880, 883, 886, 889, 892, 
	895, 898, 901, 904, 907, 910, 913, 916, 
	919, 922, 925, 928, 931, 934, 937, 940, 
	943, 946, 949, 952, 955, 958, 961, 964, 
	967, 970, 973, 976, 979, 982, 985, 988, 
	991, 994, 997, 1000, 1003, 1006, 1009, 1012, 
	1015, 1018, 1021, 1024, 1027, 1029, 1031, 1033, 
	1035, 1037, 1039, 1041, 1043, 1045, 1047, 1049, 
	1051, 1053, 1055, 1057, 1059, 1061, 1063, 1077, 
	1080, 1083, 1086, 1089, 1092, 1095, 1098, 1101, 
	1104, 1107, 1110, 1113, 1116, 1119, 1122, 1125, 
	1128, 1131, 1134, 1137, 1140, 1143, 1146, 1149, 
	1152, 1155, 1158, 1161, 1164, 1167, 1170, 1173, 
	1176, 1179, 1182, 1185, 1188, 1191, 1194, 1197, 
	1200, 1203, 1206, 1209, 1212, 1215, 1218, 1221, 
	1224, 1227, 1230, 1233, 1236, 1239, 1242, 1245, 
	1248, 1251, 1254, 1257, 1260, 1263, 1266, 1269, 
	1272, 1275, 1278, 1281, 1284, 1287, 1290, 1293, 
	1296, 1299, 1302, 1305, 1308, 1311, 1314, 1317, 
	1320, 1323, 1326, 1329, 1332, 1335, 1338, 1341, 
	1344, 1347, 1350, 1353, 1356, 1359, 1362, 1365, 
	1368, 1371, 1374, 1377, 1380, 1383, 1387, 1390, 
	1393, 1396, 1399, 1402, 1405, 1408, 1411, 1414, 
	1417, 1419, 1421, 1423, 1425, 1427, 1429, 1431, 
	1433, 1437, 1439, 1441, 1443, 1445, 1447, 1449, 
	1451, 1453, 1455, 1457, 1459, 1461, 1463, 1465, 
	1467, 1469, 1471, 1473, 1475, 1477, 1479, 1481, 
	1483, 1490, 1493, 1496, 1499, 1502, 1505, 1508, 
	1511, 1514, 1517, 1520, 1523, 1527, 1533, 1537, 
	1540, 1546, 1564, 1567, 1570, 1573, 1576, 1579, 
	1582, 1585, 1588, 1591, 1594, 1597, 1600, 1603, 
	1606, 1609, 1612, 1615, 1618, 1621, 1624, 1627, 
	1630, 1633, 1636, 1639, 1642, 1645, 1648, 1651, 
	1654, 1657, 1660, 1663, 1666, 1669, 1672, 1675, 
	1678, 1681, 1684, 1687, 1690, 1693, 1696, 1699, 
	1702, 1705, 1708, 1711, 1714, 1717, 1720, 1723, 
	1726, 1729, 1732, 1735, 1738, 1741, 1744, 1747, 
	1750, 1753, 1756, 1759, 1762, 1765, 1768, 1771, 
	1774, 1777, 1780, 1783, 1786, 1789, 1792, 1795, 
	1798, 1801, 1804, 1807, 1810, 1813, 1816, 1819, 
	1822, 1825, 1828, 1831, 1834, 1837, 1840, 1843, 
	1846, 1849, 1852, 1855, 1858, 1861, 1864, 1867, 
	1870, 1873, 1876, 1879, 1882, 1885, 1888, 1891, 
	1895, 1898, 1901, 1904, 1907, 1910, 1913, 1916, 
	1919, 1922, 1925, 1927, 1929
];

var _lexer_indicies = [
	2, 1, 3, 4, 5, 6, 7, 8, 
	9, 10, 11, 12, 13, 14, 15, 16, 
	17, 1, 0, 2, 1, 3, 4, 5, 
	6, 7, 8, 9, 10, 11, 12, 13, 
	14, 15, 16, 1, 0, 18, 0, 19, 
	0, 21, 22, 20, 24, 25, 23, 28, 
	27, 29, 27, 26, 32, 31, 33, 31, 
	30, 32, 31, 34, 31, 30, 32, 31, 
	35, 31, 30, 37, 36, 36, 0, 2, 
	38, 38, 0, 40, 41, 39, 2, 0, 
	42, 0, 43, 0, 44, 0, 45, 0, 
	46, 0, 47, 0, 48, 0, 49, 0, 
	50, 0, 51, 0, 52, 0, 53, 0, 
	54, 0, 55, 0, 56, 0, 58, 59, 
	57, 61, 62, 60, 0, 0, 0, 0, 
	63, 64, 65, 64, 64, 67, 66, 63, 
	2, 68, 7, 68, 0, 69, 0, 70, 
	0, 71, 0, 72, 0, 73, 0, 74, 
	0, 75, 0, 76, 0, 77, 0, 78, 
	0, 79, 0, 80, 0, 81, 0, 82, 
	0, 83, 0, 85, 84, 87, 86, 87, 
	88, 89, 90, 91, 89, 92, 93, 94, 
	95, 96, 97, 98, 99, 88, 86, 87, 
	100, 86, 87, 101, 86, 87, 102, 86, 
	87, 103, 86, 87, 104, 86, 87, 105, 
	86, 87, 106, 86, 87, 107, 86, 87, 
	108, 86, 87, 109, 86, 87, 110, 86, 
	87, 111, 86, 87, 112, 86, 87, 113, 
	86, 87, 114, 86, 116, 115, 117, 118, 
	119, 120, 121, 122, 123, 124, 125, 126, 
	127, 128, 129, 130, 115, 0, 131, 0, 
	132, 0, 133, 0, 134, 0, 135, 0, 
	136, 0, 137, 0, 138, 0, 139, 0, 
	140, 0, 141, 0, 142, 0, 143, 0, 
	144, 0, 145, 0, 146, 0, 147, 0, 
	148, 0, 149, 0, 150, 0, 151, 0, 
	152, 0, 153, 0, 154, 0, 155, 0, 
	156, 0, 157, 0, 158, 0, 159, 0, 
	160, 0, 161, 0, 162, 0, 163, 0, 
	164, 0, 165, 0, 166, 0, 167, 0, 
	168, 0, 169, 0, 170, 0, 171, 0, 
	172, 0, 174, 173, 176, 175, 176, 177, 
	178, 179, 180, 178, 181, 182, 183, 184, 
	185, 186, 187, 177, 175, 176, 188, 175, 
	176, 189, 175, 176, 190, 175, 176, 191, 
	175, 176, 192, 175, 176, 193, 175, 176, 
	194, 175, 176, 195, 175, 176, 196, 175, 
	176, 197, 175, 176, 198, 175, 176, 199, 
	175, 176, 200, 175, 176, 201, 175, 176, 
	202, 175, 176, 203, 175, 176, 204, 175, 
	176, 205, 175, 176, 206, 175, 176, 207, 
	175, 176, 208, 175, 176, 209, 175, 176, 
	210, 175, 176, 211, 175, 176, 212, 175, 
	176, 213, 175, 176, 214, 175, 176, 215, 
	175, 176, 216, 175, 176, 202, 175, 176, 
	217, 175, 176, 218, 175, 176, 219, 175, 
	176, 220, 175, 176, 221, 175, 176, 222, 
	175, 176, 223, 175, 176, 224, 175, 176, 
	225, 175, 176, 226, 175, 176, 227, 175, 
	176, 228, 175, 176, 229, 175, 176, 230, 
	175, 176, 231, 175, 176, 232, 175, 176, 
	233, 175, 176, 234, 175, 176, 235, 175, 
	176, 236, 175, 176, 237, 175, 176, 238, 
	175, 176, 239, 175, 176, 240, 175, 176, 
	241, 175, 176, 242, 175, 176, 243, 175, 
	176, 244, 175, 176, 245, 175, 176, 246, 
	175, 176, 247, 175, 176, 248, 175, 176, 
	249, 175, 176, 250, 175, 176, 251, 175, 
	176, 252, 175, 176, 253, 175, 176, 254, 
	175, 176, 255, 175, 176, 256, 175, 176, 
	257, 175, 176, 258, 175, 176, 259, 175, 
	176, 260, 175, 176, 261, 175, 176, 262, 
	175, 176, 263, 175, 176, 264, 175, 176, 
	265, 175, 176, 266, 175, 176, 267, 175, 
	176, 268, 175, 176, 269, 175, 176, 249, 
	175, 176, 270, 175, 176, 271, 175, 176, 
	272, 175, 176, 273, 175, 176, 274, 175, 
	176, 275, 175, 176, 276, 175, 176, 277, 
	175, 176, 278, 175, 176, 216, 175, 176, 
	279, 175, 176, 280, 175, 176, 281, 175, 
	176, 282, 175, 176, 283, 175, 176, 284, 
	175, 176, 285, 175, 176, 286, 175, 176, 
	287, 175, 176, 288, 175, 176, 289, 175, 
	176, 290, 175, 176, 291, 175, 176, 215, 
	175, 176, 292, 175, 176, 293, 175, 176, 
	294, 175, 176, 295, 175, 176, 296, 175, 
	176, 297, 175, 176, 298, 175, 176, 249, 
	175, 176, 299, 300, 175, 176, 301, 175, 
	176, 302, 175, 176, 303, 175, 176, 249, 
	175, 176, 304, 175, 176, 305, 175, 176, 
	306, 175, 176, 307, 175, 176, 308, 175, 
	176, 249, 175, 309, 0, 310, 0, 311, 
	0, 312, 0, 313, 0, 314, 0, 315, 
	0, 316, 0, 317, 0, 318, 0, 319, 
	0, 320, 0, 321, 0, 322, 0, 323, 
	0, 324, 0, 325, 0, 326, 0, 327, 
	0, 328, 0, 163, 0, 329, 0, 330, 
	0, 331, 0, 332, 0, 333, 0, 334, 
	0, 335, 0, 336, 0, 337, 0, 338, 
	0, 339, 0, 341, 340, 343, 342, 343, 
	344, 345, 346, 345, 347, 348, 349, 350, 
	351, 344, 342, 343, 352, 342, 343, 353, 
	342, 343, 354, 342, 343, 355, 342, 343, 
	356, 342, 343, 357, 342, 343, 358, 342, 
	343, 359, 342, 343, 360, 342, 343, 361, 
	342, 343, 362, 342, 343, 363, 342, 343, 
	364, 342, 343, 365, 342, 343, 366, 342, 
	343, 367, 342, 343, 368, 342, 343, 369, 
	342, 343, 370, 342, 343, 371, 342, 343, 
	372, 342, 343, 373, 342, 343, 374, 342, 
	343, 375, 342, 343, 376, 342, 343, 377, 
	342, 343, 378, 342, 343, 379, 342, 343, 
	380, 342, 343, 381, 342, 343, 382, 342, 
	343, 383, 342, 343, 384, 342, 343, 385, 
	342, 343, 386, 342, 343, 387, 342, 343, 
	379, 342, 343, 388, 342, 343, 389, 342, 
	343, 390, 342, 343, 391, 342, 343, 392, 
	342, 343, 393, 342, 343, 394, 342, 343, 
	395, 342, 343, 396, 342, 343, 379, 342, 
	343, 397, 342, 343, 398, 342, 343, 399, 
	342, 343, 400, 342, 343, 401, 342, 343, 
	402, 342, 343, 403, 342, 343, 404, 342, 
	343, 405, 342, 343, 406, 342, 343, 407, 
	342, 343, 408, 342, 343, 409, 342, 343, 
	378, 342, 343, 410, 342, 343, 411, 342, 
	343, 412, 342, 343, 413, 342, 343, 414, 
	342, 343, 415, 342, 343, 416, 342, 343, 
	417, 342, 343, 418, 342, 343, 419, 342, 
	343, 379, 342, 420, 0, 421, 0, 422, 
	0, 423, 0, 424, 0, 425, 0, 426, 
	0, 427, 0, 428, 0, 429, 0, 430, 
	0, 431, 0, 432, 0, 433, 0, 434, 
	0, 435, 0, 437, 436, 439, 438, 439, 
	440, 441, 442, 443, 441, 444, 445, 446, 
	447, 448, 449, 440, 438, 439, 450, 438, 
	439, 451, 438, 439, 452, 438, 439, 453, 
	438, 439, 454, 438, 439, 455, 438, 439, 
	456, 438, 439, 457, 438, 439, 458, 438, 
	439, 459, 438, 439, 460, 438, 439, 461, 
	438, 439, 462, 438, 439, 463, 438, 439, 
	464, 438, 439, 465, 438, 439, 466, 438, 
	439, 467, 438, 439, 468, 438, 439, 469, 
	438, 439, 470, 438, 439, 471, 438, 439, 
	472, 438, 439, 473, 438, 439, 474, 438, 
	439, 475, 438, 439, 476, 438, 439, 477, 
	438, 439, 478, 438, 439, 464, 438, 439, 
	479, 438, 439, 480, 438, 439, 481, 438, 
	439, 482, 438, 439, 483, 438, 439, 484, 
	438, 439, 485, 438, 439, 486, 438, 439, 
	487, 438, 439, 488, 438, 439, 489, 438, 
	439, 490, 438, 439, 491, 438, 439, 492, 
	438, 439, 493, 438, 439, 494, 438, 439, 
	495, 438, 439, 496, 438, 439, 497, 438, 
	439, 498, 438, 439, 499, 438, 439, 500, 
	438, 439, 501, 438, 439, 502, 438, 439, 
	503, 438, 439, 504, 438, 439, 505, 438, 
	439, 506, 438, 439, 507, 438, 439, 508, 
	438, 439, 509, 438, 439, 510, 438, 439, 
	511, 438, 439, 512, 438, 439, 513, 438, 
	439, 514, 438, 439, 515, 438, 439, 516, 
	438, 439, 517, 438, 439, 518, 438, 439, 
	519, 438, 439, 520, 438, 439, 521, 438, 
	439, 522, 438, 439, 523, 438, 439, 524, 
	438, 439, 525, 438, 439, 526, 438, 439, 
	527, 438, 439, 528, 438, 439, 529, 438, 
	439, 530, 438, 439, 531, 438, 439, 511, 
	438, 439, 532, 438, 439, 533, 438, 439, 
	534, 438, 439, 535, 438, 439, 536, 438, 
	439, 537, 438, 439, 538, 438, 439, 539, 
	438, 439, 540, 438, 439, 478, 438, 439, 
	541, 438, 439, 542, 438, 439, 543, 438, 
	439, 544, 438, 439, 545, 438, 439, 546, 
	438, 439, 547, 438, 439, 511, 438, 439, 
	548, 549, 438, 439, 550, 438, 439, 551, 
	438, 439, 552, 438, 439, 511, 438, 439, 
	553, 438, 439, 554, 438, 439, 555, 438, 
	439, 556, 438, 439, 557, 438, 439, 511, 
	438, 558, 0, 559, 0, 560, 0, 561, 
	0, 562, 0, 563, 0, 564, 0, 163, 
	0, 565, 566, 567, 0, 568, 0, 569, 
	0, 570, 0, 163, 0, 571, 0, 572, 
	0, 573, 0, 574, 0, 575, 0, 163, 
	0, 576, 0, 577, 0, 578, 0, 579, 
	0, 580, 0, 581, 0, 582, 0, 583, 
	0, 584, 0, 585, 0, 586, 0, 588, 
	587, 590, 589, 590, 591, 592, 593, 592, 
	591, 589, 590, 594, 589, 590, 595, 589, 
	590, 596, 589, 590, 597, 589, 590, 598, 
	589, 590, 599, 589, 590, 600, 589, 590, 
	601, 589, 590, 602, 589, 590, 603, 589, 
	590, 604, 589, 605, 606, 605, 0, 609, 
	608, 610, 611, 608, 607, 0, 613, 614, 
	612, 0, 613, 612, 609, 615, 613, 614, 
	615, 612, 609, 616, 617, 618, 619, 620, 
	621, 622, 623, 624, 625, 626, 627, 628, 
	629, 630, 616, 0, 87, 631, 86, 87, 
	632, 86, 87, 633, 86, 87, 634, 86, 
	87, 635, 86, 87, 636, 86, 87, 637, 
	86, 87, 638, 86, 87, 639, 86, 87, 
	640, 86, 87, 641, 86, 87, 642, 86, 
	87, 643, 86, 87, 644, 86, 87, 114, 
	86, 87, 645, 86, 87, 646, 86, 87, 
	647, 86, 87, 648, 86, 87, 649, 86, 
	87, 650, 86, 87, 651, 86, 87, 652, 
	86, 87, 653, 86, 87, 654, 86, 87, 
	655, 86, 87, 656, 86, 87, 657, 86, 
	87, 658, 86, 87, 659, 86, 87, 660, 
	86, 87, 661, 86, 87, 662, 86, 87, 
	663, 86, 87, 664, 86, 87, 665, 86, 
	87, 666, 86, 87, 667, 86, 87, 668, 
	86, 87, 669, 86, 87, 670, 86, 87, 
	671, 86, 87, 672, 86, 87, 673, 86, 
	87, 674, 86, 87, 675, 86, 87, 676, 
	86, 87, 677, 86, 87, 678, 86, 87, 
	679, 86, 87, 680, 86, 87, 681, 86, 
	87, 682, 86, 87, 683, 86, 87, 684, 
	86, 87, 644, 86, 87, 685, 86, 87, 
	686, 86, 87, 687, 86, 87, 688, 86, 
	87, 689, 86, 87, 690, 86, 87, 691, 
	86, 87, 692, 86, 87, 693, 86, 87, 
	694, 86, 87, 695, 86, 87, 696, 86, 
	87, 697, 86, 87, 698, 86, 87, 699, 
	86, 87, 700, 86, 87, 701, 86, 87, 
	702, 86, 87, 703, 86, 87, 704, 86, 
	87, 677, 86, 87, 705, 86, 87, 706, 
	86, 87, 707, 86, 87, 708, 86, 87, 
	709, 86, 87, 710, 86, 87, 711, 86, 
	87, 712, 86, 87, 713, 86, 87, 644, 
	86, 87, 714, 86, 87, 715, 86, 87, 
	716, 86, 87, 717, 86, 87, 718, 86, 
	87, 719, 86, 87, 720, 86, 87, 721, 
	86, 87, 722, 86, 87, 723, 86, 87, 
	724, 86, 87, 725, 86, 87, 726, 86, 
	87, 643, 86, 87, 727, 86, 87, 728, 
	86, 87, 729, 86, 87, 730, 86, 87, 
	731, 86, 87, 732, 86, 87, 733, 86, 
	87, 677, 86, 87, 734, 735, 86, 87, 
	736, 86, 87, 737, 86, 87, 738, 86, 
	87, 677, 86, 87, 739, 86, 87, 740, 
	86, 87, 741, 86, 87, 742, 86, 87, 
	743, 86, 87, 677, 86, 744, 0, 1, 
	0, 745, 0
];

var _lexer_trans_targs = [
	0, 2, 2, 3, 13, 15, 29, 32, 
	35, 69, 102, 241, 262, 348, 480, 488, 
	524, 650, 4, 5, 6, 7, 6, 6, 
	7, 6, 8, 8, 8, 9, 8, 8, 
	8, 9, 10, 11, 12, 2, 12, 13, 
	2, 14, 16, 17, 18, 19, 20, 21, 
	22, 23, 24, 25, 26, 27, 28, 652, 
	30, 31, 2, 14, 31, 2, 14, 33, 
	34, 2, 33, 32, 34, 36, 37, 38, 
	39, 40, 41, 42, 43, 44, 45, 46, 
	47, 48, 49, 50, 51, 52, 51, 52, 
	52, 2, 53, 67, 530, 545, 578, 586, 
	607, 617, 631, 639, 54, 55, 56, 57, 
	58, 59, 60, 61, 62, 63, 64, 65, 
	66, 2, 68, 2, 2, 3, 13, 15, 
	29, 32, 35, 69, 102, 241, 262, 348, 
	480, 488, 524, 70, 71, 72, 73, 74, 
	75, 76, 77, 78, 79, 80, 81, 82, 
	83, 84, 85, 86, 87, 88, 89, 90, 
	91, 92, 93, 94, 95, 96, 97, 98, 
	99, 100, 101, 29, 103, 104, 105, 106, 
	107, 108, 109, 110, 111, 112, 113, 112, 
	113, 113, 2, 114, 128, 129, 144, 177, 
	198, 208, 222, 230, 115, 116, 117, 118, 
	119, 120, 121, 122, 123, 124, 125, 126, 
	127, 2, 68, 130, 131, 132, 133, 134, 
	135, 136, 137, 138, 139, 140, 141, 142, 
	143, 145, 146, 147, 148, 149, 150, 151, 
	152, 153, 154, 155, 156, 157, 158, 159, 
	160, 161, 162, 163, 164, 165, 166, 167, 
	168, 169, 170, 171, 172, 173, 174, 175, 
	176, 128, 178, 179, 180, 181, 182, 183, 
	184, 185, 186, 187, 188, 189, 190, 191, 
	192, 193, 194, 195, 196, 197, 199, 200, 
	201, 202, 203, 204, 205, 206, 207, 209, 
	210, 211, 212, 213, 214, 215, 216, 217, 
	218, 219, 220, 221, 223, 224, 225, 226, 
	227, 228, 229, 231, 235, 232, 233, 234, 
	236, 237, 238, 239, 240, 242, 243, 244, 
	245, 246, 247, 248, 249, 250, 251, 252, 
	253, 254, 255, 256, 257, 258, 259, 260, 
	261, 263, 264, 265, 266, 267, 268, 269, 
	270, 271, 272, 273, 274, 275, 274, 275, 
	275, 2, 276, 290, 305, 313, 323, 337, 
	277, 278, 279, 280, 281, 282, 283, 284, 
	285, 286, 287, 288, 289, 2, 291, 292, 
	293, 294, 295, 296, 297, 298, 299, 300, 
	301, 302, 303, 304, 68, 306, 307, 308, 
	309, 310, 311, 312, 314, 315, 316, 317, 
	318, 319, 320, 321, 322, 324, 325, 326, 
	327, 328, 329, 330, 331, 332, 333, 334, 
	335, 336, 338, 339, 340, 341, 342, 343, 
	344, 345, 346, 347, 349, 350, 351, 352, 
	353, 354, 355, 356, 357, 358, 359, 360, 
	361, 362, 363, 364, 365, 366, 365, 366, 
	366, 2, 367, 381, 382, 397, 430, 451, 
	461, 469, 368, 369, 370, 371, 372, 373, 
	374, 375, 376, 377, 378, 379, 380, 2, 
	68, 383, 384, 385, 386, 387, 388, 389, 
	390, 391, 392, 393, 394, 395, 396, 398, 
	399, 400, 401, 402, 403, 404, 405, 406, 
	407, 408, 409, 410, 411, 412, 413, 414, 
	415, 416, 417, 418, 419, 420, 421, 422, 
	423, 424, 425, 426, 427, 428, 429, 381, 
	431, 432, 433, 434, 435, 436, 437, 438, 
	439, 440, 441, 442, 443, 444, 445, 446, 
	447, 448, 449, 450, 452, 453, 454, 455, 
	456, 457, 458, 459, 460, 462, 463, 464, 
	465, 466, 467, 468, 470, 474, 471, 472, 
	473, 475, 476, 477, 478, 479, 481, 482, 
	483, 484, 485, 486, 487, 489, 493, 499, 
	490, 491, 492, 494, 495, 496, 497, 498, 
	500, 501, 502, 503, 504, 505, 506, 507, 
	508, 509, 510, 511, 512, 511, 512, 512, 
	2, 513, 514, 515, 516, 517, 518, 519, 
	520, 521, 522, 523, 68, 524, 525, 526, 
	528, 529, 527, 525, 526, 527, 525, 528, 
	529, 3, 13, 15, 29, 32, 35, 69, 
	102, 241, 262, 348, 480, 488, 524, 531, 
	532, 533, 534, 535, 536, 537, 538, 539, 
	540, 541, 542, 543, 544, 546, 547, 548, 
	549, 550, 551, 552, 553, 554, 555, 556, 
	557, 558, 559, 560, 561, 562, 563, 564, 
	565, 566, 567, 568, 569, 570, 571, 572, 
	573, 574, 575, 576, 577, 67, 579, 580, 
	581, 582, 583, 584, 585, 587, 588, 589, 
	590, 591, 592, 593, 594, 595, 596, 597, 
	598, 599, 600, 601, 602, 603, 604, 605, 
	606, 608, 609, 610, 611, 612, 613, 614, 
	615, 616, 618, 619, 620, 621, 622, 623, 
	624, 625, 626, 627, 628, 629, 630, 632, 
	633, 634, 635, 636, 637, 638, 640, 644, 
	641, 642, 643, 645, 646, 647, 648, 649, 
	651, 0
];

var _lexer_trans_actions = [
	43, 0, 54, 3, 1, 0, 29, 1, 
	29, 29, 29, 29, 29, 29, 29, 29, 
	35, 0, 0, 0, 7, 139, 48, 0, 
	102, 9, 5, 45, 134, 45, 0, 33, 
	122, 33, 33, 0, 11, 106, 0, 0, 
	114, 25, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 57, 149, 126, 0, 110, 23, 0, 
	27, 118, 27, 51, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 57, 144, 0, 54, 
	0, 75, 33, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 17, 17, 31, 130, 60, 57, 31, 
	63, 57, 63, 63, 63, 63, 63, 63, 
	63, 63, 66, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 57, 144, 0, 
	54, 0, 72, 33, 84, 84, 84, 84, 
	84, 84, 84, 84, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 15, 15, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 57, 144, 0, 54, 
	0, 69, 33, 84, 84, 84, 84, 84, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 13, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 13, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 57, 144, 0, 54, 
	0, 78, 33, 84, 84, 84, 84, 84, 
	84, 84, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 19, 
	19, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 57, 144, 0, 54, 0, 
	81, 84, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 21, 0, 0, 37, 
	37, 54, 37, 87, 0, 0, 39, 0, 
	0, 93, 90, 41, 96, 90, 96, 96, 
	96, 96, 96, 96, 96, 96, 99, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0
];

var _lexer_eof_actions = [
	0, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43
];

var lexer_start = 1;
var lexer_first_final = 652;
var lexer_error = 0;

var lexer_en_main = 1;


/* line 129 "ragel/i18n/en_au.js.rl" */

/* line 130 "ragel/i18n/en_au.js.rl" */

/* line 131 "ragel/i18n/en_au.js.rl" */

/* line 132 "ragel/i18n/en_au.js.rl" */

var Lexer = function(listener) {
  // Check that listener has the required functions
  var events = ['comment', 'tag', 'feature', 'background', 'scenario', 'scenario_outline', 'examples', 'step', 'doc_string', 'row', 'eof'];
  for(var i=0, len=events.length; i<len; i++) {
    var event = events[i];
    if(typeof listener[event] != 'function') {
      throw new Error("Error. No " + event + " function exists on " + JSON.stringify(listener));
    }
  }
  this.listener = listener;
};

Lexer.prototype.scan = function(data) {
  var ending = "\n%_FEATURE_END_%";
  if(typeof data == 'string') {
    data = this.stringToBytes(data + ending);
  } else if(typeof Buffer != 'undefined' && Buffer.isBuffer(data)) {
    // Node.js
    var buf = new Buffer(data.length + ending.length);
    data.copy(buf, 0, 0);
    new Buffer(ending).copy(buf, data.length, 0);
    data = buf;
  }
  var eof = pe = data.length;
  var p = 0;

  this.line_number = 1;
  this.last_newline = 0;
  var signedCharValue=function(v){return v > 127 ? v-256 : v; };

  
/* line 1111 "js/lib/gherkin/lexer/en_au.js" */
{
	  this.cs = lexer_start;
} /* JSCodeGen::writeInit */

/* line 164 "ragel/i18n/en_au.js.rl" */
  
/* line 1118 "js/lib/gherkin/lexer/en_au.js" */
{
	var _klen, _trans, _keys, _ps, _widec, _acts, _nacts;
	var _goto_level, _resume, _eof_trans, _again, _test_eof;
	var _out;
	_klen = _trans = _keys = _acts = _nacts = null;
	_goto_level = 0;
	_resume = 10;
	_eof_trans = 15;
	_again = 20;
	_test_eof = 30;
	_out = 40;
	while (true) {
	_trigger_goto = false;
	if (_goto_level <= 0) {
	if (p == pe) {
		_goto_level = _test_eof;
		continue;
	}
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	}
	if (_goto_level <= _resume) {
	_keys = _lexer_key_offsets[ this.cs];
	_trans = _lexer_index_offsets[ this.cs];
	_klen = _lexer_single_lengths[ this.cs];
	_break_match = false;
	
	do {
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + _klen - 1;

	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + ( (_upper - _lower) >> 1 );

	        if (( signedCharValue(data[p])) < _lexer_trans_keys[_mid]) {
	           _upper = _mid - 1;
	        } else if (( signedCharValue(data[p])) > _lexer_trans_keys[_mid]) {
	           _lower = _mid + 1;
	        } else {
	           _trans += (_mid - _keys);
	           _break_match = true;
	           break;
	        };
	     } /* while */
	     if (_break_match) { break; }
	     _keys += _klen;
	     _trans += _klen;
	  }
	  _klen = _lexer_range_lengths[ this.cs];
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + (_klen << 1) - 2;
	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + (((_upper-_lower) >> 1) & ~1);
	        if (( signedCharValue(data[p])) < _lexer_trans_keys[_mid]) {
	          _upper = _mid - 2;
	         } else if (( signedCharValue(data[p])) > _lexer_trans_keys[_mid+1]) {
	          _lower = _mid + 2;
	        } else {
	          _trans += ((_mid - _keys) >> 1);
	          _break_match = true;
	          break;
	        }
	     } /* while */
	     if (_break_match) { break; }
	     _trans += _klen
	  }
	} while (false);
	_trans = _lexer_indicies[_trans];
	 this.cs = _lexer_trans_targs[_trans];
	if (_lexer_trans_actions[_trans] != 0) {
		_acts = _lexer_trans_actions[_trans];
		_nacts = _lexer_actions[_acts];
		_acts += 1;
		while (_nacts > 0) {
			_nacts -= 1;
			_acts += 1;
			switch (_lexer_actions[_acts - 1]) {
case 0:
/* line 6 "ragel/i18n/en_au.js.rl" */

    this.content_start = p;
    this.current_line = this.line_number;
    this.start_col = p - this.last_newline - (this.keyword+':').length;
  		break;
case 1:
/* line 12 "ragel/i18n/en_au.js.rl" */

    this.current_line = this.line_number;
    this.start_col = p - this.last_newline;
  		break;
case 2:
/* line 17 "ragel/i18n/en_au.js.rl" */

    this.content_start = p;
  		break;
case 3:
/* line 21 "ragel/i18n/en_au.js.rl" */

    this.docstring_content_type_start = p;
  		break;
case 4:
/* line 25 "ragel/i18n/en_au.js.rl" */

    this.docstring_content_type_end = p;
  		break;
case 5:
/* line 29 "ragel/i18n/en_au.js.rl" */

    var con = this.unindent(
      this.start_col, 
      this.bytesToString(data.slice(this.content_start, this.next_keyword_start-1)).replace(/(\r?\n)?([\t ])*$/, '').replace(/\\\"\\\"\\\"/mg, '"""')
    );
    var con_type = this.bytesToString(data.slice(this.docstring_content_type_start, this.docstring_content_type_end)).trim();
    this.listener.doc_string(con_type, con, this.current_line); 
  		break;
case 6:
/* line 38 "ragel/i18n/en_au.js.rl" */

    p = this.store_keyword_content('feature', data, p, eof);
  		break;
case 7:
/* line 42 "ragel/i18n/en_au.js.rl" */

    p = this.store_keyword_content('background', data, p, eof);
  		break;
case 8:
/* line 46 "ragel/i18n/en_au.js.rl" */

    p = this.store_keyword_content('scenario', data, p, eof);
  		break;
case 9:
/* line 50 "ragel/i18n/en_au.js.rl" */

    p = this.store_keyword_content('scenario_outline', data, p, eof);
  		break;
case 10:
/* line 54 "ragel/i18n/en_au.js.rl" */

    p = this.store_keyword_content('examples', data, p, eof);
  		break;
case 11:
/* line 58 "ragel/i18n/en_au.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.step(this.keyword, con, this.current_line);
  		break;
case 12:
/* line 63 "ragel/i18n/en_au.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.comment(con, this.line_number);
    this.keyword_start = null;
  		break;
case 13:
/* line 69 "ragel/i18n/en_au.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.tag(con, this.line_number);
    this.keyword_start = null;
  		break;
case 14:
/* line 75 "ragel/i18n/en_au.js.rl" */

    this.line_number++;
  		break;
case 15:
/* line 79 "ragel/i18n/en_au.js.rl" */

    this.last_newline = p + 1;
  		break;
case 16:
/* line 83 "ragel/i18n/en_au.js.rl" */

    this.keyword_start = this.keyword_start || p;
  		break;
case 17:
/* line 87 "ragel/i18n/en_au.js.rl" */

    this.keyword = this.bytesToString(data.slice(this.keyword_start, p)).replace(/:$/, '');
    this.keyword_start = null;
  		break;
case 18:
/* line 92 "ragel/i18n/en_au.js.rl" */

    this.next_keyword_start = p;
  		break;
case 19:
/* line 96 "ragel/i18n/en_au.js.rl" */

    p = p - 1;
    current_row = [];
    this.current_line = this.line_number;
  		break;
case 20:
/* line 102 "ragel/i18n/en_au.js.rl" */

    this.content_start = p;
  		break;
case 21:
/* line 106 "ragel/i18n/en_au.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    current_row.push(con.replace(/\\\|/, "|").replace(/\\n/, "\n").replace(/\\\\/, "\\"));
  		break;
case 22:
/* line 111 "ragel/i18n/en_au.js.rl" */

    this.listener.row(current_row, this.current_line);
  		break;
case 23:
/* line 115 "ragel/i18n/en_au.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw new Error("Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.");
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 1345 "js/lib/gherkin/lexer/en_au.js" */
			} /* action switch */
		}
	}
	if (_trigger_goto) {
		continue;
	}
	}
	if (_goto_level <= _again) {
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	p += 1;
	if (p != pe) {
		_goto_level = _resume;
		continue;
	}
	}
	if (_goto_level <= _test_eof) {
	if (p == eof) {
	__acts = _lexer_eof_actions[ this.cs];
	__nacts =  _lexer_actions[__acts];
	__acts += 1;
	while (__nacts > 0) {
		__nacts -= 1;
		__acts += 1;
		switch (_lexer_actions[__acts - 1]) {
case 23:
/* line 115 "ragel/i18n/en_au.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw new Error("Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.");
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 1384 "js/lib/gherkin/lexer/en_au.js" */
		} /* eof action switch */
	}
	if (_trigger_goto) {
		continue;
	}
}
	}
	if (_goto_level <= _out) {
		break;
	}
	}
	}

/* line 165 "ragel/i18n/en_au.js.rl" */
};


/*
 * Decode utf-8 byte sequence to string.
 */
var decodeUtf8 = function(bytes) {
  var result = "";
  var i = 0;
  var wc;
  var c;

  while (i < bytes.length) {
    /* parse as UTF-8 lead byte */
    wc = bytes[i++];
    if (wc < 0x80) {
      count = 0;
    } else if (wc < 0xC2 || wc >= 0xF8) {
      throw new Error("input is not a valid UTF-8 lead octet");
    } else if (wc < 0xE0) {
      count = 1;
      wc = (wc & 0x1F) << 6;
    } else if (wc < 0xF0) {
      count = 2;
      wc = (wc & 0x0F) << 12;
    } else /* wc < 0xF8 */ {
      count = 3;
      wc = (wc & 0x07) << 18;
    }

    /* parse trail bytes, if any */
    while (count) {
      if (!(i < bytes.length)) {
        throw new Error("short read");
      }
      if ((c = bytes[i++] ^ 0x80) > 0x3F) {
        throw new Error("input is not a valid UTF-8 trail octet");
      }
      wc |= c << (6 * --count);
      if (wc < (1 << (5 * count + 6))) {
        throw new Error("invalid non-minimal encoded input");
      }
    }

    /* handle conversion to UTF-16 if needed */
    if (wc > 0xFFFF) {
      wc -= 0x10000;
      result += String.fromCharCode(0xD800 + (wc >> 10));
      wc = 0xDC00 + (wc & 0x3FF);
    }
    result += String.fromCharCode(wc);
  }

  return result;
};

/*
 * Encode string to an array of bytes using utf8 encoding.
 *
 * Javascript internally stores character data as utf16 (like java).
 * String.charCodeAt() does *not* produce unicode points, but simply
 * reflects this internal representation. Thus, it is necessary
 * to first decode the utf-16 representation before encoding to
 * utf-8.
 */
var encodeUtf8 = function(string) {
  var bytes = [];
  var i = 0;
  var j = 0;
  var wc;

  while (i < string.length) {
    wc = string.charCodeAt(i++);
    if (wc >= 0xD800 && wc <= 0xDBFF && i < string.length && string.charCodeAt(i) >= 0xDC00 && string.charCodeAt(i) <= 0xDFFF) {
      /* decode UTF-16 */
      wc = 0x10000 + ((wc & 0x3FF) << 10) + (string.charCodeAt(i++) & 0x3FF);
    }

    /* emit lead byte */
    if (wc < 0x80) {
      bytes[j++] = wc;
      count = 0;
    } else if (wc < 0x800) {
      bytes[j++] = 0xC0 | (wc >> 6);
      count = 1;
    } else if (wc < 0x10000) {
      bytes[j++] = 0xE0 | (wc >> 12);
      count = 2;
    } else {
      /* SMP: 21-bit Unicode */
      bytes[j++] = 0xF0 | (wc >> 18);
      count = 3;
    }

    /* emit trail bytes, if any */
    while (count) {
      bytes[j++] = 0x80 | ((wc >> (6 * --count)) & 0x3F);
    }
  }

  return bytes;

};

Lexer.prototype.bytesToString = function(bytes) {
  if(typeof bytes.write == 'function') {
    // Node.js
    return bytes.toString('utf-8');
  }
  return decodeUtf8(bytes);
};

Lexer.prototype.stringToBytes = function(string) {
  return encodeUtf8(string);
};

Lexer.prototype.unindent = function(startcol, text) {
  startcol = startcol || 0;
  return text.replace(new RegExp('^[\t ]{0,' + startcol + '}', 'gm'), ''); 
};

Lexer.prototype.store_keyword_content = function(event, data, p, eof) {
  var end_point = (!this.next_keyword_start || (p == eof)) ? p : this.next_keyword_start;
  var content = this.unindent(this.start_col + 2, this.bytesToString(data.slice(this.content_start, end_point))).replace(/\s+$/,"");
  var content_lines = content.split("\n")
  var name = content_lines.shift() || "";
  name = name.trim();
  var description = content_lines.join("\n");
  this.listener[event](this.keyword, name, description, this.current_line);
  var nks = this.next_keyword_start;
  this.next_keyword_start = null;
  return nks ? nks - 1 : p;
};

Lexer.prototype.current_line_content = function(data, p) {
  var rest = Array.prototype.slice.call(data,this.last_newline, -1);
  var end = rest.indexOf(10) || -1;
  return this.bytesToString(rest.slice(0, end)).trim();
};

// Node.js export
if(typeof module !== 'undefined') {
  module.exports = Lexer;
}
// Require.js export
if (typeof define !== 'undefined') {
  if(define.amd) {
    define('gherkin/lexer/en_au', [], function() {
      return Lexer;
    });
  } else {
    define('gherkin/lexer/en_au', function(require, exports, module) {
      exports.Lexer = Lexer;
    });
  }
}

})();

}).call(this,require("buffer").Buffer)

},{"buffer":69}],196:[function(require,module,exports){
(function (Buffer){

/* line 1 "ragel/i18n/en_lol.js.rl" */
;(function() {


/* line 126 "ragel/i18n/en_lol.js.rl" */



/* line 11 "js/lib/gherkin/lexer/en_lol.js" */
var _lexer_actions = [
	0, 1, 0, 1, 1, 1, 2, 1, 
	3, 1, 4, 1, 5, 1, 6, 1, 
	7, 1, 8, 1, 9, 1, 10, 1, 
	11, 1, 12, 1, 13, 1, 16, 1, 
	17, 1, 18, 1, 19, 1, 20, 1, 
	21, 1, 22, 1, 23, 2, 2, 18, 
	2, 3, 4, 2, 13, 0, 2, 14, 
	15, 2, 17, 0, 2, 17, 1, 2, 
	17, 16, 2, 17, 19, 2, 18, 6, 
	2, 18, 7, 2, 18, 8, 2, 18, 
	9, 2, 18, 10, 2, 18, 16, 2, 
	20, 21, 2, 22, 0, 2, 22, 1, 
	2, 22, 16, 2, 22, 19, 3, 4, 
	14, 15, 3, 5, 14, 15, 3, 11, 
	14, 15, 3, 12, 14, 15, 3, 13, 
	14, 15, 3, 14, 15, 18, 3, 17, 
	0, 11, 3, 17, 14, 15, 4, 2, 
	14, 15, 18, 4, 3, 4, 14, 15, 
	4, 17, 0, 14, 15, 5, 17, 0, 
	11, 14, 15
];

var _lexer_key_offsets = [
	0, 0, 19, 37, 38, 39, 41, 43, 
	48, 53, 58, 63, 67, 71, 73, 74, 
	75, 76, 77, 78, 79, 80, 81, 82, 
	83, 84, 85, 86, 87, 88, 89, 91, 
	93, 98, 105, 110, 111, 113, 114, 115, 
	116, 131, 133, 135, 137, 139, 141, 143, 
	145, 147, 149, 151, 153, 155, 157, 159, 
	161, 179, 180, 181, 182, 183, 184, 185, 
	186, 187, 188, 189, 196, 198, 200, 202, 
	204, 206, 208, 209, 210, 211, 212, 213, 
	214, 215, 216, 217, 218, 219, 220, 221, 
	223, 224, 225, 226, 227, 228, 229, 230, 
	231, 246, 248, 250, 252, 254, 256, 258, 
	260, 262, 264, 266, 268, 270, 272, 274, 
	276, 278, 280, 282, 284, 286, 288, 290, 
	292, 294, 296, 298, 300, 302, 304, 306, 
	308, 310, 312, 314, 316, 318, 320, 322, 
	323, 324, 339, 341, 343, 345, 347, 349, 
	351, 353, 355, 357, 359, 361, 363, 365, 
	367, 369, 371, 374, 376, 378, 380, 382, 
	384, 386, 388, 390, 392, 394, 396, 398, 
	400, 402, 404, 406, 409, 411, 413, 415, 
	417, 419, 421, 423, 425, 427, 429, 430, 
	431, 432, 433, 434, 435, 436, 437, 448, 
	450, 452, 454, 456, 458, 460, 462, 464, 
	466, 468, 470, 472, 474, 476, 478, 480, 
	482, 484, 486, 488, 490, 492, 494, 496, 
	498, 500, 502, 505, 507, 509, 511, 513, 
	515, 517, 519, 521, 523, 525, 529, 535, 
	538, 540, 546, 564, 566, 568, 570, 572, 
	574, 576, 578, 580, 582, 584, 586, 588, 
	590, 592, 594, 596, 598, 601, 603, 605, 
	607, 609, 611, 613, 615, 617, 619, 621, 
	623, 624, 625, 626
];

var _lexer_trans_keys = [
	10, 32, 34, 35, 37, 42, 64, 65, 
	66, 68, 69, 73, 77, 79, 87, 124, 
	239, 9, 13, 10, 32, 34, 35, 37, 
	42, 64, 65, 66, 68, 69, 73, 77, 
	79, 87, 124, 9, 13, 34, 34, 10, 
	13, 10, 13, 10, 32, 34, 9, 13, 
	10, 32, 34, 9, 13, 10, 32, 34, 
	9, 13, 10, 32, 34, 9, 13, 10, 
	32, 9, 13, 10, 32, 9, 13, 10, 
	13, 10, 95, 70, 69, 65, 84, 85, 
	82, 69, 95, 69, 78, 68, 95, 37, 
	32, 10, 13, 10, 13, 13, 32, 64, 
	9, 10, 9, 10, 13, 32, 64, 11, 
	12, 10, 32, 64, 9, 13, 78, 52, 
	85, 58, 10, 10, 10, 32, 35, 37, 
	42, 64, 65, 66, 68, 73, 77, 79, 
	87, 9, 13, 10, 95, 10, 70, 10, 
	69, 10, 65, 10, 84, 10, 85, 10, 
	82, 10, 69, 10, 95, 10, 69, 10, 
	78, 10, 68, 10, 95, 10, 37, 10, 
	32, 10, 32, 34, 35, 37, 42, 64, 
	65, 66, 68, 69, 73, 77, 79, 87, 
	124, 9, 13, 69, 88, 65, 77, 80, 
	76, 90, 58, 10, 10, 10, 32, 35, 
	79, 124, 9, 13, 10, 72, 10, 32, 
	10, 72, 10, 65, 10, 73, 10, 58, 
	32, 67, 65, 78, 32, 72, 65, 90, 
	73, 83, 72, 85, 78, 32, 58, 83, 
	82, 83, 76, 89, 58, 10, 10, 10, 
	32, 35, 37, 42, 64, 65, 66, 68, 
	73, 77, 79, 87, 9, 13, 10, 95, 
	10, 70, 10, 69, 10, 65, 10, 84, 
	10, 85, 10, 82, 10, 69, 10, 95, 
	10, 69, 10, 78, 10, 68, 10, 95, 
	10, 37, 10, 32, 10, 78, 10, 85, 
	10, 84, 10, 69, 10, 32, 10, 67, 
	10, 65, 10, 78, 10, 32, 10, 72, 
	10, 65, 10, 90, 10, 73, 10, 83, 
	10, 72, 10, 85, 10, 78, 10, 58, 
	10, 72, 10, 32, 10, 72, 10, 65, 
	10, 73, 10, 10, 10, 32, 35, 37, 
	42, 64, 65, 66, 68, 73, 77, 79, 
	87, 9, 13, 10, 95, 10, 70, 10, 
	69, 10, 65, 10, 84, 10, 85, 10, 
	82, 10, 69, 10, 95, 10, 69, 10, 
	78, 10, 68, 10, 95, 10, 37, 10, 
	32, 10, 78, 10, 52, 85, 10, 58, 
	10, 84, 10, 69, 10, 32, 10, 67, 
	10, 65, 10, 78, 10, 32, 10, 72, 
	10, 65, 10, 90, 10, 73, 10, 83, 
	10, 72, 10, 85, 10, 78, 10, 32, 
	58, 10, 83, 10, 82, 10, 83, 10, 
	76, 10, 89, 10, 72, 10, 32, 10, 
	72, 10, 65, 10, 73, 72, 32, 72, 
	65, 73, 58, 10, 10, 10, 32, 35, 
	37, 64, 66, 69, 77, 79, 9, 13, 
	10, 95, 10, 70, 10, 69, 10, 65, 
	10, 84, 10, 85, 10, 82, 10, 69, 
	10, 95, 10, 69, 10, 78, 10, 68, 
	10, 95, 10, 37, 10, 52, 10, 58, 
	10, 88, 10, 65, 10, 77, 10, 80, 
	10, 76, 10, 90, 10, 73, 10, 83, 
	10, 72, 10, 85, 10, 78, 10, 32, 
	58, 10, 83, 10, 82, 10, 83, 10, 
	76, 10, 89, 10, 72, 10, 32, 10, 
	72, 10, 65, 10, 73, 32, 124, 9, 
	13, 10, 32, 92, 124, 9, 13, 10, 
	92, 124, 10, 92, 10, 32, 92, 124, 
	9, 13, 10, 32, 34, 35, 37, 42, 
	64, 65, 66, 68, 69, 73, 77, 79, 
	87, 124, 9, 13, 10, 78, 10, 85, 
	10, 84, 10, 69, 10, 32, 10, 67, 
	10, 65, 10, 78, 10, 32, 10, 72, 
	10, 65, 10, 90, 10, 73, 10, 83, 
	10, 72, 10, 85, 10, 78, 10, 32, 
	58, 10, 83, 10, 82, 10, 83, 10, 
	76, 10, 89, 10, 58, 10, 72, 10, 
	32, 10, 72, 10, 65, 10, 73, 84, 
	187, 191, 0
];

var _lexer_single_lengths = [
	0, 17, 16, 1, 1, 2, 2, 3, 
	3, 3, 3, 2, 2, 2, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 2, 2, 
	3, 5, 3, 1, 2, 1, 1, 1, 
	13, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	16, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 5, 2, 2, 2, 2, 
	2, 2, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 2, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	13, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 1, 
	1, 13, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 3, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 3, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 1, 1, 
	1, 1, 1, 1, 1, 1, 9, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 3, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 4, 3, 
	2, 4, 16, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 3, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	1, 1, 1, 0
];

var _lexer_range_lengths = [
	0, 1, 1, 0, 0, 0, 0, 1, 
	1, 1, 1, 1, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 1, 1, 0, 0, 0, 0, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 1, 0, 
	0, 1, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0
];

var _lexer_index_offsets = [
	0, 0, 19, 37, 39, 41, 44, 47, 
	52, 57, 62, 67, 71, 75, 78, 80, 
	82, 84, 86, 88, 90, 92, 94, 96, 
	98, 100, 102, 104, 106, 108, 110, 113, 
	116, 121, 128, 133, 135, 138, 140, 142, 
	144, 159, 162, 165, 168, 171, 174, 177, 
	180, 183, 186, 189, 192, 195, 198, 201, 
	204, 222, 224, 226, 228, 230, 232, 234, 
	236, 238, 240, 242, 249, 252, 255, 258, 
	261, 264, 267, 269, 271, 273, 275, 277, 
	279, 281, 283, 285, 287, 289, 291, 293, 
	296, 298, 300, 302, 304, 306, 308, 310, 
	312, 327, 330, 333, 336, 339, 342, 345, 
	348, 351, 354, 357, 360, 363, 366, 369, 
	372, 375, 378, 381, 384, 387, 390, 393, 
	396, 399, 402, 405, 408, 411, 414, 417, 
	420, 423, 426, 429, 432, 435, 438, 441, 
	443, 445, 460, 463, 466, 469, 472, 475, 
	478, 481, 484, 487, 490, 493, 496, 499, 
	502, 505, 508, 512, 515, 518, 521, 524, 
	527, 530, 533, 536, 539, 542, 545, 548, 
	551, 554, 557, 560, 564, 567, 570, 573, 
	576, 579, 582, 585, 588, 591, 594, 596, 
	598, 600, 602, 604, 606, 608, 610, 621, 
	624, 627, 630, 633, 636, 639, 642, 645, 
	648, 651, 654, 657, 660, 663, 666, 669, 
	672, 675, 678, 681, 684, 687, 690, 693, 
	696, 699, 702, 706, 709, 712, 715, 718, 
	721, 724, 727, 730, 733, 736, 740, 746, 
	750, 753, 759, 777, 780, 783, 786, 789, 
	792, 795, 798, 801, 804, 807, 810, 813, 
	816, 819, 822, 825, 828, 832, 835, 838, 
	841, 844, 847, 850, 853, 856, 859, 862, 
	865, 867, 869, 871
];

var _lexer_indicies = [
	2, 1, 3, 4, 5, 6, 7, 8, 
	9, 10, 11, 12, 13, 14, 10, 15, 
	16, 1, 0, 2, 1, 3, 4, 5, 
	6, 7, 8, 9, 10, 11, 12, 13, 
	14, 10, 15, 1, 0, 17, 0, 18, 
	0, 20, 21, 19, 23, 24, 22, 27, 
	26, 28, 26, 25, 31, 30, 32, 30, 
	29, 31, 30, 33, 30, 29, 31, 30, 
	34, 30, 29, 36, 35, 35, 0, 2, 
	37, 37, 0, 39, 40, 38, 2, 0, 
	41, 0, 42, 0, 43, 0, 44, 0, 
	45, 0, 46, 0, 47, 0, 48, 0, 
	49, 0, 50, 0, 51, 0, 52, 0, 
	53, 0, 54, 0, 55, 0, 57, 58, 
	56, 60, 61, 59, 0, 0, 0, 0, 
	62, 63, 64, 63, 63, 66, 65, 62, 
	2, 67, 7, 67, 0, 68, 0, 69, 
	70, 0, 71, 0, 73, 72, 75, 74, 
	75, 76, 77, 78, 79, 77, 80, 81, 
	82, 83, 84, 85, 82, 76, 74, 75, 
	86, 74, 75, 87, 74, 75, 88, 74, 
	75, 89, 74, 75, 90, 74, 75, 91, 
	74, 75, 92, 74, 75, 93, 74, 75, 
	94, 74, 75, 95, 74, 75, 96, 74, 
	75, 97, 74, 75, 98, 74, 75, 99, 
	74, 75, 100, 74, 102, 101, 103, 104, 
	105, 106, 107, 108, 109, 110, 111, 112, 
	113, 114, 110, 115, 101, 0, 116, 0, 
	117, 0, 118, 0, 119, 0, 120, 0, 
	121, 0, 122, 0, 123, 0, 125, 124, 
	127, 126, 127, 128, 129, 130, 129, 128, 
	126, 127, 131, 126, 127, 132, 126, 127, 
	133, 126, 127, 134, 126, 127, 135, 126, 
	127, 136, 126, 137, 0, 138, 0, 139, 
	0, 140, 0, 141, 0, 142, 0, 143, 
	0, 68, 0, 144, 0, 145, 0, 146, 
	0, 147, 0, 148, 0, 149, 150, 0, 
	151, 0, 152, 0, 153, 0, 154, 0, 
	155, 0, 156, 0, 158, 157, 160, 159, 
	160, 161, 162, 163, 164, 162, 165, 166, 
	167, 168, 169, 170, 167, 161, 159, 160, 
	171, 159, 160, 172, 159, 160, 173, 159, 
	160, 174, 159, 160, 175, 159, 160, 176, 
	159, 160, 177, 159, 160, 178, 159, 160, 
	179, 159, 160, 180, 159, 160, 181, 159, 
	160, 182, 159, 160, 183, 159, 160, 184, 
	159, 160, 185, 159, 160, 186, 159, 160, 
	187, 159, 160, 186, 159, 160, 188, 159, 
	160, 189, 159, 160, 190, 159, 160, 191, 
	159, 160, 192, 159, 160, 193, 159, 160, 
	194, 159, 160, 195, 159, 160, 186, 159, 
	160, 196, 159, 160, 197, 159, 160, 198, 
	159, 160, 199, 159, 160, 200, 159, 160, 
	185, 159, 160, 201, 159, 160, 202, 159, 
	160, 203, 159, 160, 204, 159, 160, 200, 
	159, 206, 205, 208, 207, 208, 209, 210, 
	211, 212, 210, 213, 214, 215, 216, 217, 
	218, 215, 209, 207, 208, 219, 207, 208, 
	220, 207, 208, 221, 207, 208, 222, 207, 
	208, 223, 207, 208, 224, 207, 208, 225, 
	207, 208, 226, 207, 208, 227, 207, 208, 
	228, 207, 208, 229, 207, 208, 230, 207, 
	208, 231, 207, 208, 232, 207, 208, 233, 
	207, 208, 234, 207, 208, 235, 236, 207, 
	208, 233, 207, 208, 234, 207, 208, 237, 
	207, 208, 238, 207, 208, 239, 207, 208, 
	240, 207, 208, 241, 207, 208, 242, 207, 
	208, 243, 207, 208, 244, 207, 208, 234, 
	207, 208, 245, 207, 208, 246, 207, 208, 
	247, 207, 208, 248, 207, 208, 249, 207, 
	208, 250, 233, 207, 208, 251, 207, 208, 
	252, 207, 208, 253, 207, 208, 254, 207, 
	208, 235, 207, 208, 255, 207, 208, 256, 
	207, 208, 257, 207, 208, 258, 207, 208, 
	235, 207, 259, 0, 260, 0, 261, 0, 
	262, 0, 263, 0, 264, 0, 266, 265, 
	268, 267, 268, 269, 270, 271, 270, 272, 
	273, 274, 275, 269, 267, 268, 276, 267, 
	268, 277, 267, 268, 278, 267, 268, 279, 
	267, 268, 280, 267, 268, 281, 267, 268, 
	282, 267, 268, 283, 267, 268, 284, 267, 
	268, 285, 267, 268, 286, 267, 268, 287, 
	267, 268, 288, 267, 268, 289, 267, 268, 
	290, 267, 268, 291, 267, 268, 292, 267, 
	268, 293, 267, 268, 294, 267, 268, 295, 
	267, 268, 296, 267, 268, 290, 267, 268, 
	297, 267, 268, 298, 267, 268, 299, 267, 
	268, 300, 267, 268, 301, 267, 268, 302, 
	291, 267, 268, 303, 267, 268, 304, 267, 
	268, 305, 267, 268, 306, 267, 268, 290, 
	267, 268, 307, 267, 268, 308, 267, 268, 
	309, 267, 268, 310, 267, 268, 290, 267, 
	311, 312, 311, 0, 315, 314, 316, 317, 
	314, 313, 0, 319, 320, 318, 0, 319, 
	318, 315, 321, 319, 320, 321, 318, 315, 
	322, 323, 324, 325, 326, 327, 328, 329, 
	330, 331, 332, 333, 334, 330, 335, 322, 
	0, 75, 336, 74, 75, 337, 74, 75, 
	336, 74, 75, 338, 74, 75, 339, 74, 
	75, 340, 74, 75, 341, 74, 75, 342, 
	74, 75, 343, 74, 75, 344, 74, 75, 
	345, 74, 75, 336, 74, 75, 346, 74, 
	75, 347, 74, 75, 348, 74, 75, 349, 
	74, 75, 350, 74, 75, 351, 100, 74, 
	75, 352, 74, 75, 353, 74, 75, 354, 
	74, 75, 355, 74, 75, 356, 74, 75, 
	100, 74, 75, 357, 74, 75, 358, 74, 
	75, 359, 74, 75, 360, 74, 75, 356, 
	74, 68, 0, 361, 0, 1, 0, 362, 
	0
];

var _lexer_trans_targs = [
	0, 2, 2, 3, 13, 15, 29, 32, 
	35, 36, 57, 58, 74, 82, 182, 229, 
	265, 4, 5, 6, 7, 6, 6, 7, 
	6, 8, 8, 8, 9, 8, 8, 8, 
	9, 10, 11, 12, 2, 12, 13, 2, 
	14, 16, 17, 18, 19, 20, 21, 22, 
	23, 24, 25, 26, 27, 28, 267, 30, 
	31, 2, 14, 31, 2, 14, 33, 34, 
	2, 33, 32, 34, 29, 37, 264, 38, 
	39, 40, 39, 40, 40, 2, 41, 55, 
	235, 236, 238, 239, 247, 259, 42, 43, 
	44, 45, 46, 47, 48, 49, 50, 51, 
	52, 53, 54, 2, 56, 2, 2, 3, 
	13, 15, 29, 32, 35, 36, 57, 58, 
	74, 82, 182, 229, 35, 59, 60, 61, 
	62, 63, 64, 65, 66, 67, 66, 67, 
	67, 2, 68, 69, 70, 71, 72, 73, 
	56, 75, 76, 77, 78, 79, 80, 81, 
	83, 84, 85, 86, 87, 88, 135, 89, 
	90, 91, 92, 93, 94, 95, 96, 95, 
	96, 96, 2, 97, 111, 112, 113, 115, 
	116, 124, 130, 98, 99, 100, 101, 102, 
	103, 104, 105, 106, 107, 108, 109, 110, 
	2, 56, 111, 114, 112, 117, 118, 119, 
	120, 121, 122, 123, 125, 126, 127, 128, 
	129, 131, 132, 133, 134, 136, 137, 136, 
	137, 137, 2, 138, 152, 153, 154, 157, 
	158, 166, 177, 139, 140, 141, 142, 143, 
	144, 145, 146, 147, 148, 149, 150, 151, 
	2, 56, 152, 155, 156, 153, 159, 160, 
	161, 162, 163, 164, 165, 167, 168, 169, 
	170, 171, 172, 173, 174, 175, 176, 178, 
	179, 180, 181, 183, 184, 185, 186, 187, 
	188, 189, 190, 189, 190, 190, 2, 191, 
	205, 207, 213, 224, 192, 193, 194, 195, 
	196, 197, 198, 199, 200, 201, 202, 203, 
	204, 2, 206, 56, 208, 209, 210, 211, 
	212, 214, 215, 216, 217, 218, 219, 220, 
	221, 222, 223, 225, 226, 227, 228, 229, 
	230, 231, 233, 234, 232, 230, 231, 232, 
	230, 233, 234, 3, 13, 15, 29, 32, 
	35, 36, 57, 58, 74, 82, 182, 229, 
	55, 237, 235, 240, 241, 242, 243, 244, 
	245, 246, 248, 249, 250, 251, 252, 253, 
	254, 255, 256, 257, 258, 260, 261, 262, 
	263, 266, 0
];

var _lexer_trans_actions = [
	43, 0, 54, 3, 1, 0, 29, 1, 
	29, 29, 29, 29, 29, 29, 29, 35, 
	0, 0, 0, 7, 139, 48, 0, 102, 
	9, 5, 45, 134, 45, 0, 33, 122, 
	33, 33, 0, 11, 106, 0, 0, 114, 
	25, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	57, 149, 126, 0, 110, 23, 0, 27, 
	118, 27, 51, 0, 0, 0, 0, 0, 
	57, 144, 0, 54, 0, 72, 33, 84, 
	84, 84, 84, 84, 84, 84, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 15, 15, 31, 130, 60, 
	57, 31, 63, 57, 63, 63, 63, 63, 
	63, 63, 63, 66, 0, 0, 0, 0, 
	0, 0, 0, 0, 57, 144, 0, 54, 
	0, 81, 84, 0, 0, 0, 0, 0, 
	21, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 57, 144, 0, 
	54, 0, 78, 33, 84, 84, 84, 84, 
	84, 84, 84, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	19, 19, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 57, 144, 0, 
	54, 0, 75, 33, 84, 84, 84, 84, 
	84, 84, 84, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	17, 17, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 57, 144, 0, 54, 0, 69, 33, 
	84, 84, 84, 84, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 13, 0, 13, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 37, 37, 54, 37, 87, 0, 0, 
	39, 0, 0, 93, 90, 41, 96, 90, 
	96, 96, 96, 96, 96, 96, 96, 99, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0
];

var _lexer_eof_actions = [
	0, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43
];

var lexer_start = 1;
var lexer_first_final = 267;
var lexer_error = 0;

var lexer_en_main = 1;


/* line 129 "ragel/i18n/en_lol.js.rl" */

/* line 130 "ragel/i18n/en_lol.js.rl" */

/* line 131 "ragel/i18n/en_lol.js.rl" */

/* line 132 "ragel/i18n/en_lol.js.rl" */

var Lexer = function(listener) {
  // Check that listener has the required functions
  var events = ['comment', 'tag', 'feature', 'background', 'scenario', 'scenario_outline', 'examples', 'step', 'doc_string', 'row', 'eof'];
  for(var i=0, len=events.length; i<len; i++) {
    var event = events[i];
    if(typeof listener[event] != 'function') {
      throw new Error("Error. No " + event + " function exists on " + JSON.stringify(listener));
    }
  }
  this.listener = listener;
};

Lexer.prototype.scan = function(data) {
  var ending = "\n%_FEATURE_END_%";
  if(typeof data == 'string') {
    data = this.stringToBytes(data + ending);
  } else if(typeof Buffer != 'undefined' && Buffer.isBuffer(data)) {
    // Node.js
    var buf = new Buffer(data.length + ending.length);
    data.copy(buf, 0, 0);
    new Buffer(ending).copy(buf, data.length, 0);
    data = buf;
  }
  var eof = pe = data.length;
  var p = 0;

  this.line_number = 1;
  this.last_newline = 0;
  var signedCharValue=function(v){return v > 127 ? v-256 : v; };

  
/* line 559 "js/lib/gherkin/lexer/en_lol.js" */
{
	  this.cs = lexer_start;
} /* JSCodeGen::writeInit */

/* line 164 "ragel/i18n/en_lol.js.rl" */
  
/* line 566 "js/lib/gherkin/lexer/en_lol.js" */
{
	var _klen, _trans, _keys, _ps, _widec, _acts, _nacts;
	var _goto_level, _resume, _eof_trans, _again, _test_eof;
	var _out;
	_klen = _trans = _keys = _acts = _nacts = null;
	_goto_level = 0;
	_resume = 10;
	_eof_trans = 15;
	_again = 20;
	_test_eof = 30;
	_out = 40;
	while (true) {
	_trigger_goto = false;
	if (_goto_level <= 0) {
	if (p == pe) {
		_goto_level = _test_eof;
		continue;
	}
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	}
	if (_goto_level <= _resume) {
	_keys = _lexer_key_offsets[ this.cs];
	_trans = _lexer_index_offsets[ this.cs];
	_klen = _lexer_single_lengths[ this.cs];
	_break_match = false;
	
	do {
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + _klen - 1;

	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + ( (_upper - _lower) >> 1 );

	        if (( signedCharValue(data[p])) < _lexer_trans_keys[_mid]) {
	           _upper = _mid - 1;
	        } else if (( signedCharValue(data[p])) > _lexer_trans_keys[_mid]) {
	           _lower = _mid + 1;
	        } else {
	           _trans += (_mid - _keys);
	           _break_match = true;
	           break;
	        };
	     } /* while */
	     if (_break_match) { break; }
	     _keys += _klen;
	     _trans += _klen;
	  }
	  _klen = _lexer_range_lengths[ this.cs];
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + (_klen << 1) - 2;
	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + (((_upper-_lower) >> 1) & ~1);
	        if (( signedCharValue(data[p])) < _lexer_trans_keys[_mid]) {
	          _upper = _mid - 2;
	         } else if (( signedCharValue(data[p])) > _lexer_trans_keys[_mid+1]) {
	          _lower = _mid + 2;
	        } else {
	          _trans += ((_mid - _keys) >> 1);
	          _break_match = true;
	          break;
	        }
	     } /* while */
	     if (_break_match) { break; }
	     _trans += _klen
	  }
	} while (false);
	_trans = _lexer_indicies[_trans];
	 this.cs = _lexer_trans_targs[_trans];
	if (_lexer_trans_actions[_trans] != 0) {
		_acts = _lexer_trans_actions[_trans];
		_nacts = _lexer_actions[_acts];
		_acts += 1;
		while (_nacts > 0) {
			_nacts -= 1;
			_acts += 1;
			switch (_lexer_actions[_acts - 1]) {
case 0:
/* line 6 "ragel/i18n/en_lol.js.rl" */

    this.content_start = p;
    this.current_line = this.line_number;
    this.start_col = p - this.last_newline - (this.keyword+':').length;
  		break;
case 1:
/* line 12 "ragel/i18n/en_lol.js.rl" */

    this.current_line = this.line_number;
    this.start_col = p - this.last_newline;
  		break;
case 2:
/* line 17 "ragel/i18n/en_lol.js.rl" */

    this.content_start = p;
  		break;
case 3:
/* line 21 "ragel/i18n/en_lol.js.rl" */

    this.docstring_content_type_start = p;
  		break;
case 4:
/* line 25 "ragel/i18n/en_lol.js.rl" */

    this.docstring_content_type_end = p;
  		break;
case 5:
/* line 29 "ragel/i18n/en_lol.js.rl" */

    var con = this.unindent(
      this.start_col, 
      this.bytesToString(data.slice(this.content_start, this.next_keyword_start-1)).replace(/(\r?\n)?([\t ])*$/, '').replace(/\\\"\\\"\\\"/mg, '"""')
    );
    var con_type = this.bytesToString(data.slice(this.docstring_content_type_start, this.docstring_content_type_end)).trim();
    this.listener.doc_string(con_type, con, this.current_line); 
  		break;
case 6:
/* line 38 "ragel/i18n/en_lol.js.rl" */

    p = this.store_keyword_content('feature', data, p, eof);
  		break;
case 7:
/* line 42 "ragel/i18n/en_lol.js.rl" */

    p = this.store_keyword_content('background', data, p, eof);
  		break;
case 8:
/* line 46 "ragel/i18n/en_lol.js.rl" */

    p = this.store_keyword_content('scenario', data, p, eof);
  		break;
case 9:
/* line 50 "ragel/i18n/en_lol.js.rl" */

    p = this.store_keyword_content('scenario_outline', data, p, eof);
  		break;
case 10:
/* line 54 "ragel/i18n/en_lol.js.rl" */

    p = this.store_keyword_content('examples', data, p, eof);
  		break;
case 11:
/* line 58 "ragel/i18n/en_lol.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.step(this.keyword, con, this.current_line);
  		break;
case 12:
/* line 63 "ragel/i18n/en_lol.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.comment(con, this.line_number);
    this.keyword_start = null;
  		break;
case 13:
/* line 69 "ragel/i18n/en_lol.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.tag(con, this.line_number);
    this.keyword_start = null;
  		break;
case 14:
/* line 75 "ragel/i18n/en_lol.js.rl" */

    this.line_number++;
  		break;
case 15:
/* line 79 "ragel/i18n/en_lol.js.rl" */

    this.last_newline = p + 1;
  		break;
case 16:
/* line 83 "ragel/i18n/en_lol.js.rl" */

    this.keyword_start = this.keyword_start || p;
  		break;
case 17:
/* line 87 "ragel/i18n/en_lol.js.rl" */

    this.keyword = this.bytesToString(data.slice(this.keyword_start, p)).replace(/:$/, '');
    this.keyword_start = null;
  		break;
case 18:
/* line 92 "ragel/i18n/en_lol.js.rl" */

    this.next_keyword_start = p;
  		break;
case 19:
/* line 96 "ragel/i18n/en_lol.js.rl" */

    p = p - 1;
    current_row = [];
    this.current_line = this.line_number;
  		break;
case 20:
/* line 102 "ragel/i18n/en_lol.js.rl" */

    this.content_start = p;
  		break;
case 21:
/* line 106 "ragel/i18n/en_lol.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    current_row.push(con.replace(/\\\|/, "|").replace(/\\n/, "\n").replace(/\\\\/, "\\"));
  		break;
case 22:
/* line 111 "ragel/i18n/en_lol.js.rl" */

    this.listener.row(current_row, this.current_line);
  		break;
case 23:
/* line 115 "ragel/i18n/en_lol.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw new Error("Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.");
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 793 "js/lib/gherkin/lexer/en_lol.js" */
			} /* action switch */
		}
	}
	if (_trigger_goto) {
		continue;
	}
	}
	if (_goto_level <= _again) {
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	p += 1;
	if (p != pe) {
		_goto_level = _resume;
		continue;
	}
	}
	if (_goto_level <= _test_eof) {
	if (p == eof) {
	__acts = _lexer_eof_actions[ this.cs];
	__nacts =  _lexer_actions[__acts];
	__acts += 1;
	while (__nacts > 0) {
		__nacts -= 1;
		__acts += 1;
		switch (_lexer_actions[__acts - 1]) {
case 23:
/* line 115 "ragel/i18n/en_lol.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw new Error("Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.");
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 832 "js/lib/gherkin/lexer/en_lol.js" */
		} /* eof action switch */
	}
	if (_trigger_goto) {
		continue;
	}
}
	}
	if (_goto_level <= _out) {
		break;
	}
	}
	}

/* line 165 "ragel/i18n/en_lol.js.rl" */
};


/*
 * Decode utf-8 byte sequence to string.
 */
var decodeUtf8 = function(bytes) {
  var result = "";
  var i = 0;
  var wc;
  var c;

  while (i < bytes.length) {
    /* parse as UTF-8 lead byte */
    wc = bytes[i++];
    if (wc < 0x80) {
      count = 0;
    } else if (wc < 0xC2 || wc >= 0xF8) {
      throw new Error("input is not a valid UTF-8 lead octet");
    } else if (wc < 0xE0) {
      count = 1;
      wc = (wc & 0x1F) << 6;
    } else if (wc < 0xF0) {
      count = 2;
      wc = (wc & 0x0F) << 12;
    } else /* wc < 0xF8 */ {
      count = 3;
      wc = (wc & 0x07) << 18;
    }

    /* parse trail bytes, if any */
    while (count) {
      if (!(i < bytes.length)) {
        throw new Error("short read");
      }
      if ((c = bytes[i++] ^ 0x80) > 0x3F) {
        throw new Error("input is not a valid UTF-8 trail octet");
      }
      wc |= c << (6 * --count);
      if (wc < (1 << (5 * count + 6))) {
        throw new Error("invalid non-minimal encoded input");
      }
    }

    /* handle conversion to UTF-16 if needed */
    if (wc > 0xFFFF) {
      wc -= 0x10000;
      result += String.fromCharCode(0xD800 + (wc >> 10));
      wc = 0xDC00 + (wc & 0x3FF);
    }
    result += String.fromCharCode(wc);
  }

  return result;
};

/*
 * Encode string to an array of bytes using utf8 encoding.
 *
 * Javascript internally stores character data as utf16 (like java).
 * String.charCodeAt() does *not* produce unicode points, but simply
 * reflects this internal representation. Thus, it is necessary
 * to first decode the utf-16 representation before encoding to
 * utf-8.
 */
var encodeUtf8 = function(string) {
  var bytes = [];
  var i = 0;
  var j = 0;
  var wc;

  while (i < string.length) {
    wc = string.charCodeAt(i++);
    if (wc >= 0xD800 && wc <= 0xDBFF && i < string.length && string.charCodeAt(i) >= 0xDC00 && string.charCodeAt(i) <= 0xDFFF) {
      /* decode UTF-16 */
      wc = 0x10000 + ((wc & 0x3FF) << 10) + (string.charCodeAt(i++) & 0x3FF);
    }

    /* emit lead byte */
    if (wc < 0x80) {
      bytes[j++] = wc;
      count = 0;
    } else if (wc < 0x800) {
      bytes[j++] = 0xC0 | (wc >> 6);
      count = 1;
    } else if (wc < 0x10000) {
      bytes[j++] = 0xE0 | (wc >> 12);
      count = 2;
    } else {
      /* SMP: 21-bit Unicode */
      bytes[j++] = 0xF0 | (wc >> 18);
      count = 3;
    }

    /* emit trail bytes, if any */
    while (count) {
      bytes[j++] = 0x80 | ((wc >> (6 * --count)) & 0x3F);
    }
  }

  return bytes;

};

Lexer.prototype.bytesToString = function(bytes) {
  if(typeof bytes.write == 'function') {
    // Node.js
    return bytes.toString('utf-8');
  }
  return decodeUtf8(bytes);
};

Lexer.prototype.stringToBytes = function(string) {
  return encodeUtf8(string);
};

Lexer.prototype.unindent = function(startcol, text) {
  startcol = startcol || 0;
  return text.replace(new RegExp('^[\t ]{0,' + startcol + '}', 'gm'), ''); 
};

Lexer.prototype.store_keyword_content = function(event, data, p, eof) {
  var end_point = (!this.next_keyword_start || (p == eof)) ? p : this.next_keyword_start;
  var content = this.unindent(this.start_col + 2, this.bytesToString(data.slice(this.content_start, end_point))).replace(/\s+$/,"");
  var content_lines = content.split("\n")
  var name = content_lines.shift() || "";
  name = name.trim();
  var description = content_lines.join("\n");
  this.listener[event](this.keyword, name, description, this.current_line);
  var nks = this.next_keyword_start;
  this.next_keyword_start = null;
  return nks ? nks - 1 : p;
};

Lexer.prototype.current_line_content = function(data, p) {
  var rest = Array.prototype.slice.call(data,this.last_newline, -1);
  var end = rest.indexOf(10) || -1;
  return this.bytesToString(rest.slice(0, end)).trim();
};

// Node.js export
if(typeof module !== 'undefined') {
  module.exports = Lexer;
}
// Require.js export
if (typeof define !== 'undefined') {
  if(define.amd) {
    define('gherkin/lexer/en_lol', [], function() {
      return Lexer;
    });
  } else {
    define('gherkin/lexer/en_lol', function(require, exports, module) {
      exports.Lexer = Lexer;
    });
  }
}

})();

}).call(this,require("buffer").Buffer)

},{"buffer":69}],197:[function(require,module,exports){
(function (Buffer){

/* line 1 "ragel/i18n/en_old.js.rl" */
;(function() {


/* line 126 "ragel/i18n/en_old.js.rl" */



/* line 11 "js/lib/gherkin/lexer/en_old.js" */
var _lexer_actions = [
	0, 1, 0, 1, 1, 1, 2, 1, 
	3, 1, 4, 1, 5, 1, 6, 1, 
	7, 1, 8, 1, 9, 1, 10, 1, 
	11, 1, 12, 1, 13, 1, 16, 1, 
	17, 1, 18, 1, 19, 1, 20, 1, 
	21, 1, 22, 1, 23, 2, 2, 18, 
	2, 3, 4, 2, 13, 0, 2, 14, 
	15, 2, 17, 0, 2, 17, 1, 2, 
	17, 16, 2, 17, 19, 2, 18, 6, 
	2, 18, 7, 2, 18, 8, 2, 18, 
	9, 2, 18, 10, 2, 18, 16, 2, 
	20, 21, 2, 22, 0, 2, 22, 1, 
	2, 22, 16, 2, 22, 19, 3, 4, 
	14, 15, 3, 5, 14, 15, 3, 11, 
	14, 15, 3, 12, 14, 15, 3, 13, 
	14, 15, 3, 14, 15, 18, 3, 17, 
	0, 11, 3, 17, 14, 15, 4, 2, 
	14, 15, 18, 4, 3, 4, 14, 15, 
	4, 17, 0, 14, 15, 5, 17, 0, 
	11, 14, 15
];

var _lexer_key_offsets = [
	0, 0, 18, 21, 22, 23, 24, 25, 
	40, 43, 46, 48, 65, 69, 71, 72, 
	75, 77, 94, 95, 96, 98, 100, 105, 
	110, 115, 120, 124, 128, 130, 131, 132, 
	133, 134, 135, 136, 137, 138, 139, 140, 
	141, 142, 143, 144, 145, 146, 148, 153, 
	160, 165, 167, 168, 170, 171, 172, 173, 
	174, 175, 186, 188, 190, 192, 209, 210, 
	211, 213, 214, 216, 218, 219, 220, 221, 
	222, 229, 231, 234, 236, 238, 240, 242, 
	243, 244, 246, 247, 248, 250, 251, 252, 
	253, 254, 255, 256, 257, 258, 259, 274, 
	277, 280, 282, 299, 303, 305, 306, 309, 
	312, 315, 318, 319, 320, 321, 322, 323, 
	325, 326, 329, 332, 336, 342, 345, 347, 
	353, 370, 372, 374, 376, 379, 381, 398, 
	402, 404, 406, 408, 410, 412, 414, 416, 
	418, 420, 422, 424, 426, 428, 430, 432, 
	434, 437, 439, 441, 443, 445, 447, 449, 
	451, 453, 455, 458, 460, 478, 479, 480, 
	481, 482, 497, 501, 503, 505, 508, 510, 
	527, 531, 532, 533, 535, 537, 539, 542, 
	544, 561, 565, 567, 569, 571, 573, 575, 
	577, 579, 581, 583, 585, 587, 589, 591, 
	593, 596, 598, 601, 603, 605, 607, 609, 
	611, 613, 615, 618, 620, 622, 625, 627, 
	629, 631, 633, 635, 637, 639, 641, 644, 
	646, 664, 665, 667, 669, 671, 673, 675, 
	677, 679, 681, 683, 685, 687, 689, 691, 
	693, 695, 697, 700, 702, 704, 706, 709, 
	711, 714, 717, 719, 721, 723, 726, 728, 
	730, 733, 735, 737, 739, 741, 743, 745, 
	747, 748, 751, 752, 753, 755, 757, 759, 
	762, 764, 781, 785, 787, 789, 791, 793, 
	795, 797, 799, 801, 803, 805, 807, 809, 
	811, 813, 815, 817, 820, 822, 824, 826, 
	828, 830, 832, 834, 836, 839, 841, 843, 
	846, 848, 850, 852, 854, 856, 858, 860, 
	862, 865, 867, 885, 886, 887, 888
];

var _lexer_trans_keys = [
	-61, 10, 32, 34, 35, 37, 42, 55, 
	64, 65, 72, 79, 83, 84, 124, 239, 
	9, 13, -122, -112, -98, 114, 58, 10, 
	10, -61, 10, 32, 35, 37, 42, 55, 
	64, 65, 72, 79, 83, 84, 9, 13, 
	-112, -98, 10, 10, 97, 117, 10, 32, 
	-61, 10, 32, 34, 35, 37, 42, 55, 
	64, 65, 72, 79, 83, 84, 124, 9, 
	13, -122, -112, -98, -80, 97, 117, 32, 
	-61, 10, 13, 10, 13, -61, 10, 32, 
	34, 35, 37, 42, 55, 64, 65, 72, 
	79, 83, 84, 124, 9, 13, 34, 34, 
	10, 13, 10, 13, 10, 32, 34, 9, 
	13, 10, 32, 34, 9, 13, 10, 32, 
	34, 9, 13, 10, 32, 34, 9, 13, 
	10, 32, 9, 13, 10, 32, 9, 13, 
	10, 13, 10, 95, 70, 69, 65, 84, 
	85, 82, 69, 95, 69, 78, 68, 95, 
	37, 32, 10, 13, 13, 32, 64, 9, 
	10, 9, 10, 13, 32, 64, 11, 12, 
	10, 32, 64, 9, 13, 99, 101, 119, 
	-61, 97, -90, 116, 58, 10, 10, -61, 
	10, 32, 35, 37, 64, 65, 72, 83, 
	9, 13, -122, 10, 10, 114, 10, 58, 
	-61, 10, 32, 34, 35, 37, 42, 55, 
	64, 65, 72, 79, 83, 84, 124, 9, 
	13, 110, 100, 101, 119, 32, -61, 116, 
	-80, -66, 101, 58, 10, 10, 10, 32, 
	35, 72, 124, 9, 13, 10, 119, -61, 
	10, 97, -90, 10, 10, 116, 10, 58, 
	10, 101, 104, 97, 32, 58, 104, 119, 
	-61, 97, -90, 114, 32, 115, 119, 97, 
	58, 10, 10, -61, 10, 32, 35, 37, 
	42, 55, 64, 65, 72, 79, 83, 84, 
	9, 13, -112, -98, 10, 10, 97, 117, 
	10, 32, -61, 10, 32, 34, 35, 37, 
	42, 55, 64, 65, 72, 79, 83, 84, 
	124, 9, 13, -122, -112, -98, -80, 97, 
	117, 32, -61, 10, 13, -66, 10, 13, 
	10, 13, 101, 10, 13, 32, 114, 104, 
	101, 32, 104, 97, 117, 32, 10, 13, 
	116, 10, 13, 104, 32, 124, 9, 13, 
	10, 32, 92, 124, 9, 13, 10, 92, 
	124, 10, 92, 10, 32, 92, 124, 9, 
	13, -61, 10, 32, 34, 35, 37, 42, 
	55, 64, 65, 72, 79, 83, 84, 124, 
	9, 13, 10, 114, 10, 104, 10, 32, 
	10, 97, 117, 10, 32, -61, 10, 32, 
	34, 35, 37, 42, 55, 64, 65, 72, 
	79, 83, 84, 124, 9, 13, -122, -112, 
	-98, -66, 10, 95, 10, 70, 10, 69, 
	10, 65, 10, 84, 10, 85, 10, 82, 
	10, 69, 10, 95, 10, 69, 10, 78, 
	10, 68, 10, 95, 10, 37, 10, 99, 
	10, 119, -61, 10, 97, -90, 10, 10, 
	116, 10, 58, 10, 101, 10, 110, 10, 
	100, 10, 119, 10, 97, 10, 104, 10, 
	97, 117, 10, 32, -61, 10, 32, 34, 
	35, 37, 42, 55, 64, 65, 72, 79, 
	83, 84, 116, 124, 9, 13, 104, 101, 
	10, 10, -61, 10, 32, 35, 37, 42, 
	55, 64, 65, 72, 79, 83, 84, 9, 
	13, -122, -112, -98, 10, 10, 114, 10, 
	58, 10, 97, 117, 10, 32, -61, 10, 
	32, 34, 35, 37, 42, 55, 64, 65, 
	72, 79, 83, 84, 124, 9, 13, -122, 
	-112, -98, -80, 101, 32, 10, 114, 10, 
	104, 10, 32, 10, 97, 117, 10, 32, 
	-61, 10, 32, 34, 35, 37, 42, 55, 
	64, 65, 72, 79, 83, 84, 124, 9, 
	13, -122, -112, -98, -66, 10, 95, 10, 
	70, 10, 69, 10, 65, 10, 84, 10, 
	85, 10, 82, 10, 69, 10, 95, 10, 
	69, 10, 78, 10, 68, 10, 95, 10, 
	37, 10, 99, 101, 10, 119, -61, 10, 
	97, -90, 10, 10, 116, 10, 101, 10, 
	110, 10, 100, 10, 119, 10, 97, 10, 
	32, 58, 10, 104, 10, 119, -61, 10, 
	97, -90, 10, 10, 114, 10, 32, 10, 
	115, 10, 119, 10, 97, 10, 101, 10, 
	104, 10, 97, 117, 10, 32, -61, 10, 
	32, 34, 35, 37, 42, 55, 64, 65, 
	72, 79, 83, 84, 116, 124, 9, 13, 
	104, 10, 95, 10, 70, 10, 69, 10, 
	65, 10, 84, 10, 85, 10, 82, 10, 
	69, 10, 95, 10, 69, 10, 78, 10, 
	68, 10, 95, 10, 37, 10, 101, 10, 
	119, -61, 10, 97, -90, 10, 10, 116, 
	10, 101, 10, 101, 119, 10, 32, -61, 
	10, 116, -80, -66, 10, 10, 101, 10, 
	104, 10, 97, 10, 32, 58, 10, 104, 
	10, 119, -61, 10, 97, -90, 10, 10, 
	114, 10, 32, 10, 115, 10, 119, 10, 
	97, 10, 101, 101, -80, 10, 13, 101, 
	32, 10, 114, 10, 104, 10, 32, 10, 
	97, 117, 10, 32, -61, 10, 32, 34, 
	35, 37, 42, 55, 64, 65, 72, 79, 
	83, 84, 124, 9, 13, -122, -112, -98, 
	-66, 10, 95, 10, 70, 10, 69, 10, 
	65, 10, 84, 10, 85, 10, 82, 10, 
	69, 10, 95, 10, 69, 10, 78, 10, 
	68, 10, 95, 10, 37, 10, 99, 10, 
	119, -61, 10, 97, -90, 10, 10, 116, 
	10, 58, 10, 101, 10, 110, 10, 100, 
	10, 119, 10, 97, 10, 32, 58, 10, 
	104, 10, 119, -61, 10, 97, -90, 10, 
	10, 114, 10, 32, 10, 115, 10, 119, 
	10, 97, 10, 101, 10, 104, 10, 97, 
	117, 10, 32, -61, 10, 32, 34, 35, 
	37, 42, 55, 64, 65, 72, 79, 83, 
	84, 116, 124, 9, 13, 104, 187, 191, 
	0
];

var _lexer_single_lengths = [
	0, 16, 3, 1, 1, 1, 1, 13, 
	3, 3, 2, 15, 4, 2, 1, 3, 
	2, 15, 1, 1, 2, 2, 3, 3, 
	3, 3, 2, 2, 2, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 2, 3, 5, 
	3, 2, 1, 2, 1, 1, 1, 1, 
	1, 9, 2, 2, 2, 15, 1, 1, 
	2, 1, 2, 2, 1, 1, 1, 1, 
	5, 2, 3, 2, 2, 2, 2, 1, 
	1, 2, 1, 1, 2, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 13, 3, 
	3, 2, 15, 4, 2, 1, 3, 3, 
	3, 3, 1, 1, 1, 1, 1, 2, 
	1, 3, 3, 2, 4, 3, 2, 4, 
	15, 2, 2, 2, 3, 2, 15, 4, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	3, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 3, 2, 16, 1, 1, 1, 
	1, 13, 4, 2, 2, 3, 2, 15, 
	4, 1, 1, 2, 2, 2, 3, 2, 
	15, 4, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	3, 2, 3, 2, 2, 2, 2, 2, 
	2, 2, 3, 2, 2, 3, 2, 2, 
	2, 2, 2, 2, 2, 2, 3, 2, 
	16, 1, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 3, 2, 2, 2, 3, 2, 
	3, 3, 2, 2, 2, 3, 2, 2, 
	3, 2, 2, 2, 2, 2, 2, 2, 
	1, 3, 1, 1, 2, 2, 2, 3, 
	2, 15, 4, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 3, 2, 2, 2, 2, 
	2, 2, 2, 2, 3, 2, 2, 3, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	3, 2, 16, 1, 1, 1, 0
];

var _lexer_range_lengths = [
	0, 1, 0, 0, 0, 0, 0, 1, 
	0, 0, 0, 1, 0, 0, 0, 0, 
	0, 1, 0, 0, 0, 0, 1, 1, 
	1, 1, 1, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 1, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 0, 0, 0, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 0, 
	0, 0, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 1, 0, 0, 1, 
	1, 0, 0, 0, 0, 0, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 0, 0, 0, 
	0, 1, 0, 0, 0, 0, 0, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 0, 0, 0, 0
];

var _lexer_index_offsets = [
	0, 0, 18, 22, 24, 26, 28, 30, 
	45, 49, 53, 56, 73, 78, 81, 83, 
	87, 90, 107, 109, 111, 114, 117, 122, 
	127, 132, 137, 141, 145, 148, 150, 152, 
	154, 156, 158, 160, 162, 164, 166, 168, 
	170, 172, 174, 176, 178, 180, 183, 188, 
	195, 200, 203, 205, 208, 210, 212, 214, 
	216, 218, 229, 232, 235, 238, 255, 257, 
	259, 262, 264, 267, 270, 272, 274, 276, 
	278, 285, 288, 292, 295, 298, 301, 304, 
	306, 308, 311, 313, 315, 318, 320, 322, 
	324, 326, 328, 330, 332, 334, 336, 351, 
	355, 359, 362, 379, 384, 387, 389, 393, 
	397, 401, 405, 407, 409, 411, 413, 415, 
	418, 420, 424, 428, 432, 438, 442, 445, 
	451, 468, 471, 474, 477, 481, 484, 501, 
	506, 509, 512, 515, 518, 521, 524, 527, 
	530, 533, 536, 539, 542, 545, 548, 551, 
	554, 558, 561, 564, 567, 570, 573, 576, 
	579, 582, 585, 589, 592, 610, 612, 614, 
	616, 618, 633, 638, 641, 644, 648, 651, 
	668, 673, 675, 677, 680, 683, 686, 690, 
	693, 710, 715, 718, 721, 724, 727, 730, 
	733, 736, 739, 742, 745, 748, 751, 754, 
	757, 761, 764, 768, 771, 774, 777, 780, 
	783, 786, 789, 793, 796, 799, 803, 806, 
	809, 812, 815, 818, 821, 824, 827, 831, 
	834, 852, 854, 857, 860, 863, 866, 869, 
	872, 875, 878, 881, 884, 887, 890, 893, 
	896, 899, 902, 906, 909, 912, 915, 919, 
	922, 926, 930, 933, 936, 939, 943, 946, 
	949, 953, 956, 959, 962, 965, 968, 971, 
	974, 976, 980, 982, 984, 987, 990, 993, 
	997, 1000, 1017, 1022, 1025, 1028, 1031, 1034, 
	1037, 1040, 1043, 1046, 1049, 1052, 1055, 1058, 
	1061, 1064, 1067, 1070, 1074, 1077, 1080, 1083, 
	1086, 1089, 1092, 1095, 1098, 1102, 1105, 1108, 
	1112, 1115, 1118, 1121, 1124, 1127, 1130, 1133, 
	1136, 1140, 1143, 1161, 1163, 1165, 1167
];

var _lexer_indicies = [
	1, 3, 2, 4, 5, 6, 7, 7, 
	8, 9, 10, 11, 12, 13, 14, 15, 
	2, 0, 16, 17, 18, 0, 19, 0, 
	20, 0, 22, 21, 24, 23, 25, 24, 
	26, 27, 28, 29, 29, 27, 30, 31, 
	32, 33, 34, 26, 23, 35, 36, 24, 
	23, 24, 37, 38, 23, 24, 39, 23, 
	40, 42, 41, 43, 44, 45, 46, 46, 
	47, 48, 49, 50, 51, 52, 53, 41, 
	0, 16, 17, 18, 54, 0, 55, 56, 
	0, 57, 0, 59, 60, 61, 58, 63, 
	64, 62, 1, 3, 2, 4, 5, 6, 
	7, 7, 8, 9, 10, 11, 12, 13, 
	14, 2, 0, 65, 0, 66, 0, 68, 
	69, 67, 71, 72, 70, 75, 74, 76, 
	74, 73, 79, 78, 80, 78, 77, 79, 
	78, 81, 78, 77, 79, 78, 82, 78, 
	77, 84, 83, 83, 0, 3, 85, 85, 
	0, 87, 88, 86, 3, 0, 89, 0, 
	90, 0, 91, 0, 92, 0, 93, 0, 
	94, 0, 95, 0, 96, 0, 97, 0, 
	98, 0, 99, 0, 100, 0, 101, 0, 
	102, 0, 103, 0, 60, 61, 58, 0, 
	0, 0, 0, 104, 105, 106, 105, 105, 
	108, 107, 104, 3, 109, 8, 109, 0, 
	110, 16, 0, 111, 0, 112, 113, 0, 
	114, 0, 115, 0, 116, 0, 118, 117, 
	120, 119, 121, 120, 122, 123, 124, 123, 
	125, 126, 127, 122, 119, 128, 120, 119, 
	120, 129, 119, 120, 130, 119, 131, 42, 
	41, 43, 44, 45, 46, 46, 47, 48, 
	49, 50, 51, 52, 53, 41, 0, 132, 
	0, 110, 0, 133, 134, 0, 135, 0, 
	136, 137, 0, 138, 138, 0, 139, 0, 
	140, 0, 142, 141, 144, 143, 144, 145, 
	146, 147, 146, 145, 143, 144, 148, 143, 
	149, 144, 150, 143, 151, 144, 143, 144, 
	152, 143, 144, 153, 143, 144, 151, 143, 
	138, 0, 154, 0, 155, 156, 0, 157, 
	0, 158, 0, 159, 160, 0, 161, 0, 
	162, 0, 163, 0, 164, 0, 165, 0, 
	166, 0, 167, 0, 169, 168, 171, 170, 
	172, 171, 173, 174, 175, 176, 176, 174, 
	177, 178, 179, 180, 181, 173, 170, 182, 
	183, 171, 170, 171, 184, 185, 170, 171, 
	186, 170, 187, 42, 41, 43, 44, 45, 
	46, 46, 47, 48, 49, 50, 51, 52, 
	53, 41, 0, 16, 17, 18, 188, 0, 
	189, 56, 0, 190, 0, 191, 60, 61, 
	58, 192, 63, 64, 62, 63, 64, 193, 
	62, 63, 64, 103, 62, 194, 0, 110, 
	0, 195, 0, 196, 0, 197, 0, 198, 
	56, 0, 199, 0, 60, 61, 200, 58, 
	63, 64, 192, 62, 201, 202, 201, 0, 
	205, 204, 206, 207, 204, 203, 0, 209, 
	210, 208, 0, 209, 208, 205, 211, 209, 
	210, 211, 208, 212, 205, 213, 214, 215, 
	216, 217, 217, 218, 219, 220, 221, 222, 
	223, 224, 213, 0, 171, 225, 170, 171, 
	226, 170, 171, 196, 170, 171, 227, 185, 
	170, 171, 228, 170, 229, 42, 41, 43, 
	44, 45, 46, 46, 47, 48, 49, 50, 
	51, 52, 53, 41, 0, 16, 17, 18, 
	188, 0, 171, 230, 170, 171, 231, 170, 
	171, 232, 170, 171, 233, 170, 171, 234, 
	170, 171, 235, 170, 171, 236, 170, 171, 
	237, 170, 171, 238, 170, 171, 239, 170, 
	171, 240, 170, 171, 241, 170, 171, 242, 
	170, 171, 243, 170, 171, 226, 170, 171, 
	244, 170, 245, 171, 246, 170, 247, 171, 
	170, 171, 248, 170, 171, 196, 170, 171, 
	247, 170, 171, 249, 170, 171, 226, 170, 
	171, 250, 170, 171, 248, 170, 171, 251, 
	170, 171, 252, 185, 170, 171, 253, 170, 
	131, 42, 41, 43, 44, 45, 46, 46, 
	47, 48, 49, 50, 51, 52, 254, 53, 
	41, 0, 188, 0, 161, 0, 256, 255, 
	258, 257, 259, 258, 260, 261, 262, 263, 
	263, 261, 264, 265, 266, 267, 268, 260, 
	257, 269, 270, 271, 258, 257, 258, 272, 
	257, 258, 273, 257, 258, 274, 275, 257, 
	258, 276, 257, 277, 42, 41, 43, 44, 
	45, 46, 46, 47, 48, 49, 50, 51, 
	52, 53, 41, 0, 16, 17, 18, 278, 
	0, 279, 0, 273, 0, 258, 280, 257, 
	258, 281, 257, 258, 273, 257, 258, 282, 
	275, 257, 258, 283, 257, 284, 42, 41, 
	43, 44, 45, 46, 46, 47, 48, 49, 
	50, 51, 52, 53, 41, 0, 16, 17, 
	18, 278, 0, 258, 285, 257, 258, 286, 
	257, 258, 287, 257, 258, 288, 257, 258, 
	289, 257, 258, 290, 257, 258, 291, 257, 
	258, 292, 257, 258, 293, 257, 258, 294, 
	257, 258, 295, 257, 258, 296, 257, 258, 
	297, 257, 258, 298, 257, 258, 281, 269, 
	257, 258, 299, 257, 300, 258, 301, 257, 
	302, 258, 257, 258, 272, 257, 258, 302, 
	257, 258, 303, 257, 258, 281, 257, 258, 
	304, 257, 258, 305, 257, 258, 306, 273, 
	257, 258, 307, 257, 258, 308, 257, 309, 
	258, 310, 257, 311, 258, 257, 258, 312, 
	257, 258, 313, 257, 258, 314, 257, 258, 
	315, 257, 258, 272, 257, 258, 311, 257, 
	258, 316, 257, 258, 317, 275, 257, 258, 
	318, 257, 131, 42, 41, 43, 44, 45, 
	46, 46, 47, 48, 49, 50, 51, 52, 
	319, 53, 41, 0, 278, 0, 120, 320, 
	119, 120, 321, 119, 120, 322, 119, 120, 
	323, 119, 120, 324, 119, 120, 325, 119, 
	120, 326, 119, 120, 327, 119, 120, 328, 
	119, 120, 329, 119, 120, 330, 119, 120, 
	331, 119, 120, 332, 119, 120, 333, 119, 
	120, 128, 119, 120, 334, 119, 335, 120, 
	336, 119, 337, 120, 119, 120, 129, 119, 
	120, 337, 119, 120, 338, 339, 119, 120, 
	340, 119, 341, 120, 342, 119, 343, 343, 
	120, 119, 120, 129, 119, 120, 343, 119, 
	120, 344, 119, 120, 345, 130, 119, 120, 
	346, 119, 120, 347, 119, 348, 120, 349, 
	119, 350, 120, 119, 120, 351, 119, 120, 
	352, 119, 120, 353, 119, 120, 354, 119, 
	120, 129, 119, 120, 350, 119, 114, 0, 
	192, 63, 64, 62, 355, 0, 356, 0, 
	24, 357, 23, 24, 358, 23, 24, 356, 
	23, 24, 359, 38, 23, 24, 360, 23, 
	361, 42, 41, 43, 44, 45, 46, 46, 
	47, 48, 49, 50, 51, 52, 53, 41, 
	0, 16, 17, 18, 54, 0, 24, 362, 
	23, 24, 363, 23, 24, 364, 23, 24, 
	365, 23, 24, 366, 23, 24, 367, 23, 
	24, 368, 23, 24, 369, 23, 24, 370, 
	23, 24, 371, 23, 24, 372, 23, 24, 
	373, 23, 24, 374, 23, 24, 375, 23, 
	24, 358, 23, 24, 376, 23, 377, 24, 
	378, 23, 379, 24, 23, 24, 380, 23, 
	24, 356, 23, 24, 379, 23, 24, 381, 
	23, 24, 358, 23, 24, 382, 23, 24, 
	383, 23, 24, 384, 356, 23, 24, 385, 
	23, 24, 386, 23, 387, 24, 388, 23, 
	389, 24, 23, 24, 390, 23, 24, 391, 
	23, 24, 392, 23, 24, 393, 23, 24, 
	380, 23, 24, 389, 23, 24, 394, 23, 
	24, 395, 38, 23, 24, 396, 23, 131, 
	42, 41, 43, 44, 45, 46, 46, 47, 
	48, 49, 50, 51, 52, 397, 53, 41, 
	0, 54, 0, 398, 0, 2, 0, 399, 
	0
];

var _lexer_trans_targs = [
	0, 2, 17, 17, 18, 28, 30, 44, 
	46, 49, 50, 62, 64, 110, 115, 308, 
	3, 13, 100, 4, 5, 6, 7, 6, 
	7, 8, 7, 17, 267, 262, 281, 282, 
	288, 290, 303, 9, 263, 10, 260, 11, 
	12, 17, 17, 18, 28, 30, 44, 46, 
	49, 50, 62, 64, 110, 115, 258, 14, 
	106, 15, 16, 257, 17, 29, 16, 17, 
	29, 19, 20, 21, 22, 21, 21, 22, 
	21, 23, 23, 23, 24, 23, 23, 23, 
	24, 25, 26, 27, 17, 27, 28, 17, 
	29, 31, 32, 33, 34, 35, 36, 37, 
	38, 39, 40, 41, 42, 43, 310, 45, 
	47, 48, 17, 47, 46, 48, 44, 51, 
	52, 256, 53, 54, 55, 56, 57, 56, 
	57, 58, 57, 17, 218, 232, 233, 238, 
	59, 60, 61, 2, 63, 65, 80, 66, 
	67, 79, 68, 69, 70, 71, 72, 71, 
	72, 72, 17, 73, 74, 75, 78, 76, 
	77, 61, 81, 82, 159, 83, 84, 85, 
	158, 86, 87, 88, 89, 90, 91, 92, 
	93, 94, 93, 94, 95, 94, 17, 128, 
	123, 142, 143, 149, 151, 153, 96, 124, 
	97, 121, 98, 99, 108, 101, 102, 103, 
	104, 105, 107, 109, 61, 111, 112, 113, 
	114, 115, 116, 117, 119, 120, 118, 116, 
	117, 118, 116, 119, 2, 120, 18, 28, 
	30, 44, 46, 49, 50, 62, 64, 110, 
	115, 122, 123, 125, 126, 127, 129, 130, 
	131, 132, 133, 134, 135, 136, 137, 138, 
	139, 140, 141, 17, 144, 145, 148, 146, 
	147, 150, 152, 154, 155, 156, 157, 160, 
	161, 160, 161, 162, 161, 17, 178, 173, 
	192, 193, 198, 200, 213, 163, 165, 174, 
	164, 61, 166, 171, 167, 168, 169, 170, 
	172, 173, 175, 176, 177, 179, 180, 181, 
	182, 183, 184, 185, 186, 187, 188, 189, 
	190, 191, 17, 194, 195, 197, 196, 199, 
	201, 202, 203, 204, 205, 206, 212, 207, 
	208, 209, 210, 211, 214, 215, 216, 217, 
	219, 220, 221, 222, 223, 224, 225, 226, 
	227, 228, 229, 230, 231, 17, 234, 235, 
	237, 236, 239, 244, 240, 241, 243, 242, 
	245, 246, 247, 248, 249, 255, 250, 251, 
	252, 253, 254, 259, 61, 261, 262, 264, 
	265, 266, 268, 269, 270, 271, 272, 273, 
	274, 275, 276, 277, 278, 279, 280, 17, 
	283, 284, 287, 285, 286, 289, 291, 292, 
	293, 294, 295, 296, 302, 297, 298, 299, 
	300, 301, 304, 305, 306, 307, 309, 0
];

var _lexer_trans_actions = [
	43, 29, 0, 54, 3, 1, 0, 29, 
	1, 29, 29, 29, 29, 29, 35, 0, 
	0, 0, 0, 0, 0, 57, 144, 0, 
	54, 84, 0, 72, 33, 84, 84, 84, 
	84, 84, 84, 0, 0, 0, 0, 15, 
	63, 31, 130, 60, 57, 31, 63, 57, 
	63, 63, 63, 63, 63, 66, 0, 0, 
	0, 0, 57, 57, 149, 126, 0, 110, 
	23, 0, 0, 7, 139, 48, 0, 102, 
	9, 5, 45, 134, 45, 0, 33, 122, 
	33, 33, 0, 11, 106, 0, 0, 114, 
	25, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 27, 118, 27, 51, 0, 0, 0, 
	0, 0, 0, 0, 0, 57, 144, 0, 
	54, 84, 0, 69, 33, 84, 84, 84, 
	0, 0, 13, 63, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 57, 144, 0, 
	54, 0, 81, 84, 0, 0, 0, 0, 
	0, 21, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	57, 144, 0, 54, 84, 0, 78, 33, 
	84, 84, 84, 84, 84, 84, 0, 0, 
	0, 0, 19, 63, 0, 0, 0, 57, 
	0, 0, 0, 0, 19, 0, 0, 0, 
	57, 0, 0, 37, 37, 54, 37, 87, 
	0, 0, 39, 0, 96, 0, 93, 90, 
	41, 96, 90, 96, 96, 96, 96, 96, 
	99, 0, 0, 0, 19, 63, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 19, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 19, 0, 57, 
	144, 0, 54, 84, 0, 75, 33, 84, 
	84, 84, 84, 84, 84, 0, 0, 0, 
	0, 17, 0, 0, 17, 63, 0, 0, 
	0, 0, 0, 17, 63, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 17, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 17, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 13, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 15, 0, 0, 0, 
	15, 63, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 15, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 15, 0, 0, 0
];

var _lexer_eof_actions = [
	0, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43
];

var lexer_start = 1;
var lexer_first_final = 310;
var lexer_error = 0;

var lexer_en_main = 1;


/* line 129 "ragel/i18n/en_old.js.rl" */

/* line 130 "ragel/i18n/en_old.js.rl" */

/* line 131 "ragel/i18n/en_old.js.rl" */

/* line 132 "ragel/i18n/en_old.js.rl" */

var Lexer = function(listener) {
  // Check that listener has the required functions
  var events = ['comment', 'tag', 'feature', 'background', 'scenario', 'scenario_outline', 'examples', 'step', 'doc_string', 'row', 'eof'];
  for(var i=0, len=events.length; i<len; i++) {
    var event = events[i];
    if(typeof listener[event] != 'function') {
      throw new Error("Error. No " + event + " function exists on " + JSON.stringify(listener));
    }
  }
  this.listener = listener;
};

Lexer.prototype.scan = function(data) {
  var ending = "\n%_FEATURE_END_%";
  if(typeof data == 'string') {
    data = this.stringToBytes(data + ending);
  } else if(typeof Buffer != 'undefined' && Buffer.isBuffer(data)) {
    // Node.js
    var buf = new Buffer(data.length + ending.length);
    data.copy(buf, 0, 0);
    new Buffer(ending).copy(buf, data.length, 0);
    data = buf;
  }
  var eof = pe = data.length;
  var p = 0;

  this.line_number = 1;
  this.last_newline = 0;
  var signedCharValue=function(v){return v > 127 ? v-256 : v; };

  
/* line 662 "js/lib/gherkin/lexer/en_old.js" */
{
	  this.cs = lexer_start;
} /* JSCodeGen::writeInit */

/* line 164 "ragel/i18n/en_old.js.rl" */
  
/* line 669 "js/lib/gherkin/lexer/en_old.js" */
{
	var _klen, _trans, _keys, _ps, _widec, _acts, _nacts;
	var _goto_level, _resume, _eof_trans, _again, _test_eof;
	var _out;
	_klen = _trans = _keys = _acts = _nacts = null;
	_goto_level = 0;
	_resume = 10;
	_eof_trans = 15;
	_again = 20;
	_test_eof = 30;
	_out = 40;
	while (true) {
	_trigger_goto = false;
	if (_goto_level <= 0) {
	if (p == pe) {
		_goto_level = _test_eof;
		continue;
	}
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	}
	if (_goto_level <= _resume) {
	_keys = _lexer_key_offsets[ this.cs];
	_trans = _lexer_index_offsets[ this.cs];
	_klen = _lexer_single_lengths[ this.cs];
	_break_match = false;
	
	do {
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + _klen - 1;

	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + ( (_upper - _lower) >> 1 );

	        if (( signedCharValue(data[p])) < _lexer_trans_keys[_mid]) {
	           _upper = _mid - 1;
	        } else if (( signedCharValue(data[p])) > _lexer_trans_keys[_mid]) {
	           _lower = _mid + 1;
	        } else {
	           _trans += (_mid - _keys);
	           _break_match = true;
	           break;
	        };
	     } /* while */
	     if (_break_match) { break; }
	     _keys += _klen;
	     _trans += _klen;
	  }
	  _klen = _lexer_range_lengths[ this.cs];
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + (_klen << 1) - 2;
	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + (((_upper-_lower) >> 1) & ~1);
	        if (( signedCharValue(data[p])) < _lexer_trans_keys[_mid]) {
	          _upper = _mid - 2;
	         } else if (( signedCharValue(data[p])) > _lexer_trans_keys[_mid+1]) {
	          _lower = _mid + 2;
	        } else {
	          _trans += ((_mid - _keys) >> 1);
	          _break_match = true;
	          break;
	        }
	     } /* while */
	     if (_break_match) { break; }
	     _trans += _klen
	  }
	} while (false);
	_trans = _lexer_indicies[_trans];
	 this.cs = _lexer_trans_targs[_trans];
	if (_lexer_trans_actions[_trans] != 0) {
		_acts = _lexer_trans_actions[_trans];
		_nacts = _lexer_actions[_acts];
		_acts += 1;
		while (_nacts > 0) {
			_nacts -= 1;
			_acts += 1;
			switch (_lexer_actions[_acts - 1]) {
case 0:
/* line 6 "ragel/i18n/en_old.js.rl" */

    this.content_start = p;
    this.current_line = this.line_number;
    this.start_col = p - this.last_newline - (this.keyword+':').length;
  		break;
case 1:
/* line 12 "ragel/i18n/en_old.js.rl" */

    this.current_line = this.line_number;
    this.start_col = p - this.last_newline;
  		break;
case 2:
/* line 17 "ragel/i18n/en_old.js.rl" */

    this.content_start = p;
  		break;
case 3:
/* line 21 "ragel/i18n/en_old.js.rl" */

    this.docstring_content_type_start = p;
  		break;
case 4:
/* line 25 "ragel/i18n/en_old.js.rl" */

    this.docstring_content_type_end = p;
  		break;
case 5:
/* line 29 "ragel/i18n/en_old.js.rl" */

    var con = this.unindent(
      this.start_col, 
      this.bytesToString(data.slice(this.content_start, this.next_keyword_start-1)).replace(/(\r?\n)?([\t ])*$/, '').replace(/\\\"\\\"\\\"/mg, '"""')
    );
    var con_type = this.bytesToString(data.slice(this.docstring_content_type_start, this.docstring_content_type_end)).trim();
    this.listener.doc_string(con_type, con, this.current_line); 
  		break;
case 6:
/* line 38 "ragel/i18n/en_old.js.rl" */

    p = this.store_keyword_content('feature', data, p, eof);
  		break;
case 7:
/* line 42 "ragel/i18n/en_old.js.rl" */

    p = this.store_keyword_content('background', data, p, eof);
  		break;
case 8:
/* line 46 "ragel/i18n/en_old.js.rl" */

    p = this.store_keyword_content('scenario', data, p, eof);
  		break;
case 9:
/* line 50 "ragel/i18n/en_old.js.rl" */

    p = this.store_keyword_content('scenario_outline', data, p, eof);
  		break;
case 10:
/* line 54 "ragel/i18n/en_old.js.rl" */

    p = this.store_keyword_content('examples', data, p, eof);
  		break;
case 11:
/* line 58 "ragel/i18n/en_old.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.step(this.keyword, con, this.current_line);
  		break;
case 12:
/* line 63 "ragel/i18n/en_old.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.comment(con, this.line_number);
    this.keyword_start = null;
  		break;
case 13:
/* line 69 "ragel/i18n/en_old.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.tag(con, this.line_number);
    this.keyword_start = null;
  		break;
case 14:
/* line 75 "ragel/i18n/en_old.js.rl" */

    this.line_number++;
  		break;
case 15:
/* line 79 "ragel/i18n/en_old.js.rl" */

    this.last_newline = p + 1;
  		break;
case 16:
/* line 83 "ragel/i18n/en_old.js.rl" */

    this.keyword_start = this.keyword_start || p;
  		break;
case 17:
/* line 87 "ragel/i18n/en_old.js.rl" */

    this.keyword = this.bytesToString(data.slice(this.keyword_start, p)).replace(/:$/, '');
    this.keyword_start = null;
  		break;
case 18:
/* line 92 "ragel/i18n/en_old.js.rl" */

    this.next_keyword_start = p;
  		break;
case 19:
/* line 96 "ragel/i18n/en_old.js.rl" */

    p = p - 1;
    current_row = [];
    this.current_line = this.line_number;
  		break;
case 20:
/* line 102 "ragel/i18n/en_old.js.rl" */

    this.content_start = p;
  		break;
case 21:
/* line 106 "ragel/i18n/en_old.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    current_row.push(con.replace(/\\\|/, "|").replace(/\\n/, "\n").replace(/\\\\/, "\\"));
  		break;
case 22:
/* line 111 "ragel/i18n/en_old.js.rl" */

    this.listener.row(current_row, this.current_line);
  		break;
case 23:
/* line 115 "ragel/i18n/en_old.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw new Error("Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.");
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 896 "js/lib/gherkin/lexer/en_old.js" */
			} /* action switch */
		}
	}
	if (_trigger_goto) {
		continue;
	}
	}
	if (_goto_level <= _again) {
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	p += 1;
	if (p != pe) {
		_goto_level = _resume;
		continue;
	}
	}
	if (_goto_level <= _test_eof) {
	if (p == eof) {
	__acts = _lexer_eof_actions[ this.cs];
	__nacts =  _lexer_actions[__acts];
	__acts += 1;
	while (__nacts > 0) {
		__nacts -= 1;
		__acts += 1;
		switch (_lexer_actions[__acts - 1]) {
case 23:
/* line 115 "ragel/i18n/en_old.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw new Error("Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.");
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 935 "js/lib/gherkin/lexer/en_old.js" */
		} /* eof action switch */
	}
	if (_trigger_goto) {
		continue;
	}
}
	}
	if (_goto_level <= _out) {
		break;
	}
	}
	}

/* line 165 "ragel/i18n/en_old.js.rl" */
};


/*
 * Decode utf-8 byte sequence to string.
 */
var decodeUtf8 = function(bytes) {
  var result = "";
  var i = 0;
  var wc;
  var c;

  while (i < bytes.length) {
    /* parse as UTF-8 lead byte */
    wc = bytes[i++];
    if (wc < 0x80) {
      count = 0;
    } else if (wc < 0xC2 || wc >= 0xF8) {
      throw new Error("input is not a valid UTF-8 lead octet");
    } else if (wc < 0xE0) {
      count = 1;
      wc = (wc & 0x1F) << 6;
    } else if (wc < 0xF0) {
      count = 2;
      wc = (wc & 0x0F) << 12;
    } else /* wc < 0xF8 */ {
      count = 3;
      wc = (wc & 0x07) << 18;
    }

    /* parse trail bytes, if any */
    while (count) {
      if (!(i < bytes.length)) {
        throw new Error("short read");
      }
      if ((c = bytes[i++] ^ 0x80) > 0x3F) {
        throw new Error("input is not a valid UTF-8 trail octet");
      }
      wc |= c << (6 * --count);
      if (wc < (1 << (5 * count + 6))) {
        throw new Error("invalid non-minimal encoded input");
      }
    }

    /* handle conversion to UTF-16 if needed */
    if (wc > 0xFFFF) {
      wc -= 0x10000;
      result += String.fromCharCode(0xD800 + (wc >> 10));
      wc = 0xDC00 + (wc & 0x3FF);
    }
    result += String.fromCharCode(wc);
  }

  return result;
};

/*
 * Encode string to an array of bytes using utf8 encoding.
 *
 * Javascript internally stores character data as utf16 (like java).
 * String.charCodeAt() does *not* produce unicode points, but simply
 * reflects this internal representation. Thus, it is necessary
 * to first decode the utf-16 representation before encoding to
 * utf-8.
 */
var encodeUtf8 = function(string) {
  var bytes = [];
  var i = 0;
  var j = 0;
  var wc;

  while (i < string.length) {
    wc = string.charCodeAt(i++);
    if (wc >= 0xD800 && wc <= 0xDBFF && i < string.length && string.charCodeAt(i) >= 0xDC00 && string.charCodeAt(i) <= 0xDFFF) {
      /* decode UTF-16 */
      wc = 0x10000 + ((wc & 0x3FF) << 10) + (string.charCodeAt(i++) & 0x3FF);
    }

    /* emit lead byte */
    if (wc < 0x80) {
      bytes[j++] = wc;
      count = 0;
    } else if (wc < 0x800) {
      bytes[j++] = 0xC0 | (wc >> 6);
      count = 1;
    } else if (wc < 0x10000) {
      bytes[j++] = 0xE0 | (wc >> 12);
      count = 2;
    } else {
      /* SMP: 21-bit Unicode */
      bytes[j++] = 0xF0 | (wc >> 18);
      count = 3;
    }

    /* emit trail bytes, if any */
    while (count) {
      bytes[j++] = 0x80 | ((wc >> (6 * --count)) & 0x3F);
    }
  }

  return bytes;

};

Lexer.prototype.bytesToString = function(bytes) {
  if(typeof bytes.write == 'function') {
    // Node.js
    return bytes.toString('utf-8');
  }
  return decodeUtf8(bytes);
};

Lexer.prototype.stringToBytes = function(string) {
  return encodeUtf8(string);
};

Lexer.prototype.unindent = function(startcol, text) {
  startcol = startcol || 0;
  return text.replace(new RegExp('^[\t ]{0,' + startcol + '}', 'gm'), ''); 
};

Lexer.prototype.store_keyword_content = function(event, data, p, eof) {
  var end_point = (!this.next_keyword_start || (p == eof)) ? p : this.next_keyword_start;
  var content = this.unindent(this.start_col + 2, this.bytesToString(data.slice(this.content_start, end_point))).replace(/\s+$/,"");
  var content_lines = content.split("\n")
  var name = content_lines.shift() || "";
  name = name.trim();
  var description = content_lines.join("\n");
  this.listener[event](this.keyword, name, description, this.current_line);
  var nks = this.next_keyword_start;
  this.next_keyword_start = null;
  return nks ? nks - 1 : p;
};

Lexer.prototype.current_line_content = function(data, p) {
  var rest = Array.prototype.slice.call(data,this.last_newline, -1);
  var end = rest.indexOf(10) || -1;
  return this.bytesToString(rest.slice(0, end)).trim();
};

// Node.js export
if(typeof module !== 'undefined') {
  module.exports = Lexer;
}
// Require.js export
if (typeof define !== 'undefined') {
  if(define.amd) {
    define('gherkin/lexer/en_old', [], function() {
      return Lexer;
    });
  } else {
    define('gherkin/lexer/en_old', function(require, exports, module) {
      exports.Lexer = Lexer;
    });
  }
}

})();

}).call(this,require("buffer").Buffer)

},{"buffer":69}],198:[function(require,module,exports){
(function (Buffer){

/* line 1 "ragel/i18n/en_pirate.js.rl" */
;(function() {


/* line 126 "ragel/i18n/en_pirate.js.rl" */



/* line 11 "js/lib/gherkin/lexer/en_pirate.js" */
var _lexer_actions = [
	0, 1, 0, 1, 1, 1, 2, 1, 
	3, 1, 4, 1, 5, 1, 6, 1, 
	7, 1, 8, 1, 9, 1, 10, 1, 
	11, 1, 12, 1, 13, 1, 16, 1, 
	17, 1, 18, 1, 19, 1, 20, 1, 
	21, 1, 22, 1, 23, 2, 2, 18, 
	2, 3, 4, 2, 13, 0, 2, 14, 
	15, 2, 17, 0, 2, 17, 1, 2, 
	17, 16, 2, 17, 19, 2, 18, 6, 
	2, 18, 7, 2, 18, 8, 2, 18, 
	9, 2, 18, 10, 2, 18, 16, 2, 
	20, 21, 2, 22, 0, 2, 22, 1, 
	2, 22, 16, 2, 22, 19, 3, 4, 
	14, 15, 3, 5, 14, 15, 3, 11, 
	14, 15, 3, 12, 14, 15, 3, 13, 
	14, 15, 3, 14, 15, 18, 3, 17, 
	0, 11, 3, 17, 14, 15, 4, 2, 
	14, 15, 18, 4, 3, 4, 14, 15, 
	4, 17, 0, 14, 15, 5, 17, 0, 
	11, 14, 15
];

var _lexer_key_offsets = [
	0, 0, 19, 37, 38, 39, 41, 43, 
	48, 53, 58, 63, 67, 71, 73, 74, 
	75, 76, 77, 78, 79, 80, 81, 82, 
	83, 84, 85, 86, 87, 88, 89, 91, 
	93, 98, 105, 110, 113, 114, 115, 116, 
	117, 118, 119, 120, 121, 122, 123, 124, 
	125, 137, 139, 141, 143, 145, 147, 149, 
	151, 153, 155, 157, 159, 161, 163, 165, 
	167, 169, 171, 173, 175, 177, 179, 181, 
	183, 185, 187, 205, 206, 207, 208, 209, 
	210, 211, 212, 213, 214, 215, 216, 217, 
	218, 219, 220, 221, 222, 223, 224, 225, 
	226, 227, 228, 229, 230, 231, 232, 233, 
	234, 235, 242, 244, 246, 248, 250, 252, 
	254, 256, 258, 260, 262, 264, 265, 266, 
	267, 268, 269, 270, 271, 272, 273, 274, 
	275, 276, 277, 278, 279, 294, 296, 298, 
	300, 302, 304, 306, 308, 310, 312, 314, 
	316, 318, 320, 322, 324, 328, 330, 332, 
	334, 336, 338, 340, 342, 344, 346, 348, 
	350, 352, 354, 356, 358, 360, 362, 364, 
	366, 368, 370, 372, 374, 376, 378, 380, 
	382, 384, 386, 388, 390, 392, 394, 396, 
	398, 400, 402, 404, 406, 408, 410, 412, 
	414, 416, 418, 420, 422, 424, 426, 428, 
	430, 432, 434, 436, 438, 440, 442, 444, 
	446, 448, 450, 452, 454, 456, 458, 460, 
	462, 464, 465, 466, 467, 468, 469, 470, 
	471, 472, 473, 474, 475, 476, 477, 478, 
	479, 480, 481, 482, 483, 484, 485, 486, 
	487, 488, 489, 490, 491, 492, 493, 494, 
	495, 496, 497, 510, 512, 514, 516, 518, 
	520, 522, 524, 526, 528, 530, 532, 534, 
	536, 538, 540, 544, 546, 548, 550, 552, 
	554, 556, 558, 560, 562, 564, 566, 568, 
	570, 572, 574, 576, 578, 580, 582, 584, 
	586, 588, 590, 592, 594, 596, 598, 600, 
	602, 604, 606, 608, 610, 612, 614, 616, 
	618, 620, 622, 624, 626, 628, 630, 632, 
	634, 636, 637, 638, 639, 640, 641, 642, 
	643, 644, 645, 646, 660, 662, 664, 666, 
	668, 670, 672, 674, 676, 678, 680, 682, 
	684, 686, 688, 690, 694, 696, 698, 700, 
	702, 704, 706, 708, 710, 712, 714, 716, 
	718, 720, 722, 724, 726, 728, 730, 732, 
	734, 736, 738, 740, 742, 744, 746, 748, 
	750, 752, 754, 756, 758, 760, 762, 764, 
	766, 768, 770, 772, 774, 776, 778, 780, 
	782, 784, 786, 788, 790, 792, 794, 796, 
	798, 800, 802, 804, 806, 808, 810, 812, 
	814, 816, 818, 822, 828, 831, 833, 839, 
	857, 859, 861, 863, 865, 867, 869, 871, 
	873, 875, 877, 879, 881, 883, 885, 887, 
	889, 891, 893, 895, 897, 899, 901, 903, 
	905, 907, 909, 911, 913, 915, 917, 919, 
	921, 923, 925, 927, 929, 931, 933, 935, 
	937, 939, 941, 943, 945, 947, 949, 951, 
	953, 955, 956, 957, 958, 959, 960, 961
];

var _lexer_trans_keys = [
	10, 32, 34, 35, 37, 42, 64, 65, 
	66, 68, 71, 72, 76, 83, 89, 124, 
	239, 9, 13, 10, 32, 34, 35, 37, 
	42, 64, 65, 66, 68, 71, 72, 76, 
	83, 89, 124, 9, 13, 34, 34, 10, 
	13, 10, 13, 10, 32, 34, 9, 13, 
	10, 32, 34, 9, 13, 10, 32, 34, 
	9, 13, 10, 32, 34, 9, 13, 10, 
	32, 9, 13, 10, 32, 9, 13, 10, 
	13, 10, 95, 70, 69, 65, 84, 85, 
	82, 69, 95, 69, 78, 68, 95, 37, 
	32, 10, 13, 10, 13, 13, 32, 64, 
	9, 10, 9, 10, 13, 32, 64, 11, 
	12, 10, 32, 64, 9, 13, 104, 118, 
	121, 111, 121, 32, 109, 97, 116, 101, 
	121, 33, 58, 10, 10, 10, 32, 35, 
	37, 64, 65, 68, 72, 83, 89, 9, 
	13, 10, 95, 10, 70, 10, 69, 10, 
	65, 10, 84, 10, 85, 10, 82, 10, 
	69, 10, 95, 10, 69, 10, 78, 10, 
	68, 10, 95, 10, 37, 10, 104, 10, 
	111, 10, 121, 10, 32, 10, 109, 10, 
	97, 10, 116, 10, 101, 10, 121, 10, 
	33, 10, 58, 10, 32, 34, 35, 37, 
	42, 64, 65, 66, 68, 71, 72, 76, 
	83, 89, 124, 9, 13, 108, 105, 109, 
	101, 121, 33, 101, 97, 100, 32, 109, 
	101, 110, 32, 116, 101, 108, 108, 32, 
	110, 111, 32, 116, 97, 108, 101, 115, 
	58, 10, 10, 10, 32, 35, 65, 124, 
	9, 13, 10, 104, 10, 111, 10, 121, 
	10, 32, 10, 109, 10, 97, 10, 116, 
	10, 101, 10, 121, 10, 33, 10, 58, 
	97, 110, 103, 119, 97, 101, 97, 118, 
	101, 32, 116, 111, 58, 10, 10, 10, 
	32, 35, 37, 42, 64, 65, 66, 71, 
	72, 76, 83, 89, 9, 13, 10, 95, 
	10, 70, 10, 69, 10, 65, 10, 84, 
	10, 85, 10, 82, 10, 69, 10, 95, 
	10, 69, 10, 78, 10, 68, 10, 95, 
	10, 37, 10, 32, 10, 104, 118, 121, 
	10, 111, 10, 121, 10, 32, 10, 109, 
	10, 97, 10, 116, 10, 101, 10, 121, 
	10, 33, 10, 58, 10, 97, 10, 115, 
	10, 116, 10, 33, 10, 101, 10, 108, 
	10, 105, 10, 109, 10, 101, 10, 121, 
	10, 97, 10, 110, 10, 103, 10, 119, 
	10, 97, 10, 101, 10, 97, 10, 118, 
	10, 101, 10, 32, 10, 116, 10, 111, 
	10, 101, 10, 116, 10, 32, 10, 103, 
	10, 111, 10, 32, 10, 97, 10, 110, 
	10, 100, 10, 32, 10, 104, 10, 97, 
	10, 117, 10, 108, 10, 104, 10, 105, 
	10, 118, 10, 101, 10, 114, 10, 32, 
	10, 109, 10, 101, 10, 32, 10, 116, 
	10, 105, 10, 109, 10, 98, 10, 101, 
	10, 114, 10, 115, 10, 111, 10, 45, 
	10, 104, 10, 111, 10, 45, 10, 104, 
	101, 116, 32, 103, 111, 32, 97, 110, 
	100, 32, 104, 97, 117, 108, 104, 105, 
	118, 101, 114, 32, 109, 101, 32, 116, 
	105, 109, 98, 101, 114, 115, 58, 10, 
	10, 10, 32, 35, 37, 42, 64, 65, 
	66, 71, 72, 76, 9, 13, 10, 95, 
	10, 70, 10, 69, 10, 65, 10, 84, 
	10, 85, 10, 82, 10, 69, 10, 95, 
	10, 69, 10, 78, 10, 68, 10, 95, 
	10, 37, 10, 32, 10, 104, 118, 121, 
	10, 111, 10, 121, 10, 32, 10, 109, 
	10, 97, 10, 116, 10, 101, 10, 121, 
	10, 33, 10, 58, 10, 97, 10, 115, 
	10, 116, 10, 33, 10, 101, 10, 108, 
	10, 105, 10, 109, 10, 101, 10, 121, 
	10, 97, 10, 110, 10, 103, 10, 119, 
	10, 97, 10, 101, 10, 97, 10, 118, 
	10, 101, 10, 32, 10, 116, 10, 111, 
	10, 101, 10, 116, 10, 32, 10, 103, 
	10, 111, 10, 32, 10, 97, 10, 110, 
	10, 100, 10, 32, 10, 104, 10, 97, 
	10, 117, 10, 108, 111, 45, 104, 111, 
	45, 104, 111, 58, 10, 10, 10, 32, 
	35, 37, 42, 64, 65, 66, 71, 72, 
	76, 83, 9, 13, 10, 95, 10, 70, 
	10, 69, 10, 65, 10, 84, 10, 85, 
	10, 82, 10, 69, 10, 95, 10, 69, 
	10, 78, 10, 68, 10, 95, 10, 37, 
	10, 32, 10, 104, 118, 121, 10, 111, 
	10, 121, 10, 32, 10, 109, 10, 97, 
	10, 116, 10, 101, 10, 121, 10, 33, 
	10, 58, 10, 97, 10, 115, 10, 116, 
	10, 33, 10, 101, 10, 108, 10, 105, 
	10, 109, 10, 101, 10, 121, 10, 97, 
	10, 110, 10, 103, 10, 119, 10, 97, 
	10, 101, 10, 97, 10, 118, 10, 101, 
	10, 32, 10, 116, 10, 111, 10, 101, 
	10, 116, 10, 32, 10, 103, 10, 111, 
	10, 32, 10, 97, 10, 110, 10, 100, 
	10, 32, 10, 104, 10, 97, 10, 117, 
	10, 108, 10, 104, 10, 105, 10, 118, 
	10, 101, 10, 114, 10, 32, 10, 109, 
	10, 101, 10, 32, 10, 116, 10, 105, 
	10, 109, 10, 98, 10, 101, 10, 114, 
	10, 115, 32, 124, 9, 13, 10, 32, 
	92, 124, 9, 13, 10, 92, 124, 10, 
	92, 10, 32, 92, 124, 9, 13, 10, 
	32, 34, 35, 37, 42, 64, 65, 66, 
	68, 71, 72, 76, 83, 89, 124, 9, 
	13, 10, 101, 10, 97, 10, 100, 10, 
	32, 10, 109, 10, 101, 10, 110, 10, 
	32, 10, 116, 10, 101, 10, 108, 10, 
	108, 10, 32, 10, 110, 10, 111, 10, 
	32, 10, 116, 10, 97, 10, 108, 10, 
	101, 10, 115, 10, 101, 10, 97, 10, 
	118, 10, 101, 10, 32, 10, 116, 10, 
	111, 10, 104, 10, 105, 10, 118, 10, 
	101, 10, 114, 10, 32, 10, 109, 10, 
	101, 10, 32, 10, 116, 10, 105, 10, 
	109, 10, 98, 10, 101, 10, 114, 10, 
	111, 10, 45, 10, 104, 10, 111, 10, 
	45, 10, 104, 97, 115, 116, 101, 187, 
	191, 0
];

var _lexer_single_lengths = [
	0, 17, 16, 1, 1, 2, 2, 3, 
	3, 3, 3, 2, 2, 2, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 2, 2, 
	3, 5, 3, 3, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	10, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 16, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 5, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 13, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 4, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 11, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 4, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 12, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 4, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 4, 3, 2, 4, 16, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 1, 1, 1, 1, 1, 1, 0
];

var _lexer_range_lengths = [
	0, 1, 1, 0, 0, 0, 0, 1, 
	1, 1, 1, 1, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 1, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 1, 0, 0, 1, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0
];

var _lexer_index_offsets = [
	0, 0, 19, 37, 39, 41, 44, 47, 
	52, 57, 62, 67, 71, 75, 78, 80, 
	82, 84, 86, 88, 90, 92, 94, 96, 
	98, 100, 102, 104, 106, 108, 110, 113, 
	116, 121, 128, 133, 137, 139, 141, 143, 
	145, 147, 149, 151, 153, 155, 157, 159, 
	161, 173, 176, 179, 182, 185, 188, 191, 
	194, 197, 200, 203, 206, 209, 212, 215, 
	218, 221, 224, 227, 230, 233, 236, 239, 
	242, 245, 248, 266, 268, 270, 272, 274, 
	276, 278, 280, 282, 284, 286, 288, 290, 
	292, 294, 296, 298, 300, 302, 304, 306, 
	308, 310, 312, 314, 316, 318, 320, 322, 
	324, 326, 333, 336, 339, 342, 345, 348, 
	351, 354, 357, 360, 363, 366, 368, 370, 
	372, 374, 376, 378, 380, 382, 384, 386, 
	388, 390, 392, 394, 396, 411, 414, 417, 
	420, 423, 426, 429, 432, 435, 438, 441, 
	444, 447, 450, 453, 456, 461, 464, 467, 
	470, 473, 476, 479, 482, 485, 488, 491, 
	494, 497, 500, 503, 506, 509, 512, 515, 
	518, 521, 524, 527, 530, 533, 536, 539, 
	542, 545, 548, 551, 554, 557, 560, 563, 
	566, 569, 572, 575, 578, 581, 584, 587, 
	590, 593, 596, 599, 602, 605, 608, 611, 
	614, 617, 620, 623, 626, 629, 632, 635, 
	638, 641, 644, 647, 650, 653, 656, 659, 
	662, 665, 667, 669, 671, 673, 675, 677, 
	679, 681, 683, 685, 687, 689, 691, 693, 
	695, 697, 699, 701, 703, 705, 707, 709, 
	711, 713, 715, 717, 719, 721, 723, 725, 
	727, 729, 731, 744, 747, 750, 753, 756, 
	759, 762, 765, 768, 771, 774, 777, 780, 
	783, 786, 789, 794, 797, 800, 803, 806, 
	809, 812, 815, 818, 821, 824, 827, 830, 
	833, 836, 839, 842, 845, 848, 851, 854, 
	857, 860, 863, 866, 869, 872, 875, 878, 
	881, 884, 887, 890, 893, 896, 899, 902, 
	905, 908, 911, 914, 917, 920, 923, 926, 
	929, 932, 934, 936, 938, 940, 942, 944, 
	946, 948, 950, 952, 966, 969, 972, 975, 
	978, 981, 984, 987, 990, 993, 996, 999, 
	1002, 1005, 1008, 1011, 1016, 1019, 1022, 1025, 
	1028, 1031, 1034, 1037, 1040, 1043, 1046, 1049, 
	1052, 1055, 1058, 1061, 1064, 1067, 1070, 1073, 
	1076, 1079, 1082, 1085, 1088, 1091, 1094, 1097, 
	1100, 1103, 1106, 1109, 1112, 1115, 1118, 1121, 
	1124, 1127, 1130, 1133, 1136, 1139, 1142, 1145, 
	1148, 1151, 1154, 1157, 1160, 1163, 1166, 1169, 
	1172, 1175, 1178, 1181, 1184, 1187, 1190, 1193, 
	1196, 1199, 1202, 1206, 1212, 1216, 1219, 1225, 
	1243, 1246, 1249, 1252, 1255, 1258, 1261, 1264, 
	1267, 1270, 1273, 1276, 1279, 1282, 1285, 1288, 
	1291, 1294, 1297, 1300, 1303, 1306, 1309, 1312, 
	1315, 1318, 1321, 1324, 1327, 1330, 1333, 1336, 
	1339, 1342, 1345, 1348, 1351, 1354, 1357, 1360, 
	1363, 1366, 1369, 1372, 1375, 1378, 1381, 1384, 
	1387, 1390, 1392, 1394, 1396, 1398, 1400, 1402
];

var _lexer_indicies = [
	2, 1, 3, 4, 5, 6, 7, 8, 
	9, 10, 11, 12, 13, 14, 15, 16, 
	17, 1, 0, 2, 1, 3, 4, 5, 
	6, 7, 8, 9, 10, 11, 12, 13, 
	14, 15, 16, 1, 0, 18, 0, 19, 
	0, 21, 22, 20, 24, 25, 23, 28, 
	27, 29, 27, 26, 32, 31, 33, 31, 
	30, 32, 31, 34, 31, 30, 32, 31, 
	35, 31, 30, 37, 36, 36, 0, 2, 
	38, 38, 0, 40, 41, 39, 2, 0, 
	42, 0, 43, 0, 44, 0, 45, 0, 
	46, 0, 47, 0, 48, 0, 49, 0, 
	50, 0, 51, 0, 52, 0, 53, 0, 
	54, 0, 55, 0, 56, 0, 58, 59, 
	57, 61, 62, 60, 0, 0, 0, 0, 
	63, 64, 65, 64, 64, 67, 66, 63, 
	2, 68, 7, 68, 0, 69, 70, 71, 
	0, 72, 0, 73, 0, 74, 0, 75, 
	0, 76, 0, 77, 0, 78, 0, 79, 
	0, 80, 0, 81, 0, 83, 82, 85, 
	84, 85, 86, 87, 88, 87, 89, 90, 
	91, 92, 93, 86, 84, 85, 94, 84, 
	85, 95, 84, 85, 96, 84, 85, 97, 
	84, 85, 98, 84, 85, 99, 84, 85, 
	100, 84, 85, 101, 84, 85, 102, 84, 
	85, 103, 84, 85, 104, 84, 85, 105, 
	84, 85, 106, 84, 85, 107, 84, 85, 
	108, 84, 85, 109, 84, 85, 110, 84, 
	85, 111, 84, 85, 112, 84, 85, 113, 
	84, 85, 114, 84, 85, 115, 84, 85, 
	116, 84, 85, 117, 84, 85, 118, 84, 
	120, 119, 121, 122, 123, 124, 125, 126, 
	127, 128, 129, 130, 131, 132, 133, 134, 
	119, 0, 135, 0, 136, 0, 137, 0, 
	138, 0, 139, 0, 140, 0, 141, 0, 
	142, 0, 143, 0, 144, 0, 145, 0, 
	146, 0, 147, 0, 148, 0, 149, 0, 
	150, 0, 151, 0, 152, 0, 153, 0, 
	154, 0, 155, 0, 156, 0, 157, 0, 
	158, 0, 159, 0, 160, 0, 161, 0, 
	162, 0, 164, 163, 166, 165, 166, 167, 
	168, 169, 168, 167, 165, 166, 170, 165, 
	166, 171, 165, 166, 172, 165, 166, 173, 
	165, 166, 174, 165, 166, 175, 165, 166, 
	176, 165, 166, 177, 165, 166, 178, 165, 
	166, 179, 165, 166, 180, 165, 181, 0, 
	182, 0, 183, 0, 184, 0, 138, 0, 
	185, 0, 186, 0, 187, 0, 188, 0, 
	189, 0, 190, 0, 191, 0, 192, 0, 
	194, 193, 196, 195, 196, 197, 198, 199, 
	200, 198, 201, 202, 203, 204, 205, 206, 
	207, 197, 195, 196, 208, 195, 196, 209, 
	195, 196, 210, 195, 196, 211, 195, 196, 
	212, 195, 196, 213, 195, 196, 214, 195, 
	196, 215, 195, 196, 216, 195, 196, 217, 
	195, 196, 218, 195, 196, 219, 195, 196, 
	220, 195, 196, 221, 195, 196, 222, 195, 
	196, 223, 224, 225, 195, 196, 226, 195, 
	196, 227, 195, 196, 228, 195, 196, 229, 
	195, 196, 230, 195, 196, 231, 195, 196, 
	232, 195, 196, 233, 195, 196, 234, 195, 
	196, 222, 195, 196, 235, 195, 196, 236, 
	195, 196, 237, 195, 196, 238, 195, 196, 
	238, 195, 196, 239, 195, 196, 240, 195, 
	196, 241, 195, 196, 242, 195, 196, 237, 
	195, 196, 243, 195, 196, 244, 195, 196, 
	245, 195, 196, 246, 195, 196, 242, 195, 
	196, 247, 195, 196, 248, 195, 196, 249, 
	195, 196, 250, 195, 196, 251, 195, 196, 
	252, 195, 196, 234, 195, 196, 253, 195, 
	196, 254, 195, 196, 255, 195, 196, 256, 
	195, 196, 257, 195, 196, 258, 195, 196, 
	259, 195, 196, 260, 195, 196, 261, 195, 
	196, 262, 195, 196, 263, 195, 196, 264, 
	195, 196, 265, 195, 196, 238, 195, 196, 
	266, 195, 196, 267, 195, 196, 268, 195, 
	196, 269, 195, 196, 270, 195, 196, 271, 
	195, 196, 272, 195, 196, 273, 195, 196, 
	274, 195, 196, 275, 195, 196, 276, 195, 
	196, 277, 195, 196, 278, 195, 196, 279, 
	195, 196, 280, 195, 196, 234, 195, 196, 
	281, 195, 196, 282, 195, 196, 283, 195, 
	196, 284, 195, 196, 285, 195, 196, 252, 
	195, 286, 0, 287, 0, 288, 0, 289, 
	0, 290, 0, 291, 0, 292, 0, 293, 
	0, 294, 0, 295, 0, 296, 0, 297, 
	0, 298, 0, 140, 0, 299, 0, 300, 
	0, 301, 0, 302, 0, 303, 0, 304, 
	0, 305, 0, 306, 0, 307, 0, 308, 
	0, 309, 0, 310, 0, 311, 0, 312, 
	0, 313, 0, 314, 0, 315, 0, 317, 
	316, 319, 318, 319, 320, 321, 322, 323, 
	321, 324, 325, 326, 327, 328, 320, 318, 
	319, 329, 318, 319, 330, 318, 319, 331, 
	318, 319, 332, 318, 319, 333, 318, 319, 
	334, 318, 319, 335, 318, 319, 336, 318, 
	319, 337, 318, 319, 338, 318, 319, 339, 
	318, 319, 340, 318, 319, 341, 318, 319, 
	342, 318, 319, 343, 318, 319, 344, 345, 
	346, 318, 319, 347, 318, 319, 348, 318, 
	319, 349, 318, 319, 350, 318, 319, 351, 
	318, 319, 352, 318, 319, 353, 318, 319, 
	354, 318, 319, 355, 318, 319, 343, 318, 
	319, 356, 318, 319, 357, 318, 319, 358, 
	318, 319, 359, 318, 319, 359, 318, 319, 
	360, 318, 319, 361, 318, 319, 362, 318, 
	319, 363, 318, 319, 358, 318, 319, 364, 
	318, 319, 365, 318, 319, 366, 318, 319, 
	367, 318, 319, 363, 318, 319, 368, 318, 
	319, 369, 318, 319, 370, 318, 319, 371, 
	318, 319, 372, 318, 319, 373, 318, 319, 
	355, 318, 319, 374, 318, 319, 375, 318, 
	319, 376, 318, 319, 377, 318, 319, 378, 
	318, 319, 379, 318, 319, 380, 318, 319, 
	381, 318, 319, 382, 318, 319, 383, 318, 
	319, 384, 318, 319, 385, 318, 319, 386, 
	318, 319, 359, 318, 387, 0, 388, 0, 
	389, 0, 390, 0, 391, 0, 392, 0, 
	393, 0, 394, 0, 396, 395, 398, 397, 
	398, 399, 400, 401, 402, 400, 403, 404, 
	405, 406, 407, 408, 399, 397, 398, 409, 
	397, 398, 410, 397, 398, 411, 397, 398, 
	412, 397, 398, 413, 397, 398, 414, 397, 
	398, 415, 397, 398, 416, 397, 398, 417, 
	397, 398, 418, 397, 398, 419, 397, 398, 
	420, 397, 398, 421, 397, 398, 422, 397, 
	398, 423, 397, 398, 424, 425, 426, 397, 
	398, 427, 397, 398, 428, 397, 398, 429, 
	397, 398, 430, 397, 398, 431, 397, 398, 
	432, 397, 398, 433, 397, 398, 434, 397, 
	398, 435, 397, 398, 423, 397, 398, 436, 
	397, 398, 437, 397, 398, 438, 397, 398, 
	439, 397, 398, 439, 397, 398, 440, 397, 
	398, 441, 397, 398, 442, 397, 398, 443, 
	397, 398, 438, 397, 398, 444, 397, 398, 
	445, 397, 398, 446, 397, 398, 447, 397, 
	398, 443, 397, 398, 448, 397, 398, 449, 
	397, 398, 450, 397, 398, 451, 397, 398, 
	452, 397, 398, 453, 397, 398, 435, 397, 
	398, 454, 397, 398, 455, 397, 398, 456, 
	397, 398, 457, 397, 398, 458, 397, 398, 
	459, 397, 398, 460, 397, 398, 461, 397, 
	398, 462, 397, 398, 463, 397, 398, 464, 
	397, 398, 465, 397, 398, 466, 397, 398, 
	439, 397, 398, 467, 397, 398, 468, 397, 
	398, 469, 397, 398, 470, 397, 398, 471, 
	397, 398, 472, 397, 398, 473, 397, 398, 
	474, 397, 398, 475, 397, 398, 476, 397, 
	398, 477, 397, 398, 478, 397, 398, 479, 
	397, 398, 480, 397, 398, 481, 397, 398, 
	435, 397, 482, 483, 482, 0, 486, 485, 
	487, 488, 485, 484, 0, 490, 491, 489, 
	0, 490, 489, 486, 492, 490, 491, 492, 
	489, 486, 493, 494, 495, 496, 497, 498, 
	499, 500, 501, 502, 503, 504, 505, 506, 
	507, 493, 0, 85, 508, 84, 85, 509, 
	84, 85, 510, 84, 85, 511, 84, 85, 
	512, 84, 85, 513, 84, 85, 514, 84, 
	85, 515, 84, 85, 516, 84, 85, 517, 
	84, 85, 518, 84, 85, 519, 84, 85, 
	520, 84, 85, 521, 84, 85, 522, 84, 
	85, 523, 84, 85, 524, 84, 85, 525, 
	84, 85, 526, 84, 85, 527, 84, 85, 
	117, 84, 85, 528, 84, 85, 529, 84, 
	85, 530, 84, 85, 531, 84, 85, 532, 
	84, 85, 533, 84, 85, 117, 84, 85, 
	534, 84, 85, 535, 84, 85, 536, 84, 
	85, 537, 84, 85, 538, 84, 85, 539, 
	84, 85, 540, 84, 85, 541, 84, 85, 
	542, 84, 85, 543, 84, 85, 544, 84, 
	85, 545, 84, 85, 546, 84, 85, 547, 
	84, 85, 527, 84, 85, 548, 84, 85, 
	549, 84, 85, 550, 84, 85, 551, 84, 
	85, 552, 84, 85, 533, 84, 553, 0, 
	554, 0, 139, 0, 140, 0, 555, 0, 
	1, 0, 556, 0
];

var _lexer_trans_targs = [
	0, 2, 2, 3, 13, 15, 29, 32, 
	35, 75, 81, 117, 122, 217, 231, 313, 
	402, 461, 4, 5, 6, 7, 6, 6, 
	7, 6, 8, 8, 8, 9, 8, 8, 
	8, 9, 10, 11, 12, 2, 12, 13, 
	2, 14, 16, 17, 18, 19, 20, 21, 
	22, 23, 24, 25, 26, 27, 28, 463, 
	30, 31, 2, 14, 31, 2, 14, 33, 
	34, 2, 33, 32, 34, 36, 457, 460, 
	37, 38, 39, 40, 41, 42, 43, 44, 
	45, 46, 47, 48, 47, 48, 48, 2, 
	49, 63, 408, 429, 436, 451, 50, 51, 
	52, 53, 54, 55, 56, 57, 58, 59, 
	60, 61, 62, 2, 64, 65, 66, 67, 
	68, 69, 70, 71, 72, 73, 74, 2, 
	2, 3, 13, 15, 29, 32, 35, 75, 
	81, 117, 122, 217, 231, 313, 402, 76, 
	77, 78, 79, 80, 29, 82, 83, 84, 
	85, 86, 87, 88, 89, 90, 91, 92, 
	93, 94, 95, 96, 97, 98, 99, 100, 
	101, 102, 103, 104, 105, 104, 105, 105, 
	2, 106, 107, 108, 109, 110, 111, 112, 
	113, 114, 115, 116, 74, 118, 119, 120, 
	121, 123, 124, 125, 126, 127, 128, 129, 
	130, 131, 132, 131, 132, 132, 2, 133, 
	147, 148, 164, 169, 174, 181, 195, 211, 
	134, 135, 136, 137, 138, 139, 140, 141, 
	142, 143, 144, 145, 146, 2, 74, 149, 
	159, 163, 150, 151, 152, 153, 154, 155, 
	156, 157, 158, 160, 161, 162, 147, 165, 
	166, 167, 168, 170, 171, 172, 173, 175, 
	176, 177, 178, 179, 180, 182, 183, 184, 
	185, 186, 187, 188, 189, 190, 191, 192, 
	193, 194, 196, 197, 198, 199, 200, 201, 
	202, 203, 204, 205, 206, 207, 208, 209, 
	210, 212, 213, 214, 215, 216, 218, 219, 
	220, 221, 222, 223, 224, 225, 226, 227, 
	228, 229, 230, 232, 233, 234, 235, 236, 
	237, 238, 239, 240, 241, 242, 243, 244, 
	245, 246, 247, 248, 249, 250, 249, 250, 
	250, 2, 251, 265, 266, 282, 287, 292, 
	299, 252, 253, 254, 255, 256, 257, 258, 
	259, 260, 261, 262, 263, 264, 2, 74, 
	267, 277, 281, 268, 269, 270, 271, 272, 
	273, 274, 275, 276, 278, 279, 280, 265, 
	283, 284, 285, 286, 288, 289, 290, 291, 
	293, 294, 295, 296, 297, 298, 300, 301, 
	302, 303, 304, 305, 306, 307, 308, 309, 
	310, 311, 312, 314, 315, 316, 317, 318, 
	319, 320, 321, 322, 323, 322, 323, 323, 
	2, 324, 338, 339, 355, 360, 365, 372, 
	386, 325, 326, 327, 328, 329, 330, 331, 
	332, 333, 334, 335, 336, 337, 2, 74, 
	340, 350, 354, 341, 342, 343, 344, 345, 
	346, 347, 348, 349, 351, 352, 353, 338, 
	356, 357, 358, 359, 361, 362, 363, 364, 
	366, 367, 368, 369, 370, 371, 373, 374, 
	375, 376, 377, 378, 379, 380, 381, 382, 
	383, 384, 385, 387, 388, 389, 390, 391, 
	392, 393, 394, 395, 396, 397, 398, 399, 
	400, 401, 402, 403, 404, 406, 407, 405, 
	403, 404, 405, 403, 406, 407, 3, 13, 
	15, 29, 32, 35, 75, 81, 117, 122, 
	217, 231, 313, 402, 409, 410, 411, 412, 
	413, 414, 415, 416, 417, 418, 419, 420, 
	421, 422, 423, 424, 425, 426, 427, 428, 
	430, 431, 432, 433, 434, 435, 437, 438, 
	439, 440, 441, 442, 443, 444, 445, 446, 
	447, 448, 449, 450, 452, 453, 454, 455, 
	456, 458, 459, 462, 0
];

var _lexer_trans_actions = [
	43, 0, 54, 3, 1, 0, 29, 1, 
	29, 29, 29, 29, 29, 29, 29, 29, 
	35, 0, 0, 0, 7, 139, 48, 0, 
	102, 9, 5, 45, 134, 45, 0, 33, 
	122, 33, 33, 0, 11, 106, 0, 0, 
	114, 25, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 57, 149, 126, 0, 110, 23, 0, 
	27, 118, 27, 51, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 57, 144, 0, 54, 0, 69, 
	33, 84, 84, 84, 84, 84, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 13, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 13, 31, 
	130, 60, 57, 31, 63, 57, 63, 63, 
	63, 63, 63, 63, 63, 63, 66, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 57, 144, 0, 54, 0, 
	81, 84, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 21, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 57, 144, 0, 54, 0, 75, 33, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 17, 17, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 57, 144, 0, 54, 
	0, 78, 33, 84, 84, 84, 84, 84, 
	84, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 19, 19, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 57, 144, 0, 54, 0, 
	72, 33, 84, 84, 84, 84, 84, 84, 
	84, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 15, 15, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 37, 37, 54, 37, 
	87, 0, 0, 39, 0, 0, 93, 90, 
	41, 96, 90, 96, 96, 96, 96, 96, 
	96, 96, 96, 99, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0
];

var _lexer_eof_actions = [
	0, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43
];

var lexer_start = 1;
var lexer_first_final = 463;
var lexer_error = 0;

var lexer_en_main = 1;


/* line 129 "ragel/i18n/en_pirate.js.rl" */

/* line 130 "ragel/i18n/en_pirate.js.rl" */

/* line 131 "ragel/i18n/en_pirate.js.rl" */

/* line 132 "ragel/i18n/en_pirate.js.rl" */

var Lexer = function(listener) {
  // Check that listener has the required functions
  var events = ['comment', 'tag', 'feature', 'background', 'scenario', 'scenario_outline', 'examples', 'step', 'doc_string', 'row', 'eof'];
  for(var i=0, len=events.length; i<len; i++) {
    var event = events[i];
    if(typeof listener[event] != 'function') {
      throw new Error("Error. No " + event + " function exists on " + JSON.stringify(listener));
    }
  }
  this.listener = listener;
};

Lexer.prototype.scan = function(data) {
  var ending = "\n%_FEATURE_END_%";
  if(typeof data == 'string') {
    data = this.stringToBytes(data + ending);
  } else if(typeof Buffer != 'undefined' && Buffer.isBuffer(data)) {
    // Node.js
    var buf = new Buffer(data.length + ending.length);
    data.copy(buf, 0, 0);
    new Buffer(ending).copy(buf, data.length, 0);
    data = buf;
  }
  var eof = pe = data.length;
  var p = 0;

  this.line_number = 1;
  this.last_newline = 0;
  var signedCharValue=function(v){return v > 127 ? v-256 : v; };

  
/* line 835 "js/lib/gherkin/lexer/en_pirate.js" */
{
	  this.cs = lexer_start;
} /* JSCodeGen::writeInit */

/* line 164 "ragel/i18n/en_pirate.js.rl" */
  
/* line 842 "js/lib/gherkin/lexer/en_pirate.js" */
{
	var _klen, _trans, _keys, _ps, _widec, _acts, _nacts;
	var _goto_level, _resume, _eof_trans, _again, _test_eof;
	var _out;
	_klen = _trans = _keys = _acts = _nacts = null;
	_goto_level = 0;
	_resume = 10;
	_eof_trans = 15;
	_again = 20;
	_test_eof = 30;
	_out = 40;
	while (true) {
	_trigger_goto = false;
	if (_goto_level <= 0) {
	if (p == pe) {
		_goto_level = _test_eof;
		continue;
	}
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	}
	if (_goto_level <= _resume) {
	_keys = _lexer_key_offsets[ this.cs];
	_trans = _lexer_index_offsets[ this.cs];
	_klen = _lexer_single_lengths[ this.cs];
	_break_match = false;
	
	do {
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + _klen - 1;

	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + ( (_upper - _lower) >> 1 );

	        if (( signedCharValue(data[p])) < _lexer_trans_keys[_mid]) {
	           _upper = _mid - 1;
	        } else if (( signedCharValue(data[p])) > _lexer_trans_keys[_mid]) {
	           _lower = _mid + 1;
	        } else {
	           _trans += (_mid - _keys);
	           _break_match = true;
	           break;
	        };
	     } /* while */
	     if (_break_match) { break; }
	     _keys += _klen;
	     _trans += _klen;
	  }
	  _klen = _lexer_range_lengths[ this.cs];
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + (_klen << 1) - 2;
	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + (((_upper-_lower) >> 1) & ~1);
	        if (( signedCharValue(data[p])) < _lexer_trans_keys[_mid]) {
	          _upper = _mid - 2;
	         } else if (( signedCharValue(data[p])) > _lexer_trans_keys[_mid+1]) {
	          _lower = _mid + 2;
	        } else {
	          _trans += ((_mid - _keys) >> 1);
	          _break_match = true;
	          break;
	        }
	     } /* while */
	     if (_break_match) { break; }
	     _trans += _klen
	  }
	} while (false);
	_trans = _lexer_indicies[_trans];
	 this.cs = _lexer_trans_targs[_trans];
	if (_lexer_trans_actions[_trans] != 0) {
		_acts = _lexer_trans_actions[_trans];
		_nacts = _lexer_actions[_acts];
		_acts += 1;
		while (_nacts > 0) {
			_nacts -= 1;
			_acts += 1;
			switch (_lexer_actions[_acts - 1]) {
case 0:
/* line 6 "ragel/i18n/en_pirate.js.rl" */

    this.content_start = p;
    this.current_line = this.line_number;
    this.start_col = p - this.last_newline - (this.keyword+':').length;
  		break;
case 1:
/* line 12 "ragel/i18n/en_pirate.js.rl" */

    this.current_line = this.line_number;
    this.start_col = p - this.last_newline;
  		break;
case 2:
/* line 17 "ragel/i18n/en_pirate.js.rl" */

    this.content_start = p;
  		break;
case 3:
/* line 21 "ragel/i18n/en_pirate.js.rl" */

    this.docstring_content_type_start = p;
  		break;
case 4:
/* line 25 "ragel/i18n/en_pirate.js.rl" */

    this.docstring_content_type_end = p;
  		break;
case 5:
/* line 29 "ragel/i18n/en_pirate.js.rl" */

    var con = this.unindent(
      this.start_col, 
      this.bytesToString(data.slice(this.content_start, this.next_keyword_start-1)).replace(/(\r?\n)?([\t ])*$/, '').replace(/\\\"\\\"\\\"/mg, '"""')
    );
    var con_type = this.bytesToString(data.slice(this.docstring_content_type_start, this.docstring_content_type_end)).trim();
    this.listener.doc_string(con_type, con, this.current_line); 
  		break;
case 6:
/* line 38 "ragel/i18n/en_pirate.js.rl" */

    p = this.store_keyword_content('feature', data, p, eof);
  		break;
case 7:
/* line 42 "ragel/i18n/en_pirate.js.rl" */

    p = this.store_keyword_content('background', data, p, eof);
  		break;
case 8:
/* line 46 "ragel/i18n/en_pirate.js.rl" */

    p = this.store_keyword_content('scenario', data, p, eof);
  		break;
case 9:
/* line 50 "ragel/i18n/en_pirate.js.rl" */

    p = this.store_keyword_content('scenario_outline', data, p, eof);
  		break;
case 10:
/* line 54 "ragel/i18n/en_pirate.js.rl" */

    p = this.store_keyword_content('examples', data, p, eof);
  		break;
case 11:
/* line 58 "ragel/i18n/en_pirate.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.step(this.keyword, con, this.current_line);
  		break;
case 12:
/* line 63 "ragel/i18n/en_pirate.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.comment(con, this.line_number);
    this.keyword_start = null;
  		break;
case 13:
/* line 69 "ragel/i18n/en_pirate.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.tag(con, this.line_number);
    this.keyword_start = null;
  		break;
case 14:
/* line 75 "ragel/i18n/en_pirate.js.rl" */

    this.line_number++;
  		break;
case 15:
/* line 79 "ragel/i18n/en_pirate.js.rl" */

    this.last_newline = p + 1;
  		break;
case 16:
/* line 83 "ragel/i18n/en_pirate.js.rl" */

    this.keyword_start = this.keyword_start || p;
  		break;
case 17:
/* line 87 "ragel/i18n/en_pirate.js.rl" */

    this.keyword = this.bytesToString(data.slice(this.keyword_start, p)).replace(/:$/, '');
    this.keyword_start = null;
  		break;
case 18:
/* line 92 "ragel/i18n/en_pirate.js.rl" */

    this.next_keyword_start = p;
  		break;
case 19:
/* line 96 "ragel/i18n/en_pirate.js.rl" */

    p = p - 1;
    current_row = [];
    this.current_line = this.line_number;
  		break;
case 20:
/* line 102 "ragel/i18n/en_pirate.js.rl" */

    this.content_start = p;
  		break;
case 21:
/* line 106 "ragel/i18n/en_pirate.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    current_row.push(con.replace(/\\\|/, "|").replace(/\\n/, "\n").replace(/\\\\/, "\\"));
  		break;
case 22:
/* line 111 "ragel/i18n/en_pirate.js.rl" */

    this.listener.row(current_row, this.current_line);
  		break;
case 23:
/* line 115 "ragel/i18n/en_pirate.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw new Error("Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.");
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 1069 "js/lib/gherkin/lexer/en_pirate.js" */
			} /* action switch */
		}
	}
	if (_trigger_goto) {
		continue;
	}
	}
	if (_goto_level <= _again) {
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	p += 1;
	if (p != pe) {
		_goto_level = _resume;
		continue;
	}
	}
	if (_goto_level <= _test_eof) {
	if (p == eof) {
	__acts = _lexer_eof_actions[ this.cs];
	__nacts =  _lexer_actions[__acts];
	__acts += 1;
	while (__nacts > 0) {
		__nacts -= 1;
		__acts += 1;
		switch (_lexer_actions[__acts - 1]) {
case 23:
/* line 115 "ragel/i18n/en_pirate.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw new Error("Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.");
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 1108 "js/lib/gherkin/lexer/en_pirate.js" */
		} /* eof action switch */
	}
	if (_trigger_goto) {
		continue;
	}
}
	}
	if (_goto_level <= _out) {
		break;
	}
	}
	}

/* line 165 "ragel/i18n/en_pirate.js.rl" */
};


/*
 * Decode utf-8 byte sequence to string.
 */
var decodeUtf8 = function(bytes) {
  var result = "";
  var i = 0;
  var wc;
  var c;

  while (i < bytes.length) {
    /* parse as UTF-8 lead byte */
    wc = bytes[i++];
    if (wc < 0x80) {
      count = 0;
    } else if (wc < 0xC2 || wc >= 0xF8) {
      throw new Error("input is not a valid UTF-8 lead octet");
    } else if (wc < 0xE0) {
      count = 1;
      wc = (wc & 0x1F) << 6;
    } else if (wc < 0xF0) {
      count = 2;
      wc = (wc & 0x0F) << 12;
    } else /* wc < 0xF8 */ {
      count = 3;
      wc = (wc & 0x07) << 18;
    }

    /* parse trail bytes, if any */
    while (count) {
      if (!(i < bytes.length)) {
        throw new Error("short read");
      }
      if ((c = bytes[i++] ^ 0x80) > 0x3F) {
        throw new Error("input is not a valid UTF-8 trail octet");
      }
      wc |= c << (6 * --count);
      if (wc < (1 << (5 * count + 6))) {
        throw new Error("invalid non-minimal encoded input");
      }
    }

    /* handle conversion to UTF-16 if needed */
    if (wc > 0xFFFF) {
      wc -= 0x10000;
      result += String.fromCharCode(0xD800 + (wc >> 10));
      wc = 0xDC00 + (wc & 0x3FF);
    }
    result += String.fromCharCode(wc);
  }

  return result;
};

/*
 * Encode string to an array of bytes using utf8 encoding.
 *
 * Javascript internally stores character data as utf16 (like java).
 * String.charCodeAt() does *not* produce unicode points, but simply
 * reflects this internal representation. Thus, it is necessary
 * to first decode the utf-16 representation before encoding to
 * utf-8.
 */
var encodeUtf8 = function(string) {
  var bytes = [];
  var i = 0;
  var j = 0;
  var wc;

  while (i < string.length) {
    wc = string.charCodeAt(i++);
    if (wc >= 0xD800 && wc <= 0xDBFF && i < string.length && string.charCodeAt(i) >= 0xDC00 && string.charCodeAt(i) <= 0xDFFF) {
      /* decode UTF-16 */
      wc = 0x10000 + ((wc & 0x3FF) << 10) + (string.charCodeAt(i++) & 0x3FF);
    }

    /* emit lead byte */
    if (wc < 0x80) {
      bytes[j++] = wc;
      count = 0;
    } else if (wc < 0x800) {
      bytes[j++] = 0xC0 | (wc >> 6);
      count = 1;
    } else if (wc < 0x10000) {
      bytes[j++] = 0xE0 | (wc >> 12);
      count = 2;
    } else {
      /* SMP: 21-bit Unicode */
      bytes[j++] = 0xF0 | (wc >> 18);
      count = 3;
    }

    /* emit trail bytes, if any */
    while (count) {
      bytes[j++] = 0x80 | ((wc >> (6 * --count)) & 0x3F);
    }
  }

  return bytes;

};

Lexer.prototype.bytesToString = function(bytes) {
  if(typeof bytes.write == 'function') {
    // Node.js
    return bytes.toString('utf-8');
  }
  return decodeUtf8(bytes);
};

Lexer.prototype.stringToBytes = function(string) {
  return encodeUtf8(string);
};

Lexer.prototype.unindent = function(startcol, text) {
  startcol = startcol || 0;
  return text.replace(new RegExp('^[\t ]{0,' + startcol + '}', 'gm'), ''); 
};

Lexer.prototype.store_keyword_content = function(event, data, p, eof) {
  var end_point = (!this.next_keyword_start || (p == eof)) ? p : this.next_keyword_start;
  var content = this.unindent(this.start_col + 2, this.bytesToString(data.slice(this.content_start, end_point))).replace(/\s+$/,"");
  var content_lines = content.split("\n")
  var name = content_lines.shift() || "";
  name = name.trim();
  var description = content_lines.join("\n");
  this.listener[event](this.keyword, name, description, this.current_line);
  var nks = this.next_keyword_start;
  this.next_keyword_start = null;
  return nks ? nks - 1 : p;
};

Lexer.prototype.current_line_content = function(data, p) {
  var rest = Array.prototype.slice.call(data,this.last_newline, -1);
  var end = rest.indexOf(10) || -1;
  return this.bytesToString(rest.slice(0, end)).trim();
};

// Node.js export
if(typeof module !== 'undefined') {
  module.exports = Lexer;
}
// Require.js export
if (typeof define !== 'undefined') {
  if(define.amd) {
    define('gherkin/lexer/en_pirate', [], function() {
      return Lexer;
    });
  } else {
    define('gherkin/lexer/en_pirate', function(require, exports, module) {
      exports.Lexer = Lexer;
    });
  }
}

})();

}).call(this,require("buffer").Buffer)

},{"buffer":69}],199:[function(require,module,exports){
(function (Buffer){

/* line 1 "ragel/i18n/en_scouse.js.rl" */
;(function() {


/* line 126 "ragel/i18n/en_scouse.js.rl" */



/* line 11 "js/lib/gherkin/lexer/en_scouse.js" */
var _lexer_actions = [
	0, 1, 0, 1, 1, 1, 2, 1, 
	3, 1, 4, 1, 5, 1, 6, 1, 
	7, 1, 8, 1, 9, 1, 10, 1, 
	11, 1, 12, 1, 13, 1, 16, 1, 
	17, 1, 18, 1, 19, 1, 20, 1, 
	21, 1, 22, 1, 23, 2, 2, 18, 
	2, 3, 4, 2, 13, 0, 2, 14, 
	15, 2, 17, 0, 2, 17, 1, 2, 
	17, 16, 2, 17, 19, 2, 18, 6, 
	2, 18, 7, 2, 18, 8, 2, 18, 
	9, 2, 18, 10, 2, 18, 16, 2, 
	20, 21, 2, 22, 0, 2, 22, 1, 
	2, 22, 16, 2, 22, 19, 3, 4, 
	14, 15, 3, 5, 14, 15, 3, 11, 
	14, 15, 3, 12, 14, 15, 3, 13, 
	14, 15, 3, 14, 15, 18, 3, 17, 
	0, 11, 3, 17, 14, 15, 4, 2, 
	14, 15, 18, 4, 3, 4, 14, 15, 
	4, 17, 0, 14, 15, 5, 17, 0, 
	11, 14, 15
];

var _lexer_key_offsets = [
	0, 0, 20, 39, 40, 41, 43, 45, 
	50, 55, 60, 65, 69, 73, 75, 76, 
	77, 78, 79, 80, 81, 82, 83, 84, 
	85, 86, 87, 88, 89, 90, 91, 93, 
	95, 100, 107, 112, 113, 114, 115, 118, 
	119, 120, 121, 122, 123, 124, 125, 126, 
	127, 128, 129, 130, 131, 132, 133, 134, 
	135, 136, 137, 138, 139, 140, 141, 142, 
	143, 144, 145, 146, 147, 148, 149, 150, 
	151, 152, 153, 169, 171, 173, 175, 177, 
	179, 181, 183, 185, 187, 189, 191, 193, 
	195, 197, 199, 218, 219, 220, 221, 222, 
	223, 224, 225, 226, 227, 228, 235, 237, 
	239, 241, 243, 245, 247, 249, 250, 251, 
	252, 253, 254, 255, 256, 257, 258, 270, 
	272, 274, 276, 278, 280, 282, 284, 286, 
	288, 290, 292, 294, 296, 298, 300, 302, 
	304, 306, 308, 310, 312, 314, 316, 318, 
	320, 322, 324, 326, 328, 330, 332, 334, 
	336, 338, 340, 342, 344, 346, 348, 350, 
	352, 354, 356, 358, 360, 362, 364, 366, 
	368, 370, 372, 374, 376, 378, 380, 382, 
	384, 386, 388, 390, 392, 394, 396, 398, 
	400, 402, 404, 406, 408, 410, 412, 414, 
	416, 417, 418, 419, 420, 421, 422, 423, 
	424, 425, 426, 427, 428, 429, 430, 431, 
	432, 433, 434, 435, 436, 437, 438, 439, 
	455, 457, 459, 461, 463, 465, 467, 469, 
	471, 473, 475, 477, 479, 481, 483, 485, 
	487, 489, 491, 495, 497, 499, 501, 503, 
	505, 507, 509, 511, 513, 515, 517, 519, 
	521, 523, 525, 527, 529, 531, 533, 535, 
	537, 539, 541, 543, 545, 547, 549, 551, 
	553, 555, 557, 559, 561, 563, 565, 567, 
	569, 571, 573, 575, 577, 579, 581, 583, 
	585, 587, 589, 591, 593, 595, 597, 599, 
	601, 603, 605, 607, 609, 611, 613, 616, 
	618, 620, 622, 624, 626, 628, 630, 632, 
	634, 636, 638, 640, 642, 644, 646, 648, 
	650, 652, 655, 657, 659, 661, 663, 665, 
	667, 669, 671, 673, 675, 677, 679, 681, 
	683, 685, 687, 689, 691, 693, 695, 697, 
	698, 699, 700, 701, 702, 703, 704, 705, 
	706, 707, 708, 709, 710, 711, 727, 729, 
	731, 733, 735, 737, 739, 741, 743, 745, 
	747, 749, 751, 753, 755, 757, 759, 761, 
	763, 766, 768, 770, 772, 774, 776, 778, 
	780, 782, 784, 786, 788, 790, 792, 794, 
	796, 798, 800, 802, 804, 806, 808, 810, 
	812, 814, 816, 818, 820, 822, 824, 826, 
	828, 830, 832, 834, 836, 838, 840, 842, 
	844, 846, 848, 850, 852, 854, 856, 858, 
	860, 862, 864, 866, 869, 871, 873, 875, 
	877, 879, 881, 883, 885, 887, 889, 891, 
	893, 895, 897, 899, 901, 903, 905, 907, 
	909, 910, 911, 912, 913, 914, 915, 916, 
	917, 918, 919, 921, 922, 923, 924, 925, 
	926, 927, 928, 929, 930, 931, 932, 933, 
	934, 935, 936, 937, 938, 939, 940, 941, 
	945, 951, 954, 956, 962, 981, 983, 985, 
	987, 990, 992, 994, 996, 998, 1000, 1002, 
	1004, 1006, 1008, 1010, 1012, 1014, 1016, 1018, 
	1020, 1022, 1024, 1026, 1028, 1030, 1032, 1034, 
	1036, 1038, 1040, 1042, 1044, 1046, 1048, 1050, 
	1052, 1054, 1056, 1058, 1060, 1062, 1064, 1066, 
	1068, 1070, 1073, 1075, 1077, 1079, 1081, 1083, 
	1085, 1087, 1089, 1091, 1093, 1095, 1097, 1099, 
	1101, 1103, 1105, 1107, 1109, 1112, 1114, 1116, 
	1118, 1120, 1122, 1124, 1126, 1128, 1130, 1132, 
	1134, 1136, 1138, 1140, 1142, 1144, 1146, 1148, 
	1150, 1152, 1153, 1154
];

var _lexer_trans_keys = [
	10, 32, 34, 35, 37, 42, 64, 65, 
	66, 68, 69, 70, 71, 84, 87, 89, 
	124, 239, 9, 13, 10, 32, 34, 35, 
	37, 42, 64, 65, 66, 68, 69, 70, 
	71, 84, 87, 89, 124, 9, 13, 34, 
	34, 10, 13, 10, 13, 10, 32, 34, 
	9, 13, 10, 32, 34, 9, 13, 10, 
	32, 34, 9, 13, 10, 32, 34, 9, 
	13, 10, 32, 9, 13, 10, 32, 9, 
	13, 10, 13, 10, 95, 70, 69, 65, 
	84, 85, 82, 69, 95, 69, 78, 68, 
	95, 37, 32, 10, 13, 10, 13, 13, 
	32, 64, 9, 10, 9, 10, 13, 32, 
	64, 11, 12, 10, 32, 64, 9, 13, 
	110, 117, 104, 101, 105, 117, 110, 32, 
	121, 111, 117, 115, 101, 32, 103, 111, 
	116, 116, 97, 115, 32, 105, 115, 32, 
	119, 104, 97, 116, 32, 119, 101, 110, 
	116, 32, 100, 111, 119, 110, 58, 10, 
	10, 10, 32, 35, 37, 42, 64, 65, 
	66, 68, 70, 71, 84, 87, 89, 9, 
	13, 10, 95, 10, 70, 10, 69, 10, 
	65, 10, 84, 10, 85, 10, 82, 10, 
	69, 10, 95, 10, 69, 10, 78, 10, 
	68, 10, 95, 10, 37, 10, 32, 10, 
	32, 34, 35, 37, 42, 64, 65, 66, 
	68, 69, 70, 71, 84, 87, 89, 124, 
	9, 13, 120, 97, 109, 112, 108, 101, 
	115, 58, 10, 10, 10, 32, 35, 70, 
	124, 9, 13, 10, 101, 10, 97, 10, 
	116, 10, 117, 10, 114, 10, 101, 10, 
	58, 101, 97, 116, 117, 114, 101, 58, 
	10, 10, 10, 32, 35, 37, 64, 68, 
	69, 70, 84, 87, 9, 13, 10, 95, 
	10, 70, 10, 69, 10, 65, 10, 84, 
	10, 85, 10, 82, 10, 69, 10, 95, 
	10, 69, 10, 78, 10, 68, 10, 95, 
	10, 37, 10, 105, 10, 115, 10, 32, 
	10, 105, 10, 115, 10, 32, 10, 119, 
	10, 104, 10, 97, 10, 116, 10, 32, 
	10, 119, 10, 101, 10, 110, 10, 116, 
	10, 32, 10, 100, 10, 111, 10, 119, 
	10, 110, 10, 58, 10, 120, 10, 97, 
	10, 109, 10, 112, 10, 108, 10, 101, 
	10, 115, 10, 101, 10, 97, 10, 116, 
	10, 117, 10, 114, 10, 101, 10, 104, 
	10, 101, 10, 32, 10, 116, 10, 104, 
	10, 105, 10, 110, 10, 103, 10, 32, 
	10, 111, 10, 102, 10, 32, 10, 105, 
	10, 116, 10, 32, 10, 105, 10, 104, 
	10, 97, 10, 114, 10, 114, 10, 105, 
	10, 109, 10, 101, 10, 97, 10, 110, 
	105, 118, 117, 104, 101, 32, 116, 104, 
	105, 110, 103, 32, 111, 102, 32, 105, 
	116, 32, 105, 115, 58, 10, 10, 10, 
	32, 35, 37, 42, 64, 65, 66, 68, 
	70, 71, 84, 87, 89, 9, 13, 10, 
	95, 10, 70, 10, 69, 10, 65, 10, 
	84, 10, 85, 10, 82, 10, 69, 10, 
	95, 10, 69, 10, 78, 10, 68, 10, 
	95, 10, 37, 10, 32, 10, 110, 10, 
	117, 10, 104, 10, 101, 105, 117, 10, 
	110, 10, 32, 10, 121, 10, 111, 10, 
	117, 10, 115, 10, 101, 10, 32, 10, 
	103, 10, 111, 10, 116, 10, 116, 10, 
	97, 10, 115, 10, 32, 10, 105, 10, 
	115, 10, 32, 10, 119, 10, 104, 10, 
	97, 10, 116, 10, 32, 10, 119, 10, 
	101, 10, 110, 10, 116, 10, 32, 10, 
	100, 10, 111, 10, 119, 10, 110, 10, 
	58, 10, 101, 10, 97, 10, 116, 10, 
	117, 10, 114, 10, 101, 10, 105, 10, 
	118, 10, 117, 10, 104, 10, 101, 10, 
	32, 10, 116, 10, 104, 10, 105, 10, 
	110, 10, 103, 10, 32, 10, 111, 10, 
	102, 10, 32, 10, 105, 10, 116, 10, 
	32, 10, 105, 10, 115, 10, 104, 117, 
	10, 97, 10, 114, 10, 114, 10, 105, 
	10, 109, 10, 101, 10, 97, 10, 110, 
	10, 111, 10, 117, 10, 115, 10, 101, 
	10, 32, 10, 107, 10, 110, 10, 111, 
	10, 119, 10, 32, 10, 108, 119, 10, 
	105, 10, 107, 10, 101, 10, 32, 10, 
	119, 10, 104, 10, 101, 10, 104, 10, 
	101, 10, 110, 10, 32, 10, 121, 10, 
	111, 10, 117, 10, 115, 10, 101, 10, 
	32, 10, 103, 10, 111, 10, 116, 104, 
	117, 97, 114, 114, 105, 109, 101, 97, 
	110, 32, 105, 115, 58, 10, 10, 10, 
	32, 35, 37, 42, 64, 65, 66, 68, 
	70, 71, 84, 87, 89, 9, 13, 10, 
	95, 10, 70, 10, 69, 10, 65, 10, 
	84, 10, 85, 10, 82, 10, 69, 10, 
	95, 10, 69, 10, 78, 10, 68, 10, 
	95, 10, 37, 10, 32, 10, 110, 10, 
	117, 10, 104, 10, 101, 117, 10, 110, 
	10, 32, 10, 121, 10, 111, 10, 117, 
	10, 115, 10, 101, 10, 32, 10, 103, 
	10, 111, 10, 116, 10, 116, 10, 97, 
	10, 101, 10, 97, 10, 116, 10, 117, 
	10, 114, 10, 101, 10, 58, 10, 105, 
	10, 118, 10, 117, 10, 104, 10, 101, 
	10, 32, 10, 116, 10, 104, 10, 105, 
	10, 110, 10, 103, 10, 32, 10, 111, 
	10, 102, 10, 32, 10, 105, 10, 116, 
	10, 32, 10, 105, 10, 115, 10, 111, 
	10, 117, 10, 115, 10, 101, 10, 32, 
	10, 107, 10, 110, 10, 111, 10, 119, 
	10, 32, 10, 108, 119, 10, 105, 10, 
	107, 10, 101, 10, 32, 10, 119, 10, 
	104, 10, 101, 10, 104, 10, 101, 10, 
	110, 10, 32, 10, 121, 10, 111, 10, 
	117, 10, 115, 10, 101, 10, 32, 10, 
	103, 10, 111, 10, 116, 111, 117, 115, 
	101, 32, 107, 110, 111, 119, 32, 108, 
	119, 105, 107, 101, 32, 119, 104, 101, 
	104, 101, 110, 32, 121, 111, 117, 115, 
	101, 32, 103, 111, 116, 32, 124, 9, 
	13, 10, 32, 92, 124, 9, 13, 10, 
	92, 124, 10, 92, 10, 32, 92, 124, 
	9, 13, 10, 32, 34, 35, 37, 42, 
	64, 65, 66, 68, 69, 70, 71, 84, 
	87, 89, 124, 9, 13, 10, 110, 10, 
	117, 10, 104, 10, 101, 117, 10, 110, 
	10, 32, 10, 121, 10, 111, 10, 117, 
	10, 115, 10, 101, 10, 32, 10, 103, 
	10, 111, 10, 116, 10, 116, 10, 97, 
	10, 101, 10, 97, 10, 116, 10, 117, 
	10, 114, 10, 101, 10, 58, 10, 105, 
	10, 118, 10, 117, 10, 104, 10, 101, 
	10, 32, 10, 116, 10, 104, 10, 105, 
	10, 110, 10, 103, 10, 32, 10, 111, 
	10, 102, 10, 32, 10, 105, 10, 116, 
	10, 32, 10, 105, 10, 115, 10, 104, 
	117, 10, 97, 10, 114, 10, 114, 10, 
	105, 10, 109, 10, 101, 10, 97, 10, 
	110, 10, 111, 10, 117, 10, 115, 10, 
	101, 10, 32, 10, 107, 10, 110, 10, 
	111, 10, 119, 10, 32, 10, 108, 119, 
	10, 105, 10, 107, 10, 101, 10, 32, 
	10, 119, 10, 104, 10, 101, 10, 104, 
	10, 101, 10, 110, 10, 32, 10, 121, 
	10, 111, 10, 117, 10, 115, 10, 101, 
	10, 32, 10, 103, 10, 111, 10, 116, 
	187, 191, 0
];

var _lexer_single_lengths = [
	0, 18, 17, 1, 1, 2, 2, 3, 
	3, 3, 3, 2, 2, 2, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 2, 2, 
	3, 5, 3, 1, 1, 1, 3, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 14, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 17, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 5, 2, 2, 
	2, 2, 2, 2, 2, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 10, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 14, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 4, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 3, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 3, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 14, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	3, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 3, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 2, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 2, 
	4, 3, 2, 4, 17, 2, 2, 2, 
	3, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 3, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 3, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 1, 1, 0
];

var _lexer_range_lengths = [
	0, 1, 1, 0, 0, 0, 0, 1, 
	1, 1, 1, 1, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 1, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	1, 0, 0, 1, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0
];

var _lexer_index_offsets = [
	0, 0, 20, 39, 41, 43, 46, 49, 
	54, 59, 64, 69, 73, 77, 80, 82, 
	84, 86, 88, 90, 92, 94, 96, 98, 
	100, 102, 104, 106, 108, 110, 112, 115, 
	118, 123, 130, 135, 137, 139, 141, 145, 
	147, 149, 151, 153, 155, 157, 159, 161, 
	163, 165, 167, 169, 171, 173, 175, 177, 
	179, 181, 183, 185, 187, 189, 191, 193, 
	195, 197, 199, 201, 203, 205, 207, 209, 
	211, 213, 215, 231, 234, 237, 240, 243, 
	246, 249, 252, 255, 258, 261, 264, 267, 
	270, 273, 276, 295, 297, 299, 301, 303, 
	305, 307, 309, 311, 313, 315, 322, 325, 
	328, 331, 334, 337, 340, 343, 345, 347, 
	349, 351, 353, 355, 357, 359, 361, 373, 
	376, 379, 382, 385, 388, 391, 394, 397, 
	400, 403, 406, 409, 412, 415, 418, 421, 
	424, 427, 430, 433, 436, 439, 442, 445, 
	448, 451, 454, 457, 460, 463, 466, 469, 
	472, 475, 478, 481, 484, 487, 490, 493, 
	496, 499, 502, 505, 508, 511, 514, 517, 
	520, 523, 526, 529, 532, 535, 538, 541, 
	544, 547, 550, 553, 556, 559, 562, 565, 
	568, 571, 574, 577, 580, 583, 586, 589, 
	592, 594, 596, 598, 600, 602, 604, 606, 
	608, 610, 612, 614, 616, 618, 620, 622, 
	624, 626, 628, 630, 632, 634, 636, 638, 
	654, 657, 660, 663, 666, 669, 672, 675, 
	678, 681, 684, 687, 690, 693, 696, 699, 
	702, 705, 708, 713, 716, 719, 722, 725, 
	728, 731, 734, 737, 740, 743, 746, 749, 
	752, 755, 758, 761, 764, 767, 770, 773, 
	776, 779, 782, 785, 788, 791, 794, 797, 
	800, 803, 806, 809, 812, 815, 818, 821, 
	824, 827, 830, 833, 836, 839, 842, 845, 
	848, 851, 854, 857, 860, 863, 866, 869, 
	872, 875, 878, 881, 884, 887, 890, 894, 
	897, 900, 903, 906, 909, 912, 915, 918, 
	921, 924, 927, 930, 933, 936, 939, 942, 
	945, 948, 952, 955, 958, 961, 964, 967, 
	970, 973, 976, 979, 982, 985, 988, 991, 
	994, 997, 1000, 1003, 1006, 1009, 1012, 1015, 
	1017, 1019, 1021, 1023, 1025, 1027, 1029, 1031, 
	1033, 1035, 1037, 1039, 1041, 1043, 1059, 1062, 
	1065, 1068, 1071, 1074, 1077, 1080, 1083, 1086, 
	1089, 1092, 1095, 1098, 1101, 1104, 1107, 1110, 
	1113, 1117, 1120, 1123, 1126, 1129, 1132, 1135, 
	1138, 1141, 1144, 1147, 1150, 1153, 1156, 1159, 
	1162, 1165, 1168, 1171, 1174, 1177, 1180, 1183, 
	1186, 1189, 1192, 1195, 1198, 1201, 1204, 1207, 
	1210, 1213, 1216, 1219, 1222, 1225, 1228, 1231, 
	1234, 1237, 1240, 1243, 1246, 1249, 1252, 1255, 
	1258, 1261, 1264, 1267, 1271, 1274, 1277, 1280, 
	1283, 1286, 1289, 1292, 1295, 1298, 1301, 1304, 
	1307, 1310, 1313, 1316, 1319, 1322, 1325, 1328, 
	1331, 1333, 1335, 1337, 1339, 1341, 1343, 1345, 
	1347, 1349, 1351, 1354, 1356, 1358, 1360, 1362, 
	1364, 1366, 1368, 1370, 1372, 1374, 1376, 1378, 
	1380, 1382, 1384, 1386, 1388, 1390, 1392, 1394, 
	1398, 1404, 1408, 1411, 1417, 1436, 1439, 1442, 
	1445, 1449, 1452, 1455, 1458, 1461, 1464, 1467, 
	1470, 1473, 1476, 1479, 1482, 1485, 1488, 1491, 
	1494, 1497, 1500, 1503, 1506, 1509, 1512, 1515, 
	1518, 1521, 1524, 1527, 1530, 1533, 1536, 1539, 
	1542, 1545, 1548, 1551, 1554, 1557, 1560, 1563, 
	1566, 1569, 1573, 1576, 1579, 1582, 1585, 1588, 
	1591, 1594, 1597, 1600, 1603, 1606, 1609, 1612, 
	1615, 1618, 1621, 1624, 1627, 1631, 1634, 1637, 
	1640, 1643, 1646, 1649, 1652, 1655, 1658, 1661, 
	1664, 1667, 1670, 1673, 1676, 1679, 1682, 1685, 
	1688, 1691, 1693, 1695
];

var _lexer_indicies = [
	2, 1, 3, 4, 5, 6, 7, 8, 
	9, 10, 11, 12, 13, 14, 15, 16, 
	17, 18, 1, 0, 2, 1, 3, 4, 
	5, 6, 7, 8, 9, 10, 11, 12, 
	13, 14, 15, 16, 17, 1, 0, 19, 
	0, 20, 0, 22, 23, 21, 25, 26, 
	24, 29, 28, 30, 28, 27, 33, 32, 
	34, 32, 31, 33, 32, 35, 32, 31, 
	33, 32, 36, 32, 31, 38, 37, 37, 
	0, 2, 39, 39, 0, 41, 42, 40, 
	2, 0, 43, 0, 44, 0, 45, 0, 
	46, 0, 47, 0, 48, 0, 49, 0, 
	50, 0, 51, 0, 52, 0, 53, 0, 
	54, 0, 55, 0, 56, 0, 57, 0, 
	59, 60, 58, 62, 63, 61, 0, 0, 
	0, 0, 64, 65, 66, 65, 65, 68, 
	67, 64, 2, 69, 7, 69, 0, 70, 
	0, 71, 0, 70, 0, 72, 73, 74, 
	0, 75, 0, 76, 0, 77, 0, 78, 
	0, 79, 0, 80, 0, 81, 0, 82, 
	0, 83, 0, 84, 0, 85, 0, 86, 
	0, 70, 0, 87, 0, 88, 0, 89, 
	0, 90, 0, 91, 0, 92, 0, 93, 
	0, 94, 0, 95, 0, 96, 0, 97, 
	0, 98, 0, 99, 0, 100, 0, 101, 
	0, 102, 0, 103, 0, 104, 0, 105, 
	0, 106, 0, 108, 107, 110, 109, 110, 
	111, 112, 113, 114, 112, 115, 116, 117, 
	118, 119, 120, 121, 122, 111, 109, 110, 
	123, 109, 110, 124, 109, 110, 125, 109, 
	110, 126, 109, 110, 127, 109, 110, 128, 
	109, 110, 129, 109, 110, 130, 109, 110, 
	131, 109, 110, 132, 109, 110, 133, 109, 
	110, 134, 109, 110, 135, 109, 110, 136, 
	109, 110, 137, 109, 139, 138, 140, 141, 
	142, 143, 144, 145, 146, 147, 148, 149, 
	150, 151, 152, 153, 154, 138, 0, 155, 
	0, 156, 0, 157, 0, 158, 0, 159, 
	0, 160, 0, 161, 0, 162, 0, 164, 
	163, 166, 165, 166, 167, 168, 169, 168, 
	167, 165, 166, 170, 165, 166, 171, 165, 
	166, 172, 165, 166, 173, 165, 166, 174, 
	165, 166, 175, 165, 166, 176, 165, 177, 
	0, 178, 0, 179, 0, 180, 0, 181, 
	0, 182, 0, 183, 0, 185, 184, 187, 
	186, 187, 188, 189, 190, 189, 191, 192, 
	193, 194, 195, 188, 186, 187, 196, 186, 
	187, 197, 186, 187, 198, 186, 187, 199, 
	186, 187, 200, 186, 187, 201, 186, 187, 
	202, 186, 187, 203, 186, 187, 204, 186, 
	187, 205, 186, 187, 206, 186, 187, 207, 
	186, 187, 208, 186, 187, 209, 186, 187, 
	210, 186, 187, 211, 186, 187, 212, 186, 
	187, 213, 186, 187, 214, 186, 187, 215, 
	186, 187, 216, 186, 187, 217, 186, 187, 
	218, 186, 187, 219, 186, 187, 220, 186, 
	187, 221, 186, 187, 222, 186, 187, 223, 
	186, 187, 224, 186, 187, 225, 186, 187, 
	226, 186, 187, 227, 186, 187, 228, 186, 
	187, 229, 186, 187, 230, 186, 187, 231, 
	186, 187, 232, 186, 187, 233, 186, 187, 
	234, 186, 187, 235, 186, 187, 236, 186, 
	187, 229, 186, 187, 237, 186, 187, 238, 
	186, 187, 239, 186, 187, 240, 186, 187, 
	241, 186, 187, 229, 186, 187, 242, 186, 
	187, 243, 186, 187, 244, 186, 187, 245, 
	186, 187, 246, 186, 187, 247, 186, 187, 
	248, 186, 187, 249, 186, 187, 250, 186, 
	187, 251, 186, 187, 252, 186, 187, 253, 
	186, 187, 254, 186, 187, 255, 186, 187, 
	256, 186, 187, 236, 186, 187, 257, 186, 
	187, 258, 186, 187, 259, 186, 187, 260, 
	186, 187, 261, 186, 187, 262, 186, 187, 
	263, 186, 187, 264, 186, 187, 255, 186, 
	265, 0, 266, 0, 74, 0, 267, 0, 
	268, 0, 269, 0, 270, 0, 271, 0, 
	272, 0, 273, 0, 274, 0, 275, 0, 
	276, 0, 277, 0, 278, 0, 279, 0, 
	280, 0, 281, 0, 282, 0, 283, 0, 
	284, 0, 286, 285, 288, 287, 288, 289, 
	290, 291, 292, 290, 293, 294, 295, 296, 
	297, 298, 299, 300, 289, 287, 288, 301, 
	287, 288, 302, 287, 288, 303, 287, 288, 
	304, 287, 288, 305, 287, 288, 306, 287, 
	288, 307, 287, 288, 308, 287, 288, 309, 
	287, 288, 310, 287, 288, 311, 287, 288, 
	312, 287, 288, 313, 287, 288, 314, 287, 
	288, 315, 287, 288, 316, 287, 288, 317, 
	287, 288, 316, 287, 288, 318, 319, 320, 
	287, 288, 321, 287, 288, 322, 287, 288, 
	323, 287, 288, 324, 287, 288, 325, 287, 
	288, 326, 287, 288, 327, 287, 288, 328, 
	287, 288, 329, 287, 288, 330, 287, 288, 
	331, 287, 288, 332, 287, 288, 316, 287, 
	288, 333, 287, 288, 334, 287, 288, 335, 
	287, 288, 336, 287, 288, 337, 287, 288, 
	338, 287, 288, 339, 287, 288, 340, 287, 
	288, 341, 287, 288, 342, 287, 288, 343, 
	287, 288, 344, 287, 288, 345, 287, 288, 
	346, 287, 288, 347, 287, 288, 348, 287, 
	288, 349, 287, 288, 350, 287, 288, 351, 
	287, 288, 315, 287, 288, 352, 287, 288, 
	353, 287, 288, 354, 287, 288, 355, 287, 
	288, 356, 287, 288, 351, 287, 288, 357, 
	287, 288, 358, 287, 288, 320, 287, 288, 
	359, 287, 288, 360, 287, 288, 361, 287, 
	288, 362, 287, 288, 363, 287, 288, 364, 
	287, 288, 365, 287, 288, 366, 287, 288, 
	367, 287, 288, 368, 287, 288, 369, 287, 
	288, 370, 287, 288, 371, 287, 288, 372, 
	287, 288, 373, 287, 288, 374, 287, 288, 
	351, 287, 288, 375, 320, 287, 288, 376, 
	287, 288, 377, 287, 288, 378, 287, 288, 
	379, 287, 288, 380, 287, 288, 381, 287, 
	288, 382, 287, 288, 372, 287, 288, 383, 
	287, 288, 384, 287, 288, 385, 287, 288, 
	386, 287, 288, 387, 287, 288, 388, 287, 
	288, 389, 287, 288, 390, 287, 288, 391, 
	287, 288, 392, 287, 288, 393, 394, 287, 
	288, 395, 287, 288, 396, 287, 288, 397, 
	287, 288, 398, 287, 288, 399, 287, 288, 
	400, 287, 288, 320, 287, 288, 401, 287, 
	288, 402, 287, 288, 403, 287, 288, 404, 
	287, 288, 405, 287, 288, 406, 287, 288, 
	407, 287, 288, 408, 287, 288, 409, 287, 
	288, 410, 287, 288, 411, 287, 288, 412, 
	287, 288, 316, 287, 413, 74, 0, 414, 
	0, 415, 0, 416, 0, 417, 0, 418, 
	0, 419, 0, 420, 0, 421, 0, 422, 
	0, 423, 0, 424, 0, 425, 0, 427, 
	426, 429, 428, 429, 430, 431, 432, 433, 
	431, 434, 435, 436, 437, 438, 439, 440, 
	441, 430, 428, 429, 442, 428, 429, 443, 
	428, 429, 444, 428, 429, 445, 428, 429, 
	446, 428, 429, 447, 428, 429, 448, 428, 
	429, 449, 428, 429, 450, 428, 429, 451, 
	428, 429, 452, 428, 429, 453, 428, 429, 
	454, 428, 429, 455, 428, 429, 456, 428, 
	429, 457, 428, 429, 458, 428, 429, 457, 
	428, 429, 459, 460, 428, 429, 461, 428, 
	429, 462, 428, 429, 463, 428, 429, 464, 
	428, 429, 465, 428, 429, 466, 428, 429, 
	467, 428, 429, 468, 428, 429, 469, 428, 
	429, 470, 428, 429, 471, 428, 429, 472, 
	428, 429, 457, 428, 429, 473, 428, 429, 
	474, 428, 429, 475, 428, 429, 476, 428, 
	429, 477, 428, 429, 478, 428, 429, 456, 
	428, 429, 479, 428, 429, 480, 428, 429, 
	460, 428, 429, 481, 428, 429, 482, 428, 
	429, 483, 428, 429, 484, 428, 429, 485, 
	428, 429, 486, 428, 429, 487, 428, 429, 
	488, 428, 429, 489, 428, 429, 490, 428, 
	429, 491, 428, 429, 492, 428, 429, 493, 
	428, 429, 494, 428, 429, 495, 428, 429, 
	496, 428, 429, 478, 428, 429, 497, 428, 
	429, 498, 428, 429, 499, 428, 429, 500, 
	428, 429, 501, 428, 429, 502, 428, 429, 
	503, 428, 429, 504, 428, 429, 505, 428, 
	429, 506, 428, 429, 507, 508, 428, 429, 
	509, 428, 429, 510, 428, 429, 511, 428, 
	429, 512, 428, 429, 513, 428, 429, 514, 
	428, 429, 460, 428, 429, 515, 428, 429, 
	516, 428, 429, 517, 428, 429, 518, 428, 
	429, 519, 428, 429, 520, 428, 429, 521, 
	428, 429, 522, 428, 429, 523, 428, 429, 
	524, 428, 429, 525, 428, 429, 526, 428, 
	429, 457, 428, 527, 0, 528, 0, 529, 
	0, 530, 0, 531, 0, 532, 0, 533, 
	0, 534, 0, 535, 0, 536, 0, 537, 
	538, 0, 539, 0, 540, 0, 541, 0, 
	542, 0, 543, 0, 544, 0, 74, 0, 
	545, 0, 546, 0, 547, 0, 548, 0, 
	549, 0, 550, 0, 551, 0, 552, 0, 
	553, 0, 554, 0, 555, 0, 556, 0, 
	70, 0, 557, 558, 557, 0, 561, 560, 
	562, 563, 560, 559, 0, 565, 566, 564, 
	0, 565, 564, 561, 567, 565, 566, 567, 
	564, 561, 568, 569, 570, 571, 572, 573, 
	574, 575, 576, 577, 578, 579, 580, 581, 
	582, 583, 568, 0, 110, 584, 109, 110, 
	585, 109, 110, 584, 109, 110, 586, 587, 
	109, 110, 588, 109, 110, 589, 109, 110, 
	590, 109, 110, 591, 109, 110, 592, 109, 
	110, 593, 109, 110, 594, 109, 110, 595, 
	109, 110, 596, 109, 110, 597, 109, 110, 
	598, 109, 110, 599, 109, 110, 584, 109, 
	110, 600, 109, 110, 601, 109, 110, 602, 
	109, 110, 603, 109, 110, 604, 109, 110, 
	605, 109, 110, 137, 109, 110, 606, 109, 
	110, 607, 109, 110, 587, 109, 110, 608, 
	109, 110, 609, 109, 110, 610, 109, 110, 
	611, 109, 110, 612, 109, 110, 613, 109, 
	110, 614, 109, 110, 615, 109, 110, 616, 
	109, 110, 617, 109, 110, 618, 109, 110, 
	619, 109, 110, 620, 109, 110, 621, 109, 
	110, 622, 109, 110, 623, 109, 110, 605, 
	109, 110, 624, 587, 109, 110, 625, 109, 
	110, 626, 109, 110, 627, 109, 110, 628, 
	109, 110, 629, 109, 110, 630, 109, 110, 
	631, 109, 110, 621, 109, 110, 632, 109, 
	110, 633, 109, 110, 634, 109, 110, 635, 
	109, 110, 636, 109, 110, 637, 109, 110, 
	638, 109, 110, 639, 109, 110, 640, 109, 
	110, 641, 109, 110, 642, 643, 109, 110, 
	644, 109, 110, 645, 109, 110, 646, 109, 
	110, 647, 109, 110, 648, 109, 110, 649, 
	109, 110, 587, 109, 110, 650, 109, 110, 
	651, 109, 110, 652, 109, 110, 653, 109, 
	110, 654, 109, 110, 655, 109, 110, 656, 
	109, 110, 657, 109, 110, 658, 109, 110, 
	659, 109, 110, 660, 109, 110, 661, 109, 
	110, 584, 109, 662, 0, 1, 0, 663, 
	0
];

var _lexer_trans_targs = [
	0, 2, 2, 3, 13, 15, 29, 32, 
	35, 36, 38, 91, 109, 192, 195, 334, 
	440, 471, 561, 4, 5, 6, 7, 6, 
	6, 7, 6, 8, 8, 8, 9, 8, 
	8, 8, 9, 10, 11, 12, 2, 12, 
	13, 2, 14, 16, 17, 18, 19, 20, 
	21, 22, 23, 24, 25, 26, 27, 28, 
	563, 30, 31, 2, 14, 31, 2, 14, 
	33, 34, 2, 33, 32, 34, 29, 37, 
	39, 52, 35, 40, 41, 42, 43, 44, 
	45, 46, 47, 48, 49, 50, 51, 53, 
	54, 55, 56, 57, 58, 59, 60, 61, 
	62, 63, 64, 65, 66, 67, 68, 69, 
	70, 71, 72, 73, 74, 73, 74, 74, 
	2, 75, 89, 477, 478, 480, 494, 501, 
	504, 521, 530, 76, 77, 78, 79, 80, 
	81, 82, 83, 84, 85, 86, 87, 88, 
	2, 90, 2, 2, 3, 13, 15, 29, 
	32, 35, 36, 38, 91, 109, 192, 195, 
	334, 440, 471, 92, 93, 94, 95, 96, 
	97, 98, 99, 100, 101, 100, 101, 101, 
	2, 102, 103, 104, 105, 106, 107, 108, 
	90, 110, 111, 112, 113, 114, 115, 116, 
	117, 118, 117, 118, 118, 2, 119, 133, 
	154, 161, 167, 183, 120, 121, 122, 123, 
	124, 125, 126, 127, 128, 129, 130, 131, 
	132, 2, 134, 135, 136, 137, 138, 139, 
	140, 141, 142, 143, 144, 145, 146, 147, 
	148, 149, 150, 151, 152, 153, 90, 155, 
	156, 157, 158, 159, 160, 162, 163, 164, 
	165, 166, 168, 169, 170, 171, 172, 173, 
	174, 175, 176, 177, 178, 179, 180, 181, 
	182, 184, 185, 186, 187, 188, 189, 190, 
	191, 193, 194, 196, 197, 198, 199, 200, 
	201, 202, 203, 204, 205, 206, 207, 208, 
	209, 210, 211, 212, 213, 214, 215, 214, 
	215, 215, 2, 216, 230, 231, 232, 234, 
	268, 274, 277, 294, 303, 217, 218, 219, 
	220, 221, 222, 223, 224, 225, 226, 227, 
	228, 229, 2, 90, 230, 233, 235, 248, 
	231, 236, 237, 238, 239, 240, 241, 242, 
	243, 244, 245, 246, 247, 249, 250, 251, 
	252, 253, 254, 255, 256, 257, 258, 259, 
	260, 261, 262, 263, 264, 265, 266, 267, 
	269, 270, 271, 272, 273, 275, 276, 278, 
	279, 280, 281, 282, 283, 284, 285, 286, 
	287, 288, 289, 290, 291, 292, 293, 295, 
	296, 297, 298, 299, 300, 301, 302, 304, 
	305, 306, 307, 308, 309, 310, 311, 312, 
	313, 314, 321, 315, 316, 317, 318, 319, 
	320, 322, 323, 324, 325, 326, 327, 328, 
	329, 330, 331, 332, 333, 335, 336, 337, 
	338, 339, 340, 341, 342, 343, 344, 345, 
	346, 347, 348, 349, 348, 349, 349, 2, 
	350, 364, 365, 366, 368, 382, 389, 392, 
	391, 409, 351, 352, 353, 354, 355, 356, 
	357, 358, 359, 360, 361, 362, 363, 2, 
	90, 364, 367, 369, 365, 370, 371, 372, 
	373, 374, 375, 376, 377, 378, 379, 380, 
	381, 383, 384, 385, 386, 387, 388, 390, 
	391, 393, 394, 395, 396, 397, 398, 399, 
	400, 401, 402, 403, 404, 405, 406, 407, 
	408, 410, 411, 412, 413, 414, 415, 416, 
	417, 418, 419, 420, 427, 421, 422, 423, 
	424, 425, 426, 428, 429, 430, 431, 432, 
	433, 434, 435, 436, 437, 438, 439, 441, 
	442, 443, 444, 445, 446, 447, 448, 449, 
	450, 451, 458, 452, 453, 454, 455, 456, 
	457, 459, 460, 461, 462, 463, 464, 465, 
	466, 467, 468, 469, 470, 471, 472, 473, 
	475, 476, 474, 472, 473, 474, 472, 475, 
	476, 3, 13, 15, 29, 32, 35, 36, 
	38, 91, 109, 192, 195, 334, 440, 471, 
	89, 479, 481, 477, 482, 483, 484, 485, 
	486, 487, 488, 489, 490, 491, 492, 493, 
	495, 496, 497, 498, 499, 500, 502, 503, 
	505, 506, 507, 508, 509, 510, 511, 512, 
	513, 514, 515, 516, 517, 518, 519, 520, 
	522, 523, 524, 525, 526, 527, 528, 529, 
	531, 532, 533, 534, 535, 536, 537, 538, 
	539, 540, 541, 548, 542, 543, 544, 545, 
	546, 547, 549, 550, 551, 552, 553, 554, 
	555, 556, 557, 558, 559, 560, 562, 0
];

var _lexer_trans_actions = [
	43, 0, 54, 3, 1, 0, 29, 1, 
	29, 29, 29, 29, 29, 29, 29, 29, 
	29, 35, 0, 0, 0, 7, 139, 48, 
	0, 102, 9, 5, 45, 134, 45, 0, 
	33, 122, 33, 33, 0, 11, 106, 0, 
	0, 114, 25, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 57, 149, 126, 0, 110, 23, 
	0, 27, 118, 27, 51, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 57, 144, 0, 54, 0, 
	72, 33, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	15, 15, 31, 130, 60, 57, 31, 63, 
	57, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 66, 0, 0, 0, 0, 0, 
	0, 0, 0, 57, 144, 0, 54, 0, 
	81, 84, 0, 0, 0, 0, 0, 0, 
	21, 0, 0, 0, 0, 0, 0, 0, 
	57, 144, 0, 54, 0, 69, 33, 84, 
	84, 84, 84, 84, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 13, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 13, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 57, 144, 0, 
	54, 0, 75, 33, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 17, 17, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 57, 144, 0, 54, 0, 78, 
	33, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 19, 
	19, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 37, 
	37, 54, 37, 87, 0, 0, 39, 0, 
	0, 93, 90, 41, 96, 90, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 99, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0
];

var _lexer_eof_actions = [
	0, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43
];

var lexer_start = 1;
var lexer_first_final = 563;
var lexer_error = 0;

var lexer_en_main = 1;


/* line 129 "ragel/i18n/en_scouse.js.rl" */

/* line 130 "ragel/i18n/en_scouse.js.rl" */

/* line 131 "ragel/i18n/en_scouse.js.rl" */

/* line 132 "ragel/i18n/en_scouse.js.rl" */

var Lexer = function(listener) {
  // Check that listener has the required functions
  var events = ['comment', 'tag', 'feature', 'background', 'scenario', 'scenario_outline', 'examples', 'step', 'doc_string', 'row', 'eof'];
  for(var i=0, len=events.length; i<len; i++) {
    var event = events[i];
    if(typeof listener[event] != 'function') {
      throw new Error("Error. No " + event + " function exists on " + JSON.stringify(listener));
    }
  }
  this.listener = listener;
};

Lexer.prototype.scan = function(data) {
  var ending = "\n%_FEATURE_END_%";
  if(typeof data == 'string') {
    data = this.stringToBytes(data + ending);
  } else if(typeof Buffer != 'undefined' && Buffer.isBuffer(data)) {
    // Node.js
    var buf = new Buffer(data.length + ending.length);
    data.copy(buf, 0, 0);
    new Buffer(ending).copy(buf, data.length, 0);
    data = buf;
  }
  var eof = pe = data.length;
  var p = 0;

  this.line_number = 1;
  this.last_newline = 0;
  var signedCharValue=function(v){return v > 127 ? v-256 : v; };

  
/* line 987 "js/lib/gherkin/lexer/en_scouse.js" */
{
	  this.cs = lexer_start;
} /* JSCodeGen::writeInit */

/* line 164 "ragel/i18n/en_scouse.js.rl" */
  
/* line 994 "js/lib/gherkin/lexer/en_scouse.js" */
{
	var _klen, _trans, _keys, _ps, _widec, _acts, _nacts;
	var _goto_level, _resume, _eof_trans, _again, _test_eof;
	var _out;
	_klen = _trans = _keys = _acts = _nacts = null;
	_goto_level = 0;
	_resume = 10;
	_eof_trans = 15;
	_again = 20;
	_test_eof = 30;
	_out = 40;
	while (true) {
	_trigger_goto = false;
	if (_goto_level <= 0) {
	if (p == pe) {
		_goto_level = _test_eof;
		continue;
	}
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	}
	if (_goto_level <= _resume) {
	_keys = _lexer_key_offsets[ this.cs];
	_trans = _lexer_index_offsets[ this.cs];
	_klen = _lexer_single_lengths[ this.cs];
	_break_match = false;
	
	do {
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + _klen - 1;

	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + ( (_upper - _lower) >> 1 );

	        if (( signedCharValue(data[p])) < _lexer_trans_keys[_mid]) {
	           _upper = _mid - 1;
	        } else if (( signedCharValue(data[p])) > _lexer_trans_keys[_mid]) {
	           _lower = _mid + 1;
	        } else {
	           _trans += (_mid - _keys);
	           _break_match = true;
	           break;
	        };
	     } /* while */
	     if (_break_match) { break; }
	     _keys += _klen;
	     _trans += _klen;
	  }
	  _klen = _lexer_range_lengths[ this.cs];
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + (_klen << 1) - 2;
	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + (((_upper-_lower) >> 1) & ~1);
	        if (( signedCharValue(data[p])) < _lexer_trans_keys[_mid]) {
	          _upper = _mid - 2;
	         } else if (( signedCharValue(data[p])) > _lexer_trans_keys[_mid+1]) {
	          _lower = _mid + 2;
	        } else {
	          _trans += ((_mid - _keys) >> 1);
	          _break_match = true;
	          break;
	        }
	     } /* while */
	     if (_break_match) { break; }
	     _trans += _klen
	  }
	} while (false);
	_trans = _lexer_indicies[_trans];
	 this.cs = _lexer_trans_targs[_trans];
	if (_lexer_trans_actions[_trans] != 0) {
		_acts = _lexer_trans_actions[_trans];
		_nacts = _lexer_actions[_acts];
		_acts += 1;
		while (_nacts > 0) {
			_nacts -= 1;
			_acts += 1;
			switch (_lexer_actions[_acts - 1]) {
case 0:
/* line 6 "ragel/i18n/en_scouse.js.rl" */

    this.content_start = p;
    this.current_line = this.line_number;
    this.start_col = p - this.last_newline - (this.keyword+':').length;
  		break;
case 1:
/* line 12 "ragel/i18n/en_scouse.js.rl" */

    this.current_line = this.line_number;
    this.start_col = p - this.last_newline;
  		break;
case 2:
/* line 17 "ragel/i18n/en_scouse.js.rl" */

    this.content_start = p;
  		break;
case 3:
/* line 21 "ragel/i18n/en_scouse.js.rl" */

    this.docstring_content_type_start = p;
  		break;
case 4:
/* line 25 "ragel/i18n/en_scouse.js.rl" */

    this.docstring_content_type_end = p;
  		break;
case 5:
/* line 29 "ragel/i18n/en_scouse.js.rl" */

    var con = this.unindent(
      this.start_col, 
      this.bytesToString(data.slice(this.content_start, this.next_keyword_start-1)).replace(/(\r?\n)?([\t ])*$/, '').replace(/\\\"\\\"\\\"/mg, '"""')
    );
    var con_type = this.bytesToString(data.slice(this.docstring_content_type_start, this.docstring_content_type_end)).trim();
    this.listener.doc_string(con_type, con, this.current_line); 
  		break;
case 6:
/* line 38 "ragel/i18n/en_scouse.js.rl" */

    p = this.store_keyword_content('feature', data, p, eof);
  		break;
case 7:
/* line 42 "ragel/i18n/en_scouse.js.rl" */

    p = this.store_keyword_content('background', data, p, eof);
  		break;
case 8:
/* line 46 "ragel/i18n/en_scouse.js.rl" */

    p = this.store_keyword_content('scenario', data, p, eof);
  		break;
case 9:
/* line 50 "ragel/i18n/en_scouse.js.rl" */

    p = this.store_keyword_content('scenario_outline', data, p, eof);
  		break;
case 10:
/* line 54 "ragel/i18n/en_scouse.js.rl" */

    p = this.store_keyword_content('examples', data, p, eof);
  		break;
case 11:
/* line 58 "ragel/i18n/en_scouse.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.step(this.keyword, con, this.current_line);
  		break;
case 12:
/* line 63 "ragel/i18n/en_scouse.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.comment(con, this.line_number);
    this.keyword_start = null;
  		break;
case 13:
/* line 69 "ragel/i18n/en_scouse.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.tag(con, this.line_number);
    this.keyword_start = null;
  		break;
case 14:
/* line 75 "ragel/i18n/en_scouse.js.rl" */

    this.line_number++;
  		break;
case 15:
/* line 79 "ragel/i18n/en_scouse.js.rl" */

    this.last_newline = p + 1;
  		break;
case 16:
/* line 83 "ragel/i18n/en_scouse.js.rl" */

    this.keyword_start = this.keyword_start || p;
  		break;
case 17:
/* line 87 "ragel/i18n/en_scouse.js.rl" */

    this.keyword = this.bytesToString(data.slice(this.keyword_start, p)).replace(/:$/, '');
    this.keyword_start = null;
  		break;
case 18:
/* line 92 "ragel/i18n/en_scouse.js.rl" */

    this.next_keyword_start = p;
  		break;
case 19:
/* line 96 "ragel/i18n/en_scouse.js.rl" */

    p = p - 1;
    current_row = [];
    this.current_line = this.line_number;
  		break;
case 20:
/* line 102 "ragel/i18n/en_scouse.js.rl" */

    this.content_start = p;
  		break;
case 21:
/* line 106 "ragel/i18n/en_scouse.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    current_row.push(con.replace(/\\\|/, "|").replace(/\\n/, "\n").replace(/\\\\/, "\\"));
  		break;
case 22:
/* line 111 "ragel/i18n/en_scouse.js.rl" */

    this.listener.row(current_row, this.current_line);
  		break;
case 23:
/* line 115 "ragel/i18n/en_scouse.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw new Error("Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.");
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 1221 "js/lib/gherkin/lexer/en_scouse.js" */
			} /* action switch */
		}
	}
	if (_trigger_goto) {
		continue;
	}
	}
	if (_goto_level <= _again) {
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	p += 1;
	if (p != pe) {
		_goto_level = _resume;
		continue;
	}
	}
	if (_goto_level <= _test_eof) {
	if (p == eof) {
	__acts = _lexer_eof_actions[ this.cs];
	__nacts =  _lexer_actions[__acts];
	__acts += 1;
	while (__nacts > 0) {
		__nacts -= 1;
		__acts += 1;
		switch (_lexer_actions[__acts - 1]) {
case 23:
/* line 115 "ragel/i18n/en_scouse.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw new Error("Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.");
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 1260 "js/lib/gherkin/lexer/en_scouse.js" */
		} /* eof action switch */
	}
	if (_trigger_goto) {
		continue;
	}
}
	}
	if (_goto_level <= _out) {
		break;
	}
	}
	}

/* line 165 "ragel/i18n/en_scouse.js.rl" */
};


/*
 * Decode utf-8 byte sequence to string.
 */
var decodeUtf8 = function(bytes) {
  var result = "";
  var i = 0;
  var wc;
  var c;

  while (i < bytes.length) {
    /* parse as UTF-8 lead byte */
    wc = bytes[i++];
    if (wc < 0x80) {
      count = 0;
    } else if (wc < 0xC2 || wc >= 0xF8) {
      throw new Error("input is not a valid UTF-8 lead octet");
    } else if (wc < 0xE0) {
      count = 1;
      wc = (wc & 0x1F) << 6;
    } else if (wc < 0xF0) {
      count = 2;
      wc = (wc & 0x0F) << 12;
    } else /* wc < 0xF8 */ {
      count = 3;
      wc = (wc & 0x07) << 18;
    }

    /* parse trail bytes, if any */
    while (count) {
      if (!(i < bytes.length)) {
        throw new Error("short read");
      }
      if ((c = bytes[i++] ^ 0x80) > 0x3F) {
        throw new Error("input is not a valid UTF-8 trail octet");
      }
      wc |= c << (6 * --count);
      if (wc < (1 << (5 * count + 6))) {
        throw new Error("invalid non-minimal encoded input");
      }
    }

    /* handle conversion to UTF-16 if needed */
    if (wc > 0xFFFF) {
      wc -= 0x10000;
      result += String.fromCharCode(0xD800 + (wc >> 10));
      wc = 0xDC00 + (wc & 0x3FF);
    }
    result += String.fromCharCode(wc);
  }

  return result;
};

/*
 * Encode string to an array of bytes using utf8 encoding.
 *
 * Javascript internally stores character data as utf16 (like java).
 * String.charCodeAt() does *not* produce unicode points, but simply
 * reflects this internal representation. Thus, it is necessary
 * to first decode the utf-16 representation before encoding to
 * utf-8.
 */
var encodeUtf8 = function(string) {
  var bytes = [];
  var i = 0;
  var j = 0;
  var wc;

  while (i < string.length) {
    wc = string.charCodeAt(i++);
    if (wc >= 0xD800 && wc <= 0xDBFF && i < string.length && string.charCodeAt(i) >= 0xDC00 && string.charCodeAt(i) <= 0xDFFF) {
      /* decode UTF-16 */
      wc = 0x10000 + ((wc & 0x3FF) << 10) + (string.charCodeAt(i++) & 0x3FF);
    }

    /* emit lead byte */
    if (wc < 0x80) {
      bytes[j++] = wc;
      count = 0;
    } else if (wc < 0x800) {
      bytes[j++] = 0xC0 | (wc >> 6);
      count = 1;
    } else if (wc < 0x10000) {
      bytes[j++] = 0xE0 | (wc >> 12);
      count = 2;
    } else {
      /* SMP: 21-bit Unicode */
      bytes[j++] = 0xF0 | (wc >> 18);
      count = 3;
    }

    /* emit trail bytes, if any */
    while (count) {
      bytes[j++] = 0x80 | ((wc >> (6 * --count)) & 0x3F);
    }
  }

  return bytes;

};

Lexer.prototype.bytesToString = function(bytes) {
  if(typeof bytes.write == 'function') {
    // Node.js
    return bytes.toString('utf-8');
  }
  return decodeUtf8(bytes);
};

Lexer.prototype.stringToBytes = function(string) {
  return encodeUtf8(string);
};

Lexer.prototype.unindent = function(startcol, text) {
  startcol = startcol || 0;
  return text.replace(new RegExp('^[\t ]{0,' + startcol + '}', 'gm'), ''); 
};

Lexer.prototype.store_keyword_content = function(event, data, p, eof) {
  var end_point = (!this.next_keyword_start || (p == eof)) ? p : this.next_keyword_start;
  var content = this.unindent(this.start_col + 2, this.bytesToString(data.slice(this.content_start, end_point))).replace(/\s+$/,"");
  var content_lines = content.split("\n")
  var name = content_lines.shift() || "";
  name = name.trim();
  var description = content_lines.join("\n");
  this.listener[event](this.keyword, name, description, this.current_line);
  var nks = this.next_keyword_start;
  this.next_keyword_start = null;
  return nks ? nks - 1 : p;
};

Lexer.prototype.current_line_content = function(data, p) {
  var rest = Array.prototype.slice.call(data,this.last_newline, -1);
  var end = rest.indexOf(10) || -1;
  return this.bytesToString(rest.slice(0, end)).trim();
};

// Node.js export
if(typeof module !== 'undefined') {
  module.exports = Lexer;
}
// Require.js export
if (typeof define !== 'undefined') {
  if(define.amd) {
    define('gherkin/lexer/en_scouse', [], function() {
      return Lexer;
    });
  } else {
    define('gherkin/lexer/en_scouse', function(require, exports, module) {
      exports.Lexer = Lexer;
    });
  }
}

})();

}).call(this,require("buffer").Buffer)

},{"buffer":69}],200:[function(require,module,exports){
(function (Buffer){

/* line 1 "ragel/i18n/en_tx.js.rl" */
;(function() {


/* line 126 "ragel/i18n/en_tx.js.rl" */



/* line 11 "js/lib/gherkin/lexer/en_tx.js" */
var _lexer_actions = [
	0, 1, 0, 1, 1, 1, 2, 1, 
	3, 1, 4, 1, 5, 1, 6, 1, 
	7, 1, 8, 1, 9, 1, 10, 1, 
	11, 1, 12, 1, 13, 1, 16, 1, 
	17, 1, 18, 1, 19, 1, 20, 1, 
	21, 1, 22, 1, 23, 2, 2, 18, 
	2, 3, 4, 2, 13, 0, 2, 14, 
	15, 2, 17, 0, 2, 17, 1, 2, 
	17, 16, 2, 17, 19, 2, 18, 6, 
	2, 18, 7, 2, 18, 8, 2, 18, 
	9, 2, 18, 10, 2, 18, 16, 2, 
	20, 21, 2, 22, 0, 2, 22, 1, 
	2, 22, 16, 2, 22, 19, 3, 4, 
	14, 15, 3, 5, 14, 15, 3, 11, 
	14, 15, 3, 12, 14, 15, 3, 13, 
	14, 15, 3, 14, 15, 18, 3, 17, 
	0, 11, 3, 17, 14, 15, 4, 2, 
	14, 15, 18, 4, 3, 4, 14, 15, 
	4, 17, 0, 14, 15, 5, 17, 0, 
	11, 14, 15
];

var _lexer_key_offsets = [
	0, 0, 19, 37, 38, 39, 41, 43, 
	48, 53, 58, 63, 67, 71, 73, 74, 
	75, 76, 77, 78, 79, 80, 81, 82, 
	83, 84, 85, 86, 87, 88, 89, 91, 
	93, 98, 105, 110, 112, 113, 114, 115, 
	116, 117, 118, 119, 120, 121, 122, 137, 
	139, 141, 143, 145, 147, 149, 151, 153, 
	155, 157, 159, 161, 163, 165, 167, 185, 
	187, 188, 189, 190, 191, 192, 193, 194, 
	195, 196, 197, 198, 213, 215, 217, 219, 
	221, 223, 225, 227, 229, 231, 233, 235, 
	237, 239, 241, 243, 246, 248, 250, 252, 
	254, 256, 258, 260, 262, 264, 266, 268, 
	270, 272, 274, 276, 278, 280, 282, 284, 
	286, 288, 290, 292, 294, 296, 298, 300, 
	302, 304, 306, 308, 310, 312, 314, 316, 
	317, 318, 319, 320, 321, 322, 323, 324, 
	325, 326, 327, 328, 329, 330, 331, 332, 
	333, 340, 342, 344, 346, 348, 350, 352, 
	354, 355, 356, 357, 358, 359, 360, 361, 
	362, 363, 375, 377, 379, 381, 383, 385, 
	387, 389, 391, 393, 395, 397, 399, 401, 
	403, 405, 407, 409, 411, 413, 415, 417, 
	419, 421, 423, 425, 427, 429, 431, 433, 
	435, 437, 439, 441, 443, 445, 447, 449, 
	451, 453, 455, 457, 459, 461, 463, 465, 
	467, 469, 471, 473, 475, 477, 479, 480, 
	481, 482, 483, 484, 485, 486, 487, 488, 
	489, 490, 491, 492, 493, 508, 510, 512, 
	514, 516, 518, 520, 522, 524, 526, 528, 
	530, 532, 534, 536, 538, 541, 543, 545, 
	547, 549, 551, 553, 555, 557, 559, 561, 
	563, 565, 567, 569, 571, 574, 576, 578, 
	580, 582, 584, 586, 588, 590, 592, 594, 
	596, 598, 600, 602, 604, 606, 608, 610, 
	612, 614, 616, 618, 620, 622, 624, 626, 
	628, 629, 633, 639, 642, 644, 650, 668, 
	670, 672, 674, 676, 678, 680, 682, 684, 
	686, 688, 690, 692, 694, 696, 698, 700, 
	702, 704, 706, 708, 710, 712, 714, 716, 
	718, 720, 722, 724, 726, 727, 728, 729
];

var _lexer_trans_keys = [
	10, 32, 34, 35, 37, 42, 64, 65, 
	66, 69, 70, 71, 83, 84, 87, 124, 
	239, 9, 13, 10, 32, 34, 35, 37, 
	42, 64, 65, 66, 69, 70, 71, 83, 
	84, 87, 124, 9, 13, 34, 34, 10, 
	13, 10, 13, 10, 32, 34, 9, 13, 
	10, 32, 34, 9, 13, 10, 32, 34, 
	9, 13, 10, 32, 34, 9, 13, 10, 
	32, 9, 13, 10, 32, 9, 13, 10, 
	13, 10, 95, 70, 69, 65, 84, 85, 
	82, 69, 95, 69, 78, 68, 95, 37, 
	32, 10, 13, 10, 13, 13, 32, 64, 
	9, 10, 9, 10, 13, 32, 64, 11, 
	12, 10, 32, 64, 9, 13, 108, 110, 
	108, 32, 121, 39, 97, 108, 108, 58, 
	10, 10, 10, 32, 35, 37, 42, 64, 
	65, 66, 70, 71, 83, 84, 87, 9, 
	13, 10, 95, 10, 70, 10, 69, 10, 
	65, 10, 84, 10, 85, 10, 82, 10, 
	69, 10, 95, 10, 69, 10, 78, 10, 
	68, 10, 95, 10, 37, 10, 32, 10, 
	32, 34, 35, 37, 42, 64, 65, 66, 
	69, 70, 71, 83, 84, 87, 124, 9, 
	13, 97, 117, 99, 107, 103, 114, 111, 
	117, 110, 100, 58, 10, 10, 10, 32, 
	35, 37, 42, 64, 65, 66, 70, 71, 
	83, 84, 87, 9, 13, 10, 95, 10, 
	70, 10, 69, 10, 65, 10, 84, 10, 
	85, 10, 82, 10, 69, 10, 95, 10, 
	69, 10, 78, 10, 68, 10, 95, 10, 
	37, 10, 32, 10, 108, 110, 10, 108, 
	10, 32, 10, 121, 10, 39, 10, 97, 
	10, 108, 10, 108, 10, 58, 10, 100, 
	10, 32, 10, 121, 10, 39, 10, 97, 
	10, 108, 10, 108, 10, 117, 10, 116, 
	10, 101, 10, 97, 10, 116, 10, 117, 
	10, 114, 10, 101, 10, 105, 10, 118, 
	10, 101, 10, 110, 10, 99, 10, 101, 
	10, 110, 10, 97, 10, 114, 10, 105, 
	10, 111, 10, 104, 116, 32, 121, 39, 
	97, 108, 108, 120, 97, 109, 112, 108, 
	101, 115, 58, 10, 10, 10, 32, 35, 
	70, 124, 9, 13, 10, 101, 10, 97, 
	10, 116, 10, 117, 10, 114, 10, 101, 
	10, 58, 101, 97, 116, 117, 114, 101, 
	58, 10, 10, 10, 32, 35, 37, 64, 
	65, 66, 69, 70, 83, 9, 13, 10, 
	95, 10, 70, 10, 69, 10, 65, 10, 
	84, 10, 85, 10, 82, 10, 69, 10, 
	95, 10, 69, 10, 78, 10, 68, 10, 
	95, 10, 37, 10, 108, 10, 108, 10, 
	32, 10, 121, 10, 39, 10, 97, 10, 
	108, 10, 108, 10, 58, 10, 97, 10, 
	99, 10, 107, 10, 103, 10, 114, 10, 
	111, 10, 117, 10, 110, 10, 100, 10, 
	120, 10, 97, 10, 109, 10, 112, 10, 
	108, 10, 101, 10, 115, 10, 101, 10, 
	97, 10, 116, 10, 117, 10, 114, 10, 
	101, 10, 99, 10, 101, 10, 110, 10, 
	97, 10, 114, 10, 105, 10, 111, 105, 
	118, 101, 110, 99, 101, 110, 97, 114, 
	105, 111, 58, 10, 10, 10, 32, 35, 
	37, 42, 64, 65, 66, 70, 71, 83, 
	84, 87, 9, 13, 10, 95, 10, 70, 
	10, 69, 10, 65, 10, 84, 10, 85, 
	10, 82, 10, 69, 10, 95, 10, 69, 
	10, 78, 10, 68, 10, 95, 10, 37, 
	10, 32, 10, 108, 110, 10, 108, 10, 
	32, 10, 121, 10, 39, 10, 97, 10, 
	108, 10, 108, 10, 58, 10, 100, 10, 
	32, 10, 121, 10, 39, 10, 97, 10, 
	108, 10, 108, 10, 97, 117, 10, 99, 
	10, 107, 10, 103, 10, 114, 10, 111, 
	10, 117, 10, 110, 10, 100, 10, 116, 
	10, 101, 10, 97, 10, 116, 10, 117, 
	10, 114, 10, 101, 10, 105, 10, 118, 
	10, 101, 10, 110, 10, 99, 10, 101, 
	10, 110, 10, 97, 10, 114, 10, 105, 
	10, 111, 10, 104, 104, 32, 124, 9, 
	13, 10, 32, 92, 124, 9, 13, 10, 
	92, 124, 10, 92, 10, 32, 92, 124, 
	9, 13, 10, 32, 34, 35, 37, 42, 
	64, 65, 66, 69, 70, 71, 83, 84, 
	87, 124, 9, 13, 10, 110, 10, 100, 
	10, 32, 10, 121, 10, 39, 10, 97, 
	10, 108, 10, 108, 10, 117, 10, 116, 
	10, 101, 10, 97, 10, 116, 10, 117, 
	10, 114, 10, 101, 10, 58, 10, 105, 
	10, 118, 10, 101, 10, 110, 10, 99, 
	10, 101, 10, 110, 10, 97, 10, 114, 
	10, 105, 10, 111, 10, 104, 100, 187, 
	191, 0
];

var _lexer_single_lengths = [
	0, 17, 16, 1, 1, 2, 2, 3, 
	3, 3, 3, 2, 2, 2, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 2, 2, 
	3, 5, 3, 2, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 13, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 16, 2, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 13, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 3, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	5, 2, 2, 2, 2, 2, 2, 2, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 10, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 13, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 3, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 3, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	1, 2, 4, 3, 2, 4, 16, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 1, 1, 1, 0
];

var _lexer_range_lengths = [
	0, 1, 1, 0, 0, 0, 0, 1, 
	1, 1, 1, 1, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 1, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 1, 0, 0, 1, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0
];

var _lexer_index_offsets = [
	0, 0, 19, 37, 39, 41, 44, 47, 
	52, 57, 62, 67, 71, 75, 78, 80, 
	82, 84, 86, 88, 90, 92, 94, 96, 
	98, 100, 102, 104, 106, 108, 110, 113, 
	116, 121, 128, 133, 136, 138, 140, 142, 
	144, 146, 148, 150, 152, 154, 156, 171, 
	174, 177, 180, 183, 186, 189, 192, 195, 
	198, 201, 204, 207, 210, 213, 216, 234, 
	237, 239, 241, 243, 245, 247, 249, 251, 
	253, 255, 257, 259, 274, 277, 280, 283, 
	286, 289, 292, 295, 298, 301, 304, 307, 
	310, 313, 316, 319, 323, 326, 329, 332, 
	335, 338, 341, 344, 347, 350, 353, 356, 
	359, 362, 365, 368, 371, 374, 377, 380, 
	383, 386, 389, 392, 395, 398, 401, 404, 
	407, 410, 413, 416, 419, 422, 425, 428, 
	430, 432, 434, 436, 438, 440, 442, 444, 
	446, 448, 450, 452, 454, 456, 458, 460, 
	462, 469, 472, 475, 478, 481, 484, 487, 
	490, 492, 494, 496, 498, 500, 502, 504, 
	506, 508, 520, 523, 526, 529, 532, 535, 
	538, 541, 544, 547, 550, 553, 556, 559, 
	562, 565, 568, 571, 574, 577, 580, 583, 
	586, 589, 592, 595, 598, 601, 604, 607, 
	610, 613, 616, 619, 622, 625, 628, 631, 
	634, 637, 640, 643, 646, 649, 652, 655, 
	658, 661, 664, 667, 670, 673, 676, 678, 
	680, 682, 684, 686, 688, 690, 692, 694, 
	696, 698, 700, 702, 704, 719, 722, 725, 
	728, 731, 734, 737, 740, 743, 746, 749, 
	752, 755, 758, 761, 764, 768, 771, 774, 
	777, 780, 783, 786, 789, 792, 795, 798, 
	801, 804, 807, 810, 813, 817, 820, 823, 
	826, 829, 832, 835, 838, 841, 844, 847, 
	850, 853, 856, 859, 862, 865, 868, 871, 
	874, 877, 880, 883, 886, 889, 892, 895, 
	898, 900, 904, 910, 914, 917, 923, 941, 
	944, 947, 950, 953, 956, 959, 962, 965, 
	968, 971, 974, 977, 980, 983, 986, 989, 
	992, 995, 998, 1001, 1004, 1007, 1010, 1013, 
	1016, 1019, 1022, 1025, 1028, 1030, 1032, 1034
];

var _lexer_indicies = [
	2, 1, 3, 4, 5, 6, 7, 8, 
	9, 10, 11, 12, 13, 14, 14, 15, 
	16, 1, 0, 2, 1, 3, 4, 5, 
	6, 7, 8, 9, 10, 11, 12, 13, 
	14, 14, 15, 1, 0, 17, 0, 18, 
	0, 20, 21, 19, 23, 24, 22, 27, 
	26, 28, 26, 25, 31, 30, 32, 30, 
	29, 31, 30, 33, 30, 29, 31, 30, 
	34, 30, 29, 36, 35, 35, 0, 2, 
	37, 37, 0, 39, 40, 38, 2, 0, 
	41, 0, 42, 0, 43, 0, 44, 0, 
	45, 0, 46, 0, 47, 0, 48, 0, 
	49, 0, 50, 0, 51, 0, 52, 0, 
	53, 0, 54, 0, 55, 0, 57, 58, 
	56, 60, 61, 59, 0, 0, 0, 0, 
	62, 63, 64, 63, 63, 66, 65, 62, 
	2, 67, 7, 67, 0, 68, 69, 0, 
	70, 0, 71, 0, 72, 0, 73, 0, 
	74, 0, 75, 0, 76, 0, 77, 0, 
	79, 78, 81, 80, 81, 82, 83, 84, 
	85, 83, 86, 87, 88, 89, 90, 91, 
	91, 82, 80, 81, 92, 80, 81, 93, 
	80, 81, 94, 80, 81, 95, 80, 81, 
	96, 80, 81, 97, 80, 81, 98, 80, 
	81, 99, 80, 81, 100, 80, 81, 101, 
	80, 81, 102, 80, 81, 103, 80, 81, 
	104, 80, 81, 105, 80, 81, 106, 80, 
	108, 107, 109, 110, 111, 112, 113, 114, 
	115, 116, 117, 118, 119, 120, 120, 121, 
	107, 0, 122, 123, 0, 124, 0, 125, 
	0, 126, 0, 127, 0, 128, 0, 129, 
	0, 130, 0, 131, 0, 132, 0, 134, 
	133, 136, 135, 136, 137, 138, 139, 140, 
	138, 141, 142, 143, 144, 145, 146, 146, 
	137, 135, 136, 147, 135, 136, 148, 135, 
	136, 149, 135, 136, 150, 135, 136, 151, 
	135, 136, 152, 135, 136, 153, 135, 136, 
	154, 135, 136, 155, 135, 136, 156, 135, 
	136, 157, 135, 136, 158, 135, 136, 159, 
	135, 136, 160, 135, 136, 161, 135, 136, 
	162, 163, 135, 136, 164, 135, 136, 165, 
	135, 136, 166, 135, 136, 167, 135, 136, 
	168, 135, 136, 169, 135, 136, 170, 135, 
	136, 161, 135, 136, 171, 135, 136, 172, 
	135, 136, 173, 135, 136, 174, 135, 136, 
	175, 135, 136, 176, 135, 136, 177, 135, 
	136, 178, 135, 136, 171, 135, 136, 179, 
	135, 136, 180, 135, 136, 181, 135, 136, 
	182, 135, 136, 183, 135, 136, 170, 135, 
	136, 184, 135, 136, 185, 135, 136, 186, 
	135, 136, 171, 135, 136, 187, 135, 136, 
	188, 135, 136, 189, 135, 136, 190, 135, 
	136, 191, 135, 136, 192, 135, 136, 170, 
	135, 136, 185, 135, 193, 0, 194, 0, 
	195, 0, 196, 0, 197, 0, 198, 0, 
	199, 0, 200, 0, 201, 0, 202, 0, 
	203, 0, 204, 0, 205, 0, 206, 0, 
	207, 0, 209, 208, 211, 210, 211, 212, 
	213, 214, 213, 212, 210, 211, 215, 210, 
	211, 216, 210, 211, 217, 210, 211, 218, 
	210, 211, 219, 210, 211, 220, 210, 211, 
	221, 210, 222, 0, 223, 0, 224, 0, 
	225, 0, 226, 0, 227, 0, 228, 0, 
	230, 229, 232, 231, 232, 233, 234, 235, 
	234, 236, 237, 238, 239, 240, 233, 231, 
	232, 241, 231, 232, 242, 231, 232, 243, 
	231, 232, 244, 231, 232, 245, 231, 232, 
	246, 231, 232, 247, 231, 232, 248, 231, 
	232, 249, 231, 232, 250, 231, 232, 251, 
	231, 232, 252, 231, 232, 253, 231, 232, 
	254, 231, 232, 255, 231, 232, 256, 231, 
	232, 257, 231, 232, 258, 231, 232, 259, 
	231, 232, 260, 231, 232, 261, 231, 232, 
	262, 231, 232, 263, 231, 232, 264, 231, 
	232, 265, 231, 232, 266, 231, 232, 267, 
	231, 232, 268, 231, 232, 269, 231, 232, 
	270, 231, 232, 271, 231, 232, 262, 231, 
	232, 272, 231, 232, 273, 231, 232, 274, 
	231, 232, 275, 231, 232, 276, 231, 232, 
	277, 231, 232, 262, 231, 232, 278, 231, 
	232, 279, 231, 232, 280, 231, 232, 281, 
	231, 232, 282, 231, 232, 262, 231, 232, 
	283, 231, 232, 284, 231, 232, 285, 231, 
	232, 286, 231, 232, 287, 231, 232, 288, 
	231, 232, 262, 231, 289, 0, 290, 0, 
	291, 0, 193, 0, 292, 0, 293, 0, 
	294, 0, 295, 0, 296, 0, 297, 0, 
	298, 0, 299, 0, 301, 300, 303, 302, 
	303, 304, 305, 306, 307, 305, 308, 309, 
	310, 311, 312, 313, 313, 304, 302, 303, 
	314, 302, 303, 315, 302, 303, 316, 302, 
	303, 317, 302, 303, 318, 302, 303, 319, 
	302, 303, 320, 302, 303, 321, 302, 303, 
	322, 302, 303, 323, 302, 303, 324, 302, 
	303, 325, 302, 303, 326, 302, 303, 327, 
	302, 303, 328, 302, 303, 329, 330, 302, 
	303, 331, 302, 303, 332, 302, 303, 333, 
	302, 303, 334, 302, 303, 335, 302, 303, 
	336, 302, 303, 337, 302, 303, 328, 302, 
	303, 338, 302, 303, 339, 302, 303, 340, 
	302, 303, 341, 302, 303, 342, 302, 303, 
	343, 302, 303, 344, 302, 303, 345, 346, 
	302, 303, 347, 302, 303, 348, 302, 303, 
	349, 302, 303, 350, 302, 303, 351, 302, 
	303, 352, 302, 303, 353, 302, 303, 337, 
	302, 303, 338, 302, 303, 354, 302, 303, 
	355, 302, 303, 356, 302, 303, 357, 302, 
	303, 358, 302, 303, 337, 302, 303, 359, 
	302, 303, 360, 302, 303, 361, 302, 303, 
	338, 302, 303, 362, 302, 303, 363, 302, 
	303, 364, 302, 303, 365, 302, 303, 366, 
	302, 303, 367, 302, 303, 337, 302, 303, 
	360, 302, 290, 0, 368, 369, 368, 0, 
	372, 371, 373, 374, 371, 370, 0, 376, 
	377, 375, 0, 376, 375, 372, 378, 376, 
	377, 378, 375, 372, 379, 380, 381, 382, 
	383, 384, 385, 386, 387, 388, 389, 390, 
	391, 391, 392, 379, 0, 81, 393, 80, 
	81, 394, 80, 81, 395, 80, 81, 396, 
	80, 81, 397, 80, 81, 398, 80, 81, 
	399, 80, 81, 400, 80, 81, 401, 80, 
	81, 394, 80, 81, 402, 80, 81, 403, 
	80, 81, 404, 80, 81, 405, 80, 81, 
	406, 80, 81, 407, 80, 81, 106, 80, 
	81, 408, 80, 81, 409, 80, 81, 410, 
	80, 81, 394, 80, 81, 411, 80, 81, 
	412, 80, 81, 413, 80, 81, 414, 80, 
	81, 415, 80, 81, 416, 80, 81, 407, 
	80, 81, 409, 80, 193, 0, 417, 0, 
	1, 0, 418, 0
];

var _lexer_trans_targs = [
	0, 2, 2, 3, 13, 15, 29, 32, 
	35, 63, 134, 152, 214, 218, 288, 289, 
	325, 4, 5, 6, 7, 6, 6, 7, 
	6, 8, 8, 8, 9, 8, 8, 8, 
	9, 10, 11, 12, 2, 12, 13, 2, 
	14, 16, 17, 18, 19, 20, 21, 22, 
	23, 24, 25, 26, 27, 28, 327, 30, 
	31, 2, 14, 31, 2, 14, 33, 34, 
	2, 33, 32, 34, 36, 324, 37, 38, 
	39, 40, 41, 42, 43, 44, 45, 46, 
	45, 46, 46, 2, 47, 61, 295, 303, 
	305, 312, 316, 323, 48, 49, 50, 51, 
	52, 53, 54, 55, 56, 57, 58, 59, 
	60, 2, 62, 2, 2, 3, 13, 15, 
	29, 32, 35, 63, 134, 152, 214, 218, 
	288, 289, 64, 127, 65, 66, 67, 68, 
	69, 70, 71, 72, 73, 74, 75, 74, 
	75, 75, 2, 76, 90, 91, 107, 109, 
	115, 119, 126, 77, 78, 79, 80, 81, 
	82, 83, 84, 85, 86, 87, 88, 89, 
	2, 62, 92, 100, 93, 94, 95, 96, 
	97, 98, 99, 101, 102, 103, 104, 105, 
	106, 90, 108, 110, 111, 112, 113, 114, 
	116, 117, 118, 120, 121, 122, 123, 124, 
	125, 128, 129, 130, 131, 132, 133, 29, 
	135, 136, 137, 138, 139, 140, 141, 142, 
	143, 144, 143, 144, 144, 2, 145, 146, 
	147, 148, 149, 150, 151, 62, 153, 154, 
	155, 156, 157, 158, 159, 160, 161, 160, 
	161, 161, 2, 162, 176, 185, 194, 201, 
	207, 163, 164, 165, 166, 167, 168, 169, 
	170, 171, 172, 173, 174, 175, 2, 177, 
	178, 179, 180, 181, 182, 183, 184, 62, 
	186, 187, 188, 189, 190, 191, 192, 193, 
	195, 196, 197, 198, 199, 200, 202, 203, 
	204, 205, 206, 208, 209, 210, 211, 212, 
	213, 215, 216, 217, 219, 220, 221, 222, 
	223, 224, 225, 226, 227, 228, 227, 228, 
	228, 2, 229, 243, 244, 260, 270, 276, 
	280, 287, 230, 231, 232, 233, 234, 235, 
	236, 237, 238, 239, 240, 241, 242, 2, 
	62, 245, 253, 246, 247, 248, 249, 250, 
	251, 252, 254, 255, 256, 257, 258, 259, 
	243, 261, 269, 262, 263, 264, 265, 266, 
	267, 268, 271, 272, 273, 274, 275, 277, 
	278, 279, 281, 282, 283, 284, 285, 286, 
	289, 290, 291, 293, 294, 292, 290, 291, 
	292, 290, 293, 294, 3, 13, 15, 29, 
	32, 35, 63, 134, 152, 214, 218, 288, 
	289, 296, 297, 298, 299, 300, 301, 302, 
	61, 304, 306, 307, 308, 309, 310, 311, 
	313, 314, 315, 317, 318, 319, 320, 321, 
	322, 326, 0
];

var _lexer_trans_actions = [
	43, 0, 54, 3, 1, 0, 29, 1, 
	29, 29, 29, 29, 29, 29, 29, 35, 
	0, 0, 0, 7, 139, 48, 0, 102, 
	9, 5, 45, 134, 45, 0, 33, 122, 
	33, 33, 0, 11, 106, 0, 0, 114, 
	25, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	57, 149, 126, 0, 110, 23, 0, 27, 
	118, 27, 51, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 57, 144, 
	0, 54, 0, 78, 33, 84, 84, 84, 
	84, 84, 84, 84, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 19, 19, 31, 130, 60, 57, 31, 
	63, 57, 63, 63, 63, 63, 63, 63, 
	63, 66, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 57, 144, 0, 
	54, 0, 72, 33, 84, 84, 84, 84, 
	84, 84, 84, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	15, 15, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	57, 144, 0, 54, 0, 81, 84, 0, 
	0, 0, 0, 0, 0, 21, 0, 0, 
	0, 0, 0, 0, 0, 57, 144, 0, 
	54, 0, 69, 33, 84, 84, 84, 84, 
	84, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 13, 0, 
	0, 0, 0, 0, 0, 0, 0, 13, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 57, 144, 0, 54, 
	0, 75, 33, 84, 84, 84, 84, 84, 
	84, 84, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 17, 
	17, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 37, 37, 54, 37, 87, 0, 
	0, 39, 0, 0, 93, 90, 41, 96, 
	90, 96, 96, 96, 96, 96, 96, 96, 
	99, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0
];

var _lexer_eof_actions = [
	0, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43
];

var lexer_start = 1;
var lexer_first_final = 327;
var lexer_error = 0;

var lexer_en_main = 1;


/* line 129 "ragel/i18n/en_tx.js.rl" */

/* line 130 "ragel/i18n/en_tx.js.rl" */

/* line 131 "ragel/i18n/en_tx.js.rl" */

/* line 132 "ragel/i18n/en_tx.js.rl" */

var Lexer = function(listener) {
  // Check that listener has the required functions
  var events = ['comment', 'tag', 'feature', 'background', 'scenario', 'scenario_outline', 'examples', 'step', 'doc_string', 'row', 'eof'];
  for(var i=0, len=events.length; i<len; i++) {
    var event = events[i];
    if(typeof listener[event] != 'function') {
      throw new Error("Error. No " + event + " function exists on " + JSON.stringify(listener));
    }
  }
  this.listener = listener;
};

Lexer.prototype.scan = function(data) {
  var ending = "\n%_FEATURE_END_%";
  if(typeof data == 'string') {
    data = this.stringToBytes(data + ending);
  } else if(typeof Buffer != 'undefined' && Buffer.isBuffer(data)) {
    // Node.js
    var buf = new Buffer(data.length + ending.length);
    data.copy(buf, 0, 0);
    new Buffer(ending).copy(buf, data.length, 0);
    data = buf;
  }
  var eof = pe = data.length;
  var p = 0;

  this.line_number = 1;
  this.last_newline = 0;
  var signedCharValue=function(v){return v > 127 ? v-256 : v; };

  
/* line 641 "js/lib/gherkin/lexer/en_tx.js" */
{
	  this.cs = lexer_start;
} /* JSCodeGen::writeInit */

/* line 164 "ragel/i18n/en_tx.js.rl" */
  
/* line 648 "js/lib/gherkin/lexer/en_tx.js" */
{
	var _klen, _trans, _keys, _ps, _widec, _acts, _nacts;
	var _goto_level, _resume, _eof_trans, _again, _test_eof;
	var _out;
	_klen = _trans = _keys = _acts = _nacts = null;
	_goto_level = 0;
	_resume = 10;
	_eof_trans = 15;
	_again = 20;
	_test_eof = 30;
	_out = 40;
	while (true) {
	_trigger_goto = false;
	if (_goto_level <= 0) {
	if (p == pe) {
		_goto_level = _test_eof;
		continue;
	}
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	}
	if (_goto_level <= _resume) {
	_keys = _lexer_key_offsets[ this.cs];
	_trans = _lexer_index_offsets[ this.cs];
	_klen = _lexer_single_lengths[ this.cs];
	_break_match = false;
	
	do {
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + _klen - 1;

	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + ( (_upper - _lower) >> 1 );

	        if (( signedCharValue(data[p])) < _lexer_trans_keys[_mid]) {
	           _upper = _mid - 1;
	        } else if (( signedCharValue(data[p])) > _lexer_trans_keys[_mid]) {
	           _lower = _mid + 1;
	        } else {
	           _trans += (_mid - _keys);
	           _break_match = true;
	           break;
	        };
	     } /* while */
	     if (_break_match) { break; }
	     _keys += _klen;
	     _trans += _klen;
	  }
	  _klen = _lexer_range_lengths[ this.cs];
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + (_klen << 1) - 2;
	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + (((_upper-_lower) >> 1) & ~1);
	        if (( signedCharValue(data[p])) < _lexer_trans_keys[_mid]) {
	          _upper = _mid - 2;
	         } else if (( signedCharValue(data[p])) > _lexer_trans_keys[_mid+1]) {
	          _lower = _mid + 2;
	        } else {
	          _trans += ((_mid - _keys) >> 1);
	          _break_match = true;
	          break;
	        }
	     } /* while */
	     if (_break_match) { break; }
	     _trans += _klen
	  }
	} while (false);
	_trans = _lexer_indicies[_trans];
	 this.cs = _lexer_trans_targs[_trans];
	if (_lexer_trans_actions[_trans] != 0) {
		_acts = _lexer_trans_actions[_trans];
		_nacts = _lexer_actions[_acts];
		_acts += 1;
		while (_nacts > 0) {
			_nacts -= 1;
			_acts += 1;
			switch (_lexer_actions[_acts - 1]) {
case 0:
/* line 6 "ragel/i18n/en_tx.js.rl" */

    this.content_start = p;
    this.current_line = this.line_number;
    this.start_col = p - this.last_newline - (this.keyword+':').length;
  		break;
case 1:
/* line 12 "ragel/i18n/en_tx.js.rl" */

    this.current_line = this.line_number;
    this.start_col = p - this.last_newline;
  		break;
case 2:
/* line 17 "ragel/i18n/en_tx.js.rl" */

    this.content_start = p;
  		break;
case 3:
/* line 21 "ragel/i18n/en_tx.js.rl" */

    this.docstring_content_type_start = p;
  		break;
case 4:
/* line 25 "ragel/i18n/en_tx.js.rl" */

    this.docstring_content_type_end = p;
  		break;
case 5:
/* line 29 "ragel/i18n/en_tx.js.rl" */

    var con = this.unindent(
      this.start_col, 
      this.bytesToString(data.slice(this.content_start, this.next_keyword_start-1)).replace(/(\r?\n)?([\t ])*$/, '').replace(/\\\"\\\"\\\"/mg, '"""')
    );
    var con_type = this.bytesToString(data.slice(this.docstring_content_type_start, this.docstring_content_type_end)).trim();
    this.listener.doc_string(con_type, con, this.current_line); 
  		break;
case 6:
/* line 38 "ragel/i18n/en_tx.js.rl" */

    p = this.store_keyword_content('feature', data, p, eof);
  		break;
case 7:
/* line 42 "ragel/i18n/en_tx.js.rl" */

    p = this.store_keyword_content('background', data, p, eof);
  		break;
case 8:
/* line 46 "ragel/i18n/en_tx.js.rl" */

    p = this.store_keyword_content('scenario', data, p, eof);
  		break;
case 9:
/* line 50 "ragel/i18n/en_tx.js.rl" */

    p = this.store_keyword_content('scenario_outline', data, p, eof);
  		break;
case 10:
/* line 54 "ragel/i18n/en_tx.js.rl" */

    p = this.store_keyword_content('examples', data, p, eof);
  		break;
case 11:
/* line 58 "ragel/i18n/en_tx.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.step(this.keyword, con, this.current_line);
  		break;
case 12:
/* line 63 "ragel/i18n/en_tx.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.comment(con, this.line_number);
    this.keyword_start = null;
  		break;
case 13:
/* line 69 "ragel/i18n/en_tx.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.tag(con, this.line_number);
    this.keyword_start = null;
  		break;
case 14:
/* line 75 "ragel/i18n/en_tx.js.rl" */

    this.line_number++;
  		break;
case 15:
/* line 79 "ragel/i18n/en_tx.js.rl" */

    this.last_newline = p + 1;
  		break;
case 16:
/* line 83 "ragel/i18n/en_tx.js.rl" */

    this.keyword_start = this.keyword_start || p;
  		break;
case 17:
/* line 87 "ragel/i18n/en_tx.js.rl" */

    this.keyword = this.bytesToString(data.slice(this.keyword_start, p)).replace(/:$/, '');
    this.keyword_start = null;
  		break;
case 18:
/* line 92 "ragel/i18n/en_tx.js.rl" */

    this.next_keyword_start = p;
  		break;
case 19:
/* line 96 "ragel/i18n/en_tx.js.rl" */

    p = p - 1;
    current_row = [];
    this.current_line = this.line_number;
  		break;
case 20:
/* line 102 "ragel/i18n/en_tx.js.rl" */

    this.content_start = p;
  		break;
case 21:
/* line 106 "ragel/i18n/en_tx.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    current_row.push(con.replace(/\\\|/, "|").replace(/\\n/, "\n").replace(/\\\\/, "\\"));
  		break;
case 22:
/* line 111 "ragel/i18n/en_tx.js.rl" */

    this.listener.row(current_row, this.current_line);
  		break;
case 23:
/* line 115 "ragel/i18n/en_tx.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw new Error("Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.");
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 875 "js/lib/gherkin/lexer/en_tx.js" */
			} /* action switch */
		}
	}
	if (_trigger_goto) {
		continue;
	}
	}
	if (_goto_level <= _again) {
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	p += 1;
	if (p != pe) {
		_goto_level = _resume;
		continue;
	}
	}
	if (_goto_level <= _test_eof) {
	if (p == eof) {
	__acts = _lexer_eof_actions[ this.cs];
	__nacts =  _lexer_actions[__acts];
	__acts += 1;
	while (__nacts > 0) {
		__nacts -= 1;
		__acts += 1;
		switch (_lexer_actions[__acts - 1]) {
case 23:
/* line 115 "ragel/i18n/en_tx.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw new Error("Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.");
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 914 "js/lib/gherkin/lexer/en_tx.js" */
		} /* eof action switch */
	}
	if (_trigger_goto) {
		continue;
	}
}
	}
	if (_goto_level <= _out) {
		break;
	}
	}
	}

/* line 165 "ragel/i18n/en_tx.js.rl" */
};


/*
 * Decode utf-8 byte sequence to string.
 */
var decodeUtf8 = function(bytes) {
  var result = "";
  var i = 0;
  var wc;
  var c;

  while (i < bytes.length) {
    /* parse as UTF-8 lead byte */
    wc = bytes[i++];
    if (wc < 0x80) {
      count = 0;
    } else if (wc < 0xC2 || wc >= 0xF8) {
      throw new Error("input is not a valid UTF-8 lead octet");
    } else if (wc < 0xE0) {
      count = 1;
      wc = (wc & 0x1F) << 6;
    } else if (wc < 0xF0) {
      count = 2;
      wc = (wc & 0x0F) << 12;
    } else /* wc < 0xF8 */ {
      count = 3;
      wc = (wc & 0x07) << 18;
    }

    /* parse trail bytes, if any */
    while (count) {
      if (!(i < bytes.length)) {
        throw new Error("short read");
      }
      if ((c = bytes[i++] ^ 0x80) > 0x3F) {
        throw new Error("input is not a valid UTF-8 trail octet");
      }
      wc |= c << (6 * --count);
      if (wc < (1 << (5 * count + 6))) {
        throw new Error("invalid non-minimal encoded input");
      }
    }

    /* handle conversion to UTF-16 if needed */
    if (wc > 0xFFFF) {
      wc -= 0x10000;
      result += String.fromCharCode(0xD800 + (wc >> 10));
      wc = 0xDC00 + (wc & 0x3FF);
    }
    result += String.fromCharCode(wc);
  }

  return result;
};

/*
 * Encode string to an array of bytes using utf8 encoding.
 *
 * Javascript internally stores character data as utf16 (like java).
 * String.charCodeAt() does *not* produce unicode points, but simply
 * reflects this internal representation. Thus, it is necessary
 * to first decode the utf-16 representation before encoding to
 * utf-8.
 */
var encodeUtf8 = function(string) {
  var bytes = [];
  var i = 0;
  var j = 0;
  var wc;

  while (i < string.length) {
    wc = string.charCodeAt(i++);
    if (wc >= 0xD800 && wc <= 0xDBFF && i < string.length && string.charCodeAt(i) >= 0xDC00 && string.charCodeAt(i) <= 0xDFFF) {
      /* decode UTF-16 */
      wc = 0x10000 + ((wc & 0x3FF) << 10) + (string.charCodeAt(i++) & 0x3FF);
    }

    /* emit lead byte */
    if (wc < 0x80) {
      bytes[j++] = wc;
      count = 0;
    } else if (wc < 0x800) {
      bytes[j++] = 0xC0 | (wc >> 6);
      count = 1;
    } else if (wc < 0x10000) {
      bytes[j++] = 0xE0 | (wc >> 12);
      count = 2;
    } else {
      /* SMP: 21-bit Unicode */
      bytes[j++] = 0xF0 | (wc >> 18);
      count = 3;
    }

    /* emit trail bytes, if any */
    while (count) {
      bytes[j++] = 0x80 | ((wc >> (6 * --count)) & 0x3F);
    }
  }

  return bytes;

};

Lexer.prototype.bytesToString = function(bytes) {
  if(typeof bytes.write == 'function') {
    // Node.js
    return bytes.toString('utf-8');
  }
  return decodeUtf8(bytes);
};

Lexer.prototype.stringToBytes = function(string) {
  return encodeUtf8(string);
};

Lexer.prototype.unindent = function(startcol, text) {
  startcol = startcol || 0;
  return text.replace(new RegExp('^[\t ]{0,' + startcol + '}', 'gm'), ''); 
};

Lexer.prototype.store_keyword_content = function(event, data, p, eof) {
  var end_point = (!this.next_keyword_start || (p == eof)) ? p : this.next_keyword_start;
  var content = this.unindent(this.start_col + 2, this.bytesToString(data.slice(this.content_start, end_point))).replace(/\s+$/,"");
  var content_lines = content.split("\n")
  var name = content_lines.shift() || "";
  name = name.trim();
  var description = content_lines.join("\n");
  this.listener[event](this.keyword, name, description, this.current_line);
  var nks = this.next_keyword_start;
  this.next_keyword_start = null;
  return nks ? nks - 1 : p;
};

Lexer.prototype.current_line_content = function(data, p) {
  var rest = Array.prototype.slice.call(data,this.last_newline, -1);
  var end = rest.indexOf(10) || -1;
  return this.bytesToString(rest.slice(0, end)).trim();
};

// Node.js export
if(typeof module !== 'undefined') {
  module.exports = Lexer;
}
// Require.js export
if (typeof define !== 'undefined') {
  if(define.amd) {
    define('gherkin/lexer/en_tx', [], function() {
      return Lexer;
    });
  } else {
    define('gherkin/lexer/en_tx', function(require, exports, module) {
      exports.Lexer = Lexer;
    });
  }
}

})();

}).call(this,require("buffer").Buffer)

},{"buffer":69}],201:[function(require,module,exports){
(function (Buffer){

/* line 1 "ragel/i18n/eo.js.rl" */
;(function() {


/* line 126 "ragel/i18n/eo.js.rl" */



/* line 11 "js/lib/gherkin/lexer/eo.js" */
var _lexer_actions = [
	0, 1, 0, 1, 1, 1, 2, 1, 
	3, 1, 4, 1, 5, 1, 6, 1, 
	7, 1, 8, 1, 9, 1, 10, 1, 
	11, 1, 12, 1, 13, 1, 16, 1, 
	17, 1, 18, 1, 19, 1, 20, 1, 
	21, 1, 22, 1, 23, 2, 2, 18, 
	2, 3, 4, 2, 13, 0, 2, 14, 
	15, 2, 17, 0, 2, 17, 1, 2, 
	17, 16, 2, 17, 19, 2, 18, 6, 
	2, 18, 7, 2, 18, 8, 2, 18, 
	9, 2, 18, 10, 2, 18, 16, 2, 
	20, 21, 2, 22, 0, 2, 22, 1, 
	2, 22, 16, 2, 22, 19, 3, 4, 
	14, 15, 3, 5, 14, 15, 3, 11, 
	14, 15, 3, 12, 14, 15, 3, 13, 
	14, 15, 3, 14, 15, 18, 3, 17, 
	0, 11, 3, 17, 14, 15, 4, 2, 
	14, 15, 18, 4, 3, 4, 14, 15, 
	4, 17, 0, 14, 15, 5, 17, 0, 
	11, 14, 15
];

var _lexer_key_offsets = [
	0, 0, 17, 33, 34, 35, 37, 39, 
	44, 49, 54, 59, 63, 67, 69, 70, 
	71, 72, 73, 74, 75, 76, 77, 78, 
	79, 80, 81, 82, 83, 84, 85, 87, 
	89, 94, 101, 106, 107, 109, 110, 111, 
	112, 113, 114, 115, 116, 117, 118, 119, 
	120, 121, 122, 123, 124, 125, 126, 133, 
	135, 137, 139, 141, 143, 145, 161, 162, 
	163, 164, 165, 166, 167, 179, 181, 183, 
	185, 187, 189, 191, 193, 195, 197, 199, 
	201, 203, 205, 207, 209, 211, 214, 216, 
	218, 220, 222, 224, 226, 229, 231, 233, 
	235, 237, 239, 241, 243, 245, 247, 249, 
	251, 253, 255, 257, 259, 261, 263, 265, 
	267, 269, 271, 274, 277, 279, 281, 283, 
	285, 287, 288, 289, 290, 291, 292, 293, 
	294, 295, 296, 297, 298, 299, 300, 301, 
	302, 303, 304, 305, 306, 307, 308, 309, 
	310, 322, 324, 326, 328, 330, 332, 334, 
	336, 338, 340, 342, 344, 346, 348, 350, 
	352, 354, 357, 359, 361, 363, 365, 367, 
	369, 371, 373, 376, 378, 380, 382, 384, 
	386, 388, 391, 393, 395, 397, 399, 401, 
	402, 403, 404, 405, 406, 407, 408, 409, 
	422, 424, 426, 428, 430, 432, 434, 436, 
	438, 440, 442, 444, 446, 448, 450, 452, 
	454, 457, 459, 461, 463, 465, 467, 469, 
	471, 473, 475, 477, 480, 482, 484, 486, 
	488, 490, 492, 494, 496, 498, 500, 502, 
	504, 506, 508, 510, 512, 514, 516, 518, 
	521, 524, 526, 528, 530, 532, 534, 535, 
	536, 537, 538, 539, 540, 541, 542, 554, 
	556, 558, 560, 562, 564, 566, 568, 570, 
	572, 574, 576, 578, 580, 582, 584, 586, 
	588, 590, 592, 594, 596, 598, 600, 602, 
	604, 606, 608, 610, 612, 614, 616, 618, 
	620, 622, 624, 626, 628, 630, 632, 634, 
	636, 638, 640, 642, 644, 646, 648, 650, 
	652, 656, 662, 665, 667, 673, 689, 690, 
	691
];

var _lexer_trans_keys = [
	10, 32, 34, 35, 37, 42, 64, 68, 
	69, 70, 75, 83, 84, 124, 239, 9, 
	13, 10, 32, 34, 35, 37, 42, 64, 
	68, 69, 70, 75, 83, 84, 124, 9, 
	13, 34, 34, 10, 13, 10, 13, 10, 
	32, 34, 9, 13, 10, 32, 34, 9, 
	13, 10, 32, 34, 9, 13, 10, 32, 
	34, 9, 13, 10, 32, 9, 13, 10, 
	32, 9, 13, 10, 13, 10, 95, 70, 
	69, 65, 84, 85, 82, 69, 95, 69, 
	78, 68, 95, 37, 32, 10, 13, 10, 
	13, 13, 32, 64, 9, 10, 9, 10, 
	13, 32, 64, 11, 12, 10, 32, 64, 
	9, 13, 111, 32, 110, 105, 116, 97, 
	-60, -75, 111, 107, 122, 101, 109, 112, 
	108, 111, 106, 58, 10, 10, 10, 32, 
	35, 84, 124, 9, 13, 10, 114, 10, 
	97, 10, 106, 10, 116, 10, 111, 10, 
	58, 10, 32, 34, 35, 37, 42, 64, 
	68, 69, 70, 75, 83, 84, 124, 9, 
	13, 111, 110, 111, 58, 10, 10, 10, 
	32, 35, 37, 42, 64, 68, 75, 83, 
	84, 9, 13, 10, 95, 10, 70, 10, 
	69, 10, 65, 10, 84, 10, 85, 10, 
	82, 10, 69, 10, 95, 10, 69, 10, 
	78, 10, 68, 10, 95, 10, 37, 10, 
	32, 10, 111, 10, 32, 110, 10, 105, 
	10, 116, 10, 97, -60, 10, -75, 10, 
	10, 111, 10, 97, 111, 10, 106, 10, 
	110, 10, 116, 10, 117, 10, 114, 10, 
	111, 10, 32, 10, 100, 10, 101, 10, 
	32, 10, 108, 10, 97, 10, 32, 10, 
	115, 10, 99, 10, 101, 10, 110, 10, 
	97, 10, 114, 10, 111, 10, 58, 10, 
	99, 101, 10, 32, 100, 10, 114, 10, 
	97, 10, 106, 10, 116, 97, 111, 106, 
	110, 116, 117, 114, 111, 32, 100, 101, 
	32, 108, 97, 32, 115, 99, 101, 110, 
	97, 114, 111, 58, 10, 10, 10, 32, 
	35, 37, 42, 64, 68, 75, 83, 84, 
	9, 13, 10, 95, 10, 70, 10, 69, 
	10, 65, 10, 84, 10, 85, 10, 82, 
	10, 69, 10, 95, 10, 69, 10, 78, 
	10, 68, 10, 95, 10, 37, 10, 32, 
	10, 111, 10, 32, 110, 10, 105, 10, 
	116, 10, 97, -60, 10, -75, 10, 10, 
	111, 10, 97, 10, 106, 10, 99, 101, 
	10, 101, 10, 110, 10, 97, 10, 114, 
	10, 111, 10, 58, 10, 32, 100, 10, 
	114, 10, 97, 10, 106, 10, 116, 99, 
	101, 101, 110, 97, 114, 111, 58, 10, 
	10, 10, 32, 35, 37, 42, 64, 68, 
	70, 75, 83, 84, 9, 13, 10, 95, 
	10, 70, 10, 69, 10, 65, 10, 84, 
	10, 85, 10, 82, 10, 69, 10, 95, 
	10, 69, 10, 78, 10, 68, 10, 95, 
	10, 37, 10, 32, 10, 111, 10, 32, 
	110, 10, 105, 10, 116, 10, 97, -60, 
	10, -75, 10, 10, 111, 10, 111, 10, 
	110, 10, 111, 10, 58, 10, 97, 111, 
	10, 106, 10, 110, 10, 116, 10, 117, 
	10, 114, 10, 111, 10, 32, 10, 100, 
	10, 101, 10, 32, 10, 108, 10, 97, 
	10, 32, 10, 115, 10, 99, 10, 101, 
	10, 110, 10, 97, 10, 114, 10, 99, 
	101, 10, 32, 100, 10, 114, 10, 97, 
	10, 106, 10, 116, 32, 100, 114, 97, 
	106, 116, 111, 58, 10, 10, 10, 32, 
	35, 37, 64, 69, 70, 75, 83, 84, 
	9, 13, 10, 95, 10, 70, 10, 69, 
	10, 65, 10, 84, 10, 85, 10, 82, 
	10, 69, 10, 95, 10, 69, 10, 78, 
	10, 68, 10, 95, 10, 37, 10, 107, 
	10, 122, 10, 101, 10, 109, 10, 112, 
	10, 108, 10, 111, 10, 106, 10, 58, 
	10, 111, 10, 110, 10, 111, 10, 111, 
	10, 110, 10, 116, 10, 117, 10, 114, 
	10, 111, 10, 32, 10, 100, 10, 101, 
	10, 32, 10, 108, 10, 97, 10, 32, 
	10, 115, 10, 99, 10, 101, 10, 110, 
	10, 97, 10, 114, 10, 114, 10, 97, 
	10, 106, 10, 116, 32, 124, 9, 13, 
	10, 32, 92, 124, 9, 13, 10, 92, 
	124, 10, 92, 10, 32, 92, 124, 9, 
	13, 10, 32, 34, 35, 37, 42, 64, 
	68, 69, 70, 75, 83, 84, 124, 9, 
	13, 187, 191, 0
];

var _lexer_single_lengths = [
	0, 15, 14, 1, 1, 2, 2, 3, 
	3, 3, 3, 2, 2, 2, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 2, 2, 
	3, 5, 3, 1, 2, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 5, 2, 
	2, 2, 2, 2, 2, 14, 1, 1, 
	1, 1, 1, 1, 10, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 3, 2, 2, 
	2, 2, 2, 2, 3, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 3, 3, 2, 2, 2, 2, 
	2, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	10, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 3, 2, 2, 2, 2, 2, 2, 
	2, 2, 3, 2, 2, 2, 2, 2, 
	2, 3, 2, 2, 2, 2, 2, 1, 
	1, 1, 1, 1, 1, 1, 1, 11, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	3, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 3, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 3, 
	3, 2, 2, 2, 2, 2, 1, 1, 
	1, 1, 1, 1, 1, 1, 10, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 4, 3, 2, 4, 14, 1, 1, 
	0
];

var _lexer_range_lengths = [
	0, 1, 1, 0, 0, 0, 0, 1, 
	1, 1, 1, 1, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 1, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 0, 
	0, 0, 0, 0, 0, 1, 0, 0, 
	0, 0, 0, 0, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 1, 0, 0, 1, 1, 0, 0, 
	0
];

var _lexer_index_offsets = [
	0, 0, 17, 33, 35, 37, 40, 43, 
	48, 53, 58, 63, 67, 71, 74, 76, 
	78, 80, 82, 84, 86, 88, 90, 92, 
	94, 96, 98, 100, 102, 104, 106, 109, 
	112, 117, 124, 129, 131, 134, 136, 138, 
	140, 142, 144, 146, 148, 150, 152, 154, 
	156, 158, 160, 162, 164, 166, 168, 175, 
	178, 181, 184, 187, 190, 193, 209, 211, 
	213, 215, 217, 219, 221, 233, 236, 239, 
	242, 245, 248, 251, 254, 257, 260, 263, 
	266, 269, 272, 275, 278, 281, 285, 288, 
	291, 294, 297, 300, 303, 307, 310, 313, 
	316, 319, 322, 325, 328, 331, 334, 337, 
	340, 343, 346, 349, 352, 355, 358, 361, 
	364, 367, 370, 374, 378, 381, 384, 387, 
	390, 393, 395, 397, 399, 401, 403, 405, 
	407, 409, 411, 413, 415, 417, 419, 421, 
	423, 425, 427, 429, 431, 433, 435, 437, 
	439, 451, 454, 457, 460, 463, 466, 469, 
	472, 475, 478, 481, 484, 487, 490, 493, 
	496, 499, 503, 506, 509, 512, 515, 518, 
	521, 524, 527, 531, 534, 537, 540, 543, 
	546, 549, 553, 556, 559, 562, 565, 568, 
	570, 572, 574, 576, 578, 580, 582, 584, 
	597, 600, 603, 606, 609, 612, 615, 618, 
	621, 624, 627, 630, 633, 636, 639, 642, 
	645, 649, 652, 655, 658, 661, 664, 667, 
	670, 673, 676, 679, 683, 686, 689, 692, 
	695, 698, 701, 704, 707, 710, 713, 716, 
	719, 722, 725, 728, 731, 734, 737, 740, 
	744, 748, 751, 754, 757, 760, 763, 765, 
	767, 769, 771, 773, 775, 777, 779, 791, 
	794, 797, 800, 803, 806, 809, 812, 815, 
	818, 821, 824, 827, 830, 833, 836, 839, 
	842, 845, 848, 851, 854, 857, 860, 863, 
	866, 869, 872, 875, 878, 881, 884, 887, 
	890, 893, 896, 899, 902, 905, 908, 911, 
	914, 917, 920, 923, 926, 929, 932, 935, 
	938, 942, 948, 952, 955, 961, 977, 979, 
	981
];

var _lexer_indicies = [
	2, 1, 3, 4, 5, 6, 7, 8, 
	9, 10, 11, 12, 13, 14, 15, 1, 
	0, 2, 1, 3, 4, 5, 6, 7, 
	8, 9, 10, 11, 12, 13, 14, 1, 
	0, 16, 0, 17, 0, 19, 20, 18, 
	22, 23, 21, 26, 25, 27, 25, 24, 
	30, 29, 31, 29, 28, 30, 29, 32, 
	29, 28, 30, 29, 33, 29, 28, 35, 
	34, 34, 0, 2, 36, 36, 0, 38, 
	39, 37, 2, 0, 40, 0, 41, 0, 
	42, 0, 43, 0, 44, 0, 45, 0, 
	46, 0, 47, 0, 48, 0, 49, 0, 
	50, 0, 51, 0, 52, 0, 53, 0, 
	54, 0, 56, 57, 55, 59, 60, 58, 
	0, 0, 0, 0, 61, 62, 63, 62, 
	62, 65, 64, 61, 2, 66, 7, 66, 
	0, 67, 0, 54, 68, 0, 69, 0, 
	70, 0, 71, 0, 72, 0, 73, 0, 
	74, 0, 75, 0, 76, 0, 77, 0, 
	78, 0, 79, 0, 80, 0, 81, 0, 
	82, 0, 83, 0, 85, 84, 87, 86, 
	87, 88, 89, 90, 89, 88, 86, 87, 
	91, 86, 87, 92, 86, 87, 93, 86, 
	87, 94, 86, 87, 95, 86, 87, 96, 
	86, 98, 97, 99, 100, 101, 102, 103, 
	104, 105, 106, 107, 108, 109, 110, 97, 
	0, 111, 0, 112, 0, 113, 0, 114, 
	0, 116, 115, 118, 117, 118, 119, 120, 
	121, 122, 120, 123, 124, 125, 126, 119, 
	117, 118, 127, 117, 118, 128, 117, 118, 
	129, 117, 118, 130, 117, 118, 131, 117, 
	118, 132, 117, 118, 133, 117, 118, 134, 
	117, 118, 135, 117, 118, 136, 117, 118, 
	137, 117, 118, 138, 117, 118, 139, 117, 
	118, 140, 117, 118, 141, 117, 118, 142, 
	117, 118, 141, 143, 117, 118, 144, 117, 
	118, 145, 117, 118, 146, 117, 147, 118, 
	117, 148, 118, 117, 118, 149, 117, 118, 
	150, 151, 117, 118, 149, 117, 118, 152, 
	117, 118, 153, 117, 118, 154, 117, 118, 
	155, 117, 118, 156, 117, 118, 157, 117, 
	118, 158, 117, 118, 159, 117, 118, 160, 
	117, 118, 161, 117, 118, 162, 117, 118, 
	163, 117, 118, 164, 117, 118, 165, 117, 
	118, 166, 117, 118, 167, 117, 118, 168, 
	117, 118, 169, 117, 118, 170, 117, 118, 
	141, 117, 118, 165, 171, 117, 118, 141, 
	149, 117, 118, 172, 117, 118, 173, 117, 
	118, 174, 117, 118, 169, 117, 175, 176, 
	0, 74, 0, 177, 0, 178, 0, 179, 
	0, 180, 0, 181, 0, 182, 0, 183, 
	0, 184, 0, 185, 0, 186, 0, 187, 
	0, 188, 0, 189, 0, 190, 0, 191, 
	0, 192, 0, 193, 0, 194, 0, 195, 
	0, 196, 0, 198, 197, 200, 199, 200, 
	201, 202, 203, 204, 202, 205, 206, 207, 
	208, 201, 199, 200, 209, 199, 200, 210, 
	199, 200, 211, 199, 200, 212, 199, 200, 
	213, 199, 200, 214, 199, 200, 215, 199, 
	200, 216, 199, 200, 217, 199, 200, 218, 
	199, 200, 219, 199, 200, 220, 199, 200, 
	221, 199, 200, 222, 199, 200, 223, 199, 
	200, 224, 199, 200, 223, 225, 199, 200, 
	226, 199, 200, 227, 199, 200, 228, 199, 
	229, 200, 199, 230, 200, 199, 200, 231, 
	199, 200, 232, 199, 200, 231, 199, 200, 
	233, 234, 199, 200, 235, 199, 200, 236, 
	199, 200, 237, 199, 200, 238, 199, 200, 
	239, 199, 200, 223, 199, 200, 223, 231, 
	199, 200, 240, 199, 200, 241, 199, 200, 
	242, 199, 200, 238, 199, 243, 244, 0, 
	245, 0, 246, 0, 247, 0, 248, 0, 
	249, 0, 250, 0, 252, 251, 254, 253, 
	254, 255, 256, 257, 258, 256, 259, 260, 
	261, 262, 263, 255, 253, 254, 264, 253, 
	254, 265, 253, 254, 266, 253, 254, 267, 
	253, 254, 268, 253, 254, 269, 253, 254, 
	270, 253, 254, 271, 253, 254, 272, 253, 
	254, 273, 253, 254, 274, 253, 254, 275, 
	253, 254, 276, 253, 254, 277, 253, 254, 
	278, 253, 254, 279, 253, 254, 278, 280, 
	253, 254, 281, 253, 254, 282, 253, 254, 
	283, 253, 284, 254, 253, 285, 254, 253, 
	254, 286, 253, 254, 287, 253, 254, 288, 
	253, 254, 289, 253, 254, 278, 253, 254, 
	290, 291, 253, 254, 286, 253, 254, 292, 
	253, 254, 293, 253, 254, 294, 253, 254, 
	295, 253, 254, 296, 253, 254, 297, 253, 
	254, 298, 253, 254, 299, 253, 254, 300, 
	253, 254, 301, 253, 254, 302, 253, 254, 
	303, 253, 254, 304, 253, 254, 305, 253, 
	254, 306, 253, 254, 307, 253, 254, 308, 
	253, 254, 288, 253, 254, 305, 309, 253, 
	254, 278, 286, 253, 254, 310, 253, 254, 
	311, 253, 254, 312, 253, 254, 288, 253, 
	54, 74, 0, 313, 0, 314, 0, 315, 
	0, 316, 0, 317, 0, 318, 0, 320, 
	319, 322, 321, 322, 323, 324, 325, 324, 
	326, 327, 328, 329, 330, 323, 321, 322, 
	331, 321, 322, 332, 321, 322, 333, 321, 
	322, 334, 321, 322, 335, 321, 322, 336, 
	321, 322, 337, 321, 322, 338, 321, 322, 
	339, 321, 322, 340, 321, 322, 341, 321, 
	322, 342, 321, 322, 343, 321, 322, 344, 
	321, 322, 345, 321, 322, 346, 321, 322, 
	347, 321, 322, 348, 321, 322, 349, 321, 
	322, 350, 321, 322, 351, 321, 322, 352, 
	321, 322, 353, 321, 322, 354, 321, 322, 
	355, 321, 322, 352, 321, 322, 356, 321, 
	322, 357, 321, 322, 358, 321, 322, 359, 
	321, 322, 360, 321, 322, 361, 321, 322, 
	362, 321, 322, 363, 321, 322, 364, 321, 
	322, 365, 321, 322, 366, 321, 322, 367, 
	321, 322, 368, 321, 322, 369, 321, 322, 
	370, 321, 322, 371, 321, 322, 372, 321, 
	322, 373, 321, 322, 355, 321, 322, 374, 
	321, 322, 375, 321, 322, 376, 321, 322, 
	355, 321, 377, 378, 377, 0, 381, 380, 
	382, 383, 380, 379, 0, 385, 386, 384, 
	0, 385, 384, 381, 387, 385, 386, 387, 
	384, 381, 388, 389, 390, 391, 392, 393, 
	394, 395, 396, 397, 398, 399, 400, 388, 
	0, 401, 0, 1, 0, 402, 0
];

var _lexer_trans_targs = [
	0, 2, 2, 3, 13, 15, 29, 32, 
	35, 43, 62, 120, 182, 246, 304, 310, 
	4, 5, 6, 7, 6, 6, 7, 6, 
	8, 8, 8, 9, 8, 8, 8, 9, 
	10, 11, 12, 2, 12, 13, 2, 14, 
	16, 17, 18, 19, 20, 21, 22, 23, 
	24, 25, 26, 27, 28, 312, 30, 31, 
	2, 14, 31, 2, 14, 33, 34, 2, 
	33, 32, 34, 36, 37, 38, 39, 40, 
	41, 42, 29, 44, 45, 46, 47, 48, 
	49, 50, 51, 52, 53, 54, 53, 54, 
	54, 2, 55, 56, 57, 58, 59, 60, 
	61, 2, 2, 3, 13, 15, 29, 32, 
	35, 43, 62, 120, 182, 246, 304, 63, 
	64, 65, 66, 67, 68, 67, 68, 68, 
	2, 69, 83, 84, 92, 114, 116, 70, 
	71, 72, 73, 74, 75, 76, 77, 78, 
	79, 80, 81, 82, 2, 61, 85, 86, 
	87, 88, 89, 90, 91, 83, 93, 94, 
	95, 96, 97, 98, 99, 100, 101, 102, 
	103, 104, 105, 106, 107, 108, 109, 110, 
	111, 112, 113, 115, 117, 118, 119, 121, 
	122, 123, 124, 125, 126, 127, 128, 129, 
	130, 131, 132, 133, 134, 135, 136, 137, 
	138, 139, 140, 141, 142, 143, 144, 143, 
	144, 144, 2, 145, 159, 160, 168, 170, 
	178, 146, 147, 148, 149, 150, 151, 152, 
	153, 154, 155, 156, 157, 158, 2, 61, 
	161, 162, 163, 164, 165, 166, 167, 159, 
	169, 171, 177, 172, 173, 174, 175, 176, 
	179, 180, 181, 183, 245, 184, 185, 186, 
	187, 188, 189, 190, 191, 190, 191, 191, 
	2, 192, 206, 207, 215, 219, 239, 241, 
	193, 194, 195, 196, 197, 198, 199, 200, 
	201, 202, 203, 204, 205, 2, 61, 208, 
	209, 210, 211, 212, 213, 214, 206, 216, 
	217, 218, 220, 221, 222, 223, 224, 225, 
	226, 227, 228, 229, 230, 231, 232, 233, 
	234, 235, 236, 237, 238, 240, 242, 243, 
	244, 247, 248, 249, 250, 251, 252, 253, 
	254, 253, 254, 254, 2, 255, 269, 278, 
	281, 295, 300, 256, 257, 258, 259, 260, 
	261, 262, 263, 264, 265, 266, 267, 268, 
	2, 270, 271, 272, 273, 274, 275, 276, 
	277, 61, 279, 280, 282, 283, 284, 285, 
	286, 287, 288, 289, 290, 291, 292, 293, 
	294, 295, 296, 297, 298, 299, 301, 302, 
	303, 304, 305, 306, 308, 309, 307, 305, 
	306, 307, 305, 308, 309, 3, 13, 15, 
	29, 32, 35, 43, 62, 120, 182, 246, 
	304, 311, 0
];

var _lexer_trans_actions = [
	43, 0, 54, 3, 1, 0, 29, 1, 
	29, 29, 29, 29, 29, 29, 35, 0, 
	0, 0, 7, 139, 48, 0, 102, 9, 
	5, 45, 134, 45, 0, 33, 122, 33, 
	33, 0, 11, 106, 0, 0, 114, 25, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 57, 
	149, 126, 0, 110, 23, 0, 27, 118, 
	27, 51, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 57, 144, 0, 54, 
	0, 81, 84, 0, 0, 0, 0, 0, 
	21, 31, 130, 60, 57, 31, 63, 57, 
	63, 63, 63, 63, 63, 63, 66, 0, 
	0, 0, 0, 57, 144, 0, 54, 0, 
	72, 33, 84, 84, 84, 84, 84, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 15, 15, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 57, 144, 0, 
	54, 0, 78, 33, 84, 84, 84, 84, 
	84, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 19, 19, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 57, 144, 0, 54, 0, 
	75, 33, 84, 84, 84, 84, 84, 84, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 17, 17, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 57, 
	144, 0, 54, 0, 69, 33, 84, 84, 
	84, 84, 84, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	13, 0, 0, 0, 0, 0, 0, 0, 
	0, 13, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 37, 37, 54, 37, 87, 
	0, 0, 39, 0, 0, 93, 90, 41, 
	96, 90, 96, 96, 96, 96, 96, 96, 
	99, 0, 0
];

var _lexer_eof_actions = [
	0, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43
];

var lexer_start = 1;
var lexer_first_final = 312;
var lexer_error = 0;

var lexer_en_main = 1;


/* line 129 "ragel/i18n/eo.js.rl" */

/* line 130 "ragel/i18n/eo.js.rl" */

/* line 131 "ragel/i18n/eo.js.rl" */

/* line 132 "ragel/i18n/eo.js.rl" */

var Lexer = function(listener) {
  // Check that listener has the required functions
  var events = ['comment', 'tag', 'feature', 'background', 'scenario', 'scenario_outline', 'examples', 'step', 'doc_string', 'row', 'eof'];
  for(var i=0, len=events.length; i<len; i++) {
    var event = events[i];
    if(typeof listener[event] != 'function') {
      throw new Error("Error. No " + event + " function exists on " + JSON.stringify(listener));
    }
  }
  this.listener = listener;
};

Lexer.prototype.scan = function(data) {
  var ending = "\n%_FEATURE_END_%";
  if(typeof data == 'string') {
    data = this.stringToBytes(data + ending);
  } else if(typeof Buffer != 'undefined' && Buffer.isBuffer(data)) {
    // Node.js
    var buf = new Buffer(data.length + ending.length);
    data.copy(buf, 0, 0);
    new Buffer(ending).copy(buf, data.length, 0);
    data = buf;
  }
  var eof = pe = data.length;
  var p = 0;

  this.line_number = 1;
  this.last_newline = 0;
  var signedCharValue=function(v){return v > 127 ? v-256 : v; };

  
/* line 620 "js/lib/gherkin/lexer/eo.js" */
{
	  this.cs = lexer_start;
} /* JSCodeGen::writeInit */

/* line 164 "ragel/i18n/eo.js.rl" */
  
/* line 627 "js/lib/gherkin/lexer/eo.js" */
{
	var _klen, _trans, _keys, _ps, _widec, _acts, _nacts;
	var _goto_level, _resume, _eof_trans, _again, _test_eof;
	var _out;
	_klen = _trans = _keys = _acts = _nacts = null;
	_goto_level = 0;
	_resume = 10;
	_eof_trans = 15;
	_again = 20;
	_test_eof = 30;
	_out = 40;
	while (true) {
	_trigger_goto = false;
	if (_goto_level <= 0) {
	if (p == pe) {
		_goto_level = _test_eof;
		continue;
	}
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	}
	if (_goto_level <= _resume) {
	_keys = _lexer_key_offsets[ this.cs];
	_trans = _lexer_index_offsets[ this.cs];
	_klen = _lexer_single_lengths[ this.cs];
	_break_match = false;
	
	do {
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + _klen - 1;

	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + ( (_upper - _lower) >> 1 );

	        if (( signedCharValue(data[p])) < _lexer_trans_keys[_mid]) {
	           _upper = _mid - 1;
	        } else if (( signedCharValue(data[p])) > _lexer_trans_keys[_mid]) {
	           _lower = _mid + 1;
	        } else {
	           _trans += (_mid - _keys);
	           _break_match = true;
	           break;
	        };
	     } /* while */
	     if (_break_match) { break; }
	     _keys += _klen;
	     _trans += _klen;
	  }
	  _klen = _lexer_range_lengths[ this.cs];
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + (_klen << 1) - 2;
	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + (((_upper-_lower) >> 1) & ~1);
	        if (( signedCharValue(data[p])) < _lexer_trans_keys[_mid]) {
	          _upper = _mid - 2;
	         } else if (( signedCharValue(data[p])) > _lexer_trans_keys[_mid+1]) {
	          _lower = _mid + 2;
	        } else {
	          _trans += ((_mid - _keys) >> 1);
	          _break_match = true;
	          break;
	        }
	     } /* while */
	     if (_break_match) { break; }
	     _trans += _klen
	  }
	} while (false);
	_trans = _lexer_indicies[_trans];
	 this.cs = _lexer_trans_targs[_trans];
	if (_lexer_trans_actions[_trans] != 0) {
		_acts = _lexer_trans_actions[_trans];
		_nacts = _lexer_actions[_acts];
		_acts += 1;
		while (_nacts > 0) {
			_nacts -= 1;
			_acts += 1;
			switch (_lexer_actions[_acts - 1]) {
case 0:
/* line 6 "ragel/i18n/eo.js.rl" */

    this.content_start = p;
    this.current_line = this.line_number;
    this.start_col = p - this.last_newline - (this.keyword+':').length;
  		break;
case 1:
/* line 12 "ragel/i18n/eo.js.rl" */

    this.current_line = this.line_number;
    this.start_col = p - this.last_newline;
  		break;
case 2:
/* line 17 "ragel/i18n/eo.js.rl" */

    this.content_start = p;
  		break;
case 3:
/* line 21 "ragel/i18n/eo.js.rl" */

    this.docstring_content_type_start = p;
  		break;
case 4:
/* line 25 "ragel/i18n/eo.js.rl" */

    this.docstring_content_type_end = p;
  		break;
case 5:
/* line 29 "ragel/i18n/eo.js.rl" */

    var con = this.unindent(
      this.start_col, 
      this.bytesToString(data.slice(this.content_start, this.next_keyword_start-1)).replace(/(\r?\n)?([\t ])*$/, '').replace(/\\\"\\\"\\\"/mg, '"""')
    );
    var con_type = this.bytesToString(data.slice(this.docstring_content_type_start, this.docstring_content_type_end)).trim();
    this.listener.doc_string(con_type, con, this.current_line); 
  		break;
case 6:
/* line 38 "ragel/i18n/eo.js.rl" */

    p = this.store_keyword_content('feature', data, p, eof);
  		break;
case 7:
/* line 42 "ragel/i18n/eo.js.rl" */

    p = this.store_keyword_content('background', data, p, eof);
  		break;
case 8:
/* line 46 "ragel/i18n/eo.js.rl" */

    p = this.store_keyword_content('scenario', data, p, eof);
  		break;
case 9:
/* line 50 "ragel/i18n/eo.js.rl" */

    p = this.store_keyword_content('scenario_outline', data, p, eof);
  		break;
case 10:
/* line 54 "ragel/i18n/eo.js.rl" */

    p = this.store_keyword_content('examples', data, p, eof);
  		break;
case 11:
/* line 58 "ragel/i18n/eo.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.step(this.keyword, con, this.current_line);
  		break;
case 12:
/* line 63 "ragel/i18n/eo.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.comment(con, this.line_number);
    this.keyword_start = null;
  		break;
case 13:
/* line 69 "ragel/i18n/eo.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.tag(con, this.line_number);
    this.keyword_start = null;
  		break;
case 14:
/* line 75 "ragel/i18n/eo.js.rl" */

    this.line_number++;
  		break;
case 15:
/* line 79 "ragel/i18n/eo.js.rl" */

    this.last_newline = p + 1;
  		break;
case 16:
/* line 83 "ragel/i18n/eo.js.rl" */

    this.keyword_start = this.keyword_start || p;
  		break;
case 17:
/* line 87 "ragel/i18n/eo.js.rl" */

    this.keyword = this.bytesToString(data.slice(this.keyword_start, p)).replace(/:$/, '');
    this.keyword_start = null;
  		break;
case 18:
/* line 92 "ragel/i18n/eo.js.rl" */

    this.next_keyword_start = p;
  		break;
case 19:
/* line 96 "ragel/i18n/eo.js.rl" */

    p = p - 1;
    current_row = [];
    this.current_line = this.line_number;
  		break;
case 20:
/* line 102 "ragel/i18n/eo.js.rl" */

    this.content_start = p;
  		break;
case 21:
/* line 106 "ragel/i18n/eo.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    current_row.push(con.replace(/\\\|/, "|").replace(/\\n/, "\n").replace(/\\\\/, "\\"));
  		break;
case 22:
/* line 111 "ragel/i18n/eo.js.rl" */

    this.listener.row(current_row, this.current_line);
  		break;
case 23:
/* line 115 "ragel/i18n/eo.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw new Error("Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.");
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 854 "js/lib/gherkin/lexer/eo.js" */
			} /* action switch */
		}
	}
	if (_trigger_goto) {
		continue;
	}
	}
	if (_goto_level <= _again) {
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	p += 1;
	if (p != pe) {
		_goto_level = _resume;
		continue;
	}
	}
	if (_goto_level <= _test_eof) {
	if (p == eof) {
	__acts = _lexer_eof_actions[ this.cs];
	__nacts =  _lexer_actions[__acts];
	__acts += 1;
	while (__nacts > 0) {
		__nacts -= 1;
		__acts += 1;
		switch (_lexer_actions[__acts - 1]) {
case 23:
/* line 115 "ragel/i18n/eo.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw new Error("Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.");
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 893 "js/lib/gherkin/lexer/eo.js" */
		} /* eof action switch */
	}
	if (_trigger_goto) {
		continue;
	}
}
	}
	if (_goto_level <= _out) {
		break;
	}
	}
	}

/* line 165 "ragel/i18n/eo.js.rl" */
};


/*
 * Decode utf-8 byte sequence to string.
 */
var decodeUtf8 = function(bytes) {
  var result = "";
  var i = 0;
  var wc;
  var c;

  while (i < bytes.length) {
    /* parse as UTF-8 lead byte */
    wc = bytes[i++];
    if (wc < 0x80) {
      count = 0;
    } else if (wc < 0xC2 || wc >= 0xF8) {
      throw new Error("input is not a valid UTF-8 lead octet");
    } else if (wc < 0xE0) {
      count = 1;
      wc = (wc & 0x1F) << 6;
    } else if (wc < 0xF0) {
      count = 2;
      wc = (wc & 0x0F) << 12;
    } else /* wc < 0xF8 */ {
      count = 3;
      wc = (wc & 0x07) << 18;
    }

    /* parse trail bytes, if any */
    while (count) {
      if (!(i < bytes.length)) {
        throw new Error("short read");
      }
      if ((c = bytes[i++] ^ 0x80) > 0x3F) {
        throw new Error("input is not a valid UTF-8 trail octet");
      }
      wc |= c << (6 * --count);
      if (wc < (1 << (5 * count + 6))) {
        throw new Error("invalid non-minimal encoded input");
      }
    }

    /* handle conversion to UTF-16 if needed */
    if (wc > 0xFFFF) {
      wc -= 0x10000;
      result += String.fromCharCode(0xD800 + (wc >> 10));
      wc = 0xDC00 + (wc & 0x3FF);
    }
    result += String.fromCharCode(wc);
  }

  return result;
};

/*
 * Encode string to an array of bytes using utf8 encoding.
 *
 * Javascript internally stores character data as utf16 (like java).
 * String.charCodeAt() does *not* produce unicode points, but simply
 * reflects this internal representation. Thus, it is necessary
 * to first decode the utf-16 representation before encoding to
 * utf-8.
 */
var encodeUtf8 = function(string) {
  var bytes = [];
  var i = 0;
  var j = 0;
  var wc;

  while (i < string.length) {
    wc = string.charCodeAt(i++);
    if (wc >= 0xD800 && wc <= 0xDBFF && i < string.length && string.charCodeAt(i) >= 0xDC00 && string.charCodeAt(i) <= 0xDFFF) {
      /* decode UTF-16 */
      wc = 0x10000 + ((wc & 0x3FF) << 10) + (string.charCodeAt(i++) & 0x3FF);
    }

    /* emit lead byte */
    if (wc < 0x80) {
      bytes[j++] = wc;
      count = 0;
    } else if (wc < 0x800) {
      bytes[j++] = 0xC0 | (wc >> 6);
      count = 1;
    } else if (wc < 0x10000) {
      bytes[j++] = 0xE0 | (wc >> 12);
      count = 2;
    } else {
      /* SMP: 21-bit Unicode */
      bytes[j++] = 0xF0 | (wc >> 18);
      count = 3;
    }

    /* emit trail bytes, if any */
    while (count) {
      bytes[j++] = 0x80 | ((wc >> (6 * --count)) & 0x3F);
    }
  }

  return bytes;

};

Lexer.prototype.bytesToString = function(bytes) {
  if(typeof bytes.write == 'function') {
    // Node.js
    return bytes.toString('utf-8');
  }
  return decodeUtf8(bytes);
};

Lexer.prototype.stringToBytes = function(string) {
  return encodeUtf8(string);
};

Lexer.prototype.unindent = function(startcol, text) {
  startcol = startcol || 0;
  return text.replace(new RegExp('^[\t ]{0,' + startcol + '}', 'gm'), ''); 
};

Lexer.prototype.store_keyword_content = function(event, data, p, eof) {
  var end_point = (!this.next_keyword_start || (p == eof)) ? p : this.next_keyword_start;
  var content = this.unindent(this.start_col + 2, this.bytesToString(data.slice(this.content_start, end_point))).replace(/\s+$/,"");
  var content_lines = content.split("\n")
  var name = content_lines.shift() || "";
  name = name.trim();
  var description = content_lines.join("\n");
  this.listener[event](this.keyword, name, description, this.current_line);
  var nks = this.next_keyword_start;
  this.next_keyword_start = null;
  return nks ? nks - 1 : p;
};

Lexer.prototype.current_line_content = function(data, p) {
  var rest = Array.prototype.slice.call(data,this.last_newline, -1);
  var end = rest.indexOf(10) || -1;
  return this.bytesToString(rest.slice(0, end)).trim();
};

// Node.js export
if(typeof module !== 'undefined') {
  module.exports = Lexer;
}
// Require.js export
if (typeof define !== 'undefined') {
  if(define.amd) {
    define('gherkin/lexer/eo', [], function() {
      return Lexer;
    });
  } else {
    define('gherkin/lexer/eo', function(require, exports, module) {
      exports.Lexer = Lexer;
    });
  }
}

})();

}).call(this,require("buffer").Buffer)

},{"buffer":69}],202:[function(require,module,exports){
(function (Buffer){

/* line 1 "ragel/i18n/es.js.rl" */
;(function() {


/* line 126 "ragel/i18n/es.js.rl" */



/* line 11 "js/lib/gherkin/lexer/es.js" */
var _lexer_actions = [
	0, 1, 0, 1, 1, 1, 2, 1, 
	3, 1, 4, 1, 5, 1, 6, 1, 
	7, 1, 8, 1, 9, 1, 10, 1, 
	11, 1, 12, 1, 13, 1, 16, 1, 
	17, 1, 18, 1, 19, 1, 20, 1, 
	21, 1, 22, 1, 23, 2, 2, 18, 
	2, 3, 4, 2, 13, 0, 2, 14, 
	15, 2, 17, 0, 2, 17, 1, 2, 
	17, 16, 2, 17, 19, 2, 18, 6, 
	2, 18, 7, 2, 18, 8, 2, 18, 
	9, 2, 18, 10, 2, 18, 16, 2, 
	20, 21, 2, 22, 0, 2, 22, 1, 
	2, 22, 16, 2, 22, 19, 3, 4, 
	14, 15, 3, 5, 14, 15, 3, 11, 
	14, 15, 3, 12, 14, 15, 3, 13, 
	14, 15, 3, 14, 15, 18, 3, 17, 
	0, 11, 3, 17, 14, 15, 4, 2, 
	14, 15, 18, 4, 3, 4, 14, 15, 
	4, 17, 0, 14, 15, 5, 17, 0, 
	11, 14, 15
];

var _lexer_key_offsets = [
	0, 0, 17, 33, 34, 35, 37, 39, 
	44, 49, 54, 59, 63, 67, 69, 70, 
	71, 72, 73, 74, 75, 76, 77, 78, 
	79, 80, 81, 82, 83, 84, 85, 87, 
	89, 94, 101, 106, 107, 108, 109, 110, 
	111, 112, 113, 114, 115, 116, 117, 118, 
	119, 120, 133, 135, 137, 139, 141, 143, 
	145, 147, 149, 151, 153, 155, 157, 159, 
	161, 163, 179, 181, 182, 183, 184, 185, 
	186, 187, 188, 189, 190, 191, 192, 193, 
	194, 195, 196, 197, 207, 209, 211, 213, 
	215, 217, 219, 221, 223, 225, 227, 229, 
	231, 233, 235, 237, 239, 241, 243, 245, 
	247, 249, 251, 253, 255, 257, 259, 261, 
	263, 265, 267, 269, 271, 273, 275, 277, 
	279, 281, 283, 285, 287, 290, 292, 294, 
	296, 298, 300, 303, 305, 307, 309, 311, 
	313, 315, 317, 319, 321, 323, 325, 327, 
	329, 331, 333, 335, 337, 339, 340, 341, 
	342, 343, 344, 345, 347, 349, 352, 353, 
	354, 355, 356, 357, 358, 359, 360, 361, 
	368, 370, 372, 374, 376, 378, 380, 382, 
	384, 386, 388, 390, 392, 394, 396, 398, 
	399, 400, 401, 402, 403, 404, 406, 407, 
	408, 409, 410, 411, 412, 413, 414, 415, 
	429, 431, 433, 435, 437, 439, 441, 443, 
	445, 447, 449, 451, 453, 455, 457, 459, 
	461, 463, 465, 467, 469, 471, 473, 475, 
	477, 479, 481, 483, 486, 488, 490, 492, 
	494, 496, 498, 500, 502, 504, 506, 508, 
	510, 512, 514, 516, 518, 520, 522, 524, 
	527, 530, 533, 535, 537, 539, 541, 543, 
	545, 548, 550, 552, 554, 556, 558, 560, 
	562, 564, 566, 568, 570, 572, 574, 576, 
	578, 580, 582, 584, 586, 588, 589, 590, 
	591, 592, 593, 594, 595, 596, 597, 598, 
	599, 600, 601, 602, 603, 604, 605, 606, 
	607, 608, 609, 622, 624, 626, 628, 630, 
	632, 634, 636, 638, 640, 642, 644, 646, 
	648, 650, 652, 655, 657, 659, 661, 663, 
	665, 667, 669, 671, 673, 675, 677, 679, 
	681, 683, 685, 687, 689, 691, 693, 695, 
	698, 701, 704, 706, 708, 710, 712, 714, 
	716, 718, 720, 722, 724, 726, 728, 730, 
	732, 734, 735, 736, 740, 746, 749, 751, 
	757, 773, 776, 778, 780, 782, 784, 786, 
	788, 790, 792, 794, 796, 798, 800, 802, 
	804, 806, 808, 810, 812, 814, 816, 819, 
	822, 825, 827, 829, 831, 833, 835, 837, 
	840, 842, 844, 846, 848, 850, 852, 854, 
	856, 858, 860, 862, 864, 866, 868, 870, 
	872, 874, 876, 878, 880, 881, 882
];

var _lexer_trans_keys = [
	10, 32, 34, 35, 37, 42, 64, 65, 
	67, 68, 69, 80, 89, 124, 239, 9, 
	13, 10, 32, 34, 35, 37, 42, 64, 
	65, 67, 68, 69, 80, 89, 124, 9, 
	13, 34, 34, 10, 13, 10, 13, 10, 
	32, 34, 9, 13, 10, 32, 34, 9, 
	13, 10, 32, 34, 9, 13, 10, 32, 
	34, 9, 13, 10, 32, 9, 13, 10, 
	32, 9, 13, 10, 13, 10, 95, 70, 
	69, 65, 84, 85, 82, 69, 95, 69, 
	78, 68, 95, 37, 32, 10, 13, 10, 
	13, 13, 32, 64, 9, 10, 9, 10, 
	13, 32, 64, 11, 12, 10, 32, 64, 
	9, 13, 110, 116, 101, 99, 101, 100, 
	101, 110, 116, 101, 115, 58, 10, 10, 
	10, 32, 35, 37, 42, 64, 67, 68, 
	69, 80, 89, 9, 13, 10, 95, 10, 
	70, 10, 69, 10, 65, 10, 84, 10, 
	85, 10, 82, 10, 69, 10, 95, 10, 
	69, 10, 78, 10, 68, 10, 95, 10, 
	37, 10, 32, 10, 32, 34, 35, 37, 
	42, 64, 65, 67, 68, 69, 80, 89, 
	124, 9, 13, 97, 117, 114, 97, 99, 
	116, 101, 114, -61, -83, 115, 116, 105, 
	99, 97, 58, 10, 10, 10, 32, 35, 
	37, 64, 65, 67, 69, 9, 13, 10, 
	95, 10, 70, 10, 69, 10, 65, 10, 
	84, 10, 85, 10, 82, 10, 69, 10, 
	95, 10, 69, 10, 78, 10, 68, 10, 
	95, 10, 37, 10, 110, 10, 116, 10, 
	101, 10, 99, 10, 101, 10, 100, 10, 
	101, 10, 110, 10, 116, 10, 101, 10, 
	115, 10, 58, 10, 97, 10, 114, 10, 
	97, 10, 99, 10, 116, 10, 101, 10, 
	114, -61, 10, -83, 10, 10, 115, 10, 
	116, 10, 105, 10, 99, 10, 97, 10, 
	106, 115, 10, 101, 10, 109, 10, 112, 
	10, 108, 10, 111, 10, 99, 113, 10, 
	101, 10, 110, 10, 97, 10, 114, 10, 
	105, 10, 111, 10, 117, 10, 101, 10, 
	109, 10, 97, 10, 32, 10, 100, 10, 
	101, 10, 108, 10, 32, 10, 101, 10, 
	115, 10, 99, 97, 110, 100, 111, 97, 
	100, 97, 111, 32, 115, 106, 110, 115, 
	101, 109, 112, 108, 111, 115, 58, 10, 
	10, 10, 32, 35, 67, 124, 9, 13, 
	10, 97, 10, 114, 10, 97, 10, 99, 
	10, 116, 10, 101, 10, 114, -61, 10, 
	-83, 10, 10, 115, 10, 116, 10, 105, 
	10, 99, 10, 97, 10, 58, 116, 111, 
	110, 99, 101, 115, 99, 113, 101, 110, 
	97, 114, 105, 111, 58, 10, 10, 10, 
	32, 35, 37, 42, 64, 65, 67, 68, 
	69, 80, 89, 9, 13, 10, 95, 10, 
	70, 10, 69, 10, 65, 10, 84, 10, 
	85, 10, 82, 10, 69, 10, 95, 10, 
	69, 10, 78, 10, 68, 10, 95, 10, 
	37, 10, 32, 10, 110, 10, 116, 10, 
	101, 10, 99, 10, 101, 10, 100, 10, 
	101, 10, 110, 10, 116, 10, 101, 10, 
	115, 10, 58, 10, 97, 117, 10, 114, 
	10, 97, 10, 99, 10, 116, 10, 101, 
	10, 114, -61, 10, -83, 10, 10, 115, 
	10, 116, 10, 105, 10, 99, 10, 97, 
	10, 97, 10, 110, 10, 100, 10, 111, 
	10, 97, 10, 100, 10, 97, 111, 10, 
	32, 115, 10, 110, 115, 10, 116, 10, 
	111, 10, 110, 10, 99, 10, 101, 10, 
	115, 10, 99, 113, 10, 101, 10, 110, 
	10, 97, 10, 114, 10, 105, 10, 111, 
	10, 117, 10, 101, 10, 109, 10, 97, 
	10, 32, 10, 100, 10, 101, 10, 108, 
	10, 32, 10, 101, 10, 115, 10, 99, 
	10, 101, 10, 114, 117, 101, 109, 97, 
	32, 100, 101, 108, 32, 101, 115, 99, 
	101, 110, 97, 114, 105, 111, 58, 10, 
	10, 10, 32, 35, 37, 42, 64, 67, 
	68, 69, 80, 89, 9, 13, 10, 95, 
	10, 70, 10, 69, 10, 65, 10, 84, 
	10, 85, 10, 82, 10, 69, 10, 95, 
	10, 69, 10, 78, 10, 68, 10, 95, 
	10, 37, 10, 32, 10, 97, 117, 10, 
	114, 10, 97, 10, 99, 10, 116, 10, 
	101, 10, 114, -61, 10, -83, 10, 10, 
	115, 10, 116, 10, 105, 10, 99, 10, 
	97, 10, 58, 10, 97, 10, 110, 10, 
	100, 10, 111, 10, 97, 10, 100, 10, 
	97, 111, 10, 32, 115, 10, 110, 115, 
	10, 116, 10, 111, 10, 110, 10, 99, 
	10, 101, 10, 115, 10, 99, 10, 101, 
	10, 110, 10, 97, 10, 114, 10, 105, 
	10, 111, 10, 101, 10, 114, 101, 114, 
	32, 124, 9, 13, 10, 32, 92, 124, 
	9, 13, 10, 92, 124, 10, 92, 10, 
	32, 92, 124, 9, 13, 10, 32, 34, 
	35, 37, 42, 64, 65, 67, 68, 69, 
	80, 89, 124, 9, 13, 10, 97, 117, 
	10, 114, 10, 97, 10, 99, 10, 116, 
	10, 101, 10, 114, -61, 10, -83, 10, 
	10, 115, 10, 116, 10, 105, 10, 99, 
	10, 97, 10, 58, 10, 97, 10, 110, 
	10, 100, 10, 111, 10, 97, 10, 100, 
	10, 97, 111, 10, 32, 115, 10, 110, 
	115, 10, 116, 10, 111, 10, 110, 10, 
	99, 10, 101, 10, 115, 10, 99, 113, 
	10, 101, 10, 110, 10, 97, 10, 114, 
	10, 105, 10, 111, 10, 117, 10, 101, 
	10, 109, 10, 97, 10, 32, 10, 100, 
	10, 101, 10, 108, 10, 32, 10, 101, 
	10, 115, 10, 99, 10, 101, 10, 114, 
	187, 191, 0
];

var _lexer_single_lengths = [
	0, 15, 14, 1, 1, 2, 2, 3, 
	3, 3, 3, 2, 2, 2, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 2, 2, 
	3, 5, 3, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 11, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 14, 2, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 8, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 3, 2, 2, 2, 
	2, 2, 3, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 1, 1, 1, 
	1, 1, 1, 2, 2, 3, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 5, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 1, 
	1, 1, 1, 1, 1, 2, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 12, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 3, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 3, 
	3, 3, 2, 2, 2, 2, 2, 2, 
	3, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 11, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 3, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 3, 
	3, 3, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 1, 1, 2, 4, 3, 2, 4, 
	14, 3, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 3, 3, 
	3, 2, 2, 2, 2, 2, 2, 3, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 1, 1, 0
];

var _lexer_range_lengths = [
	0, 1, 1, 0, 0, 0, 0, 1, 
	1, 1, 1, 1, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 1, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 1, 0, 0, 1, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0
];

var _lexer_index_offsets = [
	0, 0, 17, 33, 35, 37, 40, 43, 
	48, 53, 58, 63, 67, 71, 74, 76, 
	78, 80, 82, 84, 86, 88, 90, 92, 
	94, 96, 98, 100, 102, 104, 106, 109, 
	112, 117, 124, 129, 131, 133, 135, 137, 
	139, 141, 143, 145, 147, 149, 151, 153, 
	155, 157, 170, 173, 176, 179, 182, 185, 
	188, 191, 194, 197, 200, 203, 206, 209, 
	212, 215, 231, 234, 236, 238, 240, 242, 
	244, 246, 248, 250, 252, 254, 256, 258, 
	260, 262, 264, 266, 276, 279, 282, 285, 
	288, 291, 294, 297, 300, 303, 306, 309, 
	312, 315, 318, 321, 324, 327, 330, 333, 
	336, 339, 342, 345, 348, 351, 354, 357, 
	360, 363, 366, 369, 372, 375, 378, 381, 
	384, 387, 390, 393, 396, 400, 403, 406, 
	409, 412, 415, 419, 422, 425, 428, 431, 
	434, 437, 440, 443, 446, 449, 452, 455, 
	458, 461, 464, 467, 470, 473, 475, 477, 
	479, 481, 483, 485, 488, 491, 495, 497, 
	499, 501, 503, 505, 507, 509, 511, 513, 
	520, 523, 526, 529, 532, 535, 538, 541, 
	544, 547, 550, 553, 556, 559, 562, 565, 
	567, 569, 571, 573, 575, 577, 580, 582, 
	584, 586, 588, 590, 592, 594, 596, 598, 
	612, 615, 618, 621, 624, 627, 630, 633, 
	636, 639, 642, 645, 648, 651, 654, 657, 
	660, 663, 666, 669, 672, 675, 678, 681, 
	684, 687, 690, 693, 697, 700, 703, 706, 
	709, 712, 715, 718, 721, 724, 727, 730, 
	733, 736, 739, 742, 745, 748, 751, 754, 
	758, 762, 766, 769, 772, 775, 778, 781, 
	784, 788, 791, 794, 797, 800, 803, 806, 
	809, 812, 815, 818, 821, 824, 827, 830, 
	833, 836, 839, 842, 845, 848, 850, 852, 
	854, 856, 858, 860, 862, 864, 866, 868, 
	870, 872, 874, 876, 878, 880, 882, 884, 
	886, 888, 890, 903, 906, 909, 912, 915, 
	918, 921, 924, 927, 930, 933, 936, 939, 
	942, 945, 948, 952, 955, 958, 961, 964, 
	967, 970, 973, 976, 979, 982, 985, 988, 
	991, 994, 997, 1000, 1003, 1006, 1009, 1012, 
	1016, 1020, 1024, 1027, 1030, 1033, 1036, 1039, 
	1042, 1045, 1048, 1051, 1054, 1057, 1060, 1063, 
	1066, 1069, 1071, 1073, 1077, 1083, 1087, 1090, 
	1096, 1112, 1116, 1119, 1122, 1125, 1128, 1131, 
	1134, 1137, 1140, 1143, 1146, 1149, 1152, 1155, 
	1158, 1161, 1164, 1167, 1170, 1173, 1176, 1180, 
	1184, 1188, 1191, 1194, 1197, 1200, 1203, 1206, 
	1210, 1213, 1216, 1219, 1222, 1225, 1228, 1231, 
	1234, 1237, 1240, 1243, 1246, 1249, 1252, 1255, 
	1258, 1261, 1264, 1267, 1270, 1272, 1274
];

var _lexer_indicies = [
	2, 1, 3, 4, 5, 6, 7, 8, 
	9, 10, 11, 12, 6, 13, 14, 1, 
	0, 2, 1, 3, 4, 5, 6, 7, 
	8, 9, 10, 11, 12, 6, 13, 1, 
	0, 15, 0, 16, 0, 18, 19, 17, 
	21, 22, 20, 25, 24, 26, 24, 23, 
	29, 28, 30, 28, 27, 29, 28, 31, 
	28, 27, 29, 28, 32, 28, 27, 34, 
	33, 33, 0, 2, 35, 35, 0, 37, 
	38, 36, 2, 0, 39, 0, 40, 0, 
	41, 0, 42, 0, 43, 0, 44, 0, 
	45, 0, 46, 0, 47, 0, 48, 0, 
	49, 0, 50, 0, 51, 0, 52, 0, 
	53, 0, 55, 56, 54, 58, 59, 57, 
	0, 0, 0, 0, 60, 61, 62, 61, 
	61, 64, 63, 60, 2, 65, 7, 65, 
	0, 66, 0, 67, 0, 68, 0, 69, 
	0, 70, 0, 71, 0, 72, 0, 73, 
	0, 74, 0, 75, 0, 76, 0, 77, 
	0, 79, 78, 81, 80, 81, 82, 83, 
	84, 85, 83, 86, 87, 88, 89, 85, 
	82, 80, 81, 90, 80, 81, 91, 80, 
	81, 92, 80, 81, 93, 80, 81, 94, 
	80, 81, 95, 80, 81, 96, 80, 81, 
	97, 80, 81, 98, 80, 81, 99, 80, 
	81, 100, 80, 81, 101, 80, 81, 102, 
	80, 81, 103, 80, 81, 104, 80, 106, 
	105, 107, 108, 109, 110, 111, 112, 113, 
	114, 115, 116, 110, 117, 105, 0, 118, 
	119, 0, 120, 0, 121, 0, 122, 0, 
	123, 0, 124, 0, 125, 0, 126, 0, 
	127, 0, 128, 0, 129, 0, 130, 0, 
	131, 0, 132, 0, 133, 0, 135, 134, 
	137, 136, 137, 138, 139, 140, 139, 141, 
	142, 143, 138, 136, 137, 144, 136, 137, 
	145, 136, 137, 146, 136, 137, 147, 136, 
	137, 148, 136, 137, 149, 136, 137, 150, 
	136, 137, 151, 136, 137, 152, 136, 137, 
	153, 136, 137, 154, 136, 137, 155, 136, 
	137, 156, 136, 137, 157, 136, 137, 158, 
	136, 137, 159, 136, 137, 160, 136, 137, 
	161, 136, 137, 162, 136, 137, 163, 136, 
	137, 164, 136, 137, 165, 136, 137, 166, 
	136, 137, 167, 136, 137, 168, 136, 137, 
	169, 136, 137, 170, 136, 137, 171, 136, 
	137, 172, 136, 137, 173, 136, 137, 174, 
	136, 137, 175, 136, 137, 176, 136, 177, 
	137, 136, 178, 137, 136, 137, 179, 136, 
	137, 180, 136, 137, 181, 136, 137, 182, 
	136, 137, 168, 136, 137, 183, 184, 136, 
	137, 185, 136, 137, 186, 136, 137, 187, 
	136, 137, 188, 136, 137, 167, 136, 137, 
	189, 190, 136, 137, 191, 136, 137, 192, 
	136, 137, 193, 136, 137, 194, 136, 137, 
	195, 136, 137, 168, 136, 137, 196, 136, 
	137, 197, 136, 137, 198, 136, 137, 199, 
	136, 137, 200, 136, 137, 201, 136, 137, 
	202, 136, 137, 203, 136, 137, 204, 136, 
	137, 205, 136, 137, 206, 136, 137, 189, 
	136, 207, 0, 208, 0, 209, 0, 210, 
	0, 211, 0, 212, 0, 213, 213, 0, 
	53, 210, 0, 214, 215, 216, 0, 217, 
	0, 218, 0, 219, 0, 220, 0, 221, 
	0, 222, 0, 223, 0, 225, 224, 227, 
	226, 227, 228, 229, 230, 229, 228, 226, 
	227, 231, 226, 227, 232, 226, 227, 233, 
	226, 227, 234, 226, 227, 235, 226, 227, 
	236, 226, 227, 237, 226, 238, 227, 226, 
	239, 227, 226, 227, 240, 226, 227, 241, 
	226, 227, 242, 226, 227, 243, 226, 227, 
	244, 226, 227, 245, 226, 246, 0, 247, 
	0, 248, 0, 249, 0, 250, 0, 210, 
	0, 251, 252, 0, 253, 0, 254, 0, 
	255, 0, 256, 0, 257, 0, 258, 0, 
	259, 0, 261, 260, 263, 262, 263, 264, 
	265, 266, 267, 265, 268, 269, 270, 271, 
	272, 267, 264, 262, 263, 273, 262, 263, 
	274, 262, 263, 275, 262, 263, 276, 262, 
	263, 277, 262, 263, 278, 262, 263, 279, 
	262, 263, 280, 262, 263, 281, 262, 263, 
	282, 262, 263, 283, 262, 263, 284, 262, 
	263, 285, 262, 263, 286, 262, 263, 287, 
	262, 263, 288, 262, 263, 289, 262, 263, 
	290, 262, 263, 291, 262, 263, 292, 262, 
	263, 293, 262, 263, 294, 262, 263, 295, 
	262, 263, 296, 262, 263, 297, 262, 263, 
	298, 262, 263, 287, 262, 263, 299, 300, 
	262, 263, 301, 262, 263, 302, 262, 263, 
	303, 262, 263, 304, 262, 263, 305, 262, 
	263, 306, 262, 307, 263, 262, 308, 263, 
	262, 263, 309, 262, 263, 310, 262, 263, 
	311, 262, 263, 312, 262, 263, 298, 262, 
	263, 313, 262, 263, 314, 262, 263, 315, 
	262, 263, 316, 262, 263, 317, 262, 263, 
	318, 262, 263, 319, 319, 262, 263, 287, 
	316, 262, 263, 320, 321, 262, 263, 322, 
	262, 263, 323, 262, 263, 324, 262, 263, 
	325, 262, 263, 326, 262, 263, 316, 262, 
	263, 327, 328, 262, 263, 329, 262, 263, 
	330, 262, 263, 331, 262, 263, 332, 262, 
	263, 333, 262, 263, 298, 262, 263, 334, 
	262, 263, 335, 262, 263, 336, 262, 263, 
	337, 262, 263, 338, 262, 263, 339, 262, 
	263, 340, 262, 263, 341, 262, 263, 342, 
	262, 263, 343, 262, 263, 344, 262, 263, 
	327, 262, 263, 345, 262, 263, 315, 262, 
	346, 0, 347, 0, 348, 0, 349, 0, 
	350, 0, 351, 0, 352, 0, 353, 0, 
	354, 0, 355, 0, 356, 0, 357, 0, 
	358, 0, 359, 0, 360, 0, 361, 0, 
	362, 0, 363, 0, 364, 0, 366, 365, 
	368, 367, 368, 369, 370, 371, 372, 370, 
	373, 374, 375, 376, 372, 369, 367, 368, 
	377, 367, 368, 378, 367, 368, 379, 367, 
	368, 380, 367, 368, 381, 367, 368, 382, 
	367, 368, 383, 367, 368, 384, 367, 368, 
	385, 367, 368, 386, 367, 368, 387, 367, 
	368, 388, 367, 368, 389, 367, 368, 390, 
	367, 368, 391, 367, 368, 392, 393, 367, 
	368, 394, 367, 368, 395, 367, 368, 396, 
	367, 368, 397, 367, 368, 398, 367, 368, 
	399, 367, 400, 368, 367, 401, 368, 367, 
	368, 402, 367, 368, 403, 367, 368, 404, 
	367, 368, 405, 367, 368, 406, 367, 368, 
	391, 367, 368, 407, 367, 368, 408, 367, 
	368, 409, 367, 368, 410, 367, 368, 411, 
	367, 368, 412, 367, 368, 413, 413, 367, 
	368, 391, 410, 367, 368, 414, 415, 367, 
	368, 416, 367, 368, 417, 367, 368, 418, 
	367, 368, 419, 367, 368, 420, 367, 368, 
	410, 367, 368, 421, 367, 368, 422, 367, 
	368, 423, 367, 368, 424, 367, 368, 425, 
	367, 368, 426, 367, 368, 406, 367, 368, 
	427, 367, 368, 409, 367, 428, 0, 209, 
	0, 429, 430, 429, 0, 433, 432, 434, 
	435, 432, 431, 0, 437, 438, 436, 0, 
	437, 436, 433, 439, 437, 438, 439, 436, 
	433, 440, 441, 442, 443, 444, 445, 446, 
	447, 448, 449, 450, 444, 451, 440, 0, 
	81, 452, 453, 80, 81, 454, 80, 81, 
	455, 80, 81, 456, 80, 81, 457, 80, 
	81, 458, 80, 81, 459, 80, 460, 81, 
	80, 461, 81, 80, 81, 462, 80, 81, 
	463, 80, 81, 464, 80, 81, 465, 80, 
	81, 466, 80, 81, 104, 80, 81, 467, 
	80, 81, 468, 80, 81, 469, 80, 81, 
	470, 80, 81, 471, 80, 81, 472, 80, 
	81, 473, 473, 80, 81, 104, 470, 80, 
	81, 474, 475, 80, 81, 476, 80, 81, 
	477, 80, 81, 478, 80, 81, 479, 80, 
	81, 480, 80, 81, 470, 80, 81, 481, 
	482, 80, 81, 483, 80, 81, 484, 80, 
	81, 485, 80, 81, 486, 80, 81, 487, 
	80, 81, 466, 80, 81, 488, 80, 81, 
	489, 80, 81, 490, 80, 81, 491, 80, 
	81, 492, 80, 81, 493, 80, 81, 494, 
	80, 81, 495, 80, 81, 496, 80, 81, 
	497, 80, 81, 498, 80, 81, 481, 80, 
	81, 499, 80, 81, 469, 80, 500, 0, 
	1, 0, 501, 0
];

var _lexer_trans_targs = [
	0, 2, 2, 3, 13, 15, 29, 32, 
	35, 66, 153, 157, 353, 355, 412, 4, 
	5, 6, 7, 6, 6, 7, 6, 8, 
	8, 8, 9, 8, 8, 8, 9, 10, 
	11, 12, 2, 12, 13, 2, 14, 16, 
	17, 18, 19, 20, 21, 22, 23, 24, 
	25, 26, 27, 28, 414, 30, 31, 2, 
	14, 31, 2, 14, 33, 34, 2, 33, 
	32, 34, 36, 37, 38, 39, 40, 41, 
	42, 43, 44, 45, 46, 47, 48, 49, 
	48, 49, 49, 2, 50, 64, 361, 380, 
	384, 410, 51, 52, 53, 54, 55, 56, 
	57, 58, 59, 60, 61, 62, 63, 2, 
	65, 2, 2, 3, 13, 15, 29, 32, 
	35, 66, 153, 157, 353, 355, 67, 149, 
	68, 69, 70, 71, 72, 73, 74, 75, 
	76, 77, 78, 79, 80, 81, 82, 83, 
	82, 83, 83, 2, 84, 98, 110, 124, 
	85, 86, 87, 88, 89, 90, 91, 92, 
	93, 94, 95, 96, 97, 2, 99, 100, 
	101, 102, 103, 104, 105, 106, 107, 108, 
	109, 65, 111, 112, 113, 114, 115, 116, 
	117, 118, 119, 120, 121, 122, 123, 125, 
	130, 126, 127, 128, 129, 131, 137, 132, 
	133, 134, 135, 136, 138, 139, 140, 141, 
	142, 143, 144, 145, 146, 147, 148, 150, 
	151, 152, 29, 154, 155, 156, 158, 183, 
	189, 159, 160, 161, 162, 163, 164, 165, 
	166, 167, 166, 167, 167, 2, 168, 169, 
	170, 171, 172, 173, 174, 175, 176, 177, 
	178, 179, 180, 181, 182, 65, 184, 185, 
	186, 187, 188, 190, 277, 191, 192, 193, 
	194, 195, 196, 197, 198, 199, 198, 199, 
	199, 2, 200, 214, 215, 227, 245, 249, 
	275, 201, 202, 203, 204, 205, 206, 207, 
	208, 209, 210, 211, 212, 213, 2, 65, 
	216, 217, 218, 219, 220, 221, 222, 223, 
	224, 225, 226, 228, 241, 229, 230, 231, 
	232, 233, 234, 235, 236, 237, 238, 239, 
	240, 242, 243, 244, 214, 246, 247, 248, 
	250, 256, 251, 252, 253, 254, 255, 257, 
	263, 258, 259, 260, 261, 262, 264, 265, 
	266, 267, 268, 269, 270, 271, 272, 273, 
	274, 276, 278, 279, 280, 281, 282, 283, 
	284, 285, 286, 287, 288, 289, 290, 291, 
	292, 293, 294, 295, 296, 297, 298, 297, 
	298, 298, 2, 299, 313, 314, 333, 337, 
	351, 300, 301, 302, 303, 304, 305, 306, 
	307, 308, 309, 310, 311, 312, 2, 65, 
	315, 329, 316, 317, 318, 319, 320, 321, 
	322, 323, 324, 325, 326, 327, 328, 330, 
	331, 332, 313, 334, 335, 336, 338, 344, 
	339, 340, 341, 342, 343, 345, 346, 347, 
	348, 349, 350, 352, 354, 355, 356, 357, 
	359, 360, 358, 356, 357, 358, 356, 359, 
	360, 3, 13, 15, 29, 32, 35, 66, 
	153, 157, 353, 355, 362, 376, 363, 364, 
	365, 366, 367, 368, 369, 370, 371, 372, 
	373, 374, 375, 377, 378, 379, 64, 381, 
	382, 383, 385, 391, 386, 387, 388, 389, 
	390, 392, 398, 393, 394, 395, 396, 397, 
	399, 400, 401, 402, 403, 404, 405, 406, 
	407, 408, 409, 411, 413, 0
];

var _lexer_trans_actions = [
	43, 0, 54, 3, 1, 0, 29, 1, 
	29, 29, 29, 29, 29, 35, 0, 0, 
	0, 7, 139, 48, 0, 102, 9, 5, 
	45, 134, 45, 0, 33, 122, 33, 33, 
	0, 11, 106, 0, 0, 114, 25, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 57, 149, 
	126, 0, 110, 23, 0, 27, 118, 27, 
	51, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 57, 144, 
	0, 54, 0, 72, 33, 84, 84, 84, 
	84, 84, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 15, 
	15, 31, 130, 60, 57, 31, 63, 57, 
	63, 63, 63, 63, 63, 66, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 57, 144, 
	0, 54, 0, 69, 33, 84, 84, 84, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 13, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 13, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	57, 144, 0, 54, 0, 81, 84, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 21, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 57, 144, 0, 54, 
	0, 75, 33, 84, 84, 84, 84, 84, 
	84, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 17, 17, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 57, 144, 0, 
	54, 0, 78, 33, 84, 84, 84, 84, 
	84, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 19, 19, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 37, 
	37, 54, 37, 87, 0, 0, 39, 0, 
	0, 93, 90, 41, 96, 90, 96, 96, 
	96, 96, 96, 99, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0
];

var _lexer_eof_actions = [
	0, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43
];

var lexer_start = 1;
var lexer_first_final = 414;
var lexer_error = 0;

var lexer_en_main = 1;


/* line 129 "ragel/i18n/es.js.rl" */

/* line 130 "ragel/i18n/es.js.rl" */

/* line 131 "ragel/i18n/es.js.rl" */

/* line 132 "ragel/i18n/es.js.rl" */

var Lexer = function(listener) {
  // Check that listener has the required functions
  var events = ['comment', 'tag', 'feature', 'background', 'scenario', 'scenario_outline', 'examples', 'step', 'doc_string', 'row', 'eof'];
  for(var i=0, len=events.length; i<len; i++) {
    var event = events[i];
    if(typeof listener[event] != 'function') {
      throw new Error("Error. No " + event + " function exists on " + JSON.stringify(listener));
    }
  }
  this.listener = listener;
};

Lexer.prototype.scan = function(data) {
  var ending = "\n%_FEATURE_END_%";
  if(typeof data == 'string') {
    data = this.stringToBytes(data + ending);
  } else if(typeof Buffer != 'undefined' && Buffer.isBuffer(data)) {
    // Node.js
    var buf = new Buffer(data.length + ending.length);
    data.copy(buf, 0, 0);
    new Buffer(ending).copy(buf, data.length, 0);
    data = buf;
  }
  var eof = pe = data.length;
  var p = 0;

  this.line_number = 1;
  this.last_newline = 0;
  var signedCharValue=function(v){return v > 127 ? v-256 : v; };

  
/* line 765 "js/lib/gherkin/lexer/es.js" */
{
	  this.cs = lexer_start;
} /* JSCodeGen::writeInit */

/* line 164 "ragel/i18n/es.js.rl" */
  
/* line 772 "js/lib/gherkin/lexer/es.js" */
{
	var _klen, _trans, _keys, _ps, _widec, _acts, _nacts;
	var _goto_level, _resume, _eof_trans, _again, _test_eof;
	var _out;
	_klen = _trans = _keys = _acts = _nacts = null;
	_goto_level = 0;
	_resume = 10;
	_eof_trans = 15;
	_again = 20;
	_test_eof = 30;
	_out = 40;
	while (true) {
	_trigger_goto = false;
	if (_goto_level <= 0) {
	if (p == pe) {
		_goto_level = _test_eof;
		continue;
	}
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	}
	if (_goto_level <= _resume) {
	_keys = _lexer_key_offsets[ this.cs];
	_trans = _lexer_index_offsets[ this.cs];
	_klen = _lexer_single_lengths[ this.cs];
	_break_match = false;
	
	do {
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + _klen - 1;

	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + ( (_upper - _lower) >> 1 );

	        if (( signedCharValue(data[p])) < _lexer_trans_keys[_mid]) {
	           _upper = _mid - 1;
	        } else if (( signedCharValue(data[p])) > _lexer_trans_keys[_mid]) {
	           _lower = _mid + 1;
	        } else {
	           _trans += (_mid - _keys);
	           _break_match = true;
	           break;
	        };
	     } /* while */
	     if (_break_match) { break; }
	     _keys += _klen;
	     _trans += _klen;
	  }
	  _klen = _lexer_range_lengths[ this.cs];
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + (_klen << 1) - 2;
	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + (((_upper-_lower) >> 1) & ~1);
	        if (( signedCharValue(data[p])) < _lexer_trans_keys[_mid]) {
	          _upper = _mid - 2;
	         } else if (( signedCharValue(data[p])) > _lexer_trans_keys[_mid+1]) {
	          _lower = _mid + 2;
	        } else {
	          _trans += ((_mid - _keys) >> 1);
	          _break_match = true;
	          break;
	        }
	     } /* while */
	     if (_break_match) { break; }
	     _trans += _klen
	  }
	} while (false);
	_trans = _lexer_indicies[_trans];
	 this.cs = _lexer_trans_targs[_trans];
	if (_lexer_trans_actions[_trans] != 0) {
		_acts = _lexer_trans_actions[_trans];
		_nacts = _lexer_actions[_acts];
		_acts += 1;
		while (_nacts > 0) {
			_nacts -= 1;
			_acts += 1;
			switch (_lexer_actions[_acts - 1]) {
case 0:
/* line 6 "ragel/i18n/es.js.rl" */

    this.content_start = p;
    this.current_line = this.line_number;
    this.start_col = p - this.last_newline - (this.keyword+':').length;
  		break;
case 1:
/* line 12 "ragel/i18n/es.js.rl" */

    this.current_line = this.line_number;
    this.start_col = p - this.last_newline;
  		break;
case 2:
/* line 17 "ragel/i18n/es.js.rl" */

    this.content_start = p;
  		break;
case 3:
/* line 21 "ragel/i18n/es.js.rl" */

    this.docstring_content_type_start = p;
  		break;
case 4:
/* line 25 "ragel/i18n/es.js.rl" */

    this.docstring_content_type_end = p;
  		break;
case 5:
/* line 29 "ragel/i18n/es.js.rl" */

    var con = this.unindent(
      this.start_col, 
      this.bytesToString(data.slice(this.content_start, this.next_keyword_start-1)).replace(/(\r?\n)?([\t ])*$/, '').replace(/\\\"\\\"\\\"/mg, '"""')
    );
    var con_type = this.bytesToString(data.slice(this.docstring_content_type_start, this.docstring_content_type_end)).trim();
    this.listener.doc_string(con_type, con, this.current_line); 
  		break;
case 6:
/* line 38 "ragel/i18n/es.js.rl" */

    p = this.store_keyword_content('feature', data, p, eof);
  		break;
case 7:
/* line 42 "ragel/i18n/es.js.rl" */

    p = this.store_keyword_content('background', data, p, eof);
  		break;
case 8:
/* line 46 "ragel/i18n/es.js.rl" */

    p = this.store_keyword_content('scenario', data, p, eof);
  		break;
case 9:
/* line 50 "ragel/i18n/es.js.rl" */

    p = this.store_keyword_content('scenario_outline', data, p, eof);
  		break;
case 10:
/* line 54 "ragel/i18n/es.js.rl" */

    p = this.store_keyword_content('examples', data, p, eof);
  		break;
case 11:
/* line 58 "ragel/i18n/es.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.step(this.keyword, con, this.current_line);
  		break;
case 12:
/* line 63 "ragel/i18n/es.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.comment(con, this.line_number);
    this.keyword_start = null;
  		break;
case 13:
/* line 69 "ragel/i18n/es.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.tag(con, this.line_number);
    this.keyword_start = null;
  		break;
case 14:
/* line 75 "ragel/i18n/es.js.rl" */

    this.line_number++;
  		break;
case 15:
/* line 79 "ragel/i18n/es.js.rl" */

    this.last_newline = p + 1;
  		break;
case 16:
/* line 83 "ragel/i18n/es.js.rl" */

    this.keyword_start = this.keyword_start || p;
  		break;
case 17:
/* line 87 "ragel/i18n/es.js.rl" */

    this.keyword = this.bytesToString(data.slice(this.keyword_start, p)).replace(/:$/, '');
    this.keyword_start = null;
  		break;
case 18:
/* line 92 "ragel/i18n/es.js.rl" */

    this.next_keyword_start = p;
  		break;
case 19:
/* line 96 "ragel/i18n/es.js.rl" */

    p = p - 1;
    current_row = [];
    this.current_line = this.line_number;
  		break;
case 20:
/* line 102 "ragel/i18n/es.js.rl" */

    this.content_start = p;
  		break;
case 21:
/* line 106 "ragel/i18n/es.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    current_row.push(con.replace(/\\\|/, "|").replace(/\\n/, "\n").replace(/\\\\/, "\\"));
  		break;
case 22:
/* line 111 "ragel/i18n/es.js.rl" */

    this.listener.row(current_row, this.current_line);
  		break;
case 23:
/* line 115 "ragel/i18n/es.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw new Error("Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.");
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 999 "js/lib/gherkin/lexer/es.js" */
			} /* action switch */
		}
	}
	if (_trigger_goto) {
		continue;
	}
	}
	if (_goto_level <= _again) {
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	p += 1;
	if (p != pe) {
		_goto_level = _resume;
		continue;
	}
	}
	if (_goto_level <= _test_eof) {
	if (p == eof) {
	__acts = _lexer_eof_actions[ this.cs];
	__nacts =  _lexer_actions[__acts];
	__acts += 1;
	while (__nacts > 0) {
		__nacts -= 1;
		__acts += 1;
		switch (_lexer_actions[__acts - 1]) {
case 23:
/* line 115 "ragel/i18n/es.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw new Error("Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.");
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 1038 "js/lib/gherkin/lexer/es.js" */
		} /* eof action switch */
	}
	if (_trigger_goto) {
		continue;
	}
}
	}
	if (_goto_level <= _out) {
		break;
	}
	}
	}

/* line 165 "ragel/i18n/es.js.rl" */
};


/*
 * Decode utf-8 byte sequence to string.
 */
var decodeUtf8 = function(bytes) {
  var result = "";
  var i = 0;
  var wc;
  var c;

  while (i < bytes.length) {
    /* parse as UTF-8 lead byte */
    wc = bytes[i++];
    if (wc < 0x80) {
      count = 0;
    } else if (wc < 0xC2 || wc >= 0xF8) {
      throw new Error("input is not a valid UTF-8 lead octet");
    } else if (wc < 0xE0) {
      count = 1;
      wc = (wc & 0x1F) << 6;
    } else if (wc < 0xF0) {
      count = 2;
      wc = (wc & 0x0F) << 12;
    } else /* wc < 0xF8 */ {
      count = 3;
      wc = (wc & 0x07) << 18;
    }

    /* parse trail bytes, if any */
    while (count) {
      if (!(i < bytes.length)) {
        throw new Error("short read");
      }
      if ((c = bytes[i++] ^ 0x80) > 0x3F) {
        throw new Error("input is not a valid UTF-8 trail octet");
      }
      wc |= c << (6 * --count);
      if (wc < (1 << (5 * count + 6))) {
        throw new Error("invalid non-minimal encoded input");
      }
    }

    /* handle conversion to UTF-16 if needed */
    if (wc > 0xFFFF) {
      wc -= 0x10000;
      result += String.fromCharCode(0xD800 + (wc >> 10));
      wc = 0xDC00 + (wc & 0x3FF);
    }
    result += String.fromCharCode(wc);
  }

  return result;
};

/*
 * Encode string to an array of bytes using utf8 encoding.
 *
 * Javascript internally stores character data as utf16 (like java).
 * String.charCodeAt() does *not* produce unicode points, but simply
 * reflects this internal representation. Thus, it is necessary
 * to first decode the utf-16 representation before encoding to
 * utf-8.
 */
var encodeUtf8 = function(string) {
  var bytes = [];
  var i = 0;
  var j = 0;
  var wc;

  while (i < string.length) {
    wc = string.charCodeAt(i++);
    if (wc >= 0xD800 && wc <= 0xDBFF && i < string.length && string.charCodeAt(i) >= 0xDC00 && string.charCodeAt(i) <= 0xDFFF) {
      /* decode UTF-16 */
      wc = 0x10000 + ((wc & 0x3FF) << 10) + (string.charCodeAt(i++) & 0x3FF);
    }

    /* emit lead byte */
    if (wc < 0x80) {
      bytes[j++] = wc;
      count = 0;
    } else if (wc < 0x800) {
      bytes[j++] = 0xC0 | (wc >> 6);
      count = 1;
    } else if (wc < 0x10000) {
      bytes[j++] = 0xE0 | (wc >> 12);
      count = 2;
    } else {
      /* SMP: 21-bit Unicode */
      bytes[j++] = 0xF0 | (wc >> 18);
      count = 3;
    }

    /* emit trail bytes, if any */
    while (count) {
      bytes[j++] = 0x80 | ((wc >> (6 * --count)) & 0x3F);
    }
  }

  return bytes;

};

Lexer.prototype.bytesToString = function(bytes) {
  if(typeof bytes.write == 'function') {
    // Node.js
    return bytes.toString('utf-8');
  }
  return decodeUtf8(bytes);
};

Lexer.prototype.stringToBytes = function(string) {
  return encodeUtf8(string);
};

Lexer.prototype.unindent = function(startcol, text) {
  startcol = startcol || 0;
  return text.replace(new RegExp('^[\t ]{0,' + startcol + '}', 'gm'), ''); 
};

Lexer.prototype.store_keyword_content = function(event, data, p, eof) {
  var end_point = (!this.next_keyword_start || (p == eof)) ? p : this.next_keyword_start;
  var content = this.unindent(this.start_col + 2, this.bytesToString(data.slice(this.content_start, end_point))).replace(/\s+$/,"");
  var content_lines = content.split("\n")
  var name = content_lines.shift() || "";
  name = name.trim();
  var description = content_lines.join("\n");
  this.listener[event](this.keyword, name, description, this.current_line);
  var nks = this.next_keyword_start;
  this.next_keyword_start = null;
  return nks ? nks - 1 : p;
};

Lexer.prototype.current_line_content = function(data, p) {
  var rest = Array.prototype.slice.call(data,this.last_newline, -1);
  var end = rest.indexOf(10) || -1;
  return this.bytesToString(rest.slice(0, end)).trim();
};

// Node.js export
if(typeof module !== 'undefined') {
  module.exports = Lexer;
}
// Require.js export
if (typeof define !== 'undefined') {
  if(define.amd) {
    define('gherkin/lexer/es', [], function() {
      return Lexer;
    });
  } else {
    define('gherkin/lexer/es', function(require, exports, module) {
      exports.Lexer = Lexer;
    });
  }
}

})();

}).call(this,require("buffer").Buffer)

},{"buffer":69}],203:[function(require,module,exports){
(function (Buffer){

/* line 1 "ragel/i18n/et.js.rl" */
;(function() {


/* line 126 "ragel/i18n/et.js.rl" */



/* line 11 "js/lib/gherkin/lexer/et.js" */
var _lexer_actions = [
	0, 1, 0, 1, 1, 1, 2, 1, 
	3, 1, 4, 1, 5, 1, 6, 1, 
	7, 1, 8, 1, 9, 1, 10, 1, 
	11, 1, 12, 1, 13, 1, 16, 1, 
	17, 1, 18, 1, 19, 1, 20, 1, 
	21, 1, 22, 1, 23, 2, 2, 18, 
	2, 3, 4, 2, 13, 0, 2, 14, 
	15, 2, 17, 0, 2, 17, 1, 2, 
	17, 16, 2, 17, 19, 2, 18, 6, 
	2, 18, 7, 2, 18, 8, 2, 18, 
	9, 2, 18, 10, 2, 18, 16, 2, 
	20, 21, 2, 22, 0, 2, 22, 1, 
	2, 22, 16, 2, 22, 19, 3, 4, 
	14, 15, 3, 5, 14, 15, 3, 11, 
	14, 15, 3, 12, 14, 15, 3, 13, 
	14, 15, 3, 14, 15, 18, 3, 17, 
	0, 11, 3, 17, 14, 15, 4, 2, 
	14, 15, 18, 4, 3, 4, 14, 15, 
	4, 17, 0, 14, 15, 5, 17, 0, 
	11, 14, 15
];

var _lexer_key_offsets = [
	0, 0, 18, 35, 36, 37, 39, 41, 
	46, 51, 56, 61, 65, 69, 71, 72, 
	73, 74, 75, 76, 77, 78, 79, 80, 
	81, 82, 83, 84, 85, 86, 87, 89, 
	91, 96, 103, 108, 109, 110, 111, 112, 
	113, 114, 115, 117, 118, 119, 120, 121, 
	122, 123, 124, 125, 126, 133, 135, 137, 
	139, 141, 143, 145, 162, 163, 164, 166, 
	167, 168, 169, 170, 171, 172, 173, 174, 
	186, 188, 190, 192, 194, 196, 198, 200, 
	202, 204, 206, 208, 210, 212, 214, 216, 
	218, 220, 222, 224, 226, 228, 230, 232, 
	234, 236, 238, 240, 242, 244, 246, 248, 
	250, 252, 254, 256, 258, 260, 262, 264, 
	266, 268, 270, 272, 274, 276, 277, 278, 
	279, 280, 281, 282, 283, 284, 285, 286, 
	287, 288, 289, 290, 291, 292, 293, 306, 
	308, 310, 312, 314, 316, 318, 320, 322, 
	324, 326, 328, 330, 332, 334, 336, 338, 
	340, 342, 344, 346, 348, 350, 352, 354, 
	356, 359, 361, 363, 365, 367, 369, 371, 
	374, 376, 378, 380, 382, 384, 386, 388, 
	390, 392, 394, 396, 397, 398, 399, 400, 
	401, 402, 403, 404, 405, 406, 407, 408, 
	409, 424, 426, 428, 430, 432, 434, 436, 
	438, 440, 442, 444, 446, 448, 450, 452, 
	454, 456, 458, 460, 462, 464, 466, 468, 
	470, 472, 474, 477, 479, 481, 483, 485, 
	487, 489, 491, 493, 495, 497, 499, 501, 
	503, 505, 507, 509, 511, 513, 515, 517, 
	520, 522, 524, 526, 528, 530, 531, 532, 
	533, 534, 535, 536, 537, 551, 553, 555, 
	557, 559, 561, 563, 565, 567, 569, 571, 
	573, 575, 577, 579, 581, 583, 585, 587, 
	589, 591, 593, 595, 597, 599, 601, 604, 
	606, 608, 610, 612, 614, 616, 618, 620, 
	622, 624, 626, 628, 630, 632, 634, 636, 
	638, 640, 642, 644, 647, 649, 653, 659, 
	662, 664, 670, 687, 688, 689
];

var _lexer_trans_keys = [
	10, 32, 34, 35, 37, 42, 64, 69, 
	74, 75, 79, 82, 83, 84, 124, 239, 
	9, 13, 10, 32, 34, 35, 37, 42, 
	64, 69, 74, 75, 79, 82, 83, 84, 
	124, 9, 13, 34, 34, 10, 13, 10, 
	13, 10, 32, 34, 9, 13, 10, 32, 
	34, 9, 13, 10, 32, 34, 9, 13, 
	10, 32, 34, 9, 13, 10, 32, 9, 
	13, 10, 32, 9, 13, 10, 13, 10, 
	95, 70, 69, 65, 84, 85, 82, 69, 
	95, 69, 78, 68, 95, 37, 32, 10, 
	13, 10, 13, 13, 32, 64, 9, 10, 
	9, 10, 13, 32, 64, 11, 12, 10, 
	32, 64, 9, 13, 101, 108, 100, 97, 
	100, 101, 115, 97, 117, 104, 116, 117, 
	109, 105, 100, 58, 10, 10, 10, 32, 
	35, 79, 124, 9, 13, 10, 109, 10, 
	97, 10, 100, 10, 117, 10, 115, 10, 
	58, 10, 32, 34, 35, 37, 42, 64, 
	69, 74, 75, 79, 82, 83, 84, 124, 
	9, 13, 117, 105, 32, 100, 109, 97, 
	100, 117, 115, 58, 10, 10, 10, 32, 
	35, 37, 64, 74, 79, 82, 83, 84, 
	9, 13, 10, 95, 10, 70, 10, 69, 
	10, 65, 10, 84, 10, 85, 10, 82, 
	10, 69, 10, 95, 10, 69, 10, 78, 
	10, 68, 10, 95, 10, 37, 10, 117, 
	10, 104, 10, 116, 10, 117, 10, 109, 
	10, 105, 10, 100, 10, 58, 10, 109, 
	10, 97, 10, 100, 10, 117, 10, 115, 
	10, 97, 10, 97, 10, 109, 10, 115, 
	10, 116, 10, 115, 10, 101, 10, 110, 
	10, 97, 10, 97, 10, 114, 10, 105, 
	10, 117, 10, 109, 10, 97, 10, 117, 
	10, 115, 10, 116, 97, 97, 109, 115, 
	116, 115, 101, 110, 97, 97, 114, 105, 
	117, 109, 58, 10, 10, 10, 32, 35, 
	37, 42, 64, 69, 74, 75, 79, 83, 
	9, 13, 10, 95, 10, 70, 10, 69, 
	10, 65, 10, 84, 10, 85, 10, 82, 
	10, 69, 10, 95, 10, 69, 10, 78, 
	10, 68, 10, 95, 10, 37, 10, 32, 
	10, 101, 10, 108, 10, 100, 10, 97, 
	10, 100, 10, 101, 10, 115, 10, 97, 
	10, 117, 10, 105, 10, 32, 100, 10, 
	109, 10, 97, 10, 100, 10, 117, 10, 
	115, 10, 58, 10, 105, 116, 10, 105, 
	10, 115, 10, 101, 10, 110, 10, 97, 
	10, 97, 10, 114, 10, 105, 10, 117, 
	10, 109, 105, 116, 105, 115, 101, 110, 
	97, 97, 114, 105, 117, 109, 58, 10, 
	10, 10, 32, 35, 37, 42, 64, 69, 
	74, 75, 79, 82, 83, 84, 9, 13, 
	10, 95, 10, 70, 10, 69, 10, 65, 
	10, 84, 10, 85, 10, 82, 10, 69, 
	10, 95, 10, 69, 10, 78, 10, 68, 
	10, 95, 10, 37, 10, 32, 10, 101, 
	10, 108, 10, 100, 10, 97, 10, 100, 
	10, 101, 10, 115, 10, 97, 10, 117, 
	10, 105, 10, 32, 100, 10, 109, 10, 
	97, 10, 100, 10, 117, 10, 115, 10, 
	58, 10, 97, 10, 97, 10, 109, 10, 
	115, 10, 116, 10, 115, 10, 101, 10, 
	110, 10, 97, 10, 97, 10, 114, 10, 
	105, 10, 117, 10, 109, 10, 105, 116, 
	10, 105, 10, 97, 10, 117, 10, 115, 
	10, 116, 97, 117, 115, 116, 58, 10, 
	10, 10, 32, 35, 37, 42, 64, 69, 
	74, 75, 79, 82, 83, 9, 13, 10, 
	95, 10, 70, 10, 69, 10, 65, 10, 
	84, 10, 85, 10, 82, 10, 69, 10, 
	95, 10, 69, 10, 78, 10, 68, 10, 
	95, 10, 37, 10, 32, 10, 101, 10, 
	108, 10, 100, 10, 97, 10, 100, 10, 
	101, 10, 115, 10, 97, 10, 117, 10, 
	105, 10, 32, 100, 10, 109, 10, 97, 
	10, 100, 10, 117, 10, 115, 10, 58, 
	10, 97, 10, 97, 10, 109, 10, 115, 
	10, 116, 10, 115, 10, 101, 10, 110, 
	10, 97, 10, 97, 10, 114, 10, 105, 
	10, 117, 10, 109, 10, 105, 116, 10, 
	105, 32, 124, 9, 13, 10, 32, 92, 
	124, 9, 13, 10, 92, 124, 10, 92, 
	10, 32, 92, 124, 9, 13, 10, 32, 
	34, 35, 37, 42, 64, 69, 74, 75, 
	79, 82, 83, 84, 124, 9, 13, 187, 
	191, 0
];

var _lexer_single_lengths = [
	0, 16, 15, 1, 1, 2, 2, 3, 
	3, 3, 3, 2, 2, 2, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 2, 2, 
	3, 5, 3, 1, 1, 1, 1, 1, 
	1, 1, 2, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 5, 2, 2, 2, 
	2, 2, 2, 15, 1, 1, 2, 1, 
	1, 1, 1, 1, 1, 1, 1, 10, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 11, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	3, 2, 2, 2, 2, 2, 2, 3, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	13, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 3, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 3, 
	2, 2, 2, 2, 2, 1, 1, 1, 
	1, 1, 1, 1, 12, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 3, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 3, 2, 2, 4, 3, 
	2, 4, 15, 1, 1, 0
];

var _lexer_range_lengths = [
	0, 1, 1, 0, 0, 0, 0, 1, 
	1, 1, 1, 1, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 1, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 0, 0, 0, 
	0, 0, 0, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 1, 0, 
	0, 1, 1, 0, 0, 0
];

var _lexer_index_offsets = [
	0, 0, 18, 35, 37, 39, 42, 45, 
	50, 55, 60, 65, 69, 73, 76, 78, 
	80, 82, 84, 86, 88, 90, 92, 94, 
	96, 98, 100, 102, 104, 106, 108, 111, 
	114, 119, 126, 131, 133, 135, 137, 139, 
	141, 143, 145, 148, 150, 152, 154, 156, 
	158, 160, 162, 164, 166, 173, 176, 179, 
	182, 185, 188, 191, 208, 210, 212, 215, 
	217, 219, 221, 223, 225, 227, 229, 231, 
	243, 246, 249, 252, 255, 258, 261, 264, 
	267, 270, 273, 276, 279, 282, 285, 288, 
	291, 294, 297, 300, 303, 306, 309, 312, 
	315, 318, 321, 324, 327, 330, 333, 336, 
	339, 342, 345, 348, 351, 354, 357, 360, 
	363, 366, 369, 372, 375, 378, 380, 382, 
	384, 386, 388, 390, 392, 394, 396, 398, 
	400, 402, 404, 406, 408, 410, 412, 425, 
	428, 431, 434, 437, 440, 443, 446, 449, 
	452, 455, 458, 461, 464, 467, 470, 473, 
	476, 479, 482, 485, 488, 491, 494, 497, 
	500, 504, 507, 510, 513, 516, 519, 522, 
	526, 529, 532, 535, 538, 541, 544, 547, 
	550, 553, 556, 559, 561, 563, 565, 567, 
	569, 571, 573, 575, 577, 579, 581, 583, 
	585, 600, 603, 606, 609, 612, 615, 618, 
	621, 624, 627, 630, 633, 636, 639, 642, 
	645, 648, 651, 654, 657, 660, 663, 666, 
	669, 672, 675, 679, 682, 685, 688, 691, 
	694, 697, 700, 703, 706, 709, 712, 715, 
	718, 721, 724, 727, 730, 733, 736, 739, 
	743, 746, 749, 752, 755, 758, 760, 762, 
	764, 766, 768, 770, 772, 786, 789, 792, 
	795, 798, 801, 804, 807, 810, 813, 816, 
	819, 822, 825, 828, 831, 834, 837, 840, 
	843, 846, 849, 852, 855, 858, 861, 865, 
	868, 871, 874, 877, 880, 883, 886, 889, 
	892, 895, 898, 901, 904, 907, 910, 913, 
	916, 919, 922, 925, 929, 932, 936, 942, 
	946, 949, 955, 972, 974, 976
];

var _lexer_indicies = [
	2, 1, 3, 4, 5, 6, 7, 8, 
	9, 10, 11, 12, 13, 14, 15, 16, 
	1, 0, 2, 1, 3, 4, 5, 6, 
	7, 8, 9, 10, 11, 12, 13, 14, 
	15, 1, 0, 17, 0, 18, 0, 20, 
	21, 19, 23, 24, 22, 27, 26, 28, 
	26, 25, 31, 30, 32, 30, 29, 31, 
	30, 33, 30, 29, 31, 30, 34, 30, 
	29, 36, 35, 35, 0, 2, 37, 37, 
	0, 39, 40, 38, 2, 0, 41, 0, 
	42, 0, 43, 0, 44, 0, 45, 0, 
	46, 0, 47, 0, 48, 0, 49, 0, 
	50, 0, 51, 0, 52, 0, 53, 0, 
	54, 0, 55, 0, 57, 58, 56, 60, 
	61, 59, 0, 0, 0, 0, 62, 63, 
	64, 63, 63, 66, 65, 62, 2, 67, 
	7, 67, 0, 68, 0, 69, 0, 70, 
	0, 71, 0, 72, 0, 73, 0, 74, 
	0, 74, 75, 0, 76, 0, 77, 0, 
	78, 0, 79, 0, 80, 0, 81, 0, 
	82, 0, 84, 83, 86, 85, 86, 87, 
	88, 89, 88, 87, 85, 86, 90, 85, 
	86, 91, 85, 86, 92, 85, 86, 93, 
	85, 86, 94, 85, 86, 95, 85, 97, 
	96, 98, 99, 100, 101, 102, 103, 104, 
	105, 106, 107, 108, 109, 110, 96, 0, 
	111, 0, 112, 0, 55, 74, 0, 113, 
	0, 114, 0, 115, 0, 116, 0, 117, 
	0, 118, 0, 120, 119, 122, 121, 122, 
	123, 124, 125, 124, 126, 127, 128, 129, 
	130, 123, 121, 122, 131, 121, 122, 132, 
	121, 122, 133, 121, 122, 134, 121, 122, 
	135, 121, 122, 136, 121, 122, 137, 121, 
	122, 138, 121, 122, 139, 121, 122, 140, 
	121, 122, 141, 121, 122, 142, 121, 122, 
	143, 121, 122, 144, 121, 122, 145, 121, 
	122, 146, 121, 122, 147, 121, 122, 148, 
	121, 122, 149, 121, 122, 150, 121, 122, 
	151, 121, 122, 152, 121, 122, 153, 121, 
	122, 154, 121, 122, 155, 121, 122, 156, 
	121, 122, 151, 121, 122, 157, 121, 122, 
	158, 121, 122, 159, 121, 122, 160, 121, 
	122, 161, 121, 122, 162, 121, 122, 163, 
	121, 122, 164, 121, 122, 165, 121, 122, 
	166, 121, 122, 167, 121, 122, 168, 121, 
	122, 169, 121, 122, 151, 121, 122, 170, 
	121, 122, 171, 121, 122, 172, 121, 122, 
	151, 121, 173, 0, 174, 0, 175, 0, 
	176, 0, 177, 0, 178, 0, 179, 0, 
	180, 0, 181, 0, 182, 0, 183, 0, 
	184, 0, 185, 0, 186, 0, 187, 0, 
	189, 188, 191, 190, 191, 192, 193, 194, 
	195, 193, 196, 197, 198, 199, 200, 192, 
	190, 191, 201, 190, 191, 202, 190, 191, 
	203, 190, 191, 204, 190, 191, 205, 190, 
	191, 206, 190, 191, 207, 190, 191, 208, 
	190, 191, 209, 190, 191, 210, 190, 191, 
	211, 190, 191, 212, 190, 191, 213, 190, 
	191, 214, 190, 191, 215, 190, 191, 216, 
	190, 191, 217, 190, 191, 218, 190, 191, 
	219, 190, 191, 220, 190, 191, 221, 190, 
	191, 222, 190, 191, 222, 190, 191, 223, 
	190, 191, 224, 190, 191, 215, 222, 190, 
	191, 225, 190, 191, 226, 190, 191, 227, 
	190, 191, 228, 190, 191, 229, 190, 191, 
	215, 190, 191, 230, 231, 190, 191, 221, 
	190, 191, 232, 190, 191, 233, 190, 191, 
	234, 190, 191, 235, 190, 191, 236, 190, 
	191, 237, 190, 191, 238, 190, 191, 239, 
	190, 191, 229, 190, 240, 241, 0, 73, 
	0, 242, 0, 243, 0, 244, 0, 245, 
	0, 246, 0, 247, 0, 248, 0, 249, 
	0, 250, 0, 251, 0, 253, 252, 255, 
	254, 255, 256, 257, 258, 259, 257, 260, 
	261, 262, 263, 264, 265, 266, 256, 254, 
	255, 267, 254, 255, 268, 254, 255, 269, 
	254, 255, 270, 254, 255, 271, 254, 255, 
	272, 254, 255, 273, 254, 255, 274, 254, 
	255, 275, 254, 255, 276, 254, 255, 277, 
	254, 255, 278, 254, 255, 279, 254, 255, 
	280, 254, 255, 281, 254, 255, 282, 254, 
	255, 283, 254, 255, 284, 254, 255, 285, 
	254, 255, 286, 254, 255, 287, 254, 255, 
	288, 254, 255, 288, 254, 255, 289, 254, 
	255, 290, 254, 255, 281, 288, 254, 255, 
	291, 254, 255, 292, 254, 255, 293, 254, 
	255, 294, 254, 255, 295, 254, 255, 281, 
	254, 255, 296, 254, 255, 297, 254, 255, 
	298, 254, 255, 299, 254, 255, 300, 254, 
	255, 301, 254, 255, 302, 254, 255, 303, 
	254, 255, 304, 254, 255, 305, 254, 255, 
	306, 254, 255, 307, 254, 255, 308, 254, 
	255, 295, 254, 255, 309, 300, 254, 255, 
	287, 254, 255, 310, 254, 255, 311, 254, 
	255, 312, 254, 255, 295, 254, 313, 0, 
	314, 0, 315, 0, 316, 0, 317, 0, 
	319, 318, 321, 320, 321, 322, 323, 324, 
	325, 323, 326, 327, 328, 329, 330, 331, 
	322, 320, 321, 332, 320, 321, 333, 320, 
	321, 334, 320, 321, 335, 320, 321, 336, 
	320, 321, 337, 320, 321, 338, 320, 321, 
	339, 320, 321, 340, 320, 321, 341, 320, 
	321, 342, 320, 321, 343, 320, 321, 344, 
	320, 321, 345, 320, 321, 346, 320, 321, 
	347, 320, 321, 348, 320, 321, 349, 320, 
	321, 350, 320, 321, 351, 320, 321, 352, 
	320, 321, 353, 320, 321, 353, 320, 321, 
	354, 320, 321, 355, 320, 321, 346, 353, 
	320, 321, 356, 320, 321, 357, 320, 321, 
	358, 320, 321, 359, 320, 321, 360, 320, 
	321, 346, 320, 321, 361, 320, 321, 362, 
	320, 321, 363, 320, 321, 364, 320, 321, 
	365, 320, 321, 366, 320, 321, 367, 320, 
	321, 368, 320, 321, 369, 320, 321, 370, 
	320, 321, 371, 320, 321, 372, 320, 321, 
	373, 320, 321, 360, 320, 321, 374, 365, 
	320, 321, 352, 320, 375, 376, 375, 0, 
	379, 378, 380, 381, 378, 377, 0, 383, 
	384, 382, 0, 383, 382, 379, 385, 383, 
	384, 385, 382, 379, 386, 387, 388, 389, 
	390, 391, 392, 393, 394, 395, 396, 397, 
	398, 399, 386, 0, 400, 0, 1, 0, 
	401, 0
];

var _lexer_trans_targs = [
	0, 2, 2, 3, 13, 15, 29, 32, 
	35, 42, 60, 63, 117, 178, 245, 301, 
	307, 4, 5, 6, 7, 6, 6, 7, 
	6, 8, 8, 8, 9, 8, 8, 8, 
	9, 10, 11, 12, 2, 12, 13, 2, 
	14, 16, 17, 18, 19, 20, 21, 22, 
	23, 24, 25, 26, 27, 28, 309, 30, 
	31, 2, 14, 31, 2, 14, 33, 34, 
	2, 33, 32, 34, 36, 37, 38, 39, 
	40, 41, 29, 43, 44, 45, 46, 47, 
	48, 49, 50, 51, 52, 51, 52, 52, 
	2, 53, 54, 55, 56, 57, 58, 59, 
	2, 2, 3, 13, 15, 29, 32, 35, 
	42, 60, 63, 117, 178, 245, 301, 61, 
	62, 64, 65, 66, 67, 68, 69, 70, 
	71, 70, 71, 71, 2, 72, 86, 94, 
	99, 103, 113, 73, 74, 75, 76, 77, 
	78, 79, 80, 81, 82, 83, 84, 85, 
	2, 87, 88, 89, 90, 91, 92, 93, 
	59, 95, 96, 97, 98, 100, 101, 102, 
	103, 104, 105, 106, 107, 108, 109, 110, 
	111, 112, 114, 115, 116, 118, 119, 120, 
	121, 122, 123, 124, 125, 126, 127, 128, 
	129, 130, 131, 132, 133, 134, 133, 134, 
	134, 2, 135, 149, 150, 157, 158, 161, 
	167, 136, 137, 138, 139, 140, 141, 142, 
	143, 144, 145, 146, 147, 148, 2, 59, 
	151, 152, 153, 154, 155, 156, 149, 159, 
	160, 162, 163, 164, 165, 166, 168, 169, 
	170, 171, 172, 173, 174, 175, 176, 177, 
	179, 180, 181, 182, 183, 184, 185, 186, 
	187, 188, 189, 190, 191, 192, 191, 192, 
	192, 2, 193, 207, 208, 215, 216, 219, 
	225, 239, 241, 194, 195, 196, 197, 198, 
	199, 200, 201, 202, 203, 204, 205, 206, 
	2, 59, 209, 210, 211, 212, 213, 214, 
	207, 217, 218, 220, 221, 222, 223, 224, 
	226, 227, 228, 229, 230, 231, 232, 233, 
	234, 235, 236, 237, 238, 240, 242, 243, 
	244, 246, 247, 248, 249, 250, 251, 252, 
	251, 252, 252, 2, 253, 267, 268, 275, 
	276, 279, 285, 299, 254, 255, 256, 257, 
	258, 259, 260, 261, 262, 263, 264, 265, 
	266, 2, 59, 269, 270, 271, 272, 273, 
	274, 267, 277, 278, 280, 281, 282, 283, 
	284, 286, 287, 288, 289, 290, 291, 292, 
	293, 294, 295, 296, 297, 298, 300, 301, 
	302, 303, 305, 306, 304, 302, 303, 304, 
	302, 305, 306, 3, 13, 15, 29, 32, 
	35, 42, 60, 63, 117, 178, 245, 301, 
	308, 0
];

var _lexer_trans_actions = [
	43, 0, 54, 3, 1, 0, 29, 1, 
	29, 29, 29, 29, 29, 29, 29, 35, 
	0, 0, 0, 7, 139, 48, 0, 102, 
	9, 5, 45, 134, 45, 0, 33, 122, 
	33, 33, 0, 11, 106, 0, 0, 114, 
	25, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	57, 149, 126, 0, 110, 23, 0, 27, 
	118, 27, 51, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 57, 144, 0, 54, 0, 
	81, 84, 0, 0, 0, 0, 0, 21, 
	31, 130, 60, 57, 31, 63, 57, 63, 
	63, 63, 63, 63, 63, 63, 66, 0, 
	0, 0, 0, 0, 0, 0, 0, 57, 
	144, 0, 54, 0, 69, 33, 84, 84, 
	84, 84, 84, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	13, 0, 0, 0, 0, 0, 0, 0, 
	13, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 57, 144, 0, 54, 
	0, 78, 33, 84, 84, 84, 84, 84, 
	84, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 19, 19, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 57, 144, 0, 54, 
	0, 75, 33, 84, 84, 84, 84, 84, 
	84, 84, 84, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	17, 17, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 57, 144, 
	0, 54, 0, 72, 33, 84, 84, 84, 
	84, 84, 84, 84, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 15, 15, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 37, 37, 54, 37, 87, 0, 0, 
	39, 0, 0, 93, 90, 41, 96, 90, 
	96, 96, 96, 96, 96, 96, 96, 99, 
	0, 0
];

var _lexer_eof_actions = [
	0, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43
];

var lexer_start = 1;
var lexer_first_final = 309;
var lexer_error = 0;

var lexer_en_main = 1;


/* line 129 "ragel/i18n/et.js.rl" */

/* line 130 "ragel/i18n/et.js.rl" */

/* line 131 "ragel/i18n/et.js.rl" */

/* line 132 "ragel/i18n/et.js.rl" */

var Lexer = function(listener) {
  // Check that listener has the required functions
  var events = ['comment', 'tag', 'feature', 'background', 'scenario', 'scenario_outline', 'examples', 'step', 'doc_string', 'row', 'eof'];
  for(var i=0, len=events.length; i<len; i++) {
    var event = events[i];
    if(typeof listener[event] != 'function') {
      throw new Error("Error. No " + event + " function exists on " + JSON.stringify(listener));
    }
  }
  this.listener = listener;
};

Lexer.prototype.scan = function(data) {
  var ending = "\n%_FEATURE_END_%";
  if(typeof data == 'string') {
    data = this.stringToBytes(data + ending);
  } else if(typeof Buffer != 'undefined' && Buffer.isBuffer(data)) {
    // Node.js
    var buf = new Buffer(data.length + ending.length);
    data.copy(buf, 0, 0);
    new Buffer(ending).copy(buf, data.length, 0);
    data = buf;
  }
  var eof = pe = data.length;
  var p = 0;

  this.line_number = 1;
  this.last_newline = 0;
  var signedCharValue=function(v){return v > 127 ? v-256 : v; };

  
/* line 615 "js/lib/gherkin/lexer/et.js" */
{
	  this.cs = lexer_start;
} /* JSCodeGen::writeInit */

/* line 164 "ragel/i18n/et.js.rl" */
  
/* line 622 "js/lib/gherkin/lexer/et.js" */
{
	var _klen, _trans, _keys, _ps, _widec, _acts, _nacts;
	var _goto_level, _resume, _eof_trans, _again, _test_eof;
	var _out;
	_klen = _trans = _keys = _acts = _nacts = null;
	_goto_level = 0;
	_resume = 10;
	_eof_trans = 15;
	_again = 20;
	_test_eof = 30;
	_out = 40;
	while (true) {
	_trigger_goto = false;
	if (_goto_level <= 0) {
	if (p == pe) {
		_goto_level = _test_eof;
		continue;
	}
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	}
	if (_goto_level <= _resume) {
	_keys = _lexer_key_offsets[ this.cs];
	_trans = _lexer_index_offsets[ this.cs];
	_klen = _lexer_single_lengths[ this.cs];
	_break_match = false;
	
	do {
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + _klen - 1;

	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + ( (_upper - _lower) >> 1 );

	        if (( signedCharValue(data[p])) < _lexer_trans_keys[_mid]) {
	           _upper = _mid - 1;
	        } else if (( signedCharValue(data[p])) > _lexer_trans_keys[_mid]) {
	           _lower = _mid + 1;
	        } else {
	           _trans += (_mid - _keys);
	           _break_match = true;
	           break;
	        };
	     } /* while */
	     if (_break_match) { break; }
	     _keys += _klen;
	     _trans += _klen;
	  }
	  _klen = _lexer_range_lengths[ this.cs];
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + (_klen << 1) - 2;
	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + (((_upper-_lower) >> 1) & ~1);
	        if (( signedCharValue(data[p])) < _lexer_trans_keys[_mid]) {
	          _upper = _mid - 2;
	         } else if (( signedCharValue(data[p])) > _lexer_trans_keys[_mid+1]) {
	          _lower = _mid + 2;
	        } else {
	          _trans += ((_mid - _keys) >> 1);
	          _break_match = true;
	          break;
	        }
	     } /* while */
	     if (_break_match) { break; }
	     _trans += _klen
	  }
	} while (false);
	_trans = _lexer_indicies[_trans];
	 this.cs = _lexer_trans_targs[_trans];
	if (_lexer_trans_actions[_trans] != 0) {
		_acts = _lexer_trans_actions[_trans];
		_nacts = _lexer_actions[_acts];
		_acts += 1;
		while (_nacts > 0) {
			_nacts -= 1;
			_acts += 1;
			switch (_lexer_actions[_acts - 1]) {
case 0:
/* line 6 "ragel/i18n/et.js.rl" */

    this.content_start = p;
    this.current_line = this.line_number;
    this.start_col = p - this.last_newline - (this.keyword+':').length;
  		break;
case 1:
/* line 12 "ragel/i18n/et.js.rl" */

    this.current_line = this.line_number;
    this.start_col = p - this.last_newline;
  		break;
case 2:
/* line 17 "ragel/i18n/et.js.rl" */

    this.content_start = p;
  		break;
case 3:
/* line 21 "ragel/i18n/et.js.rl" */

    this.docstring_content_type_start = p;
  		break;
case 4:
/* line 25 "ragel/i18n/et.js.rl" */

    this.docstring_content_type_end = p;
  		break;
case 5:
/* line 29 "ragel/i18n/et.js.rl" */

    var con = this.unindent(
      this.start_col, 
      this.bytesToString(data.slice(this.content_start, this.next_keyword_start-1)).replace(/(\r?\n)?([\t ])*$/, '').replace(/\\\"\\\"\\\"/mg, '"""')
    );
    var con_type = this.bytesToString(data.slice(this.docstring_content_type_start, this.docstring_content_type_end)).trim();
    this.listener.doc_string(con_type, con, this.current_line); 
  		break;
case 6:
/* line 38 "ragel/i18n/et.js.rl" */

    p = this.store_keyword_content('feature', data, p, eof);
  		break;
case 7:
/* line 42 "ragel/i18n/et.js.rl" */

    p = this.store_keyword_content('background', data, p, eof);
  		break;
case 8:
/* line 46 "ragel/i18n/et.js.rl" */

    p = this.store_keyword_content('scenario', data, p, eof);
  		break;
case 9:
/* line 50 "ragel/i18n/et.js.rl" */

    p = this.store_keyword_content('scenario_outline', data, p, eof);
  		break;
case 10:
/* line 54 "ragel/i18n/et.js.rl" */

    p = this.store_keyword_content('examples', data, p, eof);
  		break;
case 11:
/* line 58 "ragel/i18n/et.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.step(this.keyword, con, this.current_line);
  		break;
case 12:
/* line 63 "ragel/i18n/et.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.comment(con, this.line_number);
    this.keyword_start = null;
  		break;
case 13:
/* line 69 "ragel/i18n/et.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.tag(con, this.line_number);
    this.keyword_start = null;
  		break;
case 14:
/* line 75 "ragel/i18n/et.js.rl" */

    this.line_number++;
  		break;
case 15:
/* line 79 "ragel/i18n/et.js.rl" */

    this.last_newline = p + 1;
  		break;
case 16:
/* line 83 "ragel/i18n/et.js.rl" */

    this.keyword_start = this.keyword_start || p;
  		break;
case 17:
/* line 87 "ragel/i18n/et.js.rl" */

    this.keyword = this.bytesToString(data.slice(this.keyword_start, p)).replace(/:$/, '');
    this.keyword_start = null;
  		break;
case 18:
/* line 92 "ragel/i18n/et.js.rl" */

    this.next_keyword_start = p;
  		break;
case 19:
/* line 96 "ragel/i18n/et.js.rl" */

    p = p - 1;
    current_row = [];
    this.current_line = this.line_number;
  		break;
case 20:
/* line 102 "ragel/i18n/et.js.rl" */

    this.content_start = p;
  		break;
case 21:
/* line 106 "ragel/i18n/et.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    current_row.push(con.replace(/\\\|/, "|").replace(/\\n/, "\n").replace(/\\\\/, "\\"));
  		break;
case 22:
/* line 111 "ragel/i18n/et.js.rl" */

    this.listener.row(current_row, this.current_line);
  		break;
case 23:
/* line 115 "ragel/i18n/et.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw new Error("Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.");
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 849 "js/lib/gherkin/lexer/et.js" */
			} /* action switch */
		}
	}
	if (_trigger_goto) {
		continue;
	}
	}
	if (_goto_level <= _again) {
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	p += 1;
	if (p != pe) {
		_goto_level = _resume;
		continue;
	}
	}
	if (_goto_level <= _test_eof) {
	if (p == eof) {
	__acts = _lexer_eof_actions[ this.cs];
	__nacts =  _lexer_actions[__acts];
	__acts += 1;
	while (__nacts > 0) {
		__nacts -= 1;
		__acts += 1;
		switch (_lexer_actions[__acts - 1]) {
case 23:
/* line 115 "ragel/i18n/et.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw new Error("Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.");
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 888 "js/lib/gherkin/lexer/et.js" */
		} /* eof action switch */
	}
	if (_trigger_goto) {
		continue;
	}
}
	}
	if (_goto_level <= _out) {
		break;
	}
	}
	}

/* line 165 "ragel/i18n/et.js.rl" */
};


/*
 * Decode utf-8 byte sequence to string.
 */
var decodeUtf8 = function(bytes) {
  var result = "";
  var i = 0;
  var wc;
  var c;

  while (i < bytes.length) {
    /* parse as UTF-8 lead byte */
    wc = bytes[i++];
    if (wc < 0x80) {
      count = 0;
    } else if (wc < 0xC2 || wc >= 0xF8) {
      throw new Error("input is not a valid UTF-8 lead octet");
    } else if (wc < 0xE0) {
      count = 1;
      wc = (wc & 0x1F) << 6;
    } else if (wc < 0xF0) {
      count = 2;
      wc = (wc & 0x0F) << 12;
    } else /* wc < 0xF8 */ {
      count = 3;
      wc = (wc & 0x07) << 18;
    }

    /* parse trail bytes, if any */
    while (count) {
      if (!(i < bytes.length)) {
        throw new Error("short read");
      }
      if ((c = bytes[i++] ^ 0x80) > 0x3F) {
        throw new Error("input is not a valid UTF-8 trail octet");
      }
      wc |= c << (6 * --count);
      if (wc < (1 << (5 * count + 6))) {
        throw new Error("invalid non-minimal encoded input");
      }
    }

    /* handle conversion to UTF-16 if needed */
    if (wc > 0xFFFF) {
      wc -= 0x10000;
      result += String.fromCharCode(0xD800 + (wc >> 10));
      wc = 0xDC00 + (wc & 0x3FF);
    }
    result += String.fromCharCode(wc);
  }

  return result;
};

/*
 * Encode string to an array of bytes using utf8 encoding.
 *
 * Javascript internally stores character data as utf16 (like java).
 * String.charCodeAt() does *not* produce unicode points, but simply
 * reflects this internal representation. Thus, it is necessary
 * to first decode the utf-16 representation before encoding to
 * utf-8.
 */
var encodeUtf8 = function(string) {
  var bytes = [];
  var i = 0;
  var j = 0;
  var wc;

  while (i < string.length) {
    wc = string.charCodeAt(i++);
    if (wc >= 0xD800 && wc <= 0xDBFF && i < string.length && string.charCodeAt(i) >= 0xDC00 && string.charCodeAt(i) <= 0xDFFF) {
      /* decode UTF-16 */
      wc = 0x10000 + ((wc & 0x3FF) << 10) + (string.charCodeAt(i++) & 0x3FF);
    }

    /* emit lead byte */
    if (wc < 0x80) {
      bytes[j++] = wc;
      count = 0;
    } else if (wc < 0x800) {
      bytes[j++] = 0xC0 | (wc >> 6);
      count = 1;
    } else if (wc < 0x10000) {
      bytes[j++] = 0xE0 | (wc >> 12);
      count = 2;
    } else {
      /* SMP: 21-bit Unicode */
      bytes[j++] = 0xF0 | (wc >> 18);
      count = 3;
    }

    /* emit trail bytes, if any */
    while (count) {
      bytes[j++] = 0x80 | ((wc >> (6 * --count)) & 0x3F);
    }
  }

  return bytes;

};

Lexer.prototype.bytesToString = function(bytes) {
  if(typeof bytes.write == 'function') {
    // Node.js
    return bytes.toString('utf-8');
  }
  return decodeUtf8(bytes);
};

Lexer.prototype.stringToBytes = function(string) {
  return encodeUtf8(string);
};

Lexer.prototype.unindent = function(startcol, text) {
  startcol = startcol || 0;
  return text.replace(new RegExp('^[\t ]{0,' + startcol + '}', 'gm'), ''); 
};

Lexer.prototype.store_keyword_content = function(event, data, p, eof) {
  var end_point = (!this.next_keyword_start || (p == eof)) ? p : this.next_keyword_start;
  var content = this.unindent(this.start_col + 2, this.bytesToString(data.slice(this.content_start, end_point))).replace(/\s+$/,"");
  var content_lines = content.split("\n")
  var name = content_lines.shift() || "";
  name = name.trim();
  var description = content_lines.join("\n");
  this.listener[event](this.keyword, name, description, this.current_line);
  var nks = this.next_keyword_start;
  this.next_keyword_start = null;
  return nks ? nks - 1 : p;
};

Lexer.prototype.current_line_content = function(data, p) {
  var rest = Array.prototype.slice.call(data,this.last_newline, -1);
  var end = rest.indexOf(10) || -1;
  return this.bytesToString(rest.slice(0, end)).trim();
};

// Node.js export
if(typeof module !== 'undefined') {
  module.exports = Lexer;
}
// Require.js export
if (typeof define !== 'undefined') {
  if(define.amd) {
    define('gherkin/lexer/et', [], function() {
      return Lexer;
    });
  } else {
    define('gherkin/lexer/et', function(require, exports, module) {
      exports.Lexer = Lexer;
    });
  }
}

})();

}).call(this,require("buffer").Buffer)

},{"buffer":69}],204:[function(require,module,exports){
(function (Buffer){

/* line 1 "ragel/i18n/fa.js.rl" */
;(function() {


/* line 126 "ragel/i18n/fa.js.rl" */



/* line 11 "js/lib/gherkin/lexer/fa.js" */
var _lexer_actions = [
	0, 1, 0, 1, 1, 1, 2, 1, 
	3, 1, 4, 1, 5, 1, 6, 1, 
	7, 1, 8, 1, 9, 1, 10, 1, 
	11, 1, 12, 1, 13, 1, 16, 1, 
	17, 1, 18, 1, 19, 1, 20, 1, 
	21, 1, 22, 1, 23, 2, 2, 18, 
	2, 3, 4, 2, 13, 0, 2, 14, 
	15, 2, 17, 0, 2, 17, 1, 2, 
	17, 16, 2, 17, 19, 2, 18, 6, 
	2, 18, 7, 2, 18, 8, 2, 18, 
	9, 2, 18, 10, 2, 18, 16, 2, 
	20, 21, 2, 22, 0, 2, 22, 1, 
	2, 22, 16, 2, 22, 19, 3, 4, 
	14, 15, 3, 5, 14, 15, 3, 11, 
	14, 15, 3, 12, 14, 15, 3, 13, 
	14, 15, 3, 14, 15, 18, 3, 17, 
	0, 11, 3, 17, 14, 15, 4, 2, 
	14, 15, 18, 4, 3, 4, 14, 15, 
	4, 17, 0, 14, 15, 5, 17, 0, 
	11, 14, 15
];

var _lexer_key_offsets = [
	0, 0, 13, 18, 19, 20, 21, 22, 
	23, 24, 25, 26, 27, 29, 31, 43, 
	46, 47, 48, 49, 50, 51, 52, 53, 
	54, 55, 56, 57, 58, 59, 60, 61, 
	62, 69, 71, 73, 75, 77, 79, 81, 
	83, 85, 87, 89, 91, 93, 105, 106, 
	107, 109, 111, 116, 121, 126, 131, 135, 
	139, 141, 142, 143, 144, 145, 146, 147, 
	148, 149, 150, 151, 152, 153, 154, 155, 
	156, 161, 168, 173, 177, 183, 186, 188, 
	194, 206, 207, 208, 209, 210, 211, 212, 
	213, 214, 215, 216, 218, 219, 220, 221, 
	222, 223, 224, 225, 226, 227, 228, 229, 
	230, 239, 243, 245, 247, 249, 251, 253, 
	255, 257, 259, 261, 263, 265, 267, 269, 
	271, 273, 275, 277, 279, 281, 283, 285, 
	287, 289, 291, 293, 295, 297, 299, 301, 
	303, 306, 308, 310, 312, 314, 316, 318, 
	320, 322, 324, 326, 328, 330, 332, 334, 
	336, 338, 340, 342, 344, 346, 348, 350, 
	352, 354, 356, 358, 360, 362, 364, 366, 
	368, 370, 372, 374, 376, 378, 380, 381, 
	383, 384, 385, 386, 387, 388, 389, 390, 
	391, 392, 393, 394, 395, 396, 397, 398, 
	399, 400, 401, 402, 403, 404, 405, 415, 
	420, 422, 424, 426, 428, 430, 432, 434, 
	436, 438, 440, 442, 444, 446, 448, 450, 
	452, 454, 456, 458, 460, 462, 464, 466, 
	468, 470, 472, 474, 476, 478, 480, 482, 
	484, 486, 489, 491, 493, 495, 497, 499, 
	501, 503, 505, 507, 509, 512, 514, 516, 
	518, 520, 522, 524, 526, 528, 530, 532, 
	534, 536, 538, 540, 542, 544, 546, 548, 
	550, 552, 554, 556, 558, 559, 560, 561, 
	562, 563, 564, 565, 566, 567, 568, 569, 
	570, 571, 572, 573, 574, 575, 576, 577, 
	578, 579, 580, 590, 595, 597, 599, 601, 
	603, 605, 607, 609, 611, 613, 615, 618, 
	620, 622, 624, 626, 628, 630, 632, 634, 
	636, 638, 640, 642, 644, 646, 648, 650, 
	652, 654, 656, 658, 660, 662, 664, 666, 
	668, 670, 672, 674, 676, 678, 680, 683, 
	685, 687, 689, 691, 693, 695, 697, 699, 
	701, 703, 706, 708, 710, 712, 714, 716, 
	718, 720, 722, 724, 726, 728, 730, 732, 
	734, 736, 738, 740, 742, 744, 746, 748, 
	750, 752, 753, 754, 755, 756, 757, 758, 
	759, 760, 761, 762, 763, 764, 765, 775, 
	781, 783, 785, 787, 789, 791, 793, 795, 
	797, 799, 801, 804, 806, 808, 810, 812, 
	814, 816, 818, 820, 822, 824, 826, 828, 
	830, 832, 834, 836, 838, 840, 842, 844, 
	846, 848, 850, 852, 854, 856, 858, 860, 
	862, 864, 866, 868, 870, 872, 874, 876, 
	878, 880, 882, 885, 887, 889, 891, 893, 
	895, 897, 899, 901, 903, 905, 908, 910, 
	912, 914, 916, 918, 920, 922, 924, 926, 
	928, 930, 932, 934, 936, 938, 940, 942, 
	944, 946, 948, 950, 952, 954, 955, 956
];

var _lexer_trans_keys = [
	-40, -39, 10, 32, 34, 35, 37, 42, 
	64, 124, 239, 9, 13, -94, -89, -88, 
	-78, -77, -39, -122, -38, -81, -40, -89, 
	-39, -121, 32, 10, 13, 10, 13, -40, 
	-39, 10, 32, 34, 35, 37, 42, 64, 
	124, 9, 13, -122, -121, -120, -39, -123, 
	-39, -120, -39, -122, -39, -121, 32, -39, 
	-121, -40, -89, 58, 10, 10, -39, 10, 
	32, 35, 124, 9, 13, -120, 10, -39, 
	10, -112, 10, -37, 10, -116, 10, -38, 
	10, -104, 10, -38, 10, -81, 10, -37, 
	10, -116, 10, 10, 58, -40, -39, 10, 
	32, 34, 35, 37, 42, 64, 124, 9, 
	13, 34, 34, 10, 13, 10, 13, 10, 
	32, 34, 9, 13, 10, 32, 34, 9, 
	13, 10, 32, 34, 9, 13, 10, 32, 
	34, 9, 13, 10, 32, 9, 13, 10, 
	32, 9, 13, 10, 13, 10, 95, 70, 
	69, 65, 84, 85, 82, 69, 95, 69, 
	78, 68, 95, 37, 13, 32, 64, 9, 
	10, 9, 10, 13, 32, 64, 11, 12, 
	10, 32, 64, 9, 13, 32, 124, 9, 
	13, 10, 32, 92, 124, 9, 13, 10, 
	92, 124, 10, 92, 10, 32, 92, 124, 
	9, 13, -40, -39, 10, 32, 34, 35, 
	37, 42, 64, 124, 9, 13, -39, -122, 
	-38, -81, -40, -89, -39, -123, -37, -116, 
	-39, 32, -112, -37, -116, -38, -104, -38, 
	-81, -37, -116, 58, 10, 10, -40, -39, 
	10, 32, 35, 37, 64, 9, 13, -89, 
	-78, -77, 10, -39, 10, -124, 10, -38, 
	10, -81, 10, -39, 10, -120, 10, -37, 
	10, -116, 10, 10, 32, -40, 10, -77, 
	10, -39, 10, -122, 10, -40, 10, -89, 
	10, -40, 10, -79, 10, -37, 10, -116, 
	10, -39, 10, -120, 10, 10, 58, -39, 
	10, -123, 10, -37, 10, -116, 10, -39, 
	10, -122, 10, -39, 10, -121, 10, -122, 
	-120, 10, -39, 10, -123, 10, -39, 10, 
	-120, 10, -39, 10, -122, 10, -39, 10, 
	-121, 10, 10, 32, -39, 10, -121, 10, 
	-40, 10, -89, 10, -39, 10, -112, 10, 
	-37, 10, -116, 10, -38, 10, -104, 10, 
	-38, 10, -81, 10, -37, 10, -116, 10, 
	10, 95, 10, 70, 10, 69, 10, 65, 
	10, 84, 10, 85, 10, 82, 10, 69, 
	10, 95, 10, 69, 10, 78, 10, 68, 
	10, 95, 10, 37, -39, -124, -123, -38, 
	-81, -39, -120, -37, -116, 32, -40, -77, 
	-39, -122, -40, -89, -40, -79, -37, -116, 
	-39, -120, 58, 10, 10, -40, -39, 10, 
	32, 35, 37, 42, 64, 9, 13, -94, 
	-89, -88, -77, 10, -39, 10, -122, 10, 
	-38, 10, -81, 10, -40, 10, -89, 10, 
	-39, 10, -121, 10, 10, 32, -39, 10, 
	-123, 10, -40, 10, -89, 10, -40, 10, 
	-89, 10, 10, 32, -39, 10, -127, 10, 
	-40, 10, -79, 10, -40, 10, -74, 10, 
	-39, 10, -122, 10, -40, 10, -89, 10, 
	-40, 10, -79, 10, -37, 10, -116, 10, 
	-39, 10, -120, 10, 10, 58, -121, -120, 
	10, -39, 10, -122, 10, -38, 10, -81, 
	10, -40, 10, -89, 10, -39, 10, -123, 
	10, -37, 10, -116, 10, -39, 10, 32, 
	-112, 10, -37, 10, -116, 10, -38, 10, 
	-104, 10, -38, 10, -81, 10, -37, 10, 
	-116, 10, 10, 95, 10, 70, 10, 69, 
	10, 65, 10, 84, 10, 85, 10, 82, 
	10, 69, 10, 95, 10, 69, 10, 78, 
	10, 68, 10, 95, 10, 37, -40, -89, 
	-40, -89, 32, -39, -127, -40, -79, -40, 
	-74, -39, -123, -37, -116, -39, -122, -39, 
	-121, 58, 10, 10, -40, -39, 10, 32, 
	35, 37, 42, 64, 9, 13, -94, -89, 
	-88, -77, 10, -39, 10, -122, 10, -38, 
	10, -81, 10, -40, 10, -89, 10, -39, 
	10, -121, 10, 10, 32, -39, 10, -124, 
	-123, 10, -38, 10, -81, 10, -39, 10, 
	-120, 10, -37, 10, -116, 10, 10, 32, 
	-40, 10, -77, 10, -39, 10, -122, 10, 
	-40, 10, -89, 10, -40, 10, -79, 10, 
	-37, 10, -116, 10, -39, 10, -120, 10, 
	10, 58, -40, 10, -89, 10, -40, 10, 
	-89, 10, 10, 32, -39, 10, -127, 10, 
	-40, 10, -79, 10, -40, 10, -74, 10, 
	-121, -120, 10, -39, 10, -122, 10, -38, 
	10, -81, 10, -40, 10, -89, 10, -39, 
	10, -123, 10, -37, 10, -116, 10, -39, 
	10, 32, -112, 10, -37, 10, -116, 10, 
	-38, 10, -104, 10, -38, 10, -81, 10, 
	-37, 10, -116, 10, 10, 95, 10, 70, 
	10, 69, 10, 65, 10, 84, 10, 85, 
	10, 82, 10, 69, 10, 95, 10, 69, 
	10, 78, 10, 68, 10, 95, 10, 37, 
	-39, -122, -40, -89, -40, -79, -37, -116, 
	-39, -120, 58, 10, 10, -40, -39, 10, 
	32, 35, 37, 42, 64, 9, 13, -94, 
	-89, -88, -78, -77, 10, -39, 10, -122, 
	10, -38, 10, -81, 10, -40, 10, -89, 
	10, -39, 10, -121, 10, 10, 32, -39, 
	10, -124, -123, 10, -38, 10, -81, 10, 
	-39, 10, -120, 10, -37, 10, -116, 10, 
	10, 32, -40, 10, -77, 10, -39, 10, 
	-122, 10, -40, 10, -89, 10, -40, 10, 
	-79, 10, -37, 10, -116, 10, -39, 10, 
	-120, 10, 10, 58, -40, 10, -89, 10, 
	-40, 10, -89, 10, 10, 32, -39, 10, 
	-127, 10, -40, 10, -79, 10, -40, 10, 
	-74, 10, -39, 10, -123, 10, -37, 10, 
	-116, 10, -39, 10, -122, 10, -39, 10, 
	-121, 10, -121, -120, 10, -39, 10, -122, 
	10, -38, 10, -81, 10, -40, 10, -89, 
	10, -39, 10, -123, 10, -37, 10, -116, 
	10, -39, 10, 32, -112, 10, -37, 10, 
	-116, 10, -38, 10, -104, 10, -38, 10, 
	-81, 10, -37, 10, -116, 10, 10, 95, 
	10, 70, 10, 69, 10, 65, 10, 84, 
	10, 85, 10, 82, 10, 69, 10, 95, 
	10, 69, 10, 78, 10, 68, 10, 95, 
	10, 37, 187, 191, 0
];

var _lexer_single_lengths = [
	0, 11, 5, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 2, 2, 10, 3, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	5, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 10, 1, 1, 
	2, 2, 3, 3, 3, 3, 2, 2, 
	2, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	3, 5, 3, 2, 4, 3, 2, 4, 
	10, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 2, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	7, 4, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	3, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 1, 2, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 8, 5, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 3, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 3, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 8, 5, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 3, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 3, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 3, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 8, 6, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 3, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 3, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 3, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 1, 1, 0
];

var _lexer_range_lengths = [
	0, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 0, 0, 
	0, 0, 1, 1, 1, 1, 1, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 1, 1, 1, 1, 0, 0, 1, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0
];

var _lexer_index_offsets = [
	0, 0, 13, 19, 21, 23, 25, 27, 
	29, 31, 33, 35, 37, 40, 43, 55, 
	59, 61, 63, 65, 67, 69, 71, 73, 
	75, 77, 79, 81, 83, 85, 87, 89, 
	91, 98, 101, 104, 107, 110, 113, 116, 
	119, 122, 125, 128, 131, 134, 146, 148, 
	150, 153, 156, 161, 166, 171, 176, 180, 
	184, 187, 189, 191, 193, 195, 197, 199, 
	201, 203, 205, 207, 209, 211, 213, 215, 
	217, 222, 229, 234, 238, 244, 248, 251, 
	257, 269, 271, 273, 275, 277, 279, 281, 
	283, 285, 287, 289, 292, 294, 296, 298, 
	300, 302, 304, 306, 308, 310, 312, 314, 
	316, 325, 330, 333, 336, 339, 342, 345, 
	348, 351, 354, 357, 360, 363, 366, 369, 
	372, 375, 378, 381, 384, 387, 390, 393, 
	396, 399, 402, 405, 408, 411, 414, 417, 
	420, 424, 427, 430, 433, 436, 439, 442, 
	445, 448, 451, 454, 457, 460, 463, 466, 
	469, 472, 475, 478, 481, 484, 487, 490, 
	493, 496, 499, 502, 505, 508, 511, 514, 
	517, 520, 523, 526, 529, 532, 535, 537, 
	540, 542, 544, 546, 548, 550, 552, 554, 
	556, 558, 560, 562, 564, 566, 568, 570, 
	572, 574, 576, 578, 580, 582, 584, 594, 
	600, 603, 606, 609, 612, 615, 618, 621, 
	624, 627, 630, 633, 636, 639, 642, 645, 
	648, 651, 654, 657, 660, 663, 666, 669, 
	672, 675, 678, 681, 684, 687, 690, 693, 
	696, 699, 703, 706, 709, 712, 715, 718, 
	721, 724, 727, 730, 733, 737, 740, 743, 
	746, 749, 752, 755, 758, 761, 764, 767, 
	770, 773, 776, 779, 782, 785, 788, 791, 
	794, 797, 800, 803, 806, 808, 810, 812, 
	814, 816, 818, 820, 822, 824, 826, 828, 
	830, 832, 834, 836, 838, 840, 842, 844, 
	846, 848, 850, 860, 866, 869, 872, 875, 
	878, 881, 884, 887, 890, 893, 896, 900, 
	903, 906, 909, 912, 915, 918, 921, 924, 
	927, 930, 933, 936, 939, 942, 945, 948, 
	951, 954, 957, 960, 963, 966, 969, 972, 
	975, 978, 981, 984, 987, 990, 993, 997, 
	1000, 1003, 1006, 1009, 1012, 1015, 1018, 1021, 
	1024, 1027, 1031, 1034, 1037, 1040, 1043, 1046, 
	1049, 1052, 1055, 1058, 1061, 1064, 1067, 1070, 
	1073, 1076, 1079, 1082, 1085, 1088, 1091, 1094, 
	1097, 1100, 1102, 1104, 1106, 1108, 1110, 1112, 
	1114, 1116, 1118, 1120, 1122, 1124, 1126, 1136, 
	1143, 1146, 1149, 1152, 1155, 1158, 1161, 1164, 
	1167, 1170, 1173, 1177, 1180, 1183, 1186, 1189, 
	1192, 1195, 1198, 1201, 1204, 1207, 1210, 1213, 
	1216, 1219, 1222, 1225, 1228, 1231, 1234, 1237, 
	1240, 1243, 1246, 1249, 1252, 1255, 1258, 1261, 
	1264, 1267, 1270, 1273, 1276, 1279, 1282, 1285, 
	1288, 1291, 1294, 1298, 1301, 1304, 1307, 1310, 
	1313, 1316, 1319, 1322, 1325, 1328, 1332, 1335, 
	1338, 1341, 1344, 1347, 1350, 1353, 1356, 1359, 
	1362, 1365, 1368, 1371, 1374, 1377, 1380, 1383, 
	1386, 1389, 1392, 1395, 1398, 1401, 1403, 1405
];

var _lexer_indicies = [
	1, 2, 4, 3, 5, 6, 7, 8, 
	9, 10, 11, 3, 0, 12, 13, 14, 
	15, 16, 0, 17, 0, 18, 0, 19, 
	0, 20, 0, 21, 0, 22, 0, 23, 
	0, 24, 0, 25, 0, 27, 28, 26, 
	30, 31, 29, 1, 2, 4, 3, 5, 
	6, 7, 8, 9, 10, 3, 0, 32, 
	33, 34, 0, 35, 0, 36, 0, 37, 
	0, 38, 0, 39, 0, 40, 0, 41, 
	0, 42, 0, 43, 0, 44, 0, 45, 
	0, 46, 0, 47, 0, 48, 0, 50, 
	49, 52, 51, 53, 52, 54, 55, 55, 
	54, 51, 56, 52, 51, 57, 52, 51, 
	58, 52, 51, 59, 52, 51, 60, 52, 
	51, 61, 52, 51, 62, 52, 51, 63, 
	52, 51, 64, 52, 51, 65, 52, 51, 
	66, 52, 51, 52, 67, 51, 68, 69, 
	71, 70, 72, 73, 74, 75, 76, 77, 
	70, 0, 78, 0, 79, 0, 81, 82, 
	80, 84, 85, 83, 88, 87, 89, 87, 
	86, 92, 91, 93, 91, 90, 92, 91, 
	94, 91, 90, 92, 91, 95, 91, 90, 
	97, 96, 96, 0, 4, 98, 98, 0, 
	100, 101, 99, 4, 0, 102, 0, 103, 
	0, 104, 0, 105, 0, 106, 0, 107, 
	0, 108, 0, 109, 0, 110, 0, 111, 
	0, 112, 0, 113, 0, 114, 0, 115, 
	0, 0, 0, 0, 0, 116, 117, 118, 
	117, 117, 120, 119, 116, 4, 121, 9, 
	121, 0, 122, 123, 122, 0, 126, 125, 
	127, 128, 125, 124, 0, 130, 131, 129, 
	0, 130, 129, 126, 132, 130, 131, 132, 
	129, 133, 134, 126, 135, 136, 137, 138, 
	139, 140, 141, 135, 0, 142, 0, 143, 
	0, 144, 0, 145, 0, 146, 0, 147, 
	0, 148, 0, 149, 0, 150, 0, 24, 
	0, 151, 25, 0, 152, 0, 153, 0, 
	154, 0, 155, 0, 156, 0, 157, 0, 
	158, 0, 159, 0, 160, 0, 161, 0, 
	163, 162, 165, 164, 166, 167, 165, 168, 
	169, 170, 169, 168, 164, 171, 172, 173, 
	165, 164, 174, 165, 164, 175, 165, 164, 
	176, 165, 164, 177, 165, 164, 178, 165, 
	164, 179, 165, 164, 180, 165, 164, 181, 
	165, 164, 165, 182, 164, 183, 165, 164, 
	173, 165, 164, 184, 165, 164, 185, 165, 
	164, 186, 165, 164, 187, 165, 164, 188, 
	165, 164, 189, 165, 164, 190, 165, 164, 
	191, 165, 164, 192, 165, 164, 193, 165, 
	164, 165, 194, 164, 195, 165, 164, 196, 
	165, 164, 197, 165, 164, 198, 165, 164, 
	199, 165, 164, 200, 165, 164, 201, 165, 
	164, 193, 165, 164, 202, 203, 165, 164, 
	204, 165, 164, 205, 165, 164, 206, 165, 
	164, 207, 165, 164, 208, 165, 164, 209, 
	165, 164, 210, 165, 164, 211, 165, 164, 
	165, 212, 164, 213, 165, 164, 214, 165, 
	164, 215, 165, 164, 193, 165, 164, 216, 
	165, 164, 217, 165, 164, 218, 165, 164, 
	219, 165, 164, 220, 165, 164, 221, 165, 
	164, 222, 165, 164, 223, 165, 164, 224, 
	165, 164, 193, 165, 164, 165, 225, 164, 
	165, 226, 164, 165, 227, 164, 165, 228, 
	164, 165, 229, 164, 165, 230, 164, 165, 
	231, 164, 165, 232, 164, 165, 233, 164, 
	165, 234, 164, 165, 235, 164, 165, 236, 
	164, 165, 237, 164, 165, 238, 164, 239, 
	0, 240, 241, 0, 242, 0, 243, 0, 
	244, 0, 245, 0, 246, 0, 247, 0, 
	248, 0, 249, 0, 250, 0, 251, 0, 
	252, 0, 253, 0, 254, 0, 255, 0, 
	256, 0, 257, 0, 258, 0, 259, 0, 
	260, 0, 261, 0, 263, 262, 265, 264, 
	266, 267, 265, 268, 269, 270, 271, 269, 
	268, 264, 272, 273, 274, 275, 265, 264, 
	276, 265, 264, 277, 265, 264, 278, 265, 
	264, 279, 265, 264, 280, 265, 264, 281, 
	265, 264, 282, 265, 264, 283, 265, 264, 
	265, 284, 264, 285, 265, 264, 286, 265, 
	264, 287, 265, 264, 283, 265, 264, 288, 
	265, 264, 289, 265, 264, 265, 290, 264, 
	291, 265, 264, 292, 265, 264, 293, 265, 
	264, 294, 265, 264, 295, 265, 264, 283, 
	265, 264, 296, 265, 264, 297, 265, 264, 
	298, 265, 264, 299, 265, 264, 300, 265, 
	264, 301, 265, 264, 302, 265, 264, 303, 
	265, 264, 304, 265, 264, 305, 265, 264, 
	265, 284, 264, 306, 307, 265, 264, 308, 
	265, 264, 309, 265, 264, 310, 265, 264, 
	311, 265, 264, 312, 265, 264, 313, 265, 
	264, 314, 265, 264, 315, 265, 264, 316, 
	265, 264, 283, 265, 264, 317, 265, 284, 
	264, 318, 265, 264, 319, 265, 264, 320, 
	265, 264, 321, 265, 264, 322, 265, 264, 
	323, 265, 264, 324, 265, 264, 325, 265, 
	264, 305, 265, 264, 265, 326, 264, 265, 
	327, 264, 265, 328, 264, 265, 329, 264, 
	265, 330, 264, 265, 331, 264, 265, 332, 
	264, 265, 333, 264, 265, 334, 264, 265, 
	335, 264, 265, 336, 264, 265, 337, 264, 
	265, 338, 264, 265, 339, 264, 340, 0, 
	24, 0, 341, 0, 342, 0, 343, 0, 
	344, 0, 345, 0, 346, 0, 347, 0, 
	348, 0, 24, 0, 349, 0, 350, 0, 
	351, 0, 352, 0, 353, 0, 354, 0, 
	355, 0, 356, 0, 357, 0, 359, 358, 
	361, 360, 362, 363, 361, 364, 365, 366, 
	367, 365, 364, 360, 368, 369, 370, 371, 
	361, 360, 372, 361, 360, 373, 361, 360, 
	374, 361, 360, 375, 361, 360, 376, 361, 
	360, 377, 361, 360, 378, 361, 360, 379, 
	361, 360, 361, 380, 360, 381, 361, 360, 
	382, 383, 361, 360, 384, 361, 360, 385, 
	361, 360, 386, 361, 360, 387, 361, 360, 
	388, 361, 360, 389, 361, 360, 361, 390, 
	360, 391, 361, 360, 371, 361, 360, 392, 
	361, 360, 393, 361, 360, 394, 361, 360, 
	395, 361, 360, 396, 361, 360, 397, 361, 
	360, 398, 361, 360, 399, 361, 360, 400, 
	361, 360, 401, 361, 360, 361, 380, 360, 
	402, 361, 360, 379, 361, 360, 403, 361, 
	360, 404, 361, 360, 361, 405, 360, 406, 
	361, 360, 407, 361, 360, 408, 361, 360, 
	409, 361, 360, 410, 361, 360, 379, 361, 
	360, 411, 412, 361, 360, 413, 361, 360, 
	414, 361, 360, 415, 361, 360, 416, 361, 
	360, 417, 361, 360, 418, 361, 360, 419, 
	361, 360, 420, 361, 360, 421, 361, 360, 
	379, 361, 360, 422, 361, 380, 360, 423, 
	361, 360, 424, 361, 360, 425, 361, 360, 
	426, 361, 360, 427, 361, 360, 428, 361, 
	360, 429, 361, 360, 430, 361, 360, 401, 
	361, 360, 361, 431, 360, 361, 432, 360, 
	361, 433, 360, 361, 434, 360, 361, 435, 
	360, 361, 436, 360, 361, 437, 360, 361, 
	438, 360, 361, 439, 360, 361, 440, 360, 
	361, 441, 360, 361, 442, 360, 361, 443, 
	360, 361, 444, 360, 445, 0, 446, 0, 
	447, 0, 448, 0, 449, 0, 450, 0, 
	451, 0, 452, 0, 453, 0, 454, 0, 
	455, 0, 457, 456, 459, 458, 460, 461, 
	459, 462, 463, 464, 465, 463, 462, 458, 
	466, 467, 468, 469, 470, 459, 458, 471, 
	459, 458, 472, 459, 458, 473, 459, 458, 
	474, 459, 458, 475, 459, 458, 476, 459, 
	458, 477, 459, 458, 478, 459, 458, 459, 
	479, 458, 480, 459, 458, 481, 482, 459, 
	458, 483, 459, 458, 484, 459, 458, 485, 
	459, 458, 486, 459, 458, 487, 459, 458, 
	488, 459, 458, 459, 489, 458, 490, 459, 
	458, 470, 459, 458, 491, 459, 458, 492, 
	459, 458, 493, 459, 458, 494, 459, 458, 
	495, 459, 458, 496, 459, 458, 497, 459, 
	458, 498, 459, 458, 499, 459, 458, 500, 
	459, 458, 459, 479, 458, 501, 459, 458, 
	478, 459, 458, 502, 459, 458, 503, 459, 
	458, 459, 504, 458, 505, 459, 458, 506, 
	459, 458, 507, 459, 458, 508, 459, 458, 
	509, 459, 458, 478, 459, 458, 510, 459, 
	458, 511, 459, 458, 512, 459, 458, 513, 
	459, 458, 514, 459, 458, 515, 459, 458, 
	516, 459, 458, 500, 459, 458, 517, 518, 
	459, 458, 519, 459, 458, 520, 459, 458, 
	521, 459, 458, 522, 459, 458, 523, 459, 
	458, 524, 459, 458, 525, 459, 458, 526, 
	459, 458, 527, 459, 458, 478, 459, 458, 
	528, 459, 479, 458, 529, 459, 458, 530, 
	459, 458, 531, 459, 458, 532, 459, 458, 
	533, 459, 458, 534, 459, 458, 535, 459, 
	458, 536, 459, 458, 500, 459, 458, 459, 
	537, 458, 459, 538, 458, 459, 539, 458, 
	459, 540, 458, 459, 541, 458, 459, 542, 
	458, 459, 543, 458, 459, 544, 458, 459, 
	545, 458, 459, 546, 458, 459, 547, 458, 
	459, 548, 458, 459, 549, 458, 459, 550, 
	458, 551, 0, 3, 0, 552, 0
];

var _lexer_trans_targs = [
	0, 2, 15, 14, 14, 46, 56, 58, 
	11, 72, 75, 469, 3, 174, 270, 279, 
	369, 4, 5, 6, 7, 8, 9, 10, 
	11, 12, 13, 14, 57, 13, 14, 57, 
	16, 81, 91, 17, 18, 19, 20, 21, 
	22, 23, 24, 25, 26, 27, 28, 29, 
	30, 31, 32, 31, 32, 33, 32, 14, 
	34, 35, 36, 37, 38, 39, 40, 41, 
	42, 43, 44, 45, 2, 15, 14, 14, 
	46, 56, 58, 11, 72, 75, 47, 48, 
	49, 50, 49, 49, 50, 49, 51, 51, 
	51, 52, 51, 51, 51, 52, 53, 54, 
	55, 14, 55, 56, 14, 57, 59, 60, 
	61, 62, 63, 64, 65, 66, 67, 68, 
	69, 70, 71, 471, 73, 74, 14, 73, 
	72, 74, 75, 76, 77, 79, 80, 78, 
	76, 77, 78, 76, 79, 2, 15, 80, 
	46, 56, 58, 11, 72, 75, 82, 83, 
	84, 85, 86, 87, 88, 89, 90, 92, 
	93, 94, 95, 96, 97, 98, 99, 100, 
	101, 102, 103, 104, 103, 104, 105, 136, 
	104, 14, 160, 106, 128, 117, 107, 108, 
	109, 110, 111, 112, 113, 114, 115, 116, 
	118, 119, 120, 121, 122, 123, 124, 125, 
	126, 127, 45, 129, 130, 131, 132, 133, 
	134, 135, 137, 150, 138, 139, 140, 141, 
	142, 143, 144, 145, 146, 147, 148, 149, 
	151, 152, 153, 154, 155, 156, 157, 158, 
	159, 161, 162, 163, 164, 165, 166, 167, 
	168, 169, 170, 171, 172, 173, 14, 175, 
	176, 268, 177, 178, 179, 180, 181, 182, 
	183, 184, 185, 186, 187, 188, 189, 190, 
	191, 192, 193, 194, 195, 196, 197, 198, 
	197, 198, 199, 233, 198, 14, 254, 208, 
	200, 209, 213, 222, 201, 202, 203, 204, 
	205, 206, 207, 208, 45, 210, 211, 212, 
	214, 215, 216, 217, 218, 219, 220, 221, 
	223, 224, 225, 226, 227, 228, 229, 230, 
	231, 232, 234, 244, 235, 236, 237, 238, 
	239, 240, 241, 242, 243, 245, 246, 247, 
	248, 249, 250, 251, 252, 253, 255, 256, 
	257, 258, 259, 260, 261, 262, 263, 264, 
	265, 266, 267, 14, 269, 271, 272, 273, 
	274, 275, 276, 277, 278, 280, 281, 282, 
	283, 284, 285, 286, 287, 288, 289, 290, 
	289, 290, 291, 334, 290, 14, 355, 300, 
	292, 301, 325, 312, 293, 294, 295, 296, 
	297, 298, 299, 300, 45, 302, 303, 323, 
	304, 305, 306, 307, 308, 309, 310, 311, 
	313, 314, 315, 316, 317, 318, 319, 320, 
	321, 322, 324, 326, 327, 328, 329, 330, 
	331, 332, 333, 335, 345, 336, 337, 338, 
	339, 340, 341, 342, 343, 344, 346, 347, 
	348, 349, 350, 351, 352, 353, 354, 356, 
	357, 358, 359, 360, 361, 362, 363, 364, 
	365, 366, 367, 368, 14, 370, 371, 372, 
	373, 374, 375, 376, 377, 378, 379, 380, 
	381, 382, 381, 382, 383, 434, 382, 14, 
	455, 392, 384, 393, 417, 426, 404, 385, 
	386, 387, 388, 389, 390, 391, 392, 45, 
	394, 395, 415, 396, 397, 398, 399, 400, 
	401, 402, 403, 405, 406, 407, 408, 409, 
	410, 411, 412, 413, 414, 416, 418, 419, 
	420, 421, 422, 423, 424, 425, 427, 428, 
	429, 430, 431, 432, 433, 435, 445, 436, 
	437, 438, 439, 440, 441, 442, 443, 444, 
	446, 447, 448, 449, 450, 451, 452, 453, 
	454, 456, 457, 458, 459, 460, 461, 462, 
	463, 464, 465, 466, 467, 468, 14, 470, 
	0
];

var _lexer_trans_actions = [
	43, 29, 29, 0, 54, 3, 1, 0, 
	29, 1, 35, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 57, 149, 126, 0, 110, 23, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 57, 144, 0, 54, 84, 0, 81, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 21, 63, 63, 31, 130, 
	60, 57, 31, 63, 57, 66, 0, 0, 
	7, 139, 48, 0, 102, 9, 5, 45, 
	134, 45, 0, 33, 122, 33, 33, 0, 
	11, 106, 0, 0, 114, 25, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 27, 118, 27, 
	51, 0, 0, 0, 37, 37, 54, 37, 
	87, 0, 0, 39, 0, 96, 96, 0, 
	93, 90, 41, 96, 90, 99, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 57, 144, 0, 54, 84, 84, 
	0, 69, 33, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 13, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 13, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 57, 144, 
	0, 54, 84, 84, 0, 78, 33, 84, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 19, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 19, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 57, 144, 
	0, 54, 84, 84, 0, 72, 33, 84, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 15, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 15, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	57, 144, 0, 54, 84, 84, 0, 75, 
	33, 84, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 17, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 17, 0, 
	0
];

var _lexer_eof_actions = [
	0, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43
];

var lexer_start = 1;
var lexer_first_final = 471;
var lexer_error = 0;

var lexer_en_main = 1;


/* line 129 "ragel/i18n/fa.js.rl" */

/* line 130 "ragel/i18n/fa.js.rl" */

/* line 131 "ragel/i18n/fa.js.rl" */

/* line 132 "ragel/i18n/fa.js.rl" */

var Lexer = function(listener) {
  // Check that listener has the required functions
  var events = ['comment', 'tag', 'feature', 'background', 'scenario', 'scenario_outline', 'examples', 'step', 'doc_string', 'row', 'eof'];
  for(var i=0, len=events.length; i<len; i++) {
    var event = events[i];
    if(typeof listener[event] != 'function') {
      throw new Error("Error. No " + event + " function exists on " + JSON.stringify(listener));
    }
  }
  this.listener = listener;
};

Lexer.prototype.scan = function(data) {
  var ending = "\n%_FEATURE_END_%";
  if(typeof data == 'string') {
    data = this.stringToBytes(data + ending);
  } else if(typeof Buffer != 'undefined' && Buffer.isBuffer(data)) {
    // Node.js
    var buf = new Buffer(data.length + ending.length);
    data.copy(buf, 0, 0);
    new Buffer(ending).copy(buf, data.length, 0);
    data = buf;
  }
  var eof = pe = data.length;
  var p = 0;

  this.line_number = 1;
  this.last_newline = 0;
  var signedCharValue=function(v){return v > 127 ? v-256 : v; };

  
/* line 839 "js/lib/gherkin/lexer/fa.js" */
{
	  this.cs = lexer_start;
} /* JSCodeGen::writeInit */

/* line 164 "ragel/i18n/fa.js.rl" */
  
/* line 846 "js/lib/gherkin/lexer/fa.js" */
{
	var _klen, _trans, _keys, _ps, _widec, _acts, _nacts;
	var _goto_level, _resume, _eof_trans, _again, _test_eof;
	var _out;
	_klen = _trans = _keys = _acts = _nacts = null;
	_goto_level = 0;
	_resume = 10;
	_eof_trans = 15;
	_again = 20;
	_test_eof = 30;
	_out = 40;
	while (true) {
	_trigger_goto = false;
	if (_goto_level <= 0) {
	if (p == pe) {
		_goto_level = _test_eof;
		continue;
	}
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	}
	if (_goto_level <= _resume) {
	_keys = _lexer_key_offsets[ this.cs];
	_trans = _lexer_index_offsets[ this.cs];
	_klen = _lexer_single_lengths[ this.cs];
	_break_match = false;
	
	do {
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + _klen - 1;

	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + ( (_upper - _lower) >> 1 );

	        if (( signedCharValue(data[p])) < _lexer_trans_keys[_mid]) {
	           _upper = _mid - 1;
	        } else if (( signedCharValue(data[p])) > _lexer_trans_keys[_mid]) {
	           _lower = _mid + 1;
	        } else {
	           _trans += (_mid - _keys);
	           _break_match = true;
	           break;
	        };
	     } /* while */
	     if (_break_match) { break; }
	     _keys += _klen;
	     _trans += _klen;
	  }
	  _klen = _lexer_range_lengths[ this.cs];
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + (_klen << 1) - 2;
	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + (((_upper-_lower) >> 1) & ~1);
	        if (( signedCharValue(data[p])) < _lexer_trans_keys[_mid]) {
	          _upper = _mid - 2;
	         } else if (( signedCharValue(data[p])) > _lexer_trans_keys[_mid+1]) {
	          _lower = _mid + 2;
	        } else {
	          _trans += ((_mid - _keys) >> 1);
	          _break_match = true;
	          break;
	        }
	     } /* while */
	     if (_break_match) { break; }
	     _trans += _klen
	  }
	} while (false);
	_trans = _lexer_indicies[_trans];
	 this.cs = _lexer_trans_targs[_trans];
	if (_lexer_trans_actions[_trans] != 0) {
		_acts = _lexer_trans_actions[_trans];
		_nacts = _lexer_actions[_acts];
		_acts += 1;
		while (_nacts > 0) {
			_nacts -= 1;
			_acts += 1;
			switch (_lexer_actions[_acts - 1]) {
case 0:
/* line 6 "ragel/i18n/fa.js.rl" */

    this.content_start = p;
    this.current_line = this.line_number;
    this.start_col = p - this.last_newline - (this.keyword+':').length;
  		break;
case 1:
/* line 12 "ragel/i18n/fa.js.rl" */

    this.current_line = this.line_number;
    this.start_col = p - this.last_newline;
  		break;
case 2:
/* line 17 "ragel/i18n/fa.js.rl" */

    this.content_start = p;
  		break;
case 3:
/* line 21 "ragel/i18n/fa.js.rl" */

    this.docstring_content_type_start = p;
  		break;
case 4:
/* line 25 "ragel/i18n/fa.js.rl" */

    this.docstring_content_type_end = p;
  		break;
case 5:
/* line 29 "ragel/i18n/fa.js.rl" */

    var con = this.unindent(
      this.start_col, 
      this.bytesToString(data.slice(this.content_start, this.next_keyword_start-1)).replace(/(\r?\n)?([\t ])*$/, '').replace(/\\\"\\\"\\\"/mg, '"""')
    );
    var con_type = this.bytesToString(data.slice(this.docstring_content_type_start, this.docstring_content_type_end)).trim();
    this.listener.doc_string(con_type, con, this.current_line); 
  		break;
case 6:
/* line 38 "ragel/i18n/fa.js.rl" */

    p = this.store_keyword_content('feature', data, p, eof);
  		break;
case 7:
/* line 42 "ragel/i18n/fa.js.rl" */

    p = this.store_keyword_content('background', data, p, eof);
  		break;
case 8:
/* line 46 "ragel/i18n/fa.js.rl" */

    p = this.store_keyword_content('scenario', data, p, eof);
  		break;
case 9:
/* line 50 "ragel/i18n/fa.js.rl" */

    p = this.store_keyword_content('scenario_outline', data, p, eof);
  		break;
case 10:
/* line 54 "ragel/i18n/fa.js.rl" */

    p = this.store_keyword_content('examples', data, p, eof);
  		break;
case 11:
/* line 58 "ragel/i18n/fa.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.step(this.keyword, con, this.current_line);
  		break;
case 12:
/* line 63 "ragel/i18n/fa.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.comment(con, this.line_number);
    this.keyword_start = null;
  		break;
case 13:
/* line 69 "ragel/i18n/fa.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.tag(con, this.line_number);
    this.keyword_start = null;
  		break;
case 14:
/* line 75 "ragel/i18n/fa.js.rl" */

    this.line_number++;
  		break;
case 15:
/* line 79 "ragel/i18n/fa.js.rl" */

    this.last_newline = p + 1;
  		break;
case 16:
/* line 83 "ragel/i18n/fa.js.rl" */

    this.keyword_start = this.keyword_start || p;
  		break;
case 17:
/* line 87 "ragel/i18n/fa.js.rl" */

    this.keyword = this.bytesToString(data.slice(this.keyword_start, p)).replace(/:$/, '');
    this.keyword_start = null;
  		break;
case 18:
/* line 92 "ragel/i18n/fa.js.rl" */

    this.next_keyword_start = p;
  		break;
case 19:
/* line 96 "ragel/i18n/fa.js.rl" */

    p = p - 1;
    current_row = [];
    this.current_line = this.line_number;
  		break;
case 20:
/* line 102 "ragel/i18n/fa.js.rl" */

    this.content_start = p;
  		break;
case 21:
/* line 106 "ragel/i18n/fa.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    current_row.push(con.replace(/\\\|/, "|").replace(/\\n/, "\n").replace(/\\\\/, "\\"));
  		break;
case 22:
/* line 111 "ragel/i18n/fa.js.rl" */

    this.listener.row(current_row, this.current_line);
  		break;
case 23:
/* line 115 "ragel/i18n/fa.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw new Error("Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.");
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 1073 "js/lib/gherkin/lexer/fa.js" */
			} /* action switch */
		}
	}
	if (_trigger_goto) {
		continue;
	}
	}
	if (_goto_level <= _again) {
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	p += 1;
	if (p != pe) {
		_goto_level = _resume;
		continue;
	}
	}
	if (_goto_level <= _test_eof) {
	if (p == eof) {
	__acts = _lexer_eof_actions[ this.cs];
	__nacts =  _lexer_actions[__acts];
	__acts += 1;
	while (__nacts > 0) {
		__nacts -= 1;
		__acts += 1;
		switch (_lexer_actions[__acts - 1]) {
case 23:
/* line 115 "ragel/i18n/fa.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw new Error("Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.");
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 1112 "js/lib/gherkin/lexer/fa.js" */
		} /* eof action switch */
	}
	if (_trigger_goto) {
		continue;
	}
}
	}
	if (_goto_level <= _out) {
		break;
	}
	}
	}

/* line 165 "ragel/i18n/fa.js.rl" */
};


/*
 * Decode utf-8 byte sequence to string.
 */
var decodeUtf8 = function(bytes) {
  var result = "";
  var i = 0;
  var wc;
  var c;

  while (i < bytes.length) {
    /* parse as UTF-8 lead byte */
    wc = bytes[i++];
    if (wc < 0x80) {
      count = 0;
    } else if (wc < 0xC2 || wc >= 0xF8) {
      throw new Error("input is not a valid UTF-8 lead octet");
    } else if (wc < 0xE0) {
      count = 1;
      wc = (wc & 0x1F) << 6;
    } else if (wc < 0xF0) {
      count = 2;
      wc = (wc & 0x0F) << 12;
    } else /* wc < 0xF8 */ {
      count = 3;
      wc = (wc & 0x07) << 18;
    }

    /* parse trail bytes, if any */
    while (count) {
      if (!(i < bytes.length)) {
        throw new Error("short read");
      }
      if ((c = bytes[i++] ^ 0x80) > 0x3F) {
        throw new Error("input is not a valid UTF-8 trail octet");
      }
      wc |= c << (6 * --count);
      if (wc < (1 << (5 * count + 6))) {
        throw new Error("invalid non-minimal encoded input");
      }
    }

    /* handle conversion to UTF-16 if needed */
    if (wc > 0xFFFF) {
      wc -= 0x10000;
      result += String.fromCharCode(0xD800 + (wc >> 10));
      wc = 0xDC00 + (wc & 0x3FF);
    }
    result += String.fromCharCode(wc);
  }

  return result;
};

/*
 * Encode string to an array of bytes using utf8 encoding.
 *
 * Javascript internally stores character data as utf16 (like java).
 * String.charCodeAt() does *not* produce unicode points, but simply
 * reflects this internal representation. Thus, it is necessary
 * to first decode the utf-16 representation before encoding to
 * utf-8.
 */
var encodeUtf8 = function(string) {
  var bytes = [];
  var i = 0;
  var j = 0;
  var wc;

  while (i < string.length) {
    wc = string.charCodeAt(i++);
    if (wc >= 0xD800 && wc <= 0xDBFF && i < string.length && string.charCodeAt(i) >= 0xDC00 && string.charCodeAt(i) <= 0xDFFF) {
      /* decode UTF-16 */
      wc = 0x10000 + ((wc & 0x3FF) << 10) + (string.charCodeAt(i++) & 0x3FF);
    }

    /* emit lead byte */
    if (wc < 0x80) {
      bytes[j++] = wc;
      count = 0;
    } else if (wc < 0x800) {
      bytes[j++] = 0xC0 | (wc >> 6);
      count = 1;
    } else if (wc < 0x10000) {
      bytes[j++] = 0xE0 | (wc >> 12);
      count = 2;
    } else {
      /* SMP: 21-bit Unicode */
      bytes[j++] = 0xF0 | (wc >> 18);
      count = 3;
    }

    /* emit trail bytes, if any */
    while (count) {
      bytes[j++] = 0x80 | ((wc >> (6 * --count)) & 0x3F);
    }
  }

  return bytes;

};

Lexer.prototype.bytesToString = function(bytes) {
  if(typeof bytes.write == 'function') {
    // Node.js
    return bytes.toString('utf-8');
  }
  return decodeUtf8(bytes);
};

Lexer.prototype.stringToBytes = function(string) {
  return encodeUtf8(string);
};

Lexer.prototype.unindent = function(startcol, text) {
  startcol = startcol || 0;
  return text.replace(new RegExp('^[\t ]{0,' + startcol + '}', 'gm'), ''); 
};

Lexer.prototype.store_keyword_content = function(event, data, p, eof) {
  var end_point = (!this.next_keyword_start || (p == eof)) ? p : this.next_keyword_start;
  var content = this.unindent(this.start_col + 2, this.bytesToString(data.slice(this.content_start, end_point))).replace(/\s+$/,"");
  var content_lines = content.split("\n")
  var name = content_lines.shift() || "";
  name = name.trim();
  var description = content_lines.join("\n");
  this.listener[event](this.keyword, name, description, this.current_line);
  var nks = this.next_keyword_start;
  this.next_keyword_start = null;
  return nks ? nks - 1 : p;
};

Lexer.prototype.current_line_content = function(data, p) {
  var rest = Array.prototype.slice.call(data,this.last_newline, -1);
  var end = rest.indexOf(10) || -1;
  return this.bytesToString(rest.slice(0, end)).trim();
};

// Node.js export
if(typeof module !== 'undefined') {
  module.exports = Lexer;
}
// Require.js export
if (typeof define !== 'undefined') {
  if(define.amd) {
    define('gherkin/lexer/fa', [], function() {
      return Lexer;
    });
  } else {
    define('gherkin/lexer/fa', function(require, exports, module) {
      exports.Lexer = Lexer;
    });
  }
}

})();

}).call(this,require("buffer").Buffer)

},{"buffer":69}],205:[function(require,module,exports){
(function (Buffer){

/* line 1 "ragel/i18n/fi.js.rl" */
;(function() {


/* line 126 "ragel/i18n/fi.js.rl" */



/* line 11 "js/lib/gherkin/lexer/fi.js" */
var _lexer_actions = [
	0, 1, 0, 1, 1, 1, 2, 1, 
	3, 1, 4, 1, 5, 1, 6, 1, 
	7, 1, 8, 1, 9, 1, 10, 1, 
	11, 1, 12, 1, 13, 1, 16, 1, 
	17, 1, 18, 1, 19, 1, 20, 1, 
	21, 1, 22, 1, 23, 2, 2, 18, 
	2, 3, 4, 2, 13, 0, 2, 14, 
	15, 2, 17, 0, 2, 17, 1, 2, 
	17, 16, 2, 17, 19, 2, 18, 6, 
	2, 18, 7, 2, 18, 8, 2, 18, 
	9, 2, 18, 10, 2, 18, 16, 2, 
	20, 21, 2, 22, 0, 2, 22, 1, 
	2, 22, 16, 2, 22, 19, 3, 4, 
	14, 15, 3, 5, 14, 15, 3, 11, 
	14, 15, 3, 12, 14, 15, 3, 13, 
	14, 15, 3, 14, 15, 18, 3, 17, 
	0, 11, 3, 17, 14, 15, 4, 2, 
	14, 15, 18, 4, 3, 4, 14, 15, 
	4, 17, 0, 14, 15, 5, 17, 0, 
	11, 14, 15
];

var _lexer_key_offsets = [
	0, 0, 17, 33, 34, 35, 37, 39, 
	44, 49, 54, 59, 63, 67, 69, 70, 
	71, 72, 73, 74, 75, 76, 77, 78, 
	79, 80, 81, 82, 83, 84, 85, 87, 
	89, 94, 101, 106, 107, 108, 109, 110, 
	111, 112, 113, 114, 116, 117, 118, 119, 
	120, 121, 122, 123, 124, 125, 126, 127, 
	128, 129, 130, 131, 132, 133, 142, 144, 
	146, 148, 150, 152, 154, 156, 158, 160, 
	162, 164, 166, 168, 170, 172, 174, 176, 
	178, 180, 182, 184, 186, 188, 190, 206, 
	207, 209, 210, 211, 213, 214, 215, 216, 
	217, 218, 219, 226, 228, 230, 232, 234, 
	236, 238, 240, 242, 244, 246, 248, 249, 
	250, 264, 266, 268, 270, 272, 274, 276, 
	278, 280, 282, 284, 286, 288, 290, 292, 
	294, 296, 298, 300, 302, 304, 306, 308, 
	310, 313, 315, 317, 319, 321, 323, 325, 
	327, 329, 331, 333, 335, 337, 339, 341, 
	343, 345, 348, 350, 352, 354, 357, 359, 
	361, 363, 365, 367, 369, 371, 372, 373, 
	374, 375, 376, 377, 378, 392, 394, 396, 
	398, 400, 402, 404, 406, 408, 410, 412, 
	414, 416, 418, 420, 422, 424, 426, 428, 
	430, 432, 434, 436, 438, 441, 443, 445, 
	447, 449, 451, 453, 455, 457, 459, 461, 
	463, 465, 467, 469, 471, 473, 475, 477, 
	478, 479, 480, 481, 482, 483, 497, 499, 
	501, 503, 505, 507, 509, 511, 513, 515, 
	517, 519, 521, 523, 525, 527, 529, 531, 
	533, 535, 537, 539, 541, 543, 546, 548, 
	550, 552, 554, 556, 558, 560, 562, 564, 
	566, 568, 570, 572, 574, 576, 578, 580, 
	582, 584, 586, 589, 591, 593, 595, 597, 
	601, 607, 610, 612, 618, 634, 636, 639, 
	641, 643, 646, 648, 650, 652, 655, 657, 
	659, 661, 663, 665, 667, 669, 670, 671
];

var _lexer_trans_keys = [
	10, 32, 34, 35, 37, 42, 64, 74, 
	75, 77, 78, 79, 84, 124, 239, 9, 
	13, 10, 32, 34, 35, 37, 42, 64, 
	74, 75, 77, 78, 79, 84, 124, 9, 
	13, 34, 34, 10, 13, 10, 13, 10, 
	32, 34, 9, 13, 10, 32, 34, 9, 
	13, 10, 32, 34, 9, 13, 10, 32, 
	34, 9, 13, 10, 32, 9, 13, 10, 
	32, 9, 13, 10, 13, 10, 95, 70, 
	69, 65, 84, 85, 82, 69, 95, 69, 
	78, 68, 95, 37, 32, 10, 13, 10, 
	13, 13, 32, 64, 9, 10, 9, 10, 
	13, 32, 64, 11, 12, 10, 32, 64, 
	9, 13, 97, 117, 110, 117, 116, 116, 
	105, 105, 108, 109, 101, 116, 101, 116, 
	97, 97, 105, 110, 97, 105, 115, 117, 
	117, 115, 58, 10, 10, 10, 32, 35, 
	37, 64, 79, 84, 9, 13, 10, 95, 
	10, 70, 10, 69, 10, 65, 10, 84, 
	10, 85, 10, 82, 10, 69, 10, 95, 
	10, 69, 10, 78, 10, 68, 10, 95, 
	10, 37, 10, 109, 10, 105, 10, 110, 
	10, 97, 10, 105, 10, 115, 10, 117, 
	10, 117, 10, 115, 10, 58, 10, 32, 
	34, 35, 37, 42, 64, 74, 75, 77, 
	78, 79, 84, 124, 9, 13, 97, 112, 
	117, 97, 117, 107, 115, 115, 101, 116, 
	58, 10, 10, 10, 32, 35, 79, 124, 
	9, 13, 10, 109, 10, 105, 10, 110, 
	10, 97, 10, 105, 10, 115, 10, 117, 
	10, 117, 10, 115, 10, 58, 58, 97, 
	10, 10, 10, 32, 35, 37, 42, 64, 
	74, 75, 77, 78, 79, 84, 9, 13, 
	10, 95, 10, 70, 10, 69, 10, 65, 
	10, 84, 10, 85, 10, 82, 10, 69, 
	10, 95, 10, 69, 10, 78, 10, 68, 
	10, 95, 10, 37, 10, 32, 10, 97, 
	10, 117, 10, 110, 10, 117, 10, 116, 
	10, 116, 10, 105, 10, 105, 10, 108, 
	109, 10, 101, 10, 116, 10, 101, 10, 
	116, 10, 97, 10, 97, 10, 105, 10, 
	110, 10, 97, 10, 105, 10, 115, 10, 
	117, 10, 117, 10, 115, 10, 58, 10, 
	97, 10, 112, 117, 10, 97, 10, 117, 
	10, 115, 10, 58, 97, 10, 105, 10, 
	104, 10, 105, 10, 111, 10, 115, 10, 
	116, 10, 97, 105, 104, 105, 111, 58, 
	10, 10, 10, 32, 35, 37, 42, 64, 
	74, 75, 77, 78, 79, 84, 9, 13, 
	10, 95, 10, 70, 10, 69, 10, 65, 
	10, 84, 10, 85, 10, 82, 10, 69, 
	10, 95, 10, 69, 10, 78, 10, 68, 
	10, 95, 10, 37, 10, 32, 10, 97, 
	10, 117, 10, 110, 10, 117, 10, 116, 
	10, 116, 10, 105, 10, 105, 10, 108, 
	109, 10, 101, 10, 116, 10, 101, 10, 
	116, 10, 97, 10, 97, 10, 105, 10, 
	110, 10, 97, 10, 105, 10, 115, 10, 
	117, 10, 117, 10, 115, 10, 58, 10, 
	97, 10, 112, 10, 97, 115, 116, 97, 
	58, 10, 10, 10, 32, 35, 37, 42, 
	64, 74, 75, 77, 78, 79, 84, 9, 
	13, 10, 95, 10, 70, 10, 69, 10, 
	65, 10, 84, 10, 85, 10, 82, 10, 
	69, 10, 95, 10, 69, 10, 78, 10, 
	68, 10, 95, 10, 37, 10, 32, 10, 
	97, 10, 117, 10, 110, 10, 117, 10, 
	116, 10, 116, 10, 105, 10, 105, 10, 
	108, 109, 10, 101, 10, 116, 10, 101, 
	10, 116, 10, 97, 10, 97, 10, 105, 
	10, 110, 10, 97, 10, 105, 10, 115, 
	10, 117, 10, 117, 10, 115, 10, 58, 
	10, 97, 10, 112, 10, 97, 10, 117, 
	10, 115, 10, 58, 97, 10, 105, 10, 
	104, 10, 105, 10, 111, 32, 124, 9, 
	13, 10, 32, 92, 124, 9, 13, 10, 
	92, 124, 10, 92, 10, 32, 92, 124, 
	9, 13, 10, 32, 34, 35, 37, 42, 
	64, 74, 75, 77, 78, 79, 84, 124, 
	9, 13, 10, 97, 10, 112, 117, 10, 
	97, 10, 117, 10, 107, 115, 10, 115, 
	10, 101, 10, 116, 10, 58, 97, 10, 
	105, 10, 104, 10, 105, 10, 111, 10, 
	115, 10, 116, 10, 97, 187, 191, 0
];

var _lexer_single_lengths = [
	0, 15, 14, 1, 1, 2, 2, 3, 
	3, 3, 3, 2, 2, 2, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 2, 2, 
	3, 5, 3, 1, 1, 1, 1, 1, 
	1, 1, 1, 2, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 7, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 14, 1, 
	2, 1, 1, 2, 1, 1, 1, 1, 
	1, 1, 5, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 1, 1, 
	12, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	3, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 3, 2, 2, 2, 3, 2, 2, 
	2, 2, 2, 2, 2, 1, 1, 1, 
	1, 1, 1, 1, 12, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 3, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 1, 
	1, 1, 1, 1, 1, 12, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 3, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 3, 2, 2, 2, 2, 2, 
	4, 3, 2, 4, 14, 2, 3, 2, 
	2, 3, 2, 2, 2, 3, 2, 2, 
	2, 2, 2, 2, 2, 1, 1, 0
];

var _lexer_range_lengths = [
	0, 1, 1, 0, 0, 0, 0, 1, 
	1, 1, 1, 1, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 1, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	1, 0, 0, 1, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0
];

var _lexer_index_offsets = [
	0, 0, 17, 33, 35, 37, 40, 43, 
	48, 53, 58, 63, 67, 71, 74, 76, 
	78, 80, 82, 84, 86, 88, 90, 92, 
	94, 96, 98, 100, 102, 104, 106, 109, 
	112, 117, 124, 129, 131, 133, 135, 137, 
	139, 141, 143, 145, 148, 150, 152, 154, 
	156, 158, 160, 162, 164, 166, 168, 170, 
	172, 174, 176, 178, 180, 182, 191, 194, 
	197, 200, 203, 206, 209, 212, 215, 218, 
	221, 224, 227, 230, 233, 236, 239, 242, 
	245, 248, 251, 254, 257, 260, 263, 279, 
	281, 284, 286, 288, 291, 293, 295, 297, 
	299, 301, 303, 310, 313, 316, 319, 322, 
	325, 328, 331, 334, 337, 340, 343, 345, 
	347, 361, 364, 367, 370, 373, 376, 379, 
	382, 385, 388, 391, 394, 397, 400, 403, 
	406, 409, 412, 415, 418, 421, 424, 427, 
	430, 434, 437, 440, 443, 446, 449, 452, 
	455, 458, 461, 464, 467, 470, 473, 476, 
	479, 482, 486, 489, 492, 495, 499, 502, 
	505, 508, 511, 514, 517, 520, 522, 524, 
	526, 528, 530, 532, 534, 548, 551, 554, 
	557, 560, 563, 566, 569, 572, 575, 578, 
	581, 584, 587, 590, 593, 596, 599, 602, 
	605, 608, 611, 614, 617, 621, 624, 627, 
	630, 633, 636, 639, 642, 645, 648, 651, 
	654, 657, 660, 663, 666, 669, 672, 675, 
	677, 679, 681, 683, 685, 687, 701, 704, 
	707, 710, 713, 716, 719, 722, 725, 728, 
	731, 734, 737, 740, 743, 746, 749, 752, 
	755, 758, 761, 764, 767, 770, 774, 777, 
	780, 783, 786, 789, 792, 795, 798, 801, 
	804, 807, 810, 813, 816, 819, 822, 825, 
	828, 831, 834, 838, 841, 844, 847, 850, 
	854, 860, 864, 867, 873, 889, 892, 896, 
	899, 902, 906, 909, 912, 915, 919, 922, 
	925, 928, 931, 934, 937, 940, 942, 944
];

var _lexer_indicies = [
	2, 1, 3, 4, 5, 6, 7, 8, 
	9, 10, 11, 12, 13, 14, 15, 1, 
	0, 2, 1, 3, 4, 5, 6, 7, 
	8, 9, 10, 11, 12, 13, 14, 1, 
	0, 16, 0, 17, 0, 19, 20, 18, 
	22, 23, 21, 26, 25, 27, 25, 24, 
	30, 29, 31, 29, 28, 30, 29, 32, 
	29, 28, 30, 29, 33, 29, 28, 35, 
	34, 34, 0, 2, 36, 36, 0, 38, 
	39, 37, 2, 0, 40, 0, 41, 0, 
	42, 0, 43, 0, 44, 0, 45, 0, 
	46, 0, 47, 0, 48, 0, 49, 0, 
	50, 0, 51, 0, 52, 0, 53, 0, 
	54, 0, 56, 57, 55, 59, 60, 58, 
	0, 0, 0, 0, 61, 62, 63, 62, 
	62, 65, 64, 61, 2, 66, 7, 66, 
	0, 67, 0, 68, 0, 67, 0, 69, 
	0, 70, 0, 71, 0, 72, 0, 68, 
	0, 73, 74, 0, 75, 0, 76, 0, 
	77, 0, 78, 0, 79, 0, 68, 0, 
	80, 0, 81, 0, 82, 0, 83, 0, 
	84, 0, 85, 0, 86, 0, 87, 0, 
	88, 0, 90, 89, 92, 91, 92, 93, 
	94, 95, 94, 96, 97, 93, 91, 92, 
	98, 91, 92, 99, 91, 92, 100, 91, 
	92, 101, 91, 92, 102, 91, 92, 103, 
	91, 92, 104, 91, 92, 105, 91, 92, 
	106, 91, 92, 107, 91, 92, 108, 91, 
	92, 109, 91, 92, 110, 91, 92, 111, 
	91, 92, 112, 91, 92, 113, 91, 92, 
	114, 91, 92, 115, 91, 92, 116, 91, 
	92, 117, 91, 92, 118, 91, 92, 119, 
	91, 92, 120, 91, 92, 121, 91, 123, 
	122, 124, 125, 126, 127, 128, 129, 130, 
	131, 132, 133, 134, 135, 122, 0, 136, 
	0, 137, 138, 0, 139, 0, 140, 0, 
	141, 142, 0, 143, 0, 144, 0, 145, 
	0, 146, 0, 148, 147, 150, 149, 150, 
	151, 152, 153, 152, 151, 149, 150, 154, 
	149, 150, 155, 149, 150, 156, 149, 150, 
	157, 149, 150, 158, 149, 150, 159, 149, 
	150, 160, 149, 150, 161, 149, 150, 162, 
	149, 150, 163, 149, 164, 165, 0, 167, 
	166, 169, 168, 169, 170, 171, 172, 173, 
	171, 174, 175, 176, 177, 178, 179, 170, 
	168, 169, 180, 168, 169, 181, 168, 169, 
	182, 168, 169, 183, 168, 169, 184, 168, 
	169, 185, 168, 169, 186, 168, 169, 187, 
	168, 169, 188, 168, 169, 189, 168, 169, 
	190, 168, 169, 191, 168, 169, 192, 168, 
	169, 193, 168, 169, 194, 168, 169, 195, 
	168, 169, 196, 168, 169, 195, 168, 169, 
	197, 168, 169, 198, 168, 169, 199, 168, 
	169, 200, 168, 169, 196, 168, 169, 201, 
	202, 168, 169, 203, 168, 169, 204, 168, 
	169, 205, 168, 169, 206, 168, 169, 207, 
	168, 169, 196, 168, 169, 208, 168, 169, 
	209, 168, 169, 210, 168, 169, 211, 168, 
	169, 212, 168, 169, 213, 168, 169, 214, 
	168, 169, 215, 168, 169, 194, 168, 169, 
	216, 168, 169, 217, 218, 168, 169, 219, 
	168, 169, 220, 168, 169, 221, 168, 169, 
	194, 222, 168, 169, 223, 168, 169, 224, 
	168, 169, 225, 168, 169, 215, 168, 169, 
	226, 168, 169, 227, 168, 169, 215, 168, 
	228, 0, 229, 0, 230, 0, 231, 0, 
	232, 0, 234, 233, 236, 235, 236, 237, 
	238, 239, 240, 238, 241, 242, 243, 244, 
	245, 246, 237, 235, 236, 247, 235, 236, 
	248, 235, 236, 249, 235, 236, 250, 235, 
	236, 251, 235, 236, 252, 235, 236, 253, 
	235, 236, 254, 235, 236, 255, 235, 236, 
	256, 235, 236, 257, 235, 236, 258, 235, 
	236, 259, 235, 236, 260, 235, 236, 261, 
	235, 236, 262, 235, 236, 263, 235, 236, 
	262, 235, 236, 264, 235, 236, 265, 235, 
	236, 266, 235, 236, 267, 235, 236, 263, 
	235, 236, 268, 269, 235, 236, 270, 235, 
	236, 271, 235, 236, 272, 235, 236, 273, 
	235, 236, 274, 235, 236, 263, 235, 236, 
	275, 235, 236, 276, 235, 236, 277, 235, 
	236, 278, 235, 236, 279, 235, 236, 280, 
	235, 236, 281, 235, 236, 282, 235, 236, 
	261, 235, 236, 283, 235, 236, 284, 235, 
	236, 280, 235, 285, 0, 286, 0, 287, 
	0, 288, 0, 290, 289, 292, 291, 292, 
	293, 294, 295, 296, 294, 297, 298, 299, 
	300, 301, 302, 293, 291, 292, 303, 291, 
	292, 304, 291, 292, 305, 291, 292, 306, 
	291, 292, 307, 291, 292, 308, 291, 292, 
	309, 291, 292, 310, 291, 292, 311, 291, 
	292, 312, 291, 292, 313, 291, 292, 314, 
	291, 292, 315, 291, 292, 316, 291, 292, 
	317, 291, 292, 318, 291, 292, 319, 291, 
	292, 318, 291, 292, 320, 291, 292, 321, 
	291, 292, 322, 291, 292, 323, 291, 292, 
	319, 291, 292, 324, 325, 291, 292, 326, 
	291, 292, 327, 291, 292, 328, 291, 292, 
	329, 291, 292, 330, 291, 292, 319, 291, 
	292, 331, 291, 292, 332, 291, 292, 333, 
	291, 292, 334, 291, 292, 335, 291, 292, 
	336, 291, 292, 337, 291, 292, 338, 291, 
	292, 317, 291, 292, 339, 291, 292, 340, 
	291, 292, 341, 291, 292, 342, 291, 292, 
	343, 291, 292, 317, 344, 291, 292, 345, 
	291, 292, 346, 291, 292, 347, 291, 292, 
	338, 291, 348, 349, 348, 0, 352, 351, 
	353, 354, 351, 350, 0, 356, 357, 355, 
	0, 356, 355, 352, 358, 356, 357, 358, 
	355, 352, 359, 360, 361, 362, 363, 364, 
	365, 366, 367, 368, 369, 370, 371, 359, 
	0, 92, 372, 91, 92, 373, 374, 91, 
	92, 375, 91, 92, 376, 91, 92, 377, 
	378, 91, 92, 379, 91, 92, 380, 91, 
	92, 120, 91, 92, 121, 381, 91, 92, 
	382, 91, 92, 383, 91, 92, 384, 91, 
	92, 120, 91, 92, 385, 91, 92, 386, 
	91, 92, 120, 91, 387, 0, 1, 0, 
	388, 0
];

var _lexer_trans_targs = [
	0, 2, 2, 3, 13, 15, 29, 32, 
	35, 36, 38, 41, 43, 87, 271, 293, 
	4, 5, 6, 7, 6, 6, 7, 6, 
	8, 8, 8, 9, 8, 8, 8, 9, 
	10, 11, 12, 2, 12, 13, 2, 14, 
	16, 17, 18, 19, 20, 21, 22, 23, 
	24, 25, 26, 27, 28, 295, 30, 31, 
	2, 14, 31, 2, 14, 33, 34, 2, 
	33, 32, 34, 29, 37, 39, 40, 35, 
	42, 44, 50, 45, 46, 47, 48, 49, 
	51, 52, 53, 54, 55, 56, 57, 58, 
	59, 60, 61, 60, 61, 61, 2, 62, 
	76, 277, 63, 64, 65, 66, 67, 68, 
	69, 70, 71, 72, 73, 74, 75, 2, 
	77, 78, 79, 80, 81, 82, 83, 84, 
	85, 86, 2, 2, 3, 13, 15, 29, 
	32, 35, 36, 38, 41, 43, 87, 271, 
	88, 89, 215, 90, 91, 92, 109, 93, 
	94, 95, 96, 97, 98, 97, 98, 98, 
	2, 99, 100, 101, 102, 103, 104, 105, 
	106, 107, 108, 86, 110, 165, 111, 112, 
	111, 112, 112, 2, 113, 127, 128, 129, 
	131, 134, 136, 152, 114, 115, 116, 117, 
	118, 119, 120, 121, 122, 123, 124, 125, 
	126, 2, 86, 127, 130, 132, 133, 128, 
	135, 137, 143, 138, 139, 140, 141, 142, 
	144, 145, 146, 147, 148, 149, 150, 151, 
	153, 154, 162, 155, 156, 157, 158, 159, 
	160, 161, 163, 164, 166, 167, 168, 169, 
	170, 171, 172, 171, 172, 172, 2, 173, 
	187, 188, 189, 191, 194, 196, 212, 174, 
	175, 176, 177, 178, 179, 180, 181, 182, 
	183, 184, 185, 186, 2, 86, 187, 190, 
	192, 193, 188, 195, 197, 203, 198, 199, 
	200, 201, 202, 204, 205, 206, 207, 208, 
	209, 210, 211, 213, 214, 216, 217, 218, 
	219, 220, 221, 220, 221, 221, 2, 222, 
	236, 237, 238, 240, 243, 245, 261, 223, 
	224, 225, 226, 227, 228, 229, 230, 231, 
	232, 233, 234, 235, 2, 86, 236, 239, 
	241, 242, 237, 244, 246, 252, 247, 248, 
	249, 250, 251, 253, 254, 255, 256, 257, 
	258, 259, 260, 262, 263, 264, 265, 266, 
	267, 268, 269, 270, 271, 272, 273, 275, 
	276, 274, 272, 273, 274, 272, 275, 276, 
	3, 13, 15, 29, 32, 35, 36, 38, 
	41, 43, 87, 271, 278, 279, 290, 280, 
	281, 282, 285, 283, 284, 286, 287, 288, 
	289, 291, 292, 294, 0
];

var _lexer_trans_actions = [
	43, 0, 54, 3, 1, 0, 29, 1, 
	29, 29, 29, 29, 29, 29, 35, 0, 
	0, 0, 7, 139, 48, 0, 102, 9, 
	5, 45, 134, 45, 0, 33, 122, 33, 
	33, 0, 11, 106, 0, 0, 114, 25, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 57, 
	149, 126, 0, 110, 23, 0, 27, 118, 
	27, 51, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 57, 144, 0, 54, 0, 69, 33, 
	84, 84, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 13, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 13, 31, 130, 60, 57, 31, 63, 
	57, 63, 63, 63, 63, 63, 63, 66, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 57, 144, 0, 54, 0, 
	81, 84, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 21, 0, 0, 57, 144, 
	0, 54, 0, 75, 33, 84, 84, 84, 
	84, 84, 84, 84, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 17, 17, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 57, 144, 0, 54, 0, 78, 33, 
	84, 84, 84, 84, 84, 84, 84, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 19, 19, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 57, 144, 0, 54, 0, 72, 33, 
	84, 84, 84, 84, 84, 84, 84, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 15, 15, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 37, 37, 
	54, 37, 87, 0, 0, 39, 0, 0, 
	93, 90, 41, 96, 90, 96, 96, 96, 
	96, 96, 96, 99, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0
];

var _lexer_eof_actions = [
	0, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43
];

var lexer_start = 1;
var lexer_first_final = 295;
var lexer_error = 0;

var lexer_en_main = 1;


/* line 129 "ragel/i18n/fi.js.rl" */

/* line 130 "ragel/i18n/fi.js.rl" */

/* line 131 "ragel/i18n/fi.js.rl" */

/* line 132 "ragel/i18n/fi.js.rl" */

var Lexer = function(listener) {
  // Check that listener has the required functions
  var events = ['comment', 'tag', 'feature', 'background', 'scenario', 'scenario_outline', 'examples', 'step', 'doc_string', 'row', 'eof'];
  for(var i=0, len=events.length; i<len; i++) {
    var event = events[i];
    if(typeof listener[event] != 'function') {
      throw new Error("Error. No " + event + " function exists on " + JSON.stringify(listener));
    }
  }
  this.listener = listener;
};

Lexer.prototype.scan = function(data) {
  var ending = "\n%_FEATURE_END_%";
  if(typeof data == 'string') {
    data = this.stringToBytes(data + ending);
  } else if(typeof Buffer != 'undefined' && Buffer.isBuffer(data)) {
    // Node.js
    var buf = new Buffer(data.length + ending.length);
    data.copy(buf, 0, 0);
    new Buffer(ending).copy(buf, data.length, 0);
    data = buf;
  }
  var eof = pe = data.length;
  var p = 0;

  this.line_number = 1;
  this.last_newline = 0;
  var signedCharValue=function(v){return v > 127 ? v-256 : v; };

  
/* line 594 "js/lib/gherkin/lexer/fi.js" */
{
	  this.cs = lexer_start;
} /* JSCodeGen::writeInit */

/* line 164 "ragel/i18n/fi.js.rl" */
  
/* line 601 "js/lib/gherkin/lexer/fi.js" */
{
	var _klen, _trans, _keys, _ps, _widec, _acts, _nacts;
	var _goto_level, _resume, _eof_trans, _again, _test_eof;
	var _out;
	_klen = _trans = _keys = _acts = _nacts = null;
	_goto_level = 0;
	_resume = 10;
	_eof_trans = 15;
	_again = 20;
	_test_eof = 30;
	_out = 40;
	while (true) {
	_trigger_goto = false;
	if (_goto_level <= 0) {
	if (p == pe) {
		_goto_level = _test_eof;
		continue;
	}
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	}
	if (_goto_level <= _resume) {
	_keys = _lexer_key_offsets[ this.cs];
	_trans = _lexer_index_offsets[ this.cs];
	_klen = _lexer_single_lengths[ this.cs];
	_break_match = false;
	
	do {
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + _klen - 1;

	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + ( (_upper - _lower) >> 1 );

	        if (( signedCharValue(data[p])) < _lexer_trans_keys[_mid]) {
	           _upper = _mid - 1;
	        } else if (( signedCharValue(data[p])) > _lexer_trans_keys[_mid]) {
	           _lower = _mid + 1;
	        } else {
	           _trans += (_mid - _keys);
	           _break_match = true;
	           break;
	        };
	     } /* while */
	     if (_break_match) { break; }
	     _keys += _klen;
	     _trans += _klen;
	  }
	  _klen = _lexer_range_lengths[ this.cs];
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + (_klen << 1) - 2;
	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + (((_upper-_lower) >> 1) & ~1);
	        if (( signedCharValue(data[p])) < _lexer_trans_keys[_mid]) {
	          _upper = _mid - 2;
	         } else if (( signedCharValue(data[p])) > _lexer_trans_keys[_mid+1]) {
	          _lower = _mid + 2;
	        } else {
	          _trans += ((_mid - _keys) >> 1);
	          _break_match = true;
	          break;
	        }
	     } /* while */
	     if (_break_match) { break; }
	     _trans += _klen
	  }
	} while (false);
	_trans = _lexer_indicies[_trans];
	 this.cs = _lexer_trans_targs[_trans];
	if (_lexer_trans_actions[_trans] != 0) {
		_acts = _lexer_trans_actions[_trans];
		_nacts = _lexer_actions[_acts];
		_acts += 1;
		while (_nacts > 0) {
			_nacts -= 1;
			_acts += 1;
			switch (_lexer_actions[_acts - 1]) {
case 0:
/* line 6 "ragel/i18n/fi.js.rl" */

    this.content_start = p;
    this.current_line = this.line_number;
    this.start_col = p - this.last_newline - (this.keyword+':').length;
  		break;
case 1:
/* line 12 "ragel/i18n/fi.js.rl" */

    this.current_line = this.line_number;
    this.start_col = p - this.last_newline;
  		break;
case 2:
/* line 17 "ragel/i18n/fi.js.rl" */

    this.content_start = p;
  		break;
case 3:
/* line 21 "ragel/i18n/fi.js.rl" */

    this.docstring_content_type_start = p;
  		break;
case 4:
/* line 25 "ragel/i18n/fi.js.rl" */

    this.docstring_content_type_end = p;
  		break;
case 5:
/* line 29 "ragel/i18n/fi.js.rl" */

    var con = this.unindent(
      this.start_col, 
      this.bytesToString(data.slice(this.content_start, this.next_keyword_start-1)).replace(/(\r?\n)?([\t ])*$/, '').replace(/\\\"\\\"\\\"/mg, '"""')
    );
    var con_type = this.bytesToString(data.slice(this.docstring_content_type_start, this.docstring_content_type_end)).trim();
    this.listener.doc_string(con_type, con, this.current_line); 
  		break;
case 6:
/* line 38 "ragel/i18n/fi.js.rl" */

    p = this.store_keyword_content('feature', data, p, eof);
  		break;
case 7:
/* line 42 "ragel/i18n/fi.js.rl" */

    p = this.store_keyword_content('background', data, p, eof);
  		break;
case 8:
/* line 46 "ragel/i18n/fi.js.rl" */

    p = this.store_keyword_content('scenario', data, p, eof);
  		break;
case 9:
/* line 50 "ragel/i18n/fi.js.rl" */

    p = this.store_keyword_content('scenario_outline', data, p, eof);
  		break;
case 10:
/* line 54 "ragel/i18n/fi.js.rl" */

    p = this.store_keyword_content('examples', data, p, eof);
  		break;
case 11:
/* line 58 "ragel/i18n/fi.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.step(this.keyword, con, this.current_line);
  		break;
case 12:
/* line 63 "ragel/i18n/fi.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.comment(con, this.line_number);
    this.keyword_start = null;
  		break;
case 13:
/* line 69 "ragel/i18n/fi.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.tag(con, this.line_number);
    this.keyword_start = null;
  		break;
case 14:
/* line 75 "ragel/i18n/fi.js.rl" */

    this.line_number++;
  		break;
case 15:
/* line 79 "ragel/i18n/fi.js.rl" */

    this.last_newline = p + 1;
  		break;
case 16:
/* line 83 "ragel/i18n/fi.js.rl" */

    this.keyword_start = this.keyword_start || p;
  		break;
case 17:
/* line 87 "ragel/i18n/fi.js.rl" */

    this.keyword = this.bytesToString(data.slice(this.keyword_start, p)).replace(/:$/, '');
    this.keyword_start = null;
  		break;
case 18:
/* line 92 "ragel/i18n/fi.js.rl" */

    this.next_keyword_start = p;
  		break;
case 19:
/* line 96 "ragel/i18n/fi.js.rl" */

    p = p - 1;
    current_row = [];
    this.current_line = this.line_number;
  		break;
case 20:
/* line 102 "ragel/i18n/fi.js.rl" */

    this.content_start = p;
  		break;
case 21:
/* line 106 "ragel/i18n/fi.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    current_row.push(con.replace(/\\\|/, "|").replace(/\\n/, "\n").replace(/\\\\/, "\\"));
  		break;
case 22:
/* line 111 "ragel/i18n/fi.js.rl" */

    this.listener.row(current_row, this.current_line);
  		break;
case 23:
/* line 115 "ragel/i18n/fi.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw new Error("Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.");
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 828 "js/lib/gherkin/lexer/fi.js" */
			} /* action switch */
		}
	}
	if (_trigger_goto) {
		continue;
	}
	}
	if (_goto_level <= _again) {
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	p += 1;
	if (p != pe) {
		_goto_level = _resume;
		continue;
	}
	}
	if (_goto_level <= _test_eof) {
	if (p == eof) {
	__acts = _lexer_eof_actions[ this.cs];
	__nacts =  _lexer_actions[__acts];
	__acts += 1;
	while (__nacts > 0) {
		__nacts -= 1;
		__acts += 1;
		switch (_lexer_actions[__acts - 1]) {
case 23:
/* line 115 "ragel/i18n/fi.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw new Error("Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.");
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 867 "js/lib/gherkin/lexer/fi.js" */
		} /* eof action switch */
	}
	if (_trigger_goto) {
		continue;
	}
}
	}
	if (_goto_level <= _out) {
		break;
	}
	}
	}

/* line 165 "ragel/i18n/fi.js.rl" */
};


/*
 * Decode utf-8 byte sequence to string.
 */
var decodeUtf8 = function(bytes) {
  var result = "";
  var i = 0;
  var wc;
  var c;

  while (i < bytes.length) {
    /* parse as UTF-8 lead byte */
    wc = bytes[i++];
    if (wc < 0x80) {
      count = 0;
    } else if (wc < 0xC2 || wc >= 0xF8) {
      throw new Error("input is not a valid UTF-8 lead octet");
    } else if (wc < 0xE0) {
      count = 1;
      wc = (wc & 0x1F) << 6;
    } else if (wc < 0xF0) {
      count = 2;
      wc = (wc & 0x0F) << 12;
    } else /* wc < 0xF8 */ {
      count = 3;
      wc = (wc & 0x07) << 18;
    }

    /* parse trail bytes, if any */
    while (count) {
      if (!(i < bytes.length)) {
        throw new Error("short read");
      }
      if ((c = bytes[i++] ^ 0x80) > 0x3F) {
        throw new Error("input is not a valid UTF-8 trail octet");
      }
      wc |= c << (6 * --count);
      if (wc < (1 << (5 * count + 6))) {
        throw new Error("invalid non-minimal encoded input");
      }
    }

    /* handle conversion to UTF-16 if needed */
    if (wc > 0xFFFF) {
      wc -= 0x10000;
      result += String.fromCharCode(0xD800 + (wc >> 10));
      wc = 0xDC00 + (wc & 0x3FF);
    }
    result += String.fromCharCode(wc);
  }

  return result;
};

/*
 * Encode string to an array of bytes using utf8 encoding.
 *
 * Javascript internally stores character data as utf16 (like java).
 * String.charCodeAt() does *not* produce unicode points, but simply
 * reflects this internal representation. Thus, it is necessary
 * to first decode the utf-16 representation before encoding to
 * utf-8.
 */
var encodeUtf8 = function(string) {
  var bytes = [];
  var i = 0;
  var j = 0;
  var wc;

  while (i < string.length) {
    wc = string.charCodeAt(i++);
    if (wc >= 0xD800 && wc <= 0xDBFF && i < string.length && string.charCodeAt(i) >= 0xDC00 && string.charCodeAt(i) <= 0xDFFF) {
      /* decode UTF-16 */
      wc = 0x10000 + ((wc & 0x3FF) << 10) + (string.charCodeAt(i++) & 0x3FF);
    }

    /* emit lead byte */
    if (wc < 0x80) {
      bytes[j++] = wc;
      count = 0;
    } else if (wc < 0x800) {
      bytes[j++] = 0xC0 | (wc >> 6);
      count = 1;
    } else if (wc < 0x10000) {
      bytes[j++] = 0xE0 | (wc >> 12);
      count = 2;
    } else {
      /* SMP: 21-bit Unicode */
      bytes[j++] = 0xF0 | (wc >> 18);
      count = 3;
    }

    /* emit trail bytes, if any */
    while (count) {
      bytes[j++] = 0x80 | ((wc >> (6 * --count)) & 0x3F);
    }
  }

  return bytes;

};

Lexer.prototype.bytesToString = function(bytes) {
  if(typeof bytes.write == 'function') {
    // Node.js
    return bytes.toString('utf-8');
  }
  return decodeUtf8(bytes);
};

Lexer.prototype.stringToBytes = function(string) {
  return encodeUtf8(string);
};

Lexer.prototype.unindent = function(startcol, text) {
  startcol = startcol || 0;
  return text.replace(new RegExp('^[\t ]{0,' + startcol + '}', 'gm'), ''); 
};

Lexer.prototype.store_keyword_content = function(event, data, p, eof) {
  var end_point = (!this.next_keyword_start || (p == eof)) ? p : this.next_keyword_start;
  var content = this.unindent(this.start_col + 2, this.bytesToString(data.slice(this.content_start, end_point))).replace(/\s+$/,"");
  var content_lines = content.split("\n")
  var name = content_lines.shift() || "";
  name = name.trim();
  var description = content_lines.join("\n");
  this.listener[event](this.keyword, name, description, this.current_line);
  var nks = this.next_keyword_start;
  this.next_keyword_start = null;
  return nks ? nks - 1 : p;
};

Lexer.prototype.current_line_content = function(data, p) {
  var rest = Array.prototype.slice.call(data,this.last_newline, -1);
  var end = rest.indexOf(10) || -1;
  return this.bytesToString(rest.slice(0, end)).trim();
};

// Node.js export
if(typeof module !== 'undefined') {
  module.exports = Lexer;
}
// Require.js export
if (typeof define !== 'undefined') {
  if(define.amd) {
    define('gherkin/lexer/fi', [], function() {
      return Lexer;
    });
  } else {
    define('gherkin/lexer/fi', function(require, exports, module) {
      exports.Lexer = Lexer;
    });
  }
}

})();

}).call(this,require("buffer").Buffer)

},{"buffer":69}],206:[function(require,module,exports){
(function (Buffer){

/* line 1 "ragel/i18n/fr.js.rl" */
;(function() {


/* line 126 "ragel/i18n/fr.js.rl" */



/* line 11 "js/lib/gherkin/lexer/fr.js" */
var _lexer_actions = [
	0, 1, 0, 1, 1, 1, 2, 1, 
	3, 1, 4, 1, 5, 1, 6, 1, 
	7, 1, 8, 1, 9, 1, 10, 1, 
	11, 1, 12, 1, 13, 1, 16, 1, 
	17, 1, 18, 1, 19, 1, 20, 1, 
	21, 1, 22, 1, 23, 2, 2, 18, 
	2, 3, 4, 2, 13, 0, 2, 14, 
	15, 2, 17, 0, 2, 17, 1, 2, 
	17, 16, 2, 17, 19, 2, 18, 6, 
	2, 18, 7, 2, 18, 8, 2, 18, 
	9, 2, 18, 10, 2, 18, 16, 2, 
	20, 21, 2, 22, 0, 2, 22, 1, 
	2, 22, 16, 2, 22, 19, 3, 4, 
	14, 15, 3, 5, 14, 15, 3, 11, 
	14, 15, 3, 12, 14, 15, 3, 13, 
	14, 15, 3, 14, 15, 18, 3, 17, 
	0, 11, 3, 17, 14, 15, 4, 2, 
	14, 15, 18, 4, 3, 4, 14, 15, 
	4, 17, 0, 14, 15, 5, 17, 0, 
	11, 14, 15
];

var _lexer_key_offsets = [
	0, 0, 21, 22, 23, 24, 25, 26, 
	27, 28, 29, 30, 31, 32, 33, 36, 
	38, 40, 60, 61, 62, 64, 66, 71, 
	76, 81, 86, 90, 94, 96, 97, 98, 
	99, 100, 101, 102, 103, 104, 105, 106, 
	107, 108, 109, 110, 111, 112, 117, 124, 
	129, 130, 131, 132, 133, 134, 135, 136, 
	137, 138, 139, 140, 141, 142, 143, 160, 
	162, 164, 166, 168, 170, 172, 174, 176, 
	178, 180, 182, 184, 188, 208, 210, 212, 
	213, 214, 215, 216, 217, 218, 219, 220, 
	221, 228, 230, 232, 234, 236, 238, 240, 
	242, 244, 246, 248, 250, 252, 254, 256, 
	258, 259, 260, 261, 262, 263, 264, 265, 
	266, 267, 268, 269, 270, 271, 272, 273, 
	274, 275, 287, 289, 291, 293, 295, 297, 
	299, 301, 303, 305, 307, 309, 311, 313, 
	315, 317, 319, 321, 323, 325, 327, 329, 
	331, 333, 335, 337, 339, 341, 343, 345, 
	347, 349, 351, 353, 355, 357, 359, 361, 
	363, 365, 367, 369, 371, 373, 375, 377, 
	379, 381, 383, 385, 387, 390, 392, 394, 
	396, 398, 400, 402, 404, 406, 407, 408, 
	409, 410, 411, 413, 414, 415, 416, 417, 
	418, 419, 420, 421, 422, 424, 425, 426, 
	427, 428, 429, 430, 431, 432, 433, 434, 
	435, 451, 453, 455, 457, 459, 461, 463, 
	465, 467, 469, 471, 473, 475, 479, 482, 
	484, 486, 488, 490, 492, 494, 496, 498, 
	500, 502, 504, 506, 508, 510, 512, 514, 
	516, 518, 520, 522, 525, 527, 529, 531, 
	533, 535, 537, 539, 541, 543, 545, 547, 
	549, 551, 553, 555, 557, 559, 561, 563, 
	565, 568, 570, 572, 574, 576, 578, 580, 
	583, 585, 587, 589, 591, 593, 595, 597, 
	599, 601, 602, 603, 604, 605, 607, 608, 
	609, 610, 611, 612, 613, 614, 615, 616, 
	617, 635, 637, 639, 641, 643, 645, 647, 
	649, 651, 653, 655, 657, 659, 663, 666, 
	668, 670, 672, 674, 676, 678, 680, 682, 
	684, 686, 688, 690, 692, 694, 696, 698, 
	700, 702, 704, 706, 708, 710, 712, 714, 
	716, 718, 720, 722, 725, 727, 729, 731, 
	733, 735, 737, 739, 741, 743, 745, 747, 
	749, 751, 753, 755, 757, 759, 761, 763, 
	766, 768, 770, 772, 774, 776, 778, 780, 
	782, 784, 787, 789, 791, 793, 795, 797, 
	799, 801, 803, 805, 807, 809, 811, 814, 
	816, 818, 819, 820, 824, 830, 833, 835, 
	841, 861, 864, 866, 868, 870, 872, 874, 
	876, 878, 880, 882, 884, 886, 888, 890, 
	892, 894, 896, 898, 900, 902, 904, 907, 
	909, 911, 913, 915, 917, 919, 921, 923, 
	925, 927, 929, 931, 933, 935, 937, 939, 
	941, 943, 945, 947, 950, 952, 954, 956, 
	958, 960, 962, 964, 966, 968, 971, 973, 
	975, 977, 979, 981, 983, 985, 987, 989, 
	991, 993, 995, 998, 1000, 1002, 1004, 1005, 
	1006
];

var _lexer_trans_keys = [
	-61, 10, 32, 34, 35, 37, 42, 64, 
	65, 67, 69, 70, 76, 77, 80, 81, 
	83, 124, 239, 9, 13, -119, 116, 97, 
	110, 116, 32, 100, 111, 110, 110, -61, 
	-87, 32, 101, 115, 10, 13, 10, 13, 
	-61, 10, 32, 34, 35, 37, 42, 64, 
	65, 67, 69, 70, 76, 77, 80, 81, 
	83, 124, 9, 13, 34, 34, 10, 13, 
	10, 13, 10, 32, 34, 9, 13, 10, 
	32, 34, 9, 13, 10, 32, 34, 9, 
	13, 10, 32, 34, 9, 13, 10, 32, 
	9, 13, 10, 32, 9, 13, 10, 13, 
	10, 95, 70, 69, 65, 84, 85, 82, 
	69, 95, 69, 78, 68, 95, 37, 32, 
	13, 32, 64, 9, 10, 9, 10, 13, 
	32, 64, 11, 12, 10, 32, 64, 9, 
	13, 108, 111, 114, 115, 111, 110, 116, 
	101, 120, 116, 101, 58, 10, 10, -61, 
	10, 32, 35, 37, 42, 64, 65, 69, 
	70, 76, 77, 80, 81, 83, 9, 13, 
	-119, 10, 10, 116, 10, 97, 10, 110, 
	10, 116, 10, 32, 10, 100, 10, 111, 
	10, 110, 10, 110, -61, 10, -87, 10, 
	10, 32, 101, 115, -61, 10, 32, 34, 
	35, 37, 42, 64, 65, 67, 69, 70, 
	76, 77, 80, 81, 83, 124, 9, 13, 
	116, 120, 32, 97, 101, 109, 112, 108, 
	101, 115, 58, 10, 10, 10, 32, 35, 
	70, 124, 9, 13, 10, 111, 10, 110, 
	10, 99, 10, 116, 10, 105, 10, 111, 
	10, 110, 10, 110, 10, 97, 10, 108, 
	10, 105, 10, 116, -61, 10, -87, 10, 
	10, 58, 111, 110, 99, 116, 105, 111, 
	110, 110, 97, 108, 105, 116, -61, -87, 
	58, 10, 10, 10, 32, 35, 37, 64, 
	67, 69, 70, 80, 83, 9, 13, 10, 
	95, 10, 70, 10, 69, 10, 65, 10, 
	84, 10, 85, 10, 82, 10, 69, 10, 
	95, 10, 69, 10, 78, 10, 68, 10, 
	95, 10, 37, 10, 111, 10, 110, 10, 
	116, 10, 101, 10, 120, 10, 116, 10, 
	101, 10, 58, 10, 120, 10, 101, 10, 
	109, 10, 112, 10, 108, 10, 101, 10, 
	115, 10, 111, 10, 110, 10, 99, 10, 
	116, 10, 105, 10, 111, 10, 110, 10, 
	110, 10, 97, 10, 108, 10, 105, 10, 
	116, -61, 10, -87, 10, 10, 108, 10, 
	97, 10, 110, 10, 32, 10, 100, 10, 
	117, 10, 32, 10, 83, 115, 10, 99, 
	-61, 10, -87, 10, 10, 110, 10, 97, 
	10, 114, 10, 105, 10, 111, 111, 114, 
	115, 113, 117, 39, 101, 97, 105, 108, 
	97, 110, 32, 100, 117, 32, 83, 115, 
	99, -61, -87, 110, 97, 114, 105, 111, 
	58, 10, 10, -61, 10, 32, 35, 37, 
	42, 64, 65, 69, 70, 76, 77, 81, 
	83, 9, 13, -119, 10, 10, 116, 10, 
	97, 10, 110, 10, 116, 10, 32, 10, 
	100, 10, 111, 10, 110, 10, 110, -61, 
	10, -87, 10, 10, 32, 101, 115, 10, 
	32, 115, 10, 32, 10, 95, 10, 70, 
	10, 69, 10, 65, 10, 84, 10, 85, 
	10, 82, 10, 69, 10, 95, 10, 69, 
	10, 78, 10, 68, 10, 95, 10, 37, 
	10, 108, 10, 111, 10, 114, 10, 115, 
	10, 116, 10, 32, 97, 10, 111, 10, 
	110, 10, 99, 10, 116, 10, 105, 10, 
	111, 10, 110, 10, 110, 10, 97, 10, 
	108, 10, 105, 10, 116, -61, 10, -87, 
	10, 10, 58, 10, 111, 10, 114, 10, 
	115, 10, 113, 10, 117, 10, 39, 101, 
	10, 97, 10, 105, 10, 117, 10, 97, 
	10, 110, 10, 100, 10, 99, 111, -61, 
	10, -87, 10, 10, 110, 10, 97, 10, 
	114, 10, 105, 10, 111, 10, 105, 10, 
	116, 117, 97, 110, 100, 99, 111, -61, 
	-87, 110, 97, 114, 105, 111, 58, 10, 
	10, -61, 10, 32, 35, 37, 42, 64, 
	65, 67, 69, 70, 76, 77, 80, 81, 
	83, 9, 13, -119, 10, 10, 116, 10, 
	97, 10, 110, 10, 116, 10, 32, 10, 
	100, 10, 111, 10, 110, 10, 110, -61, 
	10, -87, 10, 10, 32, 101, 115, 10, 
	32, 115, 10, 32, 10, 95, 10, 70, 
	10, 69, 10, 65, 10, 84, 10, 85, 
	10, 82, 10, 69, 10, 95, 10, 69, 
	10, 78, 10, 68, 10, 95, 10, 37, 
	10, 108, 10, 111, 10, 114, 10, 115, 
	10, 111, 10, 110, 10, 116, 10, 101, 
	10, 120, 10, 116, 10, 101, 10, 58, 
	10, 116, 10, 32, 97, 10, 111, 10, 
	110, 10, 99, 10, 116, 10, 105, 10, 
	111, 10, 110, 10, 110, 10, 97, 10, 
	108, 10, 105, 10, 116, -61, 10, -87, 
	10, 10, 111, 10, 114, 10, 115, 10, 
	113, 10, 117, 10, 39, 101, 10, 97, 
	10, 105, 10, 108, 10, 97, 10, 110, 
	10, 32, 10, 100, 10, 117, 10, 32, 
	10, 83, 115, 10, 99, -61, 10, -87, 
	10, 10, 110, 10, 97, 10, 114, 10, 
	105, 10, 111, 10, 117, 10, 97, 10, 
	110, 10, 100, 10, 99, 111, 10, 105, 
	10, 116, 105, 116, 32, 124, 9, 13, 
	10, 32, 92, 124, 9, 13, 10, 92, 
	124, 10, 92, 10, 32, 92, 124, 9, 
	13, -61, 10, 32, 34, 35, 37, 42, 
	64, 65, 67, 69, 70, 76, 77, 80, 
	81, 83, 124, 9, 13, 10, 32, 115, 
	10, 32, 10, 95, 10, 70, 10, 69, 
	10, 65, 10, 84, 10, 85, 10, 82, 
	10, 69, 10, 95, 10, 69, 10, 78, 
	10, 68, 10, 95, 10, 37, 10, 108, 
	10, 111, 10, 114, 10, 115, 10, 116, 
	10, 32, 97, 10, 111, 10, 110, 10, 
	99, 10, 116, 10, 105, 10, 111, 10, 
	110, 10, 110, 10, 97, 10, 108, 10, 
	105, 10, 116, -61, 10, -87, 10, 10, 
	58, 10, 111, 10, 114, 10, 115, 10, 
	113, 10, 117, 10, 39, 101, 10, 97, 
	10, 105, 10, 108, 10, 97, 10, 110, 
	10, 32, 10, 100, 10, 117, 10, 32, 
	10, 83, 115, 10, 99, -61, 10, -87, 
	10, 10, 110, 10, 97, 10, 114, 10, 
	105, 10, 111, 10, 117, 10, 97, 10, 
	110, 10, 100, 10, 99, 111, 10, 105, 
	10, 116, 32, 115, 187, 191, 0
];

var _lexer_single_lengths = [
	0, 19, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 3, 2, 
	2, 18, 1, 1, 2, 2, 3, 3, 
	3, 3, 2, 2, 2, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 3, 5, 3, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 15, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 4, 18, 2, 2, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	5, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 10, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 3, 2, 2, 2, 
	2, 2, 2, 2, 2, 1, 1, 1, 
	1, 1, 2, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 2, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	14, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 4, 3, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 3, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	3, 2, 2, 2, 2, 2, 2, 3, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 1, 1, 1, 1, 2, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	16, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 4, 3, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 3, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 3, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 3, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 3, 2, 
	2, 1, 1, 2, 4, 3, 2, 4, 
	18, 3, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 3, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 3, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 3, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 3, 2, 2, 2, 1, 1, 
	0
];

var _lexer_range_lengths = [
	0, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 0, 0, 0, 0, 1, 1, 
	1, 1, 1, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 1, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 1, 0, 0, 1, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0
];

var _lexer_index_offsets = [
	0, 0, 21, 23, 25, 27, 29, 31, 
	33, 35, 37, 39, 41, 43, 45, 49, 
	52, 55, 75, 77, 79, 82, 85, 90, 
	95, 100, 105, 109, 113, 116, 118, 120, 
	122, 124, 126, 128, 130, 132, 134, 136, 
	138, 140, 142, 144, 146, 148, 153, 160, 
	165, 167, 169, 171, 173, 175, 177, 179, 
	181, 183, 185, 187, 189, 191, 193, 210, 
	213, 216, 219, 222, 225, 228, 231, 234, 
	237, 240, 243, 246, 251, 271, 274, 277, 
	279, 281, 283, 285, 287, 289, 291, 293, 
	295, 302, 305, 308, 311, 314, 317, 320, 
	323, 326, 329, 332, 335, 338, 341, 344, 
	347, 349, 351, 353, 355, 357, 359, 361, 
	363, 365, 367, 369, 371, 373, 375, 377, 
	379, 381, 393, 396, 399, 402, 405, 408, 
	411, 414, 417, 420, 423, 426, 429, 432, 
	435, 438, 441, 444, 447, 450, 453, 456, 
	459, 462, 465, 468, 471, 474, 477, 480, 
	483, 486, 489, 492, 495, 498, 501, 504, 
	507, 510, 513, 516, 519, 522, 525, 528, 
	531, 534, 537, 540, 543, 547, 550, 553, 
	556, 559, 562, 565, 568, 571, 573, 575, 
	577, 579, 581, 584, 586, 588, 590, 592, 
	594, 596, 598, 600, 602, 605, 607, 609, 
	611, 613, 615, 617, 619, 621, 623, 625, 
	627, 643, 646, 649, 652, 655, 658, 661, 
	664, 667, 670, 673, 676, 679, 684, 688, 
	691, 694, 697, 700, 703, 706, 709, 712, 
	715, 718, 721, 724, 727, 730, 733, 736, 
	739, 742, 745, 748, 752, 755, 758, 761, 
	764, 767, 770, 773, 776, 779, 782, 785, 
	788, 791, 794, 797, 800, 803, 806, 809, 
	812, 816, 819, 822, 825, 828, 831, 834, 
	838, 841, 844, 847, 850, 853, 856, 859, 
	862, 865, 867, 869, 871, 873, 876, 878, 
	880, 882, 884, 886, 888, 890, 892, 894, 
	896, 914, 917, 920, 923, 926, 929, 932, 
	935, 938, 941, 944, 947, 950, 955, 959, 
	962, 965, 968, 971, 974, 977, 980, 983, 
	986, 989, 992, 995, 998, 1001, 1004, 1007, 
	1010, 1013, 1016, 1019, 1022, 1025, 1028, 1031, 
	1034, 1037, 1040, 1043, 1047, 1050, 1053, 1056, 
	1059, 1062, 1065, 1068, 1071, 1074, 1077, 1080, 
	1083, 1086, 1089, 1092, 1095, 1098, 1101, 1104, 
	1108, 1111, 1114, 1117, 1120, 1123, 1126, 1129, 
	1132, 1135, 1139, 1142, 1145, 1148, 1151, 1154, 
	1157, 1160, 1163, 1166, 1169, 1172, 1175, 1179, 
	1182, 1185, 1187, 1189, 1193, 1199, 1203, 1206, 
	1212, 1232, 1236, 1239, 1242, 1245, 1248, 1251, 
	1254, 1257, 1260, 1263, 1266, 1269, 1272, 1275, 
	1278, 1281, 1284, 1287, 1290, 1293, 1296, 1300, 
	1303, 1306, 1309, 1312, 1315, 1318, 1321, 1324, 
	1327, 1330, 1333, 1336, 1339, 1342, 1345, 1348, 
	1351, 1354, 1357, 1360, 1364, 1367, 1370, 1373, 
	1376, 1379, 1382, 1385, 1388, 1391, 1395, 1398, 
	1401, 1404, 1407, 1410, 1413, 1416, 1419, 1422, 
	1425, 1428, 1431, 1435, 1438, 1441, 1444, 1446, 
	1448
];

var _lexer_indicies = [
	1, 3, 2, 4, 5, 6, 7, 8, 
	9, 10, 11, 12, 13, 14, 15, 16, 
	17, 18, 19, 2, 0, 20, 0, 21, 
	0, 22, 0, 23, 0, 24, 0, 25, 
	0, 26, 0, 27, 0, 28, 0, 29, 
	0, 30, 0, 31, 0, 32, 33, 34, 
	0, 36, 37, 35, 39, 40, 38, 1, 
	3, 2, 4, 5, 6, 7, 8, 9, 
	10, 11, 12, 13, 14, 15, 16, 17, 
	18, 2, 0, 41, 0, 42, 0, 44, 
	45, 43, 47, 48, 46, 51, 50, 52, 
	50, 49, 55, 54, 56, 54, 53, 55, 
	54, 57, 54, 53, 55, 54, 58, 54, 
	53, 60, 59, 59, 0, 3, 61, 61, 
	0, 63, 64, 62, 3, 0, 65, 0, 
	66, 0, 67, 0, 68, 0, 69, 0, 
	70, 0, 71, 0, 72, 0, 73, 0, 
	74, 0, 75, 0, 76, 0, 77, 0, 
	78, 0, 32, 0, 0, 0, 0, 0, 
	79, 80, 81, 80, 80, 83, 82, 79, 
	3, 84, 8, 84, 0, 85, 0, 86, 
	0, 87, 0, 34, 0, 88, 0, 89, 
	0, 90, 0, 91, 0, 92, 0, 93, 
	0, 94, 0, 95, 0, 97, 96, 99, 
	98, 100, 99, 101, 102, 103, 104, 102, 
	105, 106, 107, 108, 109, 110, 111, 112, 
	101, 98, 113, 99, 98, 99, 114, 98, 
	99, 115, 98, 99, 116, 98, 99, 117, 
	98, 99, 118, 98, 99, 119, 98, 99, 
	120, 98, 99, 121, 98, 99, 122, 98, 
	123, 99, 98, 124, 99, 98, 99, 125, 
	126, 127, 98, 128, 130, 129, 131, 132, 
	133, 134, 135, 136, 137, 138, 139, 140, 
	141, 142, 143, 144, 145, 129, 0, 146, 
	147, 0, 32, 22, 0, 148, 0, 149, 
	0, 150, 0, 151, 0, 152, 0, 153, 
	0, 154, 0, 156, 155, 158, 157, 158, 
	159, 160, 161, 160, 159, 157, 158, 162, 
	157, 158, 163, 157, 158, 164, 157, 158, 
	165, 157, 158, 166, 157, 158, 167, 157, 
	158, 168, 157, 158, 169, 157, 158, 170, 
	157, 158, 171, 157, 158, 172, 157, 158, 
	173, 157, 174, 158, 157, 175, 158, 157, 
	158, 176, 157, 177, 0, 178, 0, 179, 
	0, 180, 0, 181, 0, 182, 0, 183, 
	0, 184, 0, 185, 0, 186, 0, 187, 
	0, 188, 0, 189, 0, 190, 0, 191, 
	0, 193, 192, 195, 194, 195, 196, 197, 
	198, 197, 199, 200, 201, 202, 203, 196, 
	194, 195, 204, 194, 195, 205, 194, 195, 
	206, 194, 195, 207, 194, 195, 208, 194, 
	195, 209, 194, 195, 210, 194, 195, 211, 
	194, 195, 212, 194, 195, 213, 194, 195, 
	214, 194, 195, 215, 194, 195, 216, 194, 
	195, 217, 194, 195, 218, 194, 195, 219, 
	194, 195, 220, 194, 195, 221, 194, 195, 
	222, 194, 195, 223, 194, 195, 224, 194, 
	195, 225, 194, 195, 226, 194, 195, 227, 
	194, 195, 228, 194, 195, 229, 194, 195, 
	230, 194, 195, 231, 194, 195, 224, 194, 
	195, 232, 194, 195, 233, 194, 195, 234, 
	194, 195, 235, 194, 195, 236, 194, 195, 
	237, 194, 195, 238, 194, 195, 239, 194, 
	195, 240, 194, 195, 241, 194, 195, 242, 
	194, 195, 243, 194, 244, 195, 194, 224, 
	195, 194, 195, 245, 194, 195, 246, 194, 
	195, 247, 194, 195, 248, 194, 195, 249, 
	194, 195, 250, 194, 195, 251, 194, 195, 
	252, 252, 194, 195, 253, 194, 254, 195, 
	194, 255, 195, 194, 195, 256, 194, 195, 
	257, 194, 195, 258, 194, 195, 259, 194, 
	195, 224, 194, 260, 0, 261, 0, 262, 
	0, 263, 0, 264, 0, 32, 34, 0, 
	265, 0, 87, 0, 266, 0, 267, 0, 
	268, 0, 269, 0, 270, 0, 271, 0, 
	272, 0, 273, 273, 0, 274, 0, 275, 
	0, 276, 0, 277, 0, 278, 0, 279, 
	0, 280, 0, 281, 0, 282, 0, 284, 
	283, 286, 285, 287, 286, 288, 289, 290, 
	291, 289, 292, 293, 294, 295, 296, 297, 
	298, 288, 285, 299, 286, 285, 286, 300, 
	285, 286, 301, 285, 286, 302, 285, 286, 
	303, 285, 286, 304, 285, 286, 305, 285, 
	286, 306, 285, 286, 307, 285, 286, 308, 
	285, 309, 286, 285, 310, 286, 285, 286, 
	311, 312, 313, 285, 286, 311, 313, 285, 
	286, 311, 285, 286, 314, 285, 286, 315, 
	285, 286, 316, 285, 286, 317, 285, 286, 
	318, 285, 286, 319, 285, 286, 320, 285, 
	286, 321, 285, 286, 322, 285, 286, 323, 
	285, 286, 324, 285, 286, 325, 285, 286, 
	326, 285, 286, 327, 285, 286, 328, 285, 
	286, 329, 285, 286, 330, 285, 286, 313, 
	285, 286, 331, 285, 286, 311, 301, 285, 
	286, 332, 285, 286, 333, 285, 286, 334, 
	285, 286, 335, 285, 286, 336, 285, 286, 
	337, 285, 286, 338, 285, 286, 339, 285, 
	286, 340, 285, 286, 341, 285, 286, 342, 
	285, 286, 343, 285, 344, 286, 285, 345, 
	286, 285, 286, 311, 285, 286, 346, 285, 
	286, 347, 285, 286, 348, 285, 286, 349, 
	285, 286, 350, 285, 286, 311, 313, 285, 
	286, 351, 285, 286, 330, 285, 286, 352, 
	285, 286, 353, 285, 286, 354, 285, 286, 
	313, 285, 286, 355, 356, 285, 357, 286, 
	285, 358, 286, 285, 286, 359, 285, 286, 
	360, 285, 286, 361, 285, 286, 362, 285, 
	286, 345, 285, 286, 363, 285, 286, 313, 
	285, 364, 0, 365, 0, 366, 0, 34, 
	0, 367, 368, 0, 369, 0, 370, 0, 
	371, 0, 372, 0, 373, 0, 374, 0, 
	375, 0, 376, 0, 378, 377, 380, 379, 
	381, 380, 382, 383, 384, 385, 383, 386, 
	387, 388, 389, 390, 391, 392, 393, 394, 
	382, 379, 395, 380, 379, 380, 396, 379, 
	380, 397, 379, 380, 398, 379, 380, 399, 
	379, 380, 400, 379, 380, 401, 379, 380, 
	402, 379, 380, 403, 379, 380, 404, 379, 
	405, 380, 379, 406, 380, 379, 380, 407, 
	408, 409, 379, 380, 407, 409, 379, 380, 
	407, 379, 380, 410, 379, 380, 411, 379, 
	380, 412, 379, 380, 413, 379, 380, 414, 
	379, 380, 415, 379, 380, 416, 379, 380, 
	417, 379, 380, 418, 379, 380, 419, 379, 
	380, 420, 379, 380, 421, 379, 380, 422, 
	379, 380, 423, 379, 380, 424, 379, 380, 
	425, 379, 380, 426, 379, 380, 409, 379, 
	380, 427, 379, 380, 428, 379, 380, 429, 
	379, 380, 430, 379, 380, 431, 379, 380, 
	432, 379, 380, 433, 379, 380, 407, 379, 
	380, 434, 379, 380, 407, 397, 379, 380, 
	435, 379, 380, 436, 379, 380, 437, 379, 
	380, 438, 379, 380, 439, 379, 380, 440, 
	379, 380, 441, 379, 380, 442, 379, 380, 
	443, 379, 380, 444, 379, 380, 445, 379, 
	380, 446, 379, 447, 380, 379, 433, 380, 
	379, 380, 448, 379, 380, 449, 379, 380, 
	450, 379, 380, 451, 379, 380, 452, 379, 
	380, 407, 409, 379, 380, 453, 379, 380, 
	426, 379, 380, 454, 379, 380, 455, 379, 
	380, 456, 379, 380, 457, 379, 380, 458, 
	379, 380, 459, 379, 380, 460, 379, 380, 
	461, 461, 379, 380, 462, 379, 463, 380, 
	379, 464, 380, 379, 380, 465, 379, 380, 
	466, 379, 380, 467, 379, 380, 468, 379, 
	380, 433, 379, 380, 469, 379, 380, 470, 
	379, 380, 471, 379, 380, 409, 379, 380, 
	462, 472, 379, 380, 473, 379, 380, 409, 
	379, 474, 0, 34, 0, 475, 476, 475, 
	0, 479, 478, 480, 481, 478, 477, 0, 
	483, 484, 482, 0, 483, 482, 479, 485, 
	483, 484, 485, 482, 486, 479, 487, 488, 
	489, 490, 491, 492, 493, 494, 495, 496, 
	497, 498, 499, 500, 501, 502, 487, 0, 
	99, 125, 127, 98, 99, 125, 98, 99, 
	503, 98, 99, 504, 98, 99, 505, 98, 
	99, 506, 98, 99, 507, 98, 99, 508, 
	98, 99, 509, 98, 99, 510, 98, 99, 
	511, 98, 99, 512, 98, 99, 513, 98, 
	99, 514, 98, 99, 515, 98, 99, 516, 
	98, 99, 517, 98, 99, 518, 98, 99, 
	519, 98, 99, 127, 98, 99, 520, 98, 
	99, 125, 115, 98, 99, 521, 98, 99, 
	522, 98, 99, 523, 98, 99, 524, 98, 
	99, 525, 98, 99, 526, 98, 99, 527, 
	98, 99, 528, 98, 99, 529, 98, 99, 
	530, 98, 99, 531, 98, 99, 532, 98, 
	533, 99, 98, 534, 99, 98, 99, 125, 
	98, 99, 535, 98, 99, 536, 98, 99, 
	537, 98, 99, 538, 98, 99, 539, 98, 
	99, 125, 127, 98, 99, 540, 98, 99, 
	519, 98, 99, 541, 98, 99, 542, 98, 
	99, 543, 98, 99, 544, 98, 99, 545, 
	98, 99, 546, 98, 99, 547, 98, 99, 
	548, 548, 98, 99, 549, 98, 550, 99, 
	98, 551, 99, 98, 99, 552, 98, 99, 
	553, 98, 99, 554, 98, 99, 555, 98, 
	99, 534, 98, 99, 556, 98, 99, 557, 
	98, 99, 558, 98, 99, 127, 98, 99, 
	549, 559, 98, 99, 560, 98, 99, 127, 
	98, 32, 34, 0, 561, 0, 2, 0, 
	562, 0
];

var _lexer_trans_targs = [
	0, 2, 17, 17, 18, 28, 30, 44, 
	45, 48, 52, 77, 104, 181, 187, 189, 
	281, 285, 387, 462, 3, 4, 5, 6, 
	7, 8, 9, 10, 11, 12, 13, 14, 
	15, 461, 44, 16, 17, 29, 16, 17, 
	29, 19, 20, 21, 22, 21, 21, 22, 
	21, 23, 23, 23, 24, 23, 23, 23, 
	24, 25, 26, 27, 17, 27, 28, 17, 
	29, 31, 32, 33, 34, 35, 36, 37, 
	38, 39, 40, 41, 42, 43, 464, 46, 
	47, 17, 46, 45, 47, 49, 50, 51, 
	53, 54, 55, 56, 57, 58, 59, 60, 
	61, 62, 61, 62, 63, 62, 17, 395, 
	394, 409, 413, 415, 430, 436, 438, 454, 
	458, 64, 65, 66, 67, 68, 69, 70, 
	71, 72, 73, 74, 75, 76, 393, 394, 
	2, 17, 17, 18, 28, 30, 44, 45, 
	48, 52, 77, 104, 181, 187, 189, 281, 
	285, 387, 78, 79, 80, 81, 82, 83, 
	84, 85, 86, 87, 88, 87, 88, 88, 
	17, 89, 90, 91, 92, 93, 94, 95, 
	96, 97, 98, 99, 100, 101, 102, 103, 
	76, 105, 106, 107, 108, 109, 110, 111, 
	112, 113, 114, 115, 116, 117, 118, 119, 
	120, 121, 120, 121, 121, 17, 122, 136, 
	144, 151, 165, 173, 123, 124, 125, 126, 
	127, 128, 129, 130, 131, 132, 133, 134, 
	135, 17, 137, 138, 139, 140, 141, 142, 
	143, 76, 145, 146, 147, 148, 149, 150, 
	152, 153, 154, 155, 156, 157, 158, 159, 
	160, 161, 162, 163, 164, 166, 167, 168, 
	169, 170, 171, 172, 173, 174, 175, 176, 
	177, 178, 179, 180, 182, 183, 184, 185, 
	186, 188, 190, 191, 192, 193, 194, 195, 
	196, 197, 198, 199, 200, 201, 202, 203, 
	204, 205, 206, 207, 208, 207, 208, 209, 
	208, 17, 224, 223, 238, 242, 244, 259, 
	265, 267, 271, 210, 211, 212, 213, 214, 
	215, 216, 217, 218, 219, 220, 221, 76, 
	222, 223, 225, 226, 227, 228, 229, 230, 
	231, 232, 233, 234, 235, 236, 237, 17, 
	239, 240, 241, 243, 245, 246, 247, 248, 
	249, 250, 251, 252, 253, 254, 255, 256, 
	257, 258, 260, 261, 262, 263, 264, 266, 
	268, 269, 270, 272, 279, 273, 274, 275, 
	276, 277, 278, 280, 282, 283, 284, 286, 
	385, 287, 288, 289, 290, 291, 292, 293, 
	294, 295, 296, 295, 296, 297, 296, 17, 
	312, 311, 326, 330, 338, 340, 354, 360, 
	362, 378, 382, 298, 299, 300, 301, 302, 
	303, 304, 305, 306, 307, 308, 309, 76, 
	310, 311, 313, 314, 315, 316, 317, 318, 
	319, 320, 321, 322, 323, 324, 325, 17, 
	327, 328, 329, 331, 332, 333, 334, 335, 
	336, 337, 339, 341, 342, 343, 344, 345, 
	346, 347, 348, 349, 350, 351, 352, 353, 
	355, 356, 357, 358, 359, 361, 363, 364, 
	365, 366, 367, 368, 369, 370, 371, 372, 
	373, 374, 375, 376, 377, 379, 380, 381, 
	383, 384, 386, 387, 388, 389, 391, 392, 
	390, 388, 389, 390, 388, 391, 2, 392, 
	18, 28, 30, 44, 45, 48, 52, 77, 
	104, 181, 187, 189, 281, 285, 387, 396, 
	397, 398, 399, 400, 401, 402, 403, 404, 
	405, 406, 407, 408, 17, 410, 411, 412, 
	414, 416, 417, 418, 419, 420, 421, 422, 
	423, 424, 425, 426, 427, 428, 429, 431, 
	432, 433, 434, 435, 437, 439, 440, 441, 
	442, 443, 444, 445, 446, 447, 448, 449, 
	450, 451, 452, 453, 455, 456, 457, 459, 
	460, 463, 0
];

var _lexer_trans_actions = [
	43, 29, 0, 54, 3, 1, 0, 29, 
	1, 29, 29, 29, 29, 29, 29, 29, 
	29, 29, 35, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 57, 149, 126, 0, 110, 
	23, 0, 0, 7, 139, 48, 0, 102, 
	9, 5, 45, 134, 45, 0, 33, 122, 
	33, 33, 0, 11, 106, 0, 0, 114, 
	25, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	27, 118, 27, 51, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	57, 144, 0, 54, 84, 0, 72, 33, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 15, 0, 0, 
	63, 31, 130, 60, 57, 31, 63, 57, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 66, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 57, 144, 0, 54, 0, 
	81, 84, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	21, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	57, 144, 0, 54, 0, 69, 33, 84, 
	84, 84, 84, 84, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 13, 0, 0, 0, 0, 0, 0, 
	0, 13, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 57, 144, 0, 54, 84, 
	0, 78, 33, 84, 84, 84, 84, 84, 
	84, 84, 84, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 19, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 19, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 57, 144, 0, 54, 84, 0, 75, 
	33, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 17, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 17, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 37, 37, 54, 
	37, 87, 0, 0, 39, 0, 96, 0, 
	93, 90, 41, 96, 90, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 99, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 15, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0
];

var _lexer_eof_actions = [
	0, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43
];

var lexer_start = 1;
var lexer_first_final = 464;
var lexer_error = 0;

var lexer_en_main = 1;


/* line 129 "ragel/i18n/fr.js.rl" */

/* line 130 "ragel/i18n/fr.js.rl" */

/* line 131 "ragel/i18n/fr.js.rl" */

/* line 132 "ragel/i18n/fr.js.rl" */

var Lexer = function(listener) {
  // Check that listener has the required functions
  var events = ['comment', 'tag', 'feature', 'background', 'scenario', 'scenario_outline', 'examples', 'step', 'doc_string', 'row', 'eof'];
  for(var i=0, len=events.length; i<len; i++) {
    var event = events[i];
    if(typeof listener[event] != 'function') {
      throw new Error("Error. No " + event + " function exists on " + JSON.stringify(listener));
    }
  }
  this.listener = listener;
};

Lexer.prototype.scan = function(data) {
  var ending = "\n%_FEATURE_END_%";
  if(typeof data == 'string') {
    data = this.stringToBytes(data + ending);
  } else if(typeof Buffer != 'undefined' && Buffer.isBuffer(data)) {
    // Node.js
    var buf = new Buffer(data.length + ending.length);
    data.copy(buf, 0, 0);
    new Buffer(ending).copy(buf, data.length, 0);
    data = buf;
  }
  var eof = pe = data.length;
  var p = 0;

  this.line_number = 1;
  this.last_newline = 0;
  var signedCharValue=function(v){return v > 127 ? v-256 : v; };

  
/* line 853 "js/lib/gherkin/lexer/fr.js" */
{
	  this.cs = lexer_start;
} /* JSCodeGen::writeInit */

/* line 164 "ragel/i18n/fr.js.rl" */
  
/* line 860 "js/lib/gherkin/lexer/fr.js" */
{
	var _klen, _trans, _keys, _ps, _widec, _acts, _nacts;
	var _goto_level, _resume, _eof_trans, _again, _test_eof;
	var _out;
	_klen = _trans = _keys = _acts = _nacts = null;
	_goto_level = 0;
	_resume = 10;
	_eof_trans = 15;
	_again = 20;
	_test_eof = 30;
	_out = 40;
	while (true) {
	_trigger_goto = false;
	if (_goto_level <= 0) {
	if (p == pe) {
		_goto_level = _test_eof;
		continue;
	}
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	}
	if (_goto_level <= _resume) {
	_keys = _lexer_key_offsets[ this.cs];
	_trans = _lexer_index_offsets[ this.cs];
	_klen = _lexer_single_lengths[ this.cs];
	_break_match = false;
	
	do {
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + _klen - 1;

	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + ( (_upper - _lower) >> 1 );

	        if (( signedCharValue(data[p])) < _lexer_trans_keys[_mid]) {
	           _upper = _mid - 1;
	        } else if (( signedCharValue(data[p])) > _lexer_trans_keys[_mid]) {
	           _lower = _mid + 1;
	        } else {
	           _trans += (_mid - _keys);
	           _break_match = true;
	           break;
	        };
	     } /* while */
	     if (_break_match) { break; }
	     _keys += _klen;
	     _trans += _klen;
	  }
	  _klen = _lexer_range_lengths[ this.cs];
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + (_klen << 1) - 2;
	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + (((_upper-_lower) >> 1) & ~1);
	        if (( signedCharValue(data[p])) < _lexer_trans_keys[_mid]) {
	          _upper = _mid - 2;
	         } else if (( signedCharValue(data[p])) > _lexer_trans_keys[_mid+1]) {
	          _lower = _mid + 2;
	        } else {
	          _trans += ((_mid - _keys) >> 1);
	          _break_match = true;
	          break;
	        }
	     } /* while */
	     if (_break_match) { break; }
	     _trans += _klen
	  }
	} while (false);
	_trans = _lexer_indicies[_trans];
	 this.cs = _lexer_trans_targs[_trans];
	if (_lexer_trans_actions[_trans] != 0) {
		_acts = _lexer_trans_actions[_trans];
		_nacts = _lexer_actions[_acts];
		_acts += 1;
		while (_nacts > 0) {
			_nacts -= 1;
			_acts += 1;
			switch (_lexer_actions[_acts - 1]) {
case 0:
/* line 6 "ragel/i18n/fr.js.rl" */

    this.content_start = p;
    this.current_line = this.line_number;
    this.start_col = p - this.last_newline - (this.keyword+':').length;
  		break;
case 1:
/* line 12 "ragel/i18n/fr.js.rl" */

    this.current_line = this.line_number;
    this.start_col = p - this.last_newline;
  		break;
case 2:
/* line 17 "ragel/i18n/fr.js.rl" */

    this.content_start = p;
  		break;
case 3:
/* line 21 "ragel/i18n/fr.js.rl" */

    this.docstring_content_type_start = p;
  		break;
case 4:
/* line 25 "ragel/i18n/fr.js.rl" */

    this.docstring_content_type_end = p;
  		break;
case 5:
/* line 29 "ragel/i18n/fr.js.rl" */

    var con = this.unindent(
      this.start_col, 
      this.bytesToString(data.slice(this.content_start, this.next_keyword_start-1)).replace(/(\r?\n)?([\t ])*$/, '').replace(/\\\"\\\"\\\"/mg, '"""')
    );
    var con_type = this.bytesToString(data.slice(this.docstring_content_type_start, this.docstring_content_type_end)).trim();
    this.listener.doc_string(con_type, con, this.current_line); 
  		break;
case 6:
/* line 38 "ragel/i18n/fr.js.rl" */

    p = this.store_keyword_content('feature', data, p, eof);
  		break;
case 7:
/* line 42 "ragel/i18n/fr.js.rl" */

    p = this.store_keyword_content('background', data, p, eof);
  		break;
case 8:
/* line 46 "ragel/i18n/fr.js.rl" */

    p = this.store_keyword_content('scenario', data, p, eof);
  		break;
case 9:
/* line 50 "ragel/i18n/fr.js.rl" */

    p = this.store_keyword_content('scenario_outline', data, p, eof);
  		break;
case 10:
/* line 54 "ragel/i18n/fr.js.rl" */

    p = this.store_keyword_content('examples', data, p, eof);
  		break;
case 11:
/* line 58 "ragel/i18n/fr.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.step(this.keyword, con, this.current_line);
  		break;
case 12:
/* line 63 "ragel/i18n/fr.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.comment(con, this.line_number);
    this.keyword_start = null;
  		break;
case 13:
/* line 69 "ragel/i18n/fr.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.tag(con, this.line_number);
    this.keyword_start = null;
  		break;
case 14:
/* line 75 "ragel/i18n/fr.js.rl" */

    this.line_number++;
  		break;
case 15:
/* line 79 "ragel/i18n/fr.js.rl" */

    this.last_newline = p + 1;
  		break;
case 16:
/* line 83 "ragel/i18n/fr.js.rl" */

    this.keyword_start = this.keyword_start || p;
  		break;
case 17:
/* line 87 "ragel/i18n/fr.js.rl" */

    this.keyword = this.bytesToString(data.slice(this.keyword_start, p)).replace(/:$/, '');
    this.keyword_start = null;
  		break;
case 18:
/* line 92 "ragel/i18n/fr.js.rl" */

    this.next_keyword_start = p;
  		break;
case 19:
/* line 96 "ragel/i18n/fr.js.rl" */

    p = p - 1;
    current_row = [];
    this.current_line = this.line_number;
  		break;
case 20:
/* line 102 "ragel/i18n/fr.js.rl" */

    this.content_start = p;
  		break;
case 21:
/* line 106 "ragel/i18n/fr.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    current_row.push(con.replace(/\\\|/, "|").replace(/\\n/, "\n").replace(/\\\\/, "\\"));
  		break;
case 22:
/* line 111 "ragel/i18n/fr.js.rl" */

    this.listener.row(current_row, this.current_line);
  		break;
case 23:
/* line 115 "ragel/i18n/fr.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw new Error("Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.");
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 1087 "js/lib/gherkin/lexer/fr.js" */
			} /* action switch */
		}
	}
	if (_trigger_goto) {
		continue;
	}
	}
	if (_goto_level <= _again) {
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	p += 1;
	if (p != pe) {
		_goto_level = _resume;
		continue;
	}
	}
	if (_goto_level <= _test_eof) {
	if (p == eof) {
	__acts = _lexer_eof_actions[ this.cs];
	__nacts =  _lexer_actions[__acts];
	__acts += 1;
	while (__nacts > 0) {
		__nacts -= 1;
		__acts += 1;
		switch (_lexer_actions[__acts - 1]) {
case 23:
/* line 115 "ragel/i18n/fr.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw new Error("Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.");
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 1126 "js/lib/gherkin/lexer/fr.js" */
		} /* eof action switch */
	}
	if (_trigger_goto) {
		continue;
	}
}
	}
	if (_goto_level <= _out) {
		break;
	}
	}
	}

/* line 165 "ragel/i18n/fr.js.rl" */
};


/*
 * Decode utf-8 byte sequence to string.
 */
var decodeUtf8 = function(bytes) {
  var result = "";
  var i = 0;
  var wc;
  var c;

  while (i < bytes.length) {
    /* parse as UTF-8 lead byte */
    wc = bytes[i++];
    if (wc < 0x80) {
      count = 0;
    } else if (wc < 0xC2 || wc >= 0xF8) {
      throw new Error("input is not a valid UTF-8 lead octet");
    } else if (wc < 0xE0) {
      count = 1;
      wc = (wc & 0x1F) << 6;
    } else if (wc < 0xF0) {
      count = 2;
      wc = (wc & 0x0F) << 12;
    } else /* wc < 0xF8 */ {
      count = 3;
      wc = (wc & 0x07) << 18;
    }

    /* parse trail bytes, if any */
    while (count) {
      if (!(i < bytes.length)) {
        throw new Error("short read");
      }
      if ((c = bytes[i++] ^ 0x80) > 0x3F) {
        throw new Error("input is not a valid UTF-8 trail octet");
      }
      wc |= c << (6 * --count);
      if (wc < (1 << (5 * count + 6))) {
        throw new Error("invalid non-minimal encoded input");
      }
    }

    /* handle conversion to UTF-16 if needed */
    if (wc > 0xFFFF) {
      wc -= 0x10000;
      result += String.fromCharCode(0xD800 + (wc >> 10));
      wc = 0xDC00 + (wc & 0x3FF);
    }
    result += String.fromCharCode(wc);
  }

  return result;
};

/*
 * Encode string to an array of bytes using utf8 encoding.
 *
 * Javascript internally stores character data as utf16 (like java).
 * String.charCodeAt() does *not* produce unicode points, but simply
 * reflects this internal representation. Thus, it is necessary
 * to first decode the utf-16 representation before encoding to
 * utf-8.
 */
var encodeUtf8 = function(string) {
  var bytes = [];
  var i = 0;
  var j = 0;
  var wc;

  while (i < string.length) {
    wc = string.charCodeAt(i++);
    if (wc >= 0xD800 && wc <= 0xDBFF && i < string.length && string.charCodeAt(i) >= 0xDC00 && string.charCodeAt(i) <= 0xDFFF) {
      /* decode UTF-16 */
      wc = 0x10000 + ((wc & 0x3FF) << 10) + (string.charCodeAt(i++) & 0x3FF);
    }

    /* emit lead byte */
    if (wc < 0x80) {
      bytes[j++] = wc;
      count = 0;
    } else if (wc < 0x800) {
      bytes[j++] = 0xC0 | (wc >> 6);
      count = 1;
    } else if (wc < 0x10000) {
      bytes[j++] = 0xE0 | (wc >> 12);
      count = 2;
    } else {
      /* SMP: 21-bit Unicode */
      bytes[j++] = 0xF0 | (wc >> 18);
      count = 3;
    }

    /* emit trail bytes, if any */
    while (count) {
      bytes[j++] = 0x80 | ((wc >> (6 * --count)) & 0x3F);
    }
  }

  return bytes;

};

Lexer.prototype.bytesToString = function(bytes) {
  if(typeof bytes.write == 'function') {
    // Node.js
    return bytes.toString('utf-8');
  }
  return decodeUtf8(bytes);
};

Lexer.prototype.stringToBytes = function(string) {
  return encodeUtf8(string);
};

Lexer.prototype.unindent = function(startcol, text) {
  startcol = startcol || 0;
  return text.replace(new RegExp('^[\t ]{0,' + startcol + '}', 'gm'), ''); 
};

Lexer.prototype.store_keyword_content = function(event, data, p, eof) {
  var end_point = (!this.next_keyword_start || (p == eof)) ? p : this.next_keyword_start;
  var content = this.unindent(this.start_col + 2, this.bytesToString(data.slice(this.content_start, end_point))).replace(/\s+$/,"");
  var content_lines = content.split("\n")
  var name = content_lines.shift() || "";
  name = name.trim();
  var description = content_lines.join("\n");
  this.listener[event](this.keyword, name, description, this.current_line);
  var nks = this.next_keyword_start;
  this.next_keyword_start = null;
  return nks ? nks - 1 : p;
};

Lexer.prototype.current_line_content = function(data, p) {
  var rest = Array.prototype.slice.call(data,this.last_newline, -1);
  var end = rest.indexOf(10) || -1;
  return this.bytesToString(rest.slice(0, end)).trim();
};

// Node.js export
if(typeof module !== 'undefined') {
  module.exports = Lexer;
}
// Require.js export
if (typeof define !== 'undefined') {
  if(define.amd) {
    define('gherkin/lexer/fr', [], function() {
      return Lexer;
    });
  } else {
    define('gherkin/lexer/fr', function(require, exports, module) {
      exports.Lexer = Lexer;
    });
  }
}

})();

}).call(this,require("buffer").Buffer)

},{"buffer":69}],207:[function(require,module,exports){
(function (Buffer){

/* line 1 "ragel/i18n/gl.js.rl" */
;(function() {


/* line 126 "ragel/i18n/gl.js.rl" */



/* line 11 "js/lib/gherkin/lexer/gl.js" */
var _lexer_actions = [
	0, 1, 0, 1, 1, 1, 2, 1, 
	3, 1, 4, 1, 5, 1, 6, 1, 
	7, 1, 8, 1, 9, 1, 10, 1, 
	11, 1, 12, 1, 13, 1, 16, 1, 
	17, 1, 18, 1, 19, 1, 20, 1, 
	21, 1, 22, 1, 23, 2, 2, 18, 
	2, 3, 4, 2, 13, 0, 2, 14, 
	15, 2, 17, 0, 2, 17, 1, 2, 
	17, 16, 2, 17, 19, 2, 18, 6, 
	2, 18, 7, 2, 18, 8, 2, 18, 
	9, 2, 18, 10, 2, 18, 16, 2, 
	20, 21, 2, 22, 0, 2, 22, 1, 
	2, 22, 16, 2, 22, 19, 3, 4, 
	14, 15, 3, 5, 14, 15, 3, 11, 
	14, 15, 3, 12, 14, 15, 3, 13, 
	14, 15, 3, 14, 15, 18, 3, 17, 
	0, 11, 3, 17, 14, 15, 4, 2, 
	14, 15, 18, 4, 3, 4, 14, 15, 
	4, 17, 0, 14, 15, 5, 17, 0, 
	11, 14, 15
];

var _lexer_key_offsets = [
	0, 0, 17, 33, 34, 35, 37, 39, 
	44, 49, 54, 59, 63, 67, 69, 70, 
	71, 72, 73, 74, 75, 76, 77, 78, 
	79, 80, 81, 82, 83, 84, 85, 87, 
	89, 94, 101, 106, 108, 110, 111, 112, 
	113, 114, 115, 116, 117, 118, 119, 120, 
	121, 122, 123, 124, 125, 126, 127, 136, 
	138, 140, 142, 144, 146, 148, 150, 152, 
	154, 156, 158, 160, 162, 164, 167, 169, 
	171, 173, 175, 177, 179, 181, 183, 185, 
	187, 189, 191, 193, 195, 211, 212, 213, 
	215, 217, 221, 222, 223, 224, 225, 227, 
	228, 229, 230, 231, 232, 233, 234, 235, 
	236, 237, 238, 239, 240, 241, 242, 243, 
	244, 245, 246, 260, 262, 264, 266, 268, 
	270, 272, 274, 276, 278, 280, 282, 284, 
	286, 288, 290, 292, 295, 297, 299, 301, 
	303, 305, 307, 309, 311, 313, 315, 317, 
	319, 321, 323, 325, 327, 329, 332, 335, 
	339, 341, 343, 345, 347, 349, 351, 353, 
	355, 357, 359, 361, 363, 365, 367, 369, 
	371, 373, 375, 376, 377, 378, 379, 380, 
	381, 382, 383, 384, 398, 400, 402, 404, 
	406, 408, 410, 412, 414, 416, 418, 420, 
	422, 424, 426, 428, 431, 434, 436, 438, 
	440, 442, 444, 446, 448, 450, 452, 454, 
	456, 458, 460, 462, 464, 466, 468, 470, 
	472, 474, 476, 478, 480, 483, 486, 490, 
	492, 494, 496, 498, 501, 503, 505, 507, 
	509, 511, 513, 515, 517, 519, 521, 523, 
	525, 527, 529, 531, 533, 535, 537, 539, 
	541, 543, 545, 546, 547, 548, 549, 550, 
	551, 552, 553, 554, 561, 563, 565, 567, 
	569, 571, 573, 575, 577, 579, 581, 583, 
	585, 587, 589, 591, 592, 593, 594, 595, 
	596, 597, 598, 602, 608, 611, 613, 619, 
	635, 637, 639, 641, 643, 645, 647, 650, 
	653, 655, 657, 659, 661, 663, 665, 667, 
	669, 671, 673, 675, 677, 679, 681, 683, 
	685, 687, 689, 691, 693, 695, 696, 697, 
	698, 699, 700, 701, 702, 703, 704, 718, 
	720, 722, 724, 726, 728, 730, 732, 734, 
	736, 738, 740, 742, 744, 746, 748, 750, 
	753, 755, 757, 759, 761, 763, 765, 767, 
	769, 771, 773, 775, 777, 779, 781, 783, 
	785, 787, 790, 793, 797, 799, 801, 803, 
	805, 808, 810, 812, 814, 816, 818, 820, 
	822, 824, 826, 828, 830, 832, 834, 836, 
	838, 840, 842, 844, 846, 848, 850, 852, 
	854, 855, 856
];

var _lexer_trans_keys = [
	10, 32, 34, 35, 37, 42, 64, 67, 
	68, 69, 76, 77, 80, 124, 239, 9, 
	13, 10, 32, 34, 35, 37, 42, 64, 
	67, 68, 69, 76, 77, 80, 124, 9, 
	13, 34, 34, 10, 13, 10, 13, 10, 
	32, 34, 9, 13, 10, 32, 34, 9, 
	13, 10, 32, 34, 9, 13, 10, 32, 
	34, 9, 13, 10, 32, 9, 13, 10, 
	32, 9, 13, 10, 13, 10, 95, 70, 
	69, 65, 84, 85, 82, 69, 95, 69, 
	78, 68, 95, 37, 32, 10, 13, 10, 
	13, 13, 32, 64, 9, 10, 9, 10, 
	13, 32, 64, 11, 12, 10, 32, 64, 
	9, 13, 97, 111, 110, 114, 100, 111, 
	97, 99, 116, 101, 114, -61, -83, 115, 
	116, 105, 99, 97, 58, 10, 10, 10, 
	32, 35, 37, 64, 67, 69, 9, 13, 
	10, 95, 10, 70, 10, 69, 10, 65, 
	10, 84, 10, 85, 10, 82, 10, 69, 
	10, 95, 10, 69, 10, 78, 10, 68, 
	10, 95, 10, 37, 10, 97, 111, 10, 
	114, 10, 97, 10, 99, 10, 116, 10, 
	101, 10, 114, -61, 10, -83, 10, 10, 
	115, 10, 116, 10, 105, 10, 99, 10, 
	97, 10, 58, 10, 32, 34, 35, 37, 
	42, 64, 67, 68, 69, 76, 77, 80, 
	124, 9, 13, 97, 100, 97, 111, 32, 
	115, 32, 110, 115, 120, 116, -61, -77, 
	110, 98, 99, 111, 122, 111, 32, 100, 
	111, 32, 101, 115, 99, 101, 110, 97, 
	114, 105, 111, 58, 10, 10, 10, 32, 
	35, 37, 42, 64, 67, 68, 69, 76, 
	77, 80, 9, 13, 10, 95, 10, 70, 
	10, 69, 10, 65, 10, 84, 10, 85, 
	10, 82, 10, 69, 10, 95, 10, 69, 
	10, 78, 10, 68, 10, 95, 10, 37, 
	10, 32, 10, 97, 10, 110, 114, 10, 
	100, 10, 111, 10, 97, 10, 99, 10, 
	116, 10, 101, 10, 114, -61, 10, -83, 
	10, 10, 115, 10, 116, 10, 105, 10, 
	99, 10, 97, 10, 58, 10, 97, 10, 
	100, 10, 97, 111, 10, 32, 115, 10, 
	32, 110, 115, 10, 116, -61, 10, -77, 
	10, 10, 110, 10, 99, 10, 101, 10, 
	110, 10, 97, 10, 114, 10, 105, 10, 
	111, 10, 111, 10, 103, 10, 97, 10, 
	105, 10, 115, 10, 101, 10, 114, 101, 
	110, 97, 114, 105, 111, 58, 10, 10, 
	10, 32, 35, 37, 42, 64, 67, 68, 
	69, 76, 77, 80, 9, 13, 10, 95, 
	10, 70, 10, 69, 10, 65, 10, 84, 
	10, 85, 10, 82, 10, 69, 10, 95, 
	10, 69, 10, 78, 10, 68, 10, 95, 
	10, 37, 10, 32, 10, 97, 111, 10, 
	110, 114, 10, 100, 10, 111, 10, 97, 
	10, 99, 10, 116, 10, 101, 10, 114, 
	-61, 10, -83, 10, 10, 115, 10, 116, 
	10, 105, 10, 99, 10, 97, 10, 58, 
	10, 110, 10, 116, 10, 101, 10, 120, 
	10, 116, 10, 111, 10, 97, 10, 100, 
	10, 97, 111, 10, 32, 115, 10, 32, 
	110, 115, 10, 116, -61, 10, -77, 10, 
	10, 110, 10, 98, 99, 10, 111, 10, 
	122, 10, 111, 10, 32, 10, 100, 10, 
	111, 10, 32, 10, 101, 10, 115, 10, 
	99, 10, 101, 10, 110, 10, 97, 10, 
	114, 10, 105, 10, 111, 10, 103, 10, 
	97, 10, 105, 10, 115, 10, 101, 10, 
	114, 101, 109, 112, 108, 111, 115, 58, 
	10, 10, 10, 32, 35, 67, 124, 9, 
	13, 10, 97, 10, 114, 10, 97, 10, 
	99, 10, 116, 10, 101, 10, 114, -61, 
	10, -83, 10, 10, 115, 10, 116, 10, 
	105, 10, 99, 10, 97, 10, 58, 111, 
	103, 97, 105, 115, 101, 114, 32, 124, 
	9, 13, 10, 32, 92, 124, 9, 13, 
	10, 92, 124, 10, 92, 10, 32, 92, 
	124, 9, 13, 10, 32, 34, 35, 37, 
	42, 64, 67, 68, 69, 76, 77, 80, 
	124, 9, 13, 10, 110, 10, 116, 10, 
	101, 10, 120, 10, 116, 10, 111, 10, 
	115, 120, 10, 98, 99, 10, 111, 10, 
	122, 10, 111, 10, 32, 10, 100, 10, 
	111, 10, 32, 10, 101, 10, 115, 10, 
	99, 10, 101, 10, 110, 10, 97, 10, 
	114, 10, 105, 10, 101, 10, 109, 10, 
	112, 10, 108, 10, 111, 10, 115, 110, 
	116, 101, 120, 116, 111, 58, 10, 10, 
	10, 32, 35, 37, 42, 64, 67, 68, 
	69, 76, 77, 80, 9, 13, 10, 95, 
	10, 70, 10, 69, 10, 65, 10, 84, 
	10, 85, 10, 82, 10, 69, 10, 95, 
	10, 69, 10, 78, 10, 68, 10, 95, 
	10, 37, 10, 32, 10, 97, 10, 110, 
	114, 10, 100, 10, 111, 10, 97, 10, 
	99, 10, 116, 10, 101, 10, 114, -61, 
	10, -83, 10, 10, 115, 10, 116, 10, 
	105, 10, 99, 10, 97, 10, 58, 10, 
	97, 10, 100, 10, 97, 111, 10, 32, 
	115, 10, 32, 110, 115, 10, 116, -61, 
	10, -77, 10, 10, 110, 10, 98, 99, 
	10, 111, 10, 122, 10, 111, 10, 32, 
	10, 100, 10, 111, 10, 32, 10, 101, 
	10, 115, 10, 99, 10, 101, 10, 110, 
	10, 97, 10, 114, 10, 105, 10, 111, 
	10, 111, 10, 103, 10, 97, 10, 105, 
	10, 115, 10, 101, 10, 114, 187, 191, 
	0
];

var _lexer_single_lengths = [
	0, 15, 14, 1, 1, 2, 2, 3, 
	3, 3, 3, 2, 2, 2, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 2, 2, 
	3, 5, 3, 2, 2, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 7, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 3, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 14, 1, 1, 2, 
	2, 4, 1, 1, 1, 1, 2, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 12, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 3, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 3, 3, 4, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 12, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 3, 3, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 3, 3, 4, 2, 
	2, 2, 2, 3, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 5, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 1, 1, 1, 1, 1, 
	1, 1, 2, 4, 3, 2, 4, 14, 
	2, 2, 2, 2, 2, 2, 3, 3, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 12, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 3, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 3, 3, 4, 2, 2, 2, 2, 
	3, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	1, 1, 0
];

var _lexer_range_lengths = [
	0, 1, 1, 0, 0, 0, 0, 1, 
	1, 1, 1, 1, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 1, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 1, 0, 0, 1, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0
];

var _lexer_index_offsets = [
	0, 0, 17, 33, 35, 37, 40, 43, 
	48, 53, 58, 63, 67, 71, 74, 76, 
	78, 80, 82, 84, 86, 88, 90, 92, 
	94, 96, 98, 100, 102, 104, 106, 109, 
	112, 117, 124, 129, 132, 135, 137, 139, 
	141, 143, 145, 147, 149, 151, 153, 155, 
	157, 159, 161, 163, 165, 167, 169, 178, 
	181, 184, 187, 190, 193, 196, 199, 202, 
	205, 208, 211, 214, 217, 220, 224, 227, 
	230, 233, 236, 239, 242, 245, 248, 251, 
	254, 257, 260, 263, 266, 282, 284, 286, 
	289, 292, 297, 299, 301, 303, 305, 308, 
	310, 312, 314, 316, 318, 320, 322, 324, 
	326, 328, 330, 332, 334, 336, 338, 340, 
	342, 344, 346, 360, 363, 366, 369, 372, 
	375, 378, 381, 384, 387, 390, 393, 396, 
	399, 402, 405, 408, 412, 415, 418, 421, 
	424, 427, 430, 433, 436, 439, 442, 445, 
	448, 451, 454, 457, 460, 463, 467, 471, 
	476, 479, 482, 485, 488, 491, 494, 497, 
	500, 503, 506, 509, 512, 515, 518, 521, 
	524, 527, 530, 532, 534, 536, 538, 540, 
	542, 544, 546, 548, 562, 565, 568, 571, 
	574, 577, 580, 583, 586, 589, 592, 595, 
	598, 601, 604, 607, 611, 615, 618, 621, 
	624, 627, 630, 633, 636, 639, 642, 645, 
	648, 651, 654, 657, 660, 663, 666, 669, 
	672, 675, 678, 681, 684, 688, 692, 697, 
	700, 703, 706, 709, 713, 716, 719, 722, 
	725, 728, 731, 734, 737, 740, 743, 746, 
	749, 752, 755, 758, 761, 764, 767, 770, 
	773, 776, 779, 781, 783, 785, 787, 789, 
	791, 793, 795, 797, 804, 807, 810, 813, 
	816, 819, 822, 825, 828, 831, 834, 837, 
	840, 843, 846, 849, 851, 853, 855, 857, 
	859, 861, 863, 867, 873, 877, 880, 886, 
	902, 905, 908, 911, 914, 917, 920, 924, 
	928, 931, 934, 937, 940, 943, 946, 949, 
	952, 955, 958, 961, 964, 967, 970, 973, 
	976, 979, 982, 985, 988, 991, 993, 995, 
	997, 999, 1001, 1003, 1005, 1007, 1009, 1023, 
	1026, 1029, 1032, 1035, 1038, 1041, 1044, 1047, 
	1050, 1053, 1056, 1059, 1062, 1065, 1068, 1071, 
	1075, 1078, 1081, 1084, 1087, 1090, 1093, 1096, 
	1099, 1102, 1105, 1108, 1111, 1114, 1117, 1120, 
	1123, 1126, 1130, 1134, 1139, 1142, 1145, 1148, 
	1151, 1155, 1158, 1161, 1164, 1167, 1170, 1173, 
	1176, 1179, 1182, 1185, 1188, 1191, 1194, 1197, 
	1200, 1203, 1206, 1209, 1212, 1215, 1218, 1221, 
	1224, 1226, 1228
];

var _lexer_indicies = [
	2, 1, 3, 4, 5, 6, 7, 8, 
	9, 10, 11, 12, 13, 14, 15, 1, 
	0, 2, 1, 3, 4, 5, 6, 7, 
	8, 9, 10, 11, 12, 13, 14, 1, 
	0, 16, 0, 17, 0, 19, 20, 18, 
	22, 23, 21, 26, 25, 27, 25, 24, 
	30, 29, 31, 29, 28, 30, 29, 32, 
	29, 28, 30, 29, 33, 29, 28, 35, 
	34, 34, 0, 2, 36, 36, 0, 38, 
	39, 37, 2, 0, 40, 0, 41, 0, 
	42, 0, 43, 0, 44, 0, 45, 0, 
	46, 0, 47, 0, 48, 0, 49, 0, 
	50, 0, 51, 0, 52, 0, 53, 0, 
	54, 0, 56, 57, 55, 59, 60, 58, 
	0, 0, 0, 0, 61, 62, 63, 62, 
	62, 65, 64, 61, 2, 66, 7, 66, 
	0, 67, 68, 0, 69, 70, 0, 71, 
	0, 72, 0, 73, 0, 74, 0, 75, 
	0, 76, 0, 77, 0, 78, 0, 79, 
	0, 80, 0, 81, 0, 82, 0, 83, 
	0, 84, 0, 85, 0, 87, 86, 89, 
	88, 89, 90, 91, 92, 91, 93, 94, 
	90, 88, 89, 95, 88, 89, 96, 88, 
	89, 97, 88, 89, 98, 88, 89, 99, 
	88, 89, 100, 88, 89, 101, 88, 89, 
	102, 88, 89, 103, 88, 89, 104, 88, 
	89, 105, 88, 89, 106, 88, 89, 107, 
	88, 89, 108, 88, 89, 109, 110, 88, 
	89, 111, 88, 89, 112, 88, 89, 113, 
	88, 89, 114, 88, 89, 115, 88, 89, 
	116, 88, 117, 89, 88, 118, 89, 88, 
	89, 119, 88, 89, 120, 88, 89, 121, 
	88, 89, 122, 88, 89, 123, 88, 89, 
	124, 88, 126, 125, 127, 128, 129, 130, 
	131, 132, 133, 134, 135, 136, 137, 138, 
	125, 0, 139, 0, 140, 0, 141, 141, 
	0, 54, 72, 0, 54, 142, 143, 144, 
	0, 145, 0, 146, 0, 147, 0, 72, 
	0, 148, 149, 0, 150, 0, 151, 0, 
	152, 0, 153, 0, 154, 0, 155, 0, 
	156, 0, 157, 0, 158, 0, 159, 0, 
	160, 0, 161, 0, 162, 0, 163, 0, 
	164, 0, 165, 0, 166, 0, 168, 167, 
	170, 169, 170, 171, 172, 173, 174, 172, 
	175, 176, 177, 178, 179, 180, 171, 169, 
	170, 181, 169, 170, 182, 169, 170, 183, 
	169, 170, 184, 169, 170, 185, 169, 170, 
	186, 169, 170, 187, 169, 170, 188, 169, 
	170, 189, 169, 170, 190, 169, 170, 191, 
	169, 170, 192, 169, 170, 193, 169, 170, 
	194, 169, 170, 195, 169, 170, 196, 169, 
	170, 197, 198, 169, 170, 199, 169, 170, 
	200, 169, 170, 201, 169, 170, 202, 169, 
	170, 203, 169, 170, 204, 169, 170, 205, 
	169, 206, 170, 169, 207, 170, 169, 170, 
	208, 169, 170, 209, 169, 170, 210, 169, 
	170, 211, 169, 170, 212, 169, 170, 195, 
	169, 170, 213, 169, 170, 214, 169, 170, 
	215, 215, 169, 170, 195, 200, 169, 170, 
	195, 216, 217, 169, 170, 218, 169, 219, 
	170, 169, 220, 170, 169, 170, 200, 169, 
	170, 221, 169, 170, 222, 169, 170, 223, 
	169, 170, 224, 169, 170, 225, 169, 170, 
	226, 169, 170, 212, 169, 170, 227, 169, 
	170, 199, 169, 170, 228, 169, 170, 229, 
	169, 170, 200, 169, 170, 230, 169, 170, 
	199, 169, 231, 0, 232, 0, 233, 0, 
	234, 0, 235, 0, 236, 0, 237, 0, 
	239, 238, 241, 240, 241, 242, 243, 244, 
	245, 243, 246, 247, 248, 249, 250, 251, 
	242, 240, 241, 252, 240, 241, 253, 240, 
	241, 254, 240, 241, 255, 240, 241, 256, 
	240, 241, 257, 240, 241, 258, 240, 241, 
	259, 240, 241, 260, 240, 241, 261, 240, 
	241, 262, 240, 241, 263, 240, 241, 264, 
	240, 241, 265, 240, 241, 266, 240, 241, 
	267, 268, 240, 241, 269, 270, 240, 241, 
	271, 240, 241, 272, 240, 241, 273, 240, 
	241, 274, 240, 241, 275, 240, 241, 276, 
	240, 241, 277, 240, 278, 241, 240, 279, 
	241, 240, 241, 280, 240, 241, 281, 240, 
	241, 282, 240, 241, 283, 240, 241, 284, 
	240, 241, 266, 240, 241, 285, 240, 241, 
	286, 240, 241, 287, 240, 241, 288, 240, 
	241, 289, 240, 241, 284, 240, 241, 290, 
	240, 241, 291, 240, 241, 292, 292, 240, 
	241, 266, 272, 240, 241, 266, 293, 294, 
	240, 241, 295, 240, 296, 241, 240, 297, 
	241, 240, 241, 272, 240, 241, 298, 299, 
	240, 241, 300, 240, 241, 301, 240, 241, 
	302, 240, 241, 303, 240, 241, 304, 240, 
	241, 305, 240, 241, 306, 240, 241, 307, 
	240, 241, 308, 240, 241, 299, 240, 241, 
	309, 240, 241, 310, 240, 241, 311, 240, 
	241, 312, 240, 241, 289, 240, 241, 313, 
	240, 241, 271, 240, 241, 314, 240, 241, 
	315, 240, 241, 272, 240, 241, 316, 240, 
	241, 271, 240, 317, 0, 318, 0, 319, 
	0, 320, 0, 321, 0, 322, 0, 323, 
	0, 325, 324, 327, 326, 327, 328, 329, 
	330, 329, 328, 326, 327, 331, 326, 327, 
	332, 326, 327, 333, 326, 327, 334, 326, 
	327, 335, 326, 327, 336, 326, 327, 337, 
	326, 338, 327, 326, 339, 327, 326, 327, 
	340, 326, 327, 341, 326, 327, 342, 326, 
	327, 343, 326, 327, 344, 326, 327, 345, 
	326, 346, 0, 71, 0, 347, 0, 348, 
	0, 72, 0, 349, 0, 71, 0, 350, 
	351, 350, 0, 354, 353, 355, 356, 353, 
	352, 0, 358, 359, 357, 0, 358, 357, 
	354, 360, 358, 359, 360, 357, 354, 361, 
	362, 363, 364, 365, 366, 367, 368, 369, 
	370, 371, 372, 373, 361, 0, 89, 374, 
	88, 89, 375, 88, 89, 376, 88, 89, 
	377, 88, 89, 378, 88, 89, 123, 88, 
	89, 379, 380, 88, 89, 381, 382, 88, 
	89, 383, 88, 89, 384, 88, 89, 385, 
	88, 89, 386, 88, 89, 387, 88, 89, 
	388, 88, 89, 389, 88, 89, 390, 88, 
	89, 391, 88, 89, 382, 88, 89, 392, 
	88, 89, 393, 88, 89, 394, 88, 89, 
	395, 88, 89, 378, 88, 89, 396, 88, 
	89, 397, 88, 89, 398, 88, 89, 399, 
	88, 89, 400, 88, 89, 123, 88, 401, 
	0, 402, 0, 403, 0, 404, 0, 405, 
	0, 406, 0, 407, 0, 409, 408, 411, 
	410, 411, 412, 413, 414, 415, 413, 416, 
	417, 418, 419, 420, 421, 412, 410, 411, 
	422, 410, 411, 423, 410, 411, 424, 410, 
	411, 425, 410, 411, 426, 410, 411, 427, 
	410, 411, 428, 410, 411, 429, 410, 411, 
	430, 410, 411, 431, 410, 411, 432, 410, 
	411, 433, 410, 411, 434, 410, 411, 435, 
	410, 411, 436, 410, 411, 437, 410, 411, 
	438, 439, 410, 411, 440, 410, 411, 441, 
	410, 411, 442, 410, 411, 443, 410, 411, 
	444, 410, 411, 445, 410, 411, 446, 410, 
	447, 411, 410, 448, 411, 410, 411, 449, 
	410, 411, 450, 410, 411, 451, 410, 411, 
	452, 410, 411, 453, 410, 411, 436, 410, 
	411, 454, 410, 411, 455, 410, 411, 456, 
	456, 410, 411, 436, 441, 410, 411, 436, 
	457, 458, 410, 411, 459, 410, 460, 411, 
	410, 461, 411, 410, 411, 441, 410, 411, 
	462, 463, 410, 411, 464, 410, 411, 465, 
	410, 411, 466, 410, 411, 467, 410, 411, 
	468, 410, 411, 469, 410, 411, 470, 410, 
	411, 471, 410, 411, 472, 410, 411, 463, 
	410, 411, 473, 410, 411, 474, 410, 411, 
	475, 410, 411, 476, 410, 411, 477, 410, 
	411, 453, 410, 411, 478, 410, 411, 440, 
	410, 411, 479, 410, 411, 480, 410, 411, 
	441, 410, 411, 481, 410, 411, 440, 410, 
	482, 0, 1, 0, 483, 0
];

var _lexer_trans_targs = [
	0, 2, 2, 3, 13, 15, 29, 32, 
	35, 85, 89, 275, 277, 280, 282, 392, 
	4, 5, 6, 7, 6, 6, 7, 6, 
	8, 8, 8, 9, 8, 8, 8, 9, 
	10, 11, 12, 2, 12, 13, 2, 14, 
	16, 17, 18, 19, 20, 21, 22, 23, 
	24, 25, 26, 27, 28, 394, 30, 31, 
	2, 14, 31, 2, 14, 33, 34, 2, 
	33, 32, 34, 36, 317, 37, 39, 38, 
	29, 40, 41, 42, 43, 44, 45, 46, 
	47, 48, 49, 50, 51, 52, 53, 54, 
	53, 54, 54, 2, 55, 69, 294, 56, 
	57, 58, 59, 60, 61, 62, 63, 64, 
	65, 66, 67, 68, 2, 70, 288, 71, 
	72, 73, 74, 75, 76, 77, 78, 79, 
	80, 81, 82, 83, 84, 2, 2, 3, 
	13, 15, 29, 32, 35, 85, 89, 275, 
	277, 280, 282, 86, 87, 88, 90, 94, 
	250, 91, 92, 93, 95, 170, 96, 97, 
	98, 99, 100, 101, 102, 103, 104, 105, 
	106, 107, 108, 109, 110, 111, 112, 113, 
	114, 113, 114, 114, 2, 115, 129, 130, 
	147, 151, 163, 165, 168, 116, 117, 118, 
	119, 120, 121, 122, 123, 124, 125, 126, 
	127, 128, 2, 84, 131, 132, 134, 133, 
	129, 135, 136, 137, 138, 139, 140, 141, 
	142, 143, 144, 145, 146, 148, 149, 150, 
	152, 156, 153, 154, 155, 157, 158, 159, 
	160, 161, 162, 164, 166, 167, 169, 171, 
	172, 173, 174, 175, 176, 177, 178, 179, 
	178, 179, 179, 2, 180, 194, 195, 218, 
	222, 243, 245, 248, 181, 182, 183, 184, 
	185, 186, 187, 188, 189, 190, 191, 192, 
	193, 2, 84, 196, 212, 197, 199, 198, 
	194, 200, 201, 202, 203, 204, 205, 206, 
	207, 208, 209, 210, 211, 213, 214, 215, 
	216, 217, 219, 220, 221, 223, 227, 224, 
	225, 226, 228, 238, 229, 230, 231, 232, 
	233, 234, 235, 236, 237, 239, 240, 241, 
	242, 244, 246, 247, 249, 251, 252, 253, 
	254, 255, 256, 257, 258, 259, 258, 259, 
	259, 2, 260, 261, 262, 263, 264, 265, 
	266, 267, 268, 269, 270, 271, 272, 273, 
	274, 84, 276, 278, 279, 281, 282, 283, 
	284, 286, 287, 285, 283, 284, 285, 283, 
	286, 287, 3, 13, 15, 29, 32, 35, 
	85, 89, 275, 277, 280, 282, 289, 290, 
	291, 292, 293, 295, 311, 296, 306, 297, 
	298, 299, 300, 301, 302, 303, 304, 305, 
	307, 308, 309, 310, 312, 313, 314, 315, 
	316, 318, 319, 320, 321, 322, 323, 324, 
	325, 326, 325, 326, 326, 2, 327, 341, 
	342, 359, 363, 385, 387, 390, 328, 329, 
	330, 331, 332, 333, 334, 335, 336, 337, 
	338, 339, 340, 2, 84, 343, 344, 346, 
	345, 341, 347, 348, 349, 350, 351, 352, 
	353, 354, 355, 356, 357, 358, 360, 361, 
	362, 364, 368, 365, 366, 367, 369, 379, 
	370, 371, 372, 373, 374, 375, 376, 377, 
	378, 380, 381, 382, 383, 384, 386, 388, 
	389, 391, 393, 0
];

var _lexer_trans_actions = [
	43, 0, 54, 3, 1, 0, 29, 1, 
	29, 29, 29, 29, 29, 29, 35, 0, 
	0, 0, 7, 139, 48, 0, 102, 9, 
	5, 45, 134, 45, 0, 33, 122, 33, 
	33, 0, 11, 106, 0, 0, 114, 25, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 57, 
	149, 126, 0, 110, 23, 0, 27, 118, 
	27, 51, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 57, 144, 
	0, 54, 0, 69, 33, 84, 84, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 13, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 13, 31, 130, 60, 
	57, 31, 63, 57, 63, 63, 63, 63, 
	63, 63, 66, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 57, 
	144, 0, 54, 0, 78, 33, 84, 84, 
	84, 84, 84, 84, 84, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 19, 19, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 57, 144, 
	0, 54, 0, 75, 33, 84, 84, 84, 
	84, 84, 84, 84, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 17, 17, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 57, 144, 0, 54, 
	0, 81, 84, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 21, 0, 0, 0, 0, 0, 0, 
	37, 37, 54, 37, 87, 0, 0, 39, 
	0, 0, 93, 90, 41, 96, 90, 96, 
	96, 96, 96, 96, 96, 99, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	57, 144, 0, 54, 0, 72, 33, 84, 
	84, 84, 84, 84, 84, 84, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 15, 15, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0
];

var _lexer_eof_actions = [
	0, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43
];

var lexer_start = 1;
var lexer_first_final = 394;
var lexer_error = 0;

var lexer_en_main = 1;


/* line 129 "ragel/i18n/gl.js.rl" */

/* line 130 "ragel/i18n/gl.js.rl" */

/* line 131 "ragel/i18n/gl.js.rl" */

/* line 132 "ragel/i18n/gl.js.rl" */

var Lexer = function(listener) {
  // Check that listener has the required functions
  var events = ['comment', 'tag', 'feature', 'background', 'scenario', 'scenario_outline', 'examples', 'step', 'doc_string', 'row', 'eof'];
  for(var i=0, len=events.length; i<len; i++) {
    var event = events[i];
    if(typeof listener[event] != 'function') {
      throw new Error("Error. No " + event + " function exists on " + JSON.stringify(listener));
    }
  }
  this.listener = listener;
};

Lexer.prototype.scan = function(data) {
  var ending = "\n%_FEATURE_END_%";
  if(typeof data == 'string') {
    data = this.stringToBytes(data + ending);
  } else if(typeof Buffer != 'undefined' && Buffer.isBuffer(data)) {
    // Node.js
    var buf = new Buffer(data.length + ending.length);
    data.copy(buf, 0, 0);
    new Buffer(ending).copy(buf, data.length, 0);
    data = buf;
  }
  var eof = pe = data.length;
  var p = 0;

  this.line_number = 1;
  this.last_newline = 0;
  var signedCharValue=function(v){return v > 127 ? v-256 : v; };

  
/* line 742 "js/lib/gherkin/lexer/gl.js" */
{
	  this.cs = lexer_start;
} /* JSCodeGen::writeInit */

/* line 164 "ragel/i18n/gl.js.rl" */
  
/* line 749 "js/lib/gherkin/lexer/gl.js" */
{
	var _klen, _trans, _keys, _ps, _widec, _acts, _nacts;
	var _goto_level, _resume, _eof_trans, _again, _test_eof;
	var _out;
	_klen = _trans = _keys = _acts = _nacts = null;
	_goto_level = 0;
	_resume = 10;
	_eof_trans = 15;
	_again = 20;
	_test_eof = 30;
	_out = 40;
	while (true) {
	_trigger_goto = false;
	if (_goto_level <= 0) {
	if (p == pe) {
		_goto_level = _test_eof;
		continue;
	}
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	}
	if (_goto_level <= _resume) {
	_keys = _lexer_key_offsets[ this.cs];
	_trans = _lexer_index_offsets[ this.cs];
	_klen = _lexer_single_lengths[ this.cs];
	_break_match = false;
	
	do {
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + _klen - 1;

	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + ( (_upper - _lower) >> 1 );

	        if (( signedCharValue(data[p])) < _lexer_trans_keys[_mid]) {
	           _upper = _mid - 1;
	        } else if (( signedCharValue(data[p])) > _lexer_trans_keys[_mid]) {
	           _lower = _mid + 1;
	        } else {
	           _trans += (_mid - _keys);
	           _break_match = true;
	           break;
	        };
	     } /* while */
	     if (_break_match) { break; }
	     _keys += _klen;
	     _trans += _klen;
	  }
	  _klen = _lexer_range_lengths[ this.cs];
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + (_klen << 1) - 2;
	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + (((_upper-_lower) >> 1) & ~1);
	        if (( signedCharValue(data[p])) < _lexer_trans_keys[_mid]) {
	          _upper = _mid - 2;
	         } else if (( signedCharValue(data[p])) > _lexer_trans_keys[_mid+1]) {
	          _lower = _mid + 2;
	        } else {
	          _trans += ((_mid - _keys) >> 1);
	          _break_match = true;
	          break;
	        }
	     } /* while */
	     if (_break_match) { break; }
	     _trans += _klen
	  }
	} while (false);
	_trans = _lexer_indicies[_trans];
	 this.cs = _lexer_trans_targs[_trans];
	if (_lexer_trans_actions[_trans] != 0) {
		_acts = _lexer_trans_actions[_trans];
		_nacts = _lexer_actions[_acts];
		_acts += 1;
		while (_nacts > 0) {
			_nacts -= 1;
			_acts += 1;
			switch (_lexer_actions[_acts - 1]) {
case 0:
/* line 6 "ragel/i18n/gl.js.rl" */

    this.content_start = p;
    this.current_line = this.line_number;
    this.start_col = p - this.last_newline - (this.keyword+':').length;
  		break;
case 1:
/* line 12 "ragel/i18n/gl.js.rl" */

    this.current_line = this.line_number;
    this.start_col = p - this.last_newline;
  		break;
case 2:
/* line 17 "ragel/i18n/gl.js.rl" */

    this.content_start = p;
  		break;
case 3:
/* line 21 "ragel/i18n/gl.js.rl" */

    this.docstring_content_type_start = p;
  		break;
case 4:
/* line 25 "ragel/i18n/gl.js.rl" */

    this.docstring_content_type_end = p;
  		break;
case 5:
/* line 29 "ragel/i18n/gl.js.rl" */

    var con = this.unindent(
      this.start_col, 
      this.bytesToString(data.slice(this.content_start, this.next_keyword_start-1)).replace(/(\r?\n)?([\t ])*$/, '').replace(/\\\"\\\"\\\"/mg, '"""')
    );
    var con_type = this.bytesToString(data.slice(this.docstring_content_type_start, this.docstring_content_type_end)).trim();
    this.listener.doc_string(con_type, con, this.current_line); 
  		break;
case 6:
/* line 38 "ragel/i18n/gl.js.rl" */

    p = this.store_keyword_content('feature', data, p, eof);
  		break;
case 7:
/* line 42 "ragel/i18n/gl.js.rl" */

    p = this.store_keyword_content('background', data, p, eof);
  		break;
case 8:
/* line 46 "ragel/i18n/gl.js.rl" */

    p = this.store_keyword_content('scenario', data, p, eof);
  		break;
case 9:
/* line 50 "ragel/i18n/gl.js.rl" */

    p = this.store_keyword_content('scenario_outline', data, p, eof);
  		break;
case 10:
/* line 54 "ragel/i18n/gl.js.rl" */

    p = this.store_keyword_content('examples', data, p, eof);
  		break;
case 11:
/* line 58 "ragel/i18n/gl.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.step(this.keyword, con, this.current_line);
  		break;
case 12:
/* line 63 "ragel/i18n/gl.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.comment(con, this.line_number);
    this.keyword_start = null;
  		break;
case 13:
/* line 69 "ragel/i18n/gl.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.tag(con, this.line_number);
    this.keyword_start = null;
  		break;
case 14:
/* line 75 "ragel/i18n/gl.js.rl" */

    this.line_number++;
  		break;
case 15:
/* line 79 "ragel/i18n/gl.js.rl" */

    this.last_newline = p + 1;
  		break;
case 16:
/* line 83 "ragel/i18n/gl.js.rl" */

    this.keyword_start = this.keyword_start || p;
  		break;
case 17:
/* line 87 "ragel/i18n/gl.js.rl" */

    this.keyword = this.bytesToString(data.slice(this.keyword_start, p)).replace(/:$/, '');
    this.keyword_start = null;
  		break;
case 18:
/* line 92 "ragel/i18n/gl.js.rl" */

    this.next_keyword_start = p;
  		break;
case 19:
/* line 96 "ragel/i18n/gl.js.rl" */

    p = p - 1;
    current_row = [];
    this.current_line = this.line_number;
  		break;
case 20:
/* line 102 "ragel/i18n/gl.js.rl" */

    this.content_start = p;
  		break;
case 21:
/* line 106 "ragel/i18n/gl.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    current_row.push(con.replace(/\\\|/, "|").replace(/\\n/, "\n").replace(/\\\\/, "\\"));
  		break;
case 22:
/* line 111 "ragel/i18n/gl.js.rl" */

    this.listener.row(current_row, this.current_line);
  		break;
case 23:
/* line 115 "ragel/i18n/gl.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw new Error("Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.");
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 976 "js/lib/gherkin/lexer/gl.js" */
			} /* action switch */
		}
	}
	if (_trigger_goto) {
		continue;
	}
	}
	if (_goto_level <= _again) {
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	p += 1;
	if (p != pe) {
		_goto_level = _resume;
		continue;
	}
	}
	if (_goto_level <= _test_eof) {
	if (p == eof) {
	__acts = _lexer_eof_actions[ this.cs];
	__nacts =  _lexer_actions[__acts];
	__acts += 1;
	while (__nacts > 0) {
		__nacts -= 1;
		__acts += 1;
		switch (_lexer_actions[__acts - 1]) {
case 23:
/* line 115 "ragel/i18n/gl.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw new Error("Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.");
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 1015 "js/lib/gherkin/lexer/gl.js" */
		} /* eof action switch */
	}
	if (_trigger_goto) {
		continue;
	}
}
	}
	if (_goto_level <= _out) {
		break;
	}
	}
	}

/* line 165 "ragel/i18n/gl.js.rl" */
};


/*
 * Decode utf-8 byte sequence to string.
 */
var decodeUtf8 = function(bytes) {
  var result = "";
  var i = 0;
  var wc;
  var c;

  while (i < bytes.length) {
    /* parse as UTF-8 lead byte */
    wc = bytes[i++];
    if (wc < 0x80) {
      count = 0;
    } else if (wc < 0xC2 || wc >= 0xF8) {
      throw new Error("input is not a valid UTF-8 lead octet");
    } else if (wc < 0xE0) {
      count = 1;
      wc = (wc & 0x1F) << 6;
    } else if (wc < 0xF0) {
      count = 2;
      wc = (wc & 0x0F) << 12;
    } else /* wc < 0xF8 */ {
      count = 3;
      wc = (wc & 0x07) << 18;
    }

    /* parse trail bytes, if any */
    while (count) {
      if (!(i < bytes.length)) {
        throw new Error("short read");
      }
      if ((c = bytes[i++] ^ 0x80) > 0x3F) {
        throw new Error("input is not a valid UTF-8 trail octet");
      }
      wc |= c << (6 * --count);
      if (wc < (1 << (5 * count + 6))) {
        throw new Error("invalid non-minimal encoded input");
      }
    }

    /* handle conversion to UTF-16 if needed */
    if (wc > 0xFFFF) {
      wc -= 0x10000;
      result += String.fromCharCode(0xD800 + (wc >> 10));
      wc = 0xDC00 + (wc & 0x3FF);
    }
    result += String.fromCharCode(wc);
  }

  return result;
};

/*
 * Encode string to an array of bytes using utf8 encoding.
 *
 * Javascript internally stores character data as utf16 (like java).
 * String.charCodeAt() does *not* produce unicode points, but simply
 * reflects this internal representation. Thus, it is necessary
 * to first decode the utf-16 representation before encoding to
 * utf-8.
 */
var encodeUtf8 = function(string) {
  var bytes = [];
  var i = 0;
  var j = 0;
  var wc;

  while (i < string.length) {
    wc = string.charCodeAt(i++);
    if (wc >= 0xD800 && wc <= 0xDBFF && i < string.length && string.charCodeAt(i) >= 0xDC00 && string.charCodeAt(i) <= 0xDFFF) {
      /* decode UTF-16 */
      wc = 0x10000 + ((wc & 0x3FF) << 10) + (string.charCodeAt(i++) & 0x3FF);
    }

    /* emit lead byte */
    if (wc < 0x80) {
      bytes[j++] = wc;
      count = 0;
    } else if (wc < 0x800) {
      bytes[j++] = 0xC0 | (wc >> 6);
      count = 1;
    } else if (wc < 0x10000) {
      bytes[j++] = 0xE0 | (wc >> 12);
      count = 2;
    } else {
      /* SMP: 21-bit Unicode */
      bytes[j++] = 0xF0 | (wc >> 18);
      count = 3;
    }

    /* emit trail bytes, if any */
    while (count) {
      bytes[j++] = 0x80 | ((wc >> (6 * --count)) & 0x3F);
    }
  }

  return bytes;

};

Lexer.prototype.bytesToString = function(bytes) {
  if(typeof bytes.write == 'function') {
    // Node.js
    return bytes.toString('utf-8');
  }
  return decodeUtf8(bytes);
};

Lexer.prototype.stringToBytes = function(string) {
  return encodeUtf8(string);
};

Lexer.prototype.unindent = function(startcol, text) {
  startcol = startcol || 0;
  return text.replace(new RegExp('^[\t ]{0,' + startcol + '}', 'gm'), ''); 
};

Lexer.prototype.store_keyword_content = function(event, data, p, eof) {
  var end_point = (!this.next_keyword_start || (p == eof)) ? p : this.next_keyword_start;
  var content = this.unindent(this.start_col + 2, this.bytesToString(data.slice(this.content_start, end_point))).replace(/\s+$/,"");
  var content_lines = content.split("\n")
  var name = content_lines.shift() || "";
  name = name.trim();
  var description = content_lines.join("\n");
  this.listener[event](this.keyword, name, description, this.current_line);
  var nks = this.next_keyword_start;
  this.next_keyword_start = null;
  return nks ? nks - 1 : p;
};

Lexer.prototype.current_line_content = function(data, p) {
  var rest = Array.prototype.slice.call(data,this.last_newline, -1);
  var end = rest.indexOf(10) || -1;
  return this.bytesToString(rest.slice(0, end)).trim();
};

// Node.js export
if(typeof module !== 'undefined') {
  module.exports = Lexer;
}
// Require.js export
if (typeof define !== 'undefined') {
  if(define.amd) {
    define('gherkin/lexer/gl', [], function() {
      return Lexer;
    });
  } else {
    define('gherkin/lexer/gl', function(require, exports, module) {
      exports.Lexer = Lexer;
    });
  }
}

})();

}).call(this,require("buffer").Buffer)

},{"buffer":69}],208:[function(require,module,exports){
(function (Buffer){

/* line 1 "ragel/i18n/he.js.rl" */
;(function() {


/* line 126 "ragel/i18n/he.js.rl" */



/* line 11 "js/lib/gherkin/lexer/he.js" */
var _lexer_actions = [
	0, 1, 0, 1, 1, 1, 2, 1, 
	3, 1, 4, 1, 5, 1, 6, 1, 
	7, 1, 8, 1, 9, 1, 10, 1, 
	11, 1, 12, 1, 13, 1, 16, 1, 
	17, 1, 18, 1, 19, 1, 20, 1, 
	21, 1, 22, 1, 23, 2, 2, 18, 
	2, 3, 4, 2, 13, 0, 2, 14, 
	15, 2, 17, 0, 2, 17, 1, 2, 
	17, 16, 2, 17, 19, 2, 18, 6, 
	2, 18, 7, 2, 18, 8, 2, 18, 
	9, 2, 18, 10, 2, 18, 16, 2, 
	20, 21, 2, 22, 0, 2, 22, 1, 
	2, 22, 16, 2, 22, 19, 3, 4, 
	14, 15, 3, 5, 14, 15, 3, 11, 
	14, 15, 3, 12, 14, 15, 3, 13, 
	14, 15, 3, 14, 15, 18, 3, 17, 
	0, 11, 3, 17, 14, 15, 4, 2, 
	14, 15, 18, 4, 3, 4, 14, 15, 
	4, 17, 0, 14, 15, 5, 17, 0, 
	11, 14, 15
];

var _lexer_key_offsets = [
	0, 0, 12, 19, 20, 22, 23, 24, 
	25, 27, 29, 40, 41, 42, 44, 46, 
	51, 56, 61, 66, 70, 74, 76, 77, 
	78, 79, 80, 81, 82, 83, 84, 85, 
	86, 87, 88, 89, 90, 91, 96, 103, 
	108, 112, 118, 121, 123, 129, 140, 142, 
	143, 144, 145, 146, 147, 148, 149, 150, 
	151, 152, 153, 154, 155, 156, 157, 158, 
	159, 160, 161, 162, 163, 164, 165, 166, 
	167, 168, 175, 177, 179, 181, 183, 185, 
	187, 189, 191, 193, 195, 206, 207, 208, 
	209, 210, 211, 212, 213, 214, 215, 216, 
	217, 218, 219, 220, 221, 222, 223, 232, 
	238, 240, 243, 245, 247, 249, 252, 254, 
	256, 258, 260, 262, 264, 266, 268, 270, 
	272, 274, 276, 278, 280, 282, 284, 286, 
	288, 290, 292, 294, 296, 300, 302, 304, 
	306, 308, 310, 312, 314, 316, 318, 320, 
	322, 324, 326, 328, 330, 332, 334, 336, 
	338, 340, 342, 344, 346, 348, 350, 352, 
	354, 356, 358, 360, 362, 364, 366, 368, 
	370, 372, 374, 376, 377, 380, 381, 382, 
	383, 384, 385, 386, 387, 388, 389, 390, 
	391, 392, 393, 394, 395, 396, 397, 398, 
	399, 400, 409, 415, 417, 420, 422, 424, 
	426, 429, 431, 433, 435, 437, 439, 441, 
	443, 445, 447, 449, 451, 453, 455, 457, 
	459, 461, 463, 465, 467, 469, 471, 473, 
	476, 478, 480, 482, 484, 486, 488, 490, 
	492, 494, 496, 498, 500, 502, 504, 506, 
	508, 510, 512, 514, 516, 518, 520, 522, 
	524, 526, 528, 530, 531, 532, 533, 534, 
	535, 536, 537, 538, 539, 547, 551, 553, 
	555, 557, 559, 561, 563, 565, 567, 569, 
	571, 573, 575, 577, 579, 581, 583, 585, 
	587, 591, 593, 595, 597, 599, 601, 603, 
	605, 607, 609, 611, 613, 615, 617, 619, 
	621, 623, 625, 627, 629, 631, 633, 635, 
	637, 639, 641, 643, 645, 647, 649, 651, 
	653, 655, 657, 659, 661, 663, 665, 666, 
	667, 668, 669, 670, 671, 672, 673, 674, 
	683, 690, 692, 695, 697, 699, 701, 704, 
	706, 708, 710, 712, 714, 716, 718, 720, 
	722, 724, 726, 728, 730, 732, 734, 736, 
	738, 740, 742, 744, 746, 748, 750, 752, 
	754, 756, 758, 762, 764, 766, 768, 770, 
	772, 774, 776, 778, 780, 782, 784, 786, 
	788, 790, 792, 794, 796, 798, 800, 802, 
	804, 806, 808, 810, 812, 814, 816, 818, 
	820, 822, 824, 826, 828, 830, 832, 834, 
	836, 837, 838
];

var _lexer_trans_keys = [
	-41, 10, 32, 34, 35, 37, 42, 64, 
	124, 239, 9, 13, -112, -111, -109, -107, 
	-101, -88, -86, -41, -111, -106, -41, -100, 
	32, 10, 13, 10, 13, -41, 10, 32, 
	34, 35, 37, 42, 64, 124, 9, 13, 
	34, 34, 10, 13, 10, 13, 10, 32, 
	34, 9, 13, 10, 32, 34, 9, 13, 
	10, 32, 34, 9, 13, 10, 32, 34, 
	9, 13, 10, 32, 9, 13, 10, 32, 
	9, 13, 10, 13, 10, 95, 70, 69, 
	65, 84, 85, 82, 69, 95, 69, 78, 
	68, 95, 37, 13, 32, 64, 9, 10, 
	9, 10, 13, 32, 64, 11, 12, 10, 
	32, 64, 9, 13, 32, 124, 9, 13, 
	10, 32, 92, 124, 9, 13, 10, 92, 
	124, 10, 92, 10, 32, 92, 124, 9, 
	13, -41, 10, 32, 34, 35, 37, 42, 
	64, 124, 9, 13, -41, 32, -103, -41, 
	-108, -41, -103, -41, -96, -41, -86, -41, 
	-97, -41, -107, -41, -110, -41, -98, -41, 
	-112, -41, -107, -41, -86, 58, 10, 10, 
	-41, 10, 32, 35, 124, 9, 13, -86, 
	10, -41, 10, -101, 10, -41, 10, -107, 
	10, -41, 10, -96, 10, -41, 10, -108, 
	10, 10, 58, -41, 10, 32, 34, 35, 
	37, 42, 64, 124, 9, 13, -41, -110, 
	-41, -99, -41, -112, -41, -87, -41, -88, 
	-41, -89, -41, -94, 58, 10, 10, -41, 
	10, 32, 35, 37, 42, 64, 9, 13, 
	-112, -111, -107, -101, -86, 10, -41, 10, 
	-111, -106, 10, -41, 10, -100, 10, 10, 
	32, -41, 10, 32, -103, 10, -41, 10, 
	-108, 10, -41, 10, -103, 10, -41, 10, 
	-96, 10, -41, 10, -86, 10, -41, 10, 
	-97, 10, -41, 10, -110, 10, -41, 10, 
	-99, 10, -41, 10, -112, 10, -41, 10, 
	-87, 10, -41, 10, -88, 10, -41, 10, 
	-111, -101, -88, 10, -41, 10, -96, 10, 
	-41, 10, -103, 10, -41, 10, -86, 10, 
	10, 32, -41, 10, -86, 10, -41, 10, 
	-88, 10, -41, 10, -105, 10, -41, 10, 
	-103, 10, -41, 10, -87, 10, 10, 58, 
	-41, 10, -107, 10, -41, 10, -96, 10, 
	-41, 10, -108, 10, 10, 95, 10, 70, 
	10, 69, 10, 65, 10, 84, 10, 85, 
	10, 82, 10, 69, 10, 95, 10, 69, 
	10, 78, 10, 68, 10, 95, 10, 37, 
	-41, -111, -101, -88, -41, -96, -41, -103, 
	-41, -86, 32, -41, -86, -41, -88, -41, 
	-105, -41, -103, -41, -87, 58, 10, 10, 
	-41, 10, 32, 35, 37, 42, 64, 9, 
	13, -112, -111, -107, -101, -86, 10, -41, 
	10, -111, -106, 10, -41, 10, -100, 10, 
	10, 32, -41, 10, 32, -103, 10, -41, 
	10, -108, 10, -41, 10, -103, 10, -41, 
	10, -96, 10, -41, 10, -86, 10, -41, 
	10, -97, 10, -41, 10, -110, 10, -41, 
	10, -99, 10, -41, 10, -112, 10, -41, 
	10, -87, 10, -41, 10, -88, 10, -41, 
	10, -101, -88, 10, -41, 10, -107, 10, 
	-41, 10, -96, 10, -41, 10, -108, 10, 
	10, 58, -41, 10, -105, 10, -41, 10, 
	-103, 10, -41, 10, -87, 10, 10, 95, 
	10, 70, 10, 69, 10, 65, 10, 84, 
	10, 85, 10, 82, 10, 69, 10, 95, 
	10, 69, 10, 78, 10, 68, 10, 95, 
	10, 37, -41, -107, -41, -96, -41, -108, 
	58, 10, 10, -41, 10, 32, 35, 37, 
	64, 9, 13, -109, -88, -86, 10, -41, 
	10, -107, 10, -41, 10, -110, 10, -41, 
	10, -98, 10, -41, 10, -112, 10, -41, 
	10, -107, 10, -41, 10, -86, 10, 10, 
	58, -41, 10, -89, 10, -41, 10, -94, 
	10, -41, 10, -111, -101, -88, 10, -41, 
	10, -96, 10, -41, 10, -103, 10, -41, 
	10, -86, 10, 10, 32, -41, 10, -86, 
	10, -41, 10, -88, 10, -41, 10, -105, 
	10, -41, 10, -103, 10, -41, 10, -87, 
	10, -41, 10, -107, 10, -41, 10, -96, 
	10, -41, 10, -108, 10, 10, 95, 10, 
	70, 10, 69, 10, 65, 10, 84, 10, 
	85, 10, 82, 10, 69, 10, 95, 10, 
	69, 10, 78, 10, 68, 10, 95, 10, 
	37, -41, -105, -41, -103, -41, -87, 58, 
	10, 10, -41, 10, 32, 35, 37, 42, 
	64, 9, 13, -112, -111, -107, -101, -88, 
	-86, 10, -41, 10, -111, -106, 10, -41, 
	10, -100, 10, 10, 32, -41, 10, 32, 
	-103, 10, -41, 10, -108, 10, -41, 10, 
	-103, 10, -41, 10, -96, 10, -41, 10, 
	-86, 10, -41, 10, -97, 10, -41, 10, 
	-110, 10, -41, 10, -99, 10, -41, 10, 
	-112, 10, -41, 10, -87, 10, -41, 10, 
	-88, 10, -41, 10, -89, 10, -41, 10, 
	-94, 10, 10, 58, -41, 10, -111, -101, 
	-88, 10, -41, 10, -96, 10, -41, 10, 
	-103, 10, -41, 10, -86, 10, 10, 32, 
	-41, 10, -86, 10, -41, 10, -88, 10, 
	-41, 10, -105, 10, -41, 10, -103, 10, 
	-41, 10, -87, 10, -41, 10, -107, 10, 
	-41, 10, -96, 10, -41, 10, -108, 10, 
	10, 95, 10, 70, 10, 69, 10, 65, 
	10, 84, 10, 85, 10, 82, 10, 69, 
	10, 95, 10, 69, 10, 78, 10, 68, 
	10, 95, 10, 37, 187, 191, 0
];

var _lexer_single_lengths = [
	0, 10, 7, 1, 2, 1, 1, 1, 
	2, 2, 9, 1, 1, 2, 2, 3, 
	3, 3, 3, 2, 2, 2, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 3, 5, 3, 
	2, 4, 3, 2, 4, 9, 2, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 5, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 9, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 7, 6, 
	2, 3, 2, 2, 2, 3, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 4, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 1, 3, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 7, 6, 2, 3, 2, 2, 2, 
	3, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 3, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 6, 4, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	4, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 7, 
	7, 2, 3, 2, 2, 2, 3, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 4, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	1, 1, 0
];

var _lexer_range_lengths = [
	0, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 0, 0, 0, 0, 1, 
	1, 1, 1, 1, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 1, 1, 
	1, 1, 0, 0, 1, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0
];

var _lexer_index_offsets = [
	0, 0, 12, 20, 22, 25, 27, 29, 
	31, 34, 37, 48, 50, 52, 55, 58, 
	63, 68, 73, 78, 82, 86, 89, 91, 
	93, 95, 97, 99, 101, 103, 105, 107, 
	109, 111, 113, 115, 117, 119, 124, 131, 
	136, 140, 146, 150, 153, 159, 170, 173, 
	175, 177, 179, 181, 183, 185, 187, 189, 
	191, 193, 195, 197, 199, 201, 203, 205, 
	207, 209, 211, 213, 215, 217, 219, 221, 
	223, 225, 232, 235, 238, 241, 244, 247, 
	250, 253, 256, 259, 262, 273, 275, 277, 
	279, 281, 283, 285, 287, 289, 291, 293, 
	295, 297, 299, 301, 303, 305, 307, 316, 
	323, 326, 330, 333, 336, 339, 343, 346, 
	349, 352, 355, 358, 361, 364, 367, 370, 
	373, 376, 379, 382, 385, 388, 391, 394, 
	397, 400, 403, 406, 409, 414, 417, 420, 
	423, 426, 429, 432, 435, 438, 441, 444, 
	447, 450, 453, 456, 459, 462, 465, 468, 
	471, 474, 477, 480, 483, 486, 489, 492, 
	495, 498, 501, 504, 507, 510, 513, 516, 
	519, 522, 525, 528, 530, 534, 536, 538, 
	540, 542, 544, 546, 548, 550, 552, 554, 
	556, 558, 560, 562, 564, 566, 568, 570, 
	572, 574, 583, 590, 593, 597, 600, 603, 
	606, 610, 613, 616, 619, 622, 625, 628, 
	631, 634, 637, 640, 643, 646, 649, 652, 
	655, 658, 661, 664, 667, 670, 673, 676, 
	680, 683, 686, 689, 692, 695, 698, 701, 
	704, 707, 710, 713, 716, 719, 722, 725, 
	728, 731, 734, 737, 740, 743, 746, 749, 
	752, 755, 758, 761, 763, 765, 767, 769, 
	771, 773, 775, 777, 779, 787, 792, 795, 
	798, 801, 804, 807, 810, 813, 816, 819, 
	822, 825, 828, 831, 834, 837, 840, 843, 
	846, 851, 854, 857, 860, 863, 866, 869, 
	872, 875, 878, 881, 884, 887, 890, 893, 
	896, 899, 902, 905, 908, 911, 914, 917, 
	920, 923, 926, 929, 932, 935, 938, 941, 
	944, 947, 950, 953, 956, 959, 962, 964, 
	966, 968, 970, 972, 974, 976, 978, 980, 
	989, 997, 1000, 1004, 1007, 1010, 1013, 1017, 
	1020, 1023, 1026, 1029, 1032, 1035, 1038, 1041, 
	1044, 1047, 1050, 1053, 1056, 1059, 1062, 1065, 
	1068, 1071, 1074, 1077, 1080, 1083, 1086, 1089, 
	1092, 1095, 1098, 1103, 1106, 1109, 1112, 1115, 
	1118, 1121, 1124, 1127, 1130, 1133, 1136, 1139, 
	1142, 1145, 1148, 1151, 1154, 1157, 1160, 1163, 
	1166, 1169, 1172, 1175, 1178, 1181, 1184, 1187, 
	1190, 1193, 1196, 1199, 1202, 1205, 1208, 1211, 
	1214, 1216, 1218
];

var _lexer_indicies = [
	1, 3, 2, 4, 5, 6, 7, 8, 
	9, 10, 2, 0, 11, 12, 13, 14, 
	15, 16, 17, 0, 18, 0, 19, 20, 
	0, 21, 0, 22, 0, 23, 0, 25, 
	26, 24, 28, 29, 27, 1, 3, 2, 
	4, 5, 6, 7, 8, 9, 2, 0, 
	30, 0, 31, 0, 33, 34, 32, 36, 
	37, 35, 40, 39, 41, 39, 38, 44, 
	43, 45, 43, 42, 44, 43, 46, 43, 
	42, 44, 43, 47, 43, 42, 49, 48, 
	48, 0, 3, 50, 50, 0, 52, 53, 
	51, 3, 0, 54, 0, 55, 0, 56, 
	0, 57, 0, 58, 0, 59, 0, 60, 
	0, 61, 0, 62, 0, 63, 0, 64, 
	0, 65, 0, 66, 0, 67, 0, 0, 
	0, 0, 0, 68, 69, 70, 69, 69, 
	72, 71, 68, 3, 73, 8, 73, 0, 
	74, 75, 74, 0, 78, 77, 79, 80, 
	77, 76, 0, 82, 83, 81, 0, 82, 
	81, 78, 84, 82, 83, 84, 81, 85, 
	78, 86, 87, 88, 89, 90, 91, 92, 
	86, 0, 93, 23, 0, 22, 0, 94, 
	0, 95, 0, 96, 0, 97, 0, 98, 
	0, 99, 0, 100, 0, 101, 0, 102, 
	0, 22, 0, 103, 0, 104, 0, 105, 
	0, 106, 0, 107, 0, 108, 0, 109, 
	0, 110, 0, 111, 0, 112, 0, 113, 
	0, 114, 0, 115, 0, 117, 116, 119, 
	118, 120, 119, 121, 122, 122, 121, 118, 
	123, 119, 118, 124, 119, 118, 125, 119, 
	118, 126, 119, 118, 127, 119, 118, 128, 
	119, 118, 129, 119, 118, 130, 119, 118, 
	131, 119, 118, 119, 132, 118, 133, 135, 
	134, 136, 137, 138, 139, 140, 141, 134, 
	0, 142, 0, 143, 0, 144, 0, 22, 
	0, 145, 0, 146, 0, 147, 0, 148, 
	0, 149, 0, 22, 0, 150, 0, 151, 
	0, 152, 0, 153, 0, 154, 0, 156, 
	155, 158, 157, 159, 158, 160, 161, 162, 
	163, 161, 160, 157, 164, 165, 166, 167, 
	168, 158, 157, 169, 158, 157, 170, 171, 
	158, 157, 172, 158, 157, 173, 158, 157, 
	158, 174, 157, 175, 158, 174, 157, 173, 
	158, 157, 176, 158, 157, 177, 158, 157, 
	178, 158, 157, 179, 158, 157, 180, 158, 
	157, 181, 158, 157, 182, 158, 157, 183, 
	158, 157, 184, 158, 157, 173, 158, 157, 
	185, 158, 157, 186, 158, 157, 187, 158, 
	157, 173, 158, 157, 188, 158, 157, 189, 
	158, 157, 190, 158, 157, 191, 158, 157, 
	192, 158, 157, 173, 158, 157, 193, 158, 
	157, 194, 195, 196, 158, 157, 197, 158, 
	157, 198, 158, 157, 199, 158, 157, 200, 
	158, 157, 201, 158, 157, 202, 158, 157, 
	158, 203, 157, 204, 158, 157, 205, 158, 
	157, 206, 158, 157, 196, 158, 157, 207, 
	158, 157, 208, 158, 157, 209, 158, 157, 
	210, 158, 157, 211, 158, 157, 212, 158, 
	157, 158, 174, 157, 213, 158, 157, 214, 
	158, 157, 215, 158, 157, 216, 158, 157, 
	217, 158, 157, 212, 158, 157, 158, 218, 
	157, 158, 219, 157, 158, 220, 157, 158, 
	221, 157, 158, 222, 157, 158, 223, 157, 
	158, 224, 157, 158, 225, 157, 158, 226, 
	157, 158, 227, 157, 158, 228, 157, 158, 
	229, 157, 158, 230, 157, 158, 231, 157, 
	232, 0, 233, 234, 235, 0, 236, 0, 
	237, 0, 238, 0, 239, 0, 240, 0, 
	241, 0, 242, 0, 243, 0, 244, 0, 
	245, 0, 246, 0, 247, 0, 248, 0, 
	249, 0, 250, 0, 251, 0, 252, 0, 
	253, 0, 255, 254, 257, 256, 258, 257, 
	259, 260, 261, 262, 260, 259, 256, 263, 
	264, 265, 266, 267, 257, 256, 268, 257, 
	256, 269, 270, 257, 256, 271, 257, 256, 
	272, 257, 256, 257, 273, 256, 274, 257, 
	273, 256, 272, 257, 256, 275, 257, 256, 
	276, 257, 256, 277, 257, 256, 278, 257, 
	256, 279, 257, 256, 280, 257, 256, 281, 
	257, 256, 282, 257, 256, 283, 257, 256, 
	272, 257, 256, 284, 257, 256, 285, 257, 
	256, 286, 257, 256, 272, 257, 256, 287, 
	257, 256, 288, 257, 256, 289, 257, 256, 
	290, 257, 256, 291, 257, 256, 272, 257, 
	256, 292, 257, 256, 293, 294, 257, 256, 
	295, 257, 256, 296, 257, 256, 297, 257, 
	256, 298, 257, 256, 299, 257, 256, 300, 
	257, 256, 257, 273, 256, 301, 257, 256, 
	302, 257, 256, 303, 257, 256, 304, 257, 
	256, 305, 257, 256, 300, 257, 256, 257, 
	306, 256, 257, 307, 256, 257, 308, 256, 
	257, 309, 256, 257, 310, 256, 257, 311, 
	256, 257, 312, 256, 257, 313, 256, 257, 
	314, 256, 257, 315, 256, 257, 316, 256, 
	257, 317, 256, 257, 318, 256, 257, 319, 
	256, 320, 0, 321, 0, 322, 0, 323, 
	0, 324, 0, 325, 0, 326, 0, 328, 
	327, 330, 329, 331, 330, 332, 333, 334, 
	333, 332, 329, 335, 336, 337, 330, 329, 
	338, 330, 329, 339, 330, 329, 340, 330, 
	329, 341, 330, 329, 342, 330, 329, 343, 
	330, 329, 344, 330, 329, 345, 330, 329, 
	346, 330, 329, 347, 330, 329, 348, 330, 
	329, 349, 330, 329, 330, 350, 329, 351, 
	330, 329, 352, 330, 329, 353, 330, 329, 
	349, 330, 329, 354, 330, 329, 355, 356, 
	357, 330, 329, 358, 330, 329, 359, 330, 
	329, 360, 330, 329, 361, 330, 329, 362, 
	330, 329, 363, 330, 329, 330, 364, 329, 
	365, 330, 329, 366, 330, 329, 367, 330, 
	329, 357, 330, 329, 368, 330, 329, 369, 
	330, 329, 370, 330, 329, 371, 330, 329, 
	372, 330, 329, 349, 330, 329, 373, 330, 
	329, 374, 330, 329, 375, 330, 329, 376, 
	330, 329, 377, 330, 329, 349, 330, 329, 
	330, 378, 329, 330, 379, 329, 330, 380, 
	329, 330, 381, 329, 330, 382, 329, 330, 
	383, 329, 330, 384, 329, 330, 385, 329, 
	330, 386, 329, 330, 387, 329, 330, 388, 
	329, 330, 389, 329, 330, 390, 329, 330, 
	391, 329, 392, 0, 393, 0, 394, 0, 
	395, 0, 396, 0, 397, 0, 398, 0, 
	400, 399, 402, 401, 403, 402, 404, 405, 
	406, 407, 405, 404, 401, 408, 409, 410, 
	411, 412, 413, 402, 401, 414, 402, 401, 
	415, 416, 402, 401, 417, 402, 401, 418, 
	402, 401, 402, 419, 401, 420, 402, 419, 
	401, 418, 402, 401, 421, 402, 401, 422, 
	402, 401, 423, 402, 401, 424, 402, 401, 
	425, 402, 401, 426, 402, 401, 427, 402, 
	401, 428, 402, 401, 429, 402, 401, 418, 
	402, 401, 430, 402, 401, 431, 402, 401, 
	432, 402, 401, 418, 402, 401, 433, 402, 
	401, 434, 402, 401, 435, 402, 401, 436, 
	402, 401, 437, 402, 401, 418, 402, 401, 
	438, 402, 401, 439, 402, 401, 440, 402, 
	401, 441, 402, 401, 402, 419, 401, 442, 
	402, 401, 443, 444, 445, 402, 401, 446, 
	402, 401, 447, 402, 401, 448, 402, 401, 
	449, 402, 401, 450, 402, 401, 451, 402, 
	401, 402, 452, 401, 453, 402, 401, 454, 
	402, 401, 455, 402, 401, 445, 402, 401, 
	456, 402, 401, 457, 402, 401, 458, 402, 
	401, 459, 402, 401, 460, 402, 401, 441, 
	402, 401, 461, 402, 401, 462, 402, 401, 
	463, 402, 401, 464, 402, 401, 465, 402, 
	401, 441, 402, 401, 402, 466, 401, 402, 
	467, 401, 402, 468, 401, 402, 469, 401, 
	402, 470, 401, 402, 471, 401, 402, 472, 
	401, 402, 473, 401, 402, 474, 401, 402, 
	475, 401, 402, 476, 401, 402, 477, 401, 
	402, 478, 401, 402, 479, 401, 480, 0, 
	2, 0, 481, 0
];

var _lexer_trans_targs = [
	0, 2, 10, 10, 11, 21, 23, 7, 
	37, 40, 400, 3, 48, 58, 85, 89, 
	95, 171, 4, 5, 46, 6, 7, 8, 
	9, 10, 22, 9, 10, 22, 12, 13, 
	14, 15, 14, 14, 15, 14, 16, 16, 
	16, 17, 16, 16, 16, 17, 18, 19, 
	20, 10, 20, 21, 10, 22, 24, 25, 
	26, 27, 28, 29, 30, 31, 32, 33, 
	34, 35, 36, 402, 38, 39, 10, 38, 
	37, 39, 40, 41, 42, 44, 45, 43, 
	41, 42, 43, 41, 44, 2, 45, 11, 
	21, 23, 7, 37, 40, 47, 49, 50, 
	51, 52, 53, 54, 55, 56, 57, 59, 
	60, 61, 62, 63, 64, 65, 66, 67, 
	68, 69, 70, 71, 72, 73, 72, 73, 
	74, 73, 10, 75, 76, 77, 78, 79, 
	80, 81, 82, 83, 84, 2, 10, 10, 
	11, 21, 23, 7, 37, 40, 86, 87, 
	88, 90, 91, 92, 93, 94, 96, 97, 
	98, 99, 100, 101, 102, 101, 102, 103, 
	102, 10, 157, 108, 104, 111, 121, 125, 
	131, 105, 106, 109, 107, 108, 84, 110, 
	112, 113, 114, 115, 116, 117, 118, 119, 
	120, 122, 123, 124, 126, 127, 128, 129, 
	130, 132, 133, 151, 144, 134, 135, 136, 
	137, 138, 139, 140, 141, 142, 143, 145, 
	146, 147, 148, 149, 150, 152, 153, 154, 
	155, 156, 158, 159, 160, 161, 162, 163, 
	164, 165, 166, 167, 168, 169, 170, 10, 
	172, 173, 251, 318, 174, 175, 176, 177, 
	178, 179, 180, 181, 182, 183, 184, 185, 
	186, 187, 188, 189, 190, 191, 192, 193, 
	192, 193, 194, 193, 10, 237, 199, 195, 
	202, 212, 216, 222, 196, 197, 200, 198, 
	199, 84, 201, 203, 204, 205, 206, 207, 
	208, 209, 210, 211, 213, 214, 215, 217, 
	218, 219, 220, 221, 223, 224, 231, 225, 
	226, 227, 228, 229, 230, 232, 233, 234, 
	235, 236, 238, 239, 240, 241, 242, 243, 
	244, 245, 246, 247, 248, 249, 250, 10, 
	252, 253, 254, 255, 256, 257, 258, 259, 
	260, 259, 260, 261, 260, 10, 304, 262, 
	275, 279, 263, 264, 265, 266, 267, 268, 
	269, 270, 271, 272, 273, 274, 84, 276, 
	277, 278, 280, 281, 298, 292, 282, 283, 
	284, 285, 286, 287, 288, 289, 290, 291, 
	293, 294, 295, 296, 297, 299, 300, 301, 
	302, 303, 305, 306, 307, 308, 309, 310, 
	311, 312, 313, 314, 315, 316, 317, 10, 
	319, 320, 321, 322, 323, 324, 325, 326, 
	327, 326, 327, 328, 327, 10, 386, 333, 
	329, 336, 346, 350, 356, 361, 330, 331, 
	334, 332, 333, 84, 335, 337, 338, 339, 
	340, 341, 342, 343, 344, 345, 347, 348, 
	349, 351, 352, 353, 354, 355, 357, 358, 
	359, 360, 362, 363, 380, 374, 364, 365, 
	366, 367, 368, 369, 370, 371, 372, 373, 
	375, 376, 377, 378, 379, 381, 382, 383, 
	384, 385, 387, 388, 389, 390, 391, 392, 
	393, 394, 395, 396, 397, 398, 399, 10, 
	401, 0
];

var _lexer_trans_actions = [
	43, 29, 0, 54, 3, 1, 0, 29, 
	1, 35, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	57, 149, 126, 0, 110, 23, 0, 0, 
	7, 139, 48, 0, 102, 9, 5, 45, 
	134, 45, 0, 33, 122, 33, 33, 0, 
	11, 106, 0, 0, 114, 25, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 27, 118, 27, 
	51, 0, 0, 0, 37, 37, 54, 37, 
	87, 0, 0, 39, 0, 96, 0, 93, 
	90, 41, 96, 90, 99, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 57, 144, 0, 54, 
	84, 0, 81, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 21, 63, 31, 130, 
	60, 57, 31, 63, 57, 66, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 57, 144, 0, 54, 84, 
	0, 72, 33, 84, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 15, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 15, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 57, 144, 
	0, 54, 84, 0, 78, 33, 84, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 19, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 19, 
	0, 0, 0, 0, 0, 0, 0, 57, 
	144, 0, 54, 84, 0, 69, 33, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 13, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 13, 
	0, 0, 0, 0, 0, 0, 0, 57, 
	144, 0, 54, 84, 0, 75, 33, 84, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 17, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 17, 
	0, 0
];

var _lexer_eof_actions = [
	0, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43
];

var lexer_start = 1;
var lexer_first_final = 402;
var lexer_error = 0;

var lexer_en_main = 1;


/* line 129 "ragel/i18n/he.js.rl" */

/* line 130 "ragel/i18n/he.js.rl" */

/* line 131 "ragel/i18n/he.js.rl" */

/* line 132 "ragel/i18n/he.js.rl" */

var Lexer = function(listener) {
  // Check that listener has the required functions
  var events = ['comment', 'tag', 'feature', 'background', 'scenario', 'scenario_outline', 'examples', 'step', 'doc_string', 'row', 'eof'];
  for(var i=0, len=events.length; i<len; i++) {
    var event = events[i];
    if(typeof listener[event] != 'function') {
      throw new Error("Error. No " + event + " function exists on " + JSON.stringify(listener));
    }
  }
  this.listener = listener;
};

Lexer.prototype.scan = function(data) {
  var ending = "\n%_FEATURE_END_%";
  if(typeof data == 'string') {
    data = this.stringToBytes(data + ending);
  } else if(typeof Buffer != 'undefined' && Buffer.isBuffer(data)) {
    // Node.js
    var buf = new Buffer(data.length + ending.length);
    data.copy(buf, 0, 0);
    new Buffer(ending).copy(buf, data.length, 0);
    data = buf;
  }
  var eof = pe = data.length;
  var p = 0;

  this.line_number = 1;
  this.last_newline = 0;
  var signedCharValue=function(v){return v > 127 ? v-256 : v; };

  
/* line 743 "js/lib/gherkin/lexer/he.js" */
{
	  this.cs = lexer_start;
} /* JSCodeGen::writeInit */

/* line 164 "ragel/i18n/he.js.rl" */
  
/* line 750 "js/lib/gherkin/lexer/he.js" */
{
	var _klen, _trans, _keys, _ps, _widec, _acts, _nacts;
	var _goto_level, _resume, _eof_trans, _again, _test_eof;
	var _out;
	_klen = _trans = _keys = _acts = _nacts = null;
	_goto_level = 0;
	_resume = 10;
	_eof_trans = 15;
	_again = 20;
	_test_eof = 30;
	_out = 40;
	while (true) {
	_trigger_goto = false;
	if (_goto_level <= 0) {
	if (p == pe) {
		_goto_level = _test_eof;
		continue;
	}
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	}
	if (_goto_level <= _resume) {
	_keys = _lexer_key_offsets[ this.cs];
	_trans = _lexer_index_offsets[ this.cs];
	_klen = _lexer_single_lengths[ this.cs];
	_break_match = false;
	
	do {
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + _klen - 1;

	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + ( (_upper - _lower) >> 1 );

	        if (( signedCharValue(data[p])) < _lexer_trans_keys[_mid]) {
	           _upper = _mid - 1;
	        } else if (( signedCharValue(data[p])) > _lexer_trans_keys[_mid]) {
	           _lower = _mid + 1;
	        } else {
	           _trans += (_mid - _keys);
	           _break_match = true;
	           break;
	        };
	     } /* while */
	     if (_break_match) { break; }
	     _keys += _klen;
	     _trans += _klen;
	  }
	  _klen = _lexer_range_lengths[ this.cs];
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + (_klen << 1) - 2;
	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + (((_upper-_lower) >> 1) & ~1);
	        if (( signedCharValue(data[p])) < _lexer_trans_keys[_mid]) {
	          _upper = _mid - 2;
	         } else if (( signedCharValue(data[p])) > _lexer_trans_keys[_mid+1]) {
	          _lower = _mid + 2;
	        } else {
	          _trans += ((_mid - _keys) >> 1);
	          _break_match = true;
	          break;
	        }
	     } /* while */
	     if (_break_match) { break; }
	     _trans += _klen
	  }
	} while (false);
	_trans = _lexer_indicies[_trans];
	 this.cs = _lexer_trans_targs[_trans];
	if (_lexer_trans_actions[_trans] != 0) {
		_acts = _lexer_trans_actions[_trans];
		_nacts = _lexer_actions[_acts];
		_acts += 1;
		while (_nacts > 0) {
			_nacts -= 1;
			_acts += 1;
			switch (_lexer_actions[_acts - 1]) {
case 0:
/* line 6 "ragel/i18n/he.js.rl" */

    this.content_start = p;
    this.current_line = this.line_number;
    this.start_col = p - this.last_newline - (this.keyword+':').length;
  		break;
case 1:
/* line 12 "ragel/i18n/he.js.rl" */

    this.current_line = this.line_number;
    this.start_col = p - this.last_newline;
  		break;
case 2:
/* line 17 "ragel/i18n/he.js.rl" */

    this.content_start = p;
  		break;
case 3:
/* line 21 "ragel/i18n/he.js.rl" */

    this.docstring_content_type_start = p;
  		break;
case 4:
/* line 25 "ragel/i18n/he.js.rl" */

    this.docstring_content_type_end = p;
  		break;
case 5:
/* line 29 "ragel/i18n/he.js.rl" */

    var con = this.unindent(
      this.start_col, 
      this.bytesToString(data.slice(this.content_start, this.next_keyword_start-1)).replace(/(\r?\n)?([\t ])*$/, '').replace(/\\\"\\\"\\\"/mg, '"""')
    );
    var con_type = this.bytesToString(data.slice(this.docstring_content_type_start, this.docstring_content_type_end)).trim();
    this.listener.doc_string(con_type, con, this.current_line); 
  		break;
case 6:
/* line 38 "ragel/i18n/he.js.rl" */

    p = this.store_keyword_content('feature', data, p, eof);
  		break;
case 7:
/* line 42 "ragel/i18n/he.js.rl" */

    p = this.store_keyword_content('background', data, p, eof);
  		break;
case 8:
/* line 46 "ragel/i18n/he.js.rl" */

    p = this.store_keyword_content('scenario', data, p, eof);
  		break;
case 9:
/* line 50 "ragel/i18n/he.js.rl" */

    p = this.store_keyword_content('scenario_outline', data, p, eof);
  		break;
case 10:
/* line 54 "ragel/i18n/he.js.rl" */

    p = this.store_keyword_content('examples', data, p, eof);
  		break;
case 11:
/* line 58 "ragel/i18n/he.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.step(this.keyword, con, this.current_line);
  		break;
case 12:
/* line 63 "ragel/i18n/he.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.comment(con, this.line_number);
    this.keyword_start = null;
  		break;
case 13:
/* line 69 "ragel/i18n/he.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.tag(con, this.line_number);
    this.keyword_start = null;
  		break;
case 14:
/* line 75 "ragel/i18n/he.js.rl" */

    this.line_number++;
  		break;
case 15:
/* line 79 "ragel/i18n/he.js.rl" */

    this.last_newline = p + 1;
  		break;
case 16:
/* line 83 "ragel/i18n/he.js.rl" */

    this.keyword_start = this.keyword_start || p;
  		break;
case 17:
/* line 87 "ragel/i18n/he.js.rl" */

    this.keyword = this.bytesToString(data.slice(this.keyword_start, p)).replace(/:$/, '');
    this.keyword_start = null;
  		break;
case 18:
/* line 92 "ragel/i18n/he.js.rl" */

    this.next_keyword_start = p;
  		break;
case 19:
/* line 96 "ragel/i18n/he.js.rl" */

    p = p - 1;
    current_row = [];
    this.current_line = this.line_number;
  		break;
case 20:
/* line 102 "ragel/i18n/he.js.rl" */

    this.content_start = p;
  		break;
case 21:
/* line 106 "ragel/i18n/he.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    current_row.push(con.replace(/\\\|/, "|").replace(/\\n/, "\n").replace(/\\\\/, "\\"));
  		break;
case 22:
/* line 111 "ragel/i18n/he.js.rl" */

    this.listener.row(current_row, this.current_line);
  		break;
case 23:
/* line 115 "ragel/i18n/he.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw new Error("Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.");
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 977 "js/lib/gherkin/lexer/he.js" */
			} /* action switch */
		}
	}
	if (_trigger_goto) {
		continue;
	}
	}
	if (_goto_level <= _again) {
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	p += 1;
	if (p != pe) {
		_goto_level = _resume;
		continue;
	}
	}
	if (_goto_level <= _test_eof) {
	if (p == eof) {
	__acts = _lexer_eof_actions[ this.cs];
	__nacts =  _lexer_actions[__acts];
	__acts += 1;
	while (__nacts > 0) {
		__nacts -= 1;
		__acts += 1;
		switch (_lexer_actions[__acts - 1]) {
case 23:
/* line 115 "ragel/i18n/he.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw new Error("Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.");
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 1016 "js/lib/gherkin/lexer/he.js" */
		} /* eof action switch */
	}
	if (_trigger_goto) {
		continue;
	}
}
	}
	if (_goto_level <= _out) {
		break;
	}
	}
	}

/* line 165 "ragel/i18n/he.js.rl" */
};


/*
 * Decode utf-8 byte sequence to string.
 */
var decodeUtf8 = function(bytes) {
  var result = "";
  var i = 0;
  var wc;
  var c;

  while (i < bytes.length) {
    /* parse as UTF-8 lead byte */
    wc = bytes[i++];
    if (wc < 0x80) {
      count = 0;
    } else if (wc < 0xC2 || wc >= 0xF8) {
      throw new Error("input is not a valid UTF-8 lead octet");
    } else if (wc < 0xE0) {
      count = 1;
      wc = (wc & 0x1F) << 6;
    } else if (wc < 0xF0) {
      count = 2;
      wc = (wc & 0x0F) << 12;
    } else /* wc < 0xF8 */ {
      count = 3;
      wc = (wc & 0x07) << 18;
    }

    /* parse trail bytes, if any */
    while (count) {
      if (!(i < bytes.length)) {
        throw new Error("short read");
      }
      if ((c = bytes[i++] ^ 0x80) > 0x3F) {
        throw new Error("input is not a valid UTF-8 trail octet");
      }
      wc |= c << (6 * --count);
      if (wc < (1 << (5 * count + 6))) {
        throw new Error("invalid non-minimal encoded input");
      }
    }

    /* handle conversion to UTF-16 if needed */
    if (wc > 0xFFFF) {
      wc -= 0x10000;
      result += String.fromCharCode(0xD800 + (wc >> 10));
      wc = 0xDC00 + (wc & 0x3FF);
    }
    result += String.fromCharCode(wc);
  }

  return result;
};

/*
 * Encode string to an array of bytes using utf8 encoding.
 *
 * Javascript internally stores character data as utf16 (like java).
 * String.charCodeAt() does *not* produce unicode points, but simply
 * reflects this internal representation. Thus, it is necessary
 * to first decode the utf-16 representation before encoding to
 * utf-8.
 */
var encodeUtf8 = function(string) {
  var bytes = [];
  var i = 0;
  var j = 0;
  var wc;

  while (i < string.length) {
    wc = string.charCodeAt(i++);
    if (wc >= 0xD800 && wc <= 0xDBFF && i < string.length && string.charCodeAt(i) >= 0xDC00 && string.charCodeAt(i) <= 0xDFFF) {
      /* decode UTF-16 */
      wc = 0x10000 + ((wc & 0x3FF) << 10) + (string.charCodeAt(i++) & 0x3FF);
    }

    /* emit lead byte */
    if (wc < 0x80) {
      bytes[j++] = wc;
      count = 0;
    } else if (wc < 0x800) {
      bytes[j++] = 0xC0 | (wc >> 6);
      count = 1;
    } else if (wc < 0x10000) {
      bytes[j++] = 0xE0 | (wc >> 12);
      count = 2;
    } else {
      /* SMP: 21-bit Unicode */
      bytes[j++] = 0xF0 | (wc >> 18);
      count = 3;
    }

    /* emit trail bytes, if any */
    while (count) {
      bytes[j++] = 0x80 | ((wc >> (6 * --count)) & 0x3F);
    }
  }

  return bytes;

};

Lexer.prototype.bytesToString = function(bytes) {
  if(typeof bytes.write == 'function') {
    // Node.js
    return bytes.toString('utf-8');
  }
  return decodeUtf8(bytes);
};

Lexer.prototype.stringToBytes = function(string) {
  return encodeUtf8(string);
};

Lexer.prototype.unindent = function(startcol, text) {
  startcol = startcol || 0;
  return text.replace(new RegExp('^[\t ]{0,' + startcol + '}', 'gm'), ''); 
};

Lexer.prototype.store_keyword_content = function(event, data, p, eof) {
  var end_point = (!this.next_keyword_start || (p == eof)) ? p : this.next_keyword_start;
  var content = this.unindent(this.start_col + 2, this.bytesToString(data.slice(this.content_start, end_point))).replace(/\s+$/,"");
  var content_lines = content.split("\n")
  var name = content_lines.shift() || "";
  name = name.trim();
  var description = content_lines.join("\n");
  this.listener[event](this.keyword, name, description, this.current_line);
  var nks = this.next_keyword_start;
  this.next_keyword_start = null;
  return nks ? nks - 1 : p;
};

Lexer.prototype.current_line_content = function(data, p) {
  var rest = Array.prototype.slice.call(data,this.last_newline, -1);
  var end = rest.indexOf(10) || -1;
  return this.bytesToString(rest.slice(0, end)).trim();
};

// Node.js export
if(typeof module !== 'undefined') {
  module.exports = Lexer;
}
// Require.js export
if (typeof define !== 'undefined') {
  if(define.amd) {
    define('gherkin/lexer/he', [], function() {
      return Lexer;
    });
  } else {
    define('gherkin/lexer/he', function(require, exports, module) {
      exports.Lexer = Lexer;
    });
  }
}

})();

}).call(this,require("buffer").Buffer)

},{"buffer":69}],209:[function(require,module,exports){
(function (Buffer){

/* line 1 "ragel/i18n/hi.js.rl" */
;(function() {


/* line 126 "ragel/i18n/hi.js.rl" */



/* line 11 "js/lib/gherkin/lexer/hi.js" */
var _lexer_actions = [
	0, 1, 0, 1, 1, 1, 2, 1, 
	3, 1, 4, 1, 5, 1, 6, 1, 
	7, 1, 8, 1, 9, 1, 10, 1, 
	11, 1, 12, 1, 13, 1, 16, 1, 
	17, 1, 18, 1, 19, 1, 20, 1, 
	21, 1, 22, 1, 23, 2, 2, 18, 
	2, 3, 4, 2, 13, 0, 2, 14, 
	15, 2, 17, 0, 2, 17, 1, 2, 
	17, 16, 2, 17, 19, 2, 18, 6, 
	2, 18, 7, 2, 18, 8, 2, 18, 
	9, 2, 18, 10, 2, 18, 16, 2, 
	20, 21, 2, 22, 0, 2, 22, 1, 
	2, 22, 16, 2, 22, 19, 3, 4, 
	14, 15, 3, 5, 14, 15, 3, 11, 
	14, 15, 3, 12, 14, 15, 3, 13, 
	14, 15, 3, 14, 15, 18, 3, 17, 
	0, 11, 3, 17, 14, 15, 4, 2, 
	14, 15, 18, 4, 3, 4, 14, 15, 
	4, 17, 0, 14, 15, 5, 17, 0, 
	11, 14, 15
];

var _lexer_key_offsets = [
	0, 0, 12, 13, 23, 24, 25, 26, 
	27, 28, 29, 30, 32, 34, 45, 46, 
	47, 49, 51, 56, 61, 66, 71, 75, 
	79, 81, 82, 83, 84, 85, 86, 87, 
	88, 89, 90, 91, 92, 93, 94, 95, 
	96, 101, 108, 113, 117, 123, 126, 128, 
	134, 145, 146, 147, 148, 149, 150, 151, 
	152, 153, 154, 155, 156, 157, 158, 159, 
	160, 161, 162, 163, 170, 172, 174, 176, 
	178, 180, 182, 184, 186, 188, 190, 192, 
	194, 196, 198, 200, 202, 204, 206, 208, 
	219, 220, 221, 223, 224, 225, 226, 227, 
	228, 229, 230, 231, 232, 233, 234, 235, 
	236, 237, 238, 239, 240, 241, 242, 243, 
	244, 245, 246, 247, 248, 249, 250, 251, 
	252, 253, 254, 255, 258, 259, 261, 262, 
	264, 265, 267, 268, 269, 270, 271, 272, 
	273, 274, 275, 276, 277, 278, 279, 280, 
	281, 282, 284, 285, 286, 287, 288, 289, 
	290, 291, 292, 293, 294, 295, 296, 297, 
	298, 299, 300, 301, 302, 303, 304, 305, 
	306, 307, 308, 317, 319, 329, 331, 333, 
	335, 337, 339, 341, 343, 345, 347, 350, 
	352, 354, 356, 358, 360, 362, 364, 366, 
	368, 370, 372, 374, 376, 378, 380, 382, 
	384, 386, 388, 390, 392, 394, 396, 398, 
	400, 402, 404, 406, 408, 410, 412, 414, 
	418, 420, 422, 424, 427, 429, 432, 434, 
	436, 438, 440, 442, 444, 446, 448, 450, 
	452, 454, 456, 458, 460, 462, 464, 466, 
	468, 470, 472, 474, 476, 478, 480, 482, 
	484, 486, 488, 490, 492, 494, 496, 498, 
	500, 502, 504, 506, 508, 510, 512, 514, 
	516, 518, 520, 522, 524, 526, 528, 530, 
	531, 532, 541, 543, 553, 555, 557, 559, 
	561, 563, 565, 567, 569, 571, 574, 576, 
	578, 580, 582, 584, 586, 588, 590, 592, 
	594, 596, 598, 600, 602, 604, 606, 608, 
	610, 612, 614, 616, 618, 620, 622, 624, 
	626, 628, 630, 632, 634, 636, 638, 642, 
	644, 647, 649, 652, 654, 657, 659, 661, 
	663, 665, 667, 669, 671, 673, 675, 677, 
	679, 681, 683, 685, 687, 690, 692, 694, 
	696, 698, 700, 702, 704, 706, 708, 710, 
	712, 714, 716, 718, 720, 722, 724, 726, 
	728, 730, 732, 734, 736, 738, 740, 742, 
	744, 746, 748, 750, 752, 754, 756, 758, 
	760, 762, 764, 766, 768, 770, 772, 774, 
	776, 778, 780, 782, 784, 786, 788, 790, 
	792, 794, 796, 798, 800, 802, 804, 806, 
	808, 810, 812, 814, 816, 818, 820, 822, 
	824, 826, 828, 830, 832, 834, 836, 838, 
	840, 842, 844, 845, 846, 847, 848, 849, 
	850, 851, 852, 853, 854, 855, 856, 857, 
	858, 859, 860, 861, 862, 863, 864, 865, 
	866, 867, 868, 869, 878, 880, 890, 892, 
	894, 896, 898, 900, 902, 904, 906, 908, 
	911, 913, 915, 917, 919, 921, 923, 925, 
	927, 929, 931, 933, 935, 937, 939, 941, 
	943, 945, 947, 949, 951, 953, 955, 957, 
	959, 961, 963, 965, 967, 969, 971, 973, 
	975, 979, 981, 983, 985, 988, 990, 993, 
	995, 997, 999, 1001, 1003, 1005, 1007, 1009, 
	1011, 1013, 1015, 1017, 1019, 1021, 1023, 1026, 
	1028, 1030, 1032, 1034, 1036, 1038, 1040, 1042, 
	1044, 1046, 1048, 1050, 1052, 1054, 1056, 1058, 
	1060, 1062, 1064, 1066, 1068, 1070, 1072, 1074, 
	1076, 1078, 1080, 1082, 1084, 1086, 1088, 1090, 
	1092, 1094, 1096, 1098, 1100, 1102, 1104, 1106, 
	1108, 1110, 1112, 1114, 1116, 1118, 1120, 1122, 
	1124, 1126, 1128, 1130, 1132, 1134, 1136, 1137, 
	1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 
	1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 
	1154, 1155, 1156, 1157, 1158, 1166, 1168, 1172, 
	1174, 1176, 1178, 1180, 1182, 1184, 1186, 1188, 
	1190, 1192, 1194, 1196, 1198, 1200, 1202, 1204, 
	1206, 1209, 1211, 1213, 1215, 1217, 1219, 1221, 
	1223, 1225, 1227, 1229, 1231, 1233, 1235, 1237, 
	1239, 1241, 1243, 1245, 1247, 1250, 1252, 1254, 
	1256, 1258, 1260, 1262, 1264, 1266, 1268, 1270, 
	1272, 1274, 1276, 1278, 1280, 1282, 1284, 1286, 
	1288, 1290, 1292, 1294, 1296, 1298, 1300, 1302, 
	1304, 1306, 1308, 1310, 1312, 1314, 1316, 1318, 
	1320, 1322, 1324, 1326, 1328, 1330, 1332, 1334, 
	1336, 1338, 1340, 1342, 1344, 1346, 1348, 1350, 
	1352, 1354, 1356, 1358, 1360, 1362, 1364, 1366, 
	1368, 1370, 1372, 1374, 1376, 1378, 1380, 1382, 
	1384, 1386, 1388, 1390, 1392, 1394, 1396, 1397, 
	1398
];

var _lexer_trans_keys = [
	-32, 10, 32, 34, 35, 37, 42, 64, 
	124, 239, 9, 13, -92, -123, -119, -108, 
	-107, -102, -100, -92, -86, -81, -80, -32, 
	-92, -105, -32, -92, -80, 32, 10, 13, 
	10, 13, -32, 10, 32, 34, 35, 37, 
	42, 64, 124, 9, 13, 34, 34, 10, 
	13, 10, 13, 10, 32, 34, 9, 13, 
	10, 32, 34, 9, 13, 10, 32, 34, 
	9, 13, 10, 32, 34, 9, 13, 10, 
	32, 9, 13, 10, 32, 9, 13, 10, 
	13, 10, 95, 70, 69, 65, 84, 85, 
	82, 69, 95, 69, 78, 68, 95, 37, 
	13, 32, 64, 9, 10, 9, 10, 13, 
	32, 64, 11, 12, 10, 32, 64, 9, 
	13, 32, 124, 9, 13, 10, 32, 92, 
	124, 9, 13, 10, 92, 124, 10, 92, 
	10, 32, 92, 124, 9, 13, -32, 10, 
	32, 34, 35, 37, 42, 64, 124, 9, 
	13, -32, -92, -90, -32, -92, -66, -32, 
	-92, -71, -32, -92, -80, -32, -92, -93, 
	58, 10, 10, -32, 10, 32, 35, 124, 
	9, 13, -92, 10, -80, 10, -32, 10, 
	-91, 10, -126, 10, -32, 10, -92, 10, 
	-86, 10, 10, 32, -32, 10, -92, 10, 
	-78, 10, -32, 10, -91, 10, -121, 10, 
	-32, 10, -92, 10, -106, 10, 10, 58, 
	-32, 10, 32, 34, 35, 37, 42, 64, 
	124, 9, 13, -32, -92, -90, -65, -32, 
	-92, -66, -32, -92, -88, -32, -91, -115, 
	-32, -92, -92, -32, -91, -127, -32, -91, 
	-126, -32, -92, -126, -32, -92, -107, -32, 
	-92, -65, -32, -92, -84, -32, -92, -84, 
	-91, -90, -32, -92, -91, -80, -32, 32, 
	-92, -88, -65, -32, -92, -90, -32, -91, 
	-125, -32, -92, -74, -32, -91, -115, -32, 
	-92, -81, 32, 58, -32, -92, -80, -32, 
	-91, -126, -32, -92, -86, -32, -92, -80, 
	-32, -91, -121, -32, -92, -106, -32, -92, 
	-66, 58, 10, 10, -32, 10, 32, 35, 
	37, 42, 64, 9, 13, -92, 10, -123, 
	-108, -107, -102, -100, -92, -86, -81, -80, 
	10, -32, 10, -92, 10, -105, 10, -32, 
	10, -92, 10, -80, 10, 10, 32, -32, 
	10, -92, 10, -90, -65, 10, -32, 10, 
	-92, 10, -66, 10, -32, 10, -92, 10, 
	-88, 10, -32, 10, -91, 10, -115, 10, 
	-32, 10, -92, 10, -92, 10, -32, 10, 
	-91, 10, -127, 10, -32, 10, -91, 10, 
	-126, 10, -32, 10, -92, 10, -126, 10, 
	-32, 10, -92, 10, -107, 10, -32, 10, 
	-92, 10, -65, 10, -32, 10, -92, 10, 
	-84, 10, -32, 10, -92, 10, -84, 10, 
	-91, -90, -32, 10, -92, 10, -80, 10, 
	-32, 10, 32, -92, 10, -88, -65, 10, 
	-32, 10, -92, 10, -90, 10, -32, 10, 
	-91, 10, -125, 10, -32, 10, -92, 10, 
	-74, 10, -32, 10, -91, 10, -115, 10, 
	-32, 10, -92, 10, -81, 10, 10, 58, 
	-32, 10, -92, 10, -90, 10, -32, 10, 
	-91, 10, -126, 10, -32, 10, -92, 10, 
	-86, 10, 10, 32, -32, 10, -92, 10, 
	-78, 10, -32, 10, -91, 10, -121, 10, 
	-32, 10, -92, 10, -106, 10, 10, 95, 
	10, 70, 10, 69, 10, 65, 10, 84, 
	10, 85, 10, 82, 10, 69, 10, 95, 
	10, 69, 10, 78, 10, 68, 10, 95, 
	10, 37, 10, 10, -32, 10, 32, 35, 
	37, 42, 64, 9, 13, -92, 10, -123, 
	-108, -107, -102, -100, -92, -86, -81, -80, 
	10, -32, 10, -92, 10, -105, 10, -32, 
	10, -92, 10, -80, 10, 10, 32, -32, 
	10, -92, 10, -90, -65, 10, -32, 10, 
	-92, 10, -66, 10, -32, 10, -92, 10, 
	-88, 10, -32, 10, -91, 10, -115, 10, 
	-32, 10, -92, 10, -92, 10, -32, 10, 
	-91, 10, -127, 10, -32, 10, -91, 10, 
	-126, 10, -32, 10, -92, 10, -126, 10, 
	-32, 10, -92, 10, -107, 10, -32, 10, 
	-92, 10, -65, 10, -32, 10, -92, 10, 
	-84, 10, -32, 10, -92, 10, -84, 10, 
	-91, -90, -32, 10, -92, -91, 10, -80, 
	10, -32, 10, 32, -92, 10, -88, -65, 
	10, -32, 10, -92, 10, -90, 10, -32, 
	10, -91, 10, -125, 10, -32, 10, -92, 
	10, -74, 10, -32, 10, -91, 10, -115, 
	10, -32, 10, -92, 10, -81, 10, 10, 
	32, 58, -32, 10, -92, 10, -80, 10, 
	-32, 10, -91, 10, -126, 10, -32, 10, 
	-92, 10, -86, 10, -32, 10, -92, 10, 
	-80, 10, -32, 10, -91, 10, -121, 10, 
	-32, 10, -92, 10, -106, 10, -32, 10, 
	-92, 10, -66, 10, 10, 58, -125, 10, 
	-32, 10, -92, 10, -73, 10, -32, 10, 
	-91, 10, -115, 10, -32, 10, -92, 10, 
	-96, 10, -32, 10, -92, 10, -83, 10, 
	-32, 10, -91, 10, -126, 10, -32, 10, 
	-92, 10, -82, 10, -32, 10, -92, 10, 
	-65, 10, -32, 10, -92, 10, -90, 10, 
	-32, 10, -91, 10, -126, 10, -32, 10, 
	-92, 10, -86, 10, 10, 32, -32, 10, 
	-92, 10, -78, 10, -32, 10, -91, 10, 
	-121, 10, -32, 10, -92, 10, -106, 10, 
	10, 95, 10, 70, 10, 69, 10, 65, 
	10, 84, 10, 85, 10, 82, 10, 69, 
	10, 95, 10, 69, 10, 78, 10, 68, 
	10, 95, 10, 37, -125, -32, -92, -73, 
	-32, -91, -115, -32, -92, -96, -32, -92, 
	-83, -32, -91, -126, -32, -92, -82, -32, 
	-92, -65, 58, 10, 10, -32, 10, 32, 
	35, 37, 42, 64, 9, 13, -92, 10, 
	-123, -108, -107, -102, -100, -92, -86, -81, 
	-80, 10, -32, 10, -92, 10, -105, 10, 
	-32, 10, -92, 10, -80, 10, 10, 32, 
	-32, 10, -92, 10, -90, -65, 10, -32, 
	10, -92, 10, -66, 10, -32, 10, -92, 
	10, -88, 10, -32, 10, -91, 10, -115, 
	10, -32, 10, -92, 10, -92, 10, -32, 
	10, -91, 10, -127, 10, -32, 10, -91, 
	10, -126, 10, -32, 10, -92, 10, -126, 
	10, -32, 10, -92, 10, -107, 10, -32, 
	10, -92, 10, -65, 10, -32, 10, -92, 
	10, -84, 10, -32, 10, -92, 10, -84, 
	10, -91, -90, -32, 10, -92, 10, -80, 
	10, -32, 10, 32, -92, 10, -88, -65, 
	10, -32, 10, -92, 10, -90, 10, -32, 
	10, -91, 10, -125, 10, -32, 10, -92, 
	10, -74, 10, -32, 10, -91, 10, -115, 
	10, -32, 10, -92, 10, -81, 10, 10, 
	32, 58, -32, 10, -92, 10, -80, 10, 
	-32, 10, -91, 10, -126, 10, -32, 10, 
	-92, 10, -86, 10, -32, 10, -92, 10, 
	-80, 10, -32, 10, -91, 10, -121, 10, 
	-32, 10, -92, 10, -106, 10, -32, 10, 
	-92, 10, -66, 10, 10, 58, -32, 10, 
	-92, 10, -90, 10, -32, 10, -91, 10, 
	-126, 10, -32, 10, -92, 10, -86, 10, 
	10, 32, -32, 10, -92, 10, -78, 10, 
	-32, 10, -91, 10, -121, 10, -32, 10, 
	-92, 10, -106, 10, 10, 95, 10, 70, 
	10, 69, 10, 65, 10, 84, 10, 85, 
	10, 82, 10, 69, 10, 95, 10, 69, 
	10, 78, 10, 68, 10, 95, 10, 37, 
	-32, -92, -90, -32, -91, -126, -32, -92, 
	-86, 32, -32, -92, -78, -32, -91, -121, 
	-32, -92, -106, 58, 10, 10, -32, 10, 
	32, 35, 37, 64, 9, 13, -92, 10, 
	-119, -86, -80, 10, -32, 10, -92, 10, 
	-90, 10, -32, 10, -92, 10, -66, 10, 
	-32, 10, -92, 10, -71, 10, -32, 10, 
	-92, 10, -80, 10, -32, 10, -92, 10, 
	-93, 10, 10, 58, -32, 10, -92, -91, 
	10, -80, 10, -32, 10, -92, 10, -65, 
	10, -32, 10, -92, 10, -90, 10, -32, 
	10, -91, 10, -125, 10, -32, 10, -92, 
	10, -74, 10, -32, 10, -91, 10, -115, 
	10, -32, 10, -92, 10, -81, 10, 10, 
	32, 58, -32, 10, -92, 10, -80, 10, 
	-32, 10, -91, 10, -126, 10, -32, 10, 
	-92, 10, -86, 10, -32, 10, -92, 10, 
	-80, 10, -32, 10, -91, 10, -121, 10, 
	-32, 10, -92, 10, -106, 10, -32, 10, 
	-92, 10, -66, 10, -125, 10, -32, 10, 
	-92, 10, -73, 10, -32, 10, -91, 10, 
	-115, 10, -32, 10, -92, 10, -96, 10, 
	-32, 10, -92, 10, -83, 10, -32, 10, 
	-91, 10, -126, 10, -32, 10, -92, 10, 
	-82, 10, -32, 10, -92, 10, -65, 10, 
	-32, 10, -91, 10, -126, 10, -32, 10, 
	-92, 10, -86, 10, 10, 32, -32, 10, 
	-92, 10, -78, 10, -32, 10, -91, 10, 
	-121, 10, -32, 10, -92, 10, -106, 10, 
	10, 95, 10, 70, 10, 69, 10, 65, 
	10, 84, 10, 85, 10, 82, 10, 69, 
	10, 95, 10, 69, 10, 78, 10, 68, 
	10, 95, 10, 37, 187, 191, 0
];

var _lexer_single_lengths = [
	0, 10, 1, 10, 1, 1, 1, 1, 
	1, 1, 1, 2, 2, 9, 1, 1, 
	2, 2, 3, 3, 3, 3, 2, 2, 
	2, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	3, 5, 3, 2, 4, 3, 2, 4, 
	9, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 5, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 9, 
	1, 1, 2, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 2, 1, 2, 
	1, 2, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 2, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 7, 2, 10, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 3, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 3, 2, 3, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 1, 
	1, 7, 2, 10, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 3, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	3, 2, 3, 2, 3, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 3, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 7, 2, 10, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 3, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 3, 2, 3, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 3, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 6, 2, 4, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	3, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 3, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 1, 1, 
	0
];

var _lexer_range_lengths = [
	0, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 0, 0, 
	0, 0, 1, 1, 1, 1, 1, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 1, 1, 1, 1, 0, 0, 1, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0
];

var _lexer_index_offsets = [
	0, 0, 12, 14, 25, 27, 29, 31, 
	33, 35, 37, 39, 42, 45, 56, 58, 
	60, 63, 66, 71, 76, 81, 86, 90, 
	94, 97, 99, 101, 103, 105, 107, 109, 
	111, 113, 115, 117, 119, 121, 123, 125, 
	127, 132, 139, 144, 148, 154, 158, 161, 
	167, 178, 180, 182, 184, 186, 188, 190, 
	192, 194, 196, 198, 200, 202, 204, 206, 
	208, 210, 212, 214, 221, 224, 227, 230, 
	233, 236, 239, 242, 245, 248, 251, 254, 
	257, 260, 263, 266, 269, 272, 275, 278, 
	289, 291, 293, 296, 298, 300, 302, 304, 
	306, 308, 310, 312, 314, 316, 318, 320, 
	322, 324, 326, 328, 330, 332, 334, 336, 
	338, 340, 342, 344, 346, 348, 350, 352, 
	354, 356, 358, 360, 363, 365, 368, 370, 
	373, 375, 378, 380, 382, 384, 386, 388, 
	390, 392, 394, 396, 398, 400, 402, 404, 
	406, 408, 411, 413, 415, 417, 419, 421, 
	423, 425, 427, 429, 431, 433, 435, 437, 
	439, 441, 443, 445, 447, 449, 451, 453, 
	455, 457, 459, 468, 471, 482, 485, 488, 
	491, 494, 497, 500, 503, 506, 509, 513, 
	516, 519, 522, 525, 528, 531, 534, 537, 
	540, 543, 546, 549, 552, 555, 558, 561, 
	564, 567, 570, 573, 576, 579, 582, 585, 
	588, 591, 594, 597, 600, 603, 606, 609, 
	613, 616, 619, 622, 626, 629, 633, 636, 
	639, 642, 645, 648, 651, 654, 657, 660, 
	663, 666, 669, 672, 675, 678, 681, 684, 
	687, 690, 693, 696, 699, 702, 705, 708, 
	711, 714, 717, 720, 723, 726, 729, 732, 
	735, 738, 741, 744, 747, 750, 753, 756, 
	759, 762, 765, 768, 771, 774, 777, 780, 
	782, 784, 793, 796, 807, 810, 813, 816, 
	819, 822, 825, 828, 831, 834, 838, 841, 
	844, 847, 850, 853, 856, 859, 862, 865, 
	868, 871, 874, 877, 880, 883, 886, 889, 
	892, 895, 898, 901, 904, 907, 910, 913, 
	916, 919, 922, 925, 928, 931, 934, 938, 
	941, 945, 948, 952, 955, 959, 962, 965, 
	968, 971, 974, 977, 980, 983, 986, 989, 
	992, 995, 998, 1001, 1004, 1008, 1011, 1014, 
	1017, 1020, 1023, 1026, 1029, 1032, 1035, 1038, 
	1041, 1044, 1047, 1050, 1053, 1056, 1059, 1062, 
	1065, 1068, 1071, 1074, 1077, 1080, 1083, 1086, 
	1089, 1092, 1095, 1098, 1101, 1104, 1107, 1110, 
	1113, 1116, 1119, 1122, 1125, 1128, 1131, 1134, 
	1137, 1140, 1143, 1146, 1149, 1152, 1155, 1158, 
	1161, 1164, 1167, 1170, 1173, 1176, 1179, 1182, 
	1185, 1188, 1191, 1194, 1197, 1200, 1203, 1206, 
	1209, 1212, 1215, 1218, 1221, 1224, 1227, 1230, 
	1233, 1236, 1239, 1241, 1243, 1245, 1247, 1249, 
	1251, 1253, 1255, 1257, 1259, 1261, 1263, 1265, 
	1267, 1269, 1271, 1273, 1275, 1277, 1279, 1281, 
	1283, 1285, 1287, 1289, 1298, 1301, 1312, 1315, 
	1318, 1321, 1324, 1327, 1330, 1333, 1336, 1339, 
	1343, 1346, 1349, 1352, 1355, 1358, 1361, 1364, 
	1367, 1370, 1373, 1376, 1379, 1382, 1385, 1388, 
	1391, 1394, 1397, 1400, 1403, 1406, 1409, 1412, 
	1415, 1418, 1421, 1424, 1427, 1430, 1433, 1436, 
	1439, 1443, 1446, 1449, 1452, 1456, 1459, 1463, 
	1466, 1469, 1472, 1475, 1478, 1481, 1484, 1487, 
	1490, 1493, 1496, 1499, 1502, 1505, 1508, 1512, 
	1515, 1518, 1521, 1524, 1527, 1530, 1533, 1536, 
	1539, 1542, 1545, 1548, 1551, 1554, 1557, 1560, 
	1563, 1566, 1569, 1572, 1575, 1578, 1581, 1584, 
	1587, 1590, 1593, 1596, 1599, 1602, 1605, 1608, 
	1611, 1614, 1617, 1620, 1623, 1626, 1629, 1632, 
	1635, 1638, 1641, 1644, 1647, 1650, 1653, 1656, 
	1659, 1662, 1665, 1668, 1671, 1674, 1677, 1679, 
	1681, 1683, 1685, 1687, 1689, 1691, 1693, 1695, 
	1697, 1699, 1701, 1703, 1705, 1707, 1709, 1711, 
	1713, 1715, 1717, 1719, 1721, 1729, 1732, 1737, 
	1740, 1743, 1746, 1749, 1752, 1755, 1758, 1761, 
	1764, 1767, 1770, 1773, 1776, 1779, 1782, 1785, 
	1788, 1792, 1795, 1798, 1801, 1804, 1807, 1810, 
	1813, 1816, 1819, 1822, 1825, 1828, 1831, 1834, 
	1837, 1840, 1843, 1846, 1849, 1853, 1856, 1859, 
	1862, 1865, 1868, 1871, 1874, 1877, 1880, 1883, 
	1886, 1889, 1892, 1895, 1898, 1901, 1904, 1907, 
	1910, 1913, 1916, 1919, 1922, 1925, 1928, 1931, 
	1934, 1937, 1940, 1943, 1946, 1949, 1952, 1955, 
	1958, 1961, 1964, 1967, 1970, 1973, 1976, 1979, 
	1982, 1985, 1988, 1991, 1994, 1997, 2000, 2003, 
	2006, 2009, 2012, 2015, 2018, 2021, 2024, 2027, 
	2030, 2033, 2036, 2039, 2042, 2045, 2048, 2051, 
	2054, 2057, 2060, 2063, 2066, 2069, 2072, 2074, 
	2076
];

var _lexer_indicies = [
	1, 3, 2, 4, 5, 6, 7, 8, 
	9, 10, 2, 0, 11, 0, 12, 13, 
	14, 15, 16, 17, 18, 19, 20, 21, 
	0, 22, 0, 23, 0, 14, 0, 24, 
	0, 25, 0, 26, 0, 27, 0, 29, 
	30, 28, 32, 33, 31, 1, 3, 2, 
	4, 5, 6, 7, 8, 9, 2, 0, 
	34, 0, 35, 0, 37, 38, 36, 40, 
	41, 39, 44, 43, 45, 43, 42, 48, 
	47, 49, 47, 46, 48, 47, 50, 47, 
	46, 48, 47, 51, 47, 46, 53, 52, 
	52, 0, 3, 54, 54, 0, 56, 57, 
	55, 3, 0, 58, 0, 59, 0, 60, 
	0, 61, 0, 62, 0, 63, 0, 64, 
	0, 65, 0, 66, 0, 67, 0, 68, 
	0, 69, 0, 70, 0, 71, 0, 0, 
	0, 0, 0, 72, 73, 74, 73, 73, 
	76, 75, 72, 3, 77, 8, 77, 0, 
	78, 79, 78, 0, 82, 81, 83, 84, 
	81, 80, 0, 86, 87, 85, 0, 86, 
	85, 82, 88, 86, 87, 88, 85, 89, 
	82, 90, 91, 92, 93, 94, 95, 96, 
	90, 0, 97, 0, 98, 0, 99, 0, 
	100, 0, 101, 0, 102, 0, 103, 0, 
	104, 0, 105, 0, 106, 0, 107, 0, 
	108, 0, 109, 0, 110, 0, 111, 0, 
	112, 0, 114, 113, 116, 115, 117, 116, 
	118, 119, 119, 118, 115, 120, 116, 115, 
	121, 116, 115, 122, 116, 115, 123, 116, 
	115, 124, 116, 115, 125, 116, 115, 126, 
	116, 115, 127, 116, 115, 116, 128, 115, 
	129, 116, 115, 130, 116, 115, 131, 116, 
	115, 132, 116, 115, 133, 116, 115, 134, 
	116, 115, 135, 116, 115, 136, 116, 115, 
	137, 116, 115, 116, 138, 115, 139, 141, 
	140, 142, 143, 144, 145, 146, 147, 140, 
	0, 148, 0, 149, 0, 150, 151, 0, 
	152, 0, 153, 0, 26, 0, 154, 0, 
	155, 0, 156, 0, 157, 0, 158, 0, 
	159, 0, 160, 0, 161, 0, 162, 0, 
	163, 0, 164, 0, 26, 0, 165, 0, 
	166, 0, 167, 0, 168, 0, 169, 0, 
	170, 0, 171, 0, 172, 0, 173, 0, 
	174, 0, 175, 0, 26, 0, 176, 0, 
	177, 0, 26, 0, 178, 0, 179, 0, 
	26, 150, 0, 180, 0, 181, 182, 0, 
	183, 0, 184, 27, 0, 185, 0, 156, 
	186, 0, 187, 0, 188, 0, 189, 0, 
	190, 0, 191, 0, 192, 0, 193, 0, 
	194, 0, 195, 0, 196, 0, 197, 0, 
	198, 0, 199, 0, 200, 0, 201, 0, 
	202, 203, 0, 204, 0, 205, 0, 206, 
	0, 207, 0, 208, 0, 209, 0, 210, 
	0, 211, 0, 212, 0, 213, 0, 214, 
	0, 215, 0, 216, 0, 217, 0, 218, 
	0, 219, 0, 220, 0, 221, 0, 222, 
	0, 223, 0, 224, 0, 225, 0, 227, 
	226, 229, 228, 230, 229, 231, 232, 233, 
	234, 232, 231, 228, 235, 229, 228, 236, 
	237, 238, 239, 240, 241, 242, 243, 244, 
	229, 228, 245, 229, 228, 246, 229, 228, 
	237, 229, 228, 247, 229, 228, 248, 229, 
	228, 249, 229, 228, 229, 250, 228, 251, 
	229, 228, 252, 229, 228, 253, 254, 229, 
	228, 255, 229, 228, 256, 229, 228, 249, 
	229, 228, 257, 229, 228, 258, 229, 228, 
	259, 229, 228, 260, 229, 228, 261, 229, 
	228, 262, 229, 228, 263, 229, 228, 264, 
	229, 228, 265, 229, 228, 266, 229, 228, 
	267, 229, 228, 249, 229, 228, 268, 229, 
	228, 269, 229, 228, 270, 229, 228, 271, 
	229, 228, 272, 229, 228, 273, 229, 228, 
	274, 229, 228, 275, 229, 228, 276, 229, 
	228, 277, 229, 228, 278, 229, 228, 249, 
	229, 228, 279, 229, 228, 280, 229, 228, 
	249, 229, 228, 281, 229, 228, 282, 229, 
	228, 249, 229, 253, 228, 283, 229, 228, 
	284, 229, 228, 285, 229, 228, 286, 229, 
	250, 228, 287, 229, 228, 259, 288, 229, 
	228, 289, 229, 228, 290, 229, 228, 291, 
	229, 228, 292, 229, 228, 293, 229, 228, 
	294, 229, 228, 295, 229, 228, 296, 229, 
	228, 297, 229, 228, 298, 229, 228, 299, 
	229, 228, 300, 229, 228, 301, 229, 228, 
	302, 229, 228, 303, 229, 228, 229, 250, 
	228, 304, 229, 228, 305, 229, 228, 276, 
	229, 228, 306, 229, 228, 307, 229, 228, 
	308, 229, 228, 309, 229, 228, 310, 229, 
	228, 311, 229, 228, 229, 312, 228, 313, 
	229, 228, 314, 229, 228, 315, 229, 228, 
	316, 229, 228, 317, 229, 228, 318, 229, 
	228, 319, 229, 228, 320, 229, 228, 303, 
	229, 228, 229, 321, 228, 229, 322, 228, 
	229, 323, 228, 229, 324, 228, 229, 325, 
	228, 229, 326, 228, 229, 327, 228, 229, 
	328, 228, 229, 329, 228, 229, 330, 228, 
	229, 331, 228, 229, 332, 228, 229, 333, 
	228, 229, 334, 228, 336, 335, 338, 337, 
	339, 338, 340, 341, 342, 343, 341, 340, 
	337, 344, 338, 337, 345, 346, 347, 348, 
	349, 350, 351, 352, 353, 338, 337, 354, 
	338, 337, 355, 338, 337, 346, 338, 337, 
	356, 338, 337, 357, 338, 337, 358, 338, 
	337, 338, 359, 337, 360, 338, 337, 361, 
	338, 337, 362, 363, 338, 337, 364, 338, 
	337, 365, 338, 337, 358, 338, 337, 366, 
	338, 337, 367, 338, 337, 368, 338, 337, 
	369, 338, 337, 370, 338, 337, 371, 338, 
	337, 372, 338, 337, 373, 338, 337, 374, 
	338, 337, 375, 338, 337, 376, 338, 337, 
	358, 338, 337, 377, 338, 337, 378, 338, 
	337, 379, 338, 337, 380, 338, 337, 381, 
	338, 337, 382, 338, 337, 383, 338, 337, 
	384, 338, 337, 385, 338, 337, 386, 338, 
	337, 387, 338, 337, 358, 338, 337, 388, 
	338, 337, 389, 338, 337, 358, 338, 337, 
	390, 338, 337, 391, 338, 337, 358, 338, 
	362, 337, 392, 338, 337, 393, 394, 338, 
	337, 395, 338, 337, 396, 338, 359, 337, 
	397, 338, 337, 368, 398, 338, 337, 399, 
	338, 337, 400, 338, 337, 401, 338, 337, 
	402, 338, 337, 403, 338, 337, 404, 338, 
	337, 405, 338, 337, 406, 338, 337, 407, 
	338, 337, 408, 338, 337, 409, 338, 337, 
	410, 338, 337, 411, 338, 337, 412, 338, 
	337, 413, 338, 337, 338, 414, 359, 337, 
	415, 338, 337, 416, 338, 337, 417, 338, 
	337, 418, 338, 337, 419, 338, 337, 420, 
	338, 337, 421, 338, 337, 422, 338, 337, 
	423, 338, 337, 424, 338, 337, 425, 338, 
	337, 426, 338, 337, 427, 338, 337, 428, 
	338, 337, 429, 338, 337, 430, 338, 337, 
	431, 338, 337, 432, 338, 337, 433, 338, 
	337, 434, 338, 337, 435, 338, 337, 338, 
	359, 337, 436, 338, 337, 437, 338, 337, 
	438, 338, 337, 439, 338, 337, 440, 338, 
	337, 441, 338, 337, 442, 338, 337, 443, 
	338, 337, 444, 338, 337, 445, 338, 337, 
	446, 338, 337, 447, 338, 337, 448, 338, 
	337, 449, 338, 337, 450, 338, 337, 451, 
	338, 337, 452, 338, 337, 453, 338, 337, 
	454, 338, 337, 455, 338, 337, 456, 338, 
	337, 435, 338, 337, 457, 338, 337, 458, 
	338, 337, 385, 338, 337, 459, 338, 337, 
	460, 338, 337, 461, 338, 337, 462, 338, 
	337, 463, 338, 337, 464, 338, 337, 338, 
	465, 337, 466, 338, 337, 467, 338, 337, 
	468, 338, 337, 469, 338, 337, 470, 338, 
	337, 471, 338, 337, 472, 338, 337, 473, 
	338, 337, 435, 338, 337, 338, 474, 337, 
	338, 475, 337, 338, 476, 337, 338, 477, 
	337, 338, 478, 337, 338, 479, 337, 338, 
	480, 337, 338, 481, 337, 338, 482, 337, 
	338, 483, 337, 338, 484, 337, 338, 485, 
	337, 338, 486, 337, 338, 487, 337, 488, 
	0, 489, 0, 490, 0, 491, 0, 492, 
	0, 493, 0, 494, 0, 495, 0, 496, 
	0, 497, 0, 498, 0, 499, 0, 500, 
	0, 501, 0, 502, 0, 503, 0, 504, 
	0, 505, 0, 506, 0, 507, 0, 508, 
	0, 509, 0, 510, 0, 512, 511, 514, 
	513, 515, 514, 516, 517, 518, 519, 517, 
	516, 513, 520, 514, 513, 521, 522, 523, 
	524, 525, 526, 527, 528, 529, 514, 513, 
	530, 514, 513, 531, 514, 513, 522, 514, 
	513, 532, 514, 513, 533, 514, 513, 534, 
	514, 513, 514, 535, 513, 536, 514, 513, 
	537, 514, 513, 538, 539, 514, 513, 540, 
	514, 513, 541, 514, 513, 534, 514, 513, 
	542, 514, 513, 543, 514, 513, 544, 514, 
	513, 545, 514, 513, 546, 514, 513, 547, 
	514, 513, 548, 514, 513, 549, 514, 513, 
	550, 514, 513, 551, 514, 513, 552, 514, 
	513, 534, 514, 513, 553, 514, 513, 554, 
	514, 513, 555, 514, 513, 556, 514, 513, 
	557, 514, 513, 558, 514, 513, 559, 514, 
	513, 560, 514, 513, 561, 514, 513, 562, 
	514, 513, 563, 514, 513, 534, 514, 513, 
	564, 514, 513, 565, 514, 513, 534, 514, 
	513, 566, 514, 513, 567, 514, 513, 534, 
	514, 538, 513, 568, 514, 513, 569, 514, 
	513, 570, 514, 513, 571, 514, 535, 513, 
	572, 514, 513, 544, 573, 514, 513, 574, 
	514, 513, 575, 514, 513, 576, 514, 513, 
	577, 514, 513, 578, 514, 513, 579, 514, 
	513, 580, 514, 513, 581, 514, 513, 582, 
	514, 513, 583, 514, 513, 584, 514, 513, 
	585, 514, 513, 586, 514, 513, 587, 514, 
	513, 588, 514, 513, 514, 589, 535, 513, 
	590, 514, 513, 591, 514, 513, 592, 514, 
	513, 593, 514, 513, 594, 514, 513, 595, 
	514, 513, 596, 514, 513, 597, 514, 513, 
	598, 514, 513, 599, 514, 513, 600, 514, 
	513, 601, 514, 513, 602, 514, 513, 603, 
	514, 513, 604, 514, 513, 605, 514, 513, 
	606, 514, 513, 607, 514, 513, 608, 514, 
	513, 609, 514, 513, 610, 514, 513, 514, 
	535, 513, 611, 514, 513, 612, 514, 513, 
	561, 514, 513, 613, 514, 513, 614, 514, 
	513, 615, 514, 513, 616, 514, 513, 617, 
	514, 513, 618, 514, 513, 514, 619, 513, 
	620, 514, 513, 621, 514, 513, 622, 514, 
	513, 623, 514, 513, 624, 514, 513, 625, 
	514, 513, 626, 514, 513, 627, 514, 513, 
	610, 514, 513, 514, 628, 513, 514, 629, 
	513, 514, 630, 513, 514, 631, 513, 514, 
	632, 513, 514, 633, 513, 514, 634, 513, 
	514, 635, 513, 514, 636, 513, 514, 637, 
	513, 514, 638, 513, 514, 639, 513, 514, 
	640, 513, 514, 641, 513, 642, 0, 643, 
	0, 173, 0, 644, 0, 645, 0, 646, 
	0, 647, 0, 648, 0, 649, 0, 650, 
	0, 651, 0, 652, 0, 653, 0, 654, 
	0, 655, 0, 656, 0, 657, 0, 658, 
	0, 659, 0, 660, 0, 662, 661, 664, 
	663, 665, 664, 666, 667, 668, 667, 666, 
	663, 669, 664, 663, 670, 671, 672, 664, 
	663, 673, 664, 663, 674, 664, 663, 675, 
	664, 663, 676, 664, 663, 677, 664, 663, 
	678, 664, 663, 679, 664, 663, 680, 664, 
	663, 681, 664, 663, 682, 664, 663, 683, 
	664, 663, 684, 664, 663, 685, 664, 663, 
	686, 664, 663, 687, 664, 663, 664, 688, 
	663, 689, 664, 663, 690, 691, 664, 663, 
	692, 664, 663, 693, 664, 663, 694, 664, 
	663, 695, 664, 663, 696, 664, 663, 697, 
	664, 663, 698, 664, 663, 699, 664, 663, 
	700, 664, 663, 701, 664, 663, 702, 664, 
	663, 703, 664, 663, 704, 664, 663, 705, 
	664, 663, 706, 664, 663, 707, 664, 663, 
	708, 664, 663, 709, 664, 663, 710, 664, 
	663, 664, 711, 688, 663, 712, 664, 663, 
	713, 664, 663, 714, 664, 663, 715, 664, 
	663, 716, 664, 663, 717, 664, 663, 718, 
	664, 663, 719, 664, 663, 720, 664, 663, 
	721, 664, 663, 722, 664, 663, 723, 664, 
	663, 724, 664, 663, 725, 664, 663, 726, 
	664, 663, 727, 664, 663, 728, 664, 663, 
	729, 664, 663, 730, 664, 663, 731, 664, 
	663, 687, 664, 663, 732, 664, 663, 733, 
	664, 663, 734, 664, 663, 735, 664, 663, 
	736, 664, 663, 737, 664, 663, 738, 664, 
	663, 739, 664, 663, 740, 664, 663, 741, 
	664, 663, 742, 664, 663, 743, 664, 663, 
	744, 664, 663, 745, 664, 663, 746, 664, 
	663, 747, 664, 663, 748, 664, 663, 749, 
	664, 663, 750, 664, 663, 751, 664, 663, 
	752, 664, 663, 687, 664, 663, 753, 664, 
	663, 754, 664, 663, 755, 664, 663, 756, 
	664, 663, 757, 664, 663, 758, 664, 663, 
	664, 759, 663, 760, 664, 663, 761, 664, 
	663, 762, 664, 663, 763, 664, 663, 764, 
	664, 663, 765, 664, 663, 766, 664, 663, 
	767, 664, 663, 687, 664, 663, 664, 768, 
	663, 664, 769, 663, 664, 770, 663, 664, 
	771, 663, 664, 772, 663, 664, 773, 663, 
	664, 774, 663, 664, 775, 663, 664, 776, 
	663, 664, 777, 663, 664, 778, 663, 664, 
	779, 663, 664, 780, 663, 664, 781, 663, 
	782, 0, 2, 0, 783, 0
];

var _lexer_trans_targs = [
	0, 2, 13, 13, 14, 24, 26, 10, 
	40, 43, 702, 3, 4, 49, 7, 88, 
	106, 118, 121, 124, 566, 569, 5, 6, 
	8, 9, 10, 11, 12, 13, 25, 12, 
	13, 25, 15, 16, 17, 18, 17, 17, 
	18, 17, 19, 19, 19, 20, 19, 19, 
	19, 20, 21, 22, 23, 13, 23, 24, 
	13, 25, 27, 28, 29, 30, 31, 32, 
	33, 34, 35, 36, 37, 38, 39, 704, 
	41, 42, 13, 41, 40, 42, 43, 44, 
	45, 47, 48, 46, 44, 45, 46, 44, 
	47, 2, 48, 14, 24, 26, 10, 40, 
	43, 50, 51, 52, 53, 54, 55, 56, 
	57, 58, 59, 60, 61, 62, 63, 64, 
	65, 66, 67, 66, 67, 68, 67, 13, 
	69, 70, 71, 72, 73, 74, 75, 76, 
	77, 78, 79, 80, 81, 82, 83, 84, 
	85, 86, 87, 2, 13, 13, 14, 24, 
	26, 10, 40, 43, 89, 90, 91, 94, 
	92, 93, 95, 96, 97, 98, 99, 100, 
	101, 102, 103, 104, 105, 107, 108, 109, 
	110, 111, 112, 113, 114, 115, 116, 117, 
	119, 120, 122, 123, 125, 126, 418, 127, 
	128, 129, 130, 131, 132, 133, 134, 135, 
	136, 137, 138, 139, 140, 141, 142, 143, 
	144, 145, 146, 271, 147, 148, 149, 150, 
	151, 152, 153, 154, 155, 156, 157, 158, 
	159, 160, 161, 162, 163, 164, 165, 166, 
	167, 168, 169, 170, 169, 170, 171, 170, 
	13, 257, 179, 172, 173, 176, 180, 198, 
	210, 213, 216, 238, 241, 174, 175, 177, 
	178, 179, 87, 181, 182, 183, 186, 184, 
	185, 187, 188, 189, 190, 191, 192, 193, 
	194, 195, 196, 197, 199, 200, 201, 202, 
	203, 204, 205, 206, 207, 208, 209, 211, 
	212, 214, 215, 217, 218, 219, 220, 221, 
	222, 223, 224, 225, 226, 227, 228, 229, 
	230, 231, 232, 233, 234, 235, 236, 237, 
	239, 240, 242, 243, 244, 245, 246, 247, 
	248, 249, 250, 251, 252, 253, 254, 255, 
	256, 258, 259, 260, 261, 262, 263, 264, 
	265, 266, 267, 268, 269, 270, 13, 272, 
	273, 272, 273, 274, 273, 13, 404, 282, 
	275, 276, 279, 283, 301, 313, 316, 319, 
	385, 388, 277, 278, 280, 281, 282, 87, 
	284, 285, 286, 289, 287, 288, 290, 291, 
	292, 293, 294, 295, 296, 297, 298, 299, 
	300, 302, 303, 304, 305, 306, 307, 308, 
	309, 310, 311, 312, 314, 315, 317, 318, 
	320, 321, 363, 322, 323, 324, 325, 326, 
	327, 328, 329, 330, 331, 332, 333, 334, 
	335, 336, 337, 338, 339, 340, 341, 342, 
	343, 344, 345, 346, 347, 348, 349, 350, 
	351, 352, 353, 354, 355, 356, 357, 358, 
	359, 360, 361, 362, 364, 365, 366, 367, 
	368, 369, 370, 371, 372, 373, 374, 375, 
	376, 377, 378, 379, 380, 381, 382, 383, 
	384, 386, 387, 389, 390, 391, 392, 393, 
	394, 395, 396, 397, 398, 399, 400, 401, 
	402, 403, 405, 406, 407, 408, 409, 410, 
	411, 412, 413, 414, 415, 416, 417, 13, 
	419, 420, 421, 422, 423, 424, 425, 426, 
	427, 428, 429, 430, 431, 432, 433, 434, 
	435, 436, 437, 438, 439, 440, 441, 442, 
	443, 442, 443, 444, 443, 13, 552, 452, 
	445, 446, 449, 453, 471, 483, 486, 489, 
	533, 536, 447, 448, 450, 451, 452, 87, 
	454, 455, 456, 459, 457, 458, 460, 461, 
	462, 463, 464, 465, 466, 467, 468, 469, 
	470, 472, 473, 474, 475, 476, 477, 478, 
	479, 480, 481, 482, 484, 485, 487, 488, 
	490, 491, 492, 493, 494, 495, 496, 497, 
	498, 499, 500, 501, 502, 503, 504, 505, 
	506, 507, 508, 509, 510, 511, 512, 513, 
	514, 515, 516, 517, 518, 519, 520, 521, 
	522, 523, 524, 525, 526, 527, 528, 529, 
	530, 531, 532, 534, 535, 537, 538, 539, 
	540, 541, 542, 543, 544, 545, 546, 547, 
	548, 549, 550, 551, 553, 554, 555, 556, 
	557, 558, 559, 560, 561, 562, 563, 564, 
	565, 13, 567, 568, 570, 571, 572, 573, 
	574, 575, 576, 577, 578, 579, 580, 581, 
	582, 583, 584, 585, 586, 587, 588, 587, 
	588, 589, 588, 13, 688, 590, 591, 607, 
	672, 592, 593, 594, 595, 596, 597, 598, 
	599, 600, 601, 602, 603, 604, 605, 606, 
	87, 608, 609, 650, 610, 611, 612, 613, 
	614, 615, 616, 617, 618, 619, 620, 621, 
	622, 623, 624, 625, 626, 627, 628, 629, 
	630, 631, 632, 633, 634, 635, 636, 637, 
	638, 639, 640, 641, 642, 643, 644, 645, 
	646, 647, 648, 649, 651, 652, 653, 654, 
	655, 656, 657, 658, 659, 660, 661, 662, 
	663, 664, 665, 666, 667, 668, 669, 670, 
	671, 673, 674, 675, 676, 677, 678, 679, 
	680, 681, 682, 683, 684, 685, 686, 687, 
	689, 690, 691, 692, 693, 694, 695, 696, 
	697, 698, 699, 700, 701, 13, 703, 0
];

var _lexer_trans_actions = [
	43, 29, 0, 54, 3, 1, 0, 29, 
	1, 35, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 57, 149, 126, 0, 
	110, 23, 0, 0, 7, 139, 48, 0, 
	102, 9, 5, 45, 134, 45, 0, 33, 
	122, 33, 33, 0, 11, 106, 0, 0, 
	114, 25, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 27, 118, 27, 51, 0, 0, 0, 
	37, 37, 54, 37, 87, 0, 0, 39, 
	0, 96, 0, 93, 90, 41, 96, 90, 
	99, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 57, 144, 0, 54, 84, 0, 81, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 21, 63, 31, 130, 60, 57, 
	31, 63, 57, 66, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 57, 144, 0, 54, 84, 0, 
	78, 33, 84, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 19, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 19, 57, 
	144, 0, 54, 84, 0, 75, 33, 84, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 17, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 17, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 57, 
	144, 0, 54, 84, 0, 72, 33, 84, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 15, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 15, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 57, 144, 0, 
	54, 84, 0, 69, 33, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	13, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 13, 0, 0
];

var _lexer_eof_actions = [
	0, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43
];

var lexer_start = 1;
var lexer_first_final = 704;
var lexer_error = 0;

var lexer_en_main = 1;


/* line 129 "ragel/i18n/hi.js.rl" */

/* line 130 "ragel/i18n/hi.js.rl" */

/* line 131 "ragel/i18n/hi.js.rl" */

/* line 132 "ragel/i18n/hi.js.rl" */

var Lexer = function(listener) {
  // Check that listener has the required functions
  var events = ['comment', 'tag', 'feature', 'background', 'scenario', 'scenario_outline', 'examples', 'step', 'doc_string', 'row', 'eof'];
  for(var i=0, len=events.length; i<len; i++) {
    var event = events[i];
    if(typeof listener[event] != 'function') {
      throw new Error("Error. No " + event + " function exists on " + JSON.stringify(listener));
    }
  }
  this.listener = listener;
};

Lexer.prototype.scan = function(data) {
  var ending = "\n%_FEATURE_END_%";
  if(typeof data == 'string') {
    data = this.stringToBytes(data + ending);
  } else if(typeof Buffer != 'undefined' && Buffer.isBuffer(data)) {
    // Node.js
    var buf = new Buffer(data.length + ending.length);
    data.copy(buf, 0, 0);
    new Buffer(ending).copy(buf, data.length, 0);
    data = buf;
  }
  var eof = pe = data.length;
  var p = 0;

  this.line_number = 1;
  this.last_newline = 0;
  var signedCharValue=function(v){return v > 127 ? v-256 : v; };

  
/* line 1184 "js/lib/gherkin/lexer/hi.js" */
{
	  this.cs = lexer_start;
} /* JSCodeGen::writeInit */

/* line 164 "ragel/i18n/hi.js.rl" */
  
/* line 1191 "js/lib/gherkin/lexer/hi.js" */
{
	var _klen, _trans, _keys, _ps, _widec, _acts, _nacts;
	var _goto_level, _resume, _eof_trans, _again, _test_eof;
	var _out;
	_klen = _trans = _keys = _acts = _nacts = null;
	_goto_level = 0;
	_resume = 10;
	_eof_trans = 15;
	_again = 20;
	_test_eof = 30;
	_out = 40;
	while (true) {
	_trigger_goto = false;
	if (_goto_level <= 0) {
	if (p == pe) {
		_goto_level = _test_eof;
		continue;
	}
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	}
	if (_goto_level <= _resume) {
	_keys = _lexer_key_offsets[ this.cs];
	_trans = _lexer_index_offsets[ this.cs];
	_klen = _lexer_single_lengths[ this.cs];
	_break_match = false;
	
	do {
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + _klen - 1;

	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + ( (_upper - _lower) >> 1 );

	        if (( signedCharValue(data[p])) < _lexer_trans_keys[_mid]) {
	           _upper = _mid - 1;
	        } else if (( signedCharValue(data[p])) > _lexer_trans_keys[_mid]) {
	           _lower = _mid + 1;
	        } else {
	           _trans += (_mid - _keys);
	           _break_match = true;
	           break;
	        };
	     } /* while */
	     if (_break_match) { break; }
	     _keys += _klen;
	     _trans += _klen;
	  }
	  _klen = _lexer_range_lengths[ this.cs];
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + (_klen << 1) - 2;
	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + (((_upper-_lower) >> 1) & ~1);
	        if (( signedCharValue(data[p])) < _lexer_trans_keys[_mid]) {
	          _upper = _mid - 2;
	         } else if (( signedCharValue(data[p])) > _lexer_trans_keys[_mid+1]) {
	          _lower = _mid + 2;
	        } else {
	          _trans += ((_mid - _keys) >> 1);
	          _break_match = true;
	          break;
	        }
	     } /* while */
	     if (_break_match) { break; }
	     _trans += _klen
	  }
	} while (false);
	_trans = _lexer_indicies[_trans];
	 this.cs = _lexer_trans_targs[_trans];
	if (_lexer_trans_actions[_trans] != 0) {
		_acts = _lexer_trans_actions[_trans];
		_nacts = _lexer_actions[_acts];
		_acts += 1;
		while (_nacts > 0) {
			_nacts -= 1;
			_acts += 1;
			switch (_lexer_actions[_acts - 1]) {
case 0:
/* line 6 "ragel/i18n/hi.js.rl" */

    this.content_start = p;
    this.current_line = this.line_number;
    this.start_col = p - this.last_newline - (this.keyword+':').length;
  		break;
case 1:
/* line 12 "ragel/i18n/hi.js.rl" */

    this.current_line = this.line_number;
    this.start_col = p - this.last_newline;
  		break;
case 2:
/* line 17 "ragel/i18n/hi.js.rl" */

    this.content_start = p;
  		break;
case 3:
/* line 21 "ragel/i18n/hi.js.rl" */

    this.docstring_content_type_start = p;
  		break;
case 4:
/* line 25 "ragel/i18n/hi.js.rl" */

    this.docstring_content_type_end = p;
  		break;
case 5:
/* line 29 "ragel/i18n/hi.js.rl" */

    var con = this.unindent(
      this.start_col, 
      this.bytesToString(data.slice(this.content_start, this.next_keyword_start-1)).replace(/(\r?\n)?([\t ])*$/, '').replace(/\\\"\\\"\\\"/mg, '"""')
    );
    var con_type = this.bytesToString(data.slice(this.docstring_content_type_start, this.docstring_content_type_end)).trim();
    this.listener.doc_string(con_type, con, this.current_line); 
  		break;
case 6:
/* line 38 "ragel/i18n/hi.js.rl" */

    p = this.store_keyword_content('feature', data, p, eof);
  		break;
case 7:
/* line 42 "ragel/i18n/hi.js.rl" */

    p = this.store_keyword_content('background', data, p, eof);
  		break;
case 8:
/* line 46 "ragel/i18n/hi.js.rl" */

    p = this.store_keyword_content('scenario', data, p, eof);
  		break;
case 9:
/* line 50 "ragel/i18n/hi.js.rl" */

    p = this.store_keyword_content('scenario_outline', data, p, eof);
  		break;
case 10:
/* line 54 "ragel/i18n/hi.js.rl" */

    p = this.store_keyword_content('examples', data, p, eof);
  		break;
case 11:
/* line 58 "ragel/i18n/hi.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.step(this.keyword, con, this.current_line);
  		break;
case 12:
/* line 63 "ragel/i18n/hi.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.comment(con, this.line_number);
    this.keyword_start = null;
  		break;
case 13:
/* line 69 "ragel/i18n/hi.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.tag(con, this.line_number);
    this.keyword_start = null;
  		break;
case 14:
/* line 75 "ragel/i18n/hi.js.rl" */

    this.line_number++;
  		break;
case 15:
/* line 79 "ragel/i18n/hi.js.rl" */

    this.last_newline = p + 1;
  		break;
case 16:
/* line 83 "ragel/i18n/hi.js.rl" */

    this.keyword_start = this.keyword_start || p;
  		break;
case 17:
/* line 87 "ragel/i18n/hi.js.rl" */

    this.keyword = this.bytesToString(data.slice(this.keyword_start, p)).replace(/:$/, '');
    this.keyword_start = null;
  		break;
case 18:
/* line 92 "ragel/i18n/hi.js.rl" */

    this.next_keyword_start = p;
  		break;
case 19:
/* line 96 "ragel/i18n/hi.js.rl" */

    p = p - 1;
    current_row = [];
    this.current_line = this.line_number;
  		break;
case 20:
/* line 102 "ragel/i18n/hi.js.rl" */

    this.content_start = p;
  		break;
case 21:
/* line 106 "ragel/i18n/hi.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    current_row.push(con.replace(/\\\|/, "|").replace(/\\n/, "\n").replace(/\\\\/, "\\"));
  		break;
case 22:
/* line 111 "ragel/i18n/hi.js.rl" */

    this.listener.row(current_row, this.current_line);
  		break;
case 23:
/* line 115 "ragel/i18n/hi.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw new Error("Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.");
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 1418 "js/lib/gherkin/lexer/hi.js" */
			} /* action switch */
		}
	}
	if (_trigger_goto) {
		continue;
	}
	}
	if (_goto_level <= _again) {
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	p += 1;
	if (p != pe) {
		_goto_level = _resume;
		continue;
	}
	}
	if (_goto_level <= _test_eof) {
	if (p == eof) {
	__acts = _lexer_eof_actions[ this.cs];
	__nacts =  _lexer_actions[__acts];
	__acts += 1;
	while (__nacts > 0) {
		__nacts -= 1;
		__acts += 1;
		switch (_lexer_actions[__acts - 1]) {
case 23:
/* line 115 "ragel/i18n/hi.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw new Error("Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.");
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 1457 "js/lib/gherkin/lexer/hi.js" */
		} /* eof action switch */
	}
	if (_trigger_goto) {
		continue;
	}
}
	}
	if (_goto_level <= _out) {
		break;
	}
	}
	}

/* line 165 "ragel/i18n/hi.js.rl" */
};


/*
 * Decode utf-8 byte sequence to string.
 */
var decodeUtf8 = function(bytes) {
  var result = "";
  var i = 0;
  var wc;
  var c;

  while (i < bytes.length) {
    /* parse as UTF-8 lead byte */
    wc = bytes[i++];
    if (wc < 0x80) {
      count = 0;
    } else if (wc < 0xC2 || wc >= 0xF8) {
      throw new Error("input is not a valid UTF-8 lead octet");
    } else if (wc < 0xE0) {
      count = 1;
      wc = (wc & 0x1F) << 6;
    } else if (wc < 0xF0) {
      count = 2;
      wc = (wc & 0x0F) << 12;
    } else /* wc < 0xF8 */ {
      count = 3;
      wc = (wc & 0x07) << 18;
    }

    /* parse trail bytes, if any */
    while (count) {
      if (!(i < bytes.length)) {
        throw new Error("short read");
      }
      if ((c = bytes[i++] ^ 0x80) > 0x3F) {
        throw new Error("input is not a valid UTF-8 trail octet");
      }
      wc |= c << (6 * --count);
      if (wc < (1 << (5 * count + 6))) {
        throw new Error("invalid non-minimal encoded input");
      }
    }

    /* handle conversion to UTF-16 if needed */
    if (wc > 0xFFFF) {
      wc -= 0x10000;
      result += String.fromCharCode(0xD800 + (wc >> 10));
      wc = 0xDC00 + (wc & 0x3FF);
    }
    result += String.fromCharCode(wc);
  }

  return result;
};

/*
 * Encode string to an array of bytes using utf8 encoding.
 *
 * Javascript internally stores character data as utf16 (like java).
 * String.charCodeAt() does *not* produce unicode points, but simply
 * reflects this internal representation. Thus, it is necessary
 * to first decode the utf-16 representation before encoding to
 * utf-8.
 */
var encodeUtf8 = function(string) {
  var bytes = [];
  var i = 0;
  var j = 0;
  var wc;

  while (i < string.length) {
    wc = string.charCodeAt(i++);
    if (wc >= 0xD800 && wc <= 0xDBFF && i < string.length && string.charCodeAt(i) >= 0xDC00 && string.charCodeAt(i) <= 0xDFFF) {
      /* decode UTF-16 */
      wc = 0x10000 + ((wc & 0x3FF) << 10) + (string.charCodeAt(i++) & 0x3FF);
    }

    /* emit lead byte */
    if (wc < 0x80) {
      bytes[j++] = wc;
      count = 0;
    } else if (wc < 0x800) {
      bytes[j++] = 0xC0 | (wc >> 6);
      count = 1;
    } else if (wc < 0x10000) {
      bytes[j++] = 0xE0 | (wc >> 12);
      count = 2;
    } else {
      /* SMP: 21-bit Unicode */
      bytes[j++] = 0xF0 | (wc >> 18);
      count = 3;
    }

    /* emit trail bytes, if any */
    while (count) {
      bytes[j++] = 0x80 | ((wc >> (6 * --count)) & 0x3F);
    }
  }

  return bytes;

};

Lexer.prototype.bytesToString = function(bytes) {
  if(typeof bytes.write == 'function') {
    // Node.js
    return bytes.toString('utf-8');
  }
  return decodeUtf8(bytes);
};

Lexer.prototype.stringToBytes = function(string) {
  return encodeUtf8(string);
};

Lexer.prototype.unindent = function(startcol, text) {
  startcol = startcol || 0;
  return text.replace(new RegExp('^[\t ]{0,' + startcol + '}', 'gm'), ''); 
};

Lexer.prototype.store_keyword_content = function(event, data, p, eof) {
  var end_point = (!this.next_keyword_start || (p == eof)) ? p : this.next_keyword_start;
  var content = this.unindent(this.start_col + 2, this.bytesToString(data.slice(this.content_start, end_point))).replace(/\s+$/,"");
  var content_lines = content.split("\n")
  var name = content_lines.shift() || "";
  name = name.trim();
  var description = content_lines.join("\n");
  this.listener[event](this.keyword, name, description, this.current_line);
  var nks = this.next_keyword_start;
  this.next_keyword_start = null;
  return nks ? nks - 1 : p;
};

Lexer.prototype.current_line_content = function(data, p) {
  var rest = Array.prototype.slice.call(data,this.last_newline, -1);
  var end = rest.indexOf(10) || -1;
  return this.bytesToString(rest.slice(0, end)).trim();
};

// Node.js export
if(typeof module !== 'undefined') {
  module.exports = Lexer;
}
// Require.js export
if (typeof define !== 'undefined') {
  if(define.amd) {
    define('gherkin/lexer/hi', [], function() {
      return Lexer;
    });
  } else {
    define('gherkin/lexer/hi', function(require, exports, module) {
      exports.Lexer = Lexer;
    });
  }
}

})();

}).call(this,require("buffer").Buffer)

},{"buffer":69}],210:[function(require,module,exports){
(function (Buffer){

/* line 1 "ragel/i18n/hr.js.rl" */
;(function() {


/* line 126 "ragel/i18n/hr.js.rl" */



/* line 11 "js/lib/gherkin/lexer/hr.js" */
var _lexer_actions = [
	0, 1, 0, 1, 1, 1, 2, 1, 
	3, 1, 4, 1, 5, 1, 6, 1, 
	7, 1, 8, 1, 9, 1, 10, 1, 
	11, 1, 12, 1, 13, 1, 16, 1, 
	17, 1, 18, 1, 19, 1, 20, 1, 
	21, 1, 22, 1, 23, 2, 2, 18, 
	2, 3, 4, 2, 13, 0, 2, 14, 
	15, 2, 17, 0, 2, 17, 1, 2, 
	17, 16, 2, 17, 19, 2, 18, 6, 
	2, 18, 7, 2, 18, 8, 2, 18, 
	9, 2, 18, 10, 2, 18, 16, 2, 
	20, 21, 2, 22, 0, 2, 22, 1, 
	2, 22, 16, 2, 22, 19, 3, 4, 
	14, 15, 3, 5, 14, 15, 3, 11, 
	14, 15, 3, 12, 14, 15, 3, 13, 
	14, 15, 3, 14, 15, 18, 3, 17, 
	0, 11, 3, 17, 14, 15, 4, 2, 
	14, 15, 18, 4, 3, 4, 14, 15, 
	4, 17, 0, 14, 15, 5, 17, 0, 
	11, 14, 15
];

var _lexer_key_offsets = [
	0, 0, 19, 37, 38, 39, 41, 43, 
	48, 53, 58, 63, 67, 71, 73, 74, 
	75, 76, 77, 78, 79, 80, 81, 82, 
	83, 84, 85, 86, 87, 88, 89, 91, 
	93, 98, 105, 110, 111, 112, 114, 115, 
	117, 118, 119, 120, 121, 122, 123, 124, 
	125, 140, 142, 144, 146, 148, 150, 152, 
	154, 156, 158, 160, 162, 164, 166, 168, 
	170, 188, 189, 190, 191, 193, 194, 195, 
	196, 197, 198, 199, 200, 201, 213, 215, 
	217, 219, 221, 223, 225, 227, 229, 231, 
	233, 235, 237, 239, 241, 243, 245, 247, 
	249, 251, 253, 255, 257, 259, 261, 264, 
	266, 268, 270, 272, 274, 276, 278, 280, 
	282, 284, 287, 289, 291, 293, 295, 297, 
	299, 301, 303, 305, 308, 310, 312, 314, 
	316, 318, 320, 323, 325, 327, 329, 330, 
	331, 332, 333, 334, 335, 336, 338, 339, 
	340, 341, 342, 343, 344, 345, 346, 347, 
	362, 364, 366, 368, 370, 372, 374, 376, 
	378, 380, 382, 384, 386, 388, 390, 392, 
	394, 396, 399, 401, 404, 406, 408, 410, 
	412, 414, 416, 418, 420, 422, 425, 427, 
	429, 431, 433, 436, 438, 440, 442, 444, 
	446, 448, 450, 453, 455, 457, 459, 461, 
	463, 465, 467, 469, 471, 473, 475, 477, 
	481, 482, 483, 484, 485, 486, 487, 488, 
	489, 490, 498, 500, 502, 504, 507, 509, 
	511, 513, 515, 517, 519, 521, 523, 525, 
	527, 529, 531, 533, 534, 535, 536, 537, 
	538, 539, 541, 542, 543, 559, 561, 563, 
	565, 567, 569, 571, 573, 575, 577, 579, 
	581, 583, 585, 587, 589, 591, 593, 596, 
	598, 601, 603, 605, 607, 609, 611, 613, 
	615, 617, 619, 622, 624, 626, 628, 630, 
	633, 635, 637, 639, 641, 643, 645, 647, 
	649, 651, 653, 655, 658, 660, 662, 664, 
	666, 668, 670, 672, 674, 676, 678, 680, 
	682, 686, 687, 688, 689, 690, 691, 692, 
	693, 696, 700, 706, 709, 711, 717, 735, 
	737, 739, 741, 743, 746, 748, 750, 752, 
	755, 757, 759, 761, 763, 765, 767, 770, 
	772, 774, 776, 778, 780, 782, 784, 786, 
	788, 790, 792, 794, 796, 798, 800, 802, 
	804, 806, 810, 811, 812
];

var _lexer_trans_keys = [
	10, 32, 34, 35, 37, 42, 64, 65, 
	73, 75, 77, 79, 80, 83, 90, 124, 
	239, 9, 13, 10, 32, 34, 35, 37, 
	42, 64, 65, 73, 75, 77, 79, 80, 
	83, 90, 124, 9, 13, 34, 34, 10, 
	13, 10, 13, 10, 32, 34, 9, 13, 
	10, 32, 34, 9, 13, 10, 32, 34, 
	9, 13, 10, 32, 34, 9, 13, 10, 
	32, 9, 13, 10, 32, 9, 13, 10, 
	13, 10, 95, 70, 69, 65, 84, 85, 
	82, 69, 95, 69, 78, 68, 95, 37, 
	32, 10, 13, 10, 13, 13, 32, 64, 
	9, 10, 9, 10, 13, 32, 64, 11, 
	12, 10, 32, 64, 9, 13, 108, 105, 
	97, 111, 100, 32, 97, 110, 99, 101, 
	112, 116, 58, 10, 10, 10, 32, 35, 
	37, 42, 64, 65, 73, 75, 77, 79, 
	83, 90, 9, 13, 10, 95, 10, 70, 
	10, 69, 10, 65, 10, 84, 10, 85, 
	10, 82, 10, 69, 10, 95, 10, 69, 
	10, 78, 10, 68, 10, 95, 10, 37, 
	10, 32, 10, 32, 34, 35, 37, 42, 
	64, 65, 73, 75, 77, 79, 80, 83, 
	90, 124, 9, 13, 111, 103, 117, -60, 
	99, -121, 110, 111, 115, 116, 58, 10, 
	10, 10, 32, 35, 37, 64, 75, 77, 
	79, 80, 83, 9, 13, 10, 95, 10, 
	70, 10, 69, 10, 65, 10, 84, 10, 
	85, 10, 82, 10, 69, 10, 95, 10, 
	69, 10, 78, 10, 68, 10, 95, 10, 
	37, 10, 111, 10, 110, 10, 99, 10, 
	101, 10, 112, 10, 116, 10, 58, 10, 
	111, 10, 103, 10, 117, -60, 10, 99, 
	-121, 10, 10, 110, 10, 111, 10, 115, 
	10, 115, 10, 111, 10, 98, 10, 105, 
	10, 110, 10, 97, 10, 111, 114, 10, 
	122, 10, 97, 10, 100, 10, 105, 10, 
	109, 10, 106, 10, 101, 10, 114, 10, 
	105, 10, 99, 107, 10, 101, 10, 110, 
	10, 97, 10, 114, 10, 105, 10, 106, 
	10, 58, 105, 10, 105, 10, 99, 110, 
	115, 100, 97, 111, 98, 105, 110, 97, 
	111, 114, 122, 97, 100, 105, 110, 97, 
	58, 10, 10, 10, 32, 35, 37, 42, 
	64, 65, 73, 75, 77, 79, 83, 90, 
	9, 13, 10, 95, 10, 70, 10, 69, 
	10, 65, 10, 84, 10, 85, 10, 82, 
	10, 69, 10, 95, 10, 69, 10, 78, 
	10, 68, 10, 95, 10, 37, 10, 32, 
	10, 108, 10, 105, 10, 97, 111, 10, 
	100, 10, 32, 97, 10, 110, 10, 99, 
	10, 101, 10, 112, 10, 116, 10, 58, 
	10, 111, 10, 103, 10, 117, -60, 10, 
	99, -121, 10, 10, 110, 10, 111, 10, 
	115, 10, 110, 115, 10, 100, 10, 97, 
	10, 111, 10, 98, 10, 105, 10, 110, 
	10, 97, 10, 99, 107, 10, 101, 10, 
	110, 10, 97, 10, 114, 10, 105, 10, 
	106, 10, 105, 10, 99, 10, 97, 10, 
	100, 10, 97, 10, 110, 10, 32, 105, 
	111, 105, 109, 106, 101, 114, 105, 58, 
	10, 10, 10, 32, 35, 77, 79, 124, 
	9, 13, 10, 111, 10, 103, 10, 117, 
	-60, 10, 99, -121, 10, 10, 110, 10, 
	111, 10, 115, 10, 116, 10, 58, 10, 
	115, 10, 111, 10, 98, 10, 105, 10, 
	110, 10, 97, 99, 107, 101, 110, 97, 
	114, 105, 106, 58, 105, 10, 10, 10, 
	32, 35, 37, 42, 64, 65, 73, 75, 
	77, 79, 80, 83, 90, 9, 13, 10, 
	95, 10, 70, 10, 69, 10, 65, 10, 
	84, 10, 85, 10, 82, 10, 69, 10, 
	95, 10, 69, 10, 78, 10, 68, 10, 
	95, 10, 37, 10, 32, 10, 108, 10, 
	105, 10, 97, 111, 10, 100, 10, 32, 
	97, 10, 110, 10, 99, 10, 101, 10, 
	112, 10, 116, 10, 58, 10, 111, 10, 
	103, 10, 117, -60, 10, 99, -121, 10, 
	10, 110, 10, 111, 10, 115, 10, 110, 
	115, 10, 100, 10, 97, 10, 111, 10, 
	98, 10, 105, 10, 110, 10, 97, 10, 
	111, 10, 122, 10, 97, 10, 100, 10, 
	99, 107, 10, 101, 10, 110, 10, 97, 
	10, 114, 10, 105, 10, 106, 10, 105, 
	10, 99, 10, 97, 10, 100, 10, 97, 
	10, 110, 10, 32, 105, 111, 105, 99, 
	97, 97, 100, 97, 110, 32, 105, 111, 
	32, 124, 9, 13, 10, 32, 92, 124, 
	9, 13, 10, 92, 124, 10, 92, 10, 
	32, 92, 124, 9, 13, 10, 32, 34, 
	35, 37, 42, 64, 65, 73, 75, 77, 
	79, 80, 83, 90, 124, 9, 13, 10, 
	108, 10, 105, 10, 97, 10, 100, 10, 
	32, 97, 10, 111, 10, 103, 10, 117, 
	-60, 10, 99, -121, 10, 10, 110, 10, 
	111, 10, 115, 10, 116, 10, 58, 10, 
	110, 115, 10, 100, 10, 97, 10, 111, 
	10, 98, 10, 105, 10, 110, 10, 97, 
	10, 99, 10, 101, 10, 110, 10, 97, 
	10, 114, 10, 105, 10, 106, 10, 97, 
	10, 100, 10, 97, 10, 110, 10, 32, 
	105, 111, 187, 191, 0
];

var _lexer_single_lengths = [
	0, 17, 16, 1, 1, 2, 2, 3, 
	3, 3, 3, 2, 2, 2, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 2, 2, 
	3, 5, 3, 1, 1, 2, 1, 2, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	13, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	16, 1, 1, 1, 2, 1, 1, 1, 
	1, 1, 1, 1, 1, 10, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 3, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 3, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 3, 2, 2, 2, 2, 
	2, 2, 3, 2, 2, 2, 1, 1, 
	1, 1, 1, 1, 1, 2, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 13, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 3, 2, 3, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 3, 2, 2, 
	2, 2, 3, 2, 2, 2, 2, 2, 
	2, 2, 3, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 4, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 6, 2, 2, 2, 3, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 1, 1, 1, 1, 1, 
	1, 2, 1, 1, 14, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 3, 2, 
	3, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 3, 2, 2, 2, 2, 3, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 3, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	4, 1, 1, 1, 1, 1, 1, 1, 
	3, 2, 4, 3, 2, 4, 16, 2, 
	2, 2, 2, 3, 2, 2, 2, 3, 
	2, 2, 2, 2, 2, 2, 3, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 4, 1, 1, 0
];

var _lexer_range_lengths = [
	0, 1, 1, 0, 0, 0, 0, 1, 
	1, 1, 1, 1, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 1, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 1, 0, 0, 1, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0
];

var _lexer_index_offsets = [
	0, 0, 19, 37, 39, 41, 44, 47, 
	52, 57, 62, 67, 71, 75, 78, 80, 
	82, 84, 86, 88, 90, 92, 94, 96, 
	98, 100, 102, 104, 106, 108, 110, 113, 
	116, 121, 128, 133, 135, 137, 140, 142, 
	145, 147, 149, 151, 153, 155, 157, 159, 
	161, 176, 179, 182, 185, 188, 191, 194, 
	197, 200, 203, 206, 209, 212, 215, 218, 
	221, 239, 241, 243, 245, 248, 250, 252, 
	254, 256, 258, 260, 262, 264, 276, 279, 
	282, 285, 288, 291, 294, 297, 300, 303, 
	306, 309, 312, 315, 318, 321, 324, 327, 
	330, 333, 336, 339, 342, 345, 348, 352, 
	355, 358, 361, 364, 367, 370, 373, 376, 
	379, 382, 386, 389, 392, 395, 398, 401, 
	404, 407, 410, 413, 417, 420, 423, 426, 
	429, 432, 435, 439, 442, 445, 448, 450, 
	452, 454, 456, 458, 460, 462, 465, 467, 
	469, 471, 473, 475, 477, 479, 481, 483, 
	498, 501, 504, 507, 510, 513, 516, 519, 
	522, 525, 528, 531, 534, 537, 540, 543, 
	546, 549, 553, 556, 560, 563, 566, 569, 
	572, 575, 578, 581, 584, 587, 591, 594, 
	597, 600, 603, 607, 610, 613, 616, 619, 
	622, 625, 628, 632, 635, 638, 641, 644, 
	647, 650, 653, 656, 659, 662, 665, 668, 
	673, 675, 677, 679, 681, 683, 685, 687, 
	689, 691, 699, 702, 705, 708, 712, 715, 
	718, 721, 724, 727, 730, 733, 736, 739, 
	742, 745, 748, 751, 753, 755, 757, 759, 
	761, 763, 766, 768, 770, 786, 789, 792, 
	795, 798, 801, 804, 807, 810, 813, 816, 
	819, 822, 825, 828, 831, 834, 837, 841, 
	844, 848, 851, 854, 857, 860, 863, 866, 
	869, 872, 875, 879, 882, 885, 888, 891, 
	895, 898, 901, 904, 907, 910, 913, 916, 
	919, 922, 925, 928, 932, 935, 938, 941, 
	944, 947, 950, 953, 956, 959, 962, 965, 
	968, 973, 975, 977, 979, 981, 983, 985, 
	987, 991, 995, 1001, 1005, 1008, 1014, 1032, 
	1035, 1038, 1041, 1044, 1048, 1051, 1054, 1057, 
	1061, 1064, 1067, 1070, 1073, 1076, 1079, 1083, 
	1086, 1089, 1092, 1095, 1098, 1101, 1104, 1107, 
	1110, 1113, 1116, 1119, 1122, 1125, 1128, 1131, 
	1134, 1137, 1142, 1144, 1146
];

var _lexer_indicies = [
	2, 1, 3, 4, 5, 6, 7, 8, 
	6, 9, 10, 11, 12, 13, 14, 15, 
	16, 1, 0, 2, 1, 3, 4, 5, 
	6, 7, 8, 6, 9, 10, 11, 12, 
	13, 14, 15, 1, 0, 17, 0, 18, 
	0, 20, 21, 19, 23, 24, 22, 27, 
	26, 28, 26, 25, 31, 30, 32, 30, 
	29, 31, 30, 33, 30, 29, 31, 30, 
	34, 30, 29, 36, 35, 35, 0, 2, 
	37, 37, 0, 39, 40, 38, 2, 0, 
	41, 0, 42, 0, 43, 0, 44, 0, 
	45, 0, 46, 0, 47, 0, 48, 0, 
	49, 0, 50, 0, 51, 0, 52, 0, 
	53, 0, 54, 0, 55, 0, 57, 58, 
	56, 60, 61, 59, 0, 0, 0, 0, 
	62, 63, 64, 63, 63, 66, 65, 62, 
	2, 67, 7, 67, 0, 68, 0, 69, 
	0, 70, 71, 0, 72, 0, 55, 69, 
	0, 73, 0, 74, 0, 75, 0, 76, 
	0, 77, 0, 78, 0, 80, 79, 82, 
	81, 82, 83, 84, 85, 86, 84, 87, 
	86, 88, 89, 90, 91, 92, 83, 81, 
	82, 93, 81, 82, 94, 81, 82, 95, 
	81, 82, 96, 81, 82, 97, 81, 82, 
	98, 81, 82, 99, 81, 82, 100, 81, 
	82, 101, 81, 82, 102, 81, 82, 103, 
	81, 82, 104, 81, 82, 105, 81, 82, 
	106, 81, 82, 107, 81, 109, 108, 110, 
	111, 112, 113, 114, 115, 113, 116, 117, 
	118, 119, 120, 121, 122, 108, 0, 123, 
	0, 124, 0, 125, 0, 126, 127, 0, 
	127, 0, 128, 0, 129, 0, 130, 0, 
	131, 0, 132, 0, 134, 133, 136, 135, 
	136, 137, 138, 139, 138, 140, 141, 142, 
	143, 144, 137, 135, 136, 145, 135, 136, 
	146, 135, 136, 147, 135, 136, 148, 135, 
	136, 149, 135, 136, 150, 135, 136, 151, 
	135, 136, 152, 135, 136, 153, 135, 136, 
	154, 135, 136, 155, 135, 136, 156, 135, 
	136, 157, 135, 136, 158, 135, 136, 159, 
	135, 136, 160, 135, 136, 161, 135, 136, 
	162, 135, 136, 163, 135, 136, 164, 135, 
	136, 165, 135, 136, 166, 135, 136, 167, 
	135, 136, 168, 135, 169, 136, 170, 135, 
	170, 136, 135, 136, 171, 135, 136, 172, 
	135, 136, 163, 135, 136, 173, 135, 136, 
	174, 135, 136, 175, 135, 136, 176, 135, 
	136, 177, 135, 136, 164, 135, 136, 178, 
	179, 135, 136, 180, 135, 136, 181, 135, 
	136, 175, 135, 136, 182, 135, 136, 183, 
	135, 136, 184, 135, 136, 185, 135, 136, 
	186, 135, 136, 164, 135, 136, 187, 188, 
	135, 136, 189, 135, 136, 190, 135, 136, 
	191, 135, 136, 192, 135, 136, 193, 135, 
	136, 194, 135, 136, 165, 164, 135, 136, 
	195, 135, 136, 177, 135, 196, 197, 0, 
	198, 0, 69, 0, 199, 0, 200, 0, 
	201, 0, 202, 0, 131, 0, 203, 204, 
	0, 205, 0, 206, 0, 207, 0, 208, 
	0, 209, 0, 210, 0, 211, 0, 213, 
	212, 215, 214, 215, 216, 217, 218, 219, 
	217, 220, 219, 221, 222, 223, 224, 225, 
	216, 214, 215, 226, 214, 215, 227, 214, 
	215, 228, 214, 215, 229, 214, 215, 230, 
	214, 215, 231, 214, 215, 232, 214, 215, 
	233, 214, 215, 234, 214, 215, 235, 214, 
	215, 236, 214, 215, 237, 214, 215, 238, 
	214, 215, 239, 214, 215, 240, 214, 215, 
	241, 214, 215, 242, 214, 215, 243, 244, 
	214, 215, 245, 214, 215, 240, 242, 214, 
	215, 246, 214, 215, 247, 214, 215, 248, 
	214, 215, 249, 214, 215, 250, 214, 215, 
	240, 214, 215, 251, 214, 215, 252, 214, 
	215, 253, 214, 254, 215, 255, 214, 255, 
	215, 214, 215, 256, 214, 215, 257, 214, 
	215, 249, 214, 215, 258, 259, 214, 215, 
	260, 214, 215, 242, 214, 215, 261, 214, 
	215, 262, 214, 215, 263, 214, 215, 264, 
	214, 215, 250, 214, 215, 265, 266, 214, 
	215, 267, 214, 215, 268, 214, 215, 269, 
	214, 215, 270, 214, 215, 271, 214, 215, 
	250, 214, 215, 272, 214, 215, 264, 214, 
	215, 273, 214, 215, 274, 214, 215, 275, 
	214, 215, 276, 214, 215, 240, 242, 242, 
	214, 277, 0, 278, 0, 279, 0, 280, 
	0, 281, 0, 282, 0, 283, 0, 285, 
	284, 287, 286, 287, 288, 289, 290, 291, 
	289, 288, 286, 287, 292, 286, 287, 293, 
	286, 287, 294, 286, 295, 287, 296, 286, 
	296, 287, 286, 287, 297, 286, 287, 298, 
	286, 287, 299, 286, 287, 300, 286, 287, 
	301, 286, 287, 302, 286, 287, 303, 286, 
	287, 304, 286, 287, 305, 286, 287, 306, 
	286, 287, 300, 286, 307, 308, 0, 309, 
	0, 310, 0, 311, 0, 312, 0, 313, 
	0, 314, 0, 315, 282, 0, 317, 316, 
	319, 318, 319, 320, 321, 322, 323, 321, 
	324, 323, 325, 326, 327, 328, 329, 330, 
	320, 318, 319, 331, 318, 319, 332, 318, 
	319, 333, 318, 319, 334, 318, 319, 335, 
	318, 319, 336, 318, 319, 337, 318, 319, 
	338, 318, 319, 339, 318, 319, 340, 318, 
	319, 341, 318, 319, 342, 318, 319, 343, 
	318, 319, 344, 318, 319, 345, 318, 319, 
	346, 318, 319, 347, 318, 319, 348, 349, 
	318, 319, 350, 318, 319, 345, 347, 318, 
	319, 351, 318, 319, 352, 318, 319, 353, 
	318, 319, 354, 318, 319, 355, 318, 319, 
	345, 318, 319, 356, 318, 319, 357, 318, 
	319, 358, 318, 359, 319, 360, 318, 360, 
	319, 318, 319, 361, 318, 319, 362, 318, 
	319, 354, 318, 319, 363, 364, 318, 319, 
	365, 318, 319, 347, 318, 319, 366, 318, 
	319, 367, 318, 319, 368, 318, 319, 369, 
	318, 319, 355, 318, 319, 370, 318, 319, 
	371, 318, 319, 372, 318, 319, 367, 318, 
	319, 373, 374, 318, 319, 375, 318, 319, 
	376, 318, 319, 377, 318, 319, 378, 318, 
	319, 379, 318, 319, 355, 318, 319, 380, 
	318, 319, 369, 318, 319, 381, 318, 319, 
	382, 318, 319, 383, 318, 319, 384, 318, 
	319, 345, 347, 347, 318, 385, 0, 386, 
	0, 77, 0, 387, 0, 388, 0, 389, 
	0, 390, 0, 55, 69, 69, 0, 391, 
	392, 391, 0, 395, 394, 396, 397, 394, 
	393, 0, 399, 400, 398, 0, 399, 398, 
	395, 401, 399, 400, 401, 398, 395, 402, 
	403, 404, 405, 406, 407, 408, 406, 409, 
	410, 411, 412, 413, 414, 415, 402, 0, 
	82, 416, 81, 82, 417, 81, 82, 418, 
	81, 82, 419, 81, 82, 107, 417, 81, 
	82, 420, 81, 82, 421, 81, 82, 422, 
	81, 423, 82, 424, 81, 424, 82, 81, 
	82, 425, 81, 82, 426, 81, 82, 427, 
	81, 82, 428, 81, 82, 107, 81, 82, 
	429, 430, 81, 82, 431, 81, 82, 417, 
	81, 82, 432, 81, 82, 433, 81, 82, 
	434, 81, 82, 435, 81, 82, 428, 81, 
	82, 436, 81, 82, 437, 81, 82, 438, 
	81, 82, 439, 81, 82, 440, 81, 82, 
	441, 81, 82, 428, 81, 82, 442, 81, 
	82, 443, 81, 82, 444, 81, 82, 445, 
	81, 82, 107, 417, 417, 81, 446, 0, 
	1, 0, 447, 0
];

var _lexer_trans_targs = [
	0, 2, 2, 3, 13, 15, 29, 32, 
	35, 37, 65, 133, 141, 234, 308, 313, 
	354, 4, 5, 6, 7, 6, 6, 7, 
	6, 8, 8, 8, 9, 8, 8, 8, 
	9, 10, 11, 12, 2, 12, 13, 2, 
	14, 16, 17, 18, 19, 20, 21, 22, 
	23, 24, 25, 26, 27, 28, 356, 30, 
	31, 2, 14, 31, 2, 14, 33, 34, 
	2, 33, 32, 34, 36, 29, 38, 40, 
	39, 41, 42, 43, 44, 45, 46, 47, 
	48, 47, 48, 48, 2, 49, 63, 319, 
	321, 324, 334, 342, 349, 50, 51, 52, 
	53, 54, 55, 56, 57, 58, 59, 60, 
	61, 62, 2, 64, 2, 2, 3, 13, 
	15, 29, 32, 35, 37, 65, 133, 141, 
	234, 308, 313, 66, 67, 68, 69, 70, 
	71, 72, 73, 74, 75, 76, 77, 76, 
	77, 77, 2, 78, 92, 99, 107, 113, 
	123, 79, 80, 81, 82, 83, 84, 85, 
	86, 87, 88, 89, 90, 91, 2, 93, 
	94, 95, 96, 97, 98, 64, 100, 101, 
	102, 103, 104, 105, 106, 108, 109, 110, 
	111, 112, 114, 117, 115, 116, 118, 119, 
	120, 121, 122, 124, 131, 125, 126, 127, 
	128, 129, 130, 132, 134, 136, 135, 137, 
	138, 139, 140, 142, 208, 143, 144, 145, 
	146, 147, 148, 149, 150, 151, 150, 151, 
	151, 2, 152, 166, 167, 169, 178, 186, 
	194, 203, 153, 154, 155, 156, 157, 158, 
	159, 160, 161, 162, 163, 164, 165, 2, 
	64, 168, 166, 170, 172, 171, 173, 174, 
	175, 176, 177, 179, 180, 181, 182, 183, 
	184, 185, 187, 189, 188, 190, 191, 192, 
	193, 195, 201, 196, 197, 198, 199, 200, 
	202, 204, 205, 206, 207, 209, 210, 211, 
	212, 213, 214, 215, 216, 217, 216, 217, 
	217, 2, 218, 228, 219, 220, 221, 222, 
	223, 224, 225, 226, 227, 64, 229, 230, 
	231, 232, 233, 235, 305, 236, 237, 238, 
	239, 240, 241, 242, 243, 244, 243, 244, 
	244, 2, 245, 259, 260, 262, 271, 279, 
	287, 291, 300, 246, 247, 248, 249, 250, 
	251, 252, 253, 254, 255, 256, 257, 258, 
	2, 64, 261, 259, 263, 265, 264, 266, 
	267, 268, 269, 270, 272, 273, 274, 275, 
	276, 277, 278, 280, 282, 281, 283, 284, 
	285, 286, 288, 289, 290, 292, 298, 293, 
	294, 295, 296, 297, 299, 301, 302, 303, 
	304, 306, 307, 309, 310, 311, 312, 313, 
	314, 315, 317, 318, 316, 314, 315, 316, 
	314, 317, 318, 3, 13, 15, 29, 32, 
	35, 37, 65, 133, 141, 234, 308, 313, 
	320, 63, 322, 323, 325, 326, 327, 328, 
	329, 330, 331, 332, 333, 335, 337, 336, 
	338, 339, 340, 341, 343, 344, 345, 346, 
	347, 348, 350, 351, 352, 353, 355, 0
];

var _lexer_trans_actions = [
	43, 0, 54, 3, 1, 0, 29, 1, 
	29, 29, 29, 29, 29, 29, 29, 35, 
	0, 0, 0, 7, 139, 48, 0, 102, 
	9, 5, 45, 134, 45, 0, 33, 122, 
	33, 33, 0, 11, 106, 0, 0, 114, 
	25, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	57, 149, 126, 0, 110, 23, 0, 27, 
	118, 27, 51, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 57, 
	144, 0, 54, 0, 78, 33, 84, 84, 
	84, 84, 84, 84, 84, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 19, 19, 31, 130, 60, 57, 
	31, 63, 57, 63, 63, 63, 63, 63, 
	63, 63, 66, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 57, 144, 0, 
	54, 0, 69, 33, 84, 84, 84, 84, 
	84, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 13, 0, 
	0, 0, 0, 0, 0, 13, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 57, 144, 0, 54, 
	0, 72, 33, 84, 84, 84, 84, 84, 
	84, 84, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 15, 
	15, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 57, 144, 0, 54, 
	0, 81, 84, 84, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 21, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 57, 144, 0, 54, 
	0, 75, 33, 84, 84, 84, 84, 84, 
	84, 84, 84, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	17, 17, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 37, 37, 54, 37, 87, 0, 0, 
	39, 0, 0, 93, 90, 41, 96, 90, 
	96, 96, 96, 96, 96, 96, 96, 99, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0
];

var _lexer_eof_actions = [
	0, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43
];

var lexer_start = 1;
var lexer_first_final = 356;
var lexer_error = 0;

var lexer_en_main = 1;


/* line 129 "ragel/i18n/hr.js.rl" */

/* line 130 "ragel/i18n/hr.js.rl" */

/* line 131 "ragel/i18n/hr.js.rl" */

/* line 132 "ragel/i18n/hr.js.rl" */

var Lexer = function(listener) {
  // Check that listener has the required functions
  var events = ['comment', 'tag', 'feature', 'background', 'scenario', 'scenario_outline', 'examples', 'step', 'doc_string', 'row', 'eof'];
  for(var i=0, len=events.length; i<len; i++) {
    var event = events[i];
    if(typeof listener[event] != 'function') {
      throw new Error("Error. No " + event + " function exists on " + JSON.stringify(listener));
    }
  }
  this.listener = listener;
};

Lexer.prototype.scan = function(data) {
  var ending = "\n%_FEATURE_END_%";
  if(typeof data == 'string') {
    data = this.stringToBytes(data + ending);
  } else if(typeof Buffer != 'undefined' && Buffer.isBuffer(data)) {
    // Node.js
    var buf = new Buffer(data.length + ending.length);
    data.copy(buf, 0, 0);
    new Buffer(ending).copy(buf, data.length, 0);
    data = buf;
  }
  var eof = pe = data.length;
  var p = 0;

  this.line_number = 1;
  this.last_newline = 0;
  var signedCharValue=function(v){return v > 127 ? v-256 : v; };

  
/* line 691 "js/lib/gherkin/lexer/hr.js" */
{
	  this.cs = lexer_start;
} /* JSCodeGen::writeInit */

/* line 164 "ragel/i18n/hr.js.rl" */
  
/* line 698 "js/lib/gherkin/lexer/hr.js" */
{
	var _klen, _trans, _keys, _ps, _widec, _acts, _nacts;
	var _goto_level, _resume, _eof_trans, _again, _test_eof;
	var _out;
	_klen = _trans = _keys = _acts = _nacts = null;
	_goto_level = 0;
	_resume = 10;
	_eof_trans = 15;
	_again = 20;
	_test_eof = 30;
	_out = 40;
	while (true) {
	_trigger_goto = false;
	if (_goto_level <= 0) {
	if (p == pe) {
		_goto_level = _test_eof;
		continue;
	}
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	}
	if (_goto_level <= _resume) {
	_keys = _lexer_key_offsets[ this.cs];
	_trans = _lexer_index_offsets[ this.cs];
	_klen = _lexer_single_lengths[ this.cs];
	_break_match = false;
	
	do {
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + _klen - 1;

	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + ( (_upper - _lower) >> 1 );

	        if (( signedCharValue(data[p])) < _lexer_trans_keys[_mid]) {
	           _upper = _mid - 1;
	        } else if (( signedCharValue(data[p])) > _lexer_trans_keys[_mid]) {
	           _lower = _mid + 1;
	        } else {
	           _trans += (_mid - _keys);
	           _break_match = true;
	           break;
	        };
	     } /* while */
	     if (_break_match) { break; }
	     _keys += _klen;
	     _trans += _klen;
	  }
	  _klen = _lexer_range_lengths[ this.cs];
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + (_klen << 1) - 2;
	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + (((_upper-_lower) >> 1) & ~1);
	        if (( signedCharValue(data[p])) < _lexer_trans_keys[_mid]) {
	          _upper = _mid - 2;
	         } else if (( signedCharValue(data[p])) > _lexer_trans_keys[_mid+1]) {
	          _lower = _mid + 2;
	        } else {
	          _trans += ((_mid - _keys) >> 1);
	          _break_match = true;
	          break;
	        }
	     } /* while */
	     if (_break_match) { break; }
	     _trans += _klen
	  }
	} while (false);
	_trans = _lexer_indicies[_trans];
	 this.cs = _lexer_trans_targs[_trans];
	if (_lexer_trans_actions[_trans] != 0) {
		_acts = _lexer_trans_actions[_trans];
		_nacts = _lexer_actions[_acts];
		_acts += 1;
		while (_nacts > 0) {
			_nacts -= 1;
			_acts += 1;
			switch (_lexer_actions[_acts - 1]) {
case 0:
/* line 6 "ragel/i18n/hr.js.rl" */

    this.content_start = p;
    this.current_line = this.line_number;
    this.start_col = p - this.last_newline - (this.keyword+':').length;
  		break;
case 1:
/* line 12 "ragel/i18n/hr.js.rl" */

    this.current_line = this.line_number;
    this.start_col = p - this.last_newline;
  		break;
case 2:
/* line 17 "ragel/i18n/hr.js.rl" */

    this.content_start = p;
  		break;
case 3:
/* line 21 "ragel/i18n/hr.js.rl" */

    this.docstring_content_type_start = p;
  		break;
case 4:
/* line 25 "ragel/i18n/hr.js.rl" */

    this.docstring_content_type_end = p;
  		break;
case 5:
/* line 29 "ragel/i18n/hr.js.rl" */

    var con = this.unindent(
      this.start_col, 
      this.bytesToString(data.slice(this.content_start, this.next_keyword_start-1)).replace(/(\r?\n)?([\t ])*$/, '').replace(/\\\"\\\"\\\"/mg, '"""')
    );
    var con_type = this.bytesToString(data.slice(this.docstring_content_type_start, this.docstring_content_type_end)).trim();
    this.listener.doc_string(con_type, con, this.current_line); 
  		break;
case 6:
/* line 38 "ragel/i18n/hr.js.rl" */

    p = this.store_keyword_content('feature', data, p, eof);
  		break;
case 7:
/* line 42 "ragel/i18n/hr.js.rl" */

    p = this.store_keyword_content('background', data, p, eof);
  		break;
case 8:
/* line 46 "ragel/i18n/hr.js.rl" */

    p = this.store_keyword_content('scenario', data, p, eof);
  		break;
case 9:
/* line 50 "ragel/i18n/hr.js.rl" */

    p = this.store_keyword_content('scenario_outline', data, p, eof);
  		break;
case 10:
/* line 54 "ragel/i18n/hr.js.rl" */

    p = this.store_keyword_content('examples', data, p, eof);
  		break;
case 11:
/* line 58 "ragel/i18n/hr.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.step(this.keyword, con, this.current_line);
  		break;
case 12:
/* line 63 "ragel/i18n/hr.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.comment(con, this.line_number);
    this.keyword_start = null;
  		break;
case 13:
/* line 69 "ragel/i18n/hr.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.tag(con, this.line_number);
    this.keyword_start = null;
  		break;
case 14:
/* line 75 "ragel/i18n/hr.js.rl" */

    this.line_number++;
  		break;
case 15:
/* line 79 "ragel/i18n/hr.js.rl" */

    this.last_newline = p + 1;
  		break;
case 16:
/* line 83 "ragel/i18n/hr.js.rl" */

    this.keyword_start = this.keyword_start || p;
  		break;
case 17:
/* line 87 "ragel/i18n/hr.js.rl" */

    this.keyword = this.bytesToString(data.slice(this.keyword_start, p)).replace(/:$/, '');
    this.keyword_start = null;
  		break;
case 18:
/* line 92 "ragel/i18n/hr.js.rl" */

    this.next_keyword_start = p;
  		break;
case 19:
/* line 96 "ragel/i18n/hr.js.rl" */

    p = p - 1;
    current_row = [];
    this.current_line = this.line_number;
  		break;
case 20:
/* line 102 "ragel/i18n/hr.js.rl" */

    this.content_start = p;
  		break;
case 21:
/* line 106 "ragel/i18n/hr.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    current_row.push(con.replace(/\\\|/, "|").replace(/\\n/, "\n").replace(/\\\\/, "\\"));
  		break;
case 22:
/* line 111 "ragel/i18n/hr.js.rl" */

    this.listener.row(current_row, this.current_line);
  		break;
case 23:
/* line 115 "ragel/i18n/hr.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw new Error("Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.");
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 925 "js/lib/gherkin/lexer/hr.js" */
			} /* action switch */
		}
	}
	if (_trigger_goto) {
		continue;
	}
	}
	if (_goto_level <= _again) {
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	p += 1;
	if (p != pe) {
		_goto_level = _resume;
		continue;
	}
	}
	if (_goto_level <= _test_eof) {
	if (p == eof) {
	__acts = _lexer_eof_actions[ this.cs];
	__nacts =  _lexer_actions[__acts];
	__acts += 1;
	while (__nacts > 0) {
		__nacts -= 1;
		__acts += 1;
		switch (_lexer_actions[__acts - 1]) {
case 23:
/* line 115 "ragel/i18n/hr.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw new Error("Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.");
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 964 "js/lib/gherkin/lexer/hr.js" */
		} /* eof action switch */
	}
	if (_trigger_goto) {
		continue;
	}
}
	}
	if (_goto_level <= _out) {
		break;
	}
	}
	}

/* line 165 "ragel/i18n/hr.js.rl" */
};


/*
 * Decode utf-8 byte sequence to string.
 */
var decodeUtf8 = function(bytes) {
  var result = "";
  var i = 0;
  var wc;
  var c;

  while (i < bytes.length) {
    /* parse as UTF-8 lead byte */
    wc = bytes[i++];
    if (wc < 0x80) {
      count = 0;
    } else if (wc < 0xC2 || wc >= 0xF8) {
      throw new Error("input is not a valid UTF-8 lead octet");
    } else if (wc < 0xE0) {
      count = 1;
      wc = (wc & 0x1F) << 6;
    } else if (wc < 0xF0) {
      count = 2;
      wc = (wc & 0x0F) << 12;
    } else /* wc < 0xF8 */ {
      count = 3;
      wc = (wc & 0x07) << 18;
    }

    /* parse trail bytes, if any */
    while (count) {
      if (!(i < bytes.length)) {
        throw new Error("short read");
      }
      if ((c = bytes[i++] ^ 0x80) > 0x3F) {
        throw new Error("input is not a valid UTF-8 trail octet");
      }
      wc |= c << (6 * --count);
      if (wc < (1 << (5 * count + 6))) {
        throw new Error("invalid non-minimal encoded input");
      }
    }

    /* handle conversion to UTF-16 if needed */
    if (wc > 0xFFFF) {
      wc -= 0x10000;
      result += String.fromCharCode(0xD800 + (wc >> 10));
      wc = 0xDC00 + (wc & 0x3FF);
    }
    result += String.fromCharCode(wc);
  }

  return result;
};

/*
 * Encode string to an array of bytes using utf8 encoding.
 *
 * Javascript internally stores character data as utf16 (like java).
 * String.charCodeAt() does *not* produce unicode points, but simply
 * reflects this internal representation. Thus, it is necessary
 * to first decode the utf-16 representation before encoding to
 * utf-8.
 */
var encodeUtf8 = function(string) {
  var bytes = [];
  var i = 0;
  var j = 0;
  var wc;

  while (i < string.length) {
    wc = string.charCodeAt(i++);
    if (wc >= 0xD800 && wc <= 0xDBFF && i < string.length && string.charCodeAt(i) >= 0xDC00 && string.charCodeAt(i) <= 0xDFFF) {
      /* decode UTF-16 */
      wc = 0x10000 + ((wc & 0x3FF) << 10) + (string.charCodeAt(i++) & 0x3FF);
    }

    /* emit lead byte */
    if (wc < 0x80) {
      bytes[j++] = wc;
      count = 0;
    } else if (wc < 0x800) {
      bytes[j++] = 0xC0 | (wc >> 6);
      count = 1;
    } else if (wc < 0x10000) {
      bytes[j++] = 0xE0 | (wc >> 12);
      count = 2;
    } else {
      /* SMP: 21-bit Unicode */
      bytes[j++] = 0xF0 | (wc >> 18);
      count = 3;
    }

    /* emit trail bytes, if any */
    while (count) {
      bytes[j++] = 0x80 | ((wc >> (6 * --count)) & 0x3F);
    }
  }

  return bytes;

};

Lexer.prototype.bytesToString = function(bytes) {
  if(typeof bytes.write == 'function') {
    // Node.js
    return bytes.toString('utf-8');
  }
  return decodeUtf8(bytes);
};

Lexer.prototype.stringToBytes = function(string) {
  return encodeUtf8(string);
};

Lexer.prototype.unindent = function(startcol, text) {
  startcol = startcol || 0;
  return text.replace(new RegExp('^[\t ]{0,' + startcol + '}', 'gm'), ''); 
};

Lexer.prototype.store_keyword_content = function(event, data, p, eof) {
  var end_point = (!this.next_keyword_start || (p == eof)) ? p : this.next_keyword_start;
  var content = this.unindent(this.start_col + 2, this.bytesToString(data.slice(this.content_start, end_point))).replace(/\s+$/,"");
  var content_lines = content.split("\n")
  var name = content_lines.shift() || "";
  name = name.trim();
  var description = content_lines.join("\n");
  this.listener[event](this.keyword, name, description, this.current_line);
  var nks = this.next_keyword_start;
  this.next_keyword_start = null;
  return nks ? nks - 1 : p;
};

Lexer.prototype.current_line_content = function(data, p) {
  var rest = Array.prototype.slice.call(data,this.last_newline, -1);
  var end = rest.indexOf(10) || -1;
  return this.bytesToString(rest.slice(0, end)).trim();
};

// Node.js export
if(typeof module !== 'undefined') {
  module.exports = Lexer;
}
// Require.js export
if (typeof define !== 'undefined') {
  if(define.amd) {
    define('gherkin/lexer/hr', [], function() {
      return Lexer;
    });
  } else {
    define('gherkin/lexer/hr', function(require, exports, module) {
      exports.Lexer = Lexer;
    });
  }
}

})();

}).call(this,require("buffer").Buffer)

},{"buffer":69}],211:[function(require,module,exports){
(function (Buffer){

/* line 1 "ragel/i18n/hu.js.rl" */
;(function() {


/* line 126 "ragel/i18n/hu.js.rl" */



/* line 11 "js/lib/gherkin/lexer/hu.js" */
var _lexer_actions = [
	0, 1, 0, 1, 1, 1, 2, 1, 
	3, 1, 4, 1, 5, 1, 6, 1, 
	7, 1, 8, 1, 9, 1, 10, 1, 
	11, 1, 12, 1, 13, 1, 16, 1, 
	17, 1, 18, 1, 19, 1, 20, 1, 
	21, 1, 22, 1, 23, 2, 2, 18, 
	2, 3, 4, 2, 13, 0, 2, 14, 
	15, 2, 17, 0, 2, 17, 1, 2, 
	17, 16, 2, 17, 19, 2, 18, 6, 
	2, 18, 7, 2, 18, 8, 2, 18, 
	9, 2, 18, 10, 2, 18, 16, 2, 
	20, 21, 2, 22, 0, 2, 22, 1, 
	2, 22, 16, 2, 22, 19, 3, 4, 
	14, 15, 3, 5, 14, 15, 3, 11, 
	14, 15, 3, 12, 14, 15, 3, 13, 
	14, 15, 3, 14, 15, 18, 3, 17, 
	0, 11, 3, 17, 14, 15, 4, 2, 
	14, 15, 18, 4, 3, 4, 14, 15, 
	4, 17, 0, 14, 15, 5, 17, 0, 
	11, 14, 15
];

var _lexer_key_offsets = [
	0, 0, 19, 20, 21, 22, 24, 26, 
	44, 45, 46, 48, 50, 55, 60, 65, 
	70, 74, 78, 80, 81, 82, 83, 84, 
	85, 86, 87, 88, 89, 90, 91, 92, 
	93, 94, 95, 100, 107, 112, 115, 116, 
	117, 118, 119, 120, 121, 123, 124, 125, 
	126, 127, 128, 129, 130, 131, 132, 133, 
	134, 135, 136, 137, 138, 139, 140, 141, 
	142, 143, 144, 146, 147, 148, 149, 150, 
	151, 152, 153, 154, 155, 156, 171, 173, 
	175, 177, 195, 197, 198, 199, 200, 201, 
	202, 203, 204, 205, 206, 221, 223, 225, 
	227, 229, 231, 233, 235, 237, 239, 241, 
	243, 245, 247, 249, 251, 253, 255, 259, 
	261, 263, 265, 267, 269, 271, 274, 276, 
	278, 280, 282, 284, 286, 288, 290, 292, 
	294, 296, 298, 300, 302, 304, 306, 308, 
	310, 312, 314, 316, 319, 321, 323, 325, 
	327, 329, 331, 333, 335, 337, 339, 341, 
	343, 345, 347, 349, 351, 353, 355, 357, 
	359, 360, 361, 362, 363, 364, 365, 366, 
	367, 368, 369, 370, 381, 383, 385, 387, 
	389, 391, 393, 395, 397, 399, 401, 403, 
	405, 407, 409, 411, 413, 415, 417, 419, 
	421, 423, 425, 427, 429, 431, 433, 435, 
	438, 440, 442, 444, 446, 448, 450, 452, 
	454, 456, 458, 460, 462, 464, 466, 468, 
	470, 472, 474, 476, 478, 480, 482, 484, 
	486, 488, 490, 492, 494, 496, 498, 499, 
	500, 501, 502, 503, 504, 505, 506, 507, 
	508, 509, 510, 511, 518, 520, 522, 524, 
	526, 528, 530, 532, 534, 536, 540, 546, 
	549, 551, 557, 575, 577, 579, 581, 583, 
	585, 587, 589, 591, 593, 595, 597, 599, 
	601, 603, 607, 609, 611, 613, 615, 617, 
	619, 622, 624, 626, 628, 630, 632, 634, 
	636, 638, 640, 642, 644, 646, 648, 650, 
	652, 654, 656, 658, 660, 662, 664, 666, 
	668, 670, 672, 674, 676, 678, 680, 682, 
	684, 686, 688, 690, 691, 692, 707, 709, 
	711, 713, 715, 717, 719, 721, 723, 725, 
	727, 729, 731, 733, 735, 737, 739, 741, 
	745, 747, 749, 751, 753, 755, 757, 760, 
	762, 764, 766, 768, 770, 772, 774, 776, 
	778, 780, 782, 784, 786, 788, 790, 792, 
	794, 796, 798, 800, 802, 805, 807, 809, 
	811, 813, 815, 817, 819, 821, 824, 826, 
	828, 830, 832, 834, 836, 838, 840, 842, 
	844, 846, 848, 850, 852, 854, 856, 858, 
	859, 860
];

var _lexer_trans_keys = [
	-61, 10, 32, 34, 35, 37, 42, 64, 
	65, 68, 70, 72, 74, 77, 80, 124, 
	239, 9, 13, -119, 115, 32, 10, 13, 
	10, 13, -61, 10, 32, 34, 35, 37, 
	42, 64, 65, 68, 70, 72, 74, 77, 
	80, 124, 9, 13, 34, 34, 10, 13, 
	10, 13, 10, 32, 34, 9, 13, 10, 
	32, 34, 9, 13, 10, 32, 34, 9, 
	13, 10, 32, 34, 9, 13, 10, 32, 
	9, 13, 10, 32, 9, 13, 10, 13, 
	10, 95, 70, 69, 65, 84, 85, 82, 
	69, 95, 69, 78, 68, 95, 37, 13, 
	32, 64, 9, 10, 9, 10, 13, 32, 
	64, 11, 12, 10, 32, 64, 9, 13, 
	100, 107, 109, 111, 116, 116, 107, 111, 
	114, 101, 105, 110, 110, 121, 105, 98, 
	101, 110, 101, 111, 114, 103, 97, 116, 
	-61, -77, 107, -61, -74, 110, 121, 118, 
	32, 58, 118, -61, -95, 122, 108, 97, 
	116, 58, 10, 10, -61, 10, 32, 35, 
	37, 42, 64, 65, 68, 70, 72, 74, 
	77, 9, 13, -119, 10, 10, 115, 10, 
	32, -61, 10, 32, 34, 35, 37, 42, 
	64, 65, 68, 70, 72, 74, 77, 80, 
	124, 9, 13, -61, 97, -95, 116, 116, 
	-61, -87, 114, 58, 10, 10, -61, 10, 
	32, 35, 37, 42, 64, 65, 68, 70, 
	72, 74, 77, 9, 13, -119, 10, 10, 
	115, 10, 32, 10, 95, 10, 70, 10, 
	69, 10, 65, 10, 84, 10, 85, 10, 
	82, 10, 69, 10, 95, 10, 69, 10, 
	78, 10, 68, 10, 95, 10, 37, 10, 
	100, 107, 109, 10, 111, 10, 116, 10, 
	116, 10, 107, 10, 111, 10, 114, 10, 
	101, 105, 10, 110, 10, 110, 10, 121, 
	10, 105, 10, 98, 10, 101, 10, 110, 
	10, 101, 10, 111, 10, 114, 10, 103, 
	10, 97, 10, 116, -61, 10, -77, 10, 
	10, 107, -61, 10, -74, 10, 10, 110, 
	10, 121, 10, 118, 10, 32, 58, 10, 
	118, -61, 10, -95, 10, 10, 122, 10, 
	108, 10, 97, 10, 116, 10, 58, 10, 
	97, 10, 101, 10, 108, 10, 108, 10, 
	101, 10, 109, 10, 122, -59, 10, -111, 
	10, 10, 97, 10, 106, 10, 100, 101, 
	108, 108, 101, 109, 122, -59, -111, 58, 
	10, 10, 10, 32, 35, 37, 64, 70, 
	72, 74, 80, 9, 13, 10, 95, 10, 
	70, 10, 69, 10, 65, 10, 84, 10, 
	85, 10, 82, 10, 69, 10, 95, 10, 
	69, 10, 78, 10, 68, 10, 95, 10, 
	37, 10, 111, 10, 114, 10, 103, 10, 
	97, 10, 116, -61, 10, -77, 10, 10, 
	107, -61, 10, -74, 10, 10, 110, 10, 
	121, 10, 118, 10, 32, 58, 10, 118, 
	-61, 10, -95, 10, 10, 122, 10, 108, 
	10, 97, 10, 116, 10, 58, -61, 10, 
	-95, 10, 10, 116, 10, 116, -61, 10, 
	-87, 10, 10, 114, 10, 101, 10, 108, 
	10, 108, 10, 101, 10, 109, 10, 122, 
	-59, 10, -111, 10, -61, 10, -87, 10, 
	10, 108, 10, 100, -61, 10, -95, 10, 
	10, 107, 97, 106, 100, -61, -87, 108, 
	100, -61, -95, 107, 58, 10, 10, 10, 
	32, 35, 74, 124, 9, 13, 10, 101, 
	10, 108, 10, 108, 10, 101, 10, 109, 
	10, 122, -59, 10, -111, 10, 10, 58, 
	32, 124, 9, 13, 10, 32, 92, 124, 
	9, 13, 10, 92, 124, 10, 92, 10, 
	32, 92, 124, 9, 13, -61, 10, 32, 
	34, 35, 37, 42, 64, 65, 68, 70, 
	72, 74, 77, 80, 124, 9, 13, 10, 
	95, 10, 70, 10, 69, 10, 65, 10, 
	84, 10, 85, 10, 82, 10, 69, 10, 
	95, 10, 69, 10, 78, 10, 68, 10, 
	95, 10, 37, 10, 100, 107, 109, 10, 
	111, 10, 116, 10, 116, 10, 107, 10, 
	111, 10, 114, 10, 101, 105, 10, 110, 
	10, 110, 10, 121, 10, 105, 10, 98, 
	10, 101, 10, 110, 10, 101, 10, 111, 
	10, 114, 10, 103, 10, 97, 10, 116, 
	-61, 10, -77, 10, 10, 107, -61, 10, 
	-74, 10, 10, 110, 10, 121, 10, 118, 
	10, 58, 10, 97, 10, 101, 10, 108, 
	10, 108, 10, 101, 10, 109, 10, 122, 
	-59, 10, -111, 10, 10, 97, 10, 106, 
	10, 100, 10, 10, -61, 10, 32, 35, 
	37, 42, 64, 65, 68, 70, 72, 74, 
	77, 9, 13, -119, 10, 10, 115, 10, 
	32, 10, 95, 10, 70, 10, 69, 10, 
	65, 10, 84, 10, 85, 10, 82, 10, 
	69, 10, 95, 10, 69, 10, 78, 10, 
	68, 10, 95, 10, 37, 10, 100, 107, 
	109, 10, 111, 10, 116, 10, 116, 10, 
	107, 10, 111, 10, 114, 10, 101, 105, 
	10, 110, 10, 110, 10, 121, 10, 105, 
	10, 98, 10, 101, 10, 110, 10, 101, 
	10, 111, 10, 114, 10, 103, 10, 97, 
	10, 116, -61, 10, -77, 10, 10, 107, 
	-61, 10, -74, 10, 10, 110, 10, 121, 
	10, 118, 10, 32, 58, 10, 118, -61, 
	10, -95, 10, 10, 122, 10, 108, 10, 
	97, 10, 116, 10, 58, -61, 10, 97, 
	-95, 10, 10, 116, 10, 116, -61, 10, 
	-87, 10, 10, 114, 10, 101, 10, 108, 
	10, 108, 10, 101, 10, 109, 10, 122, 
	-59, 10, -111, 10, 10, 97, 10, 106, 
	10, 100, 187, 191, 0
];

var _lexer_single_lengths = [
	0, 17, 1, 1, 1, 2, 2, 16, 
	1, 1, 2, 2, 3, 3, 3, 3, 
	2, 2, 2, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 3, 5, 3, 3, 1, 1, 
	1, 1, 1, 1, 2, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 2, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 13, 2, 2, 
	2, 16, 2, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 13, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 4, 2, 
	2, 2, 2, 2, 2, 3, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 3, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 9, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 3, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 5, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 4, 3, 
	2, 4, 16, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 4, 2, 2, 2, 2, 2, 2, 
	3, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 1, 1, 13, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 4, 
	2, 2, 2, 2, 2, 2, 3, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 3, 2, 2, 2, 
	2, 2, 2, 2, 2, 3, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 1, 
	1, 0
];

var _lexer_range_lengths = [
	0, 1, 0, 0, 0, 0, 0, 1, 
	0, 0, 0, 0, 1, 1, 1, 1, 
	1, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 1, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 0, 0, 
	0, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 1, 0, 
	0, 1, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0
];

var _lexer_index_offsets = [
	0, 0, 19, 21, 23, 25, 28, 31, 
	49, 51, 53, 56, 59, 64, 69, 74, 
	79, 83, 87, 90, 92, 94, 96, 98, 
	100, 102, 104, 106, 108, 110, 112, 114, 
	116, 118, 120, 125, 132, 137, 141, 143, 
	145, 147, 149, 151, 153, 156, 158, 160, 
	162, 164, 166, 168, 170, 172, 174, 176, 
	178, 180, 182, 184, 186, 188, 190, 192, 
	194, 196, 198, 201, 203, 205, 207, 209, 
	211, 213, 215, 217, 219, 221, 236, 239, 
	242, 245, 263, 266, 268, 270, 272, 274, 
	276, 278, 280, 282, 284, 299, 302, 305, 
	308, 311, 314, 317, 320, 323, 326, 329, 
	332, 335, 338, 341, 344, 347, 350, 355, 
	358, 361, 364, 367, 370, 373, 377, 380, 
	383, 386, 389, 392, 395, 398, 401, 404, 
	407, 410, 413, 416, 419, 422, 425, 428, 
	431, 434, 437, 440, 444, 447, 450, 453, 
	456, 459, 462, 465, 468, 471, 474, 477, 
	480, 483, 486, 489, 492, 495, 498, 501, 
	504, 506, 508, 510, 512, 514, 516, 518, 
	520, 522, 524, 526, 537, 540, 543, 546, 
	549, 552, 555, 558, 561, 564, 567, 570, 
	573, 576, 579, 582, 585, 588, 591, 594, 
	597, 600, 603, 606, 609, 612, 615, 618, 
	622, 625, 628, 631, 634, 637, 640, 643, 
	646, 649, 652, 655, 658, 661, 664, 667, 
	670, 673, 676, 679, 682, 685, 688, 691, 
	694, 697, 700, 703, 706, 709, 712, 714, 
	716, 718, 720, 722, 724, 726, 728, 730, 
	732, 734, 736, 738, 745, 748, 751, 754, 
	757, 760, 763, 766, 769, 772, 776, 782, 
	786, 789, 795, 813, 816, 819, 822, 825, 
	828, 831, 834, 837, 840, 843, 846, 849, 
	852, 855, 860, 863, 866, 869, 872, 875, 
	878, 882, 885, 888, 891, 894, 897, 900, 
	903, 906, 909, 912, 915, 918, 921, 924, 
	927, 930, 933, 936, 939, 942, 945, 948, 
	951, 954, 957, 960, 963, 966, 969, 972, 
	975, 978, 981, 984, 986, 988, 1003, 1006, 
	1009, 1012, 1015, 1018, 1021, 1024, 1027, 1030, 
	1033, 1036, 1039, 1042, 1045, 1048, 1051, 1054, 
	1059, 1062, 1065, 1068, 1071, 1074, 1077, 1081, 
	1084, 1087, 1090, 1093, 1096, 1099, 1102, 1105, 
	1108, 1111, 1114, 1117, 1120, 1123, 1126, 1129, 
	1132, 1135, 1138, 1141, 1144, 1148, 1151, 1154, 
	1157, 1160, 1163, 1166, 1169, 1172, 1176, 1179, 
	1182, 1185, 1188, 1191, 1194, 1197, 1200, 1203, 
	1206, 1209, 1212, 1215, 1218, 1221, 1224, 1227, 
	1229, 1231
];

var _lexer_indicies = [
	1, 3, 2, 4, 5, 6, 7, 8, 
	9, 10, 11, 12, 13, 14, 15, 16, 
	17, 2, 0, 18, 0, 19, 0, 20, 
	0, 22, 23, 21, 25, 26, 24, 1, 
	3, 2, 4, 5, 6, 7, 8, 9, 
	10, 11, 12, 13, 14, 15, 16, 2, 
	0, 27, 0, 28, 0, 30, 31, 29, 
	33, 34, 32, 37, 36, 38, 36, 35, 
	41, 40, 42, 40, 39, 41, 40, 43, 
	40, 39, 41, 40, 44, 40, 39, 46, 
	45, 45, 0, 3, 47, 47, 0, 49, 
	50, 48, 3, 0, 51, 0, 52, 0, 
	53, 0, 54, 0, 55, 0, 56, 0, 
	57, 0, 58, 0, 59, 0, 60, 0, 
	61, 0, 62, 0, 63, 0, 64, 0, 
	0, 0, 0, 0, 65, 66, 67, 66, 
	66, 69, 68, 65, 3, 70, 8, 70, 
	0, 71, 72, 73, 0, 74, 0, 75, 
	0, 19, 0, 76, 0, 77, 0, 19, 
	0, 78, 72, 0, 79, 0, 80, 0, 
	81, 0, 82, 0, 83, 0, 84, 0, 
	19, 0, 19, 0, 85, 0, 86, 0, 
	87, 0, 88, 0, 89, 0, 90, 0, 
	91, 0, 92, 0, 93, 0, 94, 0, 
	95, 0, 96, 0, 97, 0, 98, 99, 
	0, 100, 0, 101, 0, 102, 0, 103, 
	0, 104, 0, 105, 0, 106, 0, 107, 
	0, 109, 108, 111, 110, 112, 111, 113, 
	114, 115, 116, 114, 117, 118, 119, 120, 
	121, 122, 113, 110, 123, 111, 110, 111, 
	124, 110, 111, 125, 110, 126, 128, 127, 
	129, 130, 131, 132, 133, 134, 135, 136, 
	137, 138, 139, 140, 141, 127, 0, 142, 
	19, 0, 143, 0, 144, 0, 145, 0, 
	146, 0, 147, 0, 148, 0, 149, 0, 
	151, 150, 153, 152, 154, 153, 155, 156, 
	157, 158, 156, 159, 160, 161, 162, 163, 
	164, 155, 152, 165, 153, 152, 153, 166, 
	152, 153, 167, 152, 153, 168, 152, 153, 
	169, 152, 153, 170, 152, 153, 171, 152, 
	153, 172, 152, 153, 173, 152, 153, 174, 
	152, 153, 175, 152, 153, 176, 152, 153, 
	177, 152, 153, 178, 152, 153, 179, 152, 
	153, 180, 152, 153, 181, 152, 153, 182, 
	183, 184, 152, 153, 185, 152, 153, 186, 
	152, 153, 166, 152, 153, 187, 152, 153, 
	188, 152, 153, 166, 152, 153, 189, 183, 
	152, 153, 190, 152, 153, 191, 152, 153, 
	192, 152, 153, 193, 152, 153, 194, 152, 
	153, 195, 152, 153, 166, 152, 153, 166, 
	152, 153, 196, 152, 153, 197, 152, 153, 
	198, 152, 153, 199, 152, 153, 200, 152, 
	201, 153, 152, 202, 153, 152, 153, 203, 
	152, 204, 153, 152, 205, 153, 152, 153, 
	206, 152, 153, 207, 152, 153, 208, 152, 
	153, 209, 167, 152, 153, 210, 152, 211, 
	153, 152, 212, 153, 152, 153, 213, 152, 
	153, 214, 152, 153, 215, 152, 153, 216, 
	152, 153, 167, 152, 153, 166, 152, 153, 
	217, 152, 153, 218, 152, 153, 219, 152, 
	153, 220, 152, 153, 221, 152, 153, 222, 
	152, 223, 153, 152, 216, 153, 152, 153, 
	224, 152, 153, 225, 152, 153, 166, 152, 
	226, 0, 227, 0, 228, 0, 229, 0, 
	230, 0, 231, 0, 232, 0, 233, 0, 
	234, 0, 236, 235, 238, 237, 238, 239, 
	240, 241, 240, 242, 243, 244, 245, 239, 
	237, 238, 246, 237, 238, 247, 237, 238, 
	248, 237, 238, 249, 237, 238, 250, 237, 
	238, 251, 237, 238, 252, 237, 238, 253, 
	237, 238, 254, 237, 238, 255, 237, 238, 
	256, 237, 238, 257, 237, 238, 258, 237, 
	238, 259, 237, 238, 260, 237, 238, 261, 
	237, 238, 262, 237, 238, 263, 237, 238, 
	264, 237, 265, 238, 237, 266, 238, 237, 
	238, 267, 237, 268, 238, 237, 269, 238, 
	237, 238, 270, 237, 238, 271, 237, 238, 
	272, 237, 238, 273, 274, 237, 238, 275, 
	237, 276, 238, 237, 277, 238, 237, 238, 
	278, 237, 238, 279, 237, 238, 280, 237, 
	238, 281, 237, 238, 274, 237, 282, 238, 
	237, 283, 238, 237, 238, 284, 237, 238, 
	285, 237, 286, 238, 237, 287, 238, 237, 
	238, 281, 237, 238, 288, 237, 238, 289, 
	237, 238, 290, 237, 238, 291, 237, 238, 
	292, 237, 238, 293, 237, 294, 238, 237, 
	281, 238, 237, 295, 238, 237, 296, 238, 
	237, 238, 297, 237, 238, 298, 237, 299, 
	238, 237, 300, 238, 237, 238, 281, 237, 
	301, 0, 302, 0, 19, 0, 303, 0, 
	304, 0, 305, 0, 306, 0, 307, 0, 
	308, 0, 309, 0, 310, 0, 312, 311, 
	314, 313, 314, 315, 316, 317, 316, 315, 
	313, 314, 318, 313, 314, 319, 313, 314, 
	320, 313, 314, 321, 313, 314, 322, 313, 
	314, 323, 313, 324, 314, 313, 325, 314, 
	313, 314, 326, 313, 327, 328, 327, 0, 
	331, 330, 332, 333, 330, 329, 0, 335, 
	336, 334, 0, 335, 334, 331, 337, 335, 
	336, 337, 334, 338, 331, 339, 340, 341, 
	342, 343, 344, 345, 346, 347, 348, 349, 
	350, 351, 352, 339, 0, 111, 353, 110, 
	111, 354, 110, 111, 355, 110, 111, 356, 
	110, 111, 357, 110, 111, 358, 110, 111, 
	359, 110, 111, 360, 110, 111, 361, 110, 
	111, 362, 110, 111, 363, 110, 111, 364, 
	110, 111, 365, 110, 111, 366, 110, 111, 
	367, 368, 369, 110, 111, 370, 110, 111, 
	371, 110, 111, 124, 110, 111, 372, 110, 
	111, 373, 110, 111, 124, 110, 111, 374, 
	368, 110, 111, 375, 110, 111, 376, 110, 
	111, 377, 110, 111, 378, 110, 111, 379, 
	110, 111, 380, 110, 111, 124, 110, 111, 
	124, 110, 111, 381, 110, 111, 382, 110, 
	111, 383, 110, 111, 384, 110, 111, 385, 
	110, 386, 111, 110, 387, 111, 110, 111, 
	388, 110, 389, 111, 110, 390, 111, 110, 
	111, 391, 110, 111, 392, 110, 111, 393, 
	110, 111, 125, 110, 111, 124, 110, 111, 
	394, 110, 111, 395, 110, 111, 396, 110, 
	111, 397, 110, 111, 398, 110, 111, 399, 
	110, 400, 111, 110, 393, 111, 110, 111, 
	401, 110, 111, 402, 110, 111, 124, 110, 
	404, 403, 406, 405, 407, 406, 408, 409, 
	410, 411, 409, 412, 413, 414, 415, 416, 
	417, 408, 405, 418, 406, 405, 406, 419, 
	405, 406, 420, 405, 406, 421, 405, 406, 
	422, 405, 406, 423, 405, 406, 424, 405, 
	406, 425, 405, 406, 426, 405, 406, 427, 
	405, 406, 428, 405, 406, 429, 405, 406, 
	430, 405, 406, 431, 405, 406, 432, 405, 
	406, 433, 405, 406, 434, 405, 406, 435, 
	436, 437, 405, 406, 438, 405, 406, 439, 
	405, 406, 419, 405, 406, 440, 405, 406, 
	441, 405, 406, 419, 405, 406, 442, 436, 
	405, 406, 443, 405, 406, 444, 405, 406, 
	445, 405, 406, 446, 405, 406, 447, 405, 
	406, 448, 405, 406, 419, 405, 406, 419, 
	405, 406, 449, 405, 406, 450, 405, 406, 
	451, 405, 406, 452, 405, 406, 453, 405, 
	454, 406, 405, 455, 406, 405, 406, 456, 
	405, 457, 406, 405, 458, 406, 405, 406, 
	459, 405, 406, 460, 405, 406, 461, 405, 
	406, 462, 420, 405, 406, 463, 405, 464, 
	406, 405, 465, 406, 405, 406, 466, 405, 
	406, 467, 405, 406, 468, 405, 406, 469, 
	405, 406, 420, 405, 470, 406, 419, 405, 
	471, 406, 405, 406, 472, 405, 406, 473, 
	405, 474, 406, 405, 475, 406, 405, 406, 
	469, 405, 406, 476, 405, 406, 477, 405, 
	406, 478, 405, 406, 479, 405, 406, 480, 
	405, 406, 481, 405, 482, 406, 405, 469, 
	406, 405, 406, 483, 405, 406, 484, 405, 
	406, 419, 405, 485, 0, 2, 0, 486, 
	0
];

var _lexer_trans_targs = [
	0, 2, 7, 7, 8, 18, 20, 4, 
	34, 37, 52, 53, 82, 160, 230, 233, 
	253, 391, 3, 4, 5, 6, 7, 19, 
	6, 7, 19, 9, 10, 11, 12, 11, 
	11, 12, 11, 13, 13, 13, 14, 13, 
	13, 13, 14, 15, 16, 17, 7, 17, 
	18, 7, 19, 21, 22, 23, 24, 25, 
	26, 27, 28, 29, 30, 31, 32, 33, 
	393, 35, 36, 7, 35, 34, 36, 38, 
	41, 44, 39, 40, 42, 43, 45, 46, 
	47, 48, 49, 50, 51, 54, 55, 56, 
	57, 58, 59, 60, 61, 62, 63, 64, 
	65, 66, 67, 315, 68, 69, 70, 71, 
	72, 73, 74, 75, 76, 77, 76, 77, 
	78, 77, 7, 259, 80, 273, 288, 289, 
	303, 304, 312, 79, 80, 81, 2, 7, 
	7, 8, 18, 20, 4, 34, 37, 52, 
	53, 82, 160, 230, 233, 253, 83, 84, 
	85, 86, 87, 88, 89, 90, 91, 92, 
	91, 92, 93, 92, 7, 96, 95, 110, 
	125, 126, 148, 149, 157, 94, 95, 81, 
	97, 98, 99, 100, 101, 102, 103, 104, 
	105, 106, 107, 108, 109, 7, 111, 114, 
	117, 112, 113, 115, 116, 118, 119, 120, 
	121, 122, 123, 124, 127, 128, 129, 130, 
	131, 132, 133, 134, 135, 136, 137, 138, 
	139, 140, 141, 142, 143, 144, 145, 146, 
	147, 150, 151, 152, 153, 154, 155, 156, 
	158, 159, 161, 162, 163, 164, 165, 166, 
	167, 168, 169, 170, 171, 170, 171, 171, 
	7, 172, 186, 208, 215, 223, 173, 174, 
	175, 176, 177, 178, 179, 180, 181, 182, 
	183, 184, 185, 7, 187, 188, 189, 190, 
	191, 192, 193, 194, 195, 196, 197, 198, 
	199, 200, 81, 201, 202, 203, 204, 205, 
	206, 207, 209, 210, 211, 212, 213, 214, 
	216, 217, 218, 219, 220, 221, 222, 224, 
	225, 226, 227, 228, 229, 231, 232, 234, 
	235, 236, 237, 238, 239, 240, 241, 242, 
	243, 242, 243, 243, 7, 244, 245, 246, 
	247, 248, 249, 250, 251, 252, 81, 253, 
	254, 255, 257, 258, 256, 254, 255, 256, 
	254, 257, 2, 258, 8, 18, 20, 4, 
	34, 37, 52, 53, 82, 160, 230, 233, 
	253, 260, 261, 262, 263, 264, 265, 266, 
	267, 268, 269, 270, 271, 272, 7, 274, 
	277, 280, 275, 276, 278, 279, 281, 282, 
	283, 284, 285, 286, 287, 290, 291, 292, 
	293, 294, 295, 296, 297, 298, 299, 300, 
	301, 302, 305, 306, 307, 308, 309, 310, 
	311, 313, 314, 316, 317, 316, 317, 318, 
	317, 7, 321, 320, 335, 350, 351, 373, 
	380, 388, 319, 320, 81, 322, 323, 324, 
	325, 326, 327, 328, 329, 330, 331, 332, 
	333, 334, 7, 336, 339, 342, 337, 338, 
	340, 341, 343, 344, 345, 346, 347, 348, 
	349, 352, 353, 354, 355, 356, 357, 358, 
	359, 360, 361, 362, 363, 364, 365, 366, 
	367, 368, 369, 370, 371, 372, 374, 375, 
	376, 377, 378, 379, 381, 382, 383, 384, 
	385, 386, 387, 389, 390, 392, 0
];

var _lexer_trans_actions = [
	43, 29, 0, 54, 3, 1, 0, 29, 
	1, 29, 29, 29, 29, 29, 29, 29, 
	35, 0, 0, 0, 0, 57, 149, 126, 
	0, 110, 23, 0, 0, 7, 139, 48, 
	0, 102, 9, 5, 45, 134, 45, 0, 
	33, 122, 33, 33, 0, 11, 106, 0, 
	0, 114, 25, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 27, 118, 27, 51, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 57, 144, 0, 54, 
	84, 0, 78, 33, 84, 84, 84, 84, 
	84, 84, 84, 0, 0, 19, 63, 31, 
	130, 60, 57, 31, 63, 57, 63, 63, 
	63, 63, 63, 63, 63, 66, 0, 0, 
	0, 0, 0, 0, 0, 0, 57, 144, 
	0, 54, 84, 0, 72, 33, 84, 84, 
	84, 84, 84, 84, 84, 0, 0, 15, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 15, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 57, 144, 0, 54, 0, 
	69, 33, 84, 84, 84, 84, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 13, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 13, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 57, 
	144, 0, 54, 0, 81, 84, 0, 0, 
	0, 0, 0, 0, 0, 0, 21, 0, 
	0, 37, 37, 54, 37, 87, 0, 0, 
	39, 0, 96, 0, 93, 90, 41, 96, 
	90, 96, 96, 96, 96, 96, 96, 96, 
	99, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 19, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 57, 144, 0, 54, 84, 
	0, 75, 33, 84, 84, 84, 84, 84, 
	84, 84, 0, 0, 17, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 17, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0
];

var _lexer_eof_actions = [
	0, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43
];

var lexer_start = 1;
var lexer_first_final = 393;
var lexer_error = 0;

var lexer_en_main = 1;


/* line 129 "ragel/i18n/hu.js.rl" */

/* line 130 "ragel/i18n/hu.js.rl" */

/* line 131 "ragel/i18n/hu.js.rl" */

/* line 132 "ragel/i18n/hu.js.rl" */

var Lexer = function(listener) {
  // Check that listener has the required functions
  var events = ['comment', 'tag', 'feature', 'background', 'scenario', 'scenario_outline', 'examples', 'step', 'doc_string', 'row', 'eof'];
  for(var i=0, len=events.length; i<len; i++) {
    var event = events[i];
    if(typeof listener[event] != 'function') {
      throw new Error("Error. No " + event + " function exists on " + JSON.stringify(listener));
    }
  }
  this.listener = listener;
};

Lexer.prototype.scan = function(data) {
  var ending = "\n%_FEATURE_END_%";
  if(typeof data == 'string') {
    data = this.stringToBytes(data + ending);
  } else if(typeof Buffer != 'undefined' && Buffer.isBuffer(data)) {
    // Node.js
    var buf = new Buffer(data.length + ending.length);
    data.copy(buf, 0, 0);
    new Buffer(ending).copy(buf, data.length, 0);
    data = buf;
  }
  var eof = pe = data.length;
  var p = 0;

  this.line_number = 1;
  this.last_newline = 0;
  var signedCharValue=function(v){return v > 127 ? v-256 : v; };

  
/* line 743 "js/lib/gherkin/lexer/hu.js" */
{
	  this.cs = lexer_start;
} /* JSCodeGen::writeInit */

/* line 164 "ragel/i18n/hu.js.rl" */
  
/* line 750 "js/lib/gherkin/lexer/hu.js" */
{
	var _klen, _trans, _keys, _ps, _widec, _acts, _nacts;
	var _goto_level, _resume, _eof_trans, _again, _test_eof;
	var _out;
	_klen = _trans = _keys = _acts = _nacts = null;
	_goto_level = 0;
	_resume = 10;
	_eof_trans = 15;
	_again = 20;
	_test_eof = 30;
	_out = 40;
	while (true) {
	_trigger_goto = false;
	if (_goto_level <= 0) {
	if (p == pe) {
		_goto_level = _test_eof;
		continue;
	}
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	}
	if (_goto_level <= _resume) {
	_keys = _lexer_key_offsets[ this.cs];
	_trans = _lexer_index_offsets[ this.cs];
	_klen = _lexer_single_lengths[ this.cs];
	_break_match = false;
	
	do {
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + _klen - 1;

	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + ( (_upper - _lower) >> 1 );

	        if (( signedCharValue(data[p])) < _lexer_trans_keys[_mid]) {
	           _upper = _mid - 1;
	        } else if (( signedCharValue(data[p])) > _lexer_trans_keys[_mid]) {
	           _lower = _mid + 1;
	        } else {
	           _trans += (_mid - _keys);
	           _break_match = true;
	           break;
	        };
	     } /* while */
	     if (_break_match) { break; }
	     _keys += _klen;
	     _trans += _klen;
	  }
	  _klen = _lexer_range_lengths[ this.cs];
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + (_klen << 1) - 2;
	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + (((_upper-_lower) >> 1) & ~1);
	        if (( signedCharValue(data[p])) < _lexer_trans_keys[_mid]) {
	          _upper = _mid - 2;
	         } else if (( signedCharValue(data[p])) > _lexer_trans_keys[_mid+1]) {
	          _lower = _mid + 2;
	        } else {
	          _trans += ((_mid - _keys) >> 1);
	          _break_match = true;
	          break;
	        }
	     } /* while */
	     if (_break_match) { break; }
	     _trans += _klen
	  }
	} while (false);
	_trans = _lexer_indicies[_trans];
	 this.cs = _lexer_trans_targs[_trans];
	if (_lexer_trans_actions[_trans] != 0) {
		_acts = _lexer_trans_actions[_trans];
		_nacts = _lexer_actions[_acts];
		_acts += 1;
		while (_nacts > 0) {
			_nacts -= 1;
			_acts += 1;
			switch (_lexer_actions[_acts - 1]) {
case 0:
/* line 6 "ragel/i18n/hu.js.rl" */

    this.content_start = p;
    this.current_line = this.line_number;
    this.start_col = p - this.last_newline - (this.keyword+':').length;
  		break;
case 1:
/* line 12 "ragel/i18n/hu.js.rl" */

    this.current_line = this.line_number;
    this.start_col = p - this.last_newline;
  		break;
case 2:
/* line 17 "ragel/i18n/hu.js.rl" */

    this.content_start = p;
  		break;
case 3:
/* line 21 "ragel/i18n/hu.js.rl" */

    this.docstring_content_type_start = p;
  		break;
case 4:
/* line 25 "ragel/i18n/hu.js.rl" */

    this.docstring_content_type_end = p;
  		break;
case 5:
/* line 29 "ragel/i18n/hu.js.rl" */

    var con = this.unindent(
      this.start_col, 
      this.bytesToString(data.slice(this.content_start, this.next_keyword_start-1)).replace(/(\r?\n)?([\t ])*$/, '').replace(/\\\"\\\"\\\"/mg, '"""')
    );
    var con_type = this.bytesToString(data.slice(this.docstring_content_type_start, this.docstring_content_type_end)).trim();
    this.listener.doc_string(con_type, con, this.current_line); 
  		break;
case 6:
/* line 38 "ragel/i18n/hu.js.rl" */

    p = this.store_keyword_content('feature', data, p, eof);
  		break;
case 7:
/* line 42 "ragel/i18n/hu.js.rl" */

    p = this.store_keyword_content('background', data, p, eof);
  		break;
case 8:
/* line 46 "ragel/i18n/hu.js.rl" */

    p = this.store_keyword_content('scenario', data, p, eof);
  		break;
case 9:
/* line 50 "ragel/i18n/hu.js.rl" */

    p = this.store_keyword_content('scenario_outline', data, p, eof);
  		break;
case 10:
/* line 54 "ragel/i18n/hu.js.rl" */

    p = this.store_keyword_content('examples', data, p, eof);
  		break;
case 11:
/* line 58 "ragel/i18n/hu.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.step(this.keyword, con, this.current_line);
  		break;
case 12:
/* line 63 "ragel/i18n/hu.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.comment(con, this.line_number);
    this.keyword_start = null;
  		break;
case 13:
/* line 69 "ragel/i18n/hu.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.tag(con, this.line_number);
    this.keyword_start = null;
  		break;
case 14:
/* line 75 "ragel/i18n/hu.js.rl" */

    this.line_number++;
  		break;
case 15:
/* line 79 "ragel/i18n/hu.js.rl" */

    this.last_newline = p + 1;
  		break;
case 16:
/* line 83 "ragel/i18n/hu.js.rl" */

    this.keyword_start = this.keyword_start || p;
  		break;
case 17:
/* line 87 "ragel/i18n/hu.js.rl" */

    this.keyword = this.bytesToString(data.slice(this.keyword_start, p)).replace(/:$/, '');
    this.keyword_start = null;
  		break;
case 18:
/* line 92 "ragel/i18n/hu.js.rl" */

    this.next_keyword_start = p;
  		break;
case 19:
/* line 96 "ragel/i18n/hu.js.rl" */

    p = p - 1;
    current_row = [];
    this.current_line = this.line_number;
  		break;
case 20:
/* line 102 "ragel/i18n/hu.js.rl" */

    this.content_start = p;
  		break;
case 21:
/* line 106 "ragel/i18n/hu.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    current_row.push(con.replace(/\\\|/, "|").replace(/\\n/, "\n").replace(/\\\\/, "\\"));
  		break;
case 22:
/* line 111 "ragel/i18n/hu.js.rl" */

    this.listener.row(current_row, this.current_line);
  		break;
case 23:
/* line 115 "ragel/i18n/hu.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw new Error("Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.");
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 977 "js/lib/gherkin/lexer/hu.js" */
			} /* action switch */
		}
	}
	if (_trigger_goto) {
		continue;
	}
	}
	if (_goto_level <= _again) {
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	p += 1;
	if (p != pe) {
		_goto_level = _resume;
		continue;
	}
	}
	if (_goto_level <= _test_eof) {
	if (p == eof) {
	__acts = _lexer_eof_actions[ this.cs];
	__nacts =  _lexer_actions[__acts];
	__acts += 1;
	while (__nacts > 0) {
		__nacts -= 1;
		__acts += 1;
		switch (_lexer_actions[__acts - 1]) {
case 23:
/* line 115 "ragel/i18n/hu.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw new Error("Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.");
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 1016 "js/lib/gherkin/lexer/hu.js" */
		} /* eof action switch */
	}
	if (_trigger_goto) {
		continue;
	}
}
	}
	if (_goto_level <= _out) {
		break;
	}
	}
	}

/* line 165 "ragel/i18n/hu.js.rl" */
};


/*
 * Decode utf-8 byte sequence to string.
 */
var decodeUtf8 = function(bytes) {
  var result = "";
  var i = 0;
  var wc;
  var c;

  while (i < bytes.length) {
    /* parse as UTF-8 lead byte */
    wc = bytes[i++];
    if (wc < 0x80) {
      count = 0;
    } else if (wc < 0xC2 || wc >= 0xF8) {
      throw new Error("input is not a valid UTF-8 lead octet");
    } else if (wc < 0xE0) {
      count = 1;
      wc = (wc & 0x1F) << 6;
    } else if (wc < 0xF0) {
      count = 2;
      wc = (wc & 0x0F) << 12;
    } else /* wc < 0xF8 */ {
      count = 3;
      wc = (wc & 0x07) << 18;
    }

    /* parse trail bytes, if any */
    while (count) {
      if (!(i < bytes.length)) {
        throw new Error("short read");
      }
      if ((c = bytes[i++] ^ 0x80) > 0x3F) {
        throw new Error("input is not a valid UTF-8 trail octet");
      }
      wc |= c << (6 * --count);
      if (wc < (1 << (5 * count + 6))) {
        throw new Error("invalid non-minimal encoded input");
      }
    }

    /* handle conversion to UTF-16 if needed */
    if (wc > 0xFFFF) {
      wc -= 0x10000;
      result += String.fromCharCode(0xD800 + (wc >> 10));
      wc = 0xDC00 + (wc & 0x3FF);
    }
    result += String.fromCharCode(wc);
  }

  return result;
};

/*
 * Encode string to an array of bytes using utf8 encoding.
 *
 * Javascript internally stores character data as utf16 (like java).
 * String.charCodeAt() does *not* produce unicode points, but simply
 * reflects this internal representation. Thus, it is necessary
 * to first decode the utf-16 representation before encoding to
 * utf-8.
 */
var encodeUtf8 = function(string) {
  var bytes = [];
  var i = 0;
  var j = 0;
  var wc;

  while (i < string.length) {
    wc = string.charCodeAt(i++);
    if (wc >= 0xD800 && wc <= 0xDBFF && i < string.length && string.charCodeAt(i) >= 0xDC00 && string.charCodeAt(i) <= 0xDFFF) {
      /* decode UTF-16 */
      wc = 0x10000 + ((wc & 0x3FF) << 10) + (string.charCodeAt(i++) & 0x3FF);
    }

    /* emit lead byte */
    if (wc < 0x80) {
      bytes[j++] = wc;
      count = 0;
    } else if (wc < 0x800) {
      bytes[j++] = 0xC0 | (wc >> 6);
      count = 1;
    } else if (wc < 0x10000) {
      bytes[j++] = 0xE0 | (wc >> 12);
      count = 2;
    } else {
      /* SMP: 21-bit Unicode */
      bytes[j++] = 0xF0 | (wc >> 18);
      count = 3;
    }

    /* emit trail bytes, if any */
    while (count) {
      bytes[j++] = 0x80 | ((wc >> (6 * --count)) & 0x3F);
    }
  }

  return bytes;

};

Lexer.prototype.bytesToString = function(bytes) {
  if(typeof bytes.write == 'function') {
    // Node.js
    return bytes.toString('utf-8');
  }
  return decodeUtf8(bytes);
};

Lexer.prototype.stringToBytes = function(string) {
  return encodeUtf8(string);
};

Lexer.prototype.unindent = function(startcol, text) {
  startcol = startcol || 0;
  return text.replace(new RegExp('^[\t ]{0,' + startcol + '}', 'gm'), ''); 
};

Lexer.prototype.store_keyword_content = function(event, data, p, eof) {
  var end_point = (!this.next_keyword_start || (p == eof)) ? p : this.next_keyword_start;
  var content = this.unindent(this.start_col + 2, this.bytesToString(data.slice(this.content_start, end_point))).replace(/\s+$/,"");
  var content_lines = content.split("\n")
  var name = content_lines.shift() || "";
  name = name.trim();
  var description = content_lines.join("\n");
  this.listener[event](this.keyword, name, description, this.current_line);
  var nks = this.next_keyword_start;
  this.next_keyword_start = null;
  return nks ? nks - 1 : p;
};

Lexer.prototype.current_line_content = function(data, p) {
  var rest = Array.prototype.slice.call(data,this.last_newline, -1);
  var end = rest.indexOf(10) || -1;
  return this.bytesToString(rest.slice(0, end)).trim();
};

// Node.js export
if(typeof module !== 'undefined') {
  module.exports = Lexer;
}
// Require.js export
if (typeof define !== 'undefined') {
  if(define.amd) {
    define('gherkin/lexer/hu', [], function() {
      return Lexer;
    });
  } else {
    define('gherkin/lexer/hu', function(require, exports, module) {
      exports.Lexer = Lexer;
    });
  }
}

})();

}).call(this,require("buffer").Buffer)

},{"buffer":69}],212:[function(require,module,exports){
(function (Buffer){

/* line 1 "ragel/i18n/id.js.rl" */
;(function() {


/* line 126 "ragel/i18n/id.js.rl" */



/* line 11 "js/lib/gherkin/lexer/id.js" */
var _lexer_actions = [
	0, 1, 0, 1, 1, 1, 2, 1, 
	3, 1, 4, 1, 5, 1, 6, 1, 
	7, 1, 8, 1, 9, 1, 10, 1, 
	11, 1, 12, 1, 13, 1, 16, 1, 
	17, 1, 18, 1, 19, 1, 20, 1, 
	21, 1, 22, 1, 23, 2, 2, 18, 
	2, 3, 4, 2, 13, 0, 2, 14, 
	15, 2, 17, 0, 2, 17, 1, 2, 
	17, 16, 2, 17, 19, 2, 18, 6, 
	2, 18, 7, 2, 18, 8, 2, 18, 
	9, 2, 18, 10, 2, 18, 16, 2, 
	20, 21, 2, 22, 0, 2, 22, 1, 
	2, 22, 16, 2, 22, 19, 3, 4, 
	14, 15, 3, 5, 14, 15, 3, 11, 
	14, 15, 3, 12, 14, 15, 3, 13, 
	14, 15, 3, 14, 15, 18, 3, 17, 
	0, 11, 3, 17, 14, 15, 4, 2, 
	14, 15, 18, 4, 3, 4, 14, 15, 
	4, 17, 0, 14, 15, 5, 17, 0, 
	11, 14, 15
];

var _lexer_key_offsets = [
	0, 0, 18, 35, 36, 37, 39, 41, 
	46, 51, 56, 61, 65, 69, 71, 72, 
	73, 74, 75, 76, 77, 78, 79, 80, 
	81, 82, 83, 84, 85, 86, 87, 89, 
	91, 96, 103, 108, 109, 110, 111, 112, 
	113, 114, 115, 116, 123, 125, 127, 129, 
	131, 133, 150, 152, 154, 155, 156, 157, 
	158, 159, 173, 175, 177, 179, 181, 183, 
	185, 187, 189, 191, 193, 195, 197, 199, 
	201, 203, 206, 208, 210, 212, 214, 216, 
	218, 220, 222, 224, 226, 228, 230, 232, 
	234, 236, 238, 240, 242, 244, 246, 248, 
	250, 253, 255, 257, 259, 261, 263, 265, 
	267, 269, 271, 272, 273, 274, 275, 276, 
	277, 278, 279, 280, 281, 282, 293, 295, 
	297, 299, 301, 303, 305, 307, 309, 311, 
	313, 315, 317, 319, 321, 323, 325, 327, 
	329, 331, 333, 335, 337, 339, 341, 343, 
	345, 347, 349, 351, 353, 355, 357, 359, 
	361, 364, 366, 368, 370, 372, 374, 376, 
	377, 378, 379, 380, 381, 382, 383, 384, 
	385, 386, 387, 388, 389, 391, 392, 393, 
	394, 395, 396, 397, 398, 399, 400, 414, 
	416, 418, 420, 422, 424, 426, 428, 430, 
	432, 434, 436, 438, 440, 442, 444, 447, 
	449, 451, 453, 455, 457, 459, 461, 463, 
	465, 467, 469, 471, 473, 475, 477, 479, 
	481, 483, 485, 487, 489, 491, 493, 495, 
	497, 498, 499, 513, 515, 517, 519, 521, 
	523, 525, 527, 529, 531, 533, 535, 537, 
	539, 541, 543, 546, 549, 551, 553, 555, 
	557, 559, 561, 563, 565, 567, 569, 571, 
	573, 575, 577, 579, 581, 583, 585, 587, 
	589, 591, 593, 595, 598, 600, 602, 604, 
	606, 608, 610, 612, 614, 616, 617, 618, 
	619, 623, 629, 632, 634, 640, 657, 658, 
	659
];

var _lexer_trans_keys = [
	10, 32, 34, 35, 37, 42, 64, 67, 
	68, 70, 75, 77, 83, 84, 124, 239, 
	9, 13, 10, 32, 34, 35, 37, 42, 
	64, 67, 68, 70, 75, 77, 83, 84, 
	124, 9, 13, 34, 34, 10, 13, 10, 
	13, 10, 32, 34, 9, 13, 10, 32, 
	34, 9, 13, 10, 32, 34, 9, 13, 
	10, 32, 34, 9, 13, 10, 32, 9, 
	13, 10, 32, 9, 13, 10, 13, 10, 
	95, 70, 69, 65, 84, 85, 82, 69, 
	95, 69, 78, 68, 95, 37, 32, 10, 
	13, 10, 13, 13, 32, 64, 9, 10, 
	9, 10, 13, 32, 64, 11, 12, 10, 
	32, 64, 9, 13, 111, 110, 116, 111, 
	104, 58, 10, 10, 10, 32, 35, 70, 
	124, 9, 13, 10, 105, 10, 116, 10, 
	117, 10, 114, 10, 58, 10, 32, 34, 
	35, 37, 42, 64, 67, 68, 70, 75, 
	77, 83, 84, 124, 9, 13, 97, 101, 
	110, 115, 97, 114, 58, 10, 10, 10, 
	32, 35, 37, 42, 64, 68, 70, 75, 
	77, 83, 84, 9, 13, 10, 95, 10, 
	70, 10, 69, 10, 65, 10, 84, 10, 
	85, 10, 82, 10, 69, 10, 95, 10, 
	69, 10, 78, 10, 68, 10, 95, 10, 
	37, 10, 32, 10, 97, 101, 10, 110, 
	10, 110, 10, 103, 10, 97, 10, 105, 
	10, 116, 10, 117, 10, 114, 10, 58, 
	10, 101, 10, 116, 10, 105, 10, 107, 
	10, 97, 10, 97, 10, 107, 10, 101, 
	10, 110, 10, 97, 10, 114, 10, 105, 
	10, 111, 10, 32, 58, 10, 107, 10, 
	111, 10, 110, 10, 115, 10, 101, 10, 
	112, 10, 97, 10, 112, 10, 105, 110, 
	103, 97, 110, 105, 116, 117, 114, 58, 
	10, 10, 10, 32, 35, 37, 64, 67, 
	68, 70, 83, 9, 13, 10, 95, 10, 
	70, 10, 69, 10, 65, 10, 84, 10, 
	85, 10, 82, 10, 69, 10, 95, 10, 
	69, 10, 78, 10, 68, 10, 95, 10, 
	37, 10, 111, 10, 110, 10, 116, 10, 
	111, 10, 104, 10, 58, 10, 97, 10, 
	115, 10, 97, 10, 114, 10, 105, 10, 
	116, 10, 117, 10, 107, 10, 101, 10, 
	110, 10, 97, 10, 114, 10, 105, 10, 
	111, 10, 32, 58, 10, 107, 10, 111, 
	10, 110, 10, 115, 10, 101, 10, 112, 
	101, 116, 105, 107, 97, 97, 107, 101, 
	110, 97, 114, 105, 111, 32, 58, 107, 
	111, 110, 115, 101, 112, 58, 10, 10, 
	10, 32, 35, 37, 42, 64, 68, 70, 
	75, 77, 83, 84, 9, 13, 10, 95, 
	10, 70, 10, 69, 10, 65, 10, 84, 
	10, 85, 10, 82, 10, 69, 10, 95, 
	10, 69, 10, 78, 10, 68, 10, 95, 
	10, 37, 10, 32, 10, 97, 101, 10, 
	110, 10, 110, 10, 103, 10, 97, 10, 
	105, 10, 116, 10, 117, 10, 114, 10, 
	58, 10, 101, 10, 116, 10, 105, 10, 
	107, 10, 97, 10, 97, 10, 107, 10, 
	101, 10, 110, 10, 97, 10, 114, 10, 
	105, 10, 111, 10, 97, 10, 112, 10, 
	105, 10, 10, 10, 32, 35, 37, 42, 
	64, 68, 70, 75, 77, 83, 84, 9, 
	13, 10, 95, 10, 70, 10, 69, 10, 
	65, 10, 84, 10, 85, 10, 82, 10, 
	69, 10, 95, 10, 69, 10, 78, 10, 
	68, 10, 95, 10, 37, 10, 32, 10, 
	97, 101, 10, 110, 115, 10, 97, 10, 
	114, 10, 58, 10, 110, 10, 103, 10, 
	97, 10, 110, 10, 105, 10, 116, 10, 
	117, 10, 101, 10, 116, 10, 105, 10, 
	107, 10, 97, 10, 97, 10, 107, 10, 
	101, 10, 110, 10, 97, 10, 114, 10, 
	105, 10, 111, 10, 32, 58, 10, 107, 
	10, 111, 10, 110, 10, 115, 10, 101, 
	10, 112, 10, 97, 10, 112, 10, 105, 
	97, 112, 105, 32, 124, 9, 13, 10, 
	32, 92, 124, 9, 13, 10, 92, 124, 
	10, 92, 10, 32, 92, 124, 9, 13, 
	10, 32, 34, 35, 37, 42, 64, 67, 
	68, 70, 75, 77, 83, 84, 124, 9, 
	13, 187, 191, 0
];

var _lexer_single_lengths = [
	0, 16, 15, 1, 1, 2, 2, 3, 
	3, 3, 3, 2, 2, 2, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 2, 2, 
	3, 5, 3, 1, 1, 1, 1, 1, 
	1, 1, 1, 5, 2, 2, 2, 2, 
	2, 15, 2, 2, 1, 1, 1, 1, 
	1, 12, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 3, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	3, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 9, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	3, 2, 2, 2, 2, 2, 2, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 2, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 12, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 3, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	1, 1, 12, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 3, 3, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 3, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 1, 1, 1, 
	2, 4, 3, 2, 4, 15, 1, 1, 
	0
];

var _lexer_range_lengths = [
	0, 1, 1, 0, 0, 0, 0, 1, 
	1, 1, 1, 1, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 1, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 0, 0, 0, 0, 
	0, 1, 0, 0, 0, 0, 0, 0, 
	0, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 1, 0, 0, 1, 1, 0, 0, 
	0
];

var _lexer_index_offsets = [
	0, 0, 18, 35, 37, 39, 42, 45, 
	50, 55, 60, 65, 69, 73, 76, 78, 
	80, 82, 84, 86, 88, 90, 92, 94, 
	96, 98, 100, 102, 104, 106, 108, 111, 
	114, 119, 126, 131, 133, 135, 137, 139, 
	141, 143, 145, 147, 154, 157, 160, 163, 
	166, 169, 186, 189, 192, 194, 196, 198, 
	200, 202, 216, 219, 222, 225, 228, 231, 
	234, 237, 240, 243, 246, 249, 252, 255, 
	258, 261, 265, 268, 271, 274, 277, 280, 
	283, 286, 289, 292, 295, 298, 301, 304, 
	307, 310, 313, 316, 319, 322, 325, 328, 
	331, 335, 338, 341, 344, 347, 350, 353, 
	356, 359, 362, 364, 366, 368, 370, 372, 
	374, 376, 378, 380, 382, 384, 395, 398, 
	401, 404, 407, 410, 413, 416, 419, 422, 
	425, 428, 431, 434, 437, 440, 443, 446, 
	449, 452, 455, 458, 461, 464, 467, 470, 
	473, 476, 479, 482, 485, 488, 491, 494, 
	497, 501, 504, 507, 510, 513, 516, 519, 
	521, 523, 525, 527, 529, 531, 533, 535, 
	537, 539, 541, 543, 545, 548, 550, 552, 
	554, 556, 558, 560, 562, 564, 566, 580, 
	583, 586, 589, 592, 595, 598, 601, 604, 
	607, 610, 613, 616, 619, 622, 625, 629, 
	632, 635, 638, 641, 644, 647, 650, 653, 
	656, 659, 662, 665, 668, 671, 674, 677, 
	680, 683, 686, 689, 692, 695, 698, 701, 
	704, 706, 708, 722, 725, 728, 731, 734, 
	737, 740, 743, 746, 749, 752, 755, 758, 
	761, 764, 767, 771, 775, 778, 781, 784, 
	787, 790, 793, 796, 799, 802, 805, 808, 
	811, 814, 817, 820, 823, 826, 829, 832, 
	835, 838, 841, 844, 848, 851, 854, 857, 
	860, 863, 866, 869, 872, 875, 877, 879, 
	881, 885, 891, 895, 898, 904, 921, 923, 
	925
];

var _lexer_indicies = [
	2, 1, 3, 4, 5, 6, 7, 8, 
	9, 10, 11, 12, 13, 14, 15, 16, 
	1, 0, 2, 1, 3, 4, 5, 6, 
	7, 8, 9, 10, 11, 12, 13, 14, 
	15, 1, 0, 17, 0, 18, 0, 20, 
	21, 19, 23, 24, 22, 27, 26, 28, 
	26, 25, 31, 30, 32, 30, 29, 31, 
	30, 33, 30, 29, 31, 30, 34, 30, 
	29, 36, 35, 35, 0, 2, 37, 37, 
	0, 39, 40, 38, 2, 0, 41, 0, 
	42, 0, 43, 0, 44, 0, 45, 0, 
	46, 0, 47, 0, 48, 0, 49, 0, 
	50, 0, 51, 0, 52, 0, 53, 0, 
	54, 0, 55, 0, 57, 58, 56, 60, 
	61, 59, 0, 0, 0, 0, 62, 63, 
	64, 63, 63, 66, 65, 62, 2, 67, 
	7, 67, 0, 68, 0, 69, 0, 70, 
	0, 71, 0, 72, 0, 73, 0, 75, 
	74, 77, 76, 77, 78, 79, 80, 79, 
	78, 76, 77, 81, 76, 77, 82, 76, 
	77, 83, 76, 77, 84, 76, 77, 85, 
	76, 87, 86, 88, 89, 90, 91, 92, 
	93, 94, 95, 96, 97, 98, 99, 100, 
	86, 0, 101, 102, 0, 103, 104, 0, 
	105, 0, 106, 0, 107, 0, 109, 108, 
	111, 110, 111, 112, 113, 114, 115, 113, 
	116, 117, 118, 119, 120, 121, 112, 110, 
	111, 122, 110, 111, 123, 110, 111, 124, 
	110, 111, 125, 110, 111, 126, 110, 111, 
	127, 110, 111, 128, 110, 111, 129, 110, 
	111, 130, 110, 111, 131, 110, 111, 132, 
	110, 111, 133, 110, 111, 134, 110, 111, 
	135, 110, 111, 136, 110, 111, 137, 138, 
	110, 111, 139, 110, 111, 140, 110, 111, 
	141, 110, 111, 137, 110, 111, 142, 110, 
	111, 143, 110, 111, 144, 110, 111, 145, 
	110, 111, 136, 110, 111, 146, 110, 111, 
	147, 110, 111, 148, 110, 111, 149, 110, 
	111, 139, 110, 111, 148, 110, 111, 150, 
	110, 111, 151, 110, 111, 152, 110, 111, 
	153, 110, 111, 154, 110, 111, 155, 110, 
	111, 156, 110, 111, 157, 136, 110, 111, 
	158, 110, 111, 159, 110, 111, 160, 110, 
	111, 161, 110, 111, 162, 110, 111, 145, 
	110, 111, 163, 110, 111, 164, 110, 111, 
	139, 110, 165, 0, 166, 0, 167, 0, 
	103, 0, 168, 0, 169, 0, 170, 0, 
	171, 0, 172, 0, 174, 173, 176, 175, 
	176, 177, 178, 179, 178, 180, 181, 182, 
	183, 177, 175, 176, 184, 175, 176, 185, 
	175, 176, 186, 175, 176, 187, 175, 176, 
	188, 175, 176, 189, 175, 176, 190, 175, 
	176, 191, 175, 176, 192, 175, 176, 193, 
	175, 176, 194, 175, 176, 195, 175, 176, 
	196, 175, 176, 197, 175, 176, 198, 175, 
	176, 199, 175, 176, 200, 175, 176, 201, 
	175, 176, 202, 175, 176, 203, 175, 176, 
	204, 175, 176, 205, 175, 176, 206, 175, 
	176, 202, 175, 176, 207, 175, 176, 208, 
	175, 176, 206, 175, 176, 209, 175, 176, 
	210, 175, 176, 211, 175, 176, 212, 175, 
	176, 213, 175, 176, 214, 175, 176, 215, 
	175, 176, 216, 203, 175, 176, 217, 175, 
	176, 218, 175, 176, 219, 175, 176, 220, 
	175, 176, 221, 175, 176, 202, 175, 222, 
	0, 223, 0, 224, 0, 225, 0, 103, 
	0, 224, 0, 226, 0, 227, 0, 228, 
	0, 229, 0, 230, 0, 231, 0, 232, 
	0, 233, 234, 0, 235, 0, 236, 0, 
	237, 0, 238, 0, 239, 0, 240, 0, 
	241, 0, 243, 242, 245, 244, 245, 246, 
	247, 248, 249, 247, 250, 251, 252, 253, 
	254, 255, 246, 244, 245, 256, 244, 245, 
	257, 244, 245, 258, 244, 245, 259, 244, 
	245, 260, 244, 245, 261, 244, 245, 262, 
	244, 245, 263, 244, 245, 264, 244, 245, 
	265, 244, 245, 266, 244, 245, 267, 244, 
	245, 268, 244, 245, 269, 244, 245, 270, 
	244, 245, 271, 272, 244, 245, 273, 244, 
	245, 274, 244, 245, 275, 244, 245, 271, 
	244, 245, 276, 244, 245, 277, 244, 245, 
	278, 244, 245, 279, 244, 245, 270, 244, 
	245, 280, 244, 245, 281, 244, 245, 282, 
	244, 245, 283, 244, 245, 273, 244, 245, 
	282, 244, 245, 284, 244, 245, 285, 244, 
	245, 286, 244, 245, 287, 244, 245, 288, 
	244, 245, 289, 244, 245, 279, 244, 245, 
	290, 244, 245, 291, 244, 245, 273, 244, 
	293, 292, 295, 294, 295, 296, 297, 298, 
	299, 297, 300, 301, 302, 303, 304, 305, 
	296, 294, 295, 306, 294, 295, 307, 294, 
	295, 308, 294, 295, 309, 294, 295, 310, 
	294, 295, 311, 294, 295, 312, 294, 295, 
	313, 294, 295, 314, 294, 295, 315, 294, 
	295, 316, 294, 295, 317, 294, 295, 318, 
	294, 295, 319, 294, 295, 320, 294, 295, 
	321, 322, 294, 295, 323, 324, 294, 295, 
	325, 294, 295, 326, 294, 295, 320, 294, 
	295, 327, 294, 295, 328, 294, 295, 329, 
	294, 295, 323, 294, 295, 330, 294, 295, 
	331, 294, 295, 325, 294, 295, 332, 294, 
	295, 333, 294, 295, 334, 294, 295, 335, 
	294, 295, 323, 294, 295, 334, 294, 295, 
	336, 294, 295, 337, 294, 295, 338, 294, 
	295, 339, 294, 295, 340, 294, 295, 341, 
	294, 295, 342, 294, 295, 343, 320, 294, 
	295, 344, 294, 295, 345, 294, 295, 346, 
	294, 295, 347, 294, 295, 348, 294, 295, 
	326, 294, 295, 349, 294, 295, 350, 294, 
	295, 323, 294, 351, 0, 352, 0, 103, 
	0, 353, 354, 353, 0, 357, 356, 358, 
	359, 356, 355, 0, 361, 362, 360, 0, 
	361, 360, 357, 363, 361, 362, 363, 360, 
	357, 364, 365, 366, 367, 368, 369, 370, 
	371, 372, 373, 374, 375, 376, 377, 364, 
	0, 378, 0, 1, 0, 379, 0
];

var _lexer_trans_targs = [
	0, 2, 2, 3, 13, 15, 29, 32, 
	35, 50, 110, 159, 164, 165, 277, 280, 
	286, 4, 5, 6, 7, 6, 6, 7, 
	6, 8, 8, 8, 9, 8, 8, 8, 
	9, 10, 11, 12, 2, 12, 13, 2, 
	14, 16, 17, 18, 19, 20, 21, 22, 
	23, 24, 25, 26, 27, 28, 288, 30, 
	31, 2, 14, 31, 2, 14, 33, 34, 
	2, 33, 32, 34, 36, 37, 38, 39, 
	40, 41, 42, 43, 42, 43, 43, 2, 
	44, 45, 46, 47, 48, 49, 2, 2, 
	3, 13, 15, 29, 32, 35, 50, 110, 
	159, 164, 165, 277, 280, 51, 106, 29, 
	52, 53, 54, 55, 56, 57, 56, 57, 
	57, 2, 58, 72, 73, 78, 83, 88, 
	89, 103, 59, 60, 61, 62, 63, 64, 
	65, 66, 67, 68, 69, 70, 71, 2, 
	49, 74, 75, 72, 76, 77, 79, 80, 
	81, 82, 84, 85, 86, 87, 90, 91, 
	92, 93, 94, 95, 96, 97, 98, 99, 
	100, 101, 102, 104, 105, 107, 108, 109, 
	111, 112, 113, 114, 115, 116, 117, 116, 
	117, 117, 2, 118, 132, 138, 142, 145, 
	119, 120, 121, 122, 123, 124, 125, 126, 
	127, 128, 129, 130, 131, 2, 133, 134, 
	135, 136, 137, 49, 139, 140, 141, 143, 
	144, 146, 147, 148, 149, 150, 151, 152, 
	153, 154, 155, 156, 157, 158, 160, 161, 
	162, 163, 166, 167, 168, 169, 170, 171, 
	172, 173, 224, 174, 175, 176, 177, 178, 
	179, 180, 181, 182, 181, 182, 182, 2, 
	183, 197, 198, 203, 208, 213, 214, 221, 
	184, 185, 186, 187, 188, 189, 190, 191, 
	192, 193, 194, 195, 196, 2, 49, 199, 
	200, 197, 201, 202, 204, 205, 206, 207, 
	209, 210, 211, 212, 215, 216, 217, 218, 
	219, 220, 222, 223, 225, 226, 225, 226, 
	226, 2, 227, 241, 242, 251, 254, 259, 
	260, 274, 228, 229, 230, 231, 232, 233, 
	234, 235, 236, 237, 238, 239, 240, 2, 
	49, 243, 247, 241, 244, 245, 246, 248, 
	249, 250, 252, 253, 255, 256, 257, 258, 
	261, 262, 263, 264, 265, 266, 267, 268, 
	269, 270, 271, 272, 273, 275, 276, 278, 
	279, 280, 281, 282, 284, 285, 283, 281, 
	282, 283, 281, 284, 285, 3, 13, 15, 
	29, 32, 35, 50, 110, 159, 164, 165, 
	277, 280, 287, 0
];

var _lexer_trans_actions = [
	43, 0, 54, 3, 1, 0, 29, 1, 
	29, 29, 29, 29, 29, 29, 29, 35, 
	0, 0, 0, 7, 139, 48, 0, 102, 
	9, 5, 45, 134, 45, 0, 33, 122, 
	33, 33, 0, 11, 106, 0, 0, 114, 
	25, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	57, 149, 126, 0, 110, 23, 0, 27, 
	118, 27, 51, 0, 0, 0, 0, 0, 
	0, 0, 57, 144, 0, 54, 0, 81, 
	84, 0, 0, 0, 0, 21, 31, 130, 
	60, 57, 31, 63, 57, 63, 63, 63, 
	63, 63, 63, 63, 66, 0, 0, 0, 
	0, 0, 0, 0, 57, 144, 0, 54, 
	0, 72, 33, 84, 84, 84, 84, 84, 
	84, 84, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 15, 
	15, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 57, 144, 0, 
	54, 0, 69, 33, 84, 84, 84, 84, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 13, 0, 0, 
	0, 0, 0, 13, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 57, 144, 0, 54, 0, 78, 
	33, 84, 84, 84, 84, 84, 84, 84, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 19, 19, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 57, 144, 0, 54, 
	0, 75, 33, 84, 84, 84, 84, 84, 
	84, 84, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 17, 
	17, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 37, 37, 54, 37, 87, 
	0, 0, 39, 0, 0, 93, 90, 41, 
	96, 90, 96, 96, 96, 96, 96, 96, 
	96, 99, 0, 0
];

var _lexer_eof_actions = [
	0, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43
];

var lexer_start = 1;
var lexer_first_final = 288;
var lexer_error = 0;

var lexer_en_main = 1;


/* line 129 "ragel/i18n/id.js.rl" */

/* line 130 "ragel/i18n/id.js.rl" */

/* line 131 "ragel/i18n/id.js.rl" */

/* line 132 "ragel/i18n/id.js.rl" */

var Lexer = function(listener) {
  // Check that listener has the required functions
  var events = ['comment', 'tag', 'feature', 'background', 'scenario', 'scenario_outline', 'examples', 'step', 'doc_string', 'row', 'eof'];
  for(var i=0, len=events.length; i<len; i++) {
    var event = events[i];
    if(typeof listener[event] != 'function') {
      throw new Error("Error. No " + event + " function exists on " + JSON.stringify(listener));
    }
  }
  this.listener = listener;
};

Lexer.prototype.scan = function(data) {
  var ending = "\n%_FEATURE_END_%";
  if(typeof data == 'string') {
    data = this.stringToBytes(data + ending);
  } else if(typeof Buffer != 'undefined' && Buffer.isBuffer(data)) {
    // Node.js
    var buf = new Buffer(data.length + ending.length);
    data.copy(buf, 0, 0);
    new Buffer(ending).copy(buf, data.length, 0);
    data = buf;
  }
  var eof = pe = data.length;
  var p = 0;

  this.line_number = 1;
  this.last_newline = 0;
  var signedCharValue=function(v){return v > 127 ? v-256 : v; };

  
/* line 588 "js/lib/gherkin/lexer/id.js" */
{
	  this.cs = lexer_start;
} /* JSCodeGen::writeInit */

/* line 164 "ragel/i18n/id.js.rl" */
  
/* line 595 "js/lib/gherkin/lexer/id.js" */
{
	var _klen, _trans, _keys, _ps, _widec, _acts, _nacts;
	var _goto_level, _resume, _eof_trans, _again, _test_eof;
	var _out;
	_klen = _trans = _keys = _acts = _nacts = null;
	_goto_level = 0;
	_resume = 10;
	_eof_trans = 15;
	_again = 20;
	_test_eof = 30;
	_out = 40;
	while (true) {
	_trigger_goto = false;
	if (_goto_level <= 0) {
	if (p == pe) {
		_goto_level = _test_eof;
		continue;
	}
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	}
	if (_goto_level <= _resume) {
	_keys = _lexer_key_offsets[ this.cs];
	_trans = _lexer_index_offsets[ this.cs];
	_klen = _lexer_single_lengths[ this.cs];
	_break_match = false;
	
	do {
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + _klen - 1;

	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + ( (_upper - _lower) >> 1 );

	        if (( signedCharValue(data[p])) < _lexer_trans_keys[_mid]) {
	           _upper = _mid - 1;
	        } else if (( signedCharValue(data[p])) > _lexer_trans_keys[_mid]) {
	           _lower = _mid + 1;
	        } else {
	           _trans += (_mid - _keys);
	           _break_match = true;
	           break;
	        };
	     } /* while */
	     if (_break_match) { break; }
	     _keys += _klen;
	     _trans += _klen;
	  }
	  _klen = _lexer_range_lengths[ this.cs];
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + (_klen << 1) - 2;
	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + (((_upper-_lower) >> 1) & ~1);
	        if (( signedCharValue(data[p])) < _lexer_trans_keys[_mid]) {
	          _upper = _mid - 2;
	         } else if (( signedCharValue(data[p])) > _lexer_trans_keys[_mid+1]) {
	          _lower = _mid + 2;
	        } else {
	          _trans += ((_mid - _keys) >> 1);
	          _break_match = true;
	          break;
	        }
	     } /* while */
	     if (_break_match) { break; }
	     _trans += _klen
	  }
	} while (false);
	_trans = _lexer_indicies[_trans];
	 this.cs = _lexer_trans_targs[_trans];
	if (_lexer_trans_actions[_trans] != 0) {
		_acts = _lexer_trans_actions[_trans];
		_nacts = _lexer_actions[_acts];
		_acts += 1;
		while (_nacts > 0) {
			_nacts -= 1;
			_acts += 1;
			switch (_lexer_actions[_acts - 1]) {
case 0:
/* line 6 "ragel/i18n/id.js.rl" */

    this.content_start = p;
    this.current_line = this.line_number;
    this.start_col = p - this.last_newline - (this.keyword+':').length;
  		break;
case 1:
/* line 12 "ragel/i18n/id.js.rl" */

    this.current_line = this.line_number;
    this.start_col = p - this.last_newline;
  		break;
case 2:
/* line 17 "ragel/i18n/id.js.rl" */

    this.content_start = p;
  		break;
case 3:
/* line 21 "ragel/i18n/id.js.rl" */

    this.docstring_content_type_start = p;
  		break;
case 4:
/* line 25 "ragel/i18n/id.js.rl" */

    this.docstring_content_type_end = p;
  		break;
case 5:
/* line 29 "ragel/i18n/id.js.rl" */

    var con = this.unindent(
      this.start_col, 
      this.bytesToString(data.slice(this.content_start, this.next_keyword_start-1)).replace(/(\r?\n)?([\t ])*$/, '').replace(/\\\"\\\"\\\"/mg, '"""')
    );
    var con_type = this.bytesToString(data.slice(this.docstring_content_type_start, this.docstring_content_type_end)).trim();
    this.listener.doc_string(con_type, con, this.current_line); 
  		break;
case 6:
/* line 38 "ragel/i18n/id.js.rl" */

    p = this.store_keyword_content('feature', data, p, eof);
  		break;
case 7:
/* line 42 "ragel/i18n/id.js.rl" */

    p = this.store_keyword_content('background', data, p, eof);
  		break;
case 8:
/* line 46 "ragel/i18n/id.js.rl" */

    p = this.store_keyword_content('scenario', data, p, eof);
  		break;
case 9:
/* line 50 "ragel/i18n/id.js.rl" */

    p = this.store_keyword_content('scenario_outline', data, p, eof);
  		break;
case 10:
/* line 54 "ragel/i18n/id.js.rl" */

    p = this.store_keyword_content('examples', data, p, eof);
  		break;
case 11:
/* line 58 "ragel/i18n/id.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.step(this.keyword, con, this.current_line);
  		break;
case 12:
/* line 63 "ragel/i18n/id.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.comment(con, this.line_number);
    this.keyword_start = null;
  		break;
case 13:
/* line 69 "ragel/i18n/id.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.tag(con, this.line_number);
    this.keyword_start = null;
  		break;
case 14:
/* line 75 "ragel/i18n/id.js.rl" */

    this.line_number++;
  		break;
case 15:
/* line 79 "ragel/i18n/id.js.rl" */

    this.last_newline = p + 1;
  		break;
case 16:
/* line 83 "ragel/i18n/id.js.rl" */

    this.keyword_start = this.keyword_start || p;
  		break;
case 17:
/* line 87 "ragel/i18n/id.js.rl" */

    this.keyword = this.bytesToString(data.slice(this.keyword_start, p)).replace(/:$/, '');
    this.keyword_start = null;
  		break;
case 18:
/* line 92 "ragel/i18n/id.js.rl" */

    this.next_keyword_start = p;
  		break;
case 19:
/* line 96 "ragel/i18n/id.js.rl" */

    p = p - 1;
    current_row = [];
    this.current_line = this.line_number;
  		break;
case 20:
/* line 102 "ragel/i18n/id.js.rl" */

    this.content_start = p;
  		break;
case 21:
/* line 106 "ragel/i18n/id.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    current_row.push(con.replace(/\\\|/, "|").replace(/\\n/, "\n").replace(/\\\\/, "\\"));
  		break;
case 22:
/* line 111 "ragel/i18n/id.js.rl" */

    this.listener.row(current_row, this.current_line);
  		break;
case 23:
/* line 115 "ragel/i18n/id.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw new Error("Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.");
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 822 "js/lib/gherkin/lexer/id.js" */
			} /* action switch */
		}
	}
	if (_trigger_goto) {
		continue;
	}
	}
	if (_goto_level <= _again) {
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	p += 1;
	if (p != pe) {
		_goto_level = _resume;
		continue;
	}
	}
	if (_goto_level <= _test_eof) {
	if (p == eof) {
	__acts = _lexer_eof_actions[ this.cs];
	__nacts =  _lexer_actions[__acts];
	__acts += 1;
	while (__nacts > 0) {
		__nacts -= 1;
		__acts += 1;
		switch (_lexer_actions[__acts - 1]) {
case 23:
/* line 115 "ragel/i18n/id.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw new Error("Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.");
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 861 "js/lib/gherkin/lexer/id.js" */
		} /* eof action switch */
	}
	if (_trigger_goto) {
		continue;
	}
}
	}
	if (_goto_level <= _out) {
		break;
	}
	}
	}

/* line 165 "ragel/i18n/id.js.rl" */
};


/*
 * Decode utf-8 byte sequence to string.
 */
var decodeUtf8 = function(bytes) {
  var result = "";
  var i = 0;
  var wc;
  var c;

  while (i < bytes.length) {
    /* parse as UTF-8 lead byte */
    wc = bytes[i++];
    if (wc < 0x80) {
      count = 0;
    } else if (wc < 0xC2 || wc >= 0xF8) {
      throw new Error("input is not a valid UTF-8 lead octet");
    } else if (wc < 0xE0) {
      count = 1;
      wc = (wc & 0x1F) << 6;
    } else if (wc < 0xF0) {
      count = 2;
      wc = (wc & 0x0F) << 12;
    } else /* wc < 0xF8 */ {
      count = 3;
      wc = (wc & 0x07) << 18;
    }

    /* parse trail bytes, if any */
    while (count) {
      if (!(i < bytes.length)) {
        throw new Error("short read");
      }
      if ((c = bytes[i++] ^ 0x80) > 0x3F) {
        throw new Error("input is not a valid UTF-8 trail octet");
      }
      wc |= c << (6 * --count);
      if (wc < (1 << (5 * count + 6))) {
        throw new Error("invalid non-minimal encoded input");
      }
    }

    /* handle conversion to UTF-16 if needed */
    if (wc > 0xFFFF) {
      wc -= 0x10000;
      result += String.fromCharCode(0xD800 + (wc >> 10));
      wc = 0xDC00 + (wc & 0x3FF);
    }
    result += String.fromCharCode(wc);
  }

  return result;
};

/*
 * Encode string to an array of bytes using utf8 encoding.
 *
 * Javascript internally stores character data as utf16 (like java).
 * String.charCodeAt() does *not* produce unicode points, but simply
 * reflects this internal representation. Thus, it is necessary
 * to first decode the utf-16 representation before encoding to
 * utf-8.
 */
var encodeUtf8 = function(string) {
  var bytes = [];
  var i = 0;
  var j = 0;
  var wc;

  while (i < string.length) {
    wc = string.charCodeAt(i++);
    if (wc >= 0xD800 && wc <= 0xDBFF && i < string.length && string.charCodeAt(i) >= 0xDC00 && string.charCodeAt(i) <= 0xDFFF) {
      /* decode UTF-16 */
      wc = 0x10000 + ((wc & 0x3FF) << 10) + (string.charCodeAt(i++) & 0x3FF);
    }

    /* emit lead byte */
    if (wc < 0x80) {
      bytes[j++] = wc;
      count = 0;
    } else if (wc < 0x800) {
      bytes[j++] = 0xC0 | (wc >> 6);
      count = 1;
    } else if (wc < 0x10000) {
      bytes[j++] = 0xE0 | (wc >> 12);
      count = 2;
    } else {
      /* SMP: 21-bit Unicode */
      bytes[j++] = 0xF0 | (wc >> 18);
      count = 3;
    }

    /* emit trail bytes, if any */
    while (count) {
      bytes[j++] = 0x80 | ((wc >> (6 * --count)) & 0x3F);
    }
  }

  return bytes;

};

Lexer.prototype.bytesToString = function(bytes) {
  if(typeof bytes.write == 'function') {
    // Node.js
    return bytes.toString('utf-8');
  }
  return decodeUtf8(bytes);
};

Lexer.prototype.stringToBytes = function(string) {
  return encodeUtf8(string);
};

Lexer.prototype.unindent = function(startcol, text) {
  startcol = startcol || 0;
  return text.replace(new RegExp('^[\t ]{0,' + startcol + '}', 'gm'), ''); 
};

Lexer.prototype.store_keyword_content = function(event, data, p, eof) {
  var end_point = (!this.next_keyword_start || (p == eof)) ? p : this.next_keyword_start;
  var content = this.unindent(this.start_col + 2, this.bytesToString(data.slice(this.content_start, end_point))).replace(/\s+$/,"");
  var content_lines = content.split("\n")
  var name = content_lines.shift() || "";
  name = name.trim();
  var description = content_lines.join("\n");
  this.listener[event](this.keyword, name, description, this.current_line);
  var nks = this.next_keyword_start;
  this.next_keyword_start = null;
  return nks ? nks - 1 : p;
};

Lexer.prototype.current_line_content = function(data, p) {
  var rest = Array.prototype.slice.call(data,this.last_newline, -1);
  var end = rest.indexOf(10) || -1;
  return this.bytesToString(rest.slice(0, end)).trim();
};

// Node.js export
if(typeof module !== 'undefined') {
  module.exports = Lexer;
}
// Require.js export
if (typeof define !== 'undefined') {
  if(define.amd) {
    define('gherkin/lexer/id', [], function() {
      return Lexer;
    });
  } else {
    define('gherkin/lexer/id', function(require, exports, module) {
      exports.Lexer = Lexer;
    });
  }
}

})();

}).call(this,require("buffer").Buffer)

},{"buffer":69}],213:[function(require,module,exports){
(function (Buffer){

/* line 1 "ragel/i18n/is.js.rl" */
;(function() {


/* line 126 "ragel/i18n/is.js.rl" */



/* line 11 "js/lib/gherkin/lexer/is.js" */
var _lexer_actions = [
	0, 1, 0, 1, 1, 1, 2, 1, 
	3, 1, 4, 1, 5, 1, 6, 1, 
	7, 1, 8, 1, 9, 1, 10, 1, 
	11, 1, 12, 1, 13, 1, 16, 1, 
	17, 1, 18, 1, 19, 1, 20, 1, 
	21, 1, 22, 1, 23, 2, 2, 18, 
	2, 3, 4, 2, 13, 0, 2, 14, 
	15, 2, 17, 0, 2, 17, 1, 2, 
	17, 16, 2, 17, 19, 2, 18, 6, 
	2, 18, 7, 2, 18, 8, 2, 18, 
	9, 2, 18, 10, 2, 18, 16, 2, 
	20, 21, 2, 22, 0, 2, 22, 1, 
	2, 22, 16, 2, 22, 19, 3, 4, 
	14, 15, 3, 5, 14, 15, 3, 11, 
	14, 15, 3, 12, 14, 15, 3, 13, 
	14, 15, 3, 14, 15, 18, 3, 17, 
	0, 11, 3, 17, 14, 15, 4, 2, 
	14, 15, 18, 4, 3, 4, 14, 15, 
	4, 17, 0, 14, 15, 5, 17, 0, 
	11, 14, 15
];

var _lexer_key_offsets = [
	0, 0, 18, 19, 21, 22, 23, 25, 
	27, 44, 45, 46, 48, 50, 55, 60, 
	65, 70, 74, 78, 80, 81, 82, 83, 
	84, 85, 86, 87, 88, 89, 90, 91, 
	92, 93, 94, 95, 100, 107, 112, 113, 
	114, 115, 116, 117, 118, 119, 120, 121, 
	122, 123, 125, 126, 127, 141, 143, 146, 
	148, 150, 167, 168, 169, 170, 171, 172, 
	173, 174, 175, 176, 177, 178, 179, 192, 
	194, 197, 199, 201, 203, 205, 207, 209, 
	211, 213, 215, 217, 219, 221, 223, 225, 
	227, 229, 231, 233, 235, 237, 239, 241, 
	243, 245, 247, 249, 251, 253, 255, 257, 
	259, 263, 265, 267, 269, 271, 273, 275, 
	277, 279, 281, 283, 285, 287, 289, 291, 
	293, 296, 298, 300, 302, 304, 306, 308, 
	310, 312, 314, 316, 318, 320, 322, 324, 
	326, 328, 330, 332, 333, 334, 335, 336, 
	337, 338, 339, 346, 348, 350, 352, 354, 
	356, 358, 360, 362, 364, 366, 369, 370, 
	371, 372, 373, 374, 375, 376, 377, 378, 
	379, 380, 392, 394, 396, 398, 400, 402, 
	404, 406, 408, 410, 412, 414, 416, 418, 
	420, 422, 424, 426, 428, 430, 432, 434, 
	436, 438, 440, 442, 445, 447, 449, 451, 
	453, 455, 457, 459, 461, 463, 465, 467, 
	469, 471, 473, 475, 477, 479, 481, 483, 
	485, 487, 489, 491, 493, 495, 497, 499, 
	501, 503, 506, 508, 510, 512, 514, 516, 
	518, 520, 522, 524, 526, 528, 530, 532, 
	534, 536, 538, 539, 540, 541, 542, 543, 
	544, 545, 547, 548, 549, 550, 551, 552, 
	553, 554, 555, 556, 557, 558, 559, 560, 
	561, 562, 563, 575, 577, 580, 582, 584, 
	586, 588, 590, 592, 594, 596, 598, 600, 
	602, 604, 606, 608, 610, 612, 614, 616, 
	618, 620, 622, 624, 626, 628, 630, 632, 
	634, 636, 638, 640, 642, 646, 648, 650, 
	652, 654, 656, 658, 660, 662, 664, 665, 
	666, 667, 668, 669, 673, 679, 682, 684, 
	690, 707, 709, 711, 713, 715, 717, 719, 
	721, 723, 725, 727, 729, 731, 733, 735, 
	737, 739, 741, 743, 745, 747, 749, 751, 
	753, 755, 757, 759, 761, 763, 765, 767, 
	769, 771, 773, 775, 777, 779, 781, 783, 
	787, 789, 791, 793, 795, 797, 799, 801, 
	803, 805, 807, 809, 811, 813, 815, 817, 
	820, 822, 824, 826, 828, 830, 832, 834, 
	836, 838, 840, 842, 844, 846, 848, 850, 
	852, 854, 855, 856, 857, 858, 859, 860
];

var _lexer_trans_keys = [
	-61, 10, 32, 34, 35, 37, 42, 64, 
	65, 66, 68, 69, 76, 79, 124, 239, 
	9, 13, -98, -61, 101, -95, 32, 10, 
	13, 10, 13, -61, 10, 32, 34, 35, 
	37, 42, 64, 65, 66, 68, 69, 76, 
	79, 124, 9, 13, 34, 34, 10, 13, 
	10, 13, 10, 32, 34, 9, 13, 10, 
	32, 34, 9, 13, 10, 32, 34, 9, 
	13, 10, 32, 34, 9, 13, 10, 32, 
	9, 13, 10, 32, 9, 13, 10, 13, 
	10, 95, 70, 69, 65, 84, 85, 82, 
	69, 95, 69, 78, 68, 95, 37, 13, 
	32, 64, 9, 10, 9, 10, 13, 32, 
	64, 11, 12, 10, 32, 64, 9, 13, 
	116, 98, 117, 114, -61, -80, 97, 114, 
	-61, -95, 115, 58, 105, 10, 10, -61, 
	10, 32, 35, 37, 42, 64, 65, 66, 
	69, 76, 79, 9, 13, -98, 10, -61, 
	10, 101, -95, 10, 10, 32, -61, 10, 
	32, 34, 35, 37, 42, 64, 65, 66, 
	68, 69, 76, 79, 124, 9, 13, 97, 
	107, 103, 114, 117, 110, 110, 117, 114, 
	58, 10, 10, -61, 10, 32, 35, 37, 
	42, 64, 65, 69, 76, 79, 9, 13, 
	-98, 10, -61, 10, 101, -95, 10, 10, 
	32, 10, 103, 10, 97, 10, 114, 10, 
	95, 10, 70, 10, 69, 10, 65, 10, 
	84, 10, 85, 10, 82, 10, 69, 10, 
	95, 10, 69, 10, 78, 10, 68, 10, 
	95, 10, 37, 10, 116, 10, 98, 10, 
	117, 10, 114, -61, 10, -80, 10, 10, 
	97, 10, 114, -61, 10, -95, 10, 10, 
	115, 10, 58, 10, 102, 105, 110, 10, 
	103, 10, 105, 10, 110, 10, 108, 10, 
	101, 10, 105, 10, 107, 10, 105, -61, 
	10, -67, 10, 10, 115, 10, 105, 10, 
	110, 10, 103, 10, 32, 10, 65, 68, 
	10, 116, 10, 98, 10, 117, 10, 114, 
	-61, 10, -80, 10, 10, 97, 10, 114, 
	-61, 10, -95, 10, 10, 115, 10, 97, 
	10, 114, -61, 10, -90, 10, 10, 109, 
	10, 97, 10, 103, -61, -90, 109, 105, 
	58, 10, 10, 10, 32, 35, 69, 124, 
	9, 13, 10, 105, 10, 103, 10, 105, 
	10, 110, 10, 108, 10, 101, 10, 105, 
	10, 107, 10, 105, 10, 58, 102, 105, 
	110, 103, 105, 110, 108, 101, 105, 107, 
	105, 58, 10, 10, 10, 32, 35, 37, 
	64, 65, 66, 68, 69, 76, 9, 13, 
	10, 95, 10, 70, 10, 69, 10, 65, 
	10, 84, 10, 85, 10, 82, 10, 69, 
	10, 95, 10, 69, 10, 78, 10, 68, 
	10, 95, 10, 37, 10, 116, 10, 98, 
	10, 117, 10, 114, -61, 10, -80, 10, 
	10, 97, 10, 114, -61, 10, -95, 10, 
	10, 115, 10, 58, 105, 10, 114, 10, 
	58, 10, 97, 10, 107, 10, 103, 10, 
	114, 10, 117, 10, 110, 10, 110, 10, 
	117, -61, 10, -90, 10, 10, 109, 10, 
	105, 10, 105, 10, 103, 10, 105, 10, 
	110, 10, 108, 10, 101, 10, 105, 10, 
	107, -61, 10, -67, 10, 10, 115, 10, 
	105, 10, 110, 10, 103, 10, 32, 10, 
	65, 68, 10, 116, 10, 98, 10, 117, 
	10, 114, -61, 10, -80, 10, 10, 97, 
	10, 114, -61, 10, -95, 10, 10, 115, 
	10, 97, -61, 10, -90, 10, 10, 109, 
	10, 97, -61, -67, 115, 105, 110, 103, 
	32, 65, 68, 116, 98, 117, 114, -61, 
	-80, 97, 114, -61, -95, 115, 97, 114, 
	58, 10, 10, -61, 10, 32, 35, 37, 
	42, 64, 65, 69, 79, 9, 13, -98, 
	10, -61, 10, 101, -95, 10, 10, 32, 
	10, 103, 10, 97, 10, 114, 10, 95, 
	10, 70, 10, 69, 10, 65, 10, 84, 
	10, 85, 10, 82, 10, 69, 10, 95, 
	10, 69, 10, 78, 10, 68, 10, 95, 
	10, 37, 10, 116, 10, 98, 10, 117, 
	10, 114, -61, 10, -80, 10, 10, 97, 
	10, 114, -61, 10, -95, 10, 10, 115, 
	10, 58, 10, 102, 105, 110, 10, 103, 
	10, 105, 10, 110, 10, 108, 10, 101, 
	10, 105, 10, 107, 10, 105, 10, 103, 
	-61, -90, 109, 97, 103, 32, 124, 9, 
	13, 10, 32, 92, 124, 9, 13, 10, 
	92, 124, 10, 92, 10, 32, 92, 124, 
	9, 13, -61, 10, 32, 34, 35, 37, 
	42, 64, 65, 66, 68, 69, 76, 79, 
	124, 9, 13, 10, 103, 10, 97, 10, 
	114, 10, 95, 10, 70, 10, 69, 10, 
	65, 10, 84, 10, 85, 10, 82, 10, 
	69, 10, 95, 10, 69, 10, 78, 10, 
	68, 10, 95, 10, 37, 10, 116, 10, 
	98, 10, 117, 10, 114, -61, 10, -80, 
	10, 10, 97, 10, 114, -61, 10, -95, 
	10, 10, 115, 10, 58, 10, 97, 10, 
	107, 10, 103, 10, 114, 10, 117, 10, 
	110, 10, 110, 10, 117, 10, 114, 10, 
	102, 105, 110, 10, 103, 10, 105, 10, 
	110, 10, 108, 10, 101, 10, 105, 10, 
	107, 10, 105, -61, 10, -67, 10, 10, 
	115, 10, 105, 10, 110, 10, 103, 10, 
	32, 10, 65, 68, 10, 116, 10, 98, 
	10, 117, 10, 114, -61, 10, -80, 10, 
	10, 97, 10, 114, -61, 10, -95, 10, 
	10, 115, 10, 97, -61, 10, -90, 10, 
	10, 109, 10, 97, 10, 103, 114, 103, 
	97, 114, 187, 191, 0
];

var _lexer_single_lengths = [
	0, 16, 1, 2, 1, 1, 2, 2, 
	15, 1, 1, 2, 2, 3, 3, 3, 
	3, 2, 2, 2, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 3, 5, 3, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 2, 1, 1, 12, 2, 3, 2, 
	2, 15, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 11, 2, 
	3, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	4, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	3, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 1, 1, 1, 1, 1, 
	1, 1, 5, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 3, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 10, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 3, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 3, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 1, 1, 1, 1, 1, 1, 
	1, 2, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 10, 2, 3, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 4, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 1, 1, 
	1, 1, 1, 2, 4, 3, 2, 4, 
	15, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 4, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 3, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 1, 1, 1, 1, 1, 1, 0
];

var _lexer_range_lengths = [
	0, 1, 0, 0, 0, 0, 0, 0, 
	1, 0, 0, 0, 0, 1, 1, 1, 
	1, 1, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 1, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 0, 0, 0, 
	0, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 1, 0, 0, 1, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0
];

var _lexer_index_offsets = [
	0, 0, 18, 20, 23, 25, 27, 30, 
	33, 50, 52, 54, 57, 60, 65, 70, 
	75, 80, 84, 88, 91, 93, 95, 97, 
	99, 101, 103, 105, 107, 109, 111, 113, 
	115, 117, 119, 121, 126, 133, 138, 140, 
	142, 144, 146, 148, 150, 152, 154, 156, 
	158, 160, 163, 165, 167, 181, 184, 188, 
	191, 194, 211, 213, 215, 217, 219, 221, 
	223, 225, 227, 229, 231, 233, 235, 248, 
	251, 255, 258, 261, 264, 267, 270, 273, 
	276, 279, 282, 285, 288, 291, 294, 297, 
	300, 303, 306, 309, 312, 315, 318, 321, 
	324, 327, 330, 333, 336, 339, 342, 345, 
	348, 353, 356, 359, 362, 365, 368, 371, 
	374, 377, 380, 383, 386, 389, 392, 395, 
	398, 402, 405, 408, 411, 414, 417, 420, 
	423, 426, 429, 432, 435, 438, 441, 444, 
	447, 450, 453, 456, 458, 460, 462, 464, 
	466, 468, 470, 477, 480, 483, 486, 489, 
	492, 495, 498, 501, 504, 507, 511, 513, 
	515, 517, 519, 521, 523, 525, 527, 529, 
	531, 533, 545, 548, 551, 554, 557, 560, 
	563, 566, 569, 572, 575, 578, 581, 584, 
	587, 590, 593, 596, 599, 602, 605, 608, 
	611, 614, 617, 620, 624, 627, 630, 633, 
	636, 639, 642, 645, 648, 651, 654, 657, 
	660, 663, 666, 669, 672, 675, 678, 681, 
	684, 687, 690, 693, 696, 699, 702, 705, 
	708, 711, 715, 718, 721, 724, 727, 730, 
	733, 736, 739, 742, 745, 748, 751, 754, 
	757, 760, 763, 765, 767, 769, 771, 773, 
	775, 777, 780, 782, 784, 786, 788, 790, 
	792, 794, 796, 798, 800, 802, 804, 806, 
	808, 810, 812, 824, 827, 831, 834, 837, 
	840, 843, 846, 849, 852, 855, 858, 861, 
	864, 867, 870, 873, 876, 879, 882, 885, 
	888, 891, 894, 897, 900, 903, 906, 909, 
	912, 915, 918, 921, 924, 929, 932, 935, 
	938, 941, 944, 947, 950, 953, 956, 958, 
	960, 962, 964, 966, 970, 976, 980, 983, 
	989, 1006, 1009, 1012, 1015, 1018, 1021, 1024, 
	1027, 1030, 1033, 1036, 1039, 1042, 1045, 1048, 
	1051, 1054, 1057, 1060, 1063, 1066, 1069, 1072, 
	1075, 1078, 1081, 1084, 1087, 1090, 1093, 1096, 
	1099, 1102, 1105, 1108, 1111, 1114, 1117, 1120, 
	1125, 1128, 1131, 1134, 1137, 1140, 1143, 1146, 
	1149, 1152, 1155, 1158, 1161, 1164, 1167, 1170, 
	1174, 1177, 1180, 1183, 1186, 1189, 1192, 1195, 
	1198, 1201, 1204, 1207, 1210, 1213, 1216, 1219, 
	1222, 1225, 1227, 1229, 1231, 1233, 1235, 1237
];

var _lexer_indicies = [
	1, 3, 2, 4, 5, 6, 7, 8, 
	9, 10, 11, 12, 13, 14, 15, 16, 
	2, 0, 17, 0, 18, 19, 0, 20, 
	0, 21, 0, 23, 24, 22, 26, 27, 
	25, 1, 3, 2, 4, 5, 6, 7, 
	8, 9, 10, 11, 12, 13, 14, 15, 
	2, 0, 28, 0, 29, 0, 31, 32, 
	30, 34, 35, 33, 38, 37, 39, 37, 
	36, 42, 41, 43, 41, 40, 42, 41, 
	44, 41, 40, 42, 41, 45, 41, 40, 
	47, 46, 46, 0, 3, 48, 48, 0, 
	50, 51, 49, 3, 0, 52, 0, 53, 
	0, 54, 0, 55, 0, 56, 0, 57, 
	0, 58, 0, 59, 0, 60, 0, 61, 
	0, 62, 0, 63, 0, 64, 0, 65, 
	0, 0, 0, 0, 0, 66, 67, 68, 
	67, 67, 70, 69, 66, 3, 71, 8, 
	71, 0, 72, 0, 73, 0, 74, 0, 
	75, 0, 76, 0, 77, 0, 78, 0, 
	79, 0, 80, 0, 81, 0, 82, 0, 
	83, 84, 0, 86, 85, 88, 87, 89, 
	88, 90, 91, 92, 93, 91, 94, 95, 
	96, 97, 98, 90, 87, 99, 88, 87, 
	100, 88, 101, 87, 102, 88, 87, 88, 
	103, 87, 104, 106, 105, 107, 108, 109, 
	110, 111, 112, 113, 114, 115, 116, 117, 
	118, 105, 0, 119, 0, 120, 0, 121, 
	0, 122, 0, 123, 0, 124, 0, 125, 
	0, 126, 0, 127, 0, 128, 0, 130, 
	129, 132, 131, 133, 132, 134, 135, 136, 
	137, 135, 138, 139, 140, 141, 134, 131, 
	142, 132, 131, 143, 132, 144, 131, 145, 
	132, 131, 132, 146, 131, 132, 147, 131, 
	132, 148, 131, 132, 145, 131, 132, 149, 
	131, 132, 150, 131, 132, 151, 131, 132, 
	152, 131, 132, 153, 131, 132, 154, 131, 
	132, 155, 131, 132, 156, 131, 132, 157, 
	131, 132, 158, 131, 132, 159, 131, 132, 
	160, 131, 132, 161, 131, 132, 162, 131, 
	132, 163, 131, 132, 164, 131, 132, 165, 
	131, 132, 166, 131, 167, 132, 131, 168, 
	132, 131, 132, 169, 131, 132, 170, 131, 
	171, 132, 131, 172, 132, 131, 132, 173, 
	131, 132, 146, 131, 132, 145, 174, 145, 
	131, 132, 175, 131, 132, 176, 131, 132, 
	177, 131, 132, 178, 131, 132, 179, 131, 
	132, 180, 131, 132, 181, 131, 132, 173, 
	131, 182, 132, 131, 183, 132, 131, 132, 
	184, 131, 132, 185, 131, 132, 186, 131, 
	132, 187, 131, 132, 188, 131, 132, 189, 
	190, 131, 132, 191, 131, 132, 192, 131, 
	132, 193, 131, 132, 194, 131, 195, 132, 
	131, 196, 132, 131, 132, 197, 131, 132, 
	198, 131, 199, 132, 131, 200, 132, 131, 
	132, 201, 131, 132, 202, 131, 132, 173, 
	131, 203, 132, 131, 204, 132, 131, 132, 
	205, 131, 132, 173, 131, 132, 145, 131, 
	206, 0, 207, 0, 208, 0, 209, 0, 
	210, 0, 212, 211, 214, 213, 214, 215, 
	216, 217, 216, 215, 213, 214, 218, 213, 
	214, 219, 213, 214, 220, 213, 214, 221, 
	213, 214, 222, 213, 214, 223, 213, 214, 
	224, 213, 214, 225, 213, 214, 226, 213, 
	214, 227, 213, 20, 228, 20, 0, 229, 
	0, 230, 0, 231, 0, 232, 0, 233, 
	0, 234, 0, 235, 0, 236, 0, 237, 
	0, 239, 238, 241, 240, 241, 242, 243, 
	244, 243, 245, 246, 247, 248, 249, 242, 
	240, 241, 250, 240, 241, 251, 240, 241, 
	252, 240, 241, 253, 240, 241, 254, 240, 
	241, 255, 240, 241, 256, 240, 241, 257, 
	240, 241, 258, 240, 241, 259, 240, 241, 
	260, 240, 241, 261, 240, 241, 262, 240, 
	241, 263, 240, 241, 264, 240, 241, 265, 
	240, 241, 266, 240, 241, 267, 240, 268, 
	241, 240, 269, 241, 240, 241, 270, 240, 
	241, 271, 240, 272, 241, 240, 273, 241, 
	240, 241, 274, 240, 241, 275, 276, 240, 
	241, 277, 240, 241, 275, 240, 241, 278, 
	240, 241, 279, 240, 241, 280, 240, 241, 
	281, 240, 241, 282, 240, 241, 283, 240, 
	241, 284, 240, 241, 276, 240, 285, 241, 
	240, 286, 241, 240, 241, 287, 240, 241, 
	277, 240, 241, 288, 240, 241, 289, 240, 
	241, 290, 240, 241, 291, 240, 241, 292, 
	240, 241, 293, 240, 241, 294, 240, 241, 
	287, 240, 295, 241, 240, 296, 241, 240, 
	241, 297, 240, 241, 298, 240, 241, 299, 
	240, 241, 300, 240, 241, 301, 240, 241, 
	302, 303, 240, 241, 304, 240, 241, 305, 
	240, 241, 306, 240, 241, 307, 240, 308, 
	241, 240, 309, 241, 240, 241, 310, 240, 
	241, 311, 240, 312, 241, 240, 313, 241, 
	240, 241, 314, 240, 241, 276, 240, 315, 
	241, 240, 316, 241, 240, 241, 317, 240, 
	241, 277, 240, 318, 0, 319, 0, 320, 
	0, 321, 0, 322, 0, 323, 0, 324, 
	0, 325, 326, 0, 327, 0, 328, 0, 
	329, 0, 330, 0, 331, 0, 332, 0, 
	333, 0, 334, 0, 335, 0, 336, 0, 
	337, 0, 338, 0, 339, 0, 340, 0, 
	342, 341, 344, 343, 345, 344, 346, 347, 
	348, 349, 347, 350, 351, 352, 346, 343, 
	353, 344, 343, 354, 344, 355, 343, 356, 
	344, 343, 344, 357, 343, 344, 358, 343, 
	344, 359, 343, 344, 356, 343, 344, 360, 
	343, 344, 361, 343, 344, 362, 343, 344, 
	363, 343, 344, 364, 343, 344, 365, 343, 
	344, 366, 343, 344, 367, 343, 344, 368, 
	343, 344, 369, 343, 344, 370, 343, 344, 
	371, 343, 344, 372, 343, 344, 373, 343, 
	344, 374, 343, 344, 375, 343, 344, 376, 
	343, 344, 377, 343, 378, 344, 343, 379, 
	344, 343, 344, 380, 343, 344, 381, 343, 
	382, 344, 343, 383, 344, 343, 344, 384, 
	343, 344, 357, 343, 344, 356, 385, 356, 
	343, 344, 386, 343, 344, 387, 343, 344, 
	388, 343, 344, 389, 343, 344, 390, 343, 
	344, 391, 343, 344, 392, 343, 344, 384, 
	343, 344, 356, 343, 393, 0, 394, 0, 
	395, 0, 339, 0, 20, 0, 396, 397, 
	396, 0, 400, 399, 401, 402, 399, 398, 
	0, 404, 405, 403, 0, 404, 403, 400, 
	406, 404, 405, 406, 403, 407, 400, 408, 
	409, 410, 411, 412, 413, 414, 415, 416, 
	417, 418, 419, 420, 408, 0, 88, 421, 
	87, 88, 422, 87, 88, 102, 87, 88, 
	423, 87, 88, 424, 87, 88, 425, 87, 
	88, 426, 87, 88, 427, 87, 88, 428, 
	87, 88, 429, 87, 88, 430, 87, 88, 
	431, 87, 88, 432, 87, 88, 433, 87, 
	88, 434, 87, 88, 435, 87, 88, 436, 
	87, 88, 437, 87, 88, 438, 87, 88, 
	439, 87, 88, 440, 87, 441, 88, 87, 
	442, 88, 87, 88, 443, 87, 88, 444, 
	87, 445, 88, 87, 446, 88, 87, 88, 
	447, 87, 88, 103, 87, 88, 448, 87, 
	88, 449, 87, 88, 450, 87, 88, 451, 
	87, 88, 452, 87, 88, 453, 87, 88, 
	454, 87, 88, 455, 87, 88, 447, 87, 
	88, 102, 456, 102, 87, 88, 457, 87, 
	88, 458, 87, 88, 459, 87, 88, 460, 
	87, 88, 461, 87, 88, 462, 87, 88, 
	463, 87, 88, 447, 87, 464, 88, 87, 
	465, 88, 87, 88, 466, 87, 88, 467, 
	87, 88, 468, 87, 88, 469, 87, 88, 
	470, 87, 88, 471, 472, 87, 88, 473, 
	87, 88, 474, 87, 88, 475, 87, 88, 
	476, 87, 477, 88, 87, 478, 88, 87, 
	88, 479, 87, 88, 480, 87, 481, 88, 
	87, 482, 88, 87, 88, 483, 87, 88, 
	455, 87, 484, 88, 87, 485, 88, 87, 
	88, 486, 87, 88, 447, 87, 88, 102, 
	87, 209, 0, 487, 0, 488, 0, 20, 
	0, 489, 0, 2, 0, 490, 0
];

var _lexer_trans_targs = [
	0, 2, 8, 8, 9, 19, 21, 5, 
	35, 38, 58, 139, 157, 242, 314, 315, 
	397, 3, 4, 394, 5, 6, 7, 8, 
	20, 7, 8, 20, 10, 11, 12, 13, 
	12, 12, 13, 12, 14, 14, 14, 15, 
	14, 14, 14, 15, 16, 17, 18, 8, 
	18, 19, 8, 20, 22, 23, 24, 25, 
	26, 27, 28, 29, 30, 31, 32, 33, 
	34, 399, 36, 37, 8, 36, 35, 37, 
	39, 40, 41, 42, 43, 44, 45, 46, 
	47, 48, 49, 50, 393, 51, 52, 51, 
	52, 53, 52, 8, 324, 56, 338, 350, 
	359, 368, 392, 54, 55, 321, 56, 57, 
	2, 8, 8, 9, 19, 21, 5, 35, 
	38, 58, 139, 157, 242, 314, 315, 59, 
	60, 61, 62, 63, 64, 65, 66, 67, 
	68, 69, 70, 69, 70, 71, 70, 8, 
	78, 74, 92, 104, 113, 138, 72, 73, 
	75, 74, 57, 76, 77, 79, 80, 81, 
	82, 83, 84, 85, 86, 87, 88, 89, 
	90, 91, 8, 93, 94, 95, 96, 97, 
	98, 99, 100, 101, 102, 103, 105, 106, 
	107, 108, 109, 110, 111, 112, 114, 115, 
	116, 117, 118, 119, 120, 121, 134, 122, 
	123, 124, 125, 126, 127, 128, 129, 130, 
	131, 132, 133, 135, 136, 137, 140, 141, 
	142, 143, 144, 145, 146, 145, 146, 146, 
	8, 147, 148, 149, 150, 151, 152, 153, 
	154, 155, 156, 57, 158, 159, 160, 161, 
	162, 163, 164, 165, 166, 167, 168, 169, 
	168, 169, 169, 8, 170, 184, 198, 206, 
	210, 218, 171, 172, 173, 174, 175, 176, 
	177, 178, 179, 180, 181, 182, 183, 8, 
	185, 186, 187, 188, 189, 190, 191, 192, 
	193, 194, 195, 57, 196, 197, 199, 200, 
	201, 202, 203, 204, 205, 207, 208, 209, 
	211, 212, 213, 214, 215, 216, 217, 219, 
	220, 221, 222, 223, 224, 225, 226, 238, 
	227, 228, 229, 230, 231, 232, 233, 234, 
	235, 236, 237, 239, 240, 241, 243, 244, 
	245, 246, 247, 248, 249, 250, 310, 251, 
	252, 253, 254, 255, 256, 257, 258, 259, 
	260, 261, 262, 263, 264, 265, 266, 265, 
	266, 267, 266, 8, 274, 270, 288, 300, 
	309, 268, 269, 271, 270, 57, 272, 273, 
	275, 276, 277, 278, 279, 280, 281, 282, 
	283, 284, 285, 286, 287, 8, 289, 290, 
	291, 292, 293, 294, 295, 296, 297, 298, 
	299, 301, 302, 303, 304, 305, 306, 307, 
	308, 311, 312, 313, 315, 316, 317, 319, 
	320, 318, 316, 317, 318, 316, 319, 2, 
	320, 9, 19, 21, 5, 35, 38, 58, 
	139, 157, 242, 314, 315, 322, 323, 325, 
	326, 327, 328, 329, 330, 331, 332, 333, 
	334, 335, 336, 337, 8, 339, 340, 341, 
	342, 343, 344, 345, 346, 347, 348, 349, 
	351, 352, 353, 354, 355, 356, 357, 358, 
	360, 361, 362, 363, 364, 365, 366, 367, 
	369, 370, 371, 372, 373, 374, 375, 376, 
	388, 377, 378, 379, 380, 381, 382, 383, 
	384, 385, 386, 387, 389, 390, 391, 395, 
	396, 398, 0
];

var _lexer_trans_actions = [
	43, 29, 0, 54, 3, 1, 0, 29, 
	1, 29, 29, 29, 29, 29, 29, 35, 
	0, 0, 0, 0, 0, 0, 57, 149, 
	126, 0, 110, 23, 0, 0, 7, 139, 
	48, 0, 102, 9, 5, 45, 134, 45, 
	0, 33, 122, 33, 33, 0, 11, 106, 
	0, 0, 114, 25, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 27, 118, 27, 51, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 57, 144, 0, 
	54, 84, 0, 75, 33, 84, 84, 84, 
	84, 84, 84, 0, 0, 0, 0, 17, 
	63, 31, 130, 60, 57, 31, 63, 57, 
	63, 63, 63, 63, 63, 63, 66, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 57, 144, 0, 54, 84, 0, 72, 
	33, 84, 84, 84, 84, 84, 0, 0, 
	0, 0, 15, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 15, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 57, 144, 0, 54, 0, 
	81, 84, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 21, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 57, 144, 
	0, 54, 0, 69, 33, 84, 84, 84, 
	84, 84, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 13, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 13, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 57, 144, 0, 
	54, 84, 0, 78, 33, 84, 84, 84, 
	84, 0, 0, 0, 0, 19, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 19, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 37, 37, 
	54, 37, 87, 0, 0, 39, 0, 96, 
	0, 93, 90, 41, 96, 90, 96, 96, 
	96, 96, 96, 96, 99, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 17, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0
];

var _lexer_eof_actions = [
	0, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43
];

var lexer_start = 1;
var lexer_first_final = 399;
var lexer_error = 0;

var lexer_en_main = 1;


/* line 129 "ragel/i18n/is.js.rl" */

/* line 130 "ragel/i18n/is.js.rl" */

/* line 131 "ragel/i18n/is.js.rl" */

/* line 132 "ragel/i18n/is.js.rl" */

var Lexer = function(listener) {
  // Check that listener has the required functions
  var events = ['comment', 'tag', 'feature', 'background', 'scenario', 'scenario_outline', 'examples', 'step', 'doc_string', 'row', 'eof'];
  for(var i=0, len=events.length; i<len; i++) {
    var event = events[i];
    if(typeof listener[event] != 'function') {
      throw new Error("Error. No " + event + " function exists on " + JSON.stringify(listener));
    }
  }
  this.listener = listener;
};

Lexer.prototype.scan = function(data) {
  var ending = "\n%_FEATURE_END_%";
  if(typeof data == 'string') {
    data = this.stringToBytes(data + ending);
  } else if(typeof Buffer != 'undefined' && Buffer.isBuffer(data)) {
    // Node.js
    var buf = new Buffer(data.length + ending.length);
    data.copy(buf, 0, 0);
    new Buffer(ending).copy(buf, data.length, 0);
    data = buf;
  }
  var eof = pe = data.length;
  var p = 0;

  this.line_number = 1;
  this.last_newline = 0;
  var signedCharValue=function(v){return v > 127 ? v-256 : v; };

  
/* line 745 "js/lib/gherkin/lexer/is.js" */
{
	  this.cs = lexer_start;
} /* JSCodeGen::writeInit */

/* line 164 "ragel/i18n/is.js.rl" */
  
/* line 752 "js/lib/gherkin/lexer/is.js" */
{
	var _klen, _trans, _keys, _ps, _widec, _acts, _nacts;
	var _goto_level, _resume, _eof_trans, _again, _test_eof;
	var _out;
	_klen = _trans = _keys = _acts = _nacts = null;
	_goto_level = 0;
	_resume = 10;
	_eof_trans = 15;
	_again = 20;
	_test_eof = 30;
	_out = 40;
	while (true) {
	_trigger_goto = false;
	if (_goto_level <= 0) {
	if (p == pe) {
		_goto_level = _test_eof;
		continue;
	}
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	}
	if (_goto_level <= _resume) {
	_keys = _lexer_key_offsets[ this.cs];
	_trans = _lexer_index_offsets[ this.cs];
	_klen = _lexer_single_lengths[ this.cs];
	_break_match = false;
	
	do {
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + _klen - 1;

	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + ( (_upper - _lower) >> 1 );

	        if (( signedCharValue(data[p])) < _lexer_trans_keys[_mid]) {
	           _upper = _mid - 1;
	        } else if (( signedCharValue(data[p])) > _lexer_trans_keys[_mid]) {
	           _lower = _mid + 1;
	        } else {
	           _trans += (_mid - _keys);
	           _break_match = true;
	           break;
	        };
	     } /* while */
	     if (_break_match) { break; }
	     _keys += _klen;
	     _trans += _klen;
	  }
	  _klen = _lexer_range_lengths[ this.cs];
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + (_klen << 1) - 2;
	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + (((_upper-_lower) >> 1) & ~1);
	        if (( signedCharValue(data[p])) < _lexer_trans_keys[_mid]) {
	          _upper = _mid - 2;
	         } else if (( signedCharValue(data[p])) > _lexer_trans_keys[_mid+1]) {
	          _lower = _mid + 2;
	        } else {
	          _trans += ((_mid - _keys) >> 1);
	          _break_match = true;
	          break;
	        }
	     } /* while */
	     if (_break_match) { break; }
	     _trans += _klen
	  }
	} while (false);
	_trans = _lexer_indicies[_trans];
	 this.cs = _lexer_trans_targs[_trans];
	if (_lexer_trans_actions[_trans] != 0) {
		_acts = _lexer_trans_actions[_trans];
		_nacts = _lexer_actions[_acts];
		_acts += 1;
		while (_nacts > 0) {
			_nacts -= 1;
			_acts += 1;
			switch (_lexer_actions[_acts - 1]) {
case 0:
/* line 6 "ragel/i18n/is.js.rl" */

    this.content_start = p;
    this.current_line = this.line_number;
    this.start_col = p - this.last_newline - (this.keyword+':').length;
  		break;
case 1:
/* line 12 "ragel/i18n/is.js.rl" */

    this.current_line = this.line_number;
    this.start_col = p - this.last_newline;
  		break;
case 2:
/* line 17 "ragel/i18n/is.js.rl" */

    this.content_start = p;
  		break;
case 3:
/* line 21 "ragel/i18n/is.js.rl" */

    this.docstring_content_type_start = p;
  		break;
case 4:
/* line 25 "ragel/i18n/is.js.rl" */

    this.docstring_content_type_end = p;
  		break;
case 5:
/* line 29 "ragel/i18n/is.js.rl" */

    var con = this.unindent(
      this.start_col, 
      this.bytesToString(data.slice(this.content_start, this.next_keyword_start-1)).replace(/(\r?\n)?([\t ])*$/, '').replace(/\\\"\\\"\\\"/mg, '"""')
    );
    var con_type = this.bytesToString(data.slice(this.docstring_content_type_start, this.docstring_content_type_end)).trim();
    this.listener.doc_string(con_type, con, this.current_line); 
  		break;
case 6:
/* line 38 "ragel/i18n/is.js.rl" */

    p = this.store_keyword_content('feature', data, p, eof);
  		break;
case 7:
/* line 42 "ragel/i18n/is.js.rl" */

    p = this.store_keyword_content('background', data, p, eof);
  		break;
case 8:
/* line 46 "ragel/i18n/is.js.rl" */

    p = this.store_keyword_content('scenario', data, p, eof);
  		break;
case 9:
/* line 50 "ragel/i18n/is.js.rl" */

    p = this.store_keyword_content('scenario_outline', data, p, eof);
  		break;
case 10:
/* line 54 "ragel/i18n/is.js.rl" */

    p = this.store_keyword_content('examples', data, p, eof);
  		break;
case 11:
/* line 58 "ragel/i18n/is.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.step(this.keyword, con, this.current_line);
  		break;
case 12:
/* line 63 "ragel/i18n/is.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.comment(con, this.line_number);
    this.keyword_start = null;
  		break;
case 13:
/* line 69 "ragel/i18n/is.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.tag(con, this.line_number);
    this.keyword_start = null;
  		break;
case 14:
/* line 75 "ragel/i18n/is.js.rl" */

    this.line_number++;
  		break;
case 15:
/* line 79 "ragel/i18n/is.js.rl" */

    this.last_newline = p + 1;
  		break;
case 16:
/* line 83 "ragel/i18n/is.js.rl" */

    this.keyword_start = this.keyword_start || p;
  		break;
case 17:
/* line 87 "ragel/i18n/is.js.rl" */

    this.keyword = this.bytesToString(data.slice(this.keyword_start, p)).replace(/:$/, '');
    this.keyword_start = null;
  		break;
case 18:
/* line 92 "ragel/i18n/is.js.rl" */

    this.next_keyword_start = p;
  		break;
case 19:
/* line 96 "ragel/i18n/is.js.rl" */

    p = p - 1;
    current_row = [];
    this.current_line = this.line_number;
  		break;
case 20:
/* line 102 "ragel/i18n/is.js.rl" */

    this.content_start = p;
  		break;
case 21:
/* line 106 "ragel/i18n/is.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    current_row.push(con.replace(/\\\|/, "|").replace(/\\n/, "\n").replace(/\\\\/, "\\"));
  		break;
case 22:
/* line 111 "ragel/i18n/is.js.rl" */

    this.listener.row(current_row, this.current_line);
  		break;
case 23:
/* line 115 "ragel/i18n/is.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw new Error("Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.");
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 979 "js/lib/gherkin/lexer/is.js" */
			} /* action switch */
		}
	}
	if (_trigger_goto) {
		continue;
	}
	}
	if (_goto_level <= _again) {
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	p += 1;
	if (p != pe) {
		_goto_level = _resume;
		continue;
	}
	}
	if (_goto_level <= _test_eof) {
	if (p == eof) {
	__acts = _lexer_eof_actions[ this.cs];
	__nacts =  _lexer_actions[__acts];
	__acts += 1;
	while (__nacts > 0) {
		__nacts -= 1;
		__acts += 1;
		switch (_lexer_actions[__acts - 1]) {
case 23:
/* line 115 "ragel/i18n/is.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw new Error("Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.");
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 1018 "js/lib/gherkin/lexer/is.js" */
		} /* eof action switch */
	}
	if (_trigger_goto) {
		continue;
	}
}
	}
	if (_goto_level <= _out) {
		break;
	}
	}
	}

/* line 165 "ragel/i18n/is.js.rl" */
};


/*
 * Decode utf-8 byte sequence to string.
 */
var decodeUtf8 = function(bytes) {
  var result = "";
  var i = 0;
  var wc;
  var c;

  while (i < bytes.length) {
    /* parse as UTF-8 lead byte */
    wc = bytes[i++];
    if (wc < 0x80) {
      count = 0;
    } else if (wc < 0xC2 || wc >= 0xF8) {
      throw new Error("input is not a valid UTF-8 lead octet");
    } else if (wc < 0xE0) {
      count = 1;
      wc = (wc & 0x1F) << 6;
    } else if (wc < 0xF0) {
      count = 2;
      wc = (wc & 0x0F) << 12;
    } else /* wc < 0xF8 */ {
      count = 3;
      wc = (wc & 0x07) << 18;
    }

    /* parse trail bytes, if any */
    while (count) {
      if (!(i < bytes.length)) {
        throw new Error("short read");
      }
      if ((c = bytes[i++] ^ 0x80) > 0x3F) {
        throw new Error("input is not a valid UTF-8 trail octet");
      }
      wc |= c << (6 * --count);
      if (wc < (1 << (5 * count + 6))) {
        throw new Error("invalid non-minimal encoded input");
      }
    }

    /* handle conversion to UTF-16 if needed */
    if (wc > 0xFFFF) {
      wc -= 0x10000;
      result += String.fromCharCode(0xD800 + (wc >> 10));
      wc = 0xDC00 + (wc & 0x3FF);
    }
    result += String.fromCharCode(wc);
  }

  return result;
};

/*
 * Encode string to an array of bytes using utf8 encoding.
 *
 * Javascript internally stores character data as utf16 (like java).
 * String.charCodeAt() does *not* produce unicode points, but simply
 * reflects this internal representation. Thus, it is necessary
 * to first decode the utf-16 representation before encoding to
 * utf-8.
 */
var encodeUtf8 = function(string) {
  var bytes = [];
  var i = 0;
  var j = 0;
  var wc;

  while (i < string.length) {
    wc = string.charCodeAt(i++);
    if (wc >= 0xD800 && wc <= 0xDBFF && i < string.length && string.charCodeAt(i) >= 0xDC00 && string.charCodeAt(i) <= 0xDFFF) {
      /* decode UTF-16 */
      wc = 0x10000 + ((wc & 0x3FF) << 10) + (string.charCodeAt(i++) & 0x3FF);
    }

    /* emit lead byte */
    if (wc < 0x80) {
      bytes[j++] = wc;
      count = 0;
    } else if (wc < 0x800) {
      bytes[j++] = 0xC0 | (wc >> 6);
      count = 1;
    } else if (wc < 0x10000) {
      bytes[j++] = 0xE0 | (wc >> 12);
      count = 2;
    } else {
      /* SMP: 21-bit Unicode */
      bytes[j++] = 0xF0 | (wc >> 18);
      count = 3;
    }

    /* emit trail bytes, if any */
    while (count) {
      bytes[j++] = 0x80 | ((wc >> (6 * --count)) & 0x3F);
    }
  }

  return bytes;

};

Lexer.prototype.bytesToString = function(bytes) {
  if(typeof bytes.write == 'function') {
    // Node.js
    return bytes.toString('utf-8');
  }
  return decodeUtf8(bytes);
};

Lexer.prototype.stringToBytes = function(string) {
  return encodeUtf8(string);
};

Lexer.prototype.unindent = function(startcol, text) {
  startcol = startcol || 0;
  return text.replace(new RegExp('^[\t ]{0,' + startcol + '}', 'gm'), ''); 
};

Lexer.prototype.store_keyword_content = function(event, data, p, eof) {
  var end_point = (!this.next_keyword_start || (p == eof)) ? p : this.next_keyword_start;
  var content = this.unindent(this.start_col + 2, this.bytesToString(data.slice(this.content_start, end_point))).replace(/\s+$/,"");
  var content_lines = content.split("\n")
  var name = content_lines.shift() || "";
  name = name.trim();
  var description = content_lines.join("\n");
  this.listener[event](this.keyword, name, description, this.current_line);
  var nks = this.next_keyword_start;
  this.next_keyword_start = null;
  return nks ? nks - 1 : p;
};

Lexer.prototype.current_line_content = function(data, p) {
  var rest = Array.prototype.slice.call(data,this.last_newline, -1);
  var end = rest.indexOf(10) || -1;
  return this.bytesToString(rest.slice(0, end)).trim();
};

// Node.js export
if(typeof module !== 'undefined') {
  module.exports = Lexer;
}
// Require.js export
if (typeof define !== 'undefined') {
  if(define.amd) {
    define('gherkin/lexer/is', [], function() {
      return Lexer;
    });
  } else {
    define('gherkin/lexer/is', function(require, exports, module) {
      exports.Lexer = Lexer;
    });
  }
}

})();

}).call(this,require("buffer").Buffer)

},{"buffer":69}],214:[function(require,module,exports){
(function (Buffer){

/* line 1 "ragel/i18n/it.js.rl" */
;(function() {


/* line 126 "ragel/i18n/it.js.rl" */



/* line 11 "js/lib/gherkin/lexer/it.js" */
var _lexer_actions = [
	0, 1, 0, 1, 1, 1, 2, 1, 
	3, 1, 4, 1, 5, 1, 6, 1, 
	7, 1, 8, 1, 9, 1, 10, 1, 
	11, 1, 12, 1, 13, 1, 16, 1, 
	17, 1, 18, 1, 19, 1, 20, 1, 
	21, 1, 22, 1, 23, 2, 2, 18, 
	2, 3, 4, 2, 13, 0, 2, 14, 
	15, 2, 17, 0, 2, 17, 1, 2, 
	17, 16, 2, 17, 19, 2, 18, 6, 
	2, 18, 7, 2, 18, 8, 2, 18, 
	9, 2, 18, 10, 2, 18, 16, 2, 
	20, 21, 2, 22, 0, 2, 22, 1, 
	2, 22, 16, 2, 22, 19, 3, 4, 
	14, 15, 3, 5, 14, 15, 3, 11, 
	14, 15, 3, 12, 14, 15, 3, 13, 
	14, 15, 3, 14, 15, 18, 3, 17, 
	0, 11, 3, 17, 14, 15, 4, 2, 
	14, 15, 18, 4, 3, 4, 14, 15, 
	4, 17, 0, 14, 15, 5, 17, 0, 
	11, 14, 15
];

var _lexer_key_offsets = [
	0, 0, 19, 37, 38, 39, 41, 43, 
	48, 53, 58, 63, 67, 71, 73, 74, 
	75, 76, 77, 78, 79, 80, 81, 82, 
	83, 84, 85, 86, 87, 88, 89, 91, 
	93, 98, 105, 110, 111, 112, 113, 114, 
	115, 116, 117, 118, 119, 120, 121, 122, 
	123, 124, 125, 140, 142, 144, 146, 148, 
	150, 152, 154, 156, 158, 160, 162, 164, 
	166, 168, 170, 188, 189, 190, 194, 196, 
	197, 198, 199, 200, 201, 202, 203, 210, 
	212, 214, 216, 218, 220, 222, 224, 226, 
	228, 230, 232, 234, 236, 237, 238, 239, 
	240, 241, 242, 243, 244, 245, 246, 247, 
	248, 249, 250, 251, 262, 264, 266, 268, 
	270, 272, 274, 276, 278, 280, 282, 284, 
	286, 288, 290, 292, 294, 296, 298, 300, 
	302, 304, 306, 308, 310, 312, 314, 316, 
	318, 320, 322, 324, 326, 328, 330, 332, 
	334, 336, 338, 340, 342, 345, 347, 349, 
	351, 353, 355, 357, 359, 361, 363, 365, 
	367, 369, 371, 373, 375, 377, 379, 380, 
	381, 382, 383, 384, 385, 387, 388, 389, 
	390, 391, 392, 393, 394, 395, 411, 413, 
	415, 417, 419, 421, 423, 425, 427, 429, 
	431, 433, 435, 437, 439, 441, 443, 445, 
	447, 449, 451, 453, 455, 457, 459, 461, 
	463, 465, 467, 469, 471, 476, 478, 480, 
	482, 484, 486, 488, 490, 492, 494, 496, 
	498, 500, 502, 504, 506, 508, 510, 512, 
	515, 517, 519, 521, 523, 525, 527, 529, 
	531, 533, 535, 537, 539, 541, 543, 545, 
	547, 549, 550, 551, 552, 553, 554, 555, 
	556, 557, 558, 559, 560, 561, 562, 563, 
	564, 565, 566, 567, 568, 569, 570, 585, 
	587, 589, 591, 593, 595, 597, 599, 601, 
	603, 605, 607, 609, 611, 613, 615, 617, 
	619, 621, 623, 625, 627, 629, 634, 636, 
	638, 640, 642, 644, 646, 648, 650, 652, 
	654, 656, 658, 660, 662, 664, 666, 668, 
	670, 672, 674, 676, 678, 680, 682, 684, 
	688, 694, 697, 699, 705, 723, 725, 727, 
	729, 731, 733, 735, 737, 742, 744, 746, 
	748, 750, 752, 754, 756, 758, 760, 762, 
	764, 766, 768, 770, 772, 774, 776, 778, 
	780, 783, 785, 787, 789, 791, 793, 795, 
	797, 799, 801, 803, 805, 807, 809, 811, 
	813, 815, 817, 819, 820, 821
];

var _lexer_trans_keys = [
	10, 32, 34, 35, 37, 42, 64, 65, 
	67, 68, 69, 70, 77, 81, 83, 124, 
	239, 9, 13, 10, 32, 34, 35, 37, 
	42, 64, 65, 67, 68, 69, 70, 77, 
	81, 83, 124, 9, 13, 34, 34, 10, 
	13, 10, 13, 10, 32, 34, 9, 13, 
	10, 32, 34, 9, 13, 10, 32, 34, 
	9, 13, 10, 32, 34, 9, 13, 10, 
	32, 9, 13, 10, 32, 9, 13, 10, 
	13, 10, 95, 70, 69, 65, 84, 85, 
	82, 69, 95, 69, 78, 68, 95, 37, 
	32, 10, 13, 10, 13, 13, 32, 64, 
	9, 10, 9, 10, 13, 32, 64, 11, 
	12, 10, 32, 64, 9, 13, 108, 108, 
	111, 114, 97, 111, 110, 116, 101, 115, 
	116, 111, 58, 10, 10, 10, 32, 35, 
	37, 42, 64, 65, 68, 69, 70, 77, 
	81, 83, 9, 13, 10, 95, 10, 70, 
	10, 69, 10, 65, 10, 84, 10, 85, 
	10, 82, 10, 69, 10, 95, 10, 69, 
	10, 78, 10, 68, 10, 95, 10, 37, 
	10, 32, 10, 32, 34, 35, 37, 42, 
	64, 65, 67, 68, 69, 70, 77, 81, 
	83, 124, 9, 13, 97, 116, 97, 101, 
	105, 111, 32, 115, 101, 109, 112, 105, 
	58, 10, 10, 10, 32, 35, 70, 124, 
	9, 13, 10, 117, 10, 110, 10, 122, 
	10, 105, 10, 111, 10, 110, 10, 97, 
	10, 108, 10, 105, 10, 116, -61, 10, 
	-96, 10, 10, 58, 117, 110, 122, 105, 
	111, 110, 97, 108, 105, 116, -61, -96, 
	58, 10, 10, 10, 32, 35, 37, 64, 
	67, 69, 70, 83, 9, 13, 10, 95, 
	10, 70, 10, 69, 10, 65, 10, 84, 
	10, 85, 10, 82, 10, 69, 10, 95, 
	10, 69, 10, 78, 10, 68, 10, 95, 
	10, 37, 10, 111, 10, 110, 10, 116, 
	10, 101, 10, 115, 10, 116, 10, 111, 
	10, 58, 10, 115, 10, 101, 10, 109, 
	10, 112, 10, 105, 10, 117, 10, 110, 
	10, 122, 10, 105, 10, 111, 10, 110, 
	10, 97, 10, 108, 10, 105, 10, 116, 
	-61, 10, -96, 10, 10, 99, 10, 101, 
	104, 10, 110, 10, 97, 10, 114, 10, 
	105, 10, 101, 10, 109, 10, 97, 10, 
	32, 10, 100, 10, 101, 10, 108, 10, 
	108, 10, 111, 10, 32, 10, 115, 10, 
	99, 10, 101, 117, 97, 110, 100, 111, 
	99, 101, 104, 110, 97, 114, 105, 111, 
	58, 10, 10, 10, 32, 35, 37, 42, 
	64, 65, 67, 68, 69, 70, 77, 81, 
	83, 9, 13, 10, 95, 10, 70, 10, 
	69, 10, 65, 10, 84, 10, 85, 10, 
	82, 10, 69, 10, 95, 10, 69, 10, 
	78, 10, 68, 10, 95, 10, 37, 10, 
	32, 10, 108, 10, 108, 10, 111, 10, 
	114, 10, 97, 10, 111, 10, 110, 10, 
	116, 10, 101, 10, 115, 10, 116, 10, 
	111, 10, 58, 10, 97, 10, 116, 10, 
	97, 101, 105, 111, 10, 117, 10, 110, 
	10, 122, 10, 105, 10, 111, 10, 110, 
	10, 97, 10, 108, 10, 105, 10, 116, 
	-61, 10, -96, 10, 10, 117, 10, 97, 
	10, 110, 10, 100, 10, 111, 10, 99, 
	10, 101, 104, 10, 110, 10, 97, 10, 
	114, 10, 105, 10, 101, 10, 109, 10, 
	97, 10, 32, 10, 100, 10, 101, 10, 
	108, 10, 108, 10, 111, 10, 32, 10, 
	115, 10, 99, 10, 101, 101, 109, 97, 
	32, 100, 101, 108, 108, 111, 32, 115, 
	99, 101, 110, 97, 114, 105, 111, 58, 
	10, 10, 10, 32, 35, 37, 42, 64, 
	65, 68, 69, 70, 77, 81, 83, 9, 
	13, 10, 95, 10, 70, 10, 69, 10, 
	65, 10, 84, 10, 85, 10, 82, 10, 
	69, 10, 95, 10, 69, 10, 78, 10, 
	68, 10, 95, 10, 37, 10, 32, 10, 
	108, 10, 108, 10, 111, 10, 114, 10, 
	97, 10, 97, 10, 116, 10, 97, 101, 
	105, 111, 10, 117, 10, 110, 10, 122, 
	10, 105, 10, 111, 10, 110, 10, 97, 
	10, 108, 10, 105, 10, 116, -61, 10, 
	-96, 10, 10, 58, 10, 117, 10, 97, 
	10, 110, 10, 100, 10, 111, 10, 99, 
	10, 101, 10, 110, 10, 97, 10, 114, 
	10, 105, 10, 111, 32, 124, 9, 13, 
	10, 32, 92, 124, 9, 13, 10, 92, 
	124, 10, 92, 10, 32, 92, 124, 9, 
	13, 10, 32, 34, 35, 37, 42, 64, 
	65, 67, 68, 69, 70, 77, 81, 83, 
	124, 9, 13, 10, 108, 10, 108, 10, 
	111, 10, 114, 10, 97, 10, 97, 10, 
	116, 10, 97, 101, 105, 111, 10, 117, 
	10, 110, 10, 122, 10, 105, 10, 111, 
	10, 110, 10, 97, 10, 108, 10, 105, 
	10, 116, -61, 10, -96, 10, 10, 58, 
	10, 117, 10, 97, 10, 110, 10, 100, 
	10, 111, 10, 99, 10, 101, 104, 10, 
	110, 10, 97, 10, 114, 10, 105, 10, 
	111, 10, 101, 10, 109, 10, 97, 10, 
	32, 10, 100, 10, 101, 10, 108, 10, 
	108, 10, 111, 10, 32, 10, 115, 10, 
	99, 10, 101, 187, 191, 0
];

var _lexer_single_lengths = [
	0, 17, 16, 1, 1, 2, 2, 3, 
	3, 3, 3, 2, 2, 2, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 2, 2, 
	3, 5, 3, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 13, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 16, 1, 1, 4, 2, 1, 
	1, 1, 1, 1, 1, 1, 5, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 9, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 3, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 1, 1, 
	1, 1, 1, 1, 2, 1, 1, 1, 
	1, 1, 1, 1, 1, 14, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 5, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 3, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 13, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 5, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	4, 3, 2, 4, 16, 2, 2, 2, 
	2, 2, 2, 2, 5, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	3, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 1, 1, 0
];

var _lexer_range_lengths = [
	0, 1, 1, 0, 0, 0, 0, 1, 
	1, 1, 1, 1, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 1, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	1, 0, 0, 1, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0
];

var _lexer_index_offsets = [
	0, 0, 19, 37, 39, 41, 44, 47, 
	52, 57, 62, 67, 71, 75, 78, 80, 
	82, 84, 86, 88, 90, 92, 94, 96, 
	98, 100, 102, 104, 106, 108, 110, 113, 
	116, 121, 128, 133, 135, 137, 139, 141, 
	143, 145, 147, 149, 151, 153, 155, 157, 
	159, 161, 163, 178, 181, 184, 187, 190, 
	193, 196, 199, 202, 205, 208, 211, 214, 
	217, 220, 223, 241, 243, 245, 250, 253, 
	255, 257, 259, 261, 263, 265, 267, 274, 
	277, 280, 283, 286, 289, 292, 295, 298, 
	301, 304, 307, 310, 313, 315, 317, 319, 
	321, 323, 325, 327, 329, 331, 333, 335, 
	337, 339, 341, 343, 354, 357, 360, 363, 
	366, 369, 372, 375, 378, 381, 384, 387, 
	390, 393, 396, 399, 402, 405, 408, 411, 
	414, 417, 420, 423, 426, 429, 432, 435, 
	438, 441, 444, 447, 450, 453, 456, 459, 
	462, 465, 468, 471, 474, 478, 481, 484, 
	487, 490, 493, 496, 499, 502, 505, 508, 
	511, 514, 517, 520, 523, 526, 529, 531, 
	533, 535, 537, 539, 541, 544, 546, 548, 
	550, 552, 554, 556, 558, 560, 576, 579, 
	582, 585, 588, 591, 594, 597, 600, 603, 
	606, 609, 612, 615, 618, 621, 624, 627, 
	630, 633, 636, 639, 642, 645, 648, 651, 
	654, 657, 660, 663, 666, 672, 675, 678, 
	681, 684, 687, 690, 693, 696, 699, 702, 
	705, 708, 711, 714, 717, 720, 723, 726, 
	730, 733, 736, 739, 742, 745, 748, 751, 
	754, 757, 760, 763, 766, 769, 772, 775, 
	778, 781, 783, 785, 787, 789, 791, 793, 
	795, 797, 799, 801, 803, 805, 807, 809, 
	811, 813, 815, 817, 819, 821, 823, 838, 
	841, 844, 847, 850, 853, 856, 859, 862, 
	865, 868, 871, 874, 877, 880, 883, 886, 
	889, 892, 895, 898, 901, 904, 910, 913, 
	916, 919, 922, 925, 928, 931, 934, 937, 
	940, 943, 946, 949, 952, 955, 958, 961, 
	964, 967, 970, 973, 976, 979, 982, 985, 
	989, 995, 999, 1002, 1008, 1026, 1029, 1032, 
	1035, 1038, 1041, 1044, 1047, 1053, 1056, 1059, 
	1062, 1065, 1068, 1071, 1074, 1077, 1080, 1083, 
	1086, 1089, 1092, 1095, 1098, 1101, 1104, 1107, 
	1110, 1114, 1117, 1120, 1123, 1126, 1129, 1132, 
	1135, 1138, 1141, 1144, 1147, 1150, 1153, 1156, 
	1159, 1162, 1165, 1168, 1170, 1172
];

var _lexer_indicies = [
	2, 1, 3, 4, 5, 6, 7, 8, 
	9, 10, 11, 12, 13, 14, 15, 16, 
	17, 1, 0, 2, 1, 3, 4, 5, 
	6, 7, 8, 9, 10, 11, 12, 13, 
	14, 15, 16, 1, 0, 18, 0, 19, 
	0, 21, 22, 20, 24, 25, 23, 28, 
	27, 29, 27, 26, 32, 31, 33, 31, 
	30, 32, 31, 34, 31, 30, 32, 31, 
	35, 31, 30, 37, 36, 36, 0, 2, 
	38, 38, 0, 40, 41, 39, 2, 0, 
	42, 0, 43, 0, 44, 0, 45, 0, 
	46, 0, 47, 0, 48, 0, 49, 0, 
	50, 0, 51, 0, 52, 0, 53, 0, 
	54, 0, 55, 0, 56, 0, 58, 59, 
	57, 61, 62, 60, 0, 0, 0, 0, 
	63, 64, 65, 64, 64, 67, 66, 63, 
	2, 68, 7, 68, 0, 69, 0, 70, 
	0, 71, 0, 72, 0, 73, 0, 74, 
	0, 75, 0, 76, 0, 77, 0, 78, 
	0, 79, 0, 80, 0, 81, 0, 83, 
	82, 85, 84, 85, 86, 87, 88, 89, 
	87, 90, 91, 89, 92, 93, 94, 95, 
	86, 84, 85, 96, 84, 85, 97, 84, 
	85, 98, 84, 85, 99, 84, 85, 100, 
	84, 85, 101, 84, 85, 102, 84, 85, 
	103, 84, 85, 104, 84, 85, 105, 84, 
	85, 106, 84, 85, 107, 84, 85, 108, 
	84, 85, 109, 84, 85, 110, 84, 112, 
	111, 113, 114, 115, 116, 117, 118, 119, 
	120, 121, 122, 123, 124, 125, 126, 111, 
	0, 127, 0, 128, 0, 73, 73, 73, 
	73, 0, 56, 129, 0, 130, 0, 131, 
	0, 132, 0, 133, 0, 134, 0, 136, 
	135, 138, 137, 138, 139, 140, 141, 140, 
	139, 137, 138, 142, 137, 138, 143, 137, 
	138, 144, 137, 138, 145, 137, 138, 146, 
	137, 138, 147, 137, 138, 148, 137, 138, 
	149, 137, 138, 150, 137, 138, 151, 137, 
	152, 138, 137, 153, 138, 137, 138, 154, 
	137, 155, 0, 156, 0, 157, 0, 158, 
	0, 159, 0, 160, 0, 161, 0, 162, 
	0, 163, 0, 164, 0, 165, 0, 166, 
	0, 167, 0, 169, 168, 171, 170, 171, 
	172, 173, 174, 173, 175, 176, 177, 178, 
	172, 170, 171, 179, 170, 171, 180, 170, 
	171, 181, 170, 171, 182, 170, 171, 183, 
	170, 171, 184, 170, 171, 185, 170, 171, 
	186, 170, 171, 187, 170, 171, 188, 170, 
	171, 189, 170, 171, 190, 170, 171, 191, 
	170, 171, 192, 170, 171, 193, 170, 171, 
	194, 170, 171, 195, 170, 171, 196, 170, 
	171, 197, 170, 171, 198, 170, 171, 199, 
	170, 171, 200, 170, 171, 201, 170, 171, 
	202, 170, 171, 203, 170, 171, 204, 170, 
	171, 199, 170, 171, 205, 170, 171, 206, 
	170, 171, 207, 170, 171, 208, 170, 171, 
	209, 170, 171, 210, 170, 171, 211, 170, 
	171, 212, 170, 171, 213, 170, 171, 214, 
	170, 215, 171, 170, 199, 171, 170, 171, 
	216, 170, 171, 217, 218, 170, 171, 219, 
	170, 171, 220, 170, 171, 221, 170, 171, 
	198, 170, 171, 222, 170, 171, 223, 170, 
	171, 224, 170, 171, 225, 170, 171, 226, 
	170, 171, 227, 170, 171, 228, 170, 171, 
	229, 170, 171, 230, 170, 171, 231, 170, 
	171, 232, 170, 171, 233, 170, 171, 217, 
	170, 234, 0, 235, 0, 236, 0, 237, 
	0, 73, 0, 238, 0, 239, 240, 0, 
	241, 0, 242, 0, 243, 0, 244, 0, 
	245, 0, 246, 0, 248, 247, 250, 249, 
	250, 251, 252, 253, 254, 252, 255, 256, 
	257, 254, 258, 259, 260, 261, 251, 249, 
	250, 262, 249, 250, 263, 249, 250, 264, 
	249, 250, 265, 249, 250, 266, 249, 250, 
	267, 249, 250, 268, 249, 250, 269, 249, 
	250, 270, 249, 250, 271, 249, 250, 272, 
	249, 250, 273, 249, 250, 274, 249, 250, 
	275, 249, 250, 276, 249, 250, 277, 249, 
	250, 278, 249, 250, 279, 249, 250, 280, 
	249, 250, 281, 249, 250, 282, 249, 250, 
	283, 249, 250, 284, 249, 250, 285, 249, 
	250, 286, 249, 250, 287, 249, 250, 288, 
	249, 250, 276, 249, 250, 289, 249, 250, 
	290, 249, 250, 281, 281, 281, 281, 249, 
	250, 291, 249, 250, 292, 249, 250, 293, 
	249, 250, 294, 249, 250, 295, 249, 250, 
	296, 249, 250, 297, 249, 250, 298, 249, 
	250, 299, 249, 250, 300, 249, 301, 250, 
	249, 288, 250, 249, 250, 302, 249, 250, 
	303, 249, 250, 304, 249, 250, 305, 249, 
	250, 281, 249, 250, 306, 249, 250, 307, 
	308, 249, 250, 309, 249, 250, 310, 249, 
	250, 311, 249, 250, 287, 249, 250, 312, 
	249, 250, 313, 249, 250, 314, 249, 250, 
	315, 249, 250, 316, 249, 250, 317, 249, 
	250, 318, 249, 250, 319, 249, 250, 320, 
	249, 250, 321, 249, 250, 322, 249, 250, 
	323, 249, 250, 307, 249, 324, 0, 325, 
	0, 326, 0, 327, 0, 328, 0, 329, 
	0, 330, 0, 331, 0, 332, 0, 333, 
	0, 334, 0, 335, 0, 336, 0, 337, 
	0, 338, 0, 339, 0, 340, 0, 341, 
	0, 342, 0, 344, 343, 346, 345, 346, 
	347, 348, 349, 350, 348, 351, 352, 350, 
	353, 354, 355, 356, 347, 345, 346, 357, 
	345, 346, 358, 345, 346, 359, 345, 346, 
	360, 345, 346, 361, 345, 346, 362, 345, 
	346, 363, 345, 346, 364, 345, 346, 365, 
	345, 346, 366, 345, 346, 367, 345, 346, 
	368, 345, 346, 369, 345, 346, 370, 345, 
	346, 371, 345, 346, 372, 345, 346, 373, 
	345, 346, 374, 345, 346, 375, 345, 346, 
	376, 345, 346, 377, 345, 346, 378, 345, 
	346, 376, 376, 376, 376, 345, 346, 379, 
	345, 346, 380, 345, 346, 381, 345, 346, 
	382, 345, 346, 383, 345, 346, 384, 345, 
	346, 385, 345, 346, 386, 345, 346, 387, 
	345, 346, 388, 345, 389, 346, 345, 390, 
	346, 345, 346, 371, 345, 346, 391, 345, 
	346, 392, 345, 346, 393, 345, 346, 394, 
	345, 346, 376, 345, 346, 395, 345, 346, 
	396, 345, 346, 397, 345, 346, 398, 345, 
	346, 399, 345, 346, 400, 345, 346, 390, 
	345, 401, 402, 401, 0, 405, 404, 406, 
	407, 404, 403, 0, 409, 410, 408, 0, 
	409, 408, 405, 411, 409, 410, 411, 408, 
	405, 412, 413, 414, 415, 416, 417, 418, 
	419, 420, 421, 422, 423, 424, 425, 426, 
	412, 0, 85, 427, 84, 85, 428, 84, 
	85, 429, 84, 85, 430, 84, 85, 431, 
	84, 85, 432, 84, 85, 433, 84, 85, 
	431, 431, 431, 431, 84, 85, 434, 84, 
	85, 435, 84, 85, 436, 84, 85, 437, 
	84, 85, 438, 84, 85, 439, 84, 85, 
	440, 84, 85, 441, 84, 85, 442, 84, 
	85, 443, 84, 444, 85, 84, 445, 85, 
	84, 85, 110, 84, 85, 446, 84, 85, 
	447, 84, 85, 448, 84, 85, 449, 84, 
	85, 431, 84, 85, 450, 84, 85, 451, 
	452, 84, 85, 453, 84, 85, 454, 84, 
	85, 455, 84, 85, 456, 84, 85, 445, 
	84, 85, 457, 84, 85, 458, 84, 85, 
	459, 84, 85, 460, 84, 85, 461, 84, 
	85, 462, 84, 85, 463, 84, 85, 464, 
	84, 85, 465, 84, 85, 466, 84, 85, 
	467, 84, 85, 468, 84, 85, 451, 84, 
	469, 0, 1, 0, 470, 0
];

var _lexer_trans_targs = [
	0, 2, 2, 3, 13, 15, 29, 32, 
	35, 40, 67, 70, 92, 39, 166, 171, 
	319, 371, 4, 5, 6, 7, 6, 6, 
	7, 6, 8, 8, 8, 9, 8, 8, 
	8, 9, 10, 11, 12, 2, 12, 13, 
	2, 14, 16, 17, 18, 19, 20, 21, 
	22, 23, 24, 25, 26, 27, 28, 373, 
	30, 31, 2, 14, 31, 2, 14, 33, 
	34, 2, 33, 32, 34, 36, 37, 38, 
	39, 29, 41, 42, 43, 44, 45, 46, 
	47, 48, 49, 50, 49, 50, 50, 2, 
	51, 65, 325, 330, 333, 329, 346, 351, 
	52, 53, 54, 55, 56, 57, 58, 59, 
	60, 61, 62, 63, 64, 2, 66, 2, 
	2, 3, 13, 15, 29, 32, 35, 40, 
	67, 70, 92, 39, 166, 171, 319, 68, 
	69, 71, 72, 73, 74, 75, 76, 77, 
	78, 77, 78, 78, 2, 79, 80, 81, 
	82, 83, 84, 85, 86, 87, 88, 89, 
	90, 91, 66, 93, 94, 95, 96, 97, 
	98, 99, 100, 101, 102, 103, 104, 105, 
	106, 107, 106, 107, 107, 2, 108, 122, 
	130, 135, 147, 109, 110, 111, 112, 113, 
	114, 115, 116, 117, 118, 119, 120, 121, 
	2, 123, 124, 125, 126, 127, 128, 129, 
	66, 131, 132, 133, 134, 136, 137, 138, 
	139, 140, 141, 142, 143, 144, 145, 146, 
	148, 149, 153, 150, 151, 152, 154, 155, 
	156, 157, 158, 159, 160, 161, 162, 163, 
	164, 165, 167, 168, 169, 170, 172, 173, 
	249, 174, 175, 176, 177, 178, 179, 180, 
	181, 180, 181, 181, 2, 182, 196, 197, 
	202, 210, 213, 201, 225, 230, 183, 184, 
	185, 186, 187, 188, 189, 190, 191, 192, 
	193, 194, 195, 2, 66, 198, 199, 200, 
	201, 196, 203, 204, 205, 206, 207, 208, 
	209, 211, 212, 214, 215, 216, 217, 218, 
	219, 220, 221, 222, 223, 224, 226, 227, 
	228, 229, 231, 232, 236, 233, 234, 235, 
	237, 238, 239, 240, 241, 242, 243, 244, 
	245, 246, 247, 248, 250, 251, 252, 253, 
	254, 255, 256, 257, 258, 259, 260, 261, 
	262, 263, 264, 265, 266, 267, 268, 269, 
	270, 269, 270, 270, 2, 271, 285, 286, 
	291, 294, 290, 307, 312, 272, 273, 274, 
	275, 276, 277, 278, 279, 280, 281, 282, 
	283, 284, 2, 66, 287, 288, 289, 290, 
	285, 292, 293, 295, 296, 297, 298, 299, 
	300, 301, 302, 303, 304, 305, 306, 308, 
	309, 310, 311, 313, 314, 315, 316, 317, 
	318, 319, 320, 321, 323, 324, 322, 320, 
	321, 322, 320, 323, 324, 3, 13, 15, 
	29, 32, 35, 40, 67, 70, 92, 39, 
	166, 171, 319, 326, 327, 328, 329, 65, 
	331, 332, 334, 335, 336, 337, 338, 339, 
	340, 341, 342, 343, 344, 345, 347, 348, 
	349, 350, 352, 353, 358, 354, 355, 356, 
	357, 359, 360, 361, 362, 363, 364, 365, 
	366, 367, 368, 369, 370, 372, 0
];

var _lexer_trans_actions = [
	43, 0, 54, 3, 1, 0, 29, 1, 
	29, 29, 29, 29, 29, 29, 29, 29, 
	35, 0, 0, 0, 7, 139, 48, 0, 
	102, 9, 5, 45, 134, 45, 0, 33, 
	122, 33, 33, 0, 11, 106, 0, 0, 
	114, 25, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 57, 149, 126, 0, 110, 23, 0, 
	27, 118, 27, 51, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 57, 144, 0, 54, 0, 72, 
	33, 84, 84, 84, 84, 84, 84, 84, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 15, 15, 31, 
	130, 60, 57, 31, 63, 57, 63, 63, 
	63, 63, 63, 63, 63, 63, 66, 0, 
	0, 0, 0, 0, 0, 0, 0, 57, 
	144, 0, 54, 0, 81, 84, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 21, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	57, 144, 0, 54, 0, 69, 33, 84, 
	84, 84, 84, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	13, 0, 0, 0, 0, 0, 0, 0, 
	13, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 57, 
	144, 0, 54, 0, 75, 33, 84, 84, 
	84, 84, 84, 84, 84, 84, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 17, 17, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 57, 
	144, 0, 54, 0, 78, 33, 84, 84, 
	84, 84, 84, 84, 84, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 19, 19, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 37, 37, 54, 37, 87, 
	0, 0, 39, 0, 0, 93, 90, 41, 
	96, 90, 96, 96, 96, 96, 96, 96, 
	96, 96, 99, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0
];

var _lexer_eof_actions = [
	0, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43
];

var lexer_start = 1;
var lexer_first_final = 373;
var lexer_error = 0;

var lexer_en_main = 1;


/* line 129 "ragel/i18n/it.js.rl" */

/* line 130 "ragel/i18n/it.js.rl" */

/* line 131 "ragel/i18n/it.js.rl" */

/* line 132 "ragel/i18n/it.js.rl" */

var Lexer = function(listener) {
  // Check that listener has the required functions
  var events = ['comment', 'tag', 'feature', 'background', 'scenario', 'scenario_outline', 'examples', 'step', 'doc_string', 'row', 'eof'];
  for(var i=0, len=events.length; i<len; i++) {
    var event = events[i];
    if(typeof listener[event] != 'function') {
      throw new Error("Error. No " + event + " function exists on " + JSON.stringify(listener));
    }
  }
  this.listener = listener;
};

Lexer.prototype.scan = function(data) {
  var ending = "\n%_FEATURE_END_%";
  if(typeof data == 'string') {
    data = this.stringToBytes(data + ending);
  } else if(typeof Buffer != 'undefined' && Buffer.isBuffer(data)) {
    // Node.js
    var buf = new Buffer(data.length + ending.length);
    data.copy(buf, 0, 0);
    new Buffer(ending).copy(buf, data.length, 0);
    data = buf;
  }
  var eof = pe = data.length;
  var p = 0;

  this.line_number = 1;
  this.last_newline = 0;
  var signedCharValue=function(v){return v > 127 ? v-256 : v; };

  
/* line 711 "js/lib/gherkin/lexer/it.js" */
{
	  this.cs = lexer_start;
} /* JSCodeGen::writeInit */

/* line 164 "ragel/i18n/it.js.rl" */
  
/* line 718 "js/lib/gherkin/lexer/it.js" */
{
	var _klen, _trans, _keys, _ps, _widec, _acts, _nacts;
	var _goto_level, _resume, _eof_trans, _again, _test_eof;
	var _out;
	_klen = _trans = _keys = _acts = _nacts = null;
	_goto_level = 0;
	_resume = 10;
	_eof_trans = 15;
	_again = 20;
	_test_eof = 30;
	_out = 40;
	while (true) {
	_trigger_goto = false;
	if (_goto_level <= 0) {
	if (p == pe) {
		_goto_level = _test_eof;
		continue;
	}
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	}
	if (_goto_level <= _resume) {
	_keys = _lexer_key_offsets[ this.cs];
	_trans = _lexer_index_offsets[ this.cs];
	_klen = _lexer_single_lengths[ this.cs];
	_break_match = false;
	
	do {
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + _klen - 1;

	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + ( (_upper - _lower) >> 1 );

	        if (( signedCharValue(data[p])) < _lexer_trans_keys[_mid]) {
	           _upper = _mid - 1;
	        } else if (( signedCharValue(data[p])) > _lexer_trans_keys[_mid]) {
	           _lower = _mid + 1;
	        } else {
	           _trans += (_mid - _keys);
	           _break_match = true;
	           break;
	        };
	     } /* while */
	     if (_break_match) { break; }
	     _keys += _klen;
	     _trans += _klen;
	  }
	  _klen = _lexer_range_lengths[ this.cs];
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + (_klen << 1) - 2;
	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + (((_upper-_lower) >> 1) & ~1);
	        if (( signedCharValue(data[p])) < _lexer_trans_keys[_mid]) {
	          _upper = _mid - 2;
	         } else if (( signedCharValue(data[p])) > _lexer_trans_keys[_mid+1]) {
	          _lower = _mid + 2;
	        } else {
	          _trans += ((_mid - _keys) >> 1);
	          _break_match = true;
	          break;
	        }
	     } /* while */
	     if (_break_match) { break; }
	     _trans += _klen
	  }
	} while (false);
	_trans = _lexer_indicies[_trans];
	 this.cs = _lexer_trans_targs[_trans];
	if (_lexer_trans_actions[_trans] != 0) {
		_acts = _lexer_trans_actions[_trans];
		_nacts = _lexer_actions[_acts];
		_acts += 1;
		while (_nacts > 0) {
			_nacts -= 1;
			_acts += 1;
			switch (_lexer_actions[_acts - 1]) {
case 0:
/* line 6 "ragel/i18n/it.js.rl" */

    this.content_start = p;
    this.current_line = this.line_number;
    this.start_col = p - this.last_newline - (this.keyword+':').length;
  		break;
case 1:
/* line 12 "ragel/i18n/it.js.rl" */

    this.current_line = this.line_number;
    this.start_col = p - this.last_newline;
  		break;
case 2:
/* line 17 "ragel/i18n/it.js.rl" */

    this.content_start = p;
  		break;
case 3:
/* line 21 "ragel/i18n/it.js.rl" */

    this.docstring_content_type_start = p;
  		break;
case 4:
/* line 25 "ragel/i18n/it.js.rl" */

    this.docstring_content_type_end = p;
  		break;
case 5:
/* line 29 "ragel/i18n/it.js.rl" */

    var con = this.unindent(
      this.start_col, 
      this.bytesToString(data.slice(this.content_start, this.next_keyword_start-1)).replace(/(\r?\n)?([\t ])*$/, '').replace(/\\\"\\\"\\\"/mg, '"""')
    );
    var con_type = this.bytesToString(data.slice(this.docstring_content_type_start, this.docstring_content_type_end)).trim();
    this.listener.doc_string(con_type, con, this.current_line); 
  		break;
case 6:
/* line 38 "ragel/i18n/it.js.rl" */

    p = this.store_keyword_content('feature', data, p, eof);
  		break;
case 7:
/* line 42 "ragel/i18n/it.js.rl" */

    p = this.store_keyword_content('background', data, p, eof);
  		break;
case 8:
/* line 46 "ragel/i18n/it.js.rl" */

    p = this.store_keyword_content('scenario', data, p, eof);
  		break;
case 9:
/* line 50 "ragel/i18n/it.js.rl" */

    p = this.store_keyword_content('scenario_outline', data, p, eof);
  		break;
case 10:
/* line 54 "ragel/i18n/it.js.rl" */

    p = this.store_keyword_content('examples', data, p, eof);
  		break;
case 11:
/* line 58 "ragel/i18n/it.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.step(this.keyword, con, this.current_line);
  		break;
case 12:
/* line 63 "ragel/i18n/it.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.comment(con, this.line_number);
    this.keyword_start = null;
  		break;
case 13:
/* line 69 "ragel/i18n/it.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.tag(con, this.line_number);
    this.keyword_start = null;
  		break;
case 14:
/* line 75 "ragel/i18n/it.js.rl" */

    this.line_number++;
  		break;
case 15:
/* line 79 "ragel/i18n/it.js.rl" */

    this.last_newline = p + 1;
  		break;
case 16:
/* line 83 "ragel/i18n/it.js.rl" */

    this.keyword_start = this.keyword_start || p;
  		break;
case 17:
/* line 87 "ragel/i18n/it.js.rl" */

    this.keyword = this.bytesToString(data.slice(this.keyword_start, p)).replace(/:$/, '');
    this.keyword_start = null;
  		break;
case 18:
/* line 92 "ragel/i18n/it.js.rl" */

    this.next_keyword_start = p;
  		break;
case 19:
/* line 96 "ragel/i18n/it.js.rl" */

    p = p - 1;
    current_row = [];
    this.current_line = this.line_number;
  		break;
case 20:
/* line 102 "ragel/i18n/it.js.rl" */

    this.content_start = p;
  		break;
case 21:
/* line 106 "ragel/i18n/it.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    current_row.push(con.replace(/\\\|/, "|").replace(/\\n/, "\n").replace(/\\\\/, "\\"));
  		break;
case 22:
/* line 111 "ragel/i18n/it.js.rl" */

    this.listener.row(current_row, this.current_line);
  		break;
case 23:
/* line 115 "ragel/i18n/it.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw new Error("Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.");
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 945 "js/lib/gherkin/lexer/it.js" */
			} /* action switch */
		}
	}
	if (_trigger_goto) {
		continue;
	}
	}
	if (_goto_level <= _again) {
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	p += 1;
	if (p != pe) {
		_goto_level = _resume;
		continue;
	}
	}
	if (_goto_level <= _test_eof) {
	if (p == eof) {
	__acts = _lexer_eof_actions[ this.cs];
	__nacts =  _lexer_actions[__acts];
	__acts += 1;
	while (__nacts > 0) {
		__nacts -= 1;
		__acts += 1;
		switch (_lexer_actions[__acts - 1]) {
case 23:
/* line 115 "ragel/i18n/it.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw new Error("Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.");
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 984 "js/lib/gherkin/lexer/it.js" */
		} /* eof action switch */
	}
	if (_trigger_goto) {
		continue;
	}
}
	}
	if (_goto_level <= _out) {
		break;
	}
	}
	}

/* line 165 "ragel/i18n/it.js.rl" */
};


/*
 * Decode utf-8 byte sequence to string.
 */
var decodeUtf8 = function(bytes) {
  var result = "";
  var i = 0;
  var wc;
  var c;

  while (i < bytes.length) {
    /* parse as UTF-8 lead byte */
    wc = bytes[i++];
    if (wc < 0x80) {
      count = 0;
    } else if (wc < 0xC2 || wc >= 0xF8) {
      throw new Error("input is not a valid UTF-8 lead octet");
    } else if (wc < 0xE0) {
      count = 1;
      wc = (wc & 0x1F) << 6;
    } else if (wc < 0xF0) {
      count = 2;
      wc = (wc & 0x0F) << 12;
    } else /* wc < 0xF8 */ {
      count = 3;
      wc = (wc & 0x07) << 18;
    }

    /* parse trail bytes, if any */
    while (count) {
      if (!(i < bytes.length)) {
        throw new Error("short read");
      }
      if ((c = bytes[i++] ^ 0x80) > 0x3F) {
        throw new Error("input is not a valid UTF-8 trail octet");
      }
      wc |= c << (6 * --count);
      if (wc < (1 << (5 * count + 6))) {
        throw new Error("invalid non-minimal encoded input");
      }
    }

    /* handle conversion to UTF-16 if needed */
    if (wc > 0xFFFF) {
      wc -= 0x10000;
      result += String.fromCharCode(0xD800 + (wc >> 10));
      wc = 0xDC00 + (wc & 0x3FF);
    }
    result += String.fromCharCode(wc);
  }

  return result;
};

/*
 * Encode string to an array of bytes using utf8 encoding.
 *
 * Javascript internally stores character data as utf16 (like java).
 * String.charCodeAt() does *not* produce unicode points, but simply
 * reflects this internal representation. Thus, it is necessary
 * to first decode the utf-16 representation before encoding to
 * utf-8.
 */
var encodeUtf8 = function(string) {
  var bytes = [];
  var i = 0;
  var j = 0;
  var wc;

  while (i < string.length) {
    wc = string.charCodeAt(i++);
    if (wc >= 0xD800 && wc <= 0xDBFF && i < string.length && string.charCodeAt(i) >= 0xDC00 && string.charCodeAt(i) <= 0xDFFF) {
      /* decode UTF-16 */
      wc = 0x10000 + ((wc & 0x3FF) << 10) + (string.charCodeAt(i++) & 0x3FF);
    }

    /* emit lead byte */
    if (wc < 0x80) {
      bytes[j++] = wc;
      count = 0;
    } else if (wc < 0x800) {
      bytes[j++] = 0xC0 | (wc >> 6);
      count = 1;
    } else if (wc < 0x10000) {
      bytes[j++] = 0xE0 | (wc >> 12);
      count = 2;
    } else {
      /* SMP: 21-bit Unicode */
      bytes[j++] = 0xF0 | (wc >> 18);
      count = 3;
    }

    /* emit trail bytes, if any */
    while (count) {
      bytes[j++] = 0x80 | ((wc >> (6 * --count)) & 0x3F);
    }
  }

  return bytes;

};

Lexer.prototype.bytesToString = function(bytes) {
  if(typeof bytes.write == 'function') {
    // Node.js
    return bytes.toString('utf-8');
  }
  return decodeUtf8(bytes);
};

Lexer.prototype.stringToBytes = function(string) {
  return encodeUtf8(string);
};

Lexer.prototype.unindent = function(startcol, text) {
  startcol = startcol || 0;
  return text.replace(new RegExp('^[\t ]{0,' + startcol + '}', 'gm'), ''); 
};

Lexer.prototype.store_keyword_content = function(event, data, p, eof) {
  var end_point = (!this.next_keyword_start || (p == eof)) ? p : this.next_keyword_start;
  var content = this.unindent(this.start_col + 2, this.bytesToString(data.slice(this.content_start, end_point))).replace(/\s+$/,"");
  var content_lines = content.split("\n")
  var name = content_lines.shift() || "";
  name = name.trim();
  var description = content_lines.join("\n");
  this.listener[event](this.keyword, name, description, this.current_line);
  var nks = this.next_keyword_start;
  this.next_keyword_start = null;
  return nks ? nks - 1 : p;
};

Lexer.prototype.current_line_content = function(data, p) {
  var rest = Array.prototype.slice.call(data,this.last_newline, -1);
  var end = rest.indexOf(10) || -1;
  return this.bytesToString(rest.slice(0, end)).trim();
};

// Node.js export
if(typeof module !== 'undefined') {
  module.exports = Lexer;
}
// Require.js export
if (typeof define !== 'undefined') {
  if(define.amd) {
    define('gherkin/lexer/it', [], function() {
      return Lexer;
    });
  } else {
    define('gherkin/lexer/it', function(require, exports, module) {
      exports.Lexer = Lexer;
    });
  }
}

})();

}).call(this,require("buffer").Buffer)

},{"buffer":69}],215:[function(require,module,exports){
(function (Buffer){

/* line 1 "ragel/i18n/ja.js.rl" */
;(function() {


/* line 126 "ragel/i18n/ja.js.rl" */



/* line 11 "js/lib/gherkin/lexer/ja.js" */
var _lexer_actions = [
	0, 1, 0, 1, 1, 1, 2, 1, 
	3, 1, 4, 1, 5, 1, 6, 1, 
	7, 1, 8, 1, 9, 1, 10, 1, 
	11, 1, 12, 1, 13, 1, 16, 1, 
	17, 1, 18, 1, 19, 1, 20, 1, 
	21, 1, 22, 1, 23, 2, 2, 18, 
	2, 3, 4, 2, 13, 0, 2, 14, 
	15, 2, 17, 0, 2, 17, 1, 2, 
	17, 16, 2, 17, 19, 2, 18, 6, 
	2, 18, 7, 2, 18, 8, 2, 18, 
	9, 2, 18, 10, 2, 18, 16, 2, 
	20, 21, 2, 22, 0, 2, 22, 1, 
	2, 22, 16, 2, 22, 19, 3, 4, 
	14, 15, 3, 5, 14, 15, 3, 11, 
	14, 15, 3, 12, 14, 15, 3, 13, 
	14, 15, 3, 14, 15, 18, 3, 17, 
	0, 11, 3, 17, 14, 15, 4, 2, 
	14, 15, 18, 4, 3, 4, 14, 15, 
	4, 17, 0, 14, 15, 5, 17, 0, 
	11, 14, 15
];

var _lexer_key_offsets = [
	0, 0, 16, 19, 23, 24, 25, 26, 
	28, 30, 45, 47, 48, 49, 50, 51, 
	52, 53, 54, 55, 63, 65, 67, 69, 
	71, 73, 75, 77, 79, 81, 83, 85, 
	87, 89, 91, 93, 108, 109, 110, 111, 
	112, 113, 114, 115, 116, 117, 118, 119, 
	120, 121, 132, 135, 138, 140, 142, 144, 
	146, 148, 150, 152, 154, 156, 158, 160, 
	162, 164, 166, 168, 170, 172, 174, 176, 
	179, 182, 184, 186, 188, 190, 192, 194, 
	196, 198, 200, 202, 204, 206, 208, 210, 
	212, 214, 216, 218, 220, 222, 224, 226, 
	228, 230, 232, 234, 237, 239, 241, 243, 
	245, 247, 250, 252, 254, 256, 258, 260, 
	262, 264, 266, 268, 270, 272, 274, 276, 
	278, 280, 282, 284, 286, 288, 290, 292, 
	294, 296, 298, 300, 302, 304, 306, 308, 
	310, 312, 314, 316, 318, 320, 322, 324, 
	326, 328, 330, 332, 334, 336, 338, 340, 
	342, 344, 345, 346, 347, 348, 349, 350, 
	351, 352, 364, 368, 373, 375, 377, 379, 
	381, 383, 385, 387, 389, 391, 393, 395, 
	397, 399, 401, 403, 405, 407, 409, 412, 
	414, 416, 418, 420, 422, 424, 426, 428, 
	430, 433, 436, 438, 440, 442, 444, 446, 
	448, 450, 452, 454, 456, 458, 460, 462, 
	464, 466, 468, 470, 472, 474, 476, 478, 
	480, 482, 484, 486, 488, 490, 493, 495, 
	497, 499, 501, 503, 506, 508, 510, 512, 
	514, 516, 518, 520, 522, 524, 526, 528, 
	530, 532, 534, 536, 538, 540, 542, 544, 
	546, 548, 550, 552, 554, 556, 558, 560, 
	562, 564, 566, 568, 570, 572, 574, 576, 
	578, 580, 582, 584, 586, 588, 590, 592, 
	594, 596, 598, 600, 602, 603, 604, 606, 
	608, 613, 618, 623, 628, 632, 636, 638, 
	639, 640, 641, 642, 643, 644, 645, 646, 
	647, 648, 649, 650, 651, 652, 653, 654, 
	659, 666, 671, 675, 681, 684, 686, 692, 
	707, 709, 711, 713, 715, 717, 718, 719, 
	720, 721, 722, 723, 724, 725, 726, 727, 
	728, 729, 732, 733, 734, 735, 736, 737, 
	738, 739, 740, 741, 742, 743, 744, 745, 
	746, 747, 748, 749, 750, 752, 754, 755, 
	756, 757, 758, 759, 760, 761, 762, 763, 
	764, 765, 766, 767, 768, 769, 770, 771, 
	772, 773, 785, 789, 794, 796, 798, 800, 
	802, 804, 806, 808, 810, 812, 814, 816, 
	818, 820, 822, 824, 826, 828, 830, 833, 
	835, 837, 839, 841, 843, 845, 847, 849, 
	851, 853, 855, 857, 859, 861, 863, 865, 
	867, 869, 871, 873, 875, 877, 879, 881, 
	883, 885, 887, 889, 891, 893, 895, 897, 
	899, 901, 903, 905, 907, 909, 911, 913, 
	915, 917, 919, 921, 923, 925, 927, 929, 
	931, 933, 934, 935, 936, 937, 938, 939, 
	940, 941, 942, 943, 945, 946, 947, 948, 
	949, 950, 951, 952, 965, 969, 974, 976, 
	978, 980, 982, 984, 986, 988, 990, 992, 
	994, 996, 998, 1000, 1002, 1004, 1006, 1008, 
	1010, 1013, 1015, 1017, 1019, 1021, 1023, 1025, 
	1027, 1029, 1031, 1034, 1037, 1039, 1041, 1043, 
	1045, 1047, 1049, 1051, 1053, 1055, 1057, 1059, 
	1061, 1063, 1065, 1067, 1069, 1071, 1073, 1075, 
	1077, 1079, 1081, 1083, 1085, 1087, 1089, 1091, 
	1094, 1096, 1098, 1100, 1102, 1104, 1107, 1109, 
	1111, 1113, 1115, 1117, 1119, 1121, 1123, 1125, 
	1127, 1129, 1131, 1133, 1135, 1137, 1139, 1141, 
	1143, 1145, 1147, 1149, 1151, 1153, 1155, 1157, 
	1159, 1161, 1163, 1165, 1167, 1169, 1171, 1173, 
	1175, 1177, 1179, 1181, 1183, 1185, 1187, 1189, 
	1191, 1193, 1195, 1197, 1199, 1201, 1203, 1205, 
	1207, 1209, 1211, 1213, 1215, 1216, 1217, 1218, 
	1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 
	1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 
	1235, 1236, 1237, 1238
];

var _lexer_trans_keys = [
	-29, -28, -27, -26, -24, 10, 32, 34, 
	35, 37, 42, 64, 124, 239, 9, 13, 
	-127, -126, -125, -117, -105, -97, -86, -29, 
	-127, -92, 10, 13, 10, 13, -29, -28, 
	-27, -26, -24, 10, 32, 34, 35, 37, 
	42, 64, 124, 9, 13, -67, -66, -122, 
	-29, -127, -105, -117, 58, 10, 10, -29, 
	-26, 10, 32, 35, 124, 9, 13, -125, 
	10, -107, 10, -29, 10, -126, 10, -93, 
	10, -29, 10, -125, 10, -68, 10, -29, 
	10, -125, 10, -127, 10, -29, 10, -125, 
	10, -93, 10, 10, 58, -29, -28, -27, 
	-26, -24, 10, 32, 34, 35, 37, 42, 
	64, 124, 9, 13, -119, -115, -26, -113, 
	-112, -87, -97, -24, -125, -67, 58, 10, 
	10, -29, -28, -26, -24, 10, 32, 35, 
	37, 64, 9, 13, -126, -125, 10, -75, 
	-73, 10, -29, 10, -125, 10, -77, 10, 
	-29, 10, -125, 10, -105, 10, -29, 10, 
	-125, 10, -85, 10, 10, 58, -29, 10, 
	-125, 10, -118, 10, -29, 10, -125, 10, 
	-86, 10, -29, 10, -126, 10, -86, 10, 
	-29, 10, 58, -126, -125, 10, -94, 10, 
	-29, 10, -126, 10, -90, 10, -29, 10, 
	-125, 10, -120, 10, -29, 10, -125, 10, 
	-87, 10, -29, 10, -126, 10, -92, 10, 
	-29, 10, -125, 10, -77, 10, -122, 10, 
	-29, 10, -125, 10, -77, 10, -29, 10, 
	-125, 10, -105, 10, -29, 10, -125, 10, 
	-84, 10, -29, 10, 58, -125, 10, -68, 
	10, -29, 10, -125, 10, -120, 10, -122, 
	-107, 10, -29, 10, -125, 10, -77, 10, 
	-29, 10, -125, 10, -105, 10, -29, 10, 
	-125, 10, -84, 10, -29, 10, -126, 10, 
	-93, 10, -29, 10, -125, 10, -68, 10, 
	-29, 10, -125, 10, -127, 10, -29, 10, 
	-125, 10, -93, 10, -66, 10, -117, 10, 
	-87, 10, -97, 10, -24, 10, -125, 10, 
	-67, 10, -125, 10, -116, 10, -26, 10, 
	-103, 10, -81, 10, 10, 95, 10, 70, 
	10, 69, 10, 65, 10, 84, 10, 85, 
	10, 82, 10, 69, 10, 95, 10, 69, 
	10, 78, 10, 68, 10, 95, 10, 37, 
	-125, -116, -26, -103, -81, 58, 10, 10, 
	-29, -28, -27, -26, 10, 32, 35, 37, 
	42, 64, 9, 13, -127, -126, -125, 10, 
	-117, -105, -97, -86, 10, -29, 10, -127, 
	10, -92, 10, -29, 10, -127, 10, -117, 
	10, -29, 10, -127, 10, -105, 10, -29, 
	10, -127, 10, -96, 10, -29, 10, -126, 
	10, -119, 10, -29, 10, -127, 10, -80, 
	10, -126, -73, 10, -29, 10, -125, 10, 
	-118, 10, -29, 10, -125, 10, -86, 10, 
	-29, 10, -126, 10, -86, 10, -29, 10, 
	58, -126, -125, 10, -94, 10, -29, 10, 
	-126, 10, -90, 10, -29, 10, -125, 10, 
	-120, 10, -29, 10, -125, 10, -87, 10, 
	-29, 10, -126, 10, -92, 10, -29, 10, 
	-125, 10, -77, 10, 10, 58, -122, 10, 
	-29, 10, -125, 10, -77, 10, -29, 10, 
	-125, 10, -105, 10, -29, 10, -125, 10, 
	-84, 10, -29, 10, 58, -125, 10, -68, 
	10, -29, 10, -125, 10, -120, 10, -122, 
	-107, 10, -29, 10, -125, 10, -77, 10, 
	-29, 10, -125, 10, -105, 10, -29, 10, 
	-125, 10, -84, 10, -29, 10, -126, 10, 
	-93, 10, -29, 10, -125, 10, -68, 10, 
	-29, 10, -125, 10, -127, 10, -29, 10, 
	-125, 10, -93, 10, -67, 10, -122, 10, 
	-119, 10, -115, 10, -26, 10, -113, 10, 
	-112, 10, -87, 10, -97, 10, -24, 10, 
	-125, 10, -67, 10, 10, 95, 10, 70, 
	10, 69, 10, 65, 10, 84, 10, 85, 
	10, 82, 10, 69, 10, 95, 10, 69, 
	10, 78, 10, 68, 10, 95, 10, 37, 
	10, 32, 34, 34, 10, 13, 10, 13, 
	10, 32, 34, 9, 13, 10, 32, 34, 
	9, 13, 10, 32, 34, 9, 13, 10, 
	32, 34, 9, 13, 10, 32, 9, 13, 
	10, 32, 9, 13, 10, 13, 10, 95, 
	70, 69, 65, 84, 85, 82, 69, 95, 
	69, 78, 68, 95, 37, 32, 13, 32, 
	64, 9, 10, 9, 10, 13, 32, 64, 
	11, 12, 10, 32, 64, 9, 13, 32, 
	124, 9, 13, 10, 32, 92, 124, 9, 
	13, 10, 92, 124, 10, 92, 10, 32, 
	92, 124, 9, 13, -29, -28, -27, -26, 
	-24, 10, 32, 34, 35, 37, 42, 64, 
	124, 9, 13, -87, 10, -97, 10, -24, 
	10, -125, 10, -67, 10, -29, -127, -117, 
	-29, -127, -96, -29, -126, -119, -29, -127, 
	-80, -126, -75, -73, -29, -125, -77, -29, 
	-125, -105, -29, -125, -85, -29, -125, -118, 
	-29, -125, -86, -29, -126, -86, -29, 58, 
	-126, -125, -94, -29, -126, -90, -29, -125, 
	-120, -29, -125, -87, -29, -126, -92, -29, 
	-125, -77, 58, 10, 10, -29, -28, -27, 
	-26, 10, 32, 35, 37, 42, 64, 9, 
	13, -127, -126, -125, 10, -117, -105, -97, 
	-86, 10, -29, 10, -127, 10, -92, 10, 
	-29, 10, -127, 10, -117, 10, -29, 10, 
	-127, 10, -105, 10, -29, 10, -127, 10, 
	-96, 10, -29, 10, -126, 10, -119, 10, 
	-29, 10, -127, 10, -80, 10, -126, -73, 
	10, -29, 10, -125, 10, -118, 10, -29, 
	10, -125, 10, -86, 10, -29, 10, -126, 
	10, -86, 10, 10, 58, -107, 10, -29, 
	10, -126, 10, -93, 10, -29, 10, -125, 
	10, -68, 10, -29, 10, -125, 10, -127, 
	10, -29, 10, -125, 10, -93, 10, -67, 
	10, -122, 10, -119, 10, -115, 10, -26, 
	10, -113, 10, -112, 10, -87, 10, -97, 
	10, -24, 10, -125, 10, -67, 10, 10, 
	95, 10, 70, 10, 69, 10, 65, 10, 
	84, 10, 85, 10, 82, 10, 69, 10, 
	95, 10, 69, 10, 78, 10, 68, 10, 
	95, 10, 37, 10, 32, -122, -29, -125, 
	-77, -29, -125, -105, -29, -125, -84, -29, 
	58, -125, -68, -29, -125, -120, 10, 10, 
	-29, -28, -27, -26, -24, 10, 32, 35, 
	37, 42, 64, 9, 13, -127, -126, -125, 
	10, -117, -105, -97, -86, 10, -29, 10, 
	-127, 10, -92, 10, -29, 10, -127, 10, 
	-117, 10, -29, 10, -127, 10, -105, 10, 
	-29, 10, -127, 10, -96, 10, -29, 10, 
	-126, 10, -119, 10, -29, 10, -127, 10, 
	-80, 10, -126, -73, 10, -29, 10, -125, 
	10, -118, 10, -29, 10, -125, 10, -86, 
	10, -29, 10, -126, 10, -86, 10, -29, 
	10, 58, -126, -125, 10, -94, 10, -29, 
	10, -126, 10, -90, 10, -29, 10, -125, 
	10, -120, 10, -29, 10, -125, 10, -87, 
	10, -29, 10, -126, 10, -92, 10, -29, 
	10, -125, 10, -77, 10, 10, 58, -122, 
	10, -29, 10, -125, 10, -77, 10, -29, 
	10, -125, 10, -105, 10, -29, 10, -125, 
	10, -84, 10, -29, 10, 58, -125, 10, 
	-68, 10, -29, 10, -125, 10, -120, 10, 
	-122, -107, 10, -29, 10, -125, 10, -77, 
	10, -29, 10, -125, 10, -105, 10, -29, 
	10, -125, 10, -84, 10, -29, 10, -126, 
	10, -93, 10, -29, 10, -125, 10, -68, 
	10, -29, 10, -125, 10, -127, 10, -29, 
	10, -125, 10, -93, 10, -67, 10, -122, 
	10, -119, 10, -115, 10, -26, 10, -113, 
	10, -112, 10, -87, 10, -97, 10, -24, 
	10, -125, 10, -67, 10, -125, 10, -116, 
	10, -26, 10, -103, 10, -81, 10, 10, 
	95, 10, 70, 10, 69, 10, 65, 10, 
	84, 10, 85, 10, 82, 10, 69, 10, 
	95, 10, 69, 10, 78, 10, 68, 10, 
	95, 10, 37, 10, 32, -122, -107, -29, 
	-125, -77, -29, -125, -105, -29, -125, -84, 
	-29, -126, -93, -29, -125, -68, -29, -125, 
	-127, -29, -125, -93, 187, 191, 0
];

var _lexer_single_lengths = [
	0, 14, 3, 4, 1, 1, 1, 2, 
	2, 13, 2, 1, 1, 1, 1, 1, 
	1, 1, 1, 6, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 13, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 9, 3, 3, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 3, 
	3, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 3, 2, 2, 2, 2, 
	2, 3, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 1, 1, 1, 1, 1, 1, 1, 
	1, 10, 4, 5, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 3, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	3, 3, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 3, 2, 2, 
	2, 2, 2, 3, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 1, 1, 2, 2, 
	3, 3, 3, 3, 2, 2, 2, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 3, 
	5, 3, 2, 4, 3, 2, 4, 13, 
	2, 2, 2, 2, 2, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 3, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 2, 2, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 10, 4, 5, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 3, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 2, 1, 1, 1, 1, 
	1, 1, 1, 11, 4, 5, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	3, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 3, 3, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 3, 
	2, 2, 2, 2, 2, 3, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 0
];

var _lexer_range_lengths = [
	0, 1, 0, 0, 0, 0, 0, 0, 
	0, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 1, 1, 1, 1, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	1, 1, 1, 1, 0, 0, 1, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0
];

var _lexer_index_offsets = [
	0, 0, 16, 20, 25, 27, 29, 31, 
	34, 37, 52, 55, 57, 59, 61, 63, 
	65, 67, 69, 71, 79, 82, 85, 88, 
	91, 94, 97, 100, 103, 106, 109, 112, 
	115, 118, 121, 124, 139, 141, 143, 145, 
	147, 149, 151, 153, 155, 157, 159, 161, 
	163, 165, 176, 180, 184, 187, 190, 193, 
	196, 199, 202, 205, 208, 211, 214, 217, 
	220, 223, 226, 229, 232, 235, 238, 241, 
	245, 249, 252, 255, 258, 261, 264, 267, 
	270, 273, 276, 279, 282, 285, 288, 291, 
	294, 297, 300, 303, 306, 309, 312, 315, 
	318, 321, 324, 327, 331, 334, 337, 340, 
	343, 346, 350, 353, 356, 359, 362, 365, 
	368, 371, 374, 377, 380, 383, 386, 389, 
	392, 395, 398, 401, 404, 407, 410, 413, 
	416, 419, 422, 425, 428, 431, 434, 437, 
	440, 443, 446, 449, 452, 455, 458, 461, 
	464, 467, 470, 473, 476, 479, 482, 485, 
	488, 491, 493, 495, 497, 499, 501, 503, 
	505, 507, 519, 524, 530, 533, 536, 539, 
	542, 545, 548, 551, 554, 557, 560, 563, 
	566, 569, 572, 575, 578, 581, 584, 588, 
	591, 594, 597, 600, 603, 606, 609, 612, 
	615, 619, 623, 626, 629, 632, 635, 638, 
	641, 644, 647, 650, 653, 656, 659, 662, 
	665, 668, 671, 674, 677, 680, 683, 686, 
	689, 692, 695, 698, 701, 704, 708, 711, 
	714, 717, 720, 723, 727, 730, 733, 736, 
	739, 742, 745, 748, 751, 754, 757, 760, 
	763, 766, 769, 772, 775, 778, 781, 784, 
	787, 790, 793, 796, 799, 802, 805, 808, 
	811, 814, 817, 820, 823, 826, 829, 832, 
	835, 838, 841, 844, 847, 850, 853, 856, 
	859, 862, 865, 868, 871, 873, 875, 878, 
	881, 886, 891, 896, 901, 905, 909, 912, 
	914, 916, 918, 920, 922, 924, 926, 928, 
	930, 932, 934, 936, 938, 940, 942, 944, 
	949, 956, 961, 965, 971, 975, 978, 984, 
	999, 1002, 1005, 1008, 1011, 1014, 1016, 1018, 
	1020, 1022, 1024, 1026, 1028, 1030, 1032, 1034, 
	1036, 1038, 1042, 1044, 1046, 1048, 1050, 1052, 
	1054, 1056, 1058, 1060, 1062, 1064, 1066, 1068, 
	1070, 1072, 1074, 1076, 1078, 1081, 1084, 1086, 
	1088, 1090, 1092, 1094, 1096, 1098, 1100, 1102, 
	1104, 1106, 1108, 1110, 1112, 1114, 1116, 1118, 
	1120, 1122, 1134, 1139, 1145, 1148, 1151, 1154, 
	1157, 1160, 1163, 1166, 1169, 1172, 1175, 1178, 
	1181, 1184, 1187, 1190, 1193, 1196, 1199, 1203, 
	1206, 1209, 1212, 1215, 1218, 1221, 1224, 1227, 
	1230, 1233, 1236, 1239, 1242, 1245, 1248, 1251, 
	1254, 1257, 1260, 1263, 1266, 1269, 1272, 1275, 
	1278, 1281, 1284, 1287, 1290, 1293, 1296, 1299, 
	1302, 1305, 1308, 1311, 1314, 1317, 1320, 1323, 
	1326, 1329, 1332, 1335, 1338, 1341, 1344, 1347, 
	1350, 1353, 1355, 1357, 1359, 1361, 1363, 1365, 
	1367, 1369, 1371, 1373, 1376, 1378, 1380, 1382, 
	1384, 1386, 1388, 1390, 1403, 1408, 1414, 1417, 
	1420, 1423, 1426, 1429, 1432, 1435, 1438, 1441, 
	1444, 1447, 1450, 1453, 1456, 1459, 1462, 1465, 
	1468, 1472, 1475, 1478, 1481, 1484, 1487, 1490, 
	1493, 1496, 1499, 1503, 1507, 1510, 1513, 1516, 
	1519, 1522, 1525, 1528, 1531, 1534, 1537, 1540, 
	1543, 1546, 1549, 1552, 1555, 1558, 1561, 1564, 
	1567, 1570, 1573, 1576, 1579, 1582, 1585, 1588, 
	1592, 1595, 1598, 1601, 1604, 1607, 1611, 1614, 
	1617, 1620, 1623, 1626, 1629, 1632, 1635, 1638, 
	1641, 1644, 1647, 1650, 1653, 1656, 1659, 1662, 
	1665, 1668, 1671, 1674, 1677, 1680, 1683, 1686, 
	1689, 1692, 1695, 1698, 1701, 1704, 1707, 1710, 
	1713, 1716, 1719, 1722, 1725, 1728, 1731, 1734, 
	1737, 1740, 1743, 1746, 1749, 1752, 1755, 1758, 
	1761, 1764, 1767, 1770, 1773, 1775, 1777, 1779, 
	1781, 1783, 1785, 1787, 1789, 1791, 1793, 1795, 
	1797, 1799, 1801, 1803, 1805, 1807, 1809, 1811, 
	1813, 1815, 1817, 1819
];

var _lexer_indicies = [
	1, 2, 3, 4, 5, 7, 6, 8, 
	9, 10, 11, 12, 13, 14, 6, 0, 
	15, 16, 17, 0, 18, 19, 20, 21, 
	0, 22, 0, 23, 0, 24, 0, 26, 
	27, 25, 29, 30, 28, 1, 2, 3, 
	4, 5, 7, 6, 8, 9, 10, 11, 
	12, 13, 6, 0, 31, 32, 0, 33, 
	0, 34, 0, 35, 0, 24, 0, 36, 
	0, 37, 0, 39, 38, 41, 40, 42, 
	43, 41, 44, 45, 45, 44, 40, 46, 
	41, 40, 47, 41, 40, 48, 41, 40, 
	49, 41, 40, 50, 41, 40, 51, 41, 
	40, 52, 41, 40, 53, 41, 40, 54, 
	41, 40, 55, 41, 40, 56, 41, 40, 
	57, 41, 40, 58, 41, 40, 59, 41, 
	40, 41, 60, 40, 61, 62, 63, 64, 
	65, 67, 66, 68, 69, 70, 71, 72, 
	73, 66, 0, 74, 0, 75, 0, 76, 
	0, 77, 0, 24, 0, 78, 0, 79, 
	0, 80, 0, 81, 0, 82, 0, 83, 
	0, 85, 84, 87, 86, 88, 89, 90, 
	91, 87, 92, 93, 94, 93, 92, 86, 
	95, 96, 87, 86, 97, 98, 87, 86, 
	99, 87, 86, 100, 87, 86, 101, 87, 
	86, 102, 87, 86, 103, 87, 86, 104, 
	87, 86, 105, 87, 86, 106, 87, 86, 
	107, 87, 86, 87, 108, 86, 109, 87, 
	86, 110, 87, 86, 111, 87, 86, 112, 
	87, 86, 113, 87, 86, 114, 87, 86, 
	115, 87, 86, 116, 87, 86, 117, 87, 
	86, 118, 87, 108, 86, 119, 120, 87, 
	86, 121, 87, 86, 122, 87, 86, 123, 
	87, 86, 124, 87, 86, 125, 87, 86, 
	126, 87, 86, 127, 87, 86, 128, 87, 
	86, 129, 87, 86, 130, 87, 86, 131, 
	87, 86, 132, 87, 86, 133, 87, 86, 
	134, 87, 86, 135, 87, 86, 107, 87, 
	86, 136, 87, 86, 137, 87, 86, 138, 
	87, 86, 139, 87, 86, 140, 87, 86, 
	141, 87, 86, 142, 87, 86, 143, 87, 
	86, 144, 87, 86, 145, 87, 86, 146, 
	87, 108, 86, 147, 87, 86, 148, 87, 
	86, 149, 87, 86, 150, 87, 86, 107, 
	87, 86, 151, 152, 87, 86, 153, 87, 
	86, 154, 87, 86, 155, 87, 86, 156, 
	87, 86, 157, 87, 86, 158, 87, 86, 
	159, 87, 86, 160, 87, 86, 107, 87, 
	86, 161, 87, 86, 162, 87, 86, 163, 
	87, 86, 164, 87, 86, 165, 87, 86, 
	166, 87, 86, 167, 87, 86, 168, 87, 
	86, 169, 87, 86, 170, 87, 86, 171, 
	87, 86, 107, 87, 86, 172, 87, 86, 
	107, 87, 86, 173, 87, 86, 174, 87, 
	86, 175, 87, 86, 176, 87, 86, 107, 
	87, 86, 177, 87, 86, 178, 87, 86, 
	179, 87, 86, 180, 87, 86, 107, 87, 
	86, 87, 181, 86, 87, 182, 86, 87, 
	183, 86, 87, 184, 86, 87, 185, 86, 
	87, 186, 86, 87, 187, 86, 87, 188, 
	86, 87, 189, 86, 87, 190, 86, 87, 
	191, 86, 87, 192, 86, 87, 193, 86, 
	87, 194, 86, 195, 0, 196, 0, 197, 
	0, 198, 0, 199, 0, 200, 0, 202, 
	201, 204, 203, 205, 206, 207, 208, 204, 
	209, 210, 211, 212, 210, 209, 203, 213, 
	214, 215, 204, 203, 216, 217, 218, 219, 
	204, 203, 220, 204, 203, 221, 204, 203, 
	222, 204, 203, 223, 204, 203, 224, 204, 
	203, 225, 204, 203, 226, 204, 203, 227, 
	204, 203, 222, 204, 203, 228, 204, 203, 
	229, 204, 203, 225, 204, 203, 230, 204, 
	203, 231, 204, 203, 232, 204, 203, 233, 
	204, 203, 234, 204, 203, 222, 204, 203, 
	225, 235, 204, 203, 236, 204, 203, 237, 
	204, 203, 238, 204, 203, 239, 204, 203, 
	240, 204, 203, 241, 204, 203, 242, 204, 
	203, 243, 204, 203, 244, 204, 203, 245, 
	204, 222, 203, 246, 247, 204, 203, 248, 
	204, 203, 249, 204, 203, 250, 204, 203, 
	251, 204, 203, 252, 204, 203, 253, 204, 
	203, 254, 204, 203, 255, 204, 203, 256, 
	204, 203, 257, 204, 203, 258, 204, 203, 
	259, 204, 203, 260, 204, 203, 261, 204, 
	203, 262, 204, 203, 263, 204, 203, 204, 
	222, 203, 264, 204, 203, 265, 204, 203, 
	266, 204, 203, 267, 204, 203, 268, 204, 
	203, 269, 204, 203, 270, 204, 203, 271, 
	204, 203, 272, 204, 203, 273, 204, 203, 
	274, 204, 222, 203, 275, 204, 203, 276, 
	204, 203, 277, 204, 203, 278, 204, 203, 
	263, 204, 203, 279, 280, 204, 203, 281, 
	204, 203, 282, 204, 203, 283, 204, 203, 
	284, 204, 203, 285, 204, 203, 286, 204, 
	203, 287, 204, 203, 288, 204, 203, 263, 
	204, 203, 289, 204, 203, 290, 204, 203, 
	291, 204, 203, 292, 204, 203, 293, 204, 
	203, 294, 204, 203, 295, 204, 203, 296, 
	204, 203, 297, 204, 203, 298, 204, 203, 
	299, 204, 203, 263, 204, 203, 300, 204, 
	203, 225, 204, 203, 301, 204, 203, 302, 
	204, 203, 303, 204, 203, 304, 204, 203, 
	222, 204, 203, 305, 204, 203, 306, 204, 
	203, 307, 204, 203, 308, 204, 203, 263, 
	204, 203, 204, 309, 203, 204, 310, 203, 
	204, 311, 203, 204, 312, 203, 204, 313, 
	203, 204, 314, 203, 204, 315, 203, 204, 
	316, 203, 204, 317, 203, 204, 318, 203, 
	204, 319, 203, 204, 320, 203, 204, 321, 
	203, 204, 322, 203, 204, 222, 203, 323, 
	0, 324, 0, 326, 327, 325, 329, 330, 
	328, 333, 332, 334, 332, 331, 337, 336, 
	338, 336, 335, 337, 336, 339, 336, 335, 
	337, 336, 340, 336, 335, 342, 341, 341, 
	0, 7, 343, 343, 0, 345, 346, 344, 
	7, 0, 347, 0, 348, 0, 349, 0, 
	350, 0, 351, 0, 352, 0, 353, 0, 
	354, 0, 355, 0, 356, 0, 357, 0, 
	358, 0, 359, 0, 360, 0, 24, 0, 
	0, 0, 0, 0, 361, 362, 363, 362, 
	362, 365, 364, 361, 7, 366, 12, 366, 
	0, 367, 368, 367, 0, 371, 370, 372, 
	373, 370, 369, 0, 375, 376, 374, 0, 
	375, 374, 371, 377, 375, 376, 377, 374, 
	378, 379, 380, 381, 382, 371, 383, 384, 
	385, 386, 387, 388, 389, 383, 0, 390, 
	41, 40, 391, 41, 40, 392, 41, 40, 
	393, 41, 40, 59, 41, 40, 394, 0, 
	395, 0, 33, 0, 396, 0, 397, 0, 
	33, 0, 398, 0, 399, 0, 400, 0, 
	401, 0, 402, 0, 24, 0, 33, 403, 
	404, 0, 405, 0, 406, 0, 407, 0, 
	408, 0, 409, 0, 410, 0, 411, 0, 
	412, 0, 36, 0, 413, 0, 414, 0, 
	415, 0, 416, 0, 417, 0, 418, 0, 
	419, 0, 420, 0, 421, 0, 422, 423, 
	0, 424, 425, 0, 426, 0, 427, 0, 
	428, 0, 429, 0, 430, 0, 431, 0, 
	432, 0, 433, 0, 434, 0, 435, 0, 
	436, 0, 437, 0, 438, 0, 439, 0, 
	440, 0, 441, 0, 442, 0, 444, 443, 
	446, 445, 447, 448, 449, 450, 446, 451, 
	452, 453, 454, 452, 451, 445, 455, 456, 
	457, 446, 445, 458, 459, 460, 461, 446, 
	445, 462, 446, 445, 463, 446, 445, 464, 
	446, 445, 465, 446, 445, 466, 446, 445, 
	467, 446, 445, 468, 446, 445, 469, 446, 
	445, 464, 446, 445, 470, 446, 445, 471, 
	446, 445, 467, 446, 445, 472, 446, 445, 
	473, 446, 445, 474, 446, 445, 475, 446, 
	445, 476, 446, 445, 464, 446, 445, 467, 
	477, 446, 445, 478, 446, 445, 479, 446, 
	445, 480, 446, 445, 481, 446, 445, 482, 
	446, 445, 483, 446, 445, 484, 446, 445, 
	485, 446, 445, 486, 446, 445, 446, 464, 
	445, 487, 446, 445, 488, 446, 445, 489, 
	446, 445, 490, 446, 445, 491, 446, 445, 
	492, 446, 445, 493, 446, 445, 494, 446, 
	445, 495, 446, 445, 496, 446, 445, 497, 
	446, 445, 498, 446, 445, 486, 446, 445, 
	499, 446, 445, 467, 446, 445, 500, 446, 
	445, 501, 446, 445, 502, 446, 445, 503, 
	446, 445, 464, 446, 445, 504, 446, 445, 
	505, 446, 445, 506, 446, 445, 507, 446, 
	445, 486, 446, 445, 446, 508, 445, 446, 
	509, 445, 446, 510, 445, 446, 511, 445, 
	446, 512, 445, 446, 513, 445, 446, 514, 
	445, 446, 515, 445, 446, 516, 445, 446, 
	517, 445, 446, 518, 445, 446, 519, 445, 
	446, 520, 445, 446, 521, 445, 446, 464, 
	445, 522, 0, 523, 0, 524, 0, 525, 
	0, 526, 0, 527, 0, 528, 0, 529, 
	0, 530, 0, 531, 0, 532, 442, 0, 
	533, 0, 534, 0, 535, 0, 536, 0, 
	441, 0, 538, 537, 540, 539, 541, 542, 
	543, 544, 545, 540, 546, 547, 548, 549, 
	547, 546, 539, 550, 551, 552, 540, 539, 
	553, 554, 555, 556, 540, 539, 557, 540, 
	539, 558, 540, 539, 559, 540, 539, 560, 
	540, 539, 561, 540, 539, 562, 540, 539, 
	563, 540, 539, 564, 540, 539, 559, 540, 
	539, 565, 540, 539, 566, 540, 539, 562, 
	540, 539, 567, 540, 539, 568, 540, 539, 
	569, 540, 539, 570, 540, 539, 571, 540, 
	539, 559, 540, 539, 562, 572, 540, 539, 
	573, 540, 539, 574, 540, 539, 575, 540, 
	539, 576, 540, 539, 577, 540, 539, 578, 
	540, 539, 579, 540, 539, 580, 540, 539, 
	581, 540, 539, 582, 540, 559, 539, 583, 
	584, 540, 539, 585, 540, 539, 586, 540, 
	539, 587, 540, 539, 588, 540, 539, 589, 
	540, 539, 590, 540, 539, 591, 540, 539, 
	592, 540, 539, 593, 540, 539, 594, 540, 
	539, 595, 540, 539, 596, 540, 539, 597, 
	540, 539, 598, 540, 539, 599, 540, 539, 
	600, 540, 539, 540, 559, 539, 601, 540, 
	539, 602, 540, 539, 603, 540, 539, 604, 
	540, 539, 605, 540, 539, 606, 540, 539, 
	607, 540, 539, 608, 540, 539, 609, 540, 
	539, 610, 540, 539, 611, 540, 559, 539, 
	612, 540, 539, 613, 540, 539, 614, 540, 
	539, 615, 540, 539, 600, 540, 539, 616, 
	617, 540, 539, 618, 540, 539, 619, 540, 
	539, 620, 540, 539, 621, 540, 539, 622, 
	540, 539, 623, 540, 539, 624, 540, 539, 
	625, 540, 539, 600, 540, 539, 626, 540, 
	539, 627, 540, 539, 628, 540, 539, 629, 
	540, 539, 630, 540, 539, 631, 540, 539, 
	632, 540, 539, 633, 540, 539, 634, 540, 
	539, 635, 540, 539, 636, 540, 539, 600, 
	540, 539, 637, 540, 539, 562, 540, 539, 
	638, 540, 539, 639, 540, 539, 640, 540, 
	539, 641, 540, 539, 559, 540, 539, 642, 
	540, 539, 643, 540, 539, 644, 540, 539, 
	645, 540, 539, 600, 540, 539, 646, 540, 
	539, 647, 540, 539, 648, 540, 539, 649, 
	540, 539, 600, 540, 539, 540, 650, 539, 
	540, 651, 539, 540, 652, 539, 540, 653, 
	539, 540, 654, 539, 540, 655, 539, 540, 
	656, 539, 540, 657, 539, 540, 658, 539, 
	540, 659, 539, 540, 660, 539, 540, 661, 
	539, 540, 662, 539, 540, 663, 539, 540, 
	559, 539, 664, 665, 0, 666, 0, 667, 
	0, 668, 0, 669, 0, 670, 0, 671, 
	0, 672, 0, 673, 0, 441, 0, 674, 
	0, 675, 0, 676, 0, 677, 0, 678, 
	0, 679, 0, 680, 0, 681, 0, 682, 
	0, 683, 0, 684, 0, 82, 0, 685, 
	0, 6, 0, 686, 0
];

var _lexer_trans_targs = [
	0, 2, 10, 36, 41, 153, 9, 9, 
	276, 286, 288, 302, 303, 306, 601, 3, 
	329, 579, 4, 317, 320, 323, 5, 6, 
	7, 8, 9, 287, 8, 9, 287, 11, 
	15, 12, 13, 14, 16, 17, 18, 19, 
	18, 19, 20, 312, 19, 9, 21, 22, 
	23, 24, 25, 26, 27, 28, 29, 30, 
	31, 32, 33, 34, 35, 2, 10, 36, 
	41, 153, 9, 9, 276, 286, 288, 302, 
	303, 306, 37, 38, 39, 40, 42, 43, 
	44, 45, 46, 47, 48, 49, 48, 49, 
	50, 127, 129, 134, 49, 9, 139, 51, 
	105, 52, 62, 53, 54, 55, 56, 57, 
	58, 59, 60, 61, 35, 63, 64, 65, 
	66, 67, 68, 69, 70, 71, 72, 73, 
	89, 74, 75, 76, 77, 78, 79, 80, 
	81, 82, 83, 84, 85, 86, 87, 88, 
	90, 91, 92, 93, 94, 95, 96, 97, 
	98, 99, 100, 101, 102, 103, 104, 106, 
	115, 107, 108, 109, 110, 111, 112, 113, 
	114, 116, 117, 118, 119, 120, 121, 122, 
	123, 124, 125, 126, 128, 130, 131, 132, 
	133, 135, 136, 137, 138, 140, 141, 142, 
	143, 144, 145, 146, 147, 148, 149, 150, 
	151, 152, 9, 154, 155, 156, 157, 158, 
	159, 160, 161, 160, 161, 162, 249, 251, 
	256, 161, 9, 261, 275, 163, 182, 227, 
	164, 167, 173, 176, 165, 166, 35, 168, 
	169, 170, 171, 172, 174, 175, 177, 178, 
	179, 180, 181, 183, 184, 185, 186, 187, 
	188, 189, 190, 191, 192, 193, 194, 211, 
	195, 196, 197, 198, 199, 200, 201, 202, 
	203, 204, 205, 206, 207, 208, 209, 210, 
	212, 213, 214, 215, 216, 217, 218, 219, 
	220, 221, 222, 223, 224, 225, 226, 228, 
	237, 229, 230, 231, 232, 233, 234, 235, 
	236, 238, 239, 240, 241, 242, 243, 244, 
	245, 246, 247, 248, 250, 252, 253, 254, 
	255, 257, 258, 259, 260, 262, 263, 264, 
	265, 266, 267, 268, 269, 270, 271, 272, 
	273, 274, 9, 277, 278, 279, 280, 279, 
	279, 280, 279, 281, 281, 281, 282, 281, 
	281, 281, 282, 283, 284, 285, 9, 285, 
	286, 9, 287, 289, 290, 291, 292, 293, 
	294, 295, 296, 297, 298, 299, 300, 301, 
	603, 304, 305, 9, 304, 303, 305, 306, 
	307, 308, 310, 311, 309, 307, 308, 309, 
	307, 310, 2, 10, 36, 41, 153, 311, 
	276, 286, 288, 302, 303, 306, 313, 314, 
	315, 316, 318, 319, 321, 322, 324, 325, 
	326, 327, 328, 330, 339, 331, 332, 333, 
	334, 335, 336, 337, 338, 340, 341, 342, 
	343, 344, 345, 346, 347, 348, 349, 457, 
	350, 441, 351, 352, 353, 354, 355, 356, 
	357, 358, 359, 360, 361, 362, 363, 364, 
	365, 366, 367, 368, 369, 368, 369, 370, 
	414, 416, 421, 369, 9, 426, 440, 371, 
	390, 401, 372, 375, 381, 384, 373, 374, 
	35, 376, 377, 378, 379, 380, 382, 383, 
	385, 386, 387, 388, 389, 391, 392, 393, 
	394, 395, 396, 397, 398, 399, 400, 402, 
	403, 404, 405, 406, 407, 408, 409, 410, 
	411, 412, 413, 415, 417, 418, 419, 420, 
	422, 423, 424, 425, 427, 428, 429, 430, 
	431, 432, 433, 434, 435, 436, 437, 438, 
	439, 9, 442, 443, 444, 445, 446, 447, 
	448, 449, 450, 451, 452, 453, 454, 455, 
	456, 458, 459, 458, 459, 460, 547, 549, 
	554, 559, 459, 9, 564, 578, 461, 480, 
	525, 462, 465, 471, 474, 463, 464, 35, 
	466, 467, 468, 469, 470, 472, 473, 475, 
	476, 477, 478, 479, 481, 482, 483, 484, 
	485, 486, 487, 488, 489, 490, 491, 492, 
	509, 493, 494, 495, 496, 497, 498, 499, 
	500, 501, 502, 503, 504, 505, 506, 507, 
	508, 510, 511, 512, 513, 514, 515, 516, 
	517, 518, 519, 520, 521, 522, 523, 524, 
	526, 535, 527, 528, 529, 530, 531, 532, 
	533, 534, 536, 537, 538, 539, 540, 541, 
	542, 543, 544, 545, 546, 548, 550, 551, 
	552, 553, 555, 556, 557, 558, 560, 561, 
	562, 563, 565, 566, 567, 568, 569, 570, 
	571, 572, 573, 574, 575, 576, 577, 9, 
	580, 589, 581, 582, 583, 584, 585, 586, 
	587, 588, 590, 591, 592, 593, 594, 595, 
	596, 597, 598, 599, 600, 602, 0
];

var _lexer_trans_actions = [
	43, 29, 29, 29, 29, 29, 0, 54, 
	3, 1, 0, 29, 1, 35, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 57, 149, 126, 0, 110, 23, 0, 
	0, 0, 0, 0, 0, 0, 57, 144, 
	0, 54, 84, 84, 0, 81, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 21, 63, 63, 63, 
	63, 63, 31, 130, 60, 57, 31, 63, 
	57, 66, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 57, 144, 0, 54, 
	84, 84, 84, 84, 0, 69, 33, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 13, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 13, 0, 0, 0, 0, 0, 
	0, 57, 144, 0, 54, 84, 84, 84, 
	84, 0, 72, 33, 84, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 15, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 15, 0, 0, 7, 139, 48, 
	0, 102, 9, 5, 45, 134, 45, 0, 
	33, 122, 33, 33, 0, 11, 106, 0, 
	0, 114, 25, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 27, 118, 27, 51, 0, 0, 
	0, 37, 37, 54, 37, 87, 0, 0, 
	39, 0, 96, 96, 96, 96, 96, 0, 
	93, 90, 41, 96, 90, 99, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 57, 144, 0, 54, 84, 
	84, 84, 84, 0, 78, 33, 84, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	19, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 19, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 57, 144, 0, 54, 84, 84, 84, 
	84, 84, 0, 75, 33, 84, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 17, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 17, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0
];

var _lexer_eof_actions = [
	0, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43
];

var lexer_start = 1;
var lexer_first_final = 603;
var lexer_error = 0;

var lexer_en_main = 1;


/* line 129 "ragel/i18n/ja.js.rl" */

/* line 130 "ragel/i18n/ja.js.rl" */

/* line 131 "ragel/i18n/ja.js.rl" */

/* line 132 "ragel/i18n/ja.js.rl" */

var Lexer = function(listener) {
  // Check that listener has the required functions
  var events = ['comment', 'tag', 'feature', 'background', 'scenario', 'scenario_outline', 'examples', 'step', 'doc_string', 'row', 'eof'];
  for(var i=0, len=events.length; i<len; i++) {
    var event = events[i];
    if(typeof listener[event] != 'function') {
      throw new Error("Error. No " + event + " function exists on " + JSON.stringify(listener));
    }
  }
  this.listener = listener;
};

Lexer.prototype.scan = function(data) {
  var ending = "\n%_FEATURE_END_%";
  if(typeof data == 'string') {
    data = this.stringToBytes(data + ending);
  } else if(typeof Buffer != 'undefined' && Buffer.isBuffer(data)) {
    // Node.js
    var buf = new Buffer(data.length + ending.length);
    data.copy(buf, 0, 0);
    new Buffer(ending).copy(buf, data.length, 0);
    data = buf;
  }
  var eof = pe = data.length;
  var p = 0;

  this.line_number = 1;
  this.last_newline = 0;
  var signedCharValue=function(v){return v > 127 ? v-256 : v; };

  
/* line 1043 "js/lib/gherkin/lexer/ja.js" */
{
	  this.cs = lexer_start;
} /* JSCodeGen::writeInit */

/* line 164 "ragel/i18n/ja.js.rl" */
  
/* line 1050 "js/lib/gherkin/lexer/ja.js" */
{
	var _klen, _trans, _keys, _ps, _widec, _acts, _nacts;
	var _goto_level, _resume, _eof_trans, _again, _test_eof;
	var _out;
	_klen = _trans = _keys = _acts = _nacts = null;
	_goto_level = 0;
	_resume = 10;
	_eof_trans = 15;
	_again = 20;
	_test_eof = 30;
	_out = 40;
	while (true) {
	_trigger_goto = false;
	if (_goto_level <= 0) {
	if (p == pe) {
		_goto_level = _test_eof;
		continue;
	}
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	}
	if (_goto_level <= _resume) {
	_keys = _lexer_key_offsets[ this.cs];
	_trans = _lexer_index_offsets[ this.cs];
	_klen = _lexer_single_lengths[ this.cs];
	_break_match = false;
	
	do {
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + _klen - 1;

	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + ( (_upper - _lower) >> 1 );

	        if (( signedCharValue(data[p])) < _lexer_trans_keys[_mid]) {
	           _upper = _mid - 1;
	        } else if (( signedCharValue(data[p])) > _lexer_trans_keys[_mid]) {
	           _lower = _mid + 1;
	        } else {
	           _trans += (_mid - _keys);
	           _break_match = true;
	           break;
	        };
	     } /* while */
	     if (_break_match) { break; }
	     _keys += _klen;
	     _trans += _klen;
	  }
	  _klen = _lexer_range_lengths[ this.cs];
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + (_klen << 1) - 2;
	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + (((_upper-_lower) >> 1) & ~1);
	        if (( signedCharValue(data[p])) < _lexer_trans_keys[_mid]) {
	          _upper = _mid - 2;
	         } else if (( signedCharValue(data[p])) > _lexer_trans_keys[_mid+1]) {
	          _lower = _mid + 2;
	        } else {
	          _trans += ((_mid - _keys) >> 1);
	          _break_match = true;
	          break;
	        }
	     } /* while */
	     if (_break_match) { break; }
	     _trans += _klen
	  }
	} while (false);
	_trans = _lexer_indicies[_trans];
	 this.cs = _lexer_trans_targs[_trans];
	if (_lexer_trans_actions[_trans] != 0) {
		_acts = _lexer_trans_actions[_trans];
		_nacts = _lexer_actions[_acts];
		_acts += 1;
		while (_nacts > 0) {
			_nacts -= 1;
			_acts += 1;
			switch (_lexer_actions[_acts - 1]) {
case 0:
/* line 6 "ragel/i18n/ja.js.rl" */

    this.content_start = p;
    this.current_line = this.line_number;
    this.start_col = p - this.last_newline - (this.keyword+':').length;
  		break;
case 1:
/* line 12 "ragel/i18n/ja.js.rl" */

    this.current_line = this.line_number;
    this.start_col = p - this.last_newline;
  		break;
case 2:
/* line 17 "ragel/i18n/ja.js.rl" */

    this.content_start = p;
  		break;
case 3:
/* line 21 "ragel/i18n/ja.js.rl" */

    this.docstring_content_type_start = p;
  		break;
case 4:
/* line 25 "ragel/i18n/ja.js.rl" */

    this.docstring_content_type_end = p;
  		break;
case 5:
/* line 29 "ragel/i18n/ja.js.rl" */

    var con = this.unindent(
      this.start_col, 
      this.bytesToString(data.slice(this.content_start, this.next_keyword_start-1)).replace(/(\r?\n)?([\t ])*$/, '').replace(/\\\"\\\"\\\"/mg, '"""')
    );
    var con_type = this.bytesToString(data.slice(this.docstring_content_type_start, this.docstring_content_type_end)).trim();
    this.listener.doc_string(con_type, con, this.current_line); 
  		break;
case 6:
/* line 38 "ragel/i18n/ja.js.rl" */

    p = this.store_keyword_content('feature', data, p, eof);
  		break;
case 7:
/* line 42 "ragel/i18n/ja.js.rl" */

    p = this.store_keyword_content('background', data, p, eof);
  		break;
case 8:
/* line 46 "ragel/i18n/ja.js.rl" */

    p = this.store_keyword_content('scenario', data, p, eof);
  		break;
case 9:
/* line 50 "ragel/i18n/ja.js.rl" */

    p = this.store_keyword_content('scenario_outline', data, p, eof);
  		break;
case 10:
/* line 54 "ragel/i18n/ja.js.rl" */

    p = this.store_keyword_content('examples', data, p, eof);
  		break;
case 11:
/* line 58 "ragel/i18n/ja.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.step(this.keyword, con, this.current_line);
  		break;
case 12:
/* line 63 "ragel/i18n/ja.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.comment(con, this.line_number);
    this.keyword_start = null;
  		break;
case 13:
/* line 69 "ragel/i18n/ja.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.tag(con, this.line_number);
    this.keyword_start = null;
  		break;
case 14:
/* line 75 "ragel/i18n/ja.js.rl" */

    this.line_number++;
  		break;
case 15:
/* line 79 "ragel/i18n/ja.js.rl" */

    this.last_newline = p + 1;
  		break;
case 16:
/* line 83 "ragel/i18n/ja.js.rl" */

    this.keyword_start = this.keyword_start || p;
  		break;
case 17:
/* line 87 "ragel/i18n/ja.js.rl" */

    this.keyword = this.bytesToString(data.slice(this.keyword_start, p)).replace(/:$/, '');
    this.keyword_start = null;
  		break;
case 18:
/* line 92 "ragel/i18n/ja.js.rl" */

    this.next_keyword_start = p;
  		break;
case 19:
/* line 96 "ragel/i18n/ja.js.rl" */

    p = p - 1;
    current_row = [];
    this.current_line = this.line_number;
  		break;
case 20:
/* line 102 "ragel/i18n/ja.js.rl" */

    this.content_start = p;
  		break;
case 21:
/* line 106 "ragel/i18n/ja.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    current_row.push(con.replace(/\\\|/, "|").replace(/\\n/, "\n").replace(/\\\\/, "\\"));
  		break;
case 22:
/* line 111 "ragel/i18n/ja.js.rl" */

    this.listener.row(current_row, this.current_line);
  		break;
case 23:
/* line 115 "ragel/i18n/ja.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw new Error("Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.");
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 1277 "js/lib/gherkin/lexer/ja.js" */
			} /* action switch */
		}
	}
	if (_trigger_goto) {
		continue;
	}
	}
	if (_goto_level <= _again) {
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	p += 1;
	if (p != pe) {
		_goto_level = _resume;
		continue;
	}
	}
	if (_goto_level <= _test_eof) {
	if (p == eof) {
	__acts = _lexer_eof_actions[ this.cs];
	__nacts =  _lexer_actions[__acts];
	__acts += 1;
	while (__nacts > 0) {
		__nacts -= 1;
		__acts += 1;
		switch (_lexer_actions[__acts - 1]) {
case 23:
/* line 115 "ragel/i18n/ja.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw new Error("Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.");
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 1316 "js/lib/gherkin/lexer/ja.js" */
		} /* eof action switch */
	}
	if (_trigger_goto) {
		continue;
	}
}
	}
	if (_goto_level <= _out) {
		break;
	}
	}
	}

/* line 165 "ragel/i18n/ja.js.rl" */
};


/*
 * Decode utf-8 byte sequence to string.
 */
var decodeUtf8 = function(bytes) {
  var result = "";
  var i = 0;
  var wc;
  var c;

  while (i < bytes.length) {
    /* parse as UTF-8 lead byte */
    wc = bytes[i++];
    if (wc < 0x80) {
      count = 0;
    } else if (wc < 0xC2 || wc >= 0xF8) {
      throw new Error("input is not a valid UTF-8 lead octet");
    } else if (wc < 0xE0) {
      count = 1;
      wc = (wc & 0x1F) << 6;
    } else if (wc < 0xF0) {
      count = 2;
      wc = (wc & 0x0F) << 12;
    } else /* wc < 0xF8 */ {
      count = 3;
      wc = (wc & 0x07) << 18;
    }

    /* parse trail bytes, if any */
    while (count) {
      if (!(i < bytes.length)) {
        throw new Error("short read");
      }
      if ((c = bytes[i++] ^ 0x80) > 0x3F) {
        throw new Error("input is not a valid UTF-8 trail octet");
      }
      wc |= c << (6 * --count);
      if (wc < (1 << (5 * count + 6))) {
        throw new Error("invalid non-minimal encoded input");
      }
    }

    /* handle conversion to UTF-16 if needed */
    if (wc > 0xFFFF) {
      wc -= 0x10000;
      result += String.fromCharCode(0xD800 + (wc >> 10));
      wc = 0xDC00 + (wc & 0x3FF);
    }
    result += String.fromCharCode(wc);
  }

  return result;
};

/*
 * Encode string to an array of bytes using utf8 encoding.
 *
 * Javascript internally stores character data as utf16 (like java).
 * String.charCodeAt() does *not* produce unicode points, but simply
 * reflects this internal representation. Thus, it is necessary
 * to first decode the utf-16 representation before encoding to
 * utf-8.
 */
var encodeUtf8 = function(string) {
  var bytes = [];
  var i = 0;
  var j = 0;
  var wc;

  while (i < string.length) {
    wc = string.charCodeAt(i++);
    if (wc >= 0xD800 && wc <= 0xDBFF && i < string.length && string.charCodeAt(i) >= 0xDC00 && string.charCodeAt(i) <= 0xDFFF) {
      /* decode UTF-16 */
      wc = 0x10000 + ((wc & 0x3FF) << 10) + (string.charCodeAt(i++) & 0x3FF);
    }

    /* emit lead byte */
    if (wc < 0x80) {
      bytes[j++] = wc;
      count = 0;
    } else if (wc < 0x800) {
      bytes[j++] = 0xC0 | (wc >> 6);
      count = 1;
    } else if (wc < 0x10000) {
      bytes[j++] = 0xE0 | (wc >> 12);
      count = 2;
    } else {
      /* SMP: 21-bit Unicode */
      bytes[j++] = 0xF0 | (wc >> 18);
      count = 3;
    }

    /* emit trail bytes, if any */
    while (count) {
      bytes[j++] = 0x80 | ((wc >> (6 * --count)) & 0x3F);
    }
  }

  return bytes;

};

Lexer.prototype.bytesToString = function(bytes) {
  if(typeof bytes.write == 'function') {
    // Node.js
    return bytes.toString('utf-8');
  }
  return decodeUtf8(bytes);
};

Lexer.prototype.stringToBytes = function(string) {
  return encodeUtf8(string);
};

Lexer.prototype.unindent = function(startcol, text) {
  startcol = startcol || 0;
  return text.replace(new RegExp('^[\t ]{0,' + startcol + '}', 'gm'), ''); 
};

Lexer.prototype.store_keyword_content = function(event, data, p, eof) {
  var end_point = (!this.next_keyword_start || (p == eof)) ? p : this.next_keyword_start;
  var content = this.unindent(this.start_col + 2, this.bytesToString(data.slice(this.content_start, end_point))).replace(/\s+$/,"");
  var content_lines = content.split("\n")
  var name = content_lines.shift() || "";
  name = name.trim();
  var description = content_lines.join("\n");
  this.listener[event](this.keyword, name, description, this.current_line);
  var nks = this.next_keyword_start;
  this.next_keyword_start = null;
  return nks ? nks - 1 : p;
};

Lexer.prototype.current_line_content = function(data, p) {
  var rest = Array.prototype.slice.call(data,this.last_newline, -1);
  var end = rest.indexOf(10) || -1;
  return this.bytesToString(rest.slice(0, end)).trim();
};

// Node.js export
if(typeof module !== 'undefined') {
  module.exports = Lexer;
}
// Require.js export
if (typeof define !== 'undefined') {
  if(define.amd) {
    define('gherkin/lexer/ja', [], function() {
      return Lexer;
    });
  } else {
    define('gherkin/lexer/ja', function(require, exports, module) {
      exports.Lexer = Lexer;
    });
  }
}

})();

}).call(this,require("buffer").Buffer)

},{"buffer":69}],216:[function(require,module,exports){
(function (Buffer){

/* line 1 "ragel/i18n/kn.js.rl" */
;(function() {


/* line 126 "ragel/i18n/kn.js.rl" */



/* line 11 "js/lib/gherkin/lexer/kn.js" */
var _lexer_actions = [
	0, 1, 0, 1, 1, 1, 2, 1, 
	3, 1, 4, 1, 5, 1, 6, 1, 
	7, 1, 8, 1, 9, 1, 10, 1, 
	11, 1, 12, 1, 13, 1, 16, 1, 
	17, 1, 18, 1, 19, 1, 20, 1, 
	21, 1, 22, 1, 23, 2, 2, 18, 
	2, 3, 4, 2, 13, 0, 2, 14, 
	15, 2, 17, 0, 2, 17, 1, 2, 
	17, 16, 2, 17, 19, 2, 18, 6, 
	2, 18, 7, 2, 18, 8, 2, 18, 
	9, 2, 18, 10, 2, 18, 16, 2, 
	20, 21, 2, 22, 0, 2, 22, 1, 
	2, 22, 16, 2, 22, 19, 3, 4, 
	14, 15, 3, 5, 14, 15, 3, 11, 
	14, 15, 3, 12, 14, 15, 3, 13, 
	14, 15, 3, 14, 15, 18, 3, 17, 
	0, 11, 3, 17, 14, 15, 4, 2, 
	14, 15, 18, 4, 3, 4, 14, 15, 
	4, 17, 0, 14, 15, 5, 17, 0, 
	11, 14, 15
];

var _lexer_key_offsets = [
	0, 0, 12, 13, 21, 22, 23, 24, 
	25, 26, 27, 28, 29, 30, 31, 33, 
	35, 46, 47, 48, 50, 52, 57, 62, 
	67, 72, 76, 80, 82, 83, 84, 85, 
	86, 87, 88, 89, 90, 91, 92, 93, 
	94, 95, 96, 97, 102, 109, 114, 118, 
	124, 127, 129, 135, 146, 147, 148, 149, 
	150, 151, 152, 153, 154, 155, 156, 157, 
	158, 159, 160, 161, 162, 163, 164, 165, 
	166, 167, 168, 169, 170, 171, 172, 173, 
	174, 175, 176, 183, 185, 187, 189, 191, 
	193, 195, 197, 199, 201, 203, 205, 207, 
	209, 211, 213, 215, 217, 219, 230, 231, 
	232, 233, 234, 235, 236, 237, 238, 239, 
	240, 241, 242, 243, 244, 245, 246, 247, 
	248, 249, 250, 251, 252, 253, 254, 255, 
	256, 257, 266, 268, 276, 278, 280, 282, 
	284, 286, 288, 290, 292, 294, 296, 298, 
	300, 302, 304, 306, 308, 310, 312, 314, 
	316, 318, 320, 322, 324, 326, 328, 330, 
	332, 334, 336, 338, 340, 342, 344, 346, 
	348, 350, 353, 355, 357, 359, 361, 363, 
	365, 367, 369, 371, 373, 375, 377, 379, 
	381, 383, 385, 387, 389, 391, 393, 395, 
	397, 399, 401, 403, 405, 407, 409, 411, 
	413, 415, 417, 419, 421, 423, 425, 427, 
	429, 431, 433, 435, 437, 439, 441, 443, 
	445, 447, 449, 451, 453, 455, 457, 459, 
	461, 463, 465, 467, 469, 471, 473, 475, 
	477, 479, 481, 483, 485, 487, 489, 491, 
	493, 495, 497, 499, 502, 504, 506, 508, 
	510, 512, 514, 516, 518, 520, 522, 524, 
	526, 528, 530, 532, 534, 536, 538, 540, 
	542, 544, 546, 548, 550, 552, 554, 556, 
	558, 560, 562, 564, 566, 568, 570, 572, 
	574, 576, 578, 580, 582, 584, 586, 588, 
	589, 590, 592, 593, 594, 595, 596, 597, 
	598, 599, 600, 601, 602, 603, 604, 605, 
	606, 607, 608, 609, 610, 611, 612, 613, 
	614, 615, 616, 617, 618, 619, 620, 621, 
	622, 623, 624, 625, 626, 627, 628, 629, 
	630, 631, 632, 633, 634, 635, 636, 637, 
	638, 639, 640, 649, 651, 658, 660, 662, 
	664, 666, 668, 670, 672, 674, 676, 678, 
	680, 682, 684, 686, 688, 690, 692, 694, 
	696, 698, 700, 702, 704, 706, 708, 710, 
	712, 714, 716, 718, 720, 722, 724, 726, 
	728, 730, 732, 735, 737, 739, 741, 743, 
	745, 747, 749, 751, 753, 755, 757, 759, 
	761, 763, 765, 767, 769, 771, 773, 775, 
	777, 779, 781, 783, 785, 787, 789, 791, 
	793, 795, 797, 799, 801, 803, 805, 807, 
	809, 811, 813, 815, 817, 819, 821, 823, 
	825, 827, 829, 831, 833, 835, 837, 839, 
	841, 843, 845, 847, 849, 851, 853, 855, 
	857, 859, 861, 863, 865, 867, 869, 871, 
	873, 875, 877, 879, 881, 883, 885, 887, 
	889, 891, 893, 895, 897, 899, 901, 903, 
	905, 907, 908, 909, 910, 911, 912, 913, 
	914, 915, 916, 917, 918, 919, 920, 921, 
	922, 923, 924, 925, 926, 927, 928, 929, 
	930, 931, 932, 933, 934, 935, 937, 938, 
	939, 940, 941, 942, 943, 944, 945, 946, 
	947, 948, 949, 950, 951, 952, 953, 954, 
	955, 956, 957, 958, 959, 968, 970, 978, 
	980, 982, 984, 986, 988, 990, 992, 994, 
	996, 998, 1000, 1002, 1004, 1006, 1008, 1010, 
	1012, 1014, 1016, 1018, 1020, 1022, 1024, 1026, 
	1028, 1030, 1032, 1034, 1036, 1038, 1040, 1042, 
	1044, 1046, 1048, 1050, 1052, 1055, 1057, 1059, 
	1061, 1063, 1065, 1067, 1069, 1071, 1073, 1075, 
	1077, 1079, 1081, 1083, 1085, 1087, 1089, 1091, 
	1093, 1095, 1097, 1099, 1101, 1103, 1105, 1107, 
	1109, 1111, 1113, 1115, 1117, 1119, 1121, 1123, 
	1125, 1127, 1129, 1131, 1133, 1135, 1137, 1139, 
	1141, 1143, 1145, 1147, 1149, 1151, 1153, 1155, 
	1157, 1159, 1161, 1163, 1165, 1167, 1169, 1171, 
	1173, 1175, 1177, 1179, 1181, 1183, 1185, 1187, 
	1189, 1191, 1193, 1195, 1197, 1199, 1201, 1203, 
	1205, 1207, 1209, 1211, 1213, 1215, 1217, 1219, 
	1221, 1223, 1225, 1227, 1229, 1231, 1233, 1235, 
	1237, 1239, 1241, 1243, 1245, 1247, 1249, 1251, 
	1253, 1255, 1257, 1258, 1259, 1260, 1261, 1262, 
	1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 
	1271, 1272, 1273, 1281, 1283, 1288, 1290, 1292, 
	1294, 1296, 1298, 1300, 1302, 1304, 1306, 1308, 
	1310, 1312, 1314, 1316, 1318, 1320, 1322, 1324, 
	1326, 1328, 1330, 1332, 1334, 1336, 1338, 1340, 
	1342, 1344, 1346, 1348, 1350, 1352, 1354, 1356, 
	1358, 1360, 1362, 1364, 1366, 1368, 1370, 1372, 
	1374, 1376, 1378, 1380, 1382, 1384, 1386, 1388, 
	1390, 1392, 1394, 1396, 1398, 1400, 1402, 1404, 
	1406, 1408, 1410, 1412, 1414, 1416, 1418, 1420, 
	1422, 1424, 1427, 1429, 1431, 1433, 1435, 1437, 
	1439, 1441, 1443, 1445, 1447, 1449, 1451, 1453, 
	1455, 1457, 1459, 1461, 1463, 1465, 1467, 1469, 
	1471, 1473, 1475, 1477, 1479, 1481, 1483, 1485, 
	1487, 1489, 1491, 1493, 1495, 1497, 1499, 1501, 
	1503, 1505, 1507, 1509, 1511, 1513, 1514, 1515
];

var _lexer_trans_keys = [
	-32, 10, 32, 34, 35, 37, 42, 64, 
	124, 239, 9, 13, -78, -122, -119, -107, 
	-88, -82, -75, -72, -71, -32, -78, -90, 
	-32, -78, -80, -32, -77, -122, 32, 10, 
	13, 10, 13, -32, 10, 32, 34, 35, 
	37, 42, 64, 124, 9, 13, 34, 34, 
	10, 13, 10, 13, 10, 32, 34, 9, 
	13, 10, 32, 34, 9, 13, 10, 32, 
	34, 9, 13, 10, 32, 34, 9, 13, 
	10, 32, 9, 13, 10, 32, 9, 13, 
	10, 13, 10, 95, 70, 69, 65, 84, 
	85, 82, 69, 95, 69, 78, 68, 95, 
	37, 13, 32, 64, 9, 10, 9, 10, 
	13, 32, 64, 11, 12, 10, 32, 64, 
	9, 13, 32, 124, 9, 13, 10, 32, 
	92, 124, 9, 13, 10, 92, 124, 10, 
	92, 10, 32, 92, 124, 9, 13, -32, 
	10, 32, 34, 35, 37, 42, 64, 124, 
	9, 13, -32, -78, -90, -32, -78, -66, 
	-32, -78, -71, -32, -78, -80, -32, -78, 
	-93, -32, -77, -122, -32, -78, -105, -32, 
	-78, -77, -32, -77, -127, 58, 10, 10, 
	-32, 10, 32, 35, 124, 9, 13, -78, 
	10, -71, 10, -32, 10, -77, 10, -122, 
	10, -32, 10, -78, 10, -102, 10, -32, 
	10, -77, 10, -115, 10, -32, 10, -78, 
	10, -102, 10, -32, 10, -78, 10, -77, 
	10, 10, 58, -32, 10, 32, 34, 35, 
	37, 42, 64, 124, 9, 13, -32, -78, 
	-91, -32, -78, -66, -32, -78, -72, -32, 
	-78, -66, -32, -78, -80, -32, -78, -66, 
	-32, -78, -126, -32, -78, -74, 58, 10, 
	10, -32, 10, 32, 35, 37, 42, 64, 
	9, 13, -78, 10, -122, -107, -88, -82, 
	-75, -72, -71, 10, -32, 10, -78, 10, 
	-90, 10, -32, 10, -78, 10, -80, 10, 
	-32, 10, -77, 10, -122, 10, 10, 32, 
	-32, 10, -78, 10, -91, 10, -32, 10, 
	-78, 10, -66, 10, -32, 10, -78, 10, 
	-72, 10, -32, 10, -78, 10, -66, 10, 
	-32, 10, -78, 10, -80, 10, -32, 10, 
	-78, 10, -66, 10, -32, 10, -78, 10, 
	-126, 10, -32, 10, -78, 10, -74, 10, 
	10, 58, -32, 10, -78, 10, -126, -65, 
	10, -32, 10, -78, 10, -92, 10, -32, 
	10, -78, 10, -80, 10, -32, 10, -77, 
	10, -107, 10, -32, 10, -78, 10, -95, 
	10, -32, 10, -78, 10, -65, 10, -32, 
	10, -78, 10, -90, 10, -32, 10, -78, 
	10, -92, 10, -32, 10, -77, 10, -115, 
	10, -32, 10, -78, 10, -92, 10, -32, 
	10, -77, 10, -127, 10, -32, 10, -78, 
	10, -65, 10, -32, 10, -78, 10, -75, 
	10, -32, 10, -78, 10, -80, 10, -32, 
	10, -78, 10, -93, 10, -32, 10, -77, 
	10, -122, 10, -32, 10, -77, 10, -115, 
	10, -32, 10, -78, 10, -91, 10, -32, 
	10, -78, 10, -65, 10, -32, 10, -78, 
	10, -92, 10, -32, 10, -78, 10, -65, 
	10, -32, 10, -78, 10, -81, 10, -32, 
	10, -78, 10, -88, 10, -32, 10, -77, 
	10, -115, 10, -32, 10, -78, 10, -88, 
	10, -32, 10, -78, -77, 10, -65, 10, 
	-32, 10, -78, 10, -88, 10, -32, 10, 
	-77, 10, -115, 10, -32, 10, -78, 10, 
	-88, 10, -32, 10, -77, 10, -122, 10, 
	-32, 10, -78, 10, -78, 10, -122, 10, 
	-32, 10, -78, 10, -102, 10, -32, 10, 
	-77, 10, -115, 10, -32, 10, -78, 10, 
	-102, 10, -32, 10, -78, 10, -77, 10, 
	10, 95, 10, 70, 10, 69, 10, 65, 
	10, 84, 10, 85, 10, 82, 10, 69, 
	10, 95, 10, 69, 10, 78, 10, 68, 
	10, 95, 10, 37, -32, -78, -126, -65, 
	-32, -78, -92, -32, -78, -80, -32, -77, 
	-107, -32, -78, -95, -32, -78, -65, -32, 
	-78, -90, -32, -78, -92, -32, -77, -115, 
	-32, -78, -92, -32, -77, -127, -32, -78, 
	-65, -32, -78, -75, -32, -78, -80, -32, 
	-78, -93, -32, -77, -122, 58, 10, 10, 
	-32, 10, 32, 35, 37, 42, 64, 9, 
	13, -78, 10, -122, -107, -88, -82, -72, 
	-71, 10, -32, 10, -78, 10, -90, 10, 
	-32, 10, -78, 10, -80, 10, -32, 10, 
	-77, 10, -122, 10, 10, 32, -32, 10, 
	-78, 10, -91, 10, -32, 10, -78, 10, 
	-66, 10, -32, 10, -78, 10, -72, 10, 
	-32, 10, -78, 10, -66, 10, -32, 10, 
	-78, 10, -80, 10, -32, 10, -78, 10, 
	-66, 10, -32, 10, -78, 10, -126, 10, 
	-32, 10, -78, 10, -74, 10, 10, 58, 
	-32, 10, -78, 10, -126, -65, 10, -32, 
	10, -78, 10, -92, 10, -32, 10, -78, 
	10, -80, 10, -32, 10, -77, 10, -107, 
	10, -32, 10, -78, 10, -95, 10, -32, 
	10, -78, 10, -65, 10, -32, 10, -78, 
	10, -90, 10, -32, 10, -78, 10, -92, 
	10, -32, 10, -77, 10, -115, 10, -32, 
	10, -78, 10, -92, 10, -32, 10, -77, 
	10, -127, 10, -32, 10, -77, 10, -115, 
	10, -32, 10, -78, 10, -91, 10, -32, 
	10, -78, 10, -65, 10, -32, 10, -78, 
	10, -92, 10, -32, 10, -78, 10, -65, 
	10, -32, 10, -78, 10, -81, 10, -32, 
	10, -78, 10, -88, 10, -32, 10, -77, 
	10, -115, 10, -32, 10, -78, 10, -88, 
	10, -32, 10, -77, 10, -122, 10, -32, 
	10, -78, 10, -102, 10, -32, 10, -77, 
	10, -115, 10, -32, 10, -78, 10, -102, 
	10, -32, 10, -78, 10, -77, 10, 10, 
	95, 10, 70, 10, 69, 10, 65, 10, 
	84, 10, 85, 10, 82, 10, 69, 10, 
	95, 10, 69, 10, 78, 10, 68, 10, 
	95, 10, 37, -32, -77, -115, -32, -78, 
	-91, -32, -78, -65, -32, -78, -92, -32, 
	-78, -65, -32, -78, -81, -32, -78, -88, 
	-32, -77, -115, -32, -78, -88, -32, -78, 
	-77, -65, -32, -78, -88, -32, -77, -115, 
	-32, -78, -88, -32, -77, -122, -32, -78, 
	-78, -32, -77, -122, 58, 10, 10, -32, 
	10, 32, 35, 37, 42, 64, 9, 13, 
	-78, 10, -122, -107, -88, -82, -75, -72, 
	-71, 10, -32, 10, -78, 10, -90, 10, 
	-32, 10, -78, 10, -80, 10, -32, 10, 
	-77, 10, -122, 10, 10, 32, -32, 10, 
	-78, 10, -91, 10, -32, 10, -78, 10, 
	-66, 10, -32, 10, -78, 10, -72, 10, 
	-32, 10, -78, 10, -66, 10, -32, 10, 
	-78, 10, -80, 10, -32, 10, -78, 10, 
	-66, 10, -32, 10, -78, 10, -126, 10, 
	-32, 10, -78, 10, -74, 10, 10, 58, 
	-32, 10, -78, 10, -126, -65, 10, -32, 
	10, -78, 10, -92, 10, -32, 10, -78, 
	10, -80, 10, -32, 10, -77, 10, -107, 
	10, -32, 10, -78, 10, -95, 10, -32, 
	10, -78, 10, -65, 10, -32, 10, -78, 
	10, -90, 10, -32, 10, -78, 10, -92, 
	10, -32, 10, -77, 10, -115, 10, -32, 
	10, -78, 10, -92, 10, -32, 10, -77, 
	10, -127, 10, -32, 10, -78, 10, -65, 
	10, -32, 10, -78, 10, -75, 10, -32, 
	10, -78, 10, -80, 10, -32, 10, -78, 
	10, -93, 10, -32, 10, -77, 10, -122, 
	10, -32, 10, -77, 10, -115, 10, -32, 
	10, -78, 10, -91, 10, -32, 10, -78, 
	10, -65, 10, -32, 10, -78, 10, -92, 
	10, -32, 10, -78, 10, -65, 10, -32, 
	10, -78, 10, -81, 10, -32, 10, -78, 
	10, -88, 10, -32, 10, -77, 10, -115, 
	10, -32, 10, -78, 10, -88, 10, -32, 
	10, -77, 10, -122, 10, -32, 10, -78, 
	10, -102, 10, -32, 10, -77, 10, -115, 
	10, -32, 10, -78, 10, -102, 10, -32, 
	10, -78, 10, -77, 10, 10, 95, 10, 
	70, 10, 69, 10, 65, 10, 84, 10, 
	85, 10, 82, 10, 69, 10, 95, 10, 
	69, 10, 78, 10, 68, 10, 95, 10, 
	37, -122, -32, -78, -102, -32, -77, -115, 
	-32, -78, -102, -32, -78, -77, 58, 10, 
	10, -32, 10, 32, 35, 37, 64, 9, 
	13, -78, 10, -119, -107, -75, -71, 10, 
	-32, 10, -78, 10, -90, 10, -32, 10, 
	-78, 10, -66, 10, -32, 10, -78, 10, 
	-71, 10, -32, 10, -78, 10, -80, 10, 
	-32, 10, -78, 10, -93, 10, -32, 10, 
	-77, 10, -122, 10, -32, 10, -78, 10, 
	-105, 10, -32, 10, -78, 10, -77, 10, 
	-32, 10, -77, 10, -127, 10, 10, 58, 
	-32, 10, -78, 10, -91, 10, -32, 10, 
	-78, 10, -66, 10, -32, 10, -78, 10, 
	-72, 10, -32, 10, -78, 10, -66, 10, 
	-32, 10, -78, 10, -80, 10, -32, 10, 
	-78, 10, -66, 10, -32, 10, -78, 10, 
	-126, 10, -32, 10, -78, 10, -74, 10, 
	-32, 10, -78, 10, -65, 10, -32, 10, 
	-78, 10, -75, 10, -32, 10, -78, 10, 
	-80, 10, -32, 10, -78, 10, -93, 10, 
	-32, 10, -77, 10, -122, 10, -32, 10, 
	-78, -77, 10, -65, 10, -32, 10, -78, 
	10, -88, 10, -32, 10, -77, 10, -115, 
	10, -32, 10, -78, 10, -88, 10, -32, 
	10, -77, 10, -122, 10, -32, 10, -78, 
	10, -78, 10, -122, 10, -32, 10, -78, 
	10, -102, 10, -32, 10, -77, 10, -115, 
	10, -32, 10, -78, 10, -102, 10, -32, 
	10, -78, 10, -77, 10, 10, 95, 10, 
	70, 10, 69, 10, 65, 10, 84, 10, 
	85, 10, 82, 10, 69, 10, 95, 10, 
	69, 10, 78, 10, 68, 10, 95, 10, 
	37, 187, 191, 0
];

var _lexer_single_lengths = [
	0, 10, 1, 8, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 2, 2, 
	9, 1, 1, 2, 2, 3, 3, 3, 
	3, 2, 2, 2, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 3, 5, 3, 2, 4, 
	3, 2, 4, 9, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 5, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 9, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 7, 2, 8, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 3, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 3, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 1, 
	1, 2, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 7, 2, 7, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 3, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 2, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 7, 2, 8, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 3, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 6, 2, 5, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 3, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 1, 1, 0
];

var _lexer_range_lengths = [
	0, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 0, 0, 0, 0, 1, 1, 1, 
	1, 1, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 1, 1, 1, 1, 
	0, 0, 1, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0
];

var _lexer_index_offsets = [
	0, 0, 12, 14, 23, 25, 27, 29, 
	31, 33, 35, 37, 39, 41, 43, 46, 
	49, 60, 62, 64, 67, 70, 75, 80, 
	85, 90, 94, 98, 101, 103, 105, 107, 
	109, 111, 113, 115, 117, 119, 121, 123, 
	125, 127, 129, 131, 136, 143, 148, 152, 
	158, 162, 165, 171, 182, 184, 186, 188, 
	190, 192, 194, 196, 198, 200, 202, 204, 
	206, 208, 210, 212, 214, 216, 218, 220, 
	222, 224, 226, 228, 230, 232, 234, 236, 
	238, 240, 242, 249, 252, 255, 258, 261, 
	264, 267, 270, 273, 276, 279, 282, 285, 
	288, 291, 294, 297, 300, 303, 314, 316, 
	318, 320, 322, 324, 326, 328, 330, 332, 
	334, 336, 338, 340, 342, 344, 346, 348, 
	350, 352, 354, 356, 358, 360, 362, 364, 
	366, 368, 377, 380, 389, 392, 395, 398, 
	401, 404, 407, 410, 413, 416, 419, 422, 
	425, 428, 431, 434, 437, 440, 443, 446, 
	449, 452, 455, 458, 461, 464, 467, 470, 
	473, 476, 479, 482, 485, 488, 491, 494, 
	497, 500, 504, 507, 510, 513, 516, 519, 
	522, 525, 528, 531, 534, 537, 540, 543, 
	546, 549, 552, 555, 558, 561, 564, 567, 
	570, 573, 576, 579, 582, 585, 588, 591, 
	594, 597, 600, 603, 606, 609, 612, 615, 
	618, 621, 624, 627, 630, 633, 636, 639, 
	642, 645, 648, 651, 654, 657, 660, 663, 
	666, 669, 672, 675, 678, 681, 684, 687, 
	690, 693, 696, 699, 702, 705, 708, 711, 
	714, 717, 720, 723, 727, 730, 733, 736, 
	739, 742, 745, 748, 751, 754, 757, 760, 
	763, 766, 769, 772, 775, 778, 781, 784, 
	787, 790, 793, 796, 799, 802, 805, 808, 
	811, 814, 817, 820, 823, 826, 829, 832, 
	835, 838, 841, 844, 847, 850, 853, 856, 
	858, 860, 863, 865, 867, 869, 871, 873, 
	875, 877, 879, 881, 883, 885, 887, 889, 
	891, 893, 895, 897, 899, 901, 903, 905, 
	907, 909, 911, 913, 915, 917, 919, 921, 
	923, 925, 927, 929, 931, 933, 935, 937, 
	939, 941, 943, 945, 947, 949, 951, 953, 
	955, 957, 959, 968, 971, 979, 982, 985, 
	988, 991, 994, 997, 1000, 1003, 1006, 1009, 
	1012, 1015, 1018, 1021, 1024, 1027, 1030, 1033, 
	1036, 1039, 1042, 1045, 1048, 1051, 1054, 1057, 
	1060, 1063, 1066, 1069, 1072, 1075, 1078, 1081, 
	1084, 1087, 1090, 1094, 1097, 1100, 1103, 1106, 
	1109, 1112, 1115, 1118, 1121, 1124, 1127, 1130, 
	1133, 1136, 1139, 1142, 1145, 1148, 1151, 1154, 
	1157, 1160, 1163, 1166, 1169, 1172, 1175, 1178, 
	1181, 1184, 1187, 1190, 1193, 1196, 1199, 1202, 
	1205, 1208, 1211, 1214, 1217, 1220, 1223, 1226, 
	1229, 1232, 1235, 1238, 1241, 1244, 1247, 1250, 
	1253, 1256, 1259, 1262, 1265, 1268, 1271, 1274, 
	1277, 1280, 1283, 1286, 1289, 1292, 1295, 1298, 
	1301, 1304, 1307, 1310, 1313, 1316, 1319, 1322, 
	1325, 1328, 1331, 1334, 1337, 1340, 1343, 1346, 
	1349, 1352, 1354, 1356, 1358, 1360, 1362, 1364, 
	1366, 1368, 1370, 1372, 1374, 1376, 1378, 1380, 
	1382, 1384, 1386, 1388, 1390, 1392, 1394, 1396, 
	1398, 1400, 1402, 1404, 1406, 1408, 1411, 1413, 
	1415, 1417, 1419, 1421, 1423, 1425, 1427, 1429, 
	1431, 1433, 1435, 1437, 1439, 1441, 1443, 1445, 
	1447, 1449, 1451, 1453, 1455, 1464, 1467, 1476, 
	1479, 1482, 1485, 1488, 1491, 1494, 1497, 1500, 
	1503, 1506, 1509, 1512, 1515, 1518, 1521, 1524, 
	1527, 1530, 1533, 1536, 1539, 1542, 1545, 1548, 
	1551, 1554, 1557, 1560, 1563, 1566, 1569, 1572, 
	1575, 1578, 1581, 1584, 1587, 1591, 1594, 1597, 
	1600, 1603, 1606, 1609, 1612, 1615, 1618, 1621, 
	1624, 1627, 1630, 1633, 1636, 1639, 1642, 1645, 
	1648, 1651, 1654, 1657, 1660, 1663, 1666, 1669, 
	1672, 1675, 1678, 1681, 1684, 1687, 1690, 1693, 
	1696, 1699, 1702, 1705, 1708, 1711, 1714, 1717, 
	1720, 1723, 1726, 1729, 1732, 1735, 1738, 1741, 
	1744, 1747, 1750, 1753, 1756, 1759, 1762, 1765, 
	1768, 1771, 1774, 1777, 1780, 1783, 1786, 1789, 
	1792, 1795, 1798, 1801, 1804, 1807, 1810, 1813, 
	1816, 1819, 1822, 1825, 1828, 1831, 1834, 1837, 
	1840, 1843, 1846, 1849, 1852, 1855, 1858, 1861, 
	1864, 1867, 1870, 1873, 1876, 1879, 1882, 1885, 
	1888, 1891, 1894, 1896, 1898, 1900, 1902, 1904, 
	1906, 1908, 1910, 1912, 1914, 1916, 1918, 1920, 
	1922, 1924, 1926, 1934, 1937, 1943, 1946, 1949, 
	1952, 1955, 1958, 1961, 1964, 1967, 1970, 1973, 
	1976, 1979, 1982, 1985, 1988, 1991, 1994, 1997, 
	2000, 2003, 2006, 2009, 2012, 2015, 2018, 2021, 
	2024, 2027, 2030, 2033, 2036, 2039, 2042, 2045, 
	2048, 2051, 2054, 2057, 2060, 2063, 2066, 2069, 
	2072, 2075, 2078, 2081, 2084, 2087, 2090, 2093, 
	2096, 2099, 2102, 2105, 2108, 2111, 2114, 2117, 
	2120, 2123, 2126, 2129, 2132, 2135, 2138, 2141, 
	2144, 2147, 2151, 2154, 2157, 2160, 2163, 2166, 
	2169, 2172, 2175, 2178, 2181, 2184, 2187, 2190, 
	2193, 2196, 2199, 2202, 2205, 2208, 2211, 2214, 
	2217, 2220, 2223, 2226, 2229, 2232, 2235, 2238, 
	2241, 2244, 2247, 2250, 2253, 2256, 2259, 2262, 
	2265, 2268, 2271, 2274, 2277, 2280, 2282, 2284
];

var _lexer_indicies = [
	1, 3, 2, 4, 5, 6, 7, 8, 
	9, 10, 2, 0, 11, 0, 12, 13, 
	14, 15, 16, 17, 18, 19, 0, 20, 
	0, 21, 0, 22, 0, 23, 0, 24, 
	0, 25, 0, 26, 0, 27, 0, 28, 
	0, 29, 0, 31, 32, 30, 34, 35, 
	33, 1, 3, 2, 4, 5, 6, 7, 
	8, 9, 2, 0, 36, 0, 37, 0, 
	39, 40, 38, 42, 43, 41, 46, 45, 
	47, 45, 44, 50, 49, 51, 49, 48, 
	50, 49, 52, 49, 48, 50, 49, 53, 
	49, 48, 55, 54, 54, 0, 3, 56, 
	56, 0, 58, 59, 57, 3, 0, 60, 
	0, 61, 0, 62, 0, 63, 0, 64, 
	0, 65, 0, 66, 0, 67, 0, 68, 
	0, 69, 0, 70, 0, 71, 0, 72, 
	0, 73, 0, 0, 0, 0, 0, 74, 
	75, 76, 75, 75, 78, 77, 74, 3, 
	79, 8, 79, 0, 80, 81, 80, 0, 
	84, 83, 85, 86, 83, 82, 0, 88, 
	89, 87, 0, 88, 87, 84, 90, 88, 
	89, 90, 87, 91, 84, 92, 93, 94, 
	95, 96, 97, 98, 92, 0, 99, 0, 
	100, 0, 101, 0, 102, 0, 103, 0, 
	104, 0, 105, 0, 106, 0, 107, 0, 
	108, 0, 109, 0, 110, 0, 111, 0, 
	112, 0, 113, 0, 114, 0, 115, 0, 
	116, 0, 117, 0, 118, 0, 119, 0, 
	120, 0, 121, 0, 122, 0, 123, 0, 
	124, 0, 125, 0, 126, 0, 128, 127, 
	130, 129, 131, 130, 132, 133, 133, 132, 
	129, 134, 130, 129, 135, 130, 129, 136, 
	130, 129, 137, 130, 129, 138, 130, 129, 
	139, 130, 129, 140, 130, 129, 141, 130, 
	129, 142, 130, 129, 143, 130, 129, 144, 
	130, 129, 145, 130, 129, 146, 130, 129, 
	147, 130, 129, 148, 130, 129, 149, 130, 
	129, 150, 130, 129, 130, 151, 129, 152, 
	154, 153, 155, 156, 157, 158, 159, 160, 
	153, 0, 161, 0, 162, 0, 163, 0, 
	164, 0, 165, 0, 166, 0, 167, 0, 
	168, 0, 169, 0, 170, 0, 171, 0, 
	172, 0, 173, 0, 174, 0, 175, 0, 
	176, 0, 177, 0, 178, 0, 179, 0, 
	180, 0, 181, 0, 182, 0, 183, 0, 
	184, 0, 185, 0, 187, 186, 189, 188, 
	190, 189, 191, 192, 193, 194, 192, 191, 
	188, 195, 189, 188, 196, 197, 198, 199, 
	200, 201, 202, 189, 188, 203, 189, 188, 
	204, 189, 188, 205, 189, 188, 206, 189, 
	188, 207, 189, 188, 208, 189, 188, 209, 
	189, 188, 210, 189, 188, 211, 189, 188, 
	189, 212, 188, 213, 189, 188, 214, 189, 
	188, 215, 189, 188, 216, 189, 188, 217, 
	189, 188, 218, 189, 188, 219, 189, 188, 
	220, 189, 188, 221, 189, 188, 222, 189, 
	188, 223, 189, 188, 224, 189, 188, 225, 
	189, 188, 226, 189, 188, 227, 189, 188, 
	228, 189, 188, 229, 189, 188, 230, 189, 
	188, 231, 189, 188, 232, 189, 188, 233, 
	189, 188, 234, 189, 188, 235, 189, 188, 
	236, 189, 188, 189, 212, 188, 237, 189, 
	188, 238, 189, 188, 239, 240, 189, 188, 
	241, 189, 188, 242, 189, 188, 243, 189, 
	188, 244, 189, 188, 245, 189, 188, 211, 
	189, 188, 246, 189, 188, 247, 189, 188, 
	248, 189, 188, 249, 189, 188, 250, 189, 
	188, 251, 189, 188, 252, 189, 188, 253, 
	189, 188, 254, 189, 188, 255, 189, 188, 
	256, 189, 188, 211, 189, 188, 257, 189, 
	188, 258, 189, 188, 259, 189, 188, 260, 
	189, 188, 261, 189, 188, 262, 189, 188, 
	263, 189, 188, 264, 189, 188, 265, 189, 
	188, 266, 189, 188, 267, 189, 188, 211, 
	189, 188, 268, 189, 188, 269, 189, 188, 
	270, 189, 188, 271, 189, 188, 272, 189, 
	188, 273, 189, 188, 274, 189, 188, 275, 
	189, 188, 276, 189, 188, 277, 189, 188, 
	278, 189, 188, 279, 189, 188, 280, 189, 
	188, 281, 189, 188, 236, 189, 188, 282, 
	189, 188, 283, 189, 188, 284, 189, 188, 
	285, 189, 188, 286, 189, 188, 287, 189, 
	188, 288, 189, 188, 289, 189, 188, 290, 
	189, 188, 291, 189, 188, 292, 189, 188, 
	293, 189, 188, 294, 189, 188, 295, 189, 
	188, 296, 189, 188, 297, 189, 188, 298, 
	189, 188, 299, 189, 188, 300, 189, 188, 
	301, 189, 188, 302, 189, 188, 303, 189, 
	188, 304, 189, 188, 305, 189, 188, 306, 
	189, 188, 307, 189, 188, 265, 189, 188, 
	308, 189, 188, 309, 310, 189, 188, 311, 
	189, 188, 312, 189, 188, 313, 189, 188, 
	314, 189, 188, 315, 189, 188, 316, 189, 
	188, 317, 189, 188, 318, 189, 188, 319, 
	189, 188, 320, 189, 188, 321, 189, 188, 
	322, 189, 188, 323, 189, 188, 324, 189, 
	188, 325, 189, 188, 279, 189, 188, 326, 
	189, 188, 327, 189, 188, 328, 189, 188, 
	329, 189, 188, 330, 189, 188, 331, 189, 
	188, 332, 189, 188, 333, 189, 188, 334, 
	189, 188, 335, 189, 188, 336, 189, 188, 
	337, 189, 188, 236, 189, 188, 189, 338, 
	188, 189, 339, 188, 189, 340, 188, 189, 
	341, 188, 189, 342, 188, 189, 343, 188, 
	189, 344, 188, 189, 345, 188, 189, 346, 
	188, 189, 347, 188, 189, 348, 188, 189, 
	349, 188, 189, 350, 188, 189, 351, 188, 
	352, 0, 353, 0, 354, 355, 0, 356, 
	0, 357, 0, 358, 0, 359, 0, 360, 
	0, 28, 0, 361, 0, 362, 0, 363, 
	0, 364, 0, 365, 0, 366, 0, 367, 
	0, 368, 0, 369, 0, 370, 0, 371, 
	0, 28, 0, 372, 0, 373, 0, 374, 
	0, 375, 0, 376, 0, 377, 0, 378, 
	0, 379, 0, 380, 0, 381, 0, 382, 
	0, 28, 0, 383, 0, 384, 0, 385, 
	0, 386, 0, 387, 0, 388, 0, 389, 
	0, 390, 0, 391, 0, 392, 0, 393, 
	0, 394, 0, 395, 0, 396, 0, 397, 
	0, 398, 0, 400, 399, 402, 401, 403, 
	402, 404, 405, 406, 407, 405, 404, 401, 
	408, 402, 401, 409, 410, 411, 412, 413, 
	414, 402, 401, 415, 402, 401, 416, 402, 
	401, 417, 402, 401, 418, 402, 401, 419, 
	402, 401, 420, 402, 401, 421, 402, 401, 
	422, 402, 401, 423, 402, 401, 402, 424, 
	401, 425, 402, 401, 426, 402, 401, 427, 
	402, 401, 428, 402, 401, 429, 402, 401, 
	430, 402, 401, 431, 402, 401, 432, 402, 
	401, 433, 402, 401, 434, 402, 401, 435, 
	402, 401, 436, 402, 401, 437, 402, 401, 
	438, 402, 401, 439, 402, 401, 440, 402, 
	401, 441, 402, 401, 442, 402, 401, 443, 
	402, 401, 444, 402, 401, 445, 402, 401, 
	446, 402, 401, 447, 402, 401, 448, 402, 
	401, 402, 424, 401, 449, 402, 401, 450, 
	402, 401, 451, 452, 402, 401, 453, 402, 
	401, 454, 402, 401, 455, 402, 401, 456, 
	402, 401, 457, 402, 401, 423, 402, 401, 
	458, 402, 401, 459, 402, 401, 460, 402, 
	401, 461, 402, 401, 462, 402, 401, 463, 
	402, 401, 464, 402, 401, 465, 402, 401, 
	466, 402, 401, 467, 402, 401, 468, 402, 
	401, 423, 402, 401, 469, 402, 401, 470, 
	402, 401, 471, 402, 401, 472, 402, 401, 
	473, 402, 401, 474, 402, 401, 475, 402, 
	401, 476, 402, 401, 477, 402, 401, 478, 
	402, 401, 479, 402, 401, 423, 402, 401, 
	480, 402, 401, 481, 402, 401, 482, 402, 
	401, 483, 402, 401, 484, 402, 401, 485, 
	402, 401, 486, 402, 401, 487, 402, 401, 
	488, 402, 401, 489, 402, 401, 490, 402, 
	401, 491, 402, 401, 492, 402, 401, 493, 
	402, 401, 494, 402, 401, 495, 402, 401, 
	496, 402, 401, 497, 402, 401, 498, 402, 
	401, 499, 402, 401, 500, 402, 401, 501, 
	402, 401, 502, 402, 401, 503, 402, 401, 
	504, 402, 401, 505, 402, 401, 477, 402, 
	401, 506, 402, 401, 507, 402, 401, 508, 
	402, 401, 509, 402, 401, 510, 402, 401, 
	511, 402, 401, 512, 402, 401, 513, 402, 
	401, 514, 402, 401, 515, 402, 401, 516, 
	402, 401, 517, 402, 401, 518, 402, 401, 
	519, 402, 401, 448, 402, 401, 402, 520, 
	401, 402, 521, 401, 402, 522, 401, 402, 
	523, 401, 402, 524, 401, 402, 525, 401, 
	402, 526, 401, 402, 527, 401, 402, 528, 
	401, 402, 529, 401, 402, 530, 401, 402, 
	531, 401, 402, 532, 401, 402, 533, 401, 
	534, 0, 535, 0, 536, 0, 537, 0, 
	538, 0, 539, 0, 540, 0, 541, 0, 
	542, 0, 543, 0, 544, 0, 545, 0, 
	546, 0, 547, 0, 548, 0, 549, 0, 
	550, 0, 551, 0, 552, 0, 553, 0, 
	554, 0, 555, 0, 556, 0, 557, 0, 
	558, 0, 559, 0, 380, 0, 560, 0, 
	561, 562, 0, 563, 0, 564, 0, 565, 
	0, 566, 0, 567, 0, 568, 0, 569, 
	0, 570, 0, 571, 0, 572, 0, 573, 
	0, 574, 0, 575, 0, 576, 0, 577, 
	0, 578, 0, 579, 0, 580, 0, 581, 
	0, 582, 0, 584, 583, 586, 585, 587, 
	586, 588, 589, 590, 591, 589, 588, 585, 
	592, 586, 585, 593, 594, 595, 596, 597, 
	598, 599, 586, 585, 600, 586, 585, 601, 
	586, 585, 602, 586, 585, 603, 586, 585, 
	604, 586, 585, 605, 586, 585, 606, 586, 
	585, 607, 586, 585, 608, 586, 585, 586, 
	609, 585, 610, 586, 585, 611, 586, 585, 
	612, 586, 585, 613, 586, 585, 614, 586, 
	585, 615, 586, 585, 616, 586, 585, 617, 
	586, 585, 618, 586, 585, 619, 586, 585, 
	620, 586, 585, 621, 586, 585, 622, 586, 
	585, 623, 586, 585, 624, 586, 585, 625, 
	586, 585, 626, 586, 585, 627, 586, 585, 
	628, 586, 585, 629, 586, 585, 630, 586, 
	585, 631, 586, 585, 632, 586, 585, 633, 
	586, 585, 586, 609, 585, 634, 586, 585, 
	635, 586, 585, 636, 637, 586, 585, 638, 
	586, 585, 639, 586, 585, 640, 586, 585, 
	641, 586, 585, 642, 586, 585, 608, 586, 
	585, 643, 586, 585, 644, 586, 585, 645, 
	586, 585, 646, 586, 585, 647, 586, 585, 
	648, 586, 585, 649, 586, 585, 650, 586, 
	585, 651, 586, 585, 652, 586, 585, 653, 
	586, 585, 608, 586, 585, 654, 586, 585, 
	655, 586, 585, 656, 586, 585, 657, 586, 
	585, 658, 586, 585, 659, 586, 585, 660, 
	586, 585, 661, 586, 585, 662, 586, 585, 
	663, 586, 585, 664, 586, 585, 608, 586, 
	585, 665, 586, 585, 666, 586, 585, 667, 
	586, 585, 668, 586, 585, 669, 586, 585, 
	670, 586, 585, 671, 586, 585, 672, 586, 
	585, 673, 586, 585, 674, 586, 585, 675, 
	586, 585, 676, 586, 585, 677, 586, 585, 
	678, 586, 585, 633, 586, 585, 679, 586, 
	585, 680, 586, 585, 681, 586, 585, 682, 
	586, 585, 683, 586, 585, 684, 586, 585, 
	685, 586, 585, 686, 586, 585, 687, 586, 
	585, 688, 586, 585, 689, 586, 585, 690, 
	586, 585, 691, 586, 585, 692, 586, 585, 
	693, 586, 585, 694, 586, 585, 695, 586, 
	585, 696, 586, 585, 697, 586, 585, 698, 
	586, 585, 699, 586, 585, 700, 586, 585, 
	701, 586, 585, 702, 586, 585, 703, 586, 
	585, 704, 586, 585, 662, 586, 585, 705, 
	586, 585, 706, 586, 585, 707, 586, 585, 
	708, 586, 585, 709, 586, 585, 710, 586, 
	585, 711, 586, 585, 712, 586, 585, 713, 
	586, 585, 714, 586, 585, 715, 586, 585, 
	716, 586, 585, 717, 586, 585, 718, 586, 
	585, 633, 586, 585, 586, 719, 585, 586, 
	720, 585, 586, 721, 585, 586, 722, 585, 
	586, 723, 585, 586, 724, 585, 586, 725, 
	585, 586, 726, 585, 586, 727, 585, 586, 
	728, 585, 586, 729, 585, 586, 730, 585, 
	586, 731, 585, 586, 732, 585, 733, 0, 
	734, 0, 735, 0, 736, 0, 737, 0, 
	738, 0, 739, 0, 740, 0, 741, 0, 
	742, 0, 743, 0, 744, 0, 745, 0, 
	746, 0, 748, 747, 750, 749, 751, 750, 
	752, 753, 754, 753, 752, 749, 755, 750, 
	749, 756, 757, 758, 759, 750, 749, 760, 
	750, 749, 761, 750, 749, 762, 750, 749, 
	763, 750, 749, 764, 750, 749, 765, 750, 
	749, 766, 750, 749, 767, 750, 749, 768, 
	750, 749, 769, 750, 749, 770, 750, 749, 
	771, 750, 749, 772, 750, 749, 773, 750, 
	749, 774, 750, 749, 775, 750, 749, 776, 
	750, 749, 777, 750, 749, 778, 750, 749, 
	779, 750, 749, 780, 750, 749, 781, 750, 
	749, 782, 750, 749, 783, 750, 749, 784, 
	750, 749, 785, 750, 749, 786, 750, 749, 
	750, 787, 749, 788, 750, 749, 789, 750, 
	749, 790, 750, 749, 791, 750, 749, 792, 
	750, 749, 793, 750, 749, 794, 750, 749, 
	795, 750, 749, 796, 750, 749, 797, 750, 
	749, 798, 750, 749, 799, 750, 749, 800, 
	750, 749, 801, 750, 749, 802, 750, 749, 
	803, 750, 749, 804, 750, 749, 805, 750, 
	749, 806, 750, 749, 807, 750, 749, 808, 
	750, 749, 809, 750, 749, 810, 750, 749, 
	786, 750, 749, 811, 750, 749, 812, 750, 
	749, 813, 750, 749, 814, 750, 749, 815, 
	750, 749, 816, 750, 749, 817, 750, 749, 
	818, 750, 749, 819, 750, 749, 820, 750, 
	749, 821, 750, 749, 822, 750, 749, 823, 
	750, 749, 824, 750, 749, 786, 750, 749, 
	825, 750, 749, 826, 827, 750, 749, 828, 
	750, 749, 829, 750, 749, 830, 750, 749, 
	831, 750, 749, 832, 750, 749, 833, 750, 
	749, 834, 750, 749, 835, 750, 749, 836, 
	750, 749, 837, 750, 749, 838, 750, 749, 
	839, 750, 749, 840, 750, 749, 841, 750, 
	749, 842, 750, 749, 822, 750, 749, 843, 
	750, 749, 844, 750, 749, 845, 750, 749, 
	846, 750, 749, 847, 750, 749, 848, 750, 
	749, 849, 750, 749, 850, 750, 749, 851, 
	750, 749, 852, 750, 749, 853, 750, 749, 
	854, 750, 749, 786, 750, 749, 750, 855, 
	749, 750, 856, 749, 750, 857, 749, 750, 
	858, 749, 750, 859, 749, 750, 860, 749, 
	750, 861, 749, 750, 862, 749, 750, 863, 
	749, 750, 864, 749, 750, 865, 749, 750, 
	866, 749, 750, 867, 749, 750, 868, 749, 
	869, 0, 2, 0, 870, 0
];

var _lexer_trans_targs = [
	0, 2, 16, 16, 17, 27, 29, 13, 
	43, 46, 789, 3, 4, 52, 102, 287, 
	308, 320, 465, 492, 5, 6, 7, 8, 
	9, 10, 11, 12, 13, 14, 15, 16, 
	28, 15, 16, 28, 18, 19, 20, 21, 
	20, 20, 21, 20, 22, 22, 22, 23, 
	22, 22, 22, 23, 24, 25, 26, 16, 
	26, 27, 16, 28, 30, 31, 32, 33, 
	34, 35, 36, 37, 38, 39, 40, 41, 
	42, 791, 44, 45, 16, 44, 43, 45, 
	46, 47, 48, 50, 51, 49, 47, 48, 
	49, 47, 50, 2, 51, 17, 27, 29, 
	13, 43, 46, 53, 54, 55, 56, 57, 
	58, 59, 60, 61, 62, 63, 64, 65, 
	66, 67, 68, 69, 70, 71, 72, 73, 
	74, 75, 76, 77, 78, 79, 80, 81, 
	82, 81, 82, 83, 82, 16, 84, 85, 
	86, 87, 88, 89, 90, 91, 92, 93, 
	94, 95, 96, 97, 98, 99, 100, 101, 
	2, 16, 16, 17, 27, 29, 13, 43, 
	46, 103, 104, 105, 106, 107, 108, 109, 
	110, 111, 112, 113, 114, 115, 116, 117, 
	118, 119, 120, 121, 122, 123, 124, 125, 
	126, 127, 128, 129, 128, 129, 130, 129, 
	16, 273, 141, 131, 132, 142, 167, 188, 
	200, 215, 242, 133, 134, 135, 136, 137, 
	138, 139, 140, 141, 101, 143, 144, 145, 
	146, 147, 148, 149, 150, 151, 152, 153, 
	154, 155, 156, 157, 158, 159, 160, 161, 
	162, 163, 164, 165, 166, 168, 169, 170, 
	176, 171, 172, 173, 174, 175, 177, 178, 
	179, 180, 181, 182, 183, 184, 185, 186, 
	187, 189, 190, 191, 192, 193, 194, 195, 
	196, 197, 198, 199, 201, 202, 203, 204, 
	205, 206, 207, 208, 209, 210, 211, 212, 
	213, 214, 216, 217, 218, 219, 220, 221, 
	222, 223, 224, 225, 226, 227, 228, 229, 
	230, 231, 232, 233, 234, 235, 236, 237, 
	238, 239, 240, 241, 243, 244, 260, 245, 
	246, 247, 248, 249, 250, 251, 252, 253, 
	254, 255, 256, 257, 258, 259, 261, 262, 
	263, 264, 265, 266, 267, 268, 269, 270, 
	271, 272, 274, 275, 276, 277, 278, 279, 
	280, 281, 282, 283, 284, 285, 286, 16, 
	288, 289, 290, 296, 291, 292, 293, 294, 
	295, 297, 298, 299, 300, 301, 302, 303, 
	304, 305, 306, 307, 309, 310, 311, 312, 
	313, 314, 315, 316, 317, 318, 319, 321, 
	322, 323, 324, 325, 326, 327, 328, 329, 
	330, 331, 332, 333, 334, 335, 336, 337, 
	338, 337, 338, 339, 338, 16, 451, 350, 
	340, 341, 351, 376, 397, 409, 436, 342, 
	343, 344, 345, 346, 347, 348, 349, 350, 
	101, 352, 353, 354, 355, 356, 357, 358, 
	359, 360, 361, 362, 363, 364, 365, 366, 
	367, 368, 369, 370, 371, 372, 373, 374, 
	375, 377, 378, 379, 385, 380, 381, 382, 
	383, 384, 386, 387, 388, 389, 390, 391, 
	392, 393, 394, 395, 396, 398, 399, 400, 
	401, 402, 403, 404, 405, 406, 407, 408, 
	410, 411, 412, 413, 414, 415, 416, 417, 
	418, 419, 420, 421, 422, 423, 424, 425, 
	426, 427, 428, 429, 430, 431, 432, 433, 
	434, 435, 437, 438, 439, 440, 441, 442, 
	443, 444, 445, 446, 447, 448, 449, 450, 
	452, 453, 454, 455, 456, 457, 458, 459, 
	460, 461, 462, 463, 464, 16, 466, 467, 
	468, 469, 470, 471, 472, 473, 474, 475, 
	476, 477, 478, 479, 480, 481, 482, 483, 
	484, 485, 486, 487, 488, 489, 490, 491, 
	493, 494, 658, 495, 496, 497, 498, 499, 
	500, 501, 502, 503, 504, 505, 506, 507, 
	508, 509, 510, 511, 512, 513, 514, 515, 
	516, 515, 516, 517, 516, 16, 644, 528, 
	518, 519, 529, 554, 575, 587, 602, 629, 
	520, 521, 522, 523, 524, 525, 526, 527, 
	528, 101, 530, 531, 532, 533, 534, 535, 
	536, 537, 538, 539, 540, 541, 542, 543, 
	544, 545, 546, 547, 548, 549, 550, 551, 
	552, 553, 555, 556, 557, 563, 558, 559, 
	560, 561, 562, 564, 565, 566, 567, 568, 
	569, 570, 571, 572, 573, 574, 576, 577, 
	578, 579, 580, 581, 582, 583, 584, 585, 
	586, 588, 589, 590, 591, 592, 593, 594, 
	595, 596, 597, 598, 599, 600, 601, 603, 
	604, 605, 606, 607, 608, 609, 610, 611, 
	612, 613, 614, 615, 616, 617, 618, 619, 
	620, 621, 622, 623, 624, 625, 626, 627, 
	628, 630, 631, 632, 633, 634, 635, 636, 
	637, 638, 639, 640, 641, 642, 643, 645, 
	646, 647, 648, 649, 650, 651, 652, 653, 
	654, 655, 656, 657, 16, 659, 660, 661, 
	662, 663, 664, 665, 666, 667, 668, 669, 
	670, 671, 672, 673, 674, 673, 674, 675, 
	674, 16, 775, 676, 677, 705, 729, 744, 
	678, 679, 680, 681, 682, 683, 684, 685, 
	686, 687, 688, 689, 690, 691, 692, 693, 
	694, 695, 696, 697, 698, 699, 700, 701, 
	702, 703, 704, 101, 706, 707, 708, 709, 
	710, 711, 712, 713, 714, 715, 716, 717, 
	718, 719, 720, 721, 722, 723, 724, 725, 
	726, 727, 728, 730, 731, 732, 733, 734, 
	735, 736, 737, 738, 739, 740, 741, 742, 
	743, 745, 746, 762, 747, 748, 749, 750, 
	751, 752, 753, 754, 755, 756, 757, 758, 
	759, 760, 761, 763, 764, 765, 766, 767, 
	768, 769, 770, 771, 772, 773, 774, 776, 
	777, 778, 779, 780, 781, 782, 783, 784, 
	785, 786, 787, 788, 16, 790, 0
];

var _lexer_trans_actions = [
	43, 29, 0, 54, 3, 1, 0, 29, 
	1, 35, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 57, 149, 
	126, 0, 110, 23, 0, 0, 7, 139, 
	48, 0, 102, 9, 5, 45, 134, 45, 
	0, 33, 122, 33, 33, 0, 11, 106, 
	0, 0, 114, 25, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 27, 118, 27, 51, 0, 
	0, 0, 37, 37, 54, 37, 87, 0, 
	0, 39, 0, 96, 0, 93, 90, 41, 
	96, 90, 99, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 57, 
	144, 0, 54, 84, 0, 81, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 21, 
	63, 31, 130, 60, 57, 31, 63, 57, 
	66, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 57, 144, 0, 54, 84, 0, 
	75, 33, 84, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 17, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 17, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 57, 
	144, 0, 54, 84, 0, 78, 33, 84, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	19, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 19, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 57, 
	144, 0, 54, 84, 0, 72, 33, 84, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 15, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 15, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 57, 144, 0, 54, 84, 
	0, 69, 33, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 13, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 13, 0, 0
];

var _lexer_eof_actions = [
	0, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43
];

var lexer_start = 1;
var lexer_first_final = 791;
var lexer_error = 0;

var lexer_en_main = 1;


/* line 129 "ragel/i18n/kn.js.rl" */

/* line 130 "ragel/i18n/kn.js.rl" */

/* line 131 "ragel/i18n/kn.js.rl" */

/* line 132 "ragel/i18n/kn.js.rl" */

var Lexer = function(listener) {
  // Check that listener has the required functions
  var events = ['comment', 'tag', 'feature', 'background', 'scenario', 'scenario_outline', 'examples', 'step', 'doc_string', 'row', 'eof'];
  for(var i=0, len=events.length; i<len; i++) {
    var event = events[i];
    if(typeof listener[event] != 'function') {
      throw new Error("Error. No " + event + " function exists on " + JSON.stringify(listener));
    }
  }
  this.listener = listener;
};

Lexer.prototype.scan = function(data) {
  var ending = "\n%_FEATURE_END_%";
  if(typeof data == 'string') {
    data = this.stringToBytes(data + ending);
  } else if(typeof Buffer != 'undefined' && Buffer.isBuffer(data)) {
    // Node.js
    var buf = new Buffer(data.length + ending.length);
    data.copy(buf, 0, 0);
    new Buffer(ending).copy(buf, data.length, 0);
    data = buf;
  }
  var eof = pe = data.length;
  var p = 0;

  this.line_number = 1;
  this.last_newline = 0;
  var signedCharValue=function(v){return v > 127 ? v-256 : v; };

  
/* line 1297 "js/lib/gherkin/lexer/kn.js" */
{
	  this.cs = lexer_start;
} /* JSCodeGen::writeInit */

/* line 164 "ragel/i18n/kn.js.rl" */
  
/* line 1304 "js/lib/gherkin/lexer/kn.js" */
{
	var _klen, _trans, _keys, _ps, _widec, _acts, _nacts;
	var _goto_level, _resume, _eof_trans, _again, _test_eof;
	var _out;
	_klen = _trans = _keys = _acts = _nacts = null;
	_goto_level = 0;
	_resume = 10;
	_eof_trans = 15;
	_again = 20;
	_test_eof = 30;
	_out = 40;
	while (true) {
	_trigger_goto = false;
	if (_goto_level <= 0) {
	if (p == pe) {
		_goto_level = _test_eof;
		continue;
	}
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	}
	if (_goto_level <= _resume) {
	_keys = _lexer_key_offsets[ this.cs];
	_trans = _lexer_index_offsets[ this.cs];
	_klen = _lexer_single_lengths[ this.cs];
	_break_match = false;
	
	do {
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + _klen - 1;

	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + ( (_upper - _lower) >> 1 );

	        if (( signedCharValue(data[p])) < _lexer_trans_keys[_mid]) {
	           _upper = _mid - 1;
	        } else if (( signedCharValue(data[p])) > _lexer_trans_keys[_mid]) {
	           _lower = _mid + 1;
	        } else {
	           _trans += (_mid - _keys);
	           _break_match = true;
	           break;
	        };
	     } /* while */
	     if (_break_match) { break; }
	     _keys += _klen;
	     _trans += _klen;
	  }
	  _klen = _lexer_range_lengths[ this.cs];
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + (_klen << 1) - 2;
	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + (((_upper-_lower) >> 1) & ~1);
	        if (( signedCharValue(data[p])) < _lexer_trans_keys[_mid]) {
	          _upper = _mid - 2;
	         } else if (( signedCharValue(data[p])) > _lexer_trans_keys[_mid+1]) {
	          _lower = _mid + 2;
	        } else {
	          _trans += ((_mid - _keys) >> 1);
	          _break_match = true;
	          break;
	        }
	     } /* while */
	     if (_break_match) { break; }
	     _trans += _klen
	  }
	} while (false);
	_trans = _lexer_indicies[_trans];
	 this.cs = _lexer_trans_targs[_trans];
	if (_lexer_trans_actions[_trans] != 0) {
		_acts = _lexer_trans_actions[_trans];
		_nacts = _lexer_actions[_acts];
		_acts += 1;
		while (_nacts > 0) {
			_nacts -= 1;
			_acts += 1;
			switch (_lexer_actions[_acts - 1]) {
case 0:
/* line 6 "ragel/i18n/kn.js.rl" */

    this.content_start = p;
    this.current_line = this.line_number;
    this.start_col = p - this.last_newline - (this.keyword+':').length;
  		break;
case 1:
/* line 12 "ragel/i18n/kn.js.rl" */

    this.current_line = this.line_number;
    this.start_col = p - this.last_newline;
  		break;
case 2:
/* line 17 "ragel/i18n/kn.js.rl" */

    this.content_start = p;
  		break;
case 3:
/* line 21 "ragel/i18n/kn.js.rl" */

    this.docstring_content_type_start = p;
  		break;
case 4:
/* line 25 "ragel/i18n/kn.js.rl" */

    this.docstring_content_type_end = p;
  		break;
case 5:
/* line 29 "ragel/i18n/kn.js.rl" */

    var con = this.unindent(
      this.start_col, 
      this.bytesToString(data.slice(this.content_start, this.next_keyword_start-1)).replace(/(\r?\n)?([\t ])*$/, '').replace(/\\\"\\\"\\\"/mg, '"""')
    );
    var con_type = this.bytesToString(data.slice(this.docstring_content_type_start, this.docstring_content_type_end)).trim();
    this.listener.doc_string(con_type, con, this.current_line); 
  		break;
case 6:
/* line 38 "ragel/i18n/kn.js.rl" */

    p = this.store_keyword_content('feature', data, p, eof);
  		break;
case 7:
/* line 42 "ragel/i18n/kn.js.rl" */

    p = this.store_keyword_content('background', data, p, eof);
  		break;
case 8:
/* line 46 "ragel/i18n/kn.js.rl" */

    p = this.store_keyword_content('scenario', data, p, eof);
  		break;
case 9:
/* line 50 "ragel/i18n/kn.js.rl" */

    p = this.store_keyword_content('scenario_outline', data, p, eof);
  		break;
case 10:
/* line 54 "ragel/i18n/kn.js.rl" */

    p = this.store_keyword_content('examples', data, p, eof);
  		break;
case 11:
/* line 58 "ragel/i18n/kn.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.step(this.keyword, con, this.current_line);
  		break;
case 12:
/* line 63 "ragel/i18n/kn.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.comment(con, this.line_number);
    this.keyword_start = null;
  		break;
case 13:
/* line 69 "ragel/i18n/kn.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.tag(con, this.line_number);
    this.keyword_start = null;
  		break;
case 14:
/* line 75 "ragel/i18n/kn.js.rl" */

    this.line_number++;
  		break;
case 15:
/* line 79 "ragel/i18n/kn.js.rl" */

    this.last_newline = p + 1;
  		break;
case 16:
/* line 83 "ragel/i18n/kn.js.rl" */

    this.keyword_start = this.keyword_start || p;
  		break;
case 17:
/* line 87 "ragel/i18n/kn.js.rl" */

    this.keyword = this.bytesToString(data.slice(this.keyword_start, p)).replace(/:$/, '');
    this.keyword_start = null;
  		break;
case 18:
/* line 92 "ragel/i18n/kn.js.rl" */

    this.next_keyword_start = p;
  		break;
case 19:
/* line 96 "ragel/i18n/kn.js.rl" */

    p = p - 1;
    current_row = [];
    this.current_line = this.line_number;
  		break;
case 20:
/* line 102 "ragel/i18n/kn.js.rl" */

    this.content_start = p;
  		break;
case 21:
/* line 106 "ragel/i18n/kn.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    current_row.push(con.replace(/\\\|/, "|").replace(/\\n/, "\n").replace(/\\\\/, "\\"));
  		break;
case 22:
/* line 111 "ragel/i18n/kn.js.rl" */

    this.listener.row(current_row, this.current_line);
  		break;
case 23:
/* line 115 "ragel/i18n/kn.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw new Error("Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.");
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 1531 "js/lib/gherkin/lexer/kn.js" */
			} /* action switch */
		}
	}
	if (_trigger_goto) {
		continue;
	}
	}
	if (_goto_level <= _again) {
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	p += 1;
	if (p != pe) {
		_goto_level = _resume;
		continue;
	}
	}
	if (_goto_level <= _test_eof) {
	if (p == eof) {
	__acts = _lexer_eof_actions[ this.cs];
	__nacts =  _lexer_actions[__acts];
	__acts += 1;
	while (__nacts > 0) {
		__nacts -= 1;
		__acts += 1;
		switch (_lexer_actions[__acts - 1]) {
case 23:
/* line 115 "ragel/i18n/kn.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw new Error("Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.");
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 1570 "js/lib/gherkin/lexer/kn.js" */
		} /* eof action switch */
	}
	if (_trigger_goto) {
		continue;
	}
}
	}
	if (_goto_level <= _out) {
		break;
	}
	}
	}

/* line 165 "ragel/i18n/kn.js.rl" */
};


/*
 * Decode utf-8 byte sequence to string.
 */
var decodeUtf8 = function(bytes) {
  var result = "";
  var i = 0;
  var wc;
  var c;

  while (i < bytes.length) {
    /* parse as UTF-8 lead byte */
    wc = bytes[i++];
    if (wc < 0x80) {
      count = 0;
    } else if (wc < 0xC2 || wc >= 0xF8) {
      throw new Error("input is not a valid UTF-8 lead octet");
    } else if (wc < 0xE0) {
      count = 1;
      wc = (wc & 0x1F) << 6;
    } else if (wc < 0xF0) {
      count = 2;
      wc = (wc & 0x0F) << 12;
    } else /* wc < 0xF8 */ {
      count = 3;
      wc = (wc & 0x07) << 18;
    }

    /* parse trail bytes, if any */
    while (count) {
      if (!(i < bytes.length)) {
        throw new Error("short read");
      }
      if ((c = bytes[i++] ^ 0x80) > 0x3F) {
        throw new Error("input is not a valid UTF-8 trail octet");
      }
      wc |= c << (6 * --count);
      if (wc < (1 << (5 * count + 6))) {
        throw new Error("invalid non-minimal encoded input");
      }
    }

    /* handle conversion to UTF-16 if needed */
    if (wc > 0xFFFF) {
      wc -= 0x10000;
      result += String.fromCharCode(0xD800 + (wc >> 10));
      wc = 0xDC00 + (wc & 0x3FF);
    }
    result += String.fromCharCode(wc);
  }

  return result;
};

/*
 * Encode string to an array of bytes using utf8 encoding.
 *
 * Javascript internally stores character data as utf16 (like java).
 * String.charCodeAt() does *not* produce unicode points, but simply
 * reflects this internal representation. Thus, it is necessary
 * to first decode the utf-16 representation before encoding to
 * utf-8.
 */
var encodeUtf8 = function(string) {
  var bytes = [];
  var i = 0;
  var j = 0;
  var wc;

  while (i < string.length) {
    wc = string.charCodeAt(i++);
    if (wc >= 0xD800 && wc <= 0xDBFF && i < string.length && string.charCodeAt(i) >= 0xDC00 && string.charCodeAt(i) <= 0xDFFF) {
      /* decode UTF-16 */
      wc = 0x10000 + ((wc & 0x3FF) << 10) + (string.charCodeAt(i++) & 0x3FF);
    }

    /* emit lead byte */
    if (wc < 0x80) {
      bytes[j++] = wc;
      count = 0;
    } else if (wc < 0x800) {
      bytes[j++] = 0xC0 | (wc >> 6);
      count = 1;
    } else if (wc < 0x10000) {
      bytes[j++] = 0xE0 | (wc >> 12);
      count = 2;
    } else {
      /* SMP: 21-bit Unicode */
      bytes[j++] = 0xF0 | (wc >> 18);
      count = 3;
    }

    /* emit trail bytes, if any */
    while (count) {
      bytes[j++] = 0x80 | ((wc >> (6 * --count)) & 0x3F);
    }
  }

  return bytes;

};

Lexer.prototype.bytesToString = function(bytes) {
  if(typeof bytes.write == 'function') {
    // Node.js
    return bytes.toString('utf-8');
  }
  return decodeUtf8(bytes);
};

Lexer.prototype.stringToBytes = function(string) {
  return encodeUtf8(string);
};

Lexer.prototype.unindent = function(startcol, text) {
  startcol = startcol || 0;
  return text.replace(new RegExp('^[\t ]{0,' + startcol + '}', 'gm'), ''); 
};

Lexer.prototype.store_keyword_content = function(event, data, p, eof) {
  var end_point = (!this.next_keyword_start || (p == eof)) ? p : this.next_keyword_start;
  var content = this.unindent(this.start_col + 2, this.bytesToString(data.slice(this.content_start, end_point))).replace(/\s+$/,"");
  var content_lines = content.split("\n")
  var name = content_lines.shift() || "";
  name = name.trim();
  var description = content_lines.join("\n");
  this.listener[event](this.keyword, name, description, this.current_line);
  var nks = this.next_keyword_start;
  this.next_keyword_start = null;
  return nks ? nks - 1 : p;
};

Lexer.prototype.current_line_content = function(data, p) {
  var rest = Array.prototype.slice.call(data,this.last_newline, -1);
  var end = rest.indexOf(10) || -1;
  return this.bytesToString(rest.slice(0, end)).trim();
};

// Node.js export
if(typeof module !== 'undefined') {
  module.exports = Lexer;
}
// Require.js export
if (typeof define !== 'undefined') {
  if(define.amd) {
    define('gherkin/lexer/kn', [], function() {
      return Lexer;
    });
  } else {
    define('gherkin/lexer/kn', function(require, exports, module) {
      exports.Lexer = Lexer;
    });
  }
}

})();

}).call(this,require("buffer").Buffer)

},{"buffer":69}],217:[function(require,module,exports){
(function (Buffer){

/* line 1 "ragel/i18n/ko.js.rl" */
;(function() {


/* line 126 "ragel/i18n/ko.js.rl" */



/* line 11 "js/lib/gherkin/lexer/ko.js" */
var _lexer_actions = [
	0, 1, 0, 1, 1, 1, 2, 1, 
	3, 1, 4, 1, 5, 1, 6, 1, 
	7, 1, 8, 1, 9, 1, 10, 1, 
	11, 1, 12, 1, 13, 1, 16, 1, 
	17, 1, 18, 1, 19, 1, 20, 1, 
	21, 1, 22, 1, 23, 2, 2, 18, 
	2, 3, 4, 2, 13, 0, 2, 14, 
	15, 2, 17, 0, 2, 17, 1, 2, 
	17, 16, 2, 17, 19, 2, 18, 6, 
	2, 18, 7, 2, 18, 8, 2, 18, 
	9, 2, 18, 10, 2, 18, 16, 2, 
	20, 21, 2, 22, 0, 2, 22, 1, 
	2, 22, 16, 2, 22, 19, 3, 4, 
	14, 15, 3, 5, 14, 15, 3, 11, 
	14, 15, 3, 12, 14, 15, 3, 13, 
	14, 15, 3, 14, 15, 18, 3, 17, 
	0, 11, 3, 17, 14, 15, 4, 2, 
	14, 15, 18, 4, 3, 4, 14, 15, 
	4, 17, 0, 14, 15, 5, 17, 0, 
	11, 14, 15
];

var _lexer_key_offsets = [
	0, 0, 15, 17, 18, 19, 21, 22, 
	23, 24, 25, 27, 29, 43, 47, 48, 
	49, 50, 52, 53, 54, 55, 56, 57, 
	58, 59, 60, 61, 62, 63, 64, 65, 
	77, 80, 82, 84, 87, 89, 91, 93, 
	95, 109, 112, 113, 114, 115, 116, 117, 
	118, 119, 120, 121, 122, 124, 125, 126, 
	127, 128, 129, 130, 131, 132, 133, 145, 
	148, 150, 152, 155, 157, 159, 161, 163, 
	165, 167, 169, 171, 173, 175, 177, 179, 
	181, 185, 187, 189, 191, 194, 196, 198, 
	200, 202, 204, 206, 209, 211, 213, 215, 
	217, 219, 221, 223, 225, 227, 229, 231, 
	233, 235, 237, 239, 241, 243, 245, 247, 
	249, 251, 253, 255, 257, 259, 261, 263, 
	265, 267, 269, 271, 273, 275, 277, 279, 
	281, 282, 283, 295, 298, 300, 302, 305, 
	307, 309, 311, 313, 315, 317, 319, 321, 
	323, 325, 327, 329, 331, 336, 338, 340, 
	342, 345, 347, 349, 351, 353, 355, 357, 
	359, 361, 363, 365, 368, 370, 372, 374, 
	376, 378, 380, 382, 384, 386, 388, 391, 
	393, 395, 397, 399, 401, 403, 405, 407, 
	409, 411, 413, 415, 417, 419, 421, 423, 
	425, 427, 429, 431, 433, 435, 437, 439, 
	441, 443, 445, 447, 449, 451, 453, 455, 
	456, 457, 458, 459, 466, 468, 470, 472, 
	474, 476, 478, 479, 480, 481, 482, 483, 
	484, 485, 486, 487, 488, 489, 490, 491, 
	493, 495, 500, 505, 510, 515, 519, 523, 
	525, 526, 527, 528, 529, 530, 531, 532, 
	533, 534, 535, 536, 537, 538, 539, 540, 
	541, 546, 553, 558, 562, 568, 571, 573, 
	579, 593, 595, 597, 599, 601, 603, 605, 
	607, 609, 611, 615, 617, 619, 621, 624, 
	626, 628, 630, 632, 634, 636, 639, 641, 
	643, 645, 647, 649, 651, 653, 655, 657, 
	659, 662, 664, 666, 668, 670, 672, 674, 
	676, 678, 680, 682, 684, 686, 688, 690, 
	692, 694, 696, 698, 700, 702, 704, 706, 
	708, 710, 712, 714, 716, 718, 720, 722, 
	724, 726, 727, 728, 729, 730, 731, 732, 
	733, 734, 735, 736, 737, 747, 749, 751, 
	753, 755, 757, 759, 761, 763, 765, 767, 
	769, 772, 774, 776, 778, 780, 782, 784, 
	786, 788, 790, 792, 795, 797, 799, 801, 
	803, 805, 807, 809, 811, 813, 815, 817, 
	819, 821, 823, 825, 827, 829, 831, 833, 
	835, 837, 838, 839
];

var _lexer_trans_keys = [
	-22, -21, -20, -19, 10, 32, 34, 35, 
	37, 42, 64, 124, 239, 9, 13, -73, 
	-72, -72, -21, -97, -90, -84, -21, -87, 
	-76, 10, 13, 10, 13, -22, -21, -20, 
	-19, 10, 32, 34, 35, 37, 42, 64, 
	124, 9, 13, -117, -89, -88, -80, -88, 
	-116, -20, -107, -99, -67, -68, -68, -20, 
	-96, -128, -80, -22, -78, -67, 58, 10, 
	10, -22, -21, -20, -19, 10, 32, 35, 
	37, 42, 64, 9, 13, -73, -72, 10, 
	-72, 10, -21, 10, -97, -90, 10, -84, 
	10, -21, 10, -87, 10, -76, 10, -22, 
	-21, -20, -19, 10, 32, 34, 35, 37, 
	42, 64, 124, 9, 13, -117, -104, -95, 
	-100, -21, -126, -104, -21, -90, -84, -20, 
	-104, -92, 32, 58, -22, -80, -100, -20, 
	-102, -108, 58, 10, 10, -22, -21, -20, 
	-19, 10, 32, 35, 37, 42, 64, 9, 
	13, -73, -72, 10, -72, 10, -21, 10, 
	-97, -90, 10, -84, 10, -21, 10, -87, 
	10, -76, 10, -84, 10, -22, 10, -77, 
	10, -96, 10, -80, 10, -21, 10, -118, 
	10, -91, 10, 10, 58, -117, -89, -88, 
	10, -88, 10, -116, 10, -20, 10, -107, 
	-99, 10, -67, 10, -68, 10, -68, 10, 
	-20, 10, -96, 10, -128, 10, -117, -95, 
	10, -100, 10, -21, 10, -126, 10, -104, 
	10, -21, 10, -90, 10, -84, 10, -20, 
	10, -104, 10, -92, 10, -80, 10, -22, 
	10, -79, 10, -107, 10, -104, 10, -20, 
	10, -89, 10, -128, 10, -21, 10, -89, 
	10, -116, 10, 10, 95, 10, 70, 10, 
	69, 10, 65, 10, 84, 10, 85, 10, 
	82, 10, 69, 10, 95, 10, 69, 10, 
	78, 10, 68, 10, 95, 10, 37, 10, 
	32, 10, 10, -22, -21, -20, -19, 10, 
	32, 35, 37, 42, 64, 9, 13, -73, 
	-72, 10, -72, 10, -21, 10, -97, -90, 
	10, -84, 10, -21, 10, -87, 10, -76, 
	10, -84, 10, -22, 10, -77, 10, -96, 
	10, -80, 10, -21, 10, -118, 10, -91, 
	10, 10, 58, -117, -89, -88, -80, 10, 
	-88, 10, -116, 10, -20, 10, -107, -99, 
	10, -67, 10, -68, 10, -68, 10, -20, 
	10, -96, 10, -128, 10, -80, 10, -22, 
	10, -78, 10, -67, 10, -117, -95, 10, 
	-100, 10, -21, 10, -126, 10, -104, 10, 
	-21, 10, -90, 10, -84, 10, -20, 10, 
	-104, 10, -92, 10, 10, 32, 58, -22, 
	10, -80, 10, -100, 10, -20, 10, -102, 
	10, -108, 10, -80, 10, -22, 10, -79, 
	10, -107, 10, -104, 10, -20, 10, -89, 
	10, -128, 10, -21, 10, -89, 10, -116, 
	10, 10, 95, 10, 70, 10, 69, 10, 
	65, 10, 84, 10, 85, 10, 82, 10, 
	69, 10, 95, 10, 69, 10, 78, 10, 
	68, 10, 95, 10, 37, 10, 32, -120, 
	58, 10, 10, -22, 10, 32, 35, 124, 
	9, 13, -72, 10, -80, 10, -21, 10, 
	-118, 10, -91, 10, 10, 58, -80, -22, 
	-79, -107, -104, -20, -89, -128, -21, -89, 
	-116, 34, 34, 10, 13, 10, 13, 10, 
	32, 34, 9, 13, 10, 32, 34, 9, 
	13, 10, 32, 34, 9, 13, 10, 32, 
	34, 9, 13, 10, 32, 9, 13, 10, 
	32, 9, 13, 10, 13, 10, 95, 70, 
	69, 65, 84, 85, 82, 69, 95, 69, 
	78, 68, 95, 37, 32, 13, 32, 64, 
	9, 10, 9, 10, 13, 32, 64, 11, 
	12, 10, 32, 64, 9, 13, 32, 124, 
	9, 13, 10, 32, 92, 124, 9, 13, 
	10, 92, 124, 10, 92, 10, 32, 92, 
	124, 9, 13, -22, -21, -20, -19, 10, 
	32, 34, 35, 37, 42, 64, 124, 9, 
	13, -84, 10, -22, 10, -77, 10, -96, 
	10, -80, 10, -21, 10, -118, 10, -91, 
	10, 10, 58, -117, -89, -88, 10, -88, 
	10, -116, 10, -20, 10, -107, -99, 10, 
	-67, 10, -68, 10, -68, 10, -20, 10, 
	-96, 10, -128, 10, -117, -95, 10, -100, 
	10, -21, 10, -126, 10, -104, 10, -21, 
	10, -90, 10, -84, 10, -20, 10, -104, 
	10, -92, 10, 10, 32, 58, -22, 10, 
	-80, 10, -100, 10, -20, 10, -102, 10, 
	-108, 10, -80, 10, -22, 10, -79, 10, 
	-107, 10, -104, 10, -20, 10, -89, 10, 
	-128, 10, -21, 10, -89, 10, -116, 10, 
	10, 95, 10, 70, 10, 69, 10, 65, 
	10, 84, 10, 85, 10, 82, 10, 69, 
	10, 95, 10, 69, 10, 78, 10, 68, 
	10, 95, 10, 37, 10, 32, -84, -22, 
	-77, -96, -80, -21, -118, -91, 58, 10, 
	10, -22, -21, -20, 10, 32, 35, 37, 
	64, 9, 13, -72, 10, -80, 10, -21, 
	10, -118, 10, -91, 10, 10, 58, -80, 
	10, -80, 10, -22, 10, -78, 10, -67, 
	10, -117, -104, 10, -100, 10, -21, 10, 
	-126, 10, -104, 10, -21, 10, -90, 10, 
	-84, 10, -20, 10, -104, 10, -92, 10, 
	10, 32, 58, -22, 10, -80, 10, -100, 
	10, -20, 10, -102, 10, -108, 10, -120, 
	10, 10, 95, 10, 70, 10, 69, 10, 
	65, 10, 84, 10, 85, 10, 82, 10, 
	69, 10, 95, 10, 69, 10, 78, 10, 
	68, 10, 95, 10, 37, 187, 191, 0
];

var _lexer_single_lengths = [
	0, 13, 2, 1, 1, 2, 1, 1, 
	1, 1, 2, 2, 12, 4, 1, 1, 
	1, 2, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 10, 
	3, 2, 2, 3, 2, 2, 2, 2, 
	12, 3, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 2, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 10, 3, 
	2, 2, 3, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	4, 2, 2, 2, 3, 2, 2, 2, 
	2, 2, 2, 3, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	1, 1, 10, 3, 2, 2, 3, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 5, 2, 2, 2, 
	3, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 3, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 3, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 1, 
	1, 1, 1, 5, 2, 2, 2, 2, 
	2, 2, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 2, 
	2, 3, 3, 3, 3, 2, 2, 2, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	3, 5, 3, 2, 4, 3, 2, 4, 
	12, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 4, 2, 2, 2, 3, 2, 
	2, 2, 2, 2, 2, 3, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	3, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 8, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	3, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 3, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 1, 1, 0
];

var _lexer_range_lengths = [
	0, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 1, 1, 1, 1, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 1, 1, 1, 1, 0, 0, 1, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0
];

var _lexer_index_offsets = [
	0, 0, 15, 18, 20, 22, 25, 27, 
	29, 31, 33, 36, 39, 53, 58, 60, 
	62, 64, 67, 69, 71, 73, 75, 77, 
	79, 81, 83, 85, 87, 89, 91, 93, 
	105, 109, 112, 115, 119, 122, 125, 128, 
	131, 145, 149, 151, 153, 155, 157, 159, 
	161, 163, 165, 167, 169, 172, 174, 176, 
	178, 180, 182, 184, 186, 188, 190, 202, 
	206, 209, 212, 216, 219, 222, 225, 228, 
	231, 234, 237, 240, 243, 246, 249, 252, 
	255, 260, 263, 266, 269, 273, 276, 279, 
	282, 285, 288, 291, 295, 298, 301, 304, 
	307, 310, 313, 316, 319, 322, 325, 328, 
	331, 334, 337, 340, 343, 346, 349, 352, 
	355, 358, 361, 364, 367, 370, 373, 376, 
	379, 382, 385, 388, 391, 394, 397, 400, 
	403, 405, 407, 419, 423, 426, 429, 433, 
	436, 439, 442, 445, 448, 451, 454, 457, 
	460, 463, 466, 469, 472, 478, 481, 484, 
	487, 491, 494, 497, 500, 503, 506, 509, 
	512, 515, 518, 521, 525, 528, 531, 534, 
	537, 540, 543, 546, 549, 552, 555, 559, 
	562, 565, 568, 571, 574, 577, 580, 583, 
	586, 589, 592, 595, 598, 601, 604, 607, 
	610, 613, 616, 619, 622, 625, 628, 631, 
	634, 637, 640, 643, 646, 649, 652, 655, 
	657, 659, 661, 663, 670, 673, 676, 679, 
	682, 685, 688, 690, 692, 694, 696, 698, 
	700, 702, 704, 706, 708, 710, 712, 714, 
	717, 720, 725, 730, 735, 740, 744, 748, 
	751, 753, 755, 757, 759, 761, 763, 765, 
	767, 769, 771, 773, 775, 777, 779, 781, 
	783, 788, 795, 800, 804, 810, 814, 817, 
	823, 837, 840, 843, 846, 849, 852, 855, 
	858, 861, 864, 869, 872, 875, 878, 882, 
	885, 888, 891, 894, 897, 900, 904, 907, 
	910, 913, 916, 919, 922, 925, 928, 931, 
	934, 938, 941, 944, 947, 950, 953, 956, 
	959, 962, 965, 968, 971, 974, 977, 980, 
	983, 986, 989, 992, 995, 998, 1001, 1004, 
	1007, 1010, 1013, 1016, 1019, 1022, 1025, 1028, 
	1031, 1034, 1036, 1038, 1040, 1042, 1044, 1046, 
	1048, 1050, 1052, 1054, 1056, 1066, 1069, 1072, 
	1075, 1078, 1081, 1084, 1087, 1090, 1093, 1096, 
	1099, 1103, 1106, 1109, 1112, 1115, 1118, 1121, 
	1124, 1127, 1130, 1133, 1137, 1140, 1143, 1146, 
	1149, 1152, 1155, 1158, 1161, 1164, 1167, 1170, 
	1173, 1176, 1179, 1182, 1185, 1188, 1191, 1194, 
	1197, 1200, 1202, 1204
];

var _lexer_indicies = [
	1, 2, 3, 4, 6, 5, 7, 8, 
	9, 10, 11, 12, 13, 5, 0, 14, 
	15, 0, 16, 0, 17, 0, 18, 19, 
	0, 20, 0, 21, 0, 22, 0, 23, 
	0, 25, 26, 24, 28, 29, 27, 1, 
	2, 3, 4, 6, 5, 7, 8, 9, 
	10, 11, 12, 5, 0, 30, 31, 32, 
	33, 0, 23, 0, 34, 0, 35, 0, 
	36, 37, 0, 23, 0, 23, 0, 38, 
	0, 39, 0, 40, 0, 23, 0, 41, 
	0, 42, 0, 43, 0, 44, 0, 45, 
	0, 47, 46, 49, 48, 50, 51, 52, 
	53, 49, 54, 55, 56, 57, 55, 54, 
	48, 58, 59, 49, 48, 60, 49, 48, 
	61, 49, 48, 62, 63, 49, 48, 64, 
	49, 48, 65, 49, 48, 66, 49, 48, 
	67, 49, 48, 68, 69, 70, 71, 73, 
	72, 74, 75, 76, 77, 78, 79, 72, 
	0, 80, 81, 82, 0, 83, 0, 84, 
	0, 85, 0, 86, 0, 87, 0, 88, 
	0, 89, 0, 90, 0, 91, 0, 92, 
	0, 93, 94, 0, 95, 0, 96, 0, 
	97, 0, 98, 0, 99, 0, 100, 0, 
	101, 0, 103, 102, 105, 104, 106, 107, 
	108, 109, 105, 110, 111, 112, 113, 111, 
	110, 104, 114, 115, 105, 104, 116, 105, 
	104, 117, 105, 104, 118, 119, 105, 104, 
	120, 105, 104, 121, 105, 104, 122, 105, 
	104, 123, 105, 104, 124, 105, 104, 125, 
	105, 104, 126, 105, 104, 123, 105, 104, 
	127, 105, 104, 128, 105, 104, 129, 105, 
	104, 130, 105, 104, 105, 123, 104, 131, 
	132, 133, 105, 104, 123, 105, 104, 134, 
	105, 104, 135, 105, 104, 136, 137, 105, 
	104, 123, 105, 104, 123, 105, 104, 138, 
	105, 104, 139, 105, 104, 140, 105, 104, 
	123, 105, 104, 141, 142, 105, 104, 143, 
	105, 104, 144, 105, 104, 145, 105, 104, 
	146, 105, 104, 147, 105, 104, 148, 105, 
	104, 149, 105, 104, 150, 105, 104, 151, 
	105, 104, 130, 105, 104, 152, 105, 104, 
	153, 105, 104, 122, 105, 104, 154, 105, 
	104, 155, 105, 104, 156, 105, 104, 157, 
	105, 104, 158, 105, 104, 159, 105, 104, 
	160, 105, 104, 123, 105, 104, 105, 161, 
	104, 105, 162, 104, 105, 163, 104, 105, 
	164, 104, 105, 165, 104, 105, 166, 104, 
	105, 167, 104, 105, 168, 104, 105, 169, 
	104, 105, 170, 104, 105, 171, 104, 105, 
	172, 104, 105, 173, 104, 105, 174, 104, 
	105, 123, 104, 176, 175, 178, 177, 179, 
	180, 181, 182, 178, 183, 184, 185, 186, 
	184, 183, 177, 187, 188, 178, 177, 189, 
	178, 177, 190, 178, 177, 191, 192, 178, 
	177, 193, 178, 177, 194, 178, 177, 195, 
	178, 177, 196, 178, 177, 197, 178, 177, 
	198, 178, 177, 199, 178, 177, 196, 178, 
	177, 200, 178, 177, 201, 178, 177, 202, 
	178, 177, 203, 178, 177, 178, 196, 177, 
	204, 205, 206, 207, 178, 177, 196, 178, 
	177, 208, 178, 177, 209, 178, 177, 210, 
	211, 178, 177, 196, 178, 177, 196, 178, 
	177, 212, 178, 177, 213, 178, 177, 214, 
	178, 177, 196, 178, 177, 215, 178, 177, 
	216, 178, 177, 217, 178, 177, 203, 178, 
	177, 218, 219, 178, 177, 220, 178, 177, 
	221, 178, 177, 222, 178, 177, 223, 178, 
	177, 224, 178, 177, 225, 178, 177, 226, 
	178, 177, 227, 178, 177, 228, 178, 177, 
	229, 178, 177, 178, 230, 196, 177, 231, 
	178, 177, 232, 178, 177, 233, 178, 177, 
	234, 178, 177, 235, 178, 177, 203, 178, 
	177, 236, 178, 177, 237, 178, 177, 195, 
	178, 177, 238, 178, 177, 239, 178, 177, 
	240, 178, 177, 241, 178, 177, 242, 178, 
	177, 243, 178, 177, 244, 178, 177, 196, 
	178, 177, 178, 245, 177, 178, 246, 177, 
	178, 247, 177, 178, 248, 177, 178, 249, 
	177, 178, 250, 177, 178, 251, 177, 178, 
	252, 177, 178, 253, 177, 178, 254, 177, 
	178, 255, 177, 178, 256, 177, 178, 257, 
	177, 178, 258, 177, 178, 196, 177, 259, 
	0, 260, 0, 262, 261, 264, 263, 265, 
	264, 266, 267, 267, 266, 263, 268, 264, 
	263, 269, 264, 263, 270, 264, 263, 271, 
	264, 263, 272, 264, 263, 264, 273, 263, 
	274, 0, 275, 0, 22, 0, 276, 0, 
	277, 0, 278, 0, 279, 0, 280, 0, 
	281, 0, 282, 0, 23, 0, 283, 0, 
	284, 0, 286, 287, 285, 289, 290, 288, 
	293, 292, 294, 292, 291, 297, 296, 298, 
	296, 295, 297, 296, 299, 296, 295, 297, 
	296, 300, 296, 295, 302, 301, 301, 0, 
	6, 303, 303, 0, 305, 306, 304, 6, 
	0, 307, 0, 308, 0, 309, 0, 310, 
	0, 311, 0, 312, 0, 313, 0, 314, 
	0, 315, 0, 316, 0, 317, 0, 318, 
	0, 319, 0, 320, 0, 23, 0, 0, 
	0, 0, 0, 321, 322, 323, 322, 322, 
	325, 324, 321, 6, 326, 11, 326, 0, 
	327, 328, 327, 0, 331, 330, 332, 333, 
	330, 329, 0, 335, 336, 334, 0, 335, 
	334, 331, 337, 335, 336, 337, 334, 338, 
	339, 340, 341, 331, 342, 343, 344, 345, 
	346, 347, 348, 342, 0, 349, 49, 48, 
	350, 49, 48, 351, 49, 48, 67, 49, 
	48, 352, 49, 48, 353, 49, 48, 354, 
	49, 48, 355, 49, 48, 49, 67, 48, 
	356, 357, 358, 49, 48, 67, 49, 48, 
	359, 49, 48, 360, 49, 48, 361, 362, 
	49, 48, 67, 49, 48, 67, 49, 48, 
	363, 49, 48, 364, 49, 48, 365, 49, 
	48, 67, 49, 48, 366, 367, 49, 48, 
	368, 49, 48, 369, 49, 48, 370, 49, 
	48, 371, 49, 48, 372, 49, 48, 373, 
	49, 48, 374, 49, 48, 375, 49, 48, 
	376, 49, 48, 377, 49, 48, 49, 378, 
	67, 48, 379, 49, 48, 380, 49, 48, 
	381, 49, 48, 382, 49, 48, 383, 49, 
	48, 355, 49, 48, 384, 49, 48, 385, 
	49, 48, 66, 49, 48, 386, 49, 48, 
	387, 49, 48, 388, 49, 48, 389, 49, 
	48, 390, 49, 48, 391, 49, 48, 392, 
	49, 48, 67, 49, 48, 49, 393, 48, 
	49, 394, 48, 49, 395, 48, 49, 396, 
	48, 49, 397, 48, 49, 398, 48, 49, 
	399, 48, 49, 400, 48, 49, 401, 48, 
	49, 402, 48, 49, 403, 48, 49, 404, 
	48, 49, 405, 48, 49, 406, 48, 49, 
	67, 48, 407, 0, 408, 0, 409, 0, 
	23, 0, 410, 0, 411, 0, 412, 0, 
	413, 0, 414, 0, 416, 415, 418, 417, 
	419, 420, 421, 418, 422, 423, 424, 423, 
	422, 417, 425, 418, 417, 426, 418, 417, 
	427, 418, 417, 428, 418, 417, 429, 418, 
	417, 418, 430, 417, 431, 418, 417, 432, 
	418, 417, 433, 418, 417, 434, 418, 417, 
	429, 418, 417, 435, 436, 418, 417, 437, 
	418, 417, 438, 418, 417, 439, 418, 417, 
	440, 418, 417, 441, 418, 417, 442, 418, 
	417, 443, 418, 417, 444, 418, 417, 445, 
	418, 417, 446, 418, 417, 418, 447, 430, 
	417, 448, 418, 417, 449, 418, 417, 450, 
	418, 417, 451, 418, 417, 452, 418, 417, 
	429, 418, 417, 429, 418, 417, 418, 453, 
	417, 418, 454, 417, 418, 455, 417, 418, 
	456, 417, 418, 457, 417, 418, 458, 417, 
	418, 459, 417, 418, 460, 417, 418, 461, 
	417, 418, 462, 417, 418, 463, 417, 418, 
	464, 417, 418, 465, 417, 418, 466, 417, 
	467, 0, 5, 0, 468, 0
];

var _lexer_trans_targs = [
	0, 2, 13, 41, 221, 12, 12, 229, 
	239, 241, 255, 256, 259, 385, 3, 333, 
	4, 5, 6, 329, 7, 8, 9, 10, 
	11, 12, 240, 11, 12, 240, 14, 15, 
	20, 24, 16, 17, 18, 19, 21, 22, 
	23, 25, 26, 27, 28, 29, 30, 31, 
	30, 31, 32, 274, 285, 306, 31, 12, 
	314, 328, 33, 269, 34, 35, 36, 265, 
	37, 38, 39, 40, 2, 13, 41, 221, 
	12, 12, 229, 239, 241, 255, 256, 259, 
	42, 207, 218, 43, 44, 45, 46, 47, 
	48, 49, 50, 51, 52, 53, 128, 54, 
	55, 56, 57, 58, 59, 60, 61, 62, 
	61, 62, 63, 80, 91, 105, 62, 12, 
	113, 127, 64, 75, 65, 66, 67, 71, 
	68, 69, 70, 40, 72, 73, 74, 76, 
	77, 78, 79, 81, 82, 87, 83, 84, 
	85, 86, 88, 89, 90, 92, 102, 93, 
	94, 95, 96, 97, 98, 99, 100, 101, 
	103, 104, 106, 107, 108, 109, 110, 111, 
	112, 114, 115, 116, 117, 118, 119, 120, 
	121, 122, 123, 124, 125, 126, 12, 129, 
	130, 129, 130, 131, 148, 163, 184, 130, 
	12, 192, 206, 132, 143, 133, 134, 135, 
	139, 136, 137, 138, 40, 140, 141, 142, 
	144, 145, 146, 147, 149, 150, 155, 159, 
	151, 152, 153, 154, 156, 157, 158, 160, 
	161, 162, 164, 181, 165, 166, 167, 168, 
	169, 170, 171, 172, 173, 174, 175, 176, 
	177, 178, 179, 180, 182, 183, 185, 186, 
	187, 188, 189, 190, 191, 193, 194, 195, 
	196, 197, 198, 199, 200, 201, 202, 203, 
	204, 205, 12, 208, 209, 210, 211, 210, 
	211, 212, 211, 12, 213, 214, 215, 216, 
	217, 40, 219, 220, 222, 223, 224, 225, 
	226, 227, 228, 230, 231, 232, 233, 232, 
	232, 233, 232, 234, 234, 234, 235, 234, 
	234, 234, 235, 236, 237, 238, 12, 238, 
	239, 12, 240, 242, 243, 244, 245, 246, 
	247, 248, 249, 250, 251, 252, 253, 254, 
	387, 257, 258, 12, 257, 256, 258, 259, 
	260, 261, 263, 264, 262, 260, 261, 262, 
	260, 263, 2, 13, 41, 221, 264, 229, 
	239, 241, 255, 256, 259, 266, 267, 268, 
	270, 271, 272, 273, 275, 276, 281, 277, 
	278, 279, 280, 282, 283, 284, 286, 303, 
	287, 288, 289, 290, 291, 292, 293, 294, 
	295, 296, 297, 298, 299, 300, 301, 302, 
	304, 305, 307, 308, 309, 310, 311, 312, 
	313, 315, 316, 317, 318, 319, 320, 321, 
	322, 323, 324, 325, 326, 327, 12, 330, 
	331, 332, 334, 335, 336, 337, 338, 339, 
	340, 339, 340, 341, 347, 352, 340, 12, 
	371, 342, 343, 344, 345, 346, 40, 348, 
	349, 350, 351, 353, 370, 354, 355, 356, 
	357, 358, 359, 360, 361, 362, 363, 364, 
	365, 366, 367, 368, 369, 372, 373, 374, 
	375, 376, 377, 378, 379, 380, 381, 382, 
	383, 384, 12, 386, 0
];

var _lexer_trans_actions = [
	43, 29, 29, 29, 29, 0, 54, 3, 
	1, 0, 29, 1, 35, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	57, 149, 126, 0, 110, 23, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 57, 144, 
	0, 54, 84, 84, 84, 84, 0, 72, 
	33, 84, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 15, 63, 63, 63, 63, 
	31, 130, 60, 57, 31, 63, 57, 66, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 57, 144, 
	0, 54, 84, 84, 84, 84, 0, 78, 
	33, 84, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 19, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 19, 57, 
	144, 0, 54, 84, 84, 84, 84, 0, 
	75, 33, 84, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 17, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 17, 0, 0, 57, 144, 0, 
	54, 84, 0, 81, 0, 0, 0, 0, 
	0, 21, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 7, 139, 48, 
	0, 102, 9, 5, 45, 134, 45, 0, 
	33, 122, 33, 33, 0, 11, 106, 0, 
	0, 114, 25, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 27, 118, 27, 51, 0, 0, 
	0, 37, 37, 54, 37, 87, 0, 0, 
	39, 0, 96, 96, 96, 96, 0, 93, 
	90, 41, 96, 90, 99, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 15, 0, 
	0, 0, 0, 0, 0, 0, 0, 57, 
	144, 0, 54, 84, 84, 84, 0, 69, 
	33, 0, 0, 0, 0, 0, 13, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 13, 0, 0
];

var _lexer_eof_actions = [
	0, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43
];

var lexer_start = 1;
var lexer_first_final = 387;
var lexer_error = 0;

var lexer_en_main = 1;


/* line 129 "ragel/i18n/ko.js.rl" */

/* line 130 "ragel/i18n/ko.js.rl" */

/* line 131 "ragel/i18n/ko.js.rl" */

/* line 132 "ragel/i18n/ko.js.rl" */

var Lexer = function(listener) {
  // Check that listener has the required functions
  var events = ['comment', 'tag', 'feature', 'background', 'scenario', 'scenario_outline', 'examples', 'step', 'doc_string', 'row', 'eof'];
  for(var i=0, len=events.length; i<len; i++) {
    var event = events[i];
    if(typeof listener[event] != 'function') {
      throw new Error("Error. No " + event + " function exists on " + JSON.stringify(listener));
    }
  }
  this.listener = listener;
};

Lexer.prototype.scan = function(data) {
  var ending = "\n%_FEATURE_END_%";
  if(typeof data == 'string') {
    data = this.stringToBytes(data + ending);
  } else if(typeof Buffer != 'undefined' && Buffer.isBuffer(data)) {
    // Node.js
    var buf = new Buffer(data.length + ending.length);
    data.copy(buf, 0, 0);
    new Buffer(ending).copy(buf, data.length, 0);
    data = buf;
  }
  var eof = pe = data.length;
  var p = 0;

  this.line_number = 1;
  this.last_newline = 0;
  var signedCharValue=function(v){return v > 127 ? v-256 : v; };

  
/* line 727 "js/lib/gherkin/lexer/ko.js" */
{
	  this.cs = lexer_start;
} /* JSCodeGen::writeInit */

/* line 164 "ragel/i18n/ko.js.rl" */
  
/* line 734 "js/lib/gherkin/lexer/ko.js" */
{
	var _klen, _trans, _keys, _ps, _widec, _acts, _nacts;
	var _goto_level, _resume, _eof_trans, _again, _test_eof;
	var _out;
	_klen = _trans = _keys = _acts = _nacts = null;
	_goto_level = 0;
	_resume = 10;
	_eof_trans = 15;
	_again = 20;
	_test_eof = 30;
	_out = 40;
	while (true) {
	_trigger_goto = false;
	if (_goto_level <= 0) {
	if (p == pe) {
		_goto_level = _test_eof;
		continue;
	}
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	}
	if (_goto_level <= _resume) {
	_keys = _lexer_key_offsets[ this.cs];
	_trans = _lexer_index_offsets[ this.cs];
	_klen = _lexer_single_lengths[ this.cs];
	_break_match = false;
	
	do {
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + _klen - 1;

	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + ( (_upper - _lower) >> 1 );

	        if (( signedCharValue(data[p])) < _lexer_trans_keys[_mid]) {
	           _upper = _mid - 1;
	        } else if (( signedCharValue(data[p])) > _lexer_trans_keys[_mid]) {
	           _lower = _mid + 1;
	        } else {
	           _trans += (_mid - _keys);
	           _break_match = true;
	           break;
	        };
	     } /* while */
	     if (_break_match) { break; }
	     _keys += _klen;
	     _trans += _klen;
	  }
	  _klen = _lexer_range_lengths[ this.cs];
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + (_klen << 1) - 2;
	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + (((_upper-_lower) >> 1) & ~1);
	        if (( signedCharValue(data[p])) < _lexer_trans_keys[_mid]) {
	          _upper = _mid - 2;
	         } else if (( signedCharValue(data[p])) > _lexer_trans_keys[_mid+1]) {
	          _lower = _mid + 2;
	        } else {
	          _trans += ((_mid - _keys) >> 1);
	          _break_match = true;
	          break;
	        }
	     } /* while */
	     if (_break_match) { break; }
	     _trans += _klen
	  }
	} while (false);
	_trans = _lexer_indicies[_trans];
	 this.cs = _lexer_trans_targs[_trans];
	if (_lexer_trans_actions[_trans] != 0) {
		_acts = _lexer_trans_actions[_trans];
		_nacts = _lexer_actions[_acts];
		_acts += 1;
		while (_nacts > 0) {
			_nacts -= 1;
			_acts += 1;
			switch (_lexer_actions[_acts - 1]) {
case 0:
/* line 6 "ragel/i18n/ko.js.rl" */

    this.content_start = p;
    this.current_line = this.line_number;
    this.start_col = p - this.last_newline - (this.keyword+':').length;
  		break;
case 1:
/* line 12 "ragel/i18n/ko.js.rl" */

    this.current_line = this.line_number;
    this.start_col = p - this.last_newline;
  		break;
case 2:
/* line 17 "ragel/i18n/ko.js.rl" */

    this.content_start = p;
  		break;
case 3:
/* line 21 "ragel/i18n/ko.js.rl" */

    this.docstring_content_type_start = p;
  		break;
case 4:
/* line 25 "ragel/i18n/ko.js.rl" */

    this.docstring_content_type_end = p;
  		break;
case 5:
/* line 29 "ragel/i18n/ko.js.rl" */

    var con = this.unindent(
      this.start_col, 
      this.bytesToString(data.slice(this.content_start, this.next_keyword_start-1)).replace(/(\r?\n)?([\t ])*$/, '').replace(/\\\"\\\"\\\"/mg, '"""')
    );
    var con_type = this.bytesToString(data.slice(this.docstring_content_type_start, this.docstring_content_type_end)).trim();
    this.listener.doc_string(con_type, con, this.current_line); 
  		break;
case 6:
/* line 38 "ragel/i18n/ko.js.rl" */

    p = this.store_keyword_content('feature', data, p, eof);
  		break;
case 7:
/* line 42 "ragel/i18n/ko.js.rl" */

    p = this.store_keyword_content('background', data, p, eof);
  		break;
case 8:
/* line 46 "ragel/i18n/ko.js.rl" */

    p = this.store_keyword_content('scenario', data, p, eof);
  		break;
case 9:
/* line 50 "ragel/i18n/ko.js.rl" */

    p = this.store_keyword_content('scenario_outline', data, p, eof);
  		break;
case 10:
/* line 54 "ragel/i18n/ko.js.rl" */

    p = this.store_keyword_content('examples', data, p, eof);
  		break;
case 11:
/* line 58 "ragel/i18n/ko.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.step(this.keyword, con, this.current_line);
  		break;
case 12:
/* line 63 "ragel/i18n/ko.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.comment(con, this.line_number);
    this.keyword_start = null;
  		break;
case 13:
/* line 69 "ragel/i18n/ko.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.tag(con, this.line_number);
    this.keyword_start = null;
  		break;
case 14:
/* line 75 "ragel/i18n/ko.js.rl" */

    this.line_number++;
  		break;
case 15:
/* line 79 "ragel/i18n/ko.js.rl" */

    this.last_newline = p + 1;
  		break;
case 16:
/* line 83 "ragel/i18n/ko.js.rl" */

    this.keyword_start = this.keyword_start || p;
  		break;
case 17:
/* line 87 "ragel/i18n/ko.js.rl" */

    this.keyword = this.bytesToString(data.slice(this.keyword_start, p)).replace(/:$/, '');
    this.keyword_start = null;
  		break;
case 18:
/* line 92 "ragel/i18n/ko.js.rl" */

    this.next_keyword_start = p;
  		break;
case 19:
/* line 96 "ragel/i18n/ko.js.rl" */

    p = p - 1;
    current_row = [];
    this.current_line = this.line_number;
  		break;
case 20:
/* line 102 "ragel/i18n/ko.js.rl" */

    this.content_start = p;
  		break;
case 21:
/* line 106 "ragel/i18n/ko.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    current_row.push(con.replace(/\\\|/, "|").replace(/\\n/, "\n").replace(/\\\\/, "\\"));
  		break;
case 22:
/* line 111 "ragel/i18n/ko.js.rl" */

    this.listener.row(current_row, this.current_line);
  		break;
case 23:
/* line 115 "ragel/i18n/ko.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw new Error("Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.");
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 961 "js/lib/gherkin/lexer/ko.js" */
			} /* action switch */
		}
	}
	if (_trigger_goto) {
		continue;
	}
	}
	if (_goto_level <= _again) {
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	p += 1;
	if (p != pe) {
		_goto_level = _resume;
		continue;
	}
	}
	if (_goto_level <= _test_eof) {
	if (p == eof) {
	__acts = _lexer_eof_actions[ this.cs];
	__nacts =  _lexer_actions[__acts];
	__acts += 1;
	while (__nacts > 0) {
		__nacts -= 1;
		__acts += 1;
		switch (_lexer_actions[__acts - 1]) {
case 23:
/* line 115 "ragel/i18n/ko.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw new Error("Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.");
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 1000 "js/lib/gherkin/lexer/ko.js" */
		} /* eof action switch */
	}
	if (_trigger_goto) {
		continue;
	}
}
	}
	if (_goto_level <= _out) {
		break;
	}
	}
	}

/* line 165 "ragel/i18n/ko.js.rl" */
};


/*
 * Decode utf-8 byte sequence to string.
 */
var decodeUtf8 = function(bytes) {
  var result = "";
  var i = 0;
  var wc;
  var c;

  while (i < bytes.length) {
    /* parse as UTF-8 lead byte */
    wc = bytes[i++];
    if (wc < 0x80) {
      count = 0;
    } else if (wc < 0xC2 || wc >= 0xF8) {
      throw new Error("input is not a valid UTF-8 lead octet");
    } else if (wc < 0xE0) {
      count = 1;
      wc = (wc & 0x1F) << 6;
    } else if (wc < 0xF0) {
      count = 2;
      wc = (wc & 0x0F) << 12;
    } else /* wc < 0xF8 */ {
      count = 3;
      wc = (wc & 0x07) << 18;
    }

    /* parse trail bytes, if any */
    while (count) {
      if (!(i < bytes.length)) {
        throw new Error("short read");
      }
      if ((c = bytes[i++] ^ 0x80) > 0x3F) {
        throw new Error("input is not a valid UTF-8 trail octet");
      }
      wc |= c << (6 * --count);
      if (wc < (1 << (5 * count + 6))) {
        throw new Error("invalid non-minimal encoded input");
      }
    }

    /* handle conversion to UTF-16 if needed */
    if (wc > 0xFFFF) {
      wc -= 0x10000;
      result += String.fromCharCode(0xD800 + (wc >> 10));
      wc = 0xDC00 + (wc & 0x3FF);
    }
    result += String.fromCharCode(wc);
  }

  return result;
};

/*
 * Encode string to an array of bytes using utf8 encoding.
 *
 * Javascript internally stores character data as utf16 (like java).
 * String.charCodeAt() does *not* produce unicode points, but simply
 * reflects this internal representation. Thus, it is necessary
 * to first decode the utf-16 representation before encoding to
 * utf-8.
 */
var encodeUtf8 = function(string) {
  var bytes = [];
  var i = 0;
  var j = 0;
  var wc;

  while (i < string.length) {
    wc = string.charCodeAt(i++);
    if (wc >= 0xD800 && wc <= 0xDBFF && i < string.length && string.charCodeAt(i) >= 0xDC00 && string.charCodeAt(i) <= 0xDFFF) {
      /* decode UTF-16 */
      wc = 0x10000 + ((wc & 0x3FF) << 10) + (string.charCodeAt(i++) & 0x3FF);
    }

    /* emit lead byte */
    if (wc < 0x80) {
      bytes[j++] = wc;
      count = 0;
    } else if (wc < 0x800) {
      bytes[j++] = 0xC0 | (wc >> 6);
      count = 1;
    } else if (wc < 0x10000) {
      bytes[j++] = 0xE0 | (wc >> 12);
      count = 2;
    } else {
      /* SMP: 21-bit Unicode */
      bytes[j++] = 0xF0 | (wc >> 18);
      count = 3;
    }

    /* emit trail bytes, if any */
    while (count) {
      bytes[j++] = 0x80 | ((wc >> (6 * --count)) & 0x3F);
    }
  }

  return bytes;

};

Lexer.prototype.bytesToString = function(bytes) {
  if(typeof bytes.write == 'function') {
    // Node.js
    return bytes.toString('utf-8');
  }
  return decodeUtf8(bytes);
};

Lexer.prototype.stringToBytes = function(string) {
  return encodeUtf8(string);
};

Lexer.prototype.unindent = function(startcol, text) {
  startcol = startcol || 0;
  return text.replace(new RegExp('^[\t ]{0,' + startcol + '}', 'gm'), ''); 
};

Lexer.prototype.store_keyword_content = function(event, data, p, eof) {
  var end_point = (!this.next_keyword_start || (p == eof)) ? p : this.next_keyword_start;
  var content = this.unindent(this.start_col + 2, this.bytesToString(data.slice(this.content_start, end_point))).replace(/\s+$/,"");
  var content_lines = content.split("\n")
  var name = content_lines.shift() || "";
  name = name.trim();
  var description = content_lines.join("\n");
  this.listener[event](this.keyword, name, description, this.current_line);
  var nks = this.next_keyword_start;
  this.next_keyword_start = null;
  return nks ? nks - 1 : p;
};

Lexer.prototype.current_line_content = function(data, p) {
  var rest = Array.prototype.slice.call(data,this.last_newline, -1);
  var end = rest.indexOf(10) || -1;
  return this.bytesToString(rest.slice(0, end)).trim();
};

// Node.js export
if(typeof module !== 'undefined') {
  module.exports = Lexer;
}
// Require.js export
if (typeof define !== 'undefined') {
  if(define.amd) {
    define('gherkin/lexer/ko', [], function() {
      return Lexer;
    });
  } else {
    define('gherkin/lexer/ko', function(require, exports, module) {
      exports.Lexer = Lexer;
    });
  }
}

})();

}).call(this,require("buffer").Buffer)

},{"buffer":69}],218:[function(require,module,exports){
(function (Buffer){

/* line 1 "ragel/i18n/lt.js.rl" */
;(function() {


/* line 126 "ragel/i18n/lt.js.rl" */



/* line 11 "js/lib/gherkin/lexer/lt.js" */
var _lexer_actions = [
	0, 1, 0, 1, 1, 1, 2, 1, 
	3, 1, 4, 1, 5, 1, 6, 1, 
	7, 1, 8, 1, 9, 1, 10, 1, 
	11, 1, 12, 1, 13, 1, 16, 1, 
	17, 1, 18, 1, 19, 1, 20, 1, 
	21, 1, 22, 1, 23, 2, 2, 18, 
	2, 3, 4, 2, 13, 0, 2, 14, 
	15, 2, 17, 0, 2, 17, 1, 2, 
	17, 16, 2, 17, 19, 2, 18, 6, 
	2, 18, 7, 2, 18, 8, 2, 18, 
	9, 2, 18, 10, 2, 18, 16, 2, 
	20, 21, 2, 22, 0, 2, 22, 1, 
	2, 22, 16, 2, 22, 19, 3, 4, 
	14, 15, 3, 5, 14, 15, 3, 11, 
	14, 15, 3, 12, 14, 15, 3, 13, 
	14, 15, 3, 14, 15, 18, 3, 17, 
	0, 11, 3, 17, 14, 15, 4, 2, 
	14, 15, 18, 4, 3, 4, 14, 15, 
	4, 17, 0, 14, 15, 5, 17, 0, 
	11, 14, 15
];

var _lexer_key_offsets = [
	0, 0, 19, 37, 38, 39, 41, 43, 
	48, 53, 58, 63, 67, 71, 73, 74, 
	75, 76, 77, 78, 79, 80, 81, 82, 
	83, 84, 85, 86, 87, 88, 89, 91, 
	93, 98, 105, 110, 111, 112, 113, 114, 
	115, 116, 117, 119, 120, 121, 122, 123, 
	124, 125, 126, 127, 128, 129, 130, 131, 
	145, 147, 149, 151, 153, 155, 157, 159, 
	161, 163, 165, 167, 169, 171, 173, 175, 
	193, 194, 195, 196, 197, 198, 199, 200, 
	201, 202, 203, 204, 205, 206, 213, 215, 
	217, 219, 221, 223, 225, 227, 229, 230, 
	231, 232, 233, 234, 235, 236, 237, 248, 
	250, 252, 254, 256, 258, 260, 262, 264, 
	266, 268, 270, 272, 274, 276, 278, 280, 
	282, 284, 286, 288, 290, 292, 294, 296, 
	298, 300, 302, 304, 306, 308, 310, 312, 
	314, 316, 319, 321, 323, 325, 327, 329, 
	331, 333, 335, 337, 339, 341, 344, 347, 
	349, 351, 353, 355, 357, 359, 361, 363, 
	365, 367, 369, 371, 373, 375, 377, 378, 
	379, 380, 381, 382, 383, 385, 387, 388, 
	389, 390, 391, 392, 393, 394, 395, 396, 
	397, 398, 399, 400, 401, 415, 417, 419, 
	421, 423, 425, 427, 429, 431, 433, 435, 
	437, 439, 441, 443, 445, 447, 449, 451, 
	453, 455, 457, 459, 461, 463, 466, 468, 
	470, 472, 474, 476, 478, 480, 482, 484, 
	486, 488, 490, 492, 494, 496, 498, 499, 
	500, 501, 502, 516, 518, 520, 522, 524, 
	526, 528, 530, 532, 534, 536, 538, 540, 
	542, 544, 546, 548, 550, 552, 554, 556, 
	558, 560, 563, 565, 567, 569, 571, 573, 
	575, 577, 579, 581, 583, 586, 588, 590, 
	592, 594, 596, 598, 600, 602, 604, 606, 
	608, 611, 613, 615, 617, 619, 621, 623, 
	625, 627, 629, 631, 633, 635, 636, 637, 
	638, 639, 640, 641, 642, 643, 647, 653, 
	656, 658, 664, 682, 684, 686, 688, 690, 
	692, 694, 696, 698, 700, 703, 705, 707, 
	709, 711, 713, 715, 717, 719, 721, 723, 
	725, 727, 730, 732, 734, 736, 738, 740, 
	742, 744, 746, 748, 750, 752, 754, 756, 
	758, 759, 760
];

var _lexer_trans_keys = [
	10, 32, 34, 35, 37, 42, 64, 66, 
	68, 73, 75, 80, 83, 84, 86, 124, 
	239, 9, 13, 10, 32, 34, 35, 37, 
	42, 64, 66, 68, 73, 75, 80, 83, 
	84, 86, 124, 9, 13, 34, 34, 10, 
	13, 10, 13, 10, 32, 34, 9, 13, 
	10, 32, 34, 9, 13, 10, 32, 34, 
	9, 13, 10, 32, 34, 9, 13, 10, 
	32, 9, 13, 10, 32, 9, 13, 10, 
	13, 10, 95, 70, 69, 65, 84, 85, 
	82, 69, 95, 69, 78, 68, 95, 37, 
	32, 10, 13, 10, 13, 13, 32, 64, 
	9, 10, 9, 10, 13, 32, 64, 11, 
	12, 10, 32, 64, 9, 13, 101, 116, 
	117, 111, 116, 97, 114, 97, 111, 105, 
	110, 116, 101, 107, 115, 116, 97, 115, 
	58, 10, 10, 10, 32, 35, 37, 42, 
	64, 66, 68, 73, 75, 83, 84, 9, 
	13, 10, 95, 10, 70, 10, 69, 10, 
	65, 10, 84, 10, 85, 10, 82, 10, 
	69, 10, 95, 10, 69, 10, 78, 10, 
	68, 10, 95, 10, 37, 10, 32, 10, 
	32, 34, 35, 37, 42, 64, 66, 68, 
	73, 75, 80, 83, 84, 86, 124, 9, 
	13, 97, 118, 121, 122, 100, -59, -66, 
	105, 97, 105, 58, 10, 10, 10, 32, 
	35, 83, 124, 9, 13, 10, 97, 10, 
	118, 10, 121, 10, 98, -60, 10, -105, 
	10, 10, 58, 97, 99, 118, 121, 98, 
	-60, -105, 58, 10, 10, 10, 32, 35, 
	37, 64, 75, 80, 83, 86, 9, 13, 
	10, 95, 10, 70, 10, 69, 10, 65, 
	10, 84, 10, 85, 10, 82, 10, 69, 
	10, 95, 10, 69, 10, 78, 10, 68, 
	10, 95, 10, 37, 10, 111, 10, 110, 
	10, 116, 10, 101, 10, 107, 10, 115, 
	10, 116, 10, 97, 10, 115, 10, 58, 
	10, 97, 10, 118, 10, 121, 10, 122, 
	10, 100, -59, 10, -66, 10, 10, 105, 
	10, 97, 10, 105, 10, 97, 99, 10, 
	118, 10, 121, 10, 98, -60, 10, -105, 
	10, 10, 101, 10, 110, 10, 97, 10, 
	114, 10, 105, 10, 106, 10, 97, 117, 
	10, 105, 117, 10, 115, 10, 32, -59, 
	10, -95, 10, 10, 97, 10, 98, 10, 
	108, 10, 111, 10, 110, 10, 97, 10, 
	114, 10, 105, 10, 97, 10, 110, 10, 
	116, 101, 110, 97, 114, 105, 106, 97, 
	117, 105, 117, 115, 32, -59, -95, 97, 
	98, 108, 111, 110, 97, 115, 58, 10, 
	10, 10, 32, 35, 37, 42, 64, 66, 
	68, 73, 75, 83, 84, 9, 13, 10, 
	95, 10, 70, 10, 69, 10, 65, 10, 
	84, 10, 85, 10, 82, 10, 69, 10, 
	95, 10, 69, 10, 78, 10, 68, 10, 
	95, 10, 37, 10, 32, 10, 101, 10, 
	116, 10, 117, 10, 111, 10, 116, 10, 
	97, 10, 114, 10, 97, 10, 105, 10, 
	97, 99, 10, 118, 10, 121, 10, 98, 
	-60, 10, -105, 10, 10, 58, 10, 101, 
	10, 110, 10, 97, 10, 114, 10, 105, 
	10, 106, 10, 117, 10, 115, 10, 97, 
	10, 100, 115, 58, 10, 10, 10, 32, 
	35, 37, 42, 64, 66, 68, 73, 75, 
	83, 84, 9, 13, 10, 95, 10, 70, 
	10, 69, 10, 65, 10, 84, 10, 85, 
	10, 82, 10, 69, 10, 95, 10, 69, 
	10, 78, 10, 68, 10, 95, 10, 37, 
	10, 32, 10, 101, 10, 116, 10, 117, 
	10, 111, 10, 116, 10, 97, 10, 114, 
	10, 97, 111, 10, 105, 10, 110, 10, 
	116, 10, 101, 10, 107, 10, 115, 10, 
	116, 10, 97, 10, 115, 10, 58, 10, 
	97, 99, 10, 118, 10, 121, 10, 98, 
	-60, 10, -105, 10, 10, 101, 10, 110, 
	10, 97, 10, 114, 10, 105, 10, 106, 
	10, 97, 117, 10, 117, 10, 115, 10, 
	32, -59, 10, -95, 10, 10, 97, 10, 
	98, 10, 108, 10, 111, 10, 110, 10, 
	97, 10, 100, 97, 100, 97, 114, 105, 
	97, 110, 116, 32, 124, 9, 13, 10, 
	32, 92, 124, 9, 13, 10, 92, 124, 
	10, 92, 10, 32, 92, 124, 9, 13, 
	10, 32, 34, 35, 37, 42, 64, 66, 
	68, 73, 75, 80, 83, 84, 86, 124, 
	9, 13, 10, 101, 10, 116, 10, 117, 
	10, 111, 10, 116, 10, 97, 10, 114, 
	10, 97, 10, 105, 10, 97, 99, 10, 
	118, 10, 121, 10, 98, -60, 10, -105, 
	10, 10, 58, 10, 101, 10, 110, 10, 
	97, 10, 114, 10, 105, 10, 106, 10, 
	97, 117, 10, 117, 10, 115, 10, 32, 
	-59, 10, -95, 10, 10, 97, 10, 98, 
	10, 108, 10, 111, 10, 110, 10, 97, 
	10, 115, 10, 97, 10, 100, 187, 191, 
	0
];

var _lexer_single_lengths = [
	0, 17, 16, 1, 1, 2, 2, 3, 
	3, 3, 3, 2, 2, 2, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 2, 2, 
	3, 5, 3, 1, 1, 1, 1, 1, 
	1, 1, 2, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 12, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 16, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 5, 2, 2, 
	2, 2, 2, 2, 2, 2, 1, 1, 
	1, 1, 1, 1, 1, 1, 9, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 3, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 3, 3, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 1, 1, 
	1, 1, 1, 1, 2, 2, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 12, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 3, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 1, 1, 
	1, 1, 12, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 3, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 3, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	3, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 1, 1, 1, 
	1, 1, 1, 1, 1, 2, 4, 3, 
	2, 4, 16, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 3, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 3, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	1, 1, 0
];

var _lexer_range_lengths = [
	0, 1, 1, 0, 0, 0, 0, 1, 
	1, 1, 1, 1, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 1, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 1, 0, 
	0, 1, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0
];

var _lexer_index_offsets = [
	0, 0, 19, 37, 39, 41, 44, 47, 
	52, 57, 62, 67, 71, 75, 78, 80, 
	82, 84, 86, 88, 90, 92, 94, 96, 
	98, 100, 102, 104, 106, 108, 110, 113, 
	116, 121, 128, 133, 135, 137, 139, 141, 
	143, 145, 147, 150, 152, 154, 156, 158, 
	160, 162, 164, 166, 168, 170, 172, 174, 
	188, 191, 194, 197, 200, 203, 206, 209, 
	212, 215, 218, 221, 224, 227, 230, 233, 
	251, 253, 255, 257, 259, 261, 263, 265, 
	267, 269, 271, 273, 275, 277, 284, 287, 
	290, 293, 296, 299, 302, 305, 308, 310, 
	312, 314, 316, 318, 320, 322, 324, 335, 
	338, 341, 344, 347, 350, 353, 356, 359, 
	362, 365, 368, 371, 374, 377, 380, 383, 
	386, 389, 392, 395, 398, 401, 404, 407, 
	410, 413, 416, 419, 422, 425, 428, 431, 
	434, 437, 441, 444, 447, 450, 453, 456, 
	459, 462, 465, 468, 471, 474, 478, 482, 
	485, 488, 491, 494, 497, 500, 503, 506, 
	509, 512, 515, 518, 521, 524, 527, 529, 
	531, 533, 535, 537, 539, 542, 545, 547, 
	549, 551, 553, 555, 557, 559, 561, 563, 
	565, 567, 569, 571, 573, 587, 590, 593, 
	596, 599, 602, 605, 608, 611, 614, 617, 
	620, 623, 626, 629, 632, 635, 638, 641, 
	644, 647, 650, 653, 656, 659, 663, 666, 
	669, 672, 675, 678, 681, 684, 687, 690, 
	693, 696, 699, 702, 705, 708, 711, 713, 
	715, 717, 719, 733, 736, 739, 742, 745, 
	748, 751, 754, 757, 760, 763, 766, 769, 
	772, 775, 778, 781, 784, 787, 790, 793, 
	796, 799, 803, 806, 809, 812, 815, 818, 
	821, 824, 827, 830, 833, 837, 840, 843, 
	846, 849, 852, 855, 858, 861, 864, 867, 
	870, 874, 877, 880, 883, 886, 889, 892, 
	895, 898, 901, 904, 907, 910, 912, 914, 
	916, 918, 920, 922, 924, 926, 930, 936, 
	940, 943, 949, 967, 970, 973, 976, 979, 
	982, 985, 988, 991, 994, 998, 1001, 1004, 
	1007, 1010, 1013, 1016, 1019, 1022, 1025, 1028, 
	1031, 1034, 1038, 1041, 1044, 1047, 1050, 1053, 
	1056, 1059, 1062, 1065, 1068, 1071, 1074, 1077, 
	1080, 1082, 1084
];

var _lexer_indicies = [
	2, 1, 3, 4, 5, 6, 7, 8, 
	9, 10, 11, 12, 13, 14, 15, 16, 
	17, 1, 0, 2, 1, 3, 4, 5, 
	6, 7, 8, 9, 10, 11, 12, 13, 
	14, 15, 16, 1, 0, 18, 0, 19, 
	0, 21, 22, 20, 24, 25, 23, 28, 
	27, 29, 27, 26, 32, 31, 33, 31, 
	30, 32, 31, 34, 31, 30, 32, 31, 
	35, 31, 30, 37, 36, 36, 0, 2, 
	38, 38, 0, 40, 41, 39, 2, 0, 
	42, 0, 43, 0, 44, 0, 45, 0, 
	46, 0, 47, 0, 48, 0, 49, 0, 
	50, 0, 51, 0, 52, 0, 53, 0, 
	54, 0, 55, 0, 56, 0, 58, 59, 
	57, 61, 62, 60, 0, 0, 0, 0, 
	63, 64, 65, 64, 64, 67, 66, 63, 
	2, 68, 7, 68, 0, 69, 0, 70, 
	0, 71, 0, 72, 0, 73, 0, 70, 
	0, 70, 0, 74, 75, 0, 70, 0, 
	76, 0, 77, 0, 78, 0, 79, 0, 
	80, 0, 81, 0, 82, 0, 83, 0, 
	84, 0, 86, 85, 88, 87, 88, 89, 
	90, 91, 92, 90, 93, 94, 95, 96, 
	97, 98, 89, 87, 88, 99, 87, 88, 
	100, 87, 88, 101, 87, 88, 102, 87, 
	88, 103, 87, 88, 104, 87, 88, 105, 
	87, 88, 106, 87, 88, 107, 87, 88, 
	108, 87, 88, 109, 87, 88, 110, 87, 
	88, 111, 87, 88, 112, 87, 88, 113, 
	87, 115, 114, 116, 117, 118, 119, 120, 
	121, 122, 123, 124, 125, 126, 127, 128, 
	129, 114, 0, 130, 0, 131, 0, 132, 
	0, 133, 0, 134, 0, 135, 0, 136, 
	0, 137, 0, 138, 0, 139, 0, 140, 
	0, 142, 141, 144, 143, 144, 145, 146, 
	147, 146, 145, 143, 144, 148, 143, 144, 
	149, 143, 144, 150, 143, 144, 151, 143, 
	152, 144, 143, 153, 144, 143, 144, 154, 
	143, 155, 156, 0, 157, 0, 158, 0, 
	159, 0, 160, 0, 161, 0, 162, 0, 
	164, 163, 166, 165, 166, 167, 168, 169, 
	168, 170, 171, 172, 173, 167, 165, 166, 
	174, 165, 166, 175, 165, 166, 176, 165, 
	166, 177, 165, 166, 178, 165, 166, 179, 
	165, 166, 180, 165, 166, 181, 165, 166, 
	182, 165, 166, 183, 165, 166, 184, 165, 
	166, 185, 165, 166, 186, 165, 166, 187, 
	165, 166, 188, 165, 166, 189, 165, 166, 
	190, 165, 166, 191, 165, 166, 192, 165, 
	166, 193, 165, 166, 194, 165, 166, 195, 
	165, 166, 196, 165, 166, 197, 165, 166, 
	198, 165, 166, 199, 165, 166, 200, 165, 
	166, 201, 165, 166, 202, 165, 203, 166, 
	165, 204, 166, 165, 166, 205, 165, 166, 
	206, 165, 166, 196, 165, 166, 207, 208, 
	165, 166, 209, 165, 166, 210, 165, 166, 
	211, 165, 212, 166, 165, 196, 166, 165, 
	166, 213, 165, 166, 214, 165, 166, 215, 
	165, 166, 216, 165, 166, 217, 165, 166, 
	218, 165, 166, 219, 195, 165, 166, 196, 
	220, 165, 166, 221, 165, 166, 222, 165, 
	223, 166, 165, 224, 166, 165, 166, 225, 
	165, 166, 226, 165, 166, 227, 165, 166, 
	228, 165, 166, 194, 165, 166, 229, 165, 
	166, 230, 165, 166, 231, 165, 166, 232, 
	165, 166, 233, 165, 166, 205, 165, 234, 
	0, 235, 0, 236, 0, 237, 0, 238, 
	0, 239, 0, 240, 241, 0, 139, 242, 
	0, 243, 0, 244, 0, 245, 0, 246, 
	0, 247, 0, 248, 0, 249, 0, 250, 
	0, 251, 0, 252, 0, 253, 0, 254, 
	0, 256, 255, 258, 257, 258, 259, 260, 
	261, 262, 260, 263, 264, 265, 266, 267, 
	268, 259, 257, 258, 269, 257, 258, 270, 
	257, 258, 271, 257, 258, 272, 257, 258, 
	273, 257, 258, 274, 257, 258, 275, 257, 
	258, 276, 257, 258, 277, 257, 258, 278, 
	257, 258, 279, 257, 258, 280, 257, 258, 
	281, 257, 258, 282, 257, 258, 283, 257, 
	258, 284, 257, 258, 285, 257, 258, 286, 
	257, 258, 287, 257, 258, 288, 257, 258, 
	285, 257, 258, 285, 257, 258, 289, 257, 
	258, 285, 257, 258, 290, 291, 257, 258, 
	292, 257, 258, 293, 257, 258, 294, 257, 
	295, 258, 257, 296, 258, 257, 258, 283, 
	257, 258, 297, 257, 258, 298, 257, 258, 
	299, 257, 258, 300, 257, 258, 301, 257, 
	258, 302, 257, 258, 303, 257, 258, 296, 
	257, 258, 304, 257, 258, 288, 257, 305, 
	0, 306, 0, 308, 307, 310, 309, 310, 
	311, 312, 313, 314, 312, 315, 316, 317, 
	318, 319, 320, 311, 309, 310, 321, 309, 
	310, 322, 309, 310, 323, 309, 310, 324, 
	309, 310, 325, 309, 310, 326, 309, 310, 
	327, 309, 310, 328, 309, 310, 329, 309, 
	310, 330, 309, 310, 331, 309, 310, 332, 
	309, 310, 333, 309, 310, 334, 309, 310, 
	335, 309, 310, 336, 309, 310, 337, 309, 
	310, 338, 309, 310, 339, 309, 310, 340, 
	309, 310, 337, 309, 310, 337, 309, 310, 
	341, 342, 309, 310, 337, 309, 310, 343, 
	309, 310, 344, 309, 310, 345, 309, 310, 
	346, 309, 310, 347, 309, 310, 348, 309, 
	310, 349, 309, 310, 350, 309, 310, 335, 
	309, 310, 351, 352, 309, 310, 353, 309, 
	310, 354, 309, 310, 355, 309, 356, 310, 
	309, 350, 310, 309, 310, 357, 309, 310, 
	358, 309, 310, 359, 309, 310, 360, 309, 
	310, 361, 309, 310, 362, 309, 310, 363, 
	349, 309, 310, 364, 309, 310, 365, 309, 
	310, 366, 309, 367, 310, 309, 368, 310, 
	309, 310, 369, 309, 310, 370, 309, 310, 
	371, 309, 310, 372, 309, 310, 348, 309, 
	310, 373, 309, 310, 340, 309, 374, 0, 
	73, 0, 375, 0, 376, 0, 377, 0, 
	378, 0, 379, 0, 137, 0, 380, 381, 
	380, 0, 384, 383, 385, 386, 383, 382, 
	0, 388, 389, 387, 0, 388, 387, 384, 
	390, 388, 389, 390, 387, 384, 391, 392, 
	393, 394, 395, 396, 397, 398, 399, 400, 
	401, 402, 403, 404, 405, 391, 0, 88, 
	406, 87, 88, 407, 87, 88, 408, 87, 
	88, 409, 87, 88, 410, 87, 88, 407, 
	87, 88, 407, 87, 88, 411, 87, 88, 
	407, 87, 88, 412, 413, 87, 88, 414, 
	87, 88, 415, 87, 88, 416, 87, 417, 
	88, 87, 418, 88, 87, 88, 113, 87, 
	88, 419, 87, 88, 420, 87, 88, 421, 
	87, 88, 422, 87, 88, 423, 87, 88, 
	424, 87, 88, 425, 426, 87, 88, 427, 
	87, 88, 428, 87, 88, 429, 87, 430, 
	88, 87, 431, 88, 87, 88, 432, 87, 
	88, 433, 87, 88, 434, 87, 88, 435, 
	87, 88, 436, 87, 88, 426, 87, 88, 
	418, 87, 88, 437, 87, 88, 410, 87, 
	438, 0, 1, 0, 439, 0
];

var _lexer_trans_targs = [
	0, 2, 2, 3, 13, 15, 29, 32, 
	35, 37, 41, 42, 72, 93, 293, 295, 
	301, 344, 4, 5, 6, 7, 6, 6, 
	7, 6, 8, 8, 8, 9, 8, 8, 
	8, 9, 10, 11, 12, 2, 12, 13, 
	2, 14, 16, 17, 18, 19, 20, 21, 
	22, 23, 24, 25, 26, 27, 28, 346, 
	30, 31, 2, 14, 31, 2, 14, 33, 
	34, 2, 33, 32, 34, 36, 29, 38, 
	39, 40, 43, 44, 45, 46, 47, 48, 
	49, 50, 51, 52, 53, 54, 55, 54, 
	55, 55, 2, 56, 70, 307, 309, 313, 
	314, 316, 342, 57, 58, 59, 60, 61, 
	62, 63, 64, 65, 66, 67, 68, 69, 
	2, 71, 2, 2, 3, 13, 15, 29, 
	32, 35, 37, 41, 42, 72, 93, 293, 
	295, 301, 73, 74, 75, 76, 77, 78, 
	79, 80, 81, 82, 83, 84, 85, 84, 
	85, 85, 2, 86, 87, 88, 89, 90, 
	91, 92, 71, 94, 166, 95, 96, 97, 
	98, 99, 100, 101, 102, 101, 102, 102, 
	2, 103, 117, 127, 137, 160, 104, 105, 
	106, 107, 108, 109, 110, 111, 112, 113, 
	114, 115, 116, 2, 118, 119, 120, 121, 
	122, 123, 124, 125, 126, 71, 128, 129, 
	130, 131, 132, 133, 134, 135, 136, 138, 
	143, 139, 140, 141, 142, 144, 145, 146, 
	147, 148, 149, 150, 151, 152, 153, 154, 
	155, 156, 157, 158, 159, 161, 162, 163, 
	164, 165, 167, 168, 169, 170, 171, 172, 
	173, 230, 174, 175, 176, 177, 178, 179, 
	180, 181, 182, 183, 184, 185, 186, 187, 
	188, 187, 188, 188, 2, 189, 203, 204, 
	206, 210, 211, 213, 228, 190, 191, 192, 
	193, 194, 195, 196, 197, 198, 199, 200, 
	201, 202, 2, 71, 205, 203, 207, 208, 
	209, 212, 214, 220, 215, 216, 217, 218, 
	219, 221, 222, 223, 224, 225, 226, 227, 
	229, 231, 232, 233, 234, 233, 234, 234, 
	2, 235, 249, 250, 252, 256, 257, 268, 
	291, 236, 237, 238, 239, 240, 241, 242, 
	243, 244, 245, 246, 247, 248, 2, 71, 
	251, 249, 253, 254, 255, 258, 259, 260, 
	261, 262, 263, 264, 265, 266, 267, 269, 
	274, 270, 271, 272, 273, 275, 276, 277, 
	278, 279, 280, 281, 282, 283, 284, 285, 
	286, 287, 288, 289, 290, 292, 294, 296, 
	297, 298, 299, 300, 301, 302, 303, 305, 
	306, 304, 302, 303, 304, 302, 305, 306, 
	3, 13, 15, 29, 32, 35, 37, 41, 
	42, 72, 93, 293, 295, 301, 308, 70, 
	310, 311, 312, 315, 317, 323, 318, 319, 
	320, 321, 322, 324, 325, 326, 327, 328, 
	329, 330, 341, 331, 332, 333, 334, 335, 
	336, 337, 338, 339, 340, 343, 345, 0
];

var _lexer_trans_actions = [
	43, 0, 54, 3, 1, 0, 29, 1, 
	29, 29, 29, 29, 29, 29, 29, 29, 
	35, 0, 0, 0, 7, 139, 48, 0, 
	102, 9, 5, 45, 134, 45, 0, 33, 
	122, 33, 33, 0, 11, 106, 0, 0, 
	114, 25, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 57, 149, 126, 0, 110, 23, 0, 
	27, 118, 27, 51, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 57, 144, 0, 
	54, 0, 72, 33, 84, 84, 84, 84, 
	84, 84, 84, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	15, 15, 31, 130, 60, 57, 31, 63, 
	57, 63, 63, 63, 63, 63, 63, 63, 
	63, 66, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 57, 144, 0, 
	54, 0, 81, 84, 0, 0, 0, 0, 
	0, 0, 21, 0, 0, 0, 0, 0, 
	0, 0, 0, 57, 144, 0, 54, 0, 
	69, 33, 84, 84, 84, 84, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 13, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 13, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 57, 
	144, 0, 54, 0, 78, 33, 84, 84, 
	84, 84, 84, 84, 84, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 19, 19, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 57, 144, 0, 54, 0, 
	75, 33, 84, 84, 84, 84, 84, 84, 
	84, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 17, 17, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 37, 37, 
	54, 37, 87, 0, 0, 39, 0, 0, 
	93, 90, 41, 96, 90, 96, 96, 96, 
	96, 96, 96, 96, 96, 99, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0
];

var _lexer_eof_actions = [
	0, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43
];

var lexer_start = 1;
var lexer_first_final = 346;
var lexer_error = 0;

var lexer_en_main = 1;


/* line 129 "ragel/i18n/lt.js.rl" */

/* line 130 "ragel/i18n/lt.js.rl" */

/* line 131 "ragel/i18n/lt.js.rl" */

/* line 132 "ragel/i18n/lt.js.rl" */

var Lexer = function(listener) {
  // Check that listener has the required functions
  var events = ['comment', 'tag', 'feature', 'background', 'scenario', 'scenario_outline', 'examples', 'step', 'doc_string', 'row', 'eof'];
  for(var i=0, len=events.length; i<len; i++) {
    var event = events[i];
    if(typeof listener[event] != 'function') {
      throw new Error("Error. No " + event + " function exists on " + JSON.stringify(listener));
    }
  }
  this.listener = listener;
};

Lexer.prototype.scan = function(data) {
  var ending = "\n%_FEATURE_END_%";
  if(typeof data == 'string') {
    data = this.stringToBytes(data + ending);
  } else if(typeof Buffer != 'undefined' && Buffer.isBuffer(data)) {
    // Node.js
    var buf = new Buffer(data.length + ending.length);
    data.copy(buf, 0, 0);
    new Buffer(ending).copy(buf, data.length, 0);
    data = buf;
  }
  var eof = pe = data.length;
  var p = 0;

  this.line_number = 1;
  this.last_newline = 0;
  var signedCharValue=function(v){return v > 127 ? v-256 : v; };

  
/* line 670 "js/lib/gherkin/lexer/lt.js" */
{
	  this.cs = lexer_start;
} /* JSCodeGen::writeInit */

/* line 164 "ragel/i18n/lt.js.rl" */
  
/* line 677 "js/lib/gherkin/lexer/lt.js" */
{
	var _klen, _trans, _keys, _ps, _widec, _acts, _nacts;
	var _goto_level, _resume, _eof_trans, _again, _test_eof;
	var _out;
	_klen = _trans = _keys = _acts = _nacts = null;
	_goto_level = 0;
	_resume = 10;
	_eof_trans = 15;
	_again = 20;
	_test_eof = 30;
	_out = 40;
	while (true) {
	_trigger_goto = false;
	if (_goto_level <= 0) {
	if (p == pe) {
		_goto_level = _test_eof;
		continue;
	}
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	}
	if (_goto_level <= _resume) {
	_keys = _lexer_key_offsets[ this.cs];
	_trans = _lexer_index_offsets[ this.cs];
	_klen = _lexer_single_lengths[ this.cs];
	_break_match = false;
	
	do {
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + _klen - 1;

	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + ( (_upper - _lower) >> 1 );

	        if (( signedCharValue(data[p])) < _lexer_trans_keys[_mid]) {
	           _upper = _mid - 1;
	        } else if (( signedCharValue(data[p])) > _lexer_trans_keys[_mid]) {
	           _lower = _mid + 1;
	        } else {
	           _trans += (_mid - _keys);
	           _break_match = true;
	           break;
	        };
	     } /* while */
	     if (_break_match) { break; }
	     _keys += _klen;
	     _trans += _klen;
	  }
	  _klen = _lexer_range_lengths[ this.cs];
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + (_klen << 1) - 2;
	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + (((_upper-_lower) >> 1) & ~1);
	        if (( signedCharValue(data[p])) < _lexer_trans_keys[_mid]) {
	          _upper = _mid - 2;
	         } else if (( signedCharValue(data[p])) > _lexer_trans_keys[_mid+1]) {
	          _lower = _mid + 2;
	        } else {
	          _trans += ((_mid - _keys) >> 1);
	          _break_match = true;
	          break;
	        }
	     } /* while */
	     if (_break_match) { break; }
	     _trans += _klen
	  }
	} while (false);
	_trans = _lexer_indicies[_trans];
	 this.cs = _lexer_trans_targs[_trans];
	if (_lexer_trans_actions[_trans] != 0) {
		_acts = _lexer_trans_actions[_trans];
		_nacts = _lexer_actions[_acts];
		_acts += 1;
		while (_nacts > 0) {
			_nacts -= 1;
			_acts += 1;
			switch (_lexer_actions[_acts - 1]) {
case 0:
/* line 6 "ragel/i18n/lt.js.rl" */

    this.content_start = p;
    this.current_line = this.line_number;
    this.start_col = p - this.last_newline - (this.keyword+':').length;
  		break;
case 1:
/* line 12 "ragel/i18n/lt.js.rl" */

    this.current_line = this.line_number;
    this.start_col = p - this.last_newline;
  		break;
case 2:
/* line 17 "ragel/i18n/lt.js.rl" */

    this.content_start = p;
  		break;
case 3:
/* line 21 "ragel/i18n/lt.js.rl" */

    this.docstring_content_type_start = p;
  		break;
case 4:
/* line 25 "ragel/i18n/lt.js.rl" */

    this.docstring_content_type_end = p;
  		break;
case 5:
/* line 29 "ragel/i18n/lt.js.rl" */

    var con = this.unindent(
      this.start_col, 
      this.bytesToString(data.slice(this.content_start, this.next_keyword_start-1)).replace(/(\r?\n)?([\t ])*$/, '').replace(/\\\"\\\"\\\"/mg, '"""')
    );
    var con_type = this.bytesToString(data.slice(this.docstring_content_type_start, this.docstring_content_type_end)).trim();
    this.listener.doc_string(con_type, con, this.current_line); 
  		break;
case 6:
/* line 38 "ragel/i18n/lt.js.rl" */

    p = this.store_keyword_content('feature', data, p, eof);
  		break;
case 7:
/* line 42 "ragel/i18n/lt.js.rl" */

    p = this.store_keyword_content('background', data, p, eof);
  		break;
case 8:
/* line 46 "ragel/i18n/lt.js.rl" */

    p = this.store_keyword_content('scenario', data, p, eof);
  		break;
case 9:
/* line 50 "ragel/i18n/lt.js.rl" */

    p = this.store_keyword_content('scenario_outline', data, p, eof);
  		break;
case 10:
/* line 54 "ragel/i18n/lt.js.rl" */

    p = this.store_keyword_content('examples', data, p, eof);
  		break;
case 11:
/* line 58 "ragel/i18n/lt.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.step(this.keyword, con, this.current_line);
  		break;
case 12:
/* line 63 "ragel/i18n/lt.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.comment(con, this.line_number);
    this.keyword_start = null;
  		break;
case 13:
/* line 69 "ragel/i18n/lt.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.tag(con, this.line_number);
    this.keyword_start = null;
  		break;
case 14:
/* line 75 "ragel/i18n/lt.js.rl" */

    this.line_number++;
  		break;
case 15:
/* line 79 "ragel/i18n/lt.js.rl" */

    this.last_newline = p + 1;
  		break;
case 16:
/* line 83 "ragel/i18n/lt.js.rl" */

    this.keyword_start = this.keyword_start || p;
  		break;
case 17:
/* line 87 "ragel/i18n/lt.js.rl" */

    this.keyword = this.bytesToString(data.slice(this.keyword_start, p)).replace(/:$/, '');
    this.keyword_start = null;
  		break;
case 18:
/* line 92 "ragel/i18n/lt.js.rl" */

    this.next_keyword_start = p;
  		break;
case 19:
/* line 96 "ragel/i18n/lt.js.rl" */

    p = p - 1;
    current_row = [];
    this.current_line = this.line_number;
  		break;
case 20:
/* line 102 "ragel/i18n/lt.js.rl" */

    this.content_start = p;
  		break;
case 21:
/* line 106 "ragel/i18n/lt.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    current_row.push(con.replace(/\\\|/, "|").replace(/\\n/, "\n").replace(/\\\\/, "\\"));
  		break;
case 22:
/* line 111 "ragel/i18n/lt.js.rl" */

    this.listener.row(current_row, this.current_line);
  		break;
case 23:
/* line 115 "ragel/i18n/lt.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw new Error("Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.");
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 904 "js/lib/gherkin/lexer/lt.js" */
			} /* action switch */
		}
	}
	if (_trigger_goto) {
		continue;
	}
	}
	if (_goto_level <= _again) {
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	p += 1;
	if (p != pe) {
		_goto_level = _resume;
		continue;
	}
	}
	if (_goto_level <= _test_eof) {
	if (p == eof) {
	__acts = _lexer_eof_actions[ this.cs];
	__nacts =  _lexer_actions[__acts];
	__acts += 1;
	while (__nacts > 0) {
		__nacts -= 1;
		__acts += 1;
		switch (_lexer_actions[__acts - 1]) {
case 23:
/* line 115 "ragel/i18n/lt.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw new Error("Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.");
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 943 "js/lib/gherkin/lexer/lt.js" */
		} /* eof action switch */
	}
	if (_trigger_goto) {
		continue;
	}
}
	}
	if (_goto_level <= _out) {
		break;
	}
	}
	}

/* line 165 "ragel/i18n/lt.js.rl" */
};


/*
 * Decode utf-8 byte sequence to string.
 */
var decodeUtf8 = function(bytes) {
  var result = "";
  var i = 0;
  var wc;
  var c;

  while (i < bytes.length) {
    /* parse as UTF-8 lead byte */
    wc = bytes[i++];
    if (wc < 0x80) {
      count = 0;
    } else if (wc < 0xC2 || wc >= 0xF8) {
      throw new Error("input is not a valid UTF-8 lead octet");
    } else if (wc < 0xE0) {
      count = 1;
      wc = (wc & 0x1F) << 6;
    } else if (wc < 0xF0) {
      count = 2;
      wc = (wc & 0x0F) << 12;
    } else /* wc < 0xF8 */ {
      count = 3;
      wc = (wc & 0x07) << 18;
    }

    /* parse trail bytes, if any */
    while (count) {
      if (!(i < bytes.length)) {
        throw new Error("short read");
      }
      if ((c = bytes[i++] ^ 0x80) > 0x3F) {
        throw new Error("input is not a valid UTF-8 trail octet");
      }
      wc |= c << (6 * --count);
      if (wc < (1 << (5 * count + 6))) {
        throw new Error("invalid non-minimal encoded input");
      }
    }

    /* handle conversion to UTF-16 if needed */
    if (wc > 0xFFFF) {
      wc -= 0x10000;
      result += String.fromCharCode(0xD800 + (wc >> 10));
      wc = 0xDC00 + (wc & 0x3FF);
    }
    result += String.fromCharCode(wc);
  }

  return result;
};

/*
 * Encode string to an array of bytes using utf8 encoding.
 *
 * Javascript internally stores character data as utf16 (like java).
 * String.charCodeAt() does *not* produce unicode points, but simply
 * reflects this internal representation. Thus, it is necessary
 * to first decode the utf-16 representation before encoding to
 * utf-8.
 */
var encodeUtf8 = function(string) {
  var bytes = [];
  var i = 0;
  var j = 0;
  var wc;

  while (i < string.length) {
    wc = string.charCodeAt(i++);
    if (wc >= 0xD800 && wc <= 0xDBFF && i < string.length && string.charCodeAt(i) >= 0xDC00 && string.charCodeAt(i) <= 0xDFFF) {
      /* decode UTF-16 */
      wc = 0x10000 + ((wc & 0x3FF) << 10) + (string.charCodeAt(i++) & 0x3FF);
    }

    /* emit lead byte */
    if (wc < 0x80) {
      bytes[j++] = wc;
      count = 0;
    } else if (wc < 0x800) {
      bytes[j++] = 0xC0 | (wc >> 6);
      count = 1;
    } else if (wc < 0x10000) {
      bytes[j++] = 0xE0 | (wc >> 12);
      count = 2;
    } else {
      /* SMP: 21-bit Unicode */
      bytes[j++] = 0xF0 | (wc >> 18);
      count = 3;
    }

    /* emit trail bytes, if any */
    while (count) {
      bytes[j++] = 0x80 | ((wc >> (6 * --count)) & 0x3F);
    }
  }

  return bytes;

};

Lexer.prototype.bytesToString = function(bytes) {
  if(typeof bytes.write == 'function') {
    // Node.js
    return bytes.toString('utf-8');
  }
  return decodeUtf8(bytes);
};

Lexer.prototype.stringToBytes = function(string) {
  return encodeUtf8(string);
};

Lexer.prototype.unindent = function(startcol, text) {
  startcol = startcol || 0;
  return text.replace(new RegExp('^[\t ]{0,' + startcol + '}', 'gm'), ''); 
};

Lexer.prototype.store_keyword_content = function(event, data, p, eof) {
  var end_point = (!this.next_keyword_start || (p == eof)) ? p : this.next_keyword_start;
  var content = this.unindent(this.start_col + 2, this.bytesToString(data.slice(this.content_start, end_point))).replace(/\s+$/,"");
  var content_lines = content.split("\n")
  var name = content_lines.shift() || "";
  name = name.trim();
  var description = content_lines.join("\n");
  this.listener[event](this.keyword, name, description, this.current_line);
  var nks = this.next_keyword_start;
  this.next_keyword_start = null;
  return nks ? nks - 1 : p;
};

Lexer.prototype.current_line_content = function(data, p) {
  var rest = Array.prototype.slice.call(data,this.last_newline, -1);
  var end = rest.indexOf(10) || -1;
  return this.bytesToString(rest.slice(0, end)).trim();
};

// Node.js export
if(typeof module !== 'undefined') {
  module.exports = Lexer;
}
// Require.js export
if (typeof define !== 'undefined') {
  if(define.amd) {
    define('gherkin/lexer/lt', [], function() {
      return Lexer;
    });
  } else {
    define('gherkin/lexer/lt', function(require, exports, module) {
      exports.Lexer = Lexer;
    });
  }
}

})();

}).call(this,require("buffer").Buffer)

},{"buffer":69}],219:[function(require,module,exports){
(function (Buffer){

/* line 1 "ragel/i18n/lu.js.rl" */
;(function() {


/* line 126 "ragel/i18n/lu.js.rl" */



/* line 11 "js/lib/gherkin/lexer/lu.js" */
var _lexer_actions = [
	0, 1, 0, 1, 1, 1, 2, 1, 
	3, 1, 4, 1, 5, 1, 6, 1, 
	7, 1, 8, 1, 9, 1, 10, 1, 
	11, 1, 12, 1, 13, 1, 16, 1, 
	17, 1, 18, 1, 19, 1, 20, 1, 
	21, 1, 22, 1, 23, 2, 2, 18, 
	2, 3, 4, 2, 13, 0, 2, 14, 
	15, 2, 17, 0, 2, 17, 1, 2, 
	17, 16, 2, 17, 19, 2, 18, 6, 
	2, 18, 7, 2, 18, 8, 2, 18, 
	9, 2, 18, 10, 2, 18, 16, 2, 
	20, 21, 2, 22, 0, 2, 22, 1, 
	2, 22, 16, 2, 22, 19, 3, 4, 
	14, 15, 3, 5, 14, 15, 3, 11, 
	14, 15, 3, 12, 14, 15, 3, 13, 
	14, 15, 3, 14, 15, 18, 3, 17, 
	0, 11, 3, 17, 14, 15, 4, 2, 
	14, 15, 18, 4, 3, 4, 14, 15, 
	4, 17, 0, 14, 15, 5, 17, 0, 
	11, 14, 15
];

var _lexer_key_offsets = [
	0, 0, 21, 41, 42, 43, 45, 47, 
	52, 57, 62, 67, 71, 75, 77, 78, 
	79, 80, 81, 82, 83, 84, 85, 86, 
	87, 88, 89, 90, 91, 92, 93, 95, 
	97, 102, 109, 114, 115, 116, 117, 118, 
	119, 120, 121, 122, 123, 124, 125, 126, 
	133, 135, 137, 139, 141, 143, 145, 147, 
	149, 151, 153, 155, 157, 159, 161, 163, 
	165, 185, 186, 187, 188, 189, 190, 191, 
	192, 193, 194, 195, 196, 197, 198, 199, 
	200, 201, 202, 203, 215, 217, 219, 221, 
	223, 225, 227, 229, 231, 233, 235, 237, 
	239, 241, 243, 245, 247, 249, 251, 253, 
	255, 257, 259, 261, 263, 265, 267, 269, 
	271, 273, 275, 277, 279, 281, 283, 285, 
	287, 289, 291, 293, 295, 297, 299, 301, 
	303, 305, 307, 309, 311, 313, 315, 317, 
	319, 321, 323, 325, 327, 329, 331, 333, 
	335, 337, 339, 341, 343, 345, 347, 348, 
	349, 350, 351, 352, 353, 354, 355, 356, 
	357, 358, 359, 360, 376, 378, 380, 382, 
	384, 386, 388, 390, 392, 394, 396, 398, 
	400, 402, 404, 406, 408, 410, 412, 414, 
	416, 418, 420, 422, 424, 426, 428, 430, 
	432, 434, 436, 438, 440, 442, 444, 446, 
	448, 450, 452, 454, 456, 458, 460, 462, 
	464, 466, 468, 470, 472, 476, 478, 480, 
	482, 484, 486, 488, 490, 492, 494, 496, 
	498, 500, 502, 503, 504, 505, 506, 507, 
	508, 509, 510, 511, 512, 513, 514, 515, 
	516, 517, 518, 519, 520, 521, 522, 537, 
	539, 541, 543, 545, 547, 549, 551, 553, 
	555, 557, 559, 561, 563, 565, 567, 569, 
	571, 573, 575, 577, 579, 581, 583, 585, 
	587, 589, 591, 593, 595, 597, 599, 601, 
	603, 605, 607, 609, 611, 613, 617, 619, 
	621, 623, 625, 627, 629, 631, 633, 635, 
	637, 639, 641, 643, 644, 645, 646, 647, 
	648, 649, 650, 651, 652, 653, 670, 672, 
	674, 676, 678, 680, 682, 684, 686, 688, 
	690, 692, 694, 696, 698, 700, 702, 704, 
	706, 708, 710, 712, 714, 716, 718, 720, 
	722, 724, 726, 728, 730, 732, 734, 736, 
	738, 740, 742, 744, 746, 748, 750, 752, 
	754, 756, 758, 760, 762, 764, 766, 768, 
	770, 772, 774, 776, 778, 780, 782, 784, 
	786, 790, 792, 794, 796, 798, 800, 802, 
	804, 806, 808, 810, 812, 814, 816, 819, 
	820, 821, 822, 823, 824, 825, 826, 827, 
	828, 829, 830, 831, 832, 836, 842, 845, 
	847, 853, 873, 874, 875
];

var _lexer_trans_keys = [
	10, 32, 34, 35, 37, 42, 64, 66, 
	70, 72, 80, 83, 97, 100, 109, 117, 
	119, 124, 239, 9, 13, 10, 32, 34, 
	35, 37, 42, 64, 66, 70, 72, 80, 
	83, 97, 100, 109, 117, 119, 124, 9, 
	13, 34, 34, 10, 13, 10, 13, 10, 
	32, 34, 9, 13, 10, 32, 34, 9, 
	13, 10, 32, 34, 9, 13, 10, 32, 
	34, 9, 13, 10, 32, 9, 13, 10, 
	32, 9, 13, 10, 13, 10, 95, 70, 
	69, 65, 84, 85, 82, 69, 95, 69, 
	78, 68, 95, 37, 32, 10, 13, 10, 
	13, 13, 32, 64, 9, 10, 9, 10, 
	13, 32, 64, 11, 12, 10, 32, 64, 
	9, 13, 101, 105, 115, 112, 105, 108, 
	108, 101, 114, 58, 10, 10, 10, 32, 
	35, 70, 124, 9, 13, 10, 117, 10, 
	110, 10, 107, 10, 116, 10, 105, 10, 
	111, 10, 110, 10, 97, 10, 108, 10, 
	105, 10, 116, -61, 10, -87, 10, 10, 
	105, 10, 116, 10, 58, 10, 32, 34, 
	35, 37, 42, 64, 66, 70, 72, 80, 
	83, 97, 100, 109, 117, 119, 124, 9, 
	13, 117, 110, 107, 116, 105, 111, 110, 
	97, 108, 105, 116, -61, -87, 105, 116, 
	58, 10, 10, 10, 32, 35, 37, 64, 
	66, 70, 72, 80, 83, 9, 13, 10, 
	95, 10, 70, 10, 69, 10, 65, 10, 
	84, 10, 85, 10, 82, 10, 69, 10, 
	95, 10, 69, 10, 78, 10, 68, 10, 
	95, 10, 37, 10, 101, 10, 105, 10, 
	115, 10, 112, 10, 105, 10, 108, 10, 
	108, 10, 101, 10, 114, 10, 58, 10, 
	117, 10, 110, 10, 107, 10, 116, 10, 
	105, 10, 111, 10, 110, 10, 97, 10, 
	108, 10, 105, 10, 116, -61, 10, -87, 
	10, 10, 105, 10, 116, 10, 97, 10, 
	110, 10, 110, 10, 101, 10, 114, 10, 
	103, 10, 114, 10, 111, 10, 110, 10, 
	100, 10, 108, 10, 97, 10, 110, 10, 
	103, 10, 32, 10, 118, 10, 117, 10, 
	109, 10, 32, 10, 83, 10, 122, 10, 
	101, 10, 110, 10, 97, 10, 114, 10, 
	105, 10, 111, 97, 110, 110, 101, 114, 
	103, 114, 111, 110, 100, 58, 10, 10, 
	10, 32, 35, 37, 42, 64, 70, 80, 
	83, 97, 100, 109, 117, 119, 9, 13, 
	10, 95, 10, 70, 10, 69, 10, 65, 
	10, 84, 10, 85, 10, 82, 10, 69, 
	10, 95, 10, 69, 10, 78, 10, 68, 
	10, 95, 10, 37, 10, 32, 10, 117, 
	10, 110, 10, 107, 10, 116, 10, 105, 
	10, 111, 10, 110, 10, 97, 10, 108, 
	10, 105, 10, 116, -61, 10, -87, 10, 
	10, 105, 10, 116, 10, 58, 10, 108, 
	10, 97, 10, 110, 10, 103, 10, 32, 
	10, 118, 10, 117, 10, 109, 10, 32, 
	10, 83, 10, 122, 10, 101, 10, 110, 
	10, 97, 10, 114, 10, 105, 10, 111, 
	10, 32, 110, 119, 10, 101, 10, 114, 
	10, 97, 10, 110, 10, 110, -61, 10, 
	-92, 10, 10, 103, 10, 101, 10, 104, 
	10, 111, 10, 108, 10, 108, 108, 97, 
	110, 103, 32, 118, 117, 109, 32, 83, 
	122, 101, 110, 97, 114, 105, 111, 58, 
	10, 10, 10, 32, 35, 37, 42, 64, 
	70, 83, 97, 100, 109, 117, 119, 9, 
	13, 10, 95, 10, 70, 10, 69, 10, 
	65, 10, 84, 10, 85, 10, 82, 10, 
	69, 10, 95, 10, 69, 10, 78, 10, 
	68, 10, 95, 10, 37, 10, 32, 10, 
	117, 10, 110, 10, 107, 10, 116, 10, 
	105, 10, 111, 10, 110, 10, 97, 10, 
	108, 10, 105, 10, 116, -61, 10, -87, 
	10, 10, 105, 10, 116, 10, 58, 10, 
	122, 10, 101, 10, 110, 10, 97, 10, 
	114, 10, 105, 10, 111, 10, 32, 110, 
	119, 10, 101, 10, 114, 10, 97, 10, 
	110, 10, 110, -61, 10, -92, 10, 10, 
	103, 10, 101, 10, 104, 10, 111, 10, 
	108, 10, 108, 122, 101, 110, 97, 114, 
	105, 111, 58, 10, 10, 10, 32, 35, 
	37, 42, 64, 70, 72, 80, 83, 97, 
	100, 109, 117, 119, 9, 13, 10, 95, 
	10, 70, 10, 69, 10, 65, 10, 84, 
	10, 85, 10, 82, 10, 69, 10, 95, 
	10, 69, 10, 78, 10, 68, 10, 95, 
	10, 37, 10, 32, 10, 117, 10, 110, 
	10, 107, 10, 116, 10, 105, 10, 111, 
	10, 110, 10, 97, 10, 108, 10, 105, 
	10, 116, -61, 10, -87, 10, 10, 105, 
	10, 116, 10, 58, 10, 97, 10, 110, 
	10, 110, 10, 101, 10, 114, 10, 103, 
	10, 114, 10, 111, 10, 110, 10, 100, 
	10, 108, 10, 97, 10, 110, 10, 103, 
	10, 32, 10, 118, 10, 117, 10, 109, 
	10, 32, 10, 83, 10, 122, 10, 101, 
	10, 110, 10, 97, 10, 114, 10, 105, 
	10, 111, 10, 32, 110, 119, 10, 101, 
	10, 114, 10, 97, 10, 110, 10, 110, 
	-61, 10, -92, 10, 10, 103, 10, 101, 
	10, 104, 10, 111, 10, 108, 10, 108, 
	32, 110, 119, 101, 114, 97, 110, 110, 
	-61, -92, 103, 101, 104, 111, 108, 108, 
	32, 124, 9, 13, 10, 32, 92, 124, 
	9, 13, 10, 92, 124, 10, 92, 10, 
	32, 92, 124, 9, 13, 10, 32, 34, 
	35, 37, 42, 64, 66, 70, 72, 80, 
	83, 97, 100, 109, 117, 119, 124, 9, 
	13, 187, 191, 0
];

var _lexer_single_lengths = [
	0, 19, 18, 1, 1, 2, 2, 3, 
	3, 3, 3, 2, 2, 2, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 2, 2, 
	3, 5, 3, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 5, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	18, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 10, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 14, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 4, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 13, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 4, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 15, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	4, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 3, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 2, 4, 3, 2, 
	4, 18, 1, 1, 0
];

var _lexer_range_lengths = [
	0, 1, 1, 0, 0, 0, 0, 1, 
	1, 1, 1, 1, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 1, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 1, 0, 0, 
	1, 1, 0, 0, 0
];

var _lexer_index_offsets = [
	0, 0, 21, 41, 43, 45, 48, 51, 
	56, 61, 66, 71, 75, 79, 82, 84, 
	86, 88, 90, 92, 94, 96, 98, 100, 
	102, 104, 106, 108, 110, 112, 114, 117, 
	120, 125, 132, 137, 139, 141, 143, 145, 
	147, 149, 151, 153, 155, 157, 159, 161, 
	168, 171, 174, 177, 180, 183, 186, 189, 
	192, 195, 198, 201, 204, 207, 210, 213, 
	216, 236, 238, 240, 242, 244, 246, 248, 
	250, 252, 254, 256, 258, 260, 262, 264, 
	266, 268, 270, 272, 284, 287, 290, 293, 
	296, 299, 302, 305, 308, 311, 314, 317, 
	320, 323, 326, 329, 332, 335, 338, 341, 
	344, 347, 350, 353, 356, 359, 362, 365, 
	368, 371, 374, 377, 380, 383, 386, 389, 
	392, 395, 398, 401, 404, 407, 410, 413, 
	416, 419, 422, 425, 428, 431, 434, 437, 
	440, 443, 446, 449, 452, 455, 458, 461, 
	464, 467, 470, 473, 476, 479, 482, 484, 
	486, 488, 490, 492, 494, 496, 498, 500, 
	502, 504, 506, 508, 524, 527, 530, 533, 
	536, 539, 542, 545, 548, 551, 554, 557, 
	560, 563, 566, 569, 572, 575, 578, 581, 
	584, 587, 590, 593, 596, 599, 602, 605, 
	608, 611, 614, 617, 620, 623, 626, 629, 
	632, 635, 638, 641, 644, 647, 650, 653, 
	656, 659, 662, 665, 668, 673, 676, 679, 
	682, 685, 688, 691, 694, 697, 700, 703, 
	706, 709, 712, 714, 716, 718, 720, 722, 
	724, 726, 728, 730, 732, 734, 736, 738, 
	740, 742, 744, 746, 748, 750, 752, 767, 
	770, 773, 776, 779, 782, 785, 788, 791, 
	794, 797, 800, 803, 806, 809, 812, 815, 
	818, 821, 824, 827, 830, 833, 836, 839, 
	842, 845, 848, 851, 854, 857, 860, 863, 
	866, 869, 872, 875, 878, 881, 886, 889, 
	892, 895, 898, 901, 904, 907, 910, 913, 
	916, 919, 922, 925, 927, 929, 931, 933, 
	935, 937, 939, 941, 943, 945, 962, 965, 
	968, 971, 974, 977, 980, 983, 986, 989, 
	992, 995, 998, 1001, 1004, 1007, 1010, 1013, 
	1016, 1019, 1022, 1025, 1028, 1031, 1034, 1037, 
	1040, 1043, 1046, 1049, 1052, 1055, 1058, 1061, 
	1064, 1067, 1070, 1073, 1076, 1079, 1082, 1085, 
	1088, 1091, 1094, 1097, 1100, 1103, 1106, 1109, 
	1112, 1115, 1118, 1121, 1124, 1127, 1130, 1133, 
	1136, 1141, 1144, 1147, 1150, 1153, 1156, 1159, 
	1162, 1165, 1168, 1171, 1174, 1177, 1180, 1184, 
	1186, 1188, 1190, 1192, 1194, 1196, 1198, 1200, 
	1202, 1204, 1206, 1208, 1210, 1214, 1220, 1224, 
	1227, 1233, 1253, 1255, 1257
];

var _lexer_indicies = [
	2, 1, 3, 4, 5, 6, 7, 8, 
	9, 10, 11, 12, 13, 14, 15, 16, 
	14, 17, 18, 1, 0, 2, 1, 3, 
	4, 5, 6, 7, 8, 9, 10, 11, 
	12, 13, 14, 15, 16, 14, 17, 1, 
	0, 19, 0, 20, 0, 22, 23, 21, 
	25, 26, 24, 29, 28, 30, 28, 27, 
	33, 32, 34, 32, 31, 33, 32, 35, 
	32, 31, 33, 32, 36, 32, 31, 38, 
	37, 37, 0, 2, 39, 39, 0, 41, 
	42, 40, 2, 0, 43, 0, 44, 0, 
	45, 0, 46, 0, 47, 0, 48, 0, 
	49, 0, 50, 0, 51, 0, 52, 0, 
	53, 0, 54, 0, 55, 0, 56, 0, 
	57, 0, 59, 60, 58, 62, 63, 61, 
	0, 0, 0, 0, 64, 65, 66, 65, 
	65, 68, 67, 64, 2, 69, 7, 69, 
	0, 70, 0, 71, 0, 72, 0, 73, 
	0, 74, 0, 75, 0, 76, 0, 77, 
	0, 78, 0, 79, 0, 81, 80, 83, 
	82, 83, 84, 85, 86, 85, 84, 82, 
	83, 87, 82, 83, 88, 82, 83, 89, 
	82, 83, 90, 82, 83, 91, 82, 83, 
	92, 82, 83, 93, 82, 83, 94, 82, 
	83, 95, 82, 83, 96, 82, 83, 97, 
	82, 98, 83, 82, 99, 83, 82, 83, 
	100, 82, 83, 101, 82, 83, 102, 82, 
	104, 103, 105, 106, 107, 108, 109, 110, 
	111, 112, 113, 114, 115, 116, 117, 118, 
	116, 119, 103, 0, 120, 0, 121, 0, 
	122, 0, 123, 0, 124, 0, 125, 0, 
	126, 0, 127, 0, 128, 0, 129, 0, 
	130, 0, 131, 0, 132, 0, 133, 0, 
	134, 0, 135, 0, 137, 136, 139, 138, 
	139, 140, 141, 142, 141, 143, 144, 145, 
	146, 147, 140, 138, 139, 148, 138, 139, 
	149, 138, 139, 150, 138, 139, 151, 138, 
	139, 152, 138, 139, 153, 138, 139, 154, 
	138, 139, 155, 138, 139, 156, 138, 139, 
	157, 138, 139, 158, 138, 139, 159, 138, 
	139, 160, 138, 139, 161, 138, 139, 162, 
	138, 139, 163, 138, 139, 164, 138, 139, 
	165, 138, 139, 166, 138, 139, 167, 138, 
	139, 168, 138, 139, 169, 138, 139, 170, 
	138, 139, 171, 138, 139, 172, 138, 139, 
	173, 138, 139, 174, 138, 139, 175, 138, 
	139, 176, 138, 139, 177, 138, 139, 178, 
	138, 139, 179, 138, 139, 180, 138, 139, 
	181, 138, 139, 182, 138, 183, 139, 138, 
	184, 139, 138, 139, 185, 138, 139, 170, 
	138, 139, 186, 138, 139, 187, 138, 139, 
	188, 138, 139, 189, 138, 139, 190, 138, 
	139, 191, 138, 139, 192, 138, 139, 193, 
	138, 139, 194, 138, 139, 170, 138, 139, 
	195, 138, 139, 196, 138, 139, 197, 138, 
	139, 198, 138, 139, 199, 138, 139, 200, 
	138, 139, 201, 138, 139, 202, 138, 139, 
	203, 138, 139, 204, 138, 139, 205, 138, 
	139, 206, 138, 139, 207, 138, 139, 208, 
	138, 139, 209, 138, 139, 210, 138, 139, 
	170, 138, 211, 0, 212, 0, 213, 0, 
	214, 0, 215, 0, 216, 0, 217, 0, 
	218, 0, 219, 0, 220, 0, 221, 0, 
	223, 222, 225, 224, 225, 226, 227, 228, 
	229, 227, 230, 231, 232, 233, 234, 235, 
	236, 234, 226, 224, 225, 237, 224, 225, 
	238, 224, 225, 239, 224, 225, 240, 224, 
	225, 241, 224, 225, 242, 224, 225, 243, 
	224, 225, 244, 224, 225, 245, 224, 225, 
	246, 224, 225, 247, 224, 225, 248, 224, 
	225, 249, 224, 225, 250, 224, 225, 251, 
	224, 225, 252, 224, 225, 253, 224, 225, 
	254, 224, 225, 255, 224, 225, 256, 224, 
	225, 257, 224, 225, 258, 224, 225, 259, 
	224, 225, 260, 224, 225, 261, 224, 225, 
	262, 224, 263, 225, 224, 264, 225, 224, 
	225, 265, 224, 225, 266, 224, 225, 251, 
	224, 225, 267, 224, 225, 268, 224, 225, 
	269, 224, 225, 270, 224, 225, 271, 224, 
	225, 272, 224, 225, 273, 224, 225, 274, 
	224, 225, 275, 224, 225, 276, 224, 225, 
	277, 224, 225, 278, 224, 225, 279, 224, 
	225, 280, 224, 225, 281, 224, 225, 282, 
	224, 225, 266, 224, 225, 251, 283, 284, 
	224, 225, 285, 224, 225, 283, 224, 225, 
	286, 224, 225, 287, 224, 225, 283, 224, 
	288, 225, 224, 283, 225, 224, 225, 289, 
	224, 225, 290, 224, 225, 291, 224, 225, 
	292, 224, 225, 293, 224, 225, 283, 224, 
	294, 0, 295, 0, 296, 0, 297, 0, 
	298, 0, 299, 0, 300, 0, 301, 0, 
	302, 0, 303, 0, 304, 0, 305, 0, 
	306, 0, 307, 0, 308, 0, 309, 0, 
	310, 0, 311, 0, 313, 312, 315, 314, 
	315, 316, 317, 318, 319, 317, 320, 321, 
	322, 323, 324, 325, 323, 316, 314, 315, 
	326, 314, 315, 327, 314, 315, 328, 314, 
	315, 329, 314, 315, 330, 314, 315, 331, 
	314, 315, 332, 314, 315, 333, 314, 315, 
	334, 314, 315, 335, 314, 315, 336, 314, 
	315, 337, 314, 315, 338, 314, 315, 339, 
	314, 315, 340, 314, 315, 341, 314, 315, 
	342, 314, 315, 343, 314, 315, 344, 314, 
	315, 345, 314, 315, 346, 314, 315, 347, 
	314, 315, 348, 314, 315, 349, 314, 315, 
	350, 314, 315, 351, 314, 352, 315, 314, 
	353, 315, 314, 315, 354, 314, 315, 355, 
	314, 315, 340, 314, 315, 356, 314, 315, 
	357, 314, 315, 358, 314, 315, 359, 314, 
	315, 360, 314, 315, 361, 314, 315, 355, 
	314, 315, 340, 362, 363, 314, 315, 364, 
	314, 315, 362, 314, 315, 365, 314, 315, 
	366, 314, 315, 362, 314, 367, 315, 314, 
	362, 315, 314, 315, 368, 314, 315, 369, 
	314, 315, 370, 314, 315, 371, 314, 315, 
	372, 314, 315, 362, 314, 373, 0, 374, 
	0, 375, 0, 376, 0, 377, 0, 378, 
	0, 379, 0, 380, 0, 382, 381, 384, 
	383, 384, 385, 386, 387, 388, 386, 389, 
	390, 391, 392, 393, 394, 395, 396, 394, 
	385, 383, 384, 397, 383, 384, 398, 383, 
	384, 399, 383, 384, 400, 383, 384, 401, 
	383, 384, 402, 383, 384, 403, 383, 384, 
	404, 383, 384, 405, 383, 384, 406, 383, 
	384, 407, 383, 384, 408, 383, 384, 409, 
	383, 384, 410, 383, 384, 411, 383, 384, 
	412, 383, 384, 413, 383, 384, 414, 383, 
	384, 415, 383, 384, 416, 383, 384, 417, 
	383, 384, 418, 383, 384, 419, 383, 384, 
	420, 383, 384, 421, 383, 384, 422, 383, 
	423, 384, 383, 424, 384, 383, 384, 425, 
	383, 384, 426, 383, 384, 411, 383, 384, 
	427, 383, 384, 428, 383, 384, 429, 383, 
	384, 430, 383, 384, 431, 383, 384, 432, 
	383, 384, 433, 383, 384, 434, 383, 384, 
	435, 383, 384, 426, 383, 384, 436, 383, 
	384, 437, 383, 384, 438, 383, 384, 439, 
	383, 384, 440, 383, 384, 441, 383, 384, 
	442, 383, 384, 443, 383, 384, 444, 383, 
	384, 445, 383, 384, 446, 383, 384, 447, 
	383, 384, 448, 383, 384, 449, 383, 384, 
	450, 383, 384, 451, 383, 384, 426, 383, 
	384, 411, 452, 453, 383, 384, 454, 383, 
	384, 452, 383, 384, 455, 383, 384, 456, 
	383, 384, 452, 383, 457, 384, 383, 452, 
	384, 383, 384, 458, 383, 384, 459, 383, 
	384, 460, 383, 384, 461, 383, 384, 462, 
	383, 384, 452, 383, 57, 463, 464, 0, 
	465, 0, 463, 0, 466, 0, 467, 0, 
	463, 0, 468, 0, 463, 0, 469, 0, 
	470, 0, 471, 0, 472, 0, 473, 0, 
	463, 0, 474, 475, 474, 0, 478, 477, 
	479, 480, 477, 476, 0, 482, 483, 481, 
	0, 482, 481, 478, 484, 482, 483, 484, 
	481, 478, 485, 486, 487, 488, 489, 490, 
	491, 492, 493, 494, 495, 496, 497, 498, 
	499, 497, 500, 485, 0, 501, 0, 1, 
	0, 502, 0
];

var _lexer_trans_targs = [
	0, 2, 2, 3, 13, 15, 29, 32, 
	35, 65, 150, 226, 299, 382, 385, 388, 
	390, 396, 402, 4, 5, 6, 7, 6, 
	6, 7, 6, 8, 8, 8, 9, 8, 
	8, 8, 9, 10, 11, 12, 2, 12, 
	13, 2, 14, 16, 17, 18, 19, 20, 
	21, 22, 23, 24, 25, 26, 27, 28, 
	404, 30, 31, 2, 14, 31, 2, 14, 
	33, 34, 2, 33, 32, 34, 36, 37, 
	38, 39, 40, 41, 42, 43, 44, 45, 
	46, 47, 46, 47, 47, 2, 48, 49, 
	50, 51, 52, 53, 54, 55, 56, 57, 
	58, 59, 60, 61, 62, 63, 64, 2, 
	2, 3, 13, 15, 29, 32, 35, 65, 
	150, 226, 299, 382, 385, 388, 390, 396, 
	66, 67, 68, 69, 70, 71, 72, 73, 
	74, 75, 76, 77, 78, 79, 80, 81, 
	82, 83, 82, 83, 83, 2, 84, 98, 
	108, 123, 133, 143, 85, 86, 87, 88, 
	89, 90, 91, 92, 93, 94, 95, 96, 
	97, 2, 99, 100, 101, 102, 103, 104, 
	105, 106, 107, 64, 109, 110, 111, 112, 
	113, 114, 115, 116, 117, 118, 119, 120, 
	121, 122, 124, 125, 126, 127, 128, 129, 
	130, 131, 132, 134, 135, 136, 137, 138, 
	139, 140, 141, 142, 143, 144, 145, 146, 
	147, 148, 149, 151, 152, 153, 154, 155, 
	156, 157, 158, 159, 160, 161, 162, 163, 
	162, 163, 163, 2, 164, 178, 179, 195, 
	205, 212, 215, 218, 220, 165, 166, 167, 
	168, 169, 170, 171, 172, 173, 174, 175, 
	176, 177, 2, 64, 180, 181, 182, 183, 
	184, 185, 186, 187, 188, 189, 190, 191, 
	192, 193, 194, 196, 197, 198, 199, 200, 
	201, 202, 203, 204, 205, 206, 207, 208, 
	209, 210, 211, 178, 213, 214, 216, 217, 
	219, 221, 222, 223, 224, 225, 227, 228, 
	229, 230, 231, 232, 233, 234, 235, 236, 
	237, 238, 239, 240, 241, 242, 243, 244, 
	245, 246, 245, 246, 246, 2, 247, 261, 
	262, 278, 285, 288, 291, 293, 248, 249, 
	250, 251, 252, 253, 254, 255, 256, 257, 
	258, 259, 260, 2, 64, 263, 264, 265, 
	266, 267, 268, 269, 270, 271, 272, 273, 
	274, 275, 276, 277, 279, 280, 281, 282, 
	283, 284, 261, 286, 287, 289, 290, 292, 
	294, 295, 296, 297, 298, 300, 301, 302, 
	303, 304, 305, 306, 307, 308, 309, 308, 
	309, 309, 2, 310, 324, 325, 341, 351, 
	361, 368, 371, 374, 376, 311, 312, 313, 
	314, 315, 316, 317, 318, 319, 320, 321, 
	322, 323, 2, 64, 326, 327, 328, 329, 
	330, 331, 332, 333, 334, 335, 336, 337, 
	338, 339, 340, 342, 343, 344, 345, 346, 
	347, 348, 349, 350, 352, 353, 354, 355, 
	356, 357, 358, 359, 360, 361, 362, 363, 
	364, 365, 366, 367, 324, 369, 370, 372, 
	373, 375, 377, 378, 379, 380, 381, 29, 
	383, 384, 386, 387, 389, 391, 392, 393, 
	394, 395, 396, 397, 398, 400, 401, 399, 
	397, 398, 399, 397, 400, 401, 3, 13, 
	15, 29, 32, 35, 65, 150, 226, 299, 
	382, 385, 388, 390, 396, 403, 0
];

var _lexer_trans_actions = [
	43, 0, 54, 3, 1, 0, 29, 1, 
	29, 29, 29, 29, 29, 29, 29, 29, 
	29, 35, 0, 0, 0, 7, 139, 48, 
	0, 102, 9, 5, 45, 134, 45, 0, 
	33, 122, 33, 33, 0, 11, 106, 0, 
	0, 114, 25, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 57, 149, 126, 0, 110, 23, 
	0, 27, 118, 27, 51, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	57, 144, 0, 54, 0, 81, 84, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 21, 31, 
	130, 60, 57, 31, 63, 57, 63, 63, 
	63, 63, 63, 63, 63, 63, 63, 66, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	57, 144, 0, 54, 0, 69, 33, 84, 
	84, 84, 84, 84, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 13, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 13, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 57, 144, 
	0, 54, 0, 72, 33, 84, 84, 84, 
	84, 84, 84, 84, 84, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 15, 15, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	57, 144, 0, 54, 0, 78, 33, 84, 
	84, 84, 84, 84, 84, 84, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 19, 19, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 57, 144, 0, 
	54, 0, 75, 33, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 17, 17, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 37, 37, 54, 37, 
	87, 0, 0, 39, 0, 0, 93, 90, 
	41, 96, 90, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 99, 0, 0
];

var _lexer_eof_actions = [
	0, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43
];

var lexer_start = 1;
var lexer_first_final = 404;
var lexer_error = 0;

var lexer_en_main = 1;


/* line 129 "ragel/i18n/lu.js.rl" */

/* line 130 "ragel/i18n/lu.js.rl" */

/* line 131 "ragel/i18n/lu.js.rl" */

/* line 132 "ragel/i18n/lu.js.rl" */

var Lexer = function(listener) {
  // Check that listener has the required functions
  var events = ['comment', 'tag', 'feature', 'background', 'scenario', 'scenario_outline', 'examples', 'step', 'doc_string', 'row', 'eof'];
  for(var i=0, len=events.length; i<len; i++) {
    var event = events[i];
    if(typeof listener[event] != 'function') {
      throw new Error("Error. No " + event + " function exists on " + JSON.stringify(listener));
    }
  }
  this.listener = listener;
};

Lexer.prototype.scan = function(data) {
  var ending = "\n%_FEATURE_END_%";
  if(typeof data == 'string') {
    data = this.stringToBytes(data + ending);
  } else if(typeof Buffer != 'undefined' && Buffer.isBuffer(data)) {
    // Node.js
    var buf = new Buffer(data.length + ending.length);
    data.copy(buf, 0, 0);
    new Buffer(ending).copy(buf, data.length, 0);
    data = buf;
  }
  var eof = pe = data.length;
  var p = 0;

  this.line_number = 1;
  this.last_newline = 0;
  var signedCharValue=function(v){return v > 127 ? v-256 : v; };

  
/* line 757 "js/lib/gherkin/lexer/lu.js" */
{
	  this.cs = lexer_start;
} /* JSCodeGen::writeInit */

/* line 164 "ragel/i18n/lu.js.rl" */
  
/* line 764 "js/lib/gherkin/lexer/lu.js" */
{
	var _klen, _trans, _keys, _ps, _widec, _acts, _nacts;
	var _goto_level, _resume, _eof_trans, _again, _test_eof;
	var _out;
	_klen = _trans = _keys = _acts = _nacts = null;
	_goto_level = 0;
	_resume = 10;
	_eof_trans = 15;
	_again = 20;
	_test_eof = 30;
	_out = 40;
	while (true) {
	_trigger_goto = false;
	if (_goto_level <= 0) {
	if (p == pe) {
		_goto_level = _test_eof;
		continue;
	}
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	}
	if (_goto_level <= _resume) {
	_keys = _lexer_key_offsets[ this.cs];
	_trans = _lexer_index_offsets[ this.cs];
	_klen = _lexer_single_lengths[ this.cs];
	_break_match = false;
	
	do {
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + _klen - 1;

	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + ( (_upper - _lower) >> 1 );

	        if (( signedCharValue(data[p])) < _lexer_trans_keys[_mid]) {
	           _upper = _mid - 1;
	        } else if (( signedCharValue(data[p])) > _lexer_trans_keys[_mid]) {
	           _lower = _mid + 1;
	        } else {
	           _trans += (_mid - _keys);
	           _break_match = true;
	           break;
	        };
	     } /* while */
	     if (_break_match) { break; }
	     _keys += _klen;
	     _trans += _klen;
	  }
	  _klen = _lexer_range_lengths[ this.cs];
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + (_klen << 1) - 2;
	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + (((_upper-_lower) >> 1) & ~1);
	        if (( signedCharValue(data[p])) < _lexer_trans_keys[_mid]) {
	          _upper = _mid - 2;
	         } else if (( signedCharValue(data[p])) > _lexer_trans_keys[_mid+1]) {
	          _lower = _mid + 2;
	        } else {
	          _trans += ((_mid - _keys) >> 1);
	          _break_match = true;
	          break;
	        }
	     } /* while */
	     if (_break_match) { break; }
	     _trans += _klen
	  }
	} while (false);
	_trans = _lexer_indicies[_trans];
	 this.cs = _lexer_trans_targs[_trans];
	if (_lexer_trans_actions[_trans] != 0) {
		_acts = _lexer_trans_actions[_trans];
		_nacts = _lexer_actions[_acts];
		_acts += 1;
		while (_nacts > 0) {
			_nacts -= 1;
			_acts += 1;
			switch (_lexer_actions[_acts - 1]) {
case 0:
/* line 6 "ragel/i18n/lu.js.rl" */

    this.content_start = p;
    this.current_line = this.line_number;
    this.start_col = p - this.last_newline - (this.keyword+':').length;
  		break;
case 1:
/* line 12 "ragel/i18n/lu.js.rl" */

    this.current_line = this.line_number;
    this.start_col = p - this.last_newline;
  		break;
case 2:
/* line 17 "ragel/i18n/lu.js.rl" */

    this.content_start = p;
  		break;
case 3:
/* line 21 "ragel/i18n/lu.js.rl" */

    this.docstring_content_type_start = p;
  		break;
case 4:
/* line 25 "ragel/i18n/lu.js.rl" */

    this.docstring_content_type_end = p;
  		break;
case 5:
/* line 29 "ragel/i18n/lu.js.rl" */

    var con = this.unindent(
      this.start_col, 
      this.bytesToString(data.slice(this.content_start, this.next_keyword_start-1)).replace(/(\r?\n)?([\t ])*$/, '').replace(/\\\"\\\"\\\"/mg, '"""')
    );
    var con_type = this.bytesToString(data.slice(this.docstring_content_type_start, this.docstring_content_type_end)).trim();
    this.listener.doc_string(con_type, con, this.current_line); 
  		break;
case 6:
/* line 38 "ragel/i18n/lu.js.rl" */

    p = this.store_keyword_content('feature', data, p, eof);
  		break;
case 7:
/* line 42 "ragel/i18n/lu.js.rl" */

    p = this.store_keyword_content('background', data, p, eof);
  		break;
case 8:
/* line 46 "ragel/i18n/lu.js.rl" */

    p = this.store_keyword_content('scenario', data, p, eof);
  		break;
case 9:
/* line 50 "ragel/i18n/lu.js.rl" */

    p = this.store_keyword_content('scenario_outline', data, p, eof);
  		break;
case 10:
/* line 54 "ragel/i18n/lu.js.rl" */

    p = this.store_keyword_content('examples', data, p, eof);
  		break;
case 11:
/* line 58 "ragel/i18n/lu.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.step(this.keyword, con, this.current_line);
  		break;
case 12:
/* line 63 "ragel/i18n/lu.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.comment(con, this.line_number);
    this.keyword_start = null;
  		break;
case 13:
/* line 69 "ragel/i18n/lu.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.tag(con, this.line_number);
    this.keyword_start = null;
  		break;
case 14:
/* line 75 "ragel/i18n/lu.js.rl" */

    this.line_number++;
  		break;
case 15:
/* line 79 "ragel/i18n/lu.js.rl" */

    this.last_newline = p + 1;
  		break;
case 16:
/* line 83 "ragel/i18n/lu.js.rl" */

    this.keyword_start = this.keyword_start || p;
  		break;
case 17:
/* line 87 "ragel/i18n/lu.js.rl" */

    this.keyword = this.bytesToString(data.slice(this.keyword_start, p)).replace(/:$/, '');
    this.keyword_start = null;
  		break;
case 18:
/* line 92 "ragel/i18n/lu.js.rl" */

    this.next_keyword_start = p;
  		break;
case 19:
/* line 96 "ragel/i18n/lu.js.rl" */

    p = p - 1;
    current_row = [];
    this.current_line = this.line_number;
  		break;
case 20:
/* line 102 "ragel/i18n/lu.js.rl" */

    this.content_start = p;
  		break;
case 21:
/* line 106 "ragel/i18n/lu.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    current_row.push(con.replace(/\\\|/, "|").replace(/\\n/, "\n").replace(/\\\\/, "\\"));
  		break;
case 22:
/* line 111 "ragel/i18n/lu.js.rl" */

    this.listener.row(current_row, this.current_line);
  		break;
case 23:
/* line 115 "ragel/i18n/lu.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw new Error("Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.");
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 991 "js/lib/gherkin/lexer/lu.js" */
			} /* action switch */
		}
	}
	if (_trigger_goto) {
		continue;
	}
	}
	if (_goto_level <= _again) {
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	p += 1;
	if (p != pe) {
		_goto_level = _resume;
		continue;
	}
	}
	if (_goto_level <= _test_eof) {
	if (p == eof) {
	__acts = _lexer_eof_actions[ this.cs];
	__nacts =  _lexer_actions[__acts];
	__acts += 1;
	while (__nacts > 0) {
		__nacts -= 1;
		__acts += 1;
		switch (_lexer_actions[__acts - 1]) {
case 23:
/* line 115 "ragel/i18n/lu.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw new Error("Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.");
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 1030 "js/lib/gherkin/lexer/lu.js" */
		} /* eof action switch */
	}
	if (_trigger_goto) {
		continue;
	}
}
	}
	if (_goto_level <= _out) {
		break;
	}
	}
	}

/* line 165 "ragel/i18n/lu.js.rl" */
};


/*
 * Decode utf-8 byte sequence to string.
 */
var decodeUtf8 = function(bytes) {
  var result = "";
  var i = 0;
  var wc;
  var c;

  while (i < bytes.length) {
    /* parse as UTF-8 lead byte */
    wc = bytes[i++];
    if (wc < 0x80) {
      count = 0;
    } else if (wc < 0xC2 || wc >= 0xF8) {
      throw new Error("input is not a valid UTF-8 lead octet");
    } else if (wc < 0xE0) {
      count = 1;
      wc = (wc & 0x1F) << 6;
    } else if (wc < 0xF0) {
      count = 2;
      wc = (wc & 0x0F) << 12;
    } else /* wc < 0xF8 */ {
      count = 3;
      wc = (wc & 0x07) << 18;
    }

    /* parse trail bytes, if any */
    while (count) {
      if (!(i < bytes.length)) {
        throw new Error("short read");
      }
      if ((c = bytes[i++] ^ 0x80) > 0x3F) {
        throw new Error("input is not a valid UTF-8 trail octet");
      }
      wc |= c << (6 * --count);
      if (wc < (1 << (5 * count + 6))) {
        throw new Error("invalid non-minimal encoded input");
      }
    }

    /* handle conversion to UTF-16 if needed */
    if (wc > 0xFFFF) {
      wc -= 0x10000;
      result += String.fromCharCode(0xD800 + (wc >> 10));
      wc = 0xDC00 + (wc & 0x3FF);
    }
    result += String.fromCharCode(wc);
  }

  return result;
};

/*
 * Encode string to an array of bytes using utf8 encoding.
 *
 * Javascript internally stores character data as utf16 (like java).
 * String.charCodeAt() does *not* produce unicode points, but simply
 * reflects this internal representation. Thus, it is necessary
 * to first decode the utf-16 representation before encoding to
 * utf-8.
 */
var encodeUtf8 = function(string) {
  var bytes = [];
  var i = 0;
  var j = 0;
  var wc;

  while (i < string.length) {
    wc = string.charCodeAt(i++);
    if (wc >= 0xD800 && wc <= 0xDBFF && i < string.length && string.charCodeAt(i) >= 0xDC00 && string.charCodeAt(i) <= 0xDFFF) {
      /* decode UTF-16 */
      wc = 0x10000 + ((wc & 0x3FF) << 10) + (string.charCodeAt(i++) & 0x3FF);
    }

    /* emit lead byte */
    if (wc < 0x80) {
      bytes[j++] = wc;
      count = 0;
    } else if (wc < 0x800) {
      bytes[j++] = 0xC0 | (wc >> 6);
      count = 1;
    } else if (wc < 0x10000) {
      bytes[j++] = 0xE0 | (wc >> 12);
      count = 2;
    } else {
      /* SMP: 21-bit Unicode */
      bytes[j++] = 0xF0 | (wc >> 18);
      count = 3;
    }

    /* emit trail bytes, if any */
    while (count) {
      bytes[j++] = 0x80 | ((wc >> (6 * --count)) & 0x3F);
    }
  }

  return bytes;

};

Lexer.prototype.bytesToString = function(bytes) {
  if(typeof bytes.write == 'function') {
    // Node.js
    return bytes.toString('utf-8');
  }
  return decodeUtf8(bytes);
};

Lexer.prototype.stringToBytes = function(string) {
  return encodeUtf8(string);
};

Lexer.prototype.unindent = function(startcol, text) {
  startcol = startcol || 0;
  return text.replace(new RegExp('^[\t ]{0,' + startcol + '}', 'gm'), ''); 
};

Lexer.prototype.store_keyword_content = function(event, data, p, eof) {
  var end_point = (!this.next_keyword_start || (p == eof)) ? p : this.next_keyword_start;
  var content = this.unindent(this.start_col + 2, this.bytesToString(data.slice(this.content_start, end_point))).replace(/\s+$/,"");
  var content_lines = content.split("\n")
  var name = content_lines.shift() || "";
  name = name.trim();
  var description = content_lines.join("\n");
  this.listener[event](this.keyword, name, description, this.current_line);
  var nks = this.next_keyword_start;
  this.next_keyword_start = null;
  return nks ? nks - 1 : p;
};

Lexer.prototype.current_line_content = function(data, p) {
  var rest = Array.prototype.slice.call(data,this.last_newline, -1);
  var end = rest.indexOf(10) || -1;
  return this.bytesToString(rest.slice(0, end)).trim();
};

// Node.js export
if(typeof module !== 'undefined') {
  module.exports = Lexer;
}
// Require.js export
if (typeof define !== 'undefined') {
  if(define.amd) {
    define('gherkin/lexer/lu', [], function() {
      return Lexer;
    });
  } else {
    define('gherkin/lexer/lu', function(require, exports, module) {
      exports.Lexer = Lexer;
    });
  }
}

})();

}).call(this,require("buffer").Buffer)

},{"buffer":69}],220:[function(require,module,exports){
(function (Buffer){

/* line 1 "ragel/i18n/lv.js.rl" */
;(function() {


/* line 126 "ragel/i18n/lv.js.rl" */



/* line 11 "js/lib/gherkin/lexer/lv.js" */
var _lexer_actions = [
	0, 1, 0, 1, 1, 1, 2, 1, 
	3, 1, 4, 1, 5, 1, 6, 1, 
	7, 1, 8, 1, 9, 1, 10, 1, 
	11, 1, 12, 1, 13, 1, 16, 1, 
	17, 1, 18, 1, 19, 1, 20, 1, 
	21, 1, 22, 1, 23, 2, 2, 18, 
	2, 3, 4, 2, 13, 0, 2, 14, 
	15, 2, 17, 0, 2, 17, 1, 2, 
	17, 16, 2, 17, 19, 2, 18, 6, 
	2, 18, 7, 2, 18, 8, 2, 18, 
	9, 2, 18, 10, 2, 18, 16, 2, 
	20, 21, 2, 22, 0, 2, 22, 1, 
	2, 22, 16, 2, 22, 19, 3, 4, 
	14, 15, 3, 5, 14, 15, 3, 11, 
	14, 15, 3, 12, 14, 15, 3, 13, 
	14, 15, 3, 14, 15, 18, 3, 17, 
	0, 11, 3, 17, 14, 15, 4, 2, 
	14, 15, 18, 4, 3, 4, 14, 15, 
	4, 17, 0, 14, 15, 5, 17, 0, 
	11, 14, 15
];

var _lexer_key_offsets = [
	0, 0, 19, 37, 38, 39, 41, 43, 
	48, 53, 58, 63, 67, 71, 73, 74, 
	75, 76, 77, 78, 79, 80, 81, 82, 
	83, 84, 85, 86, 87, 88, 89, 91, 
	93, 98, 105, 110, 111, 112, 114, 115, 
	116, 117, 118, 119, 120, 121, 132, 134, 
	136, 138, 140, 142, 144, 146, 148, 150, 
	152, 154, 156, 158, 160, 163, 165, 167, 
	169, 171, 173, 191, 192, 194, 195, 196, 
	197, 198, 199, 200, 201, 202, 203, 204, 
	205, 220, 222, 224, 226, 228, 230, 232, 
	234, 236, 238, 240, 242, 244, 246, 248, 
	250, 252, 254, 257, 259, 261, 263, 265, 
	267, 269, 271, 273, 275, 277, 279, 281, 
	283, 285, 287, 289, 291, 293, 295, 297, 
	299, 301, 303, 305, 307, 309, 311, 313, 
	315, 317, 319, 322, 324, 326, 328, 330, 
	332, 334, 336, 338, 340, 342, 344, 346, 
	348, 349, 350, 351, 352, 353, 354, 355, 
	356, 363, 366, 368, 370, 372, 374, 376, 
	378, 380, 382, 384, 386, 388, 390, 392, 
	394, 396, 398, 400, 402, 404, 405, 406, 
	407, 408, 409, 410, 412, 413, 414, 415, 
	416, 417, 418, 419, 420, 422, 423, 424, 
	425, 426, 427, 428, 429, 430, 431, 432, 
	433, 434, 435, 436, 437, 452, 454, 456, 
	458, 460, 462, 464, 466, 468, 470, 472, 
	474, 476, 478, 480, 482, 484, 486, 489, 
	491, 493, 495, 497, 499, 501, 503, 505, 
	507, 509, 511, 513, 515, 517, 519, 521, 
	523, 525, 527, 529, 531, 533, 535, 537, 
	539, 541, 543, 545, 547, 549, 551, 553, 
	554, 555, 570, 572, 574, 576, 578, 580, 
	582, 584, 586, 588, 590, 592, 594, 596, 
	598, 600, 602, 604, 607, 609, 611, 613, 
	615, 617, 619, 621, 623, 625, 627, 629, 
	631, 633, 635, 637, 639, 641, 643, 645, 
	647, 650, 652, 654, 656, 658, 660, 662, 
	664, 666, 669, 671, 673, 675, 677, 679, 
	681, 683, 685, 688, 690, 692, 694, 696, 
	698, 700, 702, 704, 706, 708, 710, 712, 
	714, 716, 718, 720, 722, 724, 726, 728, 
	729, 730, 731, 732, 733, 734, 735, 736, 
	737, 738, 742, 748, 751, 753, 759, 777, 
	779, 781, 783, 785, 787, 789, 791, 793, 
	795, 797, 799, 801, 803, 805, 807, 809, 
	811, 813, 815, 817, 819, 821, 824, 826, 
	828, 830, 832, 834, 836, 838, 840, 842, 
	844, 847, 849, 851, 853, 855, 857, 859, 
	861, 863, 866, 868, 870, 872, 874, 876, 
	878, 880, 882, 884, 886, 888, 890, 892, 
	894, 896, 898, 900, 902, 903, 904, 905, 
	906, 907, 908, 909, 910, 911, 912, 913, 
	914, 915, 916, 917, 918
];

var _lexer_trans_keys = [
	10, 32, 34, 35, 37, 42, 64, 66, 
	70, 74, 75, 80, 83, 84, 85, 124, 
	239, 9, 13, 10, 32, 34, 35, 37, 
	42, 64, 66, 70, 74, 75, 80, 83, 
	84, 85, 124, 9, 13, 34, 34, 10, 
	13, 10, 13, 10, 32, 34, 9, 13, 
	10, 32, 34, 9, 13, 10, 32, 34, 
	9, 13, 10, 32, 34, 9, 13, 10, 
	32, 9, 13, 10, 32, 9, 13, 10, 
	13, 10, 95, 70, 69, 65, 84, 85, 
	82, 69, 95, 69, 78, 68, 95, 37, 
	32, 10, 13, 10, 13, 13, 32, 64, 
	9, 10, 9, 10, 13, 32, 64, 11, 
	12, 10, 32, 64, 9, 13, 101, 116, 
	-60, 117, -85, -60, -115, 97, 58, 10, 
	10, 10, 32, 35, 37, 64, 70, 75, 
	80, 83, 9, 13, 10, 95, 10, 70, 
	10, 69, 10, 65, 10, 84, 10, 85, 
	10, 82, 10, 69, 10, 95, 10, 69, 
	10, 78, 10, 68, 10, 95, 10, 37, 
	-60, 10, 117, -85, 10, -60, 10, -115, 
	10, 10, 97, 10, 58, 10, 32, 34, 
	35, 37, 42, 64, 66, 70, 74, 75, 
	80, 83, 84, 85, 124, 9, 13, 97, 
	97, 111, 100, 110, 116, 101, 107, 115, 
	116, 115, 58, 10, 10, 10, 32, 35, 
	37, 42, 64, 66, 70, 74, 75, 83, 
	84, 85, 9, 13, 10, 95, 10, 70, 
	10, 69, 10, 65, 10, 84, 10, 85, 
	10, 82, 10, 69, 10, 95, 10, 69, 
	10, 78, 10, 68, 10, 95, 10, 37, 
	10, 32, 10, 101, 10, 116, -60, 10, 
	117, -85, 10, -60, 10, -115, 10, 10, 
	97, 10, 58, 10, 110, 10, 107, 10, 
	99, 10, 105, 10, 111, 10, 110, 10, 
	97, 10, 108, 10, 105, 10, 116, -60, 
	10, -127, 10, 10, 116, 10, 101, 10, 
	97, 10, 97, 10, 100, 10, 99, 10, 
	101, 10, 110, -60, 10, -127, 10, 10, 
	114, 10, 105, 10, 106, 10, 115, 10, 
	32, 58, 10, 112, -60, 10, -109, 10, 
	10, 99, 10, 32, 10, 112, 10, 97, 
	10, 114, 10, 97, 10, 117, 10, 103, 
	10, 110, 97, 105, 114, 97, 117, 103, 
	115, 58, 10, 10, 10, 32, 35, 70, 
	124, 9, 13, -60, 10, 117, -85, 10, 
	-60, 10, -115, 10, 10, 97, 10, 58, 
	10, 110, 10, 107, 10, 99, 10, 105, 
	10, 111, 10, 110, 10, 97, 10, 108, 
	10, 105, 10, 116, -60, 10, -127, 10, 
	10, 116, 10, 101, 101, 109, -60, -109, 
	114, 105, 99, 105, 101, 110, -60, -127, 
	114, 105, 106, 115, 32, 58, 112, -60, 
	-109, 99, 32, 112, 97, 114, 97, 117, 
	103, 97, 58, 10, 10, 10, 32, 35, 
	37, 42, 64, 66, 70, 74, 75, 83, 
	84, 85, 9, 13, 10, 95, 10, 70, 
	10, 69, 10, 65, 10, 84, 10, 85, 
	10, 82, 10, 69, 10, 95, 10, 69, 
	10, 78, 10, 68, 10, 95, 10, 37, 
	10, 32, 10, 101, 10, 116, -60, 10, 
	117, -85, 10, -60, 10, -115, 10, 10, 
	97, 10, 58, 10, 110, 10, 107, 10, 
	99, 10, 105, 10, 111, 10, 110, 10, 
	97, 10, 108, 10, 105, 10, 116, -60, 
	10, -127, 10, 10, 116, 10, 101, 10, 
	97, 10, 97, 10, 100, 10, 99, 10, 
	101, 10, 110, -60, 10, -127, 10, 10, 
	114, 10, 105, 10, 106, 10, 115, 10, 
	110, 10, 10, 10, 32, 35, 37, 42, 
	64, 66, 70, 74, 75, 83, 84, 85, 
	9, 13, 10, 95, 10, 70, 10, 69, 
	10, 65, 10, 84, 10, 85, 10, 82, 
	10, 69, 10, 95, 10, 69, 10, 78, 
	10, 68, 10, 95, 10, 37, 10, 32, 
	10, 101, 10, 116, -60, 10, 117, -85, 
	10, -60, 10, -115, 10, 10, 97, 10, 
	58, 10, 110, 10, 107, 10, 99, 10, 
	105, 10, 111, 10, 110, 10, 97, 10, 
	108, 10, 105, 10, 116, -60, 10, -127, 
	10, 10, 116, 10, 101, 10, 97, 10, 
	97, 111, 10, 100, 10, 110, 10, 116, 
	10, 101, 10, 107, 10, 115, 10, 116, 
	10, 115, 10, 99, 105, 10, 101, 10, 
	110, -60, 10, -127, 10, 10, 114, 10, 
	105, 10, 106, 10, 115, 10, 32, 58, 
	10, 112, -60, 10, -109, 10, 10, 99, 
	10, 32, 10, 112, 10, 97, 10, 114, 
	10, 97, 10, 117, 10, 103, 10, 116, 
	10, 117, -60, 10, -127, 10, 10, 99, 
	10, 105, 10, 106, 10, 97, 10, 110, 
	116, 117, -60, -127, 99, 105, 106, 97, 
	97, 110, 32, 124, 9, 13, 10, 32, 
	92, 124, 9, 13, 10, 92, 124, 10, 
	92, 10, 32, 92, 124, 9, 13, 10, 
	32, 34, 35, 37, 42, 64, 66, 70, 
	74, 75, 80, 83, 84, 85, 124, 9, 
	13, 10, 110, 10, 107, 10, 99, 10, 
	105, 10, 111, 10, 110, 10, 97, 10, 
	108, 10, 105, 10, 116, -60, 10, -127, 
	10, 10, 116, 10, 101, 10, 111, 10, 
	110, 10, 116, 10, 101, 10, 107, 10, 
	115, 10, 116, 10, 115, 10, 97, 105, 
	10, 114, 10, 97, 10, 117, 10, 103, 
	10, 101, 10, 109, -60, 10, -109, 10, 
	10, 114, 10, 105, 10, 99, 105, 10, 
	101, 10, 110, -60, 10, -127, 10, 10, 
	114, 10, 105, 10, 106, 10, 115, 10, 
	32, 58, 10, 112, -60, 10, -109, 10, 
	10, 99, 10, 32, 10, 112, 10, 97, 
	10, 114, 10, 97, 10, 117, 10, 103, 
	10, 116, 10, 117, -60, 10, -127, 10, 
	10, 99, 10, 105, 10, 106, 110, 107, 
	99, 105, 111, 110, 97, 108, 105, 116, 
	-60, -127, 116, 101, 187, 191, 0
];

var _lexer_single_lengths = [
	0, 17, 16, 1, 1, 2, 2, 3, 
	3, 3, 3, 2, 2, 2, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 2, 2, 
	3, 5, 3, 1, 1, 2, 1, 1, 
	1, 1, 1, 1, 1, 9, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 3, 2, 2, 2, 
	2, 2, 16, 1, 2, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	13, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 3, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 3, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	5, 3, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 1, 1, 1, 
	1, 1, 1, 2, 1, 1, 1, 1, 
	1, 1, 1, 1, 2, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 13, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 3, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 1, 
	1, 13, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 3, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	3, 2, 2, 2, 2, 2, 2, 2, 
	2, 3, 2, 2, 2, 2, 2, 2, 
	2, 2, 3, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 2, 4, 3, 2, 4, 16, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 3, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	3, 2, 2, 2, 2, 2, 2, 2, 
	2, 3, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 0
];

var _lexer_range_lengths = [
	0, 1, 1, 0, 0, 0, 0, 1, 
	1, 1, 1, 1, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 1, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 1, 0, 0, 1, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0
];

var _lexer_index_offsets = [
	0, 0, 19, 37, 39, 41, 44, 47, 
	52, 57, 62, 67, 71, 75, 78, 80, 
	82, 84, 86, 88, 90, 92, 94, 96, 
	98, 100, 102, 104, 106, 108, 110, 113, 
	116, 121, 128, 133, 135, 137, 140, 142, 
	144, 146, 148, 150, 152, 154, 165, 168, 
	171, 174, 177, 180, 183, 186, 189, 192, 
	195, 198, 201, 204, 207, 211, 214, 217, 
	220, 223, 226, 244, 246, 249, 251, 253, 
	255, 257, 259, 261, 263, 265, 267, 269, 
	271, 286, 289, 292, 295, 298, 301, 304, 
	307, 310, 313, 316, 319, 322, 325, 328, 
	331, 334, 337, 341, 344, 347, 350, 353, 
	356, 359, 362, 365, 368, 371, 374, 377, 
	380, 383, 386, 389, 392, 395, 398, 401, 
	404, 407, 410, 413, 416, 419, 422, 425, 
	428, 431, 434, 438, 441, 444, 447, 450, 
	453, 456, 459, 462, 465, 468, 471, 474, 
	477, 479, 481, 483, 485, 487, 489, 491, 
	493, 500, 504, 507, 510, 513, 516, 519, 
	522, 525, 528, 531, 534, 537, 540, 543, 
	546, 549, 552, 555, 558, 561, 563, 565, 
	567, 569, 571, 573, 576, 578, 580, 582, 
	584, 586, 588, 590, 592, 595, 597, 599, 
	601, 603, 605, 607, 609, 611, 613, 615, 
	617, 619, 621, 623, 625, 640, 643, 646, 
	649, 652, 655, 658, 661, 664, 667, 670, 
	673, 676, 679, 682, 685, 688, 691, 695, 
	698, 701, 704, 707, 710, 713, 716, 719, 
	722, 725, 728, 731, 734, 737, 740, 743, 
	746, 749, 752, 755, 758, 761, 764, 767, 
	770, 773, 776, 779, 782, 785, 788, 791, 
	793, 795, 810, 813, 816, 819, 822, 825, 
	828, 831, 834, 837, 840, 843, 846, 849, 
	852, 855, 858, 861, 865, 868, 871, 874, 
	877, 880, 883, 886, 889, 892, 895, 898, 
	901, 904, 907, 910, 913, 916, 919, 922, 
	925, 929, 932, 935, 938, 941, 944, 947, 
	950, 953, 957, 960, 963, 966, 969, 972, 
	975, 978, 981, 985, 988, 991, 994, 997, 
	1000, 1003, 1006, 1009, 1012, 1015, 1018, 1021, 
	1024, 1027, 1030, 1033, 1036, 1039, 1042, 1045, 
	1047, 1049, 1051, 1053, 1055, 1057, 1059, 1061, 
	1063, 1065, 1069, 1075, 1079, 1082, 1088, 1106, 
	1109, 1112, 1115, 1118, 1121, 1124, 1127, 1130, 
	1133, 1136, 1139, 1142, 1145, 1148, 1151, 1154, 
	1157, 1160, 1163, 1166, 1169, 1172, 1176, 1179, 
	1182, 1185, 1188, 1191, 1194, 1197, 1200, 1203, 
	1206, 1210, 1213, 1216, 1219, 1222, 1225, 1228, 
	1231, 1234, 1238, 1241, 1244, 1247, 1250, 1253, 
	1256, 1259, 1262, 1265, 1268, 1271, 1274, 1277, 
	1280, 1283, 1286, 1289, 1292, 1294, 1296, 1298, 
	1300, 1302, 1304, 1306, 1308, 1310, 1312, 1314, 
	1316, 1318, 1320, 1322, 1324
];

var _lexer_indicies = [
	2, 1, 3, 4, 5, 6, 7, 8, 
	9, 10, 11, 12, 13, 14, 15, 16, 
	17, 1, 0, 2, 1, 3, 4, 5, 
	6, 7, 8, 9, 10, 11, 12, 13, 
	14, 15, 16, 1, 0, 18, 0, 19, 
	0, 21, 22, 20, 24, 25, 23, 28, 
	27, 29, 27, 26, 32, 31, 33, 31, 
	30, 32, 31, 34, 31, 30, 32, 31, 
	35, 31, 30, 37, 36, 36, 0, 2, 
	38, 38, 0, 40, 41, 39, 2, 0, 
	42, 0, 43, 0, 44, 0, 45, 0, 
	46, 0, 47, 0, 48, 0, 49, 0, 
	50, 0, 51, 0, 52, 0, 53, 0, 
	54, 0, 55, 0, 56, 0, 58, 59, 
	57, 61, 62, 60, 0, 0, 0, 0, 
	63, 64, 65, 64, 64, 67, 66, 63, 
	2, 68, 7, 68, 0, 69, 0, 70, 
	0, 71, 72, 0, 73, 0, 74, 0, 
	75, 0, 76, 0, 77, 0, 79, 78, 
	81, 80, 81, 82, 83, 84, 83, 85, 
	86, 87, 88, 82, 80, 81, 89, 80, 
	81, 90, 80, 81, 91, 80, 81, 92, 
	80, 81, 93, 80, 81, 94, 80, 81, 
	95, 80, 81, 96, 80, 81, 97, 80, 
	81, 98, 80, 81, 99, 80, 81, 100, 
	80, 81, 101, 80, 81, 102, 80, 103, 
	81, 104, 80, 105, 81, 80, 106, 81, 
	80, 107, 81, 80, 81, 108, 80, 81, 
	109, 80, 111, 110, 112, 113, 114, 115, 
	116, 117, 118, 119, 120, 121, 122, 123, 
	124, 125, 110, 0, 70, 0, 126, 127, 
	0, 70, 0, 128, 0, 129, 0, 130, 
	0, 131, 0, 132, 0, 133, 0, 134, 
	0, 135, 0, 137, 136, 139, 138, 139, 
	140, 141, 142, 143, 141, 144, 145, 146, 
	147, 148, 147, 149, 140, 138, 139, 150, 
	138, 139, 151, 138, 139, 152, 138, 139, 
	153, 138, 139, 154, 138, 139, 155, 138, 
	139, 156, 138, 139, 157, 138, 139, 158, 
	138, 139, 159, 138, 139, 160, 138, 139, 
	161, 138, 139, 162, 138, 139, 163, 138, 
	139, 164, 138, 139, 165, 138, 139, 166, 
	138, 167, 139, 168, 138, 169, 139, 138, 
	170, 139, 138, 171, 139, 138, 139, 172, 
	138, 139, 164, 138, 139, 173, 138, 139, 
	174, 138, 139, 175, 138, 139, 176, 138, 
	139, 177, 138, 139, 178, 138, 139, 179, 
	138, 139, 180, 138, 139, 181, 138, 139, 
	182, 138, 183, 139, 138, 184, 139, 138, 
	139, 185, 138, 139, 172, 138, 139, 166, 
	138, 139, 186, 138, 139, 166, 138, 139, 
	187, 138, 139, 188, 138, 139, 189, 138, 
	190, 139, 138, 191, 139, 138, 139, 192, 
	138, 139, 193, 138, 139, 194, 138, 139, 
	195, 138, 139, 196, 164, 138, 139, 197, 
	138, 198, 139, 138, 199, 139, 138, 139, 
	200, 138, 139, 201, 138, 139, 202, 138, 
	139, 203, 138, 139, 204, 138, 139, 205, 
	138, 139, 206, 138, 139, 171, 138, 139, 
	166, 138, 207, 208, 0, 209, 0, 210, 
	0, 211, 0, 212, 0, 213, 0, 214, 
	0, 216, 215, 218, 217, 218, 219, 220, 
	221, 220, 219, 217, 222, 218, 223, 217, 
	224, 218, 217, 225, 218, 217, 226, 218, 
	217, 218, 227, 217, 218, 228, 217, 218, 
	229, 217, 218, 230, 217, 218, 231, 217, 
	218, 232, 217, 218, 233, 217, 218, 234, 
	217, 218, 235, 217, 218, 236, 217, 218, 
	237, 217, 218, 238, 217, 239, 218, 217, 
	240, 218, 217, 218, 241, 217, 218, 227, 
	217, 242, 0, 243, 0, 244, 0, 245, 
	0, 246, 0, 213, 0, 247, 248, 0, 
	249, 0, 250, 0, 251, 0, 252, 0, 
	253, 0, 254, 0, 255, 0, 256, 0, 
	257, 258, 0, 259, 0, 260, 0, 261, 
	0, 262, 0, 263, 0, 264, 0, 265, 
	0, 266, 0, 267, 0, 268, 0, 269, 
	0, 270, 0, 271, 0, 273, 272, 275, 
	274, 275, 276, 277, 278, 279, 277, 280, 
	281, 282, 283, 284, 283, 285, 276, 274, 
	275, 286, 274, 275, 287, 274, 275, 288, 
	274, 275, 289, 274, 275, 290, 274, 275, 
	291, 274, 275, 292, 274, 275, 293, 274, 
	275, 294, 274, 275, 295, 274, 275, 296, 
	274, 275, 297, 274, 275, 298, 274, 275, 
	299, 274, 275, 300, 274, 275, 301, 274, 
	275, 302, 274, 303, 275, 304, 274, 305, 
	275, 274, 306, 275, 274, 307, 275, 274, 
	275, 308, 274, 275, 300, 274, 275, 309, 
	274, 275, 310, 274, 275, 311, 274, 275, 
	312, 274, 275, 313, 274, 275, 314, 274, 
	275, 315, 274, 275, 316, 274, 275, 317, 
	274, 275, 318, 274, 319, 275, 274, 320, 
	275, 274, 275, 321, 274, 275, 308, 274, 
	275, 302, 274, 275, 322, 274, 275, 302, 
	274, 275, 323, 274, 275, 324, 274, 275, 
	325, 274, 326, 275, 274, 327, 275, 274, 
	275, 328, 274, 275, 329, 274, 275, 330, 
	274, 275, 308, 274, 275, 302, 274, 332, 
	331, 334, 333, 334, 335, 336, 337, 338, 
	336, 339, 340, 341, 342, 343, 344, 345, 
	335, 333, 334, 346, 333, 334, 347, 333, 
	334, 348, 333, 334, 349, 333, 334, 350, 
	333, 334, 351, 333, 334, 352, 333, 334, 
	353, 333, 334, 354, 333, 334, 355, 333, 
	334, 356, 333, 334, 357, 333, 334, 358, 
	333, 334, 359, 333, 334, 360, 333, 334, 
	361, 333, 334, 362, 333, 363, 334, 364, 
	333, 365, 334, 333, 366, 334, 333, 367, 
	334, 333, 334, 368, 333, 334, 360, 333, 
	334, 369, 333, 334, 370, 333, 334, 371, 
	333, 334, 372, 333, 334, 373, 333, 334, 
	374, 333, 334, 375, 333, 334, 376, 333, 
	334, 377, 333, 334, 378, 333, 379, 334, 
	333, 380, 334, 333, 334, 381, 333, 334, 
	368, 333, 334, 362, 333, 334, 382, 383, 
	333, 334, 362, 333, 334, 384, 333, 334, 
	385, 333, 334, 386, 333, 334, 387, 333, 
	334, 388, 333, 334, 389, 333, 334, 368, 
	333, 334, 390, 391, 333, 334, 392, 333, 
	334, 393, 333, 394, 334, 333, 395, 334, 
	333, 334, 396, 333, 334, 397, 333, 334, 
	398, 333, 334, 399, 333, 334, 400, 360, 
	333, 334, 401, 333, 402, 334, 333, 403, 
	334, 333, 334, 404, 333, 334, 405, 333, 
	334, 406, 333, 334, 407, 333, 334, 408, 
	333, 334, 409, 333, 334, 410, 333, 334, 
	367, 333, 334, 411, 333, 334, 412, 333, 
	413, 334, 333, 414, 334, 333, 334, 415, 
	333, 334, 416, 333, 334, 367, 333, 334, 
	382, 333, 334, 362, 333, 417, 0, 418, 
	0, 419, 0, 420, 0, 421, 0, 422, 
	0, 423, 0, 134, 0, 126, 0, 70, 
	0, 424, 425, 424, 0, 428, 427, 429, 
	430, 427, 426, 0, 432, 433, 431, 0, 
	432, 431, 428, 434, 432, 433, 434, 431, 
	428, 435, 436, 437, 438, 439, 440, 441, 
	442, 443, 444, 445, 446, 447, 448, 449, 
	435, 0, 81, 450, 80, 81, 451, 80, 
	81, 452, 80, 81, 453, 80, 81, 454, 
	80, 81, 455, 80, 81, 456, 80, 81, 
	457, 80, 81, 458, 80, 81, 459, 80, 
	460, 81, 80, 461, 81, 80, 81, 462, 
	80, 81, 108, 80, 81, 463, 80, 81, 
	464, 80, 81, 465, 80, 81, 466, 80, 
	81, 467, 80, 81, 468, 80, 81, 469, 
	80, 81, 108, 80, 81, 470, 471, 80, 
	81, 472, 80, 81, 473, 80, 81, 474, 
	80, 81, 469, 80, 81, 475, 80, 81, 
	476, 80, 477, 81, 80, 478, 81, 80, 
	81, 479, 80, 81, 108, 80, 81, 480, 
	481, 80, 81, 482, 80, 81, 483, 80, 
	484, 81, 80, 485, 81, 80, 81, 486, 
	80, 81, 487, 80, 81, 488, 80, 81, 
	489, 80, 81, 490, 109, 80, 81, 491, 
	80, 492, 81, 80, 493, 81, 80, 81, 
	494, 80, 81, 495, 80, 81, 496, 80, 
	81, 497, 80, 81, 498, 80, 81, 499, 
	80, 81, 500, 80, 81, 107, 80, 81, 
	501, 80, 81, 502, 80, 503, 81, 80, 
	504, 81, 80, 81, 505, 80, 81, 506, 
	80, 81, 107, 80, 507, 0, 508, 0, 
	509, 0, 510, 0, 511, 0, 512, 0, 
	513, 0, 514, 0, 515, 0, 516, 0, 
	517, 0, 518, 0, 519, 0, 76, 0, 
	520, 0, 1, 0, 521, 0
];

var _lexer_trans_targs = [
	0, 2, 2, 3, 13, 15, 29, 32, 
	35, 37, 67, 68, 143, 179, 343, 344, 
	345, 426, 4, 5, 6, 7, 6, 6, 
	7, 6, 8, 8, 8, 9, 8, 8, 
	8, 9, 10, 11, 12, 2, 12, 13, 
	2, 14, 16, 17, 18, 19, 20, 21, 
	22, 23, 24, 25, 26, 27, 28, 428, 
	30, 31, 2, 14, 31, 2, 14, 33, 
	34, 2, 33, 32, 34, 36, 29, 38, 
	412, 39, 40, 41, 42, 43, 44, 45, 
	44, 45, 45, 2, 46, 60, 365, 373, 
	384, 47, 48, 49, 50, 51, 52, 53, 
	54, 55, 56, 57, 58, 59, 2, 61, 
	351, 62, 63, 64, 65, 66, 2, 2, 
	3, 13, 15, 29, 32, 35, 37, 67, 
	68, 143, 179, 343, 344, 345, 69, 70, 
	71, 72, 73, 74, 75, 76, 77, 78, 
	79, 80, 79, 80, 80, 2, 81, 95, 
	96, 98, 118, 119, 121, 142, 82, 83, 
	84, 85, 86, 87, 88, 89, 90, 91, 
	92, 93, 94, 2, 66, 97, 95, 99, 
	104, 100, 101, 102, 103, 105, 106, 107, 
	108, 109, 110, 111, 112, 113, 114, 115, 
	116, 117, 120, 122, 123, 124, 125, 126, 
	127, 128, 129, 130, 131, 132, 133, 134, 
	135, 136, 137, 138, 139, 140, 141, 144, 
	173, 145, 146, 147, 148, 149, 150, 151, 
	152, 151, 152, 152, 2, 153, 154, 159, 
	155, 156, 157, 158, 66, 160, 161, 162, 
	163, 164, 165, 166, 167, 168, 169, 170, 
	171, 172, 174, 175, 176, 177, 178, 180, 
	335, 181, 182, 183, 184, 185, 186, 187, 
	188, 189, 255, 190, 191, 192, 193, 194, 
	195, 196, 197, 198, 199, 200, 201, 202, 
	203, 204, 203, 204, 204, 2, 205, 219, 
	220, 222, 242, 243, 245, 254, 206, 207, 
	208, 209, 210, 211, 212, 213, 214, 215, 
	216, 217, 218, 2, 66, 221, 219, 223, 
	228, 224, 225, 226, 227, 229, 230, 231, 
	232, 233, 234, 235, 236, 237, 238, 239, 
	240, 241, 244, 246, 247, 248, 249, 250, 
	251, 252, 253, 256, 257, 256, 257, 257, 
	2, 258, 272, 273, 275, 295, 296, 305, 
	333, 334, 259, 260, 261, 262, 263, 264, 
	265, 266, 267, 268, 269, 270, 271, 2, 
	66, 274, 272, 276, 281, 277, 278, 279, 
	280, 282, 283, 284, 285, 286, 287, 288, 
	289, 290, 291, 292, 293, 294, 297, 298, 
	299, 300, 301, 302, 303, 304, 306, 326, 
	307, 308, 309, 310, 311, 312, 313, 314, 
	315, 316, 317, 318, 319, 320, 321, 322, 
	323, 324, 325, 327, 328, 329, 330, 331, 
	332, 336, 337, 338, 339, 340, 341, 342, 
	345, 346, 347, 349, 350, 348, 346, 347, 
	348, 346, 349, 350, 3, 13, 15, 29, 
	32, 35, 37, 67, 68, 143, 179, 343, 
	344, 345, 352, 353, 354, 355, 356, 357, 
	358, 359, 360, 361, 362, 363, 364, 366, 
	367, 368, 369, 370, 371, 372, 374, 378, 
	375, 376, 377, 379, 380, 381, 382, 383, 
	385, 405, 386, 387, 388, 389, 390, 391, 
	392, 393, 394, 395, 396, 397, 398, 399, 
	400, 401, 402, 403, 404, 406, 407, 408, 
	409, 410, 411, 413, 414, 415, 416, 417, 
	418, 419, 420, 421, 422, 423, 424, 425, 
	427, 0
];

var _lexer_trans_actions = [
	43, 0, 54, 3, 1, 0, 29, 1, 
	29, 29, 29, 29, 29, 29, 29, 29, 
	35, 0, 0, 0, 7, 139, 48, 0, 
	102, 9, 5, 45, 134, 45, 0, 33, 
	122, 33, 33, 0, 11, 106, 0, 0, 
	114, 25, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 57, 149, 126, 0, 110, 23, 0, 
	27, 118, 27, 51, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 57, 144, 
	0, 54, 0, 69, 33, 84, 84, 84, 
	84, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 13, 0, 
	0, 0, 0, 0, 0, 13, 31, 130, 
	60, 57, 31, 63, 57, 63, 63, 63, 
	63, 63, 63, 63, 63, 66, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	57, 144, 0, 54, 0, 72, 33, 84, 
	84, 84, 84, 84, 84, 84, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 15, 15, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 57, 
	144, 0, 54, 0, 81, 84, 0, 0, 
	0, 0, 0, 0, 21, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	57, 144, 0, 54, 0, 78, 33, 84, 
	84, 84, 84, 84, 84, 84, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 19, 19, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 57, 144, 0, 54, 0, 
	75, 33, 84, 84, 84, 84, 84, 84, 
	84, 84, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 17, 
	17, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 37, 37, 54, 37, 87, 0, 
	0, 39, 0, 0, 93, 90, 41, 96, 
	90, 96, 96, 96, 96, 96, 96, 96, 
	96, 99, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0
];

var _lexer_eof_actions = [
	0, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43
];

var lexer_start = 1;
var lexer_first_final = 428;
var lexer_error = 0;

var lexer_en_main = 1;


/* line 129 "ragel/i18n/lv.js.rl" */

/* line 130 "ragel/i18n/lv.js.rl" */

/* line 131 "ragel/i18n/lv.js.rl" */

/* line 132 "ragel/i18n/lv.js.rl" */

var Lexer = function(listener) {
  // Check that listener has the required functions
  var events = ['comment', 'tag', 'feature', 'background', 'scenario', 'scenario_outline', 'examples', 'step', 'doc_string', 'row', 'eof'];
  for(var i=0, len=events.length; i<len; i++) {
    var event = events[i];
    if(typeof listener[event] != 'function') {
      throw new Error("Error. No " + event + " function exists on " + JSON.stringify(listener));
    }
  }
  this.listener = listener;
};

Lexer.prototype.scan = function(data) {
  var ending = "\n%_FEATURE_END_%";
  if(typeof data == 'string') {
    data = this.stringToBytes(data + ending);
  } else if(typeof Buffer != 'undefined' && Buffer.isBuffer(data)) {
    // Node.js
    var buf = new Buffer(data.length + ending.length);
    data.copy(buf, 0, 0);
    new Buffer(ending).copy(buf, data.length, 0);
    data = buf;
  }
  var eof = pe = data.length;
  var p = 0;

  this.line_number = 1;
  this.last_newline = 0;
  var signedCharValue=function(v){return v > 127 ? v-256 : v; };

  
/* line 791 "js/lib/gherkin/lexer/lv.js" */
{
	  this.cs = lexer_start;
} /* JSCodeGen::writeInit */

/* line 164 "ragel/i18n/lv.js.rl" */
  
/* line 798 "js/lib/gherkin/lexer/lv.js" */
{
	var _klen, _trans, _keys, _ps, _widec, _acts, _nacts;
	var _goto_level, _resume, _eof_trans, _again, _test_eof;
	var _out;
	_klen = _trans = _keys = _acts = _nacts = null;
	_goto_level = 0;
	_resume = 10;
	_eof_trans = 15;
	_again = 20;
	_test_eof = 30;
	_out = 40;
	while (true) {
	_trigger_goto = false;
	if (_goto_level <= 0) {
	if (p == pe) {
		_goto_level = _test_eof;
		continue;
	}
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	}
	if (_goto_level <= _resume) {
	_keys = _lexer_key_offsets[ this.cs];
	_trans = _lexer_index_offsets[ this.cs];
	_klen = _lexer_single_lengths[ this.cs];
	_break_match = false;
	
	do {
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + _klen - 1;

	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + ( (_upper - _lower) >> 1 );

	        if (( signedCharValue(data[p])) < _lexer_trans_keys[_mid]) {
	           _upper = _mid - 1;
	        } else if (( signedCharValue(data[p])) > _lexer_trans_keys[_mid]) {
	           _lower = _mid + 1;
	        } else {
	           _trans += (_mid - _keys);
	           _break_match = true;
	           break;
	        };
	     } /* while */
	     if (_break_match) { break; }
	     _keys += _klen;
	     _trans += _klen;
	  }
	  _klen = _lexer_range_lengths[ this.cs];
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + (_klen << 1) - 2;
	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + (((_upper-_lower) >> 1) & ~1);
	        if (( signedCharValue(data[p])) < _lexer_trans_keys[_mid]) {
	          _upper = _mid - 2;
	         } else if (( signedCharValue(data[p])) > _lexer_trans_keys[_mid+1]) {
	          _lower = _mid + 2;
	        } else {
	          _trans += ((_mid - _keys) >> 1);
	          _break_match = true;
	          break;
	        }
	     } /* while */
	     if (_break_match) { break; }
	     _trans += _klen
	  }
	} while (false);
	_trans = _lexer_indicies[_trans];
	 this.cs = _lexer_trans_targs[_trans];
	if (_lexer_trans_actions[_trans] != 0) {
		_acts = _lexer_trans_actions[_trans];
		_nacts = _lexer_actions[_acts];
		_acts += 1;
		while (_nacts > 0) {
			_nacts -= 1;
			_acts += 1;
			switch (_lexer_actions[_acts - 1]) {
case 0:
/* line 6 "ragel/i18n/lv.js.rl" */

    this.content_start = p;
    this.current_line = this.line_number;
    this.start_col = p - this.last_newline - (this.keyword+':').length;
  		break;
case 1:
/* line 12 "ragel/i18n/lv.js.rl" */

    this.current_line = this.line_number;
    this.start_col = p - this.last_newline;
  		break;
case 2:
/* line 17 "ragel/i18n/lv.js.rl" */

    this.content_start = p;
  		break;
case 3:
/* line 21 "ragel/i18n/lv.js.rl" */

    this.docstring_content_type_start = p;
  		break;
case 4:
/* line 25 "ragel/i18n/lv.js.rl" */

    this.docstring_content_type_end = p;
  		break;
case 5:
/* line 29 "ragel/i18n/lv.js.rl" */

    var con = this.unindent(
      this.start_col, 
      this.bytesToString(data.slice(this.content_start, this.next_keyword_start-1)).replace(/(\r?\n)?([\t ])*$/, '').replace(/\\\"\\\"\\\"/mg, '"""')
    );
    var con_type = this.bytesToString(data.slice(this.docstring_content_type_start, this.docstring_content_type_end)).trim();
    this.listener.doc_string(con_type, con, this.current_line); 
  		break;
case 6:
/* line 38 "ragel/i18n/lv.js.rl" */

    p = this.store_keyword_content('feature', data, p, eof);
  		break;
case 7:
/* line 42 "ragel/i18n/lv.js.rl" */

    p = this.store_keyword_content('background', data, p, eof);
  		break;
case 8:
/* line 46 "ragel/i18n/lv.js.rl" */

    p = this.store_keyword_content('scenario', data, p, eof);
  		break;
case 9:
/* line 50 "ragel/i18n/lv.js.rl" */

    p = this.store_keyword_content('scenario_outline', data, p, eof);
  		break;
case 10:
/* line 54 "ragel/i18n/lv.js.rl" */

    p = this.store_keyword_content('examples', data, p, eof);
  		break;
case 11:
/* line 58 "ragel/i18n/lv.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.step(this.keyword, con, this.current_line);
  		break;
case 12:
/* line 63 "ragel/i18n/lv.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.comment(con, this.line_number);
    this.keyword_start = null;
  		break;
case 13:
/* line 69 "ragel/i18n/lv.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.tag(con, this.line_number);
    this.keyword_start = null;
  		break;
case 14:
/* line 75 "ragel/i18n/lv.js.rl" */

    this.line_number++;
  		break;
case 15:
/* line 79 "ragel/i18n/lv.js.rl" */

    this.last_newline = p + 1;
  		break;
case 16:
/* line 83 "ragel/i18n/lv.js.rl" */

    this.keyword_start = this.keyword_start || p;
  		break;
case 17:
/* line 87 "ragel/i18n/lv.js.rl" */

    this.keyword = this.bytesToString(data.slice(this.keyword_start, p)).replace(/:$/, '');
    this.keyword_start = null;
  		break;
case 18:
/* line 92 "ragel/i18n/lv.js.rl" */

    this.next_keyword_start = p;
  		break;
case 19:
/* line 96 "ragel/i18n/lv.js.rl" */

    p = p - 1;
    current_row = [];
    this.current_line = this.line_number;
  		break;
case 20:
/* line 102 "ragel/i18n/lv.js.rl" */

    this.content_start = p;
  		break;
case 21:
/* line 106 "ragel/i18n/lv.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    current_row.push(con.replace(/\\\|/, "|").replace(/\\n/, "\n").replace(/\\\\/, "\\"));
  		break;
case 22:
/* line 111 "ragel/i18n/lv.js.rl" */

    this.listener.row(current_row, this.current_line);
  		break;
case 23:
/* line 115 "ragel/i18n/lv.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw new Error("Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.");
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 1025 "js/lib/gherkin/lexer/lv.js" */
			} /* action switch */
		}
	}
	if (_trigger_goto) {
		continue;
	}
	}
	if (_goto_level <= _again) {
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	p += 1;
	if (p != pe) {
		_goto_level = _resume;
		continue;
	}
	}
	if (_goto_level <= _test_eof) {
	if (p == eof) {
	__acts = _lexer_eof_actions[ this.cs];
	__nacts =  _lexer_actions[__acts];
	__acts += 1;
	while (__nacts > 0) {
		__nacts -= 1;
		__acts += 1;
		switch (_lexer_actions[__acts - 1]) {
case 23:
/* line 115 "ragel/i18n/lv.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw new Error("Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.");
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 1064 "js/lib/gherkin/lexer/lv.js" */
		} /* eof action switch */
	}
	if (_trigger_goto) {
		continue;
	}
}
	}
	if (_goto_level <= _out) {
		break;
	}
	}
	}

/* line 165 "ragel/i18n/lv.js.rl" */
};


/*
 * Decode utf-8 byte sequence to string.
 */
var decodeUtf8 = function(bytes) {
  var result = "";
  var i = 0;
  var wc;
  var c;

  while (i < bytes.length) {
    /* parse as UTF-8 lead byte */
    wc = bytes[i++];
    if (wc < 0x80) {
      count = 0;
    } else if (wc < 0xC2 || wc >= 0xF8) {
      throw new Error("input is not a valid UTF-8 lead octet");
    } else if (wc < 0xE0) {
      count = 1;
      wc = (wc & 0x1F) << 6;
    } else if (wc < 0xF0) {
      count = 2;
      wc = (wc & 0x0F) << 12;
    } else /* wc < 0xF8 */ {
      count = 3;
      wc = (wc & 0x07) << 18;
    }

    /* parse trail bytes, if any */
    while (count) {
      if (!(i < bytes.length)) {
        throw new Error("short read");
      }
      if ((c = bytes[i++] ^ 0x80) > 0x3F) {
        throw new Error("input is not a valid UTF-8 trail octet");
      }
      wc |= c << (6 * --count);
      if (wc < (1 << (5 * count + 6))) {
        throw new Error("invalid non-minimal encoded input");
      }
    }

    /* handle conversion to UTF-16 if needed */
    if (wc > 0xFFFF) {
      wc -= 0x10000;
      result += String.fromCharCode(0xD800 + (wc >> 10));
      wc = 0xDC00 + (wc & 0x3FF);
    }
    result += String.fromCharCode(wc);
  }

  return result;
};

/*
 * Encode string to an array of bytes using utf8 encoding.
 *
 * Javascript internally stores character data as utf16 (like java).
 * String.charCodeAt() does *not* produce unicode points, but simply
 * reflects this internal representation. Thus, it is necessary
 * to first decode the utf-16 representation before encoding to
 * utf-8.
 */
var encodeUtf8 = function(string) {
  var bytes = [];
  var i = 0;
  var j = 0;
  var wc;

  while (i < string.length) {
    wc = string.charCodeAt(i++);
    if (wc >= 0xD800 && wc <= 0xDBFF && i < string.length && string.charCodeAt(i) >= 0xDC00 && string.charCodeAt(i) <= 0xDFFF) {
      /* decode UTF-16 */
      wc = 0x10000 + ((wc & 0x3FF) << 10) + (string.charCodeAt(i++) & 0x3FF);
    }

    /* emit lead byte */
    if (wc < 0x80) {
      bytes[j++] = wc;
      count = 0;
    } else if (wc < 0x800) {
      bytes[j++] = 0xC0 | (wc >> 6);
      count = 1;
    } else if (wc < 0x10000) {
      bytes[j++] = 0xE0 | (wc >> 12);
      count = 2;
    } else {
      /* SMP: 21-bit Unicode */
      bytes[j++] = 0xF0 | (wc >> 18);
      count = 3;
    }

    /* emit trail bytes, if any */
    while (count) {
      bytes[j++] = 0x80 | ((wc >> (6 * --count)) & 0x3F);
    }
  }

  return bytes;

};

Lexer.prototype.bytesToString = function(bytes) {
  if(typeof bytes.write == 'function') {
    // Node.js
    return bytes.toString('utf-8');
  }
  return decodeUtf8(bytes);
};

Lexer.prototype.stringToBytes = function(string) {
  return encodeUtf8(string);
};

Lexer.prototype.unindent = function(startcol, text) {
  startcol = startcol || 0;
  return text.replace(new RegExp('^[\t ]{0,' + startcol + '}', 'gm'), ''); 
};

Lexer.prototype.store_keyword_content = function(event, data, p, eof) {
  var end_point = (!this.next_keyword_start || (p == eof)) ? p : this.next_keyword_start;
  var content = this.unindent(this.start_col + 2, this.bytesToString(data.slice(this.content_start, end_point))).replace(/\s+$/,"");
  var content_lines = content.split("\n")
  var name = content_lines.shift() || "";
  name = name.trim();
  var description = content_lines.join("\n");
  this.listener[event](this.keyword, name, description, this.current_line);
  var nks = this.next_keyword_start;
  this.next_keyword_start = null;
  return nks ? nks - 1 : p;
};

Lexer.prototype.current_line_content = function(data, p) {
  var rest = Array.prototype.slice.call(data,this.last_newline, -1);
  var end = rest.indexOf(10) || -1;
  return this.bytesToString(rest.slice(0, end)).trim();
};

// Node.js export
if(typeof module !== 'undefined') {
  module.exports = Lexer;
}
// Require.js export
if (typeof define !== 'undefined') {
  if(define.amd) {
    define('gherkin/lexer/lv', [], function() {
      return Lexer;
    });
  } else {
    define('gherkin/lexer/lv', function(require, exports, module) {
      exports.Lexer = Lexer;
    });
  }
}

})();

}).call(this,require("buffer").Buffer)

},{"buffer":69}],221:[function(require,module,exports){
(function (Buffer){

/* line 1 "ragel/i18n/nl.js.rl" */
;(function() {


/* line 126 "ragel/i18n/nl.js.rl" */



/* line 11 "js/lib/gherkin/lexer/nl.js" */
var _lexer_actions = [
	0, 1, 0, 1, 1, 1, 2, 1, 
	3, 1, 4, 1, 5, 1, 6, 1, 
	7, 1, 8, 1, 9, 1, 10, 1, 
	11, 1, 12, 1, 13, 1, 16, 1, 
	17, 1, 18, 1, 19, 1, 20, 1, 
	21, 1, 22, 1, 23, 2, 2, 18, 
	2, 3, 4, 2, 13, 0, 2, 14, 
	15, 2, 17, 0, 2, 17, 1, 2, 
	17, 16, 2, 17, 19, 2, 18, 6, 
	2, 18, 7, 2, 18, 8, 2, 18, 
	9, 2, 18, 10, 2, 18, 16, 2, 
	20, 21, 2, 22, 0, 2, 22, 1, 
	2, 22, 16, 2, 22, 19, 3, 4, 
	14, 15, 3, 5, 14, 15, 3, 11, 
	14, 15, 3, 12, 14, 15, 3, 13, 
	14, 15, 3, 14, 15, 18, 3, 17, 
	0, 11, 3, 17, 14, 15, 4, 2, 
	14, 15, 18, 4, 3, 4, 14, 15, 
	4, 17, 0, 14, 15, 5, 17, 0, 
	11, 14, 15
];

var _lexer_key_offsets = [
	0, 0, 19, 37, 38, 39, 41, 43, 
	48, 53, 58, 63, 67, 71, 73, 74, 
	75, 76, 77, 78, 79, 80, 81, 82, 
	83, 84, 85, 86, 87, 88, 89, 91, 
	93, 98, 105, 110, 113, 114, 115, 116, 
	117, 118, 119, 120, 121, 122, 123, 124, 
	125, 126, 127, 128, 129, 130, 131, 146, 
	148, 150, 152, 154, 156, 158, 160, 162, 
	164, 166, 168, 170, 172, 174, 176, 194, 
	195, 196, 197, 198, 199, 200, 201, 202, 
	203, 204, 205, 206, 207, 208, 209, 210, 
	211, 212, 213, 224, 226, 228, 230, 232, 
	234, 236, 238, 240, 242, 244, 246, 248, 
	250, 252, 255, 257, 259, 261, 263, 265, 
	267, 269, 271, 273, 275, 277, 279, 281, 
	283, 285, 287, 289, 291, 293, 295, 297, 
	299, 301, 303, 305, 307, 309, 311, 313, 
	315, 317, 319, 321, 323, 325, 327, 329, 
	331, 333, 335, 337, 339, 341, 343, 345, 
	347, 349, 351, 353, 354, 355, 356, 357, 
	358, 359, 360, 361, 363, 364, 365, 366, 
	367, 368, 369, 370, 371, 372, 387, 389, 
	391, 393, 395, 397, 399, 401, 403, 405, 
	407, 409, 411, 413, 415, 417, 421, 423, 
	425, 427, 429, 431, 433, 435, 437, 439, 
	441, 443, 445, 447, 449, 451, 453, 455, 
	457, 459, 461, 463, 465, 467, 469, 471, 
	473, 475, 477, 479, 481, 483, 485, 487, 
	489, 491, 493, 495, 497, 499, 501, 503, 
	505, 507, 509, 511, 513, 515, 517, 519, 
	521, 524, 526, 528, 529, 530, 531, 532, 
	533, 534, 535, 536, 537, 538, 539, 540, 
	541, 542, 543, 550, 552, 554, 556, 558, 
	560, 562, 564, 566, 568, 570, 572, 574, 
	576, 578, 580, 584, 590, 593, 595, 601, 
	619, 621, 623, 625, 627, 629, 631, 633, 
	635, 637, 639, 641, 643, 645, 647, 649, 
	651, 653, 655, 657, 659, 661, 663, 665, 
	667, 669, 671, 673, 676, 678, 680, 682, 
	684, 686, 688, 690, 692, 693, 694, 695, 
	696, 697, 698, 699, 700, 701, 702, 703, 
	704, 719, 721, 723, 725, 727, 729, 731, 
	733, 735, 737, 739, 741, 743, 745, 747, 
	749, 752, 754, 756, 758, 760, 762, 764, 
	766, 768, 770, 772, 774, 776, 778, 780, 
	782, 784, 786, 788, 790, 792, 794, 796, 
	798, 800, 802, 804, 806, 808, 810, 812, 
	814, 816, 818, 820, 822, 824, 826, 828, 
	830, 832, 834, 837, 839, 841, 842, 843, 
	844
];

var _lexer_trans_keys = [
	10, 32, 34, 35, 37, 42, 64, 65, 
	68, 69, 70, 71, 77, 83, 86, 124, 
	239, 9, 13, 10, 32, 34, 35, 37, 
	42, 64, 65, 68, 69, 70, 71, 77, 
	83, 86, 124, 9, 13, 34, 34, 10, 
	13, 10, 13, 10, 32, 34, 9, 13, 
	10, 32, 34, 9, 13, 10, 32, 34, 
	9, 13, 10, 32, 34, 9, 13, 10, 
	32, 9, 13, 10, 32, 9, 13, 10, 
	13, 10, 95, 70, 69, 65, 84, 85, 
	82, 69, 95, 69, 78, 68, 95, 37, 
	32, 10, 13, 10, 13, 13, 32, 64, 
	9, 10, 9, 10, 13, 32, 64, 11, 
	12, 10, 32, 64, 9, 13, 98, 99, 
	108, 115, 116, 114, 97, 99, 116, 32, 
	83, 99, 101, 110, 97, 114, 105, 111, 
	58, 10, 10, 10, 32, 35, 37, 42, 
	64, 65, 68, 69, 70, 71, 77, 83, 
	9, 13, 10, 95, 10, 70, 10, 69, 
	10, 65, 10, 84, 10, 85, 10, 82, 
	10, 69, 10, 95, 10, 69, 10, 78, 
	10, 68, 10, 95, 10, 37, 10, 32, 
	10, 32, 34, 35, 37, 42, 64, 65, 
	68, 69, 70, 71, 77, 83, 86, 124, 
	9, 13, 97, 110, 117, 110, 99, 116, 
	105, 111, 110, 97, 108, 105, 116, 101, 
	105, 116, 58, 10, 10, 10, 32, 35, 
	37, 64, 65, 70, 83, 86, 9, 13, 
	10, 95, 10, 70, 10, 69, 10, 65, 
	10, 84, 10, 85, 10, 82, 10, 69, 
	10, 95, 10, 69, 10, 78, 10, 68, 
	10, 95, 10, 37, 10, 98, 99, 10, 
	115, 10, 116, 10, 114, 10, 97, 10, 
	99, 10, 116, 10, 32, 10, 83, 10, 
	99, 10, 101, 10, 110, 10, 97, 10, 
	114, 10, 105, 10, 111, 10, 58, 10, 
	104, 10, 116, 10, 101, 10, 114, 10, 
	103, 10, 114, 10, 111, 10, 110, 10, 
	100, 10, 117, 10, 110, 10, 99, 10, 
	116, 10, 105, 10, 111, 10, 110, 10, 
	97, 10, 108, 10, 105, 10, 116, 10, 
	101, 10, 105, 10, 116, 10, 111, 10, 
	111, 10, 114, 10, 98, 10, 101, 10, 
	101, 10, 108, 10, 100, 10, 101, 10, 
	110, 101, 103, 101, 118, 101, 97, 97, 
	114, 99, 116, 101, 110, 97, 114, 105, 
	111, 58, 10, 10, 10, 32, 35, 37, 
	42, 64, 65, 68, 69, 70, 71, 77, 
	83, 9, 13, 10, 95, 10, 70, 10, 
	69, 10, 65, 10, 84, 10, 85, 10, 
	82, 10, 69, 10, 95, 10, 69, 10, 
	78, 10, 68, 10, 95, 10, 37, 10, 
	32, 10, 98, 99, 108, 10, 115, 10, 
	116, 10, 114, 10, 97, 10, 99, 10, 
	116, 10, 32, 10, 83, 10, 99, 10, 
	101, 10, 110, 10, 97, 10, 114, 10, 
	105, 10, 111, 10, 58, 10, 104, 10, 
	116, 10, 101, 10, 114, 10, 103, 10, 
	114, 10, 111, 10, 110, 10, 100, 10, 
	115, 10, 97, 10, 110, 10, 117, 10, 
	110, 10, 99, 10, 116, 10, 105, 10, 
	111, 10, 110, 10, 97, 10, 108, 10, 
	105, 10, 116, 10, 101, 10, 105, 10, 
	116, 10, 101, 10, 103, 10, 101, 10, 
	118, 10, 101, 10, 97, 10, 97, 10, 
	114, 10, 99, 116, 10, 101, 10, 108, 
	101, 108, 111, 111, 114, 98, 101, 101, 
	108, 100, 101, 110, 58, 10, 10, 10, 
	32, 35, 70, 124, 9, 13, 10, 117, 
	10, 110, 10, 99, 10, 116, 10, 105, 
	10, 111, 10, 110, 10, 97, 10, 108, 
	10, 105, 10, 116, 10, 101, 10, 105, 
	10, 116, 10, 58, 32, 124, 9, 13, 
	10, 32, 92, 124, 9, 13, 10, 92, 
	124, 10, 92, 10, 32, 92, 124, 9, 
	13, 10, 32, 34, 35, 37, 42, 64, 
	65, 68, 69, 70, 71, 77, 83, 86, 
	124, 9, 13, 10, 108, 10, 115, 10, 
	97, 10, 110, 10, 117, 10, 110, 10, 
	99, 10, 116, 10, 105, 10, 111, 10, 
	110, 10, 97, 10, 108, 10, 105, 10, 
	116, 10, 101, 10, 105, 10, 116, 10, 
	58, 10, 101, 10, 103, 10, 101, 10, 
	118, 10, 101, 10, 97, 10, 97, 10, 
	114, 10, 99, 116, 10, 101, 10, 110, 
	10, 97, 10, 114, 10, 105, 10, 111, 
	10, 101, 10, 108, 104, 116, 101, 114, 
	103, 114, 111, 110, 100, 58, 10, 10, 
	10, 32, 35, 37, 42, 64, 65, 68, 
	69, 70, 71, 77, 83, 9, 13, 10, 
	95, 10, 70, 10, 69, 10, 65, 10, 
	84, 10, 85, 10, 82, 10, 69, 10, 
	95, 10, 69, 10, 78, 10, 68, 10, 
	95, 10, 37, 10, 32, 10, 98, 108, 
	10, 115, 10, 116, 10, 114, 10, 97, 
	10, 99, 10, 116, 10, 32, 10, 83, 
	10, 99, 10, 101, 10, 110, 10, 97, 
	10, 114, 10, 105, 10, 111, 10, 58, 
	10, 115, 10, 97, 10, 110, 10, 117, 
	10, 110, 10, 99, 10, 116, 10, 105, 
	10, 111, 10, 110, 10, 97, 10, 108, 
	10, 105, 10, 116, 10, 101, 10, 105, 
	10, 116, 10, 101, 10, 103, 10, 101, 
	10, 118, 10, 101, 10, 97, 10, 97, 
	10, 114, 10, 99, 116, 10, 101, 10, 
	108, 115, 187, 191, 0
];

var _lexer_single_lengths = [
	0, 17, 16, 1, 1, 2, 2, 3, 
	3, 3, 3, 2, 2, 2, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 2, 2, 
	3, 5, 3, 3, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 13, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 16, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 9, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 3, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 1, 1, 1, 1, 1, 
	1, 1, 1, 2, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 13, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 4, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	3, 2, 2, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 5, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 4, 3, 2, 4, 16, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 3, 2, 2, 2, 2, 
	2, 2, 2, 2, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	13, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	3, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 3, 2, 2, 1, 1, 1, 
	0
];

var _lexer_range_lengths = [
	0, 1, 1, 0, 0, 0, 0, 1, 
	1, 1, 1, 1, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 1, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 1, 0, 0, 1, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0
];

var _lexer_index_offsets = [
	0, 0, 19, 37, 39, 41, 44, 47, 
	52, 57, 62, 67, 71, 75, 78, 80, 
	82, 84, 86, 88, 90, 92, 94, 96, 
	98, 100, 102, 104, 106, 108, 110, 113, 
	116, 121, 128, 133, 137, 139, 141, 143, 
	145, 147, 149, 151, 153, 155, 157, 159, 
	161, 163, 165, 167, 169, 171, 173, 188, 
	191, 194, 197, 200, 203, 206, 209, 212, 
	215, 218, 221, 224, 227, 230, 233, 251, 
	253, 255, 257, 259, 261, 263, 265, 267, 
	269, 271, 273, 275, 277, 279, 281, 283, 
	285, 287, 289, 300, 303, 306, 309, 312, 
	315, 318, 321, 324, 327, 330, 333, 336, 
	339, 342, 346, 349, 352, 355, 358, 361, 
	364, 367, 370, 373, 376, 379, 382, 385, 
	388, 391, 394, 397, 400, 403, 406, 409, 
	412, 415, 418, 421, 424, 427, 430, 433, 
	436, 439, 442, 445, 448, 451, 454, 457, 
	460, 463, 466, 469, 472, 475, 478, 481, 
	484, 487, 490, 493, 495, 497, 499, 501, 
	503, 505, 507, 509, 512, 514, 516, 518, 
	520, 522, 524, 526, 528, 530, 545, 548, 
	551, 554, 557, 560, 563, 566, 569, 572, 
	575, 578, 581, 584, 587, 590, 595, 598, 
	601, 604, 607, 610, 613, 616, 619, 622, 
	625, 628, 631, 634, 637, 640, 643, 646, 
	649, 652, 655, 658, 661, 664, 667, 670, 
	673, 676, 679, 682, 685, 688, 691, 694, 
	697, 700, 703, 706, 709, 712, 715, 718, 
	721, 724, 727, 730, 733, 736, 739, 742, 
	745, 749, 752, 755, 757, 759, 761, 763, 
	765, 767, 769, 771, 773, 775, 777, 779, 
	781, 783, 785, 792, 795, 798, 801, 804, 
	807, 810, 813, 816, 819, 822, 825, 828, 
	831, 834, 837, 841, 847, 851, 854, 860, 
	878, 881, 884, 887, 890, 893, 896, 899, 
	902, 905, 908, 911, 914, 917, 920, 923, 
	926, 929, 932, 935, 938, 941, 944, 947, 
	950, 953, 956, 959, 963, 966, 969, 972, 
	975, 978, 981, 984, 987, 989, 991, 993, 
	995, 997, 999, 1001, 1003, 1005, 1007, 1009, 
	1011, 1026, 1029, 1032, 1035, 1038, 1041, 1044, 
	1047, 1050, 1053, 1056, 1059, 1062, 1065, 1068, 
	1071, 1075, 1078, 1081, 1084, 1087, 1090, 1093, 
	1096, 1099, 1102, 1105, 1108, 1111, 1114, 1117, 
	1120, 1123, 1126, 1129, 1132, 1135, 1138, 1141, 
	1144, 1147, 1150, 1153, 1156, 1159, 1162, 1165, 
	1168, 1171, 1174, 1177, 1180, 1183, 1186, 1189, 
	1192, 1195, 1198, 1202, 1205, 1208, 1210, 1212, 
	1214
];

var _lexer_indicies = [
	2, 1, 3, 4, 5, 6, 7, 8, 
	9, 10, 11, 12, 13, 14, 15, 16, 
	17, 1, 0, 2, 1, 3, 4, 5, 
	6, 7, 8, 9, 10, 11, 12, 13, 
	14, 15, 16, 1, 0, 18, 0, 19, 
	0, 21, 22, 20, 24, 25, 23, 28, 
	27, 29, 27, 26, 32, 31, 33, 31, 
	30, 32, 31, 34, 31, 30, 32, 31, 
	35, 31, 30, 37, 36, 36, 0, 2, 
	38, 38, 0, 40, 41, 39, 2, 0, 
	42, 0, 43, 0, 44, 0, 45, 0, 
	46, 0, 47, 0, 48, 0, 49, 0, 
	50, 0, 51, 0, 52, 0, 53, 0, 
	54, 0, 55, 0, 56, 0, 58, 59, 
	57, 61, 62, 60, 0, 0, 0, 0, 
	63, 64, 65, 64, 64, 67, 66, 63, 
	2, 68, 7, 68, 0, 69, 70, 71, 
	0, 72, 0, 73, 0, 74, 0, 75, 
	0, 76, 0, 77, 0, 78, 0, 79, 
	0, 80, 0, 81, 0, 82, 0, 83, 
	0, 84, 0, 85, 0, 86, 0, 87, 
	0, 89, 88, 91, 90, 91, 92, 93, 
	94, 95, 93, 96, 97, 98, 99, 100, 
	101, 102, 92, 90, 91, 103, 90, 91, 
	104, 90, 91, 105, 90, 91, 106, 90, 
	91, 107, 90, 91, 108, 90, 91, 109, 
	90, 91, 110, 90, 91, 111, 90, 91, 
	112, 90, 91, 113, 90, 91, 114, 90, 
	91, 115, 90, 91, 116, 90, 91, 117, 
	90, 119, 118, 120, 121, 122, 123, 124, 
	125, 126, 127, 128, 129, 130, 131, 132, 
	133, 118, 0, 134, 0, 135, 0, 136, 
	0, 137, 0, 138, 0, 139, 0, 140, 
	0, 141, 0, 142, 0, 143, 0, 144, 
	0, 145, 0, 146, 0, 147, 0, 148, 
	0, 149, 0, 150, 0, 152, 151, 154, 
	153, 154, 155, 156, 157, 156, 158, 159, 
	160, 161, 155, 153, 154, 162, 153, 154, 
	163, 153, 154, 164, 153, 154, 165, 153, 
	154, 166, 153, 154, 167, 153, 154, 168, 
	153, 154, 169, 153, 154, 170, 153, 154, 
	171, 153, 154, 172, 153, 154, 173, 153, 
	154, 174, 153, 154, 175, 153, 154, 176, 
	177, 153, 154, 178, 153, 154, 179, 153, 
	154, 180, 153, 154, 181, 153, 154, 182, 
	153, 154, 183, 153, 154, 184, 153, 154, 
	185, 153, 154, 186, 153, 154, 187, 153, 
	154, 188, 153, 154, 189, 153, 154, 190, 
	153, 154, 191, 153, 154, 192, 153, 154, 
	193, 153, 154, 194, 153, 154, 195, 153, 
	154, 196, 153, 154, 197, 153, 154, 198, 
	153, 154, 199, 153, 154, 200, 153, 154, 
	201, 153, 154, 192, 153, 154, 202, 153, 
	154, 203, 153, 154, 204, 153, 154, 205, 
	153, 154, 206, 153, 154, 207, 153, 154, 
	208, 153, 154, 209, 153, 154, 210, 153, 
	154, 211, 153, 154, 212, 153, 154, 213, 
	153, 154, 214, 153, 154, 192, 153, 154, 
	215, 153, 154, 216, 153, 154, 217, 153, 
	154, 218, 153, 154, 219, 153, 154, 220, 
	153, 154, 221, 153, 154, 222, 153, 154, 
	223, 153, 154, 192, 153, 224, 0, 225, 
	0, 226, 0, 227, 0, 134, 0, 228, 
	0, 229, 0, 135, 0, 230, 231, 0, 
	232, 0, 233, 0, 234, 0, 235, 0, 
	236, 0, 237, 0, 238, 0, 240, 239, 
	242, 241, 242, 243, 244, 245, 246, 244, 
	247, 248, 249, 250, 251, 252, 253, 243, 
	241, 242, 254, 241, 242, 255, 241, 242, 
	256, 241, 242, 257, 241, 242, 258, 241, 
	242, 259, 241, 242, 260, 241, 242, 261, 
	241, 242, 262, 241, 242, 263, 241, 242, 
	264, 241, 242, 265, 241, 242, 266, 241, 
	242, 267, 241, 242, 268, 241, 242, 269, 
	270, 271, 241, 242, 272, 241, 242, 273, 
	241, 242, 274, 241, 242, 275, 241, 242, 
	276, 241, 242, 277, 241, 242, 278, 241, 
	242, 279, 241, 242, 280, 241, 242, 281, 
	241, 242, 282, 241, 242, 283, 241, 242, 
	284, 241, 242, 285, 241, 242, 286, 241, 
	242, 268, 241, 242, 287, 241, 242, 288, 
	241, 242, 289, 241, 242, 290, 241, 242, 
	291, 241, 242, 292, 241, 242, 293, 241, 
	242, 294, 241, 242, 286, 241, 242, 295, 
	241, 242, 296, 241, 242, 295, 241, 242, 
	297, 241, 242, 298, 241, 242, 299, 241, 
	242, 300, 241, 242, 301, 241, 242, 302, 
	241, 242, 303, 241, 242, 304, 241, 242, 
	305, 241, 242, 306, 241, 242, 307, 241, 
	242, 308, 241, 242, 309, 241, 242, 286, 
	241, 242, 310, 241, 242, 311, 241, 242, 
	312, 241, 242, 313, 241, 242, 296, 241, 
	242, 314, 241, 242, 315, 241, 242, 295, 
	241, 242, 280, 316, 241, 242, 317, 241, 
	242, 295, 241, 318, 0, 135, 0, 319, 
	0, 320, 0, 321, 0, 322, 0, 323, 
	0, 324, 0, 325, 0, 326, 0, 327, 
	0, 328, 0, 329, 0, 331, 330, 333, 
	332, 333, 334, 335, 336, 335, 334, 332, 
	333, 337, 332, 333, 338, 332, 333, 339, 
	332, 333, 340, 332, 333, 341, 332, 333, 
	342, 332, 333, 343, 332, 333, 344, 332, 
	333, 345, 332, 333, 346, 332, 333, 347, 
	332, 333, 348, 332, 333, 349, 332, 333, 
	350, 332, 333, 351, 332, 352, 353, 352, 
	0, 356, 355, 357, 358, 355, 354, 0, 
	360, 361, 359, 0, 360, 359, 356, 362, 
	360, 361, 362, 359, 356, 363, 364, 365, 
	366, 367, 368, 369, 370, 371, 372, 373, 
	374, 375, 376, 377, 363, 0, 91, 378, 
	90, 91, 379, 90, 91, 380, 90, 91, 
	379, 90, 91, 381, 90, 91, 382, 90, 
	91, 383, 90, 91, 384, 90, 91, 385, 
	90, 91, 386, 90, 91, 387, 90, 91, 
	388, 90, 91, 389, 90, 91, 390, 90, 
	91, 391, 90, 91, 392, 90, 91, 393, 
	90, 91, 394, 90, 91, 117, 90, 91, 
	395, 90, 91, 396, 90, 91, 397, 90, 
	91, 398, 90, 91, 380, 90, 91, 399, 
	90, 91, 400, 90, 91, 379, 90, 91, 
	401, 402, 90, 91, 403, 90, 91, 404, 
	90, 91, 405, 90, 91, 406, 90, 91, 
	407, 90, 91, 394, 90, 91, 408, 90, 
	91, 379, 90, 409, 0, 410, 0, 411, 
	0, 412, 0, 413, 0, 414, 0, 415, 
	0, 416, 0, 417, 0, 418, 0, 420, 
	419, 422, 421, 422, 423, 424, 425, 426, 
	424, 427, 428, 429, 430, 431, 432, 433, 
	423, 421, 422, 434, 421, 422, 435, 421, 
	422, 436, 421, 422, 437, 421, 422, 438, 
	421, 422, 439, 421, 422, 440, 421, 422, 
	441, 421, 422, 442, 421, 422, 443, 421, 
	422, 444, 421, 422, 445, 421, 422, 446, 
	421, 422, 447, 421, 422, 448, 421, 422, 
	449, 450, 421, 422, 451, 421, 422, 452, 
	421, 422, 453, 421, 422, 454, 421, 422, 
	455, 421, 422, 456, 421, 422, 457, 421, 
	422, 458, 421, 422, 459, 421, 422, 460, 
	421, 422, 461, 421, 422, 462, 421, 422, 
	463, 421, 422, 464, 421, 422, 465, 421, 
	422, 448, 421, 422, 466, 421, 422, 467, 
	421, 422, 466, 421, 422, 468, 421, 422, 
	469, 421, 422, 470, 421, 422, 471, 421, 
	422, 472, 421, 422, 473, 421, 422, 474, 
	421, 422, 475, 421, 422, 476, 421, 422, 
	477, 421, 422, 478, 421, 422, 479, 421, 
	422, 480, 421, 422, 465, 421, 422, 481, 
	421, 422, 482, 421, 422, 483, 421, 422, 
	484, 421, 422, 467, 421, 422, 485, 421, 
	422, 486, 421, 422, 466, 421, 422, 459, 
	487, 421, 422, 488, 421, 422, 466, 421, 
	135, 0, 489, 0, 1, 0, 490, 0
];

var _lexer_trans_targs = [
	0, 2, 2, 3, 13, 15, 29, 32, 
	35, 71, 72, 73, 155, 160, 163, 245, 
	274, 390, 4, 5, 6, 7, 6, 6, 
	7, 6, 8, 8, 8, 9, 8, 8, 
	8, 9, 10, 11, 12, 2, 12, 13, 
	2, 14, 16, 17, 18, 19, 20, 21, 
	22, 23, 24, 25, 26, 27, 28, 392, 
	30, 31, 2, 14, 31, 2, 14, 33, 
	34, 2, 33, 32, 34, 36, 316, 389, 
	37, 38, 39, 40, 41, 42, 43, 44, 
	45, 46, 47, 48, 49, 50, 51, 52, 
	53, 54, 53, 54, 54, 2, 55, 69, 
	280, 282, 283, 284, 299, 304, 307, 56, 
	57, 58, 59, 60, 61, 62, 63, 64, 
	65, 66, 67, 68, 2, 70, 2, 2, 
	3, 13, 15, 29, 32, 35, 71, 72, 
	73, 155, 160, 163, 245, 274, 72, 29, 
	74, 75, 76, 77, 78, 79, 80, 81, 
	82, 83, 84, 85, 86, 87, 88, 89, 
	90, 89, 90, 90, 2, 91, 105, 131, 
	114, 145, 92, 93, 94, 95, 96, 97, 
	98, 99, 100, 101, 102, 103, 104, 2, 
	106, 122, 107, 108, 109, 110, 111, 112, 
	113, 114, 115, 116, 117, 118, 119, 120, 
	121, 70, 123, 124, 125, 126, 127, 128, 
	129, 130, 132, 133, 134, 135, 136, 137, 
	138, 139, 140, 141, 142, 143, 144, 146, 
	147, 148, 149, 150, 151, 152, 153, 154, 
	156, 157, 158, 159, 161, 162, 164, 243, 
	165, 166, 167, 168, 169, 170, 171, 172, 
	173, 172, 173, 173, 2, 174, 188, 189, 
	216, 217, 218, 232, 237, 240, 175, 176, 
	177, 178, 179, 180, 181, 182, 183, 184, 
	185, 186, 187, 2, 70, 190, 206, 215, 
	191, 192, 193, 194, 195, 196, 197, 198, 
	199, 200, 201, 202, 203, 204, 205, 207, 
	208, 209, 210, 211, 212, 213, 214, 188, 
	217, 219, 220, 221, 222, 223, 224, 225, 
	226, 227, 228, 229, 230, 231, 233, 234, 
	235, 236, 238, 239, 241, 242, 244, 246, 
	247, 248, 249, 250, 251, 252, 253, 254, 
	255, 256, 257, 258, 257, 258, 258, 2, 
	259, 260, 261, 262, 263, 264, 265, 266, 
	267, 268, 269, 270, 271, 272, 273, 70, 
	274, 275, 276, 278, 279, 277, 275, 276, 
	277, 275, 278, 279, 3, 13, 15, 29, 
	32, 35, 71, 72, 73, 155, 160, 163, 
	245, 274, 281, 69, 283, 285, 286, 287, 
	288, 289, 290, 291, 292, 293, 294, 295, 
	296, 297, 298, 300, 301, 302, 303, 305, 
	306, 308, 314, 309, 310, 311, 312, 313, 
	315, 317, 318, 319, 320, 321, 322, 323, 
	324, 325, 326, 327, 328, 327, 328, 328, 
	2, 329, 343, 344, 362, 363, 364, 378, 
	383, 386, 330, 331, 332, 333, 334, 335, 
	336, 337, 338, 339, 340, 341, 342, 2, 
	70, 345, 361, 346, 347, 348, 349, 350, 
	351, 352, 353, 354, 355, 356, 357, 358, 
	359, 360, 343, 363, 365, 366, 367, 368, 
	369, 370, 371, 372, 373, 374, 375, 376, 
	377, 379, 380, 381, 382, 384, 385, 387, 
	388, 391, 0
];

var _lexer_trans_actions = [
	43, 0, 54, 3, 1, 0, 29, 1, 
	29, 29, 29, 29, 29, 29, 29, 29, 
	35, 0, 0, 0, 7, 139, 48, 0, 
	102, 9, 5, 45, 134, 45, 0, 33, 
	122, 33, 33, 0, 11, 106, 0, 0, 
	114, 25, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 57, 149, 126, 0, 110, 23, 0, 
	27, 118, 27, 51, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	57, 144, 0, 54, 0, 78, 33, 84, 
	84, 84, 84, 84, 84, 84, 84, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 19, 19, 31, 130, 
	60, 57, 31, 63, 57, 63, 63, 63, 
	63, 63, 63, 63, 63, 66, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 57, 
	144, 0, 54, 0, 69, 33, 84, 84, 
	84, 84, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 13, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 13, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 57, 
	144, 0, 54, 0, 75, 33, 84, 84, 
	84, 84, 84, 84, 84, 84, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 17, 17, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 57, 144, 0, 54, 0, 81, 
	84, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 21, 
	0, 0, 37, 37, 54, 37, 87, 0, 
	0, 39, 0, 0, 93, 90, 41, 96, 
	90, 96, 96, 96, 96, 96, 96, 96, 
	96, 99, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 57, 144, 0, 54, 0, 
	72, 33, 84, 84, 84, 84, 84, 84, 
	84, 84, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 15, 
	15, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0
];

var _lexer_eof_actions = [
	0, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43
];

var lexer_start = 1;
var lexer_first_final = 392;
var lexer_error = 0;

var lexer_en_main = 1;


/* line 129 "ragel/i18n/nl.js.rl" */

/* line 130 "ragel/i18n/nl.js.rl" */

/* line 131 "ragel/i18n/nl.js.rl" */

/* line 132 "ragel/i18n/nl.js.rl" */

var Lexer = function(listener) {
  // Check that listener has the required functions
  var events = ['comment', 'tag', 'feature', 'background', 'scenario', 'scenario_outline', 'examples', 'step', 'doc_string', 'row', 'eof'];
  for(var i=0, len=events.length; i<len; i++) {
    var event = events[i];
    if(typeof listener[event] != 'function') {
      throw new Error("Error. No " + event + " function exists on " + JSON.stringify(listener));
    }
  }
  this.listener = listener;
};

Lexer.prototype.scan = function(data) {
  var ending = "\n%_FEATURE_END_%";
  if(typeof data == 'string') {
    data = this.stringToBytes(data + ending);
  } else if(typeof Buffer != 'undefined' && Buffer.isBuffer(data)) {
    // Node.js
    var buf = new Buffer(data.length + ending.length);
    data.copy(buf, 0, 0);
    new Buffer(ending).copy(buf, data.length, 0);
    data = buf;
  }
  var eof = pe = data.length;
  var p = 0;

  this.line_number = 1;
  this.last_newline = 0;
  var signedCharValue=function(v){return v > 127 ? v-256 : v; };

  
/* line 740 "js/lib/gherkin/lexer/nl.js" */
{
	  this.cs = lexer_start;
} /* JSCodeGen::writeInit */

/* line 164 "ragel/i18n/nl.js.rl" */
  
/* line 747 "js/lib/gherkin/lexer/nl.js" */
{
	var _klen, _trans, _keys, _ps, _widec, _acts, _nacts;
	var _goto_level, _resume, _eof_trans, _again, _test_eof;
	var _out;
	_klen = _trans = _keys = _acts = _nacts = null;
	_goto_level = 0;
	_resume = 10;
	_eof_trans = 15;
	_again = 20;
	_test_eof = 30;
	_out = 40;
	while (true) {
	_trigger_goto = false;
	if (_goto_level <= 0) {
	if (p == pe) {
		_goto_level = _test_eof;
		continue;
	}
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	}
	if (_goto_level <= _resume) {
	_keys = _lexer_key_offsets[ this.cs];
	_trans = _lexer_index_offsets[ this.cs];
	_klen = _lexer_single_lengths[ this.cs];
	_break_match = false;
	
	do {
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + _klen - 1;

	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + ( (_upper - _lower) >> 1 );

	        if (( signedCharValue(data[p])) < _lexer_trans_keys[_mid]) {
	           _upper = _mid - 1;
	        } else if (( signedCharValue(data[p])) > _lexer_trans_keys[_mid]) {
	           _lower = _mid + 1;
	        } else {
	           _trans += (_mid - _keys);
	           _break_match = true;
	           break;
	        };
	     } /* while */
	     if (_break_match) { break; }
	     _keys += _klen;
	     _trans += _klen;
	  }
	  _klen = _lexer_range_lengths[ this.cs];
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + (_klen << 1) - 2;
	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + (((_upper-_lower) >> 1) & ~1);
	        if (( signedCharValue(data[p])) < _lexer_trans_keys[_mid]) {
	          _upper = _mid - 2;
	         } else if (( signedCharValue(data[p])) > _lexer_trans_keys[_mid+1]) {
	          _lower = _mid + 2;
	        } else {
	          _trans += ((_mid - _keys) >> 1);
	          _break_match = true;
	          break;
	        }
	     } /* while */
	     if (_break_match) { break; }
	     _trans += _klen
	  }
	} while (false);
	_trans = _lexer_indicies[_trans];
	 this.cs = _lexer_trans_targs[_trans];
	if (_lexer_trans_actions[_trans] != 0) {
		_acts = _lexer_trans_actions[_trans];
		_nacts = _lexer_actions[_acts];
		_acts += 1;
		while (_nacts > 0) {
			_nacts -= 1;
			_acts += 1;
			switch (_lexer_actions[_acts - 1]) {
case 0:
/* line 6 "ragel/i18n/nl.js.rl" */

    this.content_start = p;
    this.current_line = this.line_number;
    this.start_col = p - this.last_newline - (this.keyword+':').length;
  		break;
case 1:
/* line 12 "ragel/i18n/nl.js.rl" */

    this.current_line = this.line_number;
    this.start_col = p - this.last_newline;
  		break;
case 2:
/* line 17 "ragel/i18n/nl.js.rl" */

    this.content_start = p;
  		break;
case 3:
/* line 21 "ragel/i18n/nl.js.rl" */

    this.docstring_content_type_start = p;
  		break;
case 4:
/* line 25 "ragel/i18n/nl.js.rl" */

    this.docstring_content_type_end = p;
  		break;
case 5:
/* line 29 "ragel/i18n/nl.js.rl" */

    var con = this.unindent(
      this.start_col, 
      this.bytesToString(data.slice(this.content_start, this.next_keyword_start-1)).replace(/(\r?\n)?([\t ])*$/, '').replace(/\\\"\\\"\\\"/mg, '"""')
    );
    var con_type = this.bytesToString(data.slice(this.docstring_content_type_start, this.docstring_content_type_end)).trim();
    this.listener.doc_string(con_type, con, this.current_line); 
  		break;
case 6:
/* line 38 "ragel/i18n/nl.js.rl" */

    p = this.store_keyword_content('feature', data, p, eof);
  		break;
case 7:
/* line 42 "ragel/i18n/nl.js.rl" */

    p = this.store_keyword_content('background', data, p, eof);
  		break;
case 8:
/* line 46 "ragel/i18n/nl.js.rl" */

    p = this.store_keyword_content('scenario', data, p, eof);
  		break;
case 9:
/* line 50 "ragel/i18n/nl.js.rl" */

    p = this.store_keyword_content('scenario_outline', data, p, eof);
  		break;
case 10:
/* line 54 "ragel/i18n/nl.js.rl" */

    p = this.store_keyword_content('examples', data, p, eof);
  		break;
case 11:
/* line 58 "ragel/i18n/nl.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.step(this.keyword, con, this.current_line);
  		break;
case 12:
/* line 63 "ragel/i18n/nl.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.comment(con, this.line_number);
    this.keyword_start = null;
  		break;
case 13:
/* line 69 "ragel/i18n/nl.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.tag(con, this.line_number);
    this.keyword_start = null;
  		break;
case 14:
/* line 75 "ragel/i18n/nl.js.rl" */

    this.line_number++;
  		break;
case 15:
/* line 79 "ragel/i18n/nl.js.rl" */

    this.last_newline = p + 1;
  		break;
case 16:
/* line 83 "ragel/i18n/nl.js.rl" */

    this.keyword_start = this.keyword_start || p;
  		break;
case 17:
/* line 87 "ragel/i18n/nl.js.rl" */

    this.keyword = this.bytesToString(data.slice(this.keyword_start, p)).replace(/:$/, '');
    this.keyword_start = null;
  		break;
case 18:
/* line 92 "ragel/i18n/nl.js.rl" */

    this.next_keyword_start = p;
  		break;
case 19:
/* line 96 "ragel/i18n/nl.js.rl" */

    p = p - 1;
    current_row = [];
    this.current_line = this.line_number;
  		break;
case 20:
/* line 102 "ragel/i18n/nl.js.rl" */

    this.content_start = p;
  		break;
case 21:
/* line 106 "ragel/i18n/nl.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    current_row.push(con.replace(/\\\|/, "|").replace(/\\n/, "\n").replace(/\\\\/, "\\"));
  		break;
case 22:
/* line 111 "ragel/i18n/nl.js.rl" */

    this.listener.row(current_row, this.current_line);
  		break;
case 23:
/* line 115 "ragel/i18n/nl.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw new Error("Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.");
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 974 "js/lib/gherkin/lexer/nl.js" */
			} /* action switch */
		}
	}
	if (_trigger_goto) {
		continue;
	}
	}
	if (_goto_level <= _again) {
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	p += 1;
	if (p != pe) {
		_goto_level = _resume;
		continue;
	}
	}
	if (_goto_level <= _test_eof) {
	if (p == eof) {
	__acts = _lexer_eof_actions[ this.cs];
	__nacts =  _lexer_actions[__acts];
	__acts += 1;
	while (__nacts > 0) {
		__nacts -= 1;
		__acts += 1;
		switch (_lexer_actions[__acts - 1]) {
case 23:
/* line 115 "ragel/i18n/nl.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw new Error("Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.");
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 1013 "js/lib/gherkin/lexer/nl.js" */
		} /* eof action switch */
	}
	if (_trigger_goto) {
		continue;
	}
}
	}
	if (_goto_level <= _out) {
		break;
	}
	}
	}

/* line 165 "ragel/i18n/nl.js.rl" */
};


/*
 * Decode utf-8 byte sequence to string.
 */
var decodeUtf8 = function(bytes) {
  var result = "";
  var i = 0;
  var wc;
  var c;

  while (i < bytes.length) {
    /* parse as UTF-8 lead byte */
    wc = bytes[i++];
    if (wc < 0x80) {
      count = 0;
    } else if (wc < 0xC2 || wc >= 0xF8) {
      throw new Error("input is not a valid UTF-8 lead octet");
    } else if (wc < 0xE0) {
      count = 1;
      wc = (wc & 0x1F) << 6;
    } else if (wc < 0xF0) {
      count = 2;
      wc = (wc & 0x0F) << 12;
    } else /* wc < 0xF8 */ {
      count = 3;
      wc = (wc & 0x07) << 18;
    }

    /* parse trail bytes, if any */
    while (count) {
      if (!(i < bytes.length)) {
        throw new Error("short read");
      }
      if ((c = bytes[i++] ^ 0x80) > 0x3F) {
        throw new Error("input is not a valid UTF-8 trail octet");
      }
      wc |= c << (6 * --count);
      if (wc < (1 << (5 * count + 6))) {
        throw new Error("invalid non-minimal encoded input");
      }
    }

    /* handle conversion to UTF-16 if needed */
    if (wc > 0xFFFF) {
      wc -= 0x10000;
      result += String.fromCharCode(0xD800 + (wc >> 10));
      wc = 0xDC00 + (wc & 0x3FF);
    }
    result += String.fromCharCode(wc);
  }

  return result;
};

/*
 * Encode string to an array of bytes using utf8 encoding.
 *
 * Javascript internally stores character data as utf16 (like java).
 * String.charCodeAt() does *not* produce unicode points, but simply
 * reflects this internal representation. Thus, it is necessary
 * to first decode the utf-16 representation before encoding to
 * utf-8.
 */
var encodeUtf8 = function(string) {
  var bytes = [];
  var i = 0;
  var j = 0;
  var wc;

  while (i < string.length) {
    wc = string.charCodeAt(i++);
    if (wc >= 0xD800 && wc <= 0xDBFF && i < string.length && string.charCodeAt(i) >= 0xDC00 && string.charCodeAt(i) <= 0xDFFF) {
      /* decode UTF-16 */
      wc = 0x10000 + ((wc & 0x3FF) << 10) + (string.charCodeAt(i++) & 0x3FF);
    }

    /* emit lead byte */
    if (wc < 0x80) {
      bytes[j++] = wc;
      count = 0;
    } else if (wc < 0x800) {
      bytes[j++] = 0xC0 | (wc >> 6);
      count = 1;
    } else if (wc < 0x10000) {
      bytes[j++] = 0xE0 | (wc >> 12);
      count = 2;
    } else {
      /* SMP: 21-bit Unicode */
      bytes[j++] = 0xF0 | (wc >> 18);
      count = 3;
    }

    /* emit trail bytes, if any */
    while (count) {
      bytes[j++] = 0x80 | ((wc >> (6 * --count)) & 0x3F);
    }
  }

  return bytes;

};

Lexer.prototype.bytesToString = function(bytes) {
  if(typeof bytes.write == 'function') {
    // Node.js
    return bytes.toString('utf-8');
  }
  return decodeUtf8(bytes);
};

Lexer.prototype.stringToBytes = function(string) {
  return encodeUtf8(string);
};

Lexer.prototype.unindent = function(startcol, text) {
  startcol = startcol || 0;
  return text.replace(new RegExp('^[\t ]{0,' + startcol + '}', 'gm'), ''); 
};

Lexer.prototype.store_keyword_content = function(event, data, p, eof) {
  var end_point = (!this.next_keyword_start || (p == eof)) ? p : this.next_keyword_start;
  var content = this.unindent(this.start_col + 2, this.bytesToString(data.slice(this.content_start, end_point))).replace(/\s+$/,"");
  var content_lines = content.split("\n")
  var name = content_lines.shift() || "";
  name = name.trim();
  var description = content_lines.join("\n");
  this.listener[event](this.keyword, name, description, this.current_line);
  var nks = this.next_keyword_start;
  this.next_keyword_start = null;
  return nks ? nks - 1 : p;
};

Lexer.prototype.current_line_content = function(data, p) {
  var rest = Array.prototype.slice.call(data,this.last_newline, -1);
  var end = rest.indexOf(10) || -1;
  return this.bytesToString(rest.slice(0, end)).trim();
};

// Node.js export
if(typeof module !== 'undefined') {
  module.exports = Lexer;
}
// Require.js export
if (typeof define !== 'undefined') {
  if(define.amd) {
    define('gherkin/lexer/nl', [], function() {
      return Lexer;
    });
  } else {
    define('gherkin/lexer/nl', function(require, exports, module) {
      exports.Lexer = Lexer;
    });
  }
}

})();

}).call(this,require("buffer").Buffer)

},{"buffer":69}],222:[function(require,module,exports){
(function (Buffer){

/* line 1 "ragel/i18n/no.js.rl" */
;(function() {


/* line 126 "ragel/i18n/no.js.rl" */



/* line 11 "js/lib/gherkin/lexer/no.js" */
var _lexer_actions = [
	0, 1, 0, 1, 1, 1, 2, 1, 
	3, 1, 4, 1, 5, 1, 6, 1, 
	7, 1, 8, 1, 9, 1, 10, 1, 
	11, 1, 12, 1, 13, 1, 16, 1, 
	17, 1, 18, 1, 19, 1, 20, 1, 
	21, 1, 22, 1, 23, 2, 2, 18, 
	2, 3, 4, 2, 13, 0, 2, 14, 
	15, 2, 17, 0, 2, 17, 1, 2, 
	17, 16, 2, 17, 19, 2, 18, 6, 
	2, 18, 7, 2, 18, 8, 2, 18, 
	9, 2, 18, 10, 2, 18, 16, 2, 
	20, 21, 2, 22, 0, 2, 22, 1, 
	2, 22, 16, 2, 22, 19, 3, 4, 
	14, 15, 3, 5, 14, 15, 3, 11, 
	14, 15, 3, 12, 14, 15, 3, 13, 
	14, 15, 3, 14, 15, 18, 3, 17, 
	0, 11, 3, 17, 14, 15, 4, 2, 
	14, 15, 18, 4, 3, 4, 14, 15, 
	4, 17, 0, 14, 15, 5, 17, 0, 
	11, 14, 15
];

var _lexer_key_offsets = [
	0, 0, 19, 37, 38, 39, 41, 43, 
	48, 53, 58, 63, 67, 71, 73, 74, 
	75, 76, 77, 78, 79, 80, 81, 82, 
	83, 84, 85, 86, 87, 88, 89, 91, 
	93, 98, 105, 110, 111, 112, 113, 114, 
	115, 116, 117, 118, 119, 120, 121, 122, 
	123, 124, 125, 126, 127, 128, 129, 143, 
	145, 147, 149, 151, 153, 155, 157, 159, 
	161, 163, 165, 167, 169, 171, 173, 191, 
	192, 193, 194, 195, 196, 197, 198, 199, 
	200, 201, 216, 218, 220, 222, 224, 226, 
	228, 230, 232, 234, 236, 238, 240, 242, 
	244, 246, 248, 250, 252, 254, 256, 258, 
	260, 262, 264, 266, 268, 270, 272, 274, 
	276, 278, 280, 282, 284, 286, 288, 290, 
	292, 294, 296, 298, 300, 302, 304, 306, 
	308, 310, 312, 315, 317, 319, 321, 323, 
	325, 327, 329, 332, 334, 336, 338, 339, 
	340, 341, 342, 343, 344, 345, 346, 347, 
	358, 360, 362, 364, 366, 368, 370, 372, 
	374, 376, 378, 380, 382, 384, 386, 388, 
	390, 392, 394, 396, 398, 400, 402, 404, 
	406, 408, 410, 412, 414, 416, 418, 420, 
	422, 424, 426, 428, 430, 432, 434, 437, 
	439, 441, 443, 445, 447, 449, 451, 453, 
	455, 457, 459, 461, 463, 465, 467, 469, 
	471, 473, 475, 477, 480, 482, 484, 485, 
	486, 487, 488, 489, 490, 491, 492, 493, 
	494, 501, 503, 505, 507, 509, 511, 513, 
	515, 517, 518, 519, 520, 521, 522, 523, 
	524, 525, 526, 528, 529, 530, 531, 532, 
	533, 534, 535, 537, 538, 539, 555, 557, 
	559, 561, 563, 565, 567, 569, 571, 573, 
	575, 577, 579, 581, 583, 585, 587, 589, 
	591, 593, 595, 597, 599, 601, 603, 605, 
	607, 609, 611, 613, 615, 617, 619, 621, 
	623, 625, 627, 629, 631, 633, 635, 637, 
	639, 641, 643, 645, 647, 649, 651, 653, 
	655, 657, 659, 661, 663, 665, 668, 670, 
	672, 674, 676, 678, 680, 682, 685, 687, 
	689, 690, 691, 695, 701, 704, 706, 712, 
	730, 732, 734, 736, 738, 740, 742, 744, 
	746, 748, 750, 752, 754, 756, 758, 760, 
	762, 764, 767, 769, 771, 773, 775, 777, 
	779, 781, 782, 783
];

var _lexer_trans_keys = [
	10, 32, 34, 35, 37, 42, 64, 65, 
	66, 69, 71, 77, 78, 79, 83, 124, 
	239, 9, 13, 10, 32, 34, 35, 37, 
	42, 64, 65, 66, 69, 71, 77, 78, 
	79, 83, 124, 9, 13, 34, 34, 10, 
	13, 10, 13, 10, 32, 34, 9, 13, 
	10, 32, 34, 9, 13, 10, 32, 34, 
	9, 13, 10, 32, 34, 9, 13, 10, 
	32, 9, 13, 10, 32, 9, 13, 10, 
	13, 10, 95, 70, 69, 65, 84, 85, 
	82, 69, 95, 69, 78, 68, 95, 37, 
	32, 10, 13, 10, 13, 13, 32, 64, 
	9, 10, 9, 10, 13, 32, 64, 11, 
	12, 10, 32, 64, 9, 13, 98, 115, 
	116, 114, 97, 107, 116, 32, 83, 99, 
	101, 110, 97, 114, 105, 111, 58, 10, 
	10, 10, 32, 35, 37, 42, 64, 69, 
	71, 77, 78, 79, 83, 9, 13, 10, 
	95, 10, 70, 10, 69, 10, 65, 10, 
	84, 10, 85, 10, 82, 10, 69, 10, 
	95, 10, 69, 10, 78, 10, 68, 10, 
	95, 10, 37, 10, 32, 10, 32, 34, 
	35, 37, 42, 64, 65, 66, 69, 71, 
	77, 78, 79, 83, 124, 9, 13, 97, 
	107, 103, 114, 117, 110, 110, 58, 10, 
	10, 10, 32, 35, 37, 42, 64, 65, 
	69, 71, 77, 78, 79, 83, 9, 13, 
	10, 95, 10, 70, 10, 69, 10, 65, 
	10, 84, 10, 85, 10, 82, 10, 69, 
	10, 95, 10, 69, 10, 78, 10, 68, 
	10, 95, 10, 37, 10, 32, 10, 98, 
	10, 115, 10, 116, 10, 114, 10, 97, 
	10, 107, 10, 116, 10, 32, 10, 83, 
	10, 99, 10, 101, 10, 110, 10, 97, 
	10, 114, 10, 105, 10, 111, 10, 58, 
	10, 103, 10, 101, 10, 110, 10, 115, 
	10, 107, 10, 97, 10, 112, 10, 105, 
	10, 116, 10, 116, 10, 101, 10, 110, 
	-61, 10, -91, 10, 10, 114, 10, 103, 
	-61, 10, 99, -91, 10, 10, 101, 10, 
	110, 10, 97, 10, 114, 10, 105, 10, 
	111, 10, 58, 109, 10, 97, 10, 108, 
	103, 107, 101, 110, 115, 107, 97, 112, 
	58, 10, 10, 10, 32, 35, 37, 64, 
	65, 66, 69, 83, 9, 13, 10, 95, 
	10, 70, 10, 69, 10, 65, 10, 84, 
	10, 85, 10, 82, 10, 69, 10, 95, 
	10, 69, 10, 78, 10, 68, 10, 95, 
	10, 37, 10, 98, 10, 115, 10, 116, 
	10, 114, 10, 97, 10, 107, 10, 116, 
	10, 32, 10, 83, 10, 99, 10, 101, 
	10, 110, 10, 97, 10, 114, 10, 105, 
	10, 111, 10, 58, 10, 97, 10, 107, 
	10, 103, 10, 114, 10, 117, 10, 110, 
	10, 110, 10, 103, 107, 10, 101, 10, 
	110, 10, 115, 10, 107, 10, 97, 10, 
	112, 10, 115, 10, 101, 10, 109, 10, 
	112, 10, 108, 10, 101, 10, 114, 10, 
	99, 10, 101, 10, 110, 10, 97, 10, 
	114, 10, 105, 10, 111, 10, 58, 109, 
	10, 97, 10, 108, 115, 101, 109, 112, 
	108, 101, 114, 58, 10, 10, 10, 32, 
	35, 69, 124, 9, 13, 10, 103, 10, 
	101, 10, 110, 10, 115, 10, 107, 10, 
	97, 10, 112, 10, 58, 105, 116, 116, 
	101, 110, -61, -91, 114, 103, -61, 99, 
	-91, 101, 110, 97, 114, 105, 111, 58, 
	109, 10, 10, 10, 32, 35, 37, 42, 
	64, 65, 66, 69, 71, 77, 78, 79, 
	83, 9, 13, 10, 95, 10, 70, 10, 
	69, 10, 65, 10, 84, 10, 85, 10, 
	82, 10, 69, 10, 95, 10, 69, 10, 
	78, 10, 68, 10, 95, 10, 37, 10, 
	32, 10, 98, 10, 115, 10, 116, 10, 
	114, 10, 97, 10, 107, 10, 116, 10, 
	32, 10, 83, 10, 99, 10, 101, 10, 
	110, 10, 97, 10, 114, 10, 105, 10, 
	111, 10, 58, 10, 97, 10, 107, 10, 
	103, 10, 114, 10, 117, 10, 110, 10, 
	110, 10, 103, 10, 101, 10, 110, 10, 
	115, 10, 107, 10, 97, 10, 112, 10, 
	105, 10, 116, 10, 116, 10, 101, 10, 
	110, -61, 10, -91, 10, 10, 114, 10, 
	103, -61, 10, 99, -91, 10, 10, 101, 
	10, 110, 10, 97, 10, 114, 10, 105, 
	10, 111, 10, 58, 109, 10, 97, 10, 
	108, 97, 108, 32, 124, 9, 13, 10, 
	32, 92, 124, 9, 13, 10, 92, 124, 
	10, 92, 10, 32, 92, 124, 9, 13, 
	10, 32, 34, 35, 37, 42, 64, 65, 
	66, 69, 71, 77, 78, 79, 83, 124, 
	9, 13, 10, 103, 10, 101, 10, 110, 
	10, 115, 10, 107, 10, 97, 10, 112, 
	10, 58, 10, 105, 10, 116, 10, 116, 
	10, 101, 10, 110, -61, 10, -91, 10, 
	10, 114, 10, 103, -61, 10, 99, -91, 
	10, 10, 101, 10, 110, 10, 97, 10, 
	114, 10, 105, 10, 111, 187, 191, 0
];

var _lexer_single_lengths = [
	0, 17, 16, 1, 1, 2, 2, 3, 
	3, 3, 3, 2, 2, 2, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 2, 2, 
	3, 5, 3, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 12, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 16, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 13, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 3, 2, 2, 2, 2, 2, 
	2, 2, 3, 2, 2, 2, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 9, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 3, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 3, 2, 2, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	5, 2, 2, 2, 2, 2, 2, 2, 
	2, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 2, 1, 1, 1, 1, 1, 
	1, 1, 2, 1, 1, 14, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 3, 2, 2, 
	2, 2, 2, 2, 2, 3, 2, 2, 
	1, 1, 2, 4, 3, 2, 4, 16, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 3, 2, 2, 2, 2, 2, 2, 
	2, 1, 1, 0
];

var _lexer_range_lengths = [
	0, 1, 1, 0, 0, 0, 0, 1, 
	1, 1, 1, 1, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 1, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 1, 0, 0, 1, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0
];

var _lexer_index_offsets = [
	0, 0, 19, 37, 39, 41, 44, 47, 
	52, 57, 62, 67, 71, 75, 78, 80, 
	82, 84, 86, 88, 90, 92, 94, 96, 
	98, 100, 102, 104, 106, 108, 110, 113, 
	116, 121, 128, 133, 135, 137, 139, 141, 
	143, 145, 147, 149, 151, 153, 155, 157, 
	159, 161, 163, 165, 167, 169, 171, 185, 
	188, 191, 194, 197, 200, 203, 206, 209, 
	212, 215, 218, 221, 224, 227, 230, 248, 
	250, 252, 254, 256, 258, 260, 262, 264, 
	266, 268, 283, 286, 289, 292, 295, 298, 
	301, 304, 307, 310, 313, 316, 319, 322, 
	325, 328, 331, 334, 337, 340, 343, 346, 
	349, 352, 355, 358, 361, 364, 367, 370, 
	373, 376, 379, 382, 385, 388, 391, 394, 
	397, 400, 403, 406, 409, 412, 415, 418, 
	421, 424, 427, 431, 434, 437, 440, 443, 
	446, 449, 452, 456, 459, 462, 465, 467, 
	469, 471, 473, 475, 477, 479, 481, 483, 
	494, 497, 500, 503, 506, 509, 512, 515, 
	518, 521, 524, 527, 530, 533, 536, 539, 
	542, 545, 548, 551, 554, 557, 560, 563, 
	566, 569, 572, 575, 578, 581, 584, 587, 
	590, 593, 596, 599, 602, 605, 608, 612, 
	615, 618, 621, 624, 627, 630, 633, 636, 
	639, 642, 645, 648, 651, 654, 657, 660, 
	663, 666, 669, 672, 676, 679, 682, 684, 
	686, 688, 690, 692, 694, 696, 698, 700, 
	702, 709, 712, 715, 718, 721, 724, 727, 
	730, 733, 735, 737, 739, 741, 743, 745, 
	747, 749, 751, 754, 756, 758, 760, 762, 
	764, 766, 768, 771, 773, 775, 791, 794, 
	797, 800, 803, 806, 809, 812, 815, 818, 
	821, 824, 827, 830, 833, 836, 839, 842, 
	845, 848, 851, 854, 857, 860, 863, 866, 
	869, 872, 875, 878, 881, 884, 887, 890, 
	893, 896, 899, 902, 905, 908, 911, 914, 
	917, 920, 923, 926, 929, 932, 935, 938, 
	941, 944, 947, 950, 953, 956, 960, 963, 
	966, 969, 972, 975, 978, 981, 985, 988, 
	991, 993, 995, 999, 1005, 1009, 1012, 1018, 
	1036, 1039, 1042, 1045, 1048, 1051, 1054, 1057, 
	1060, 1063, 1066, 1069, 1072, 1075, 1078, 1081, 
	1084, 1087, 1091, 1094, 1097, 1100, 1103, 1106, 
	1109, 1112, 1114, 1116
];

var _lexer_indicies = [
	2, 1, 3, 4, 5, 6, 7, 8, 
	9, 10, 11, 12, 13, 14, 15, 16, 
	17, 1, 0, 2, 1, 3, 4, 5, 
	6, 7, 8, 9, 10, 11, 12, 13, 
	14, 15, 16, 1, 0, 18, 0, 19, 
	0, 21, 22, 20, 24, 25, 23, 28, 
	27, 29, 27, 26, 32, 31, 33, 31, 
	30, 32, 31, 34, 31, 30, 32, 31, 
	35, 31, 30, 37, 36, 36, 0, 2, 
	38, 38, 0, 40, 41, 39, 2, 0, 
	42, 0, 43, 0, 44, 0, 45, 0, 
	46, 0, 47, 0, 48, 0, 49, 0, 
	50, 0, 51, 0, 52, 0, 53, 0, 
	54, 0, 55, 0, 56, 0, 58, 59, 
	57, 61, 62, 60, 0, 0, 0, 0, 
	63, 64, 65, 64, 64, 67, 66, 63, 
	2, 68, 7, 68, 0, 69, 0, 70, 
	0, 71, 0, 72, 0, 73, 0, 74, 
	0, 75, 0, 76, 0, 77, 0, 78, 
	0, 79, 0, 80, 0, 81, 0, 82, 
	0, 83, 0, 84, 0, 85, 0, 87, 
	86, 89, 88, 89, 90, 91, 92, 93, 
	91, 94, 95, 96, 97, 98, 99, 90, 
	88, 89, 100, 88, 89, 101, 88, 89, 
	102, 88, 89, 103, 88, 89, 104, 88, 
	89, 105, 88, 89, 106, 88, 89, 107, 
	88, 89, 108, 88, 89, 109, 88, 89, 
	110, 88, 89, 111, 88, 89, 112, 88, 
	89, 113, 88, 89, 114, 88, 116, 115, 
	117, 118, 119, 120, 121, 122, 123, 124, 
	125, 126, 127, 128, 129, 130, 115, 0, 
	131, 0, 132, 0, 133, 0, 134, 0, 
	135, 0, 136, 0, 137, 0, 138, 0, 
	140, 139, 142, 141, 142, 143, 144, 145, 
	146, 144, 147, 148, 149, 150, 151, 152, 
	153, 143, 141, 142, 154, 141, 142, 155, 
	141, 142, 156, 141, 142, 157, 141, 142, 
	158, 141, 142, 159, 141, 142, 160, 141, 
	142, 161, 141, 142, 162, 141, 142, 163, 
	141, 142, 164, 141, 142, 165, 141, 142, 
	166, 141, 142, 167, 141, 142, 168, 141, 
	142, 169, 141, 142, 170, 141, 142, 171, 
	141, 142, 172, 141, 142, 173, 141, 142, 
	174, 141, 142, 175, 141, 142, 176, 141, 
	142, 177, 141, 142, 178, 141, 142, 179, 
	141, 142, 180, 141, 142, 181, 141, 142, 
	182, 141, 142, 183, 141, 142, 184, 141, 
	142, 168, 141, 142, 185, 141, 142, 186, 
	141, 142, 187, 141, 142, 188, 141, 142, 
	189, 141, 142, 190, 141, 142, 184, 141, 
	142, 191, 141, 142, 192, 141, 142, 193, 
	141, 142, 194, 141, 142, 193, 141, 195, 
	142, 141, 196, 142, 141, 142, 193, 141, 
	142, 193, 141, 197, 142, 198, 141, 193, 
	142, 141, 142, 199, 141, 142, 200, 141, 
	142, 201, 141, 142, 202, 141, 142, 203, 
	141, 142, 204, 141, 142, 168, 205, 141, 
	142, 206, 141, 142, 184, 141, 207, 208, 
	0, 209, 0, 210, 0, 211, 0, 212, 
	0, 213, 0, 214, 0, 215, 0, 217, 
	216, 219, 218, 219, 220, 221, 222, 221, 
	223, 224, 225, 226, 220, 218, 219, 227, 
	218, 219, 228, 218, 219, 229, 218, 219, 
	230, 218, 219, 231, 218, 219, 232, 218, 
	219, 233, 218, 219, 234, 218, 219, 235, 
	218, 219, 236, 218, 219, 237, 218, 219, 
	238, 218, 219, 239, 218, 219, 240, 218, 
	219, 241, 218, 219, 242, 218, 219, 243, 
	218, 219, 244, 218, 219, 245, 218, 219, 
	246, 218, 219, 247, 218, 219, 248, 218, 
	219, 249, 218, 219, 250, 218, 219, 251, 
	218, 219, 252, 218, 219, 253, 218, 219, 
	254, 218, 219, 255, 218, 219, 256, 218, 
	219, 257, 218, 219, 258, 218, 219, 259, 
	218, 219, 260, 218, 219, 261, 218, 219, 
	262, 218, 219, 263, 218, 219, 256, 218, 
	219, 264, 265, 218, 219, 266, 218, 219, 
	267, 218, 219, 268, 218, 219, 269, 218, 
	219, 270, 218, 219, 256, 218, 219, 271, 
	218, 219, 272, 218, 219, 273, 218, 219, 
	274, 218, 219, 275, 218, 219, 276, 218, 
	219, 256, 218, 219, 277, 218, 219, 278, 
	218, 219, 279, 218, 219, 280, 218, 219, 
	281, 218, 219, 282, 218, 219, 283, 218, 
	219, 257, 284, 218, 219, 285, 218, 219, 
	256, 218, 286, 0, 287, 0, 288, 0, 
	289, 0, 290, 0, 291, 0, 292, 0, 
	293, 0, 295, 294, 297, 296, 297, 298, 
	299, 300, 299, 298, 296, 297, 301, 296, 
	297, 302, 296, 297, 303, 296, 297, 304, 
	296, 297, 305, 296, 297, 306, 296, 297, 
	307, 296, 297, 308, 296, 309, 0, 310, 
	0, 311, 0, 312, 0, 311, 0, 313, 
	0, 314, 0, 311, 0, 311, 0, 315, 
	316, 0, 311, 0, 317, 0, 318, 0, 
	319, 0, 320, 0, 321, 0, 322, 0, 
	323, 324, 0, 326, 325, 328, 327, 328, 
	329, 330, 331, 332, 330, 333, 334, 335, 
	336, 337, 338, 339, 340, 329, 327, 328, 
	341, 327, 328, 342, 327, 328, 343, 327, 
	328, 344, 327, 328, 345, 327, 328, 346, 
	327, 328, 347, 327, 328, 348, 327, 328, 
	349, 327, 328, 350, 327, 328, 351, 327, 
	328, 352, 327, 328, 353, 327, 328, 354, 
	327, 328, 355, 327, 328, 356, 327, 328, 
	357, 327, 328, 358, 327, 328, 359, 327, 
	328, 360, 327, 328, 361, 327, 328, 362, 
	327, 328, 363, 327, 328, 364, 327, 328, 
	365, 327, 328, 366, 327, 328, 367, 327, 
	328, 368, 327, 328, 369, 327, 328, 370, 
	327, 328, 371, 327, 328, 355, 327, 328, 
	372, 327, 328, 373, 327, 328, 374, 327, 
	328, 375, 327, 328, 376, 327, 328, 377, 
	327, 328, 371, 327, 328, 378, 327, 328, 
	379, 327, 328, 380, 327, 328, 381, 327, 
	328, 382, 327, 328, 383, 327, 328, 371, 
	327, 328, 384, 327, 328, 385, 327, 328, 
	386, 327, 328, 387, 327, 328, 386, 327, 
	388, 328, 327, 389, 328, 327, 328, 386, 
	327, 328, 386, 327, 390, 328, 391, 327, 
	386, 328, 327, 328, 392, 327, 328, 393, 
	327, 328, 394, 327, 328, 395, 327, 328, 
	396, 327, 328, 397, 327, 328, 355, 398, 
	327, 328, 399, 327, 328, 371, 327, 400, 
	0, 84, 0, 401, 402, 401, 0, 405, 
	404, 406, 407, 404, 403, 0, 409, 410, 
	408, 0, 409, 408, 405, 411, 409, 410, 
	411, 408, 405, 412, 413, 414, 415, 416, 
	417, 418, 419, 420, 421, 422, 423, 424, 
	425, 426, 412, 0, 89, 427, 88, 89, 
	428, 88, 89, 429, 88, 89, 430, 88, 
	89, 431, 88, 89, 432, 88, 89, 433, 
	88, 89, 114, 88, 89, 434, 88, 89, 
	435, 88, 89, 436, 88, 89, 437, 88, 
	89, 436, 88, 438, 89, 88, 439, 89, 
	88, 89, 436, 88, 89, 436, 88, 440, 
	89, 441, 88, 436, 89, 88, 89, 442, 
	88, 89, 443, 88, 89, 444, 88, 89, 
	445, 88, 89, 446, 88, 89, 433, 88, 
	447, 0, 1, 0, 448, 0
];

var _lexer_trans_targs = [
	0, 2, 2, 3, 13, 15, 29, 32, 
	35, 71, 141, 233, 236, 238, 241, 242, 
	322, 353, 4, 5, 6, 7, 6, 6, 
	7, 6, 8, 8, 8, 9, 8, 8, 
	8, 9, 10, 11, 12, 2, 12, 13, 
	2, 14, 16, 17, 18, 19, 20, 21, 
	22, 23, 24, 25, 26, 27, 28, 355, 
	30, 31, 2, 14, 31, 2, 14, 33, 
	34, 2, 33, 32, 34, 36, 37, 38, 
	39, 40, 41, 42, 43, 44, 45, 46, 
	47, 48, 49, 50, 51, 52, 53, 54, 
	53, 54, 54, 2, 55, 69, 328, 336, 
	339, 341, 344, 345, 56, 57, 58, 59, 
	60, 61, 62, 63, 64, 65, 66, 67, 
	68, 2, 70, 2, 2, 3, 13, 15, 
	29, 32, 35, 71, 141, 233, 236, 238, 
	241, 242, 322, 72, 73, 74, 75, 76, 
	77, 78, 79, 80, 81, 80, 81, 81, 
	2, 82, 96, 97, 114, 121, 124, 126, 
	129, 130, 83, 84, 85, 86, 87, 88, 
	89, 90, 91, 92, 93, 94, 95, 2, 
	70, 98, 99, 100, 101, 102, 103, 104, 
	105, 106, 107, 108, 109, 110, 111, 112, 
	113, 115, 116, 117, 118, 119, 120, 122, 
	123, 96, 125, 127, 128, 131, 132, 133, 
	134, 135, 136, 137, 138, 139, 140, 142, 
	214, 143, 144, 145, 146, 147, 148, 149, 
	150, 151, 150, 151, 151, 2, 152, 166, 
	183, 190, 204, 153, 154, 155, 156, 157, 
	158, 159, 160, 161, 162, 163, 164, 165, 
	2, 167, 168, 169, 170, 171, 172, 173, 
	174, 175, 176, 177, 178, 179, 180, 181, 
	182, 70, 184, 185, 186, 187, 188, 189, 
	191, 197, 192, 193, 194, 195, 196, 198, 
	199, 200, 201, 202, 203, 205, 206, 207, 
	208, 209, 210, 211, 212, 213, 215, 216, 
	217, 218, 219, 220, 221, 222, 223, 224, 
	223, 224, 224, 2, 225, 226, 227, 228, 
	229, 230, 231, 232, 70, 234, 235, 29, 
	237, 239, 240, 243, 244, 245, 246, 247, 
	248, 249, 250, 251, 320, 252, 253, 252, 
	253, 253, 2, 254, 268, 269, 286, 293, 
	300, 303, 305, 308, 309, 255, 256, 257, 
	258, 259, 260, 261, 262, 263, 264, 265, 
	266, 267, 2, 70, 270, 271, 272, 273, 
	274, 275, 276, 277, 278, 279, 280, 281, 
	282, 283, 284, 285, 287, 288, 289, 290, 
	291, 292, 294, 295, 296, 297, 298, 299, 
	301, 302, 268, 304, 306, 307, 310, 311, 
	312, 313, 314, 315, 316, 317, 318, 319, 
	321, 322, 323, 324, 326, 327, 325, 323, 
	324, 325, 323, 326, 327, 3, 13, 15, 
	29, 32, 35, 71, 141, 233, 236, 238, 
	241, 242, 322, 329, 330, 331, 332, 333, 
	334, 335, 337, 338, 69, 340, 342, 343, 
	346, 347, 348, 349, 350, 351, 352, 354, 
	0
];

var _lexer_trans_actions = [
	43, 0, 54, 3, 1, 0, 29, 1, 
	29, 29, 29, 29, 29, 29, 29, 29, 
	35, 0, 0, 0, 7, 139, 48, 0, 
	102, 9, 5, 45, 134, 45, 0, 33, 
	122, 33, 33, 0, 11, 106, 0, 0, 
	114, 25, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 57, 149, 126, 0, 110, 23, 0, 
	27, 118, 27, 51, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 57, 144, 
	0, 54, 0, 78, 33, 84, 84, 84, 
	84, 84, 84, 84, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 19, 19, 31, 130, 60, 57, 31, 
	63, 57, 63, 63, 63, 63, 63, 63, 
	63, 63, 66, 0, 0, 0, 0, 0, 
	0, 0, 0, 57, 144, 0, 54, 0, 
	72, 33, 84, 84, 84, 84, 84, 84, 
	84, 84, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 15, 
	15, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	57, 144, 0, 54, 0, 69, 33, 84, 
	84, 84, 84, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	13, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 13, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 57, 144, 
	0, 54, 0, 81, 84, 0, 0, 0, 
	0, 0, 0, 0, 21, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 57, 144, 0, 
	54, 0, 75, 33, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 17, 17, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 37, 37, 54, 37, 87, 
	0, 0, 39, 0, 0, 93, 90, 41, 
	96, 90, 96, 96, 96, 96, 96, 96, 
	96, 96, 99, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0
];

var _lexer_eof_actions = [
	0, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43
];

var lexer_start = 1;
var lexer_first_final = 355;
var lexer_error = 0;

var lexer_en_main = 1;


/* line 129 "ragel/i18n/no.js.rl" */

/* line 130 "ragel/i18n/no.js.rl" */

/* line 131 "ragel/i18n/no.js.rl" */

/* line 132 "ragel/i18n/no.js.rl" */

var Lexer = function(listener) {
  // Check that listener has the required functions
  var events = ['comment', 'tag', 'feature', 'background', 'scenario', 'scenario_outline', 'examples', 'step', 'doc_string', 'row', 'eof'];
  for(var i=0, len=events.length; i<len; i++) {
    var event = events[i];
    if(typeof listener[event] != 'function') {
      throw new Error("Error. No " + event + " function exists on " + JSON.stringify(listener));
    }
  }
  this.listener = listener;
};

Lexer.prototype.scan = function(data) {
  var ending = "\n%_FEATURE_END_%";
  if(typeof data == 'string') {
    data = this.stringToBytes(data + ending);
  } else if(typeof Buffer != 'undefined' && Buffer.isBuffer(data)) {
    // Node.js
    var buf = new Buffer(data.length + ending.length);
    data.copy(buf, 0, 0);
    new Buffer(ending).copy(buf, data.length, 0);
    data = buf;
  }
  var eof = pe = data.length;
  var p = 0;

  this.line_number = 1;
  this.last_newline = 0;
  var signedCharValue=function(v){return v > 127 ? v-256 : v; };

  
/* line 685 "js/lib/gherkin/lexer/no.js" */
{
	  this.cs = lexer_start;
} /* JSCodeGen::writeInit */

/* line 164 "ragel/i18n/no.js.rl" */
  
/* line 692 "js/lib/gherkin/lexer/no.js" */
{
	var _klen, _trans, _keys, _ps, _widec, _acts, _nacts;
	var _goto_level, _resume, _eof_trans, _again, _test_eof;
	var _out;
	_klen = _trans = _keys = _acts = _nacts = null;
	_goto_level = 0;
	_resume = 10;
	_eof_trans = 15;
	_again = 20;
	_test_eof = 30;
	_out = 40;
	while (true) {
	_trigger_goto = false;
	if (_goto_level <= 0) {
	if (p == pe) {
		_goto_level = _test_eof;
		continue;
	}
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	}
	if (_goto_level <= _resume) {
	_keys = _lexer_key_offsets[ this.cs];
	_trans = _lexer_index_offsets[ this.cs];
	_klen = _lexer_single_lengths[ this.cs];
	_break_match = false;
	
	do {
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + _klen - 1;

	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + ( (_upper - _lower) >> 1 );

	        if (( signedCharValue(data[p])) < _lexer_trans_keys[_mid]) {
	           _upper = _mid - 1;
	        } else if (( signedCharValue(data[p])) > _lexer_trans_keys[_mid]) {
	           _lower = _mid + 1;
	        } else {
	           _trans += (_mid - _keys);
	           _break_match = true;
	           break;
	        };
	     } /* while */
	     if (_break_match) { break; }
	     _keys += _klen;
	     _trans += _klen;
	  }
	  _klen = _lexer_range_lengths[ this.cs];
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + (_klen << 1) - 2;
	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + (((_upper-_lower) >> 1) & ~1);
	        if (( signedCharValue(data[p])) < _lexer_trans_keys[_mid]) {
	          _upper = _mid - 2;
	         } else if (( signedCharValue(data[p])) > _lexer_trans_keys[_mid+1]) {
	          _lower = _mid + 2;
	        } else {
	          _trans += ((_mid - _keys) >> 1);
	          _break_match = true;
	          break;
	        }
	     } /* while */
	     if (_break_match) { break; }
	     _trans += _klen
	  }
	} while (false);
	_trans = _lexer_indicies[_trans];
	 this.cs = _lexer_trans_targs[_trans];
	if (_lexer_trans_actions[_trans] != 0) {
		_acts = _lexer_trans_actions[_trans];
		_nacts = _lexer_actions[_acts];
		_acts += 1;
		while (_nacts > 0) {
			_nacts -= 1;
			_acts += 1;
			switch (_lexer_actions[_acts - 1]) {
case 0:
/* line 6 "ragel/i18n/no.js.rl" */

    this.content_start = p;
    this.current_line = this.line_number;
    this.start_col = p - this.last_newline - (this.keyword+':').length;
  		break;
case 1:
/* line 12 "ragel/i18n/no.js.rl" */

    this.current_line = this.line_number;
    this.start_col = p - this.last_newline;
  		break;
case 2:
/* line 17 "ragel/i18n/no.js.rl" */

    this.content_start = p;
  		break;
case 3:
/* line 21 "ragel/i18n/no.js.rl" */

    this.docstring_content_type_start = p;
  		break;
case 4:
/* line 25 "ragel/i18n/no.js.rl" */

    this.docstring_content_type_end = p;
  		break;
case 5:
/* line 29 "ragel/i18n/no.js.rl" */

    var con = this.unindent(
      this.start_col, 
      this.bytesToString(data.slice(this.content_start, this.next_keyword_start-1)).replace(/(\r?\n)?([\t ])*$/, '').replace(/\\\"\\\"\\\"/mg, '"""')
    );
    var con_type = this.bytesToString(data.slice(this.docstring_content_type_start, this.docstring_content_type_end)).trim();
    this.listener.doc_string(con_type, con, this.current_line); 
  		break;
case 6:
/* line 38 "ragel/i18n/no.js.rl" */

    p = this.store_keyword_content('feature', data, p, eof);
  		break;
case 7:
/* line 42 "ragel/i18n/no.js.rl" */

    p = this.store_keyword_content('background', data, p, eof);
  		break;
case 8:
/* line 46 "ragel/i18n/no.js.rl" */

    p = this.store_keyword_content('scenario', data, p, eof);
  		break;
case 9:
/* line 50 "ragel/i18n/no.js.rl" */

    p = this.store_keyword_content('scenario_outline', data, p, eof);
  		break;
case 10:
/* line 54 "ragel/i18n/no.js.rl" */

    p = this.store_keyword_content('examples', data, p, eof);
  		break;
case 11:
/* line 58 "ragel/i18n/no.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.step(this.keyword, con, this.current_line);
  		break;
case 12:
/* line 63 "ragel/i18n/no.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.comment(con, this.line_number);
    this.keyword_start = null;
  		break;
case 13:
/* line 69 "ragel/i18n/no.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.tag(con, this.line_number);
    this.keyword_start = null;
  		break;
case 14:
/* line 75 "ragel/i18n/no.js.rl" */

    this.line_number++;
  		break;
case 15:
/* line 79 "ragel/i18n/no.js.rl" */

    this.last_newline = p + 1;
  		break;
case 16:
/* line 83 "ragel/i18n/no.js.rl" */

    this.keyword_start = this.keyword_start || p;
  		break;
case 17:
/* line 87 "ragel/i18n/no.js.rl" */

    this.keyword = this.bytesToString(data.slice(this.keyword_start, p)).replace(/:$/, '');
    this.keyword_start = null;
  		break;
case 18:
/* line 92 "ragel/i18n/no.js.rl" */

    this.next_keyword_start = p;
  		break;
case 19:
/* line 96 "ragel/i18n/no.js.rl" */

    p = p - 1;
    current_row = [];
    this.current_line = this.line_number;
  		break;
case 20:
/* line 102 "ragel/i18n/no.js.rl" */

    this.content_start = p;
  		break;
case 21:
/* line 106 "ragel/i18n/no.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    current_row.push(con.replace(/\\\|/, "|").replace(/\\n/, "\n").replace(/\\\\/, "\\"));
  		break;
case 22:
/* line 111 "ragel/i18n/no.js.rl" */

    this.listener.row(current_row, this.current_line);
  		break;
case 23:
/* line 115 "ragel/i18n/no.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw new Error("Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.");
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 919 "js/lib/gherkin/lexer/no.js" */
			} /* action switch */
		}
	}
	if (_trigger_goto) {
		continue;
	}
	}
	if (_goto_level <= _again) {
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	p += 1;
	if (p != pe) {
		_goto_level = _resume;
		continue;
	}
	}
	if (_goto_level <= _test_eof) {
	if (p == eof) {
	__acts = _lexer_eof_actions[ this.cs];
	__nacts =  _lexer_actions[__acts];
	__acts += 1;
	while (__nacts > 0) {
		__nacts -= 1;
		__acts += 1;
		switch (_lexer_actions[__acts - 1]) {
case 23:
/* line 115 "ragel/i18n/no.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw new Error("Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.");
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 958 "js/lib/gherkin/lexer/no.js" */
		} /* eof action switch */
	}
	if (_trigger_goto) {
		continue;
	}
}
	}
	if (_goto_level <= _out) {
		break;
	}
	}
	}

/* line 165 "ragel/i18n/no.js.rl" */
};


/*
 * Decode utf-8 byte sequence to string.
 */
var decodeUtf8 = function(bytes) {
  var result = "";
  var i = 0;
  var wc;
  var c;

  while (i < bytes.length) {
    /* parse as UTF-8 lead byte */
    wc = bytes[i++];
    if (wc < 0x80) {
      count = 0;
    } else if (wc < 0xC2 || wc >= 0xF8) {
      throw new Error("input is not a valid UTF-8 lead octet");
    } else if (wc < 0xE0) {
      count = 1;
      wc = (wc & 0x1F) << 6;
    } else if (wc < 0xF0) {
      count = 2;
      wc = (wc & 0x0F) << 12;
    } else /* wc < 0xF8 */ {
      count = 3;
      wc = (wc & 0x07) << 18;
    }

    /* parse trail bytes, if any */
    while (count) {
      if (!(i < bytes.length)) {
        throw new Error("short read");
      }
      if ((c = bytes[i++] ^ 0x80) > 0x3F) {
        throw new Error("input is not a valid UTF-8 trail octet");
      }
      wc |= c << (6 * --count);
      if (wc < (1 << (5 * count + 6))) {
        throw new Error("invalid non-minimal encoded input");
      }
    }

    /* handle conversion to UTF-16 if needed */
    if (wc > 0xFFFF) {
      wc -= 0x10000;
      result += String.fromCharCode(0xD800 + (wc >> 10));
      wc = 0xDC00 + (wc & 0x3FF);
    }
    result += String.fromCharCode(wc);
  }

  return result;
};

/*
 * Encode string to an array of bytes using utf8 encoding.
 *
 * Javascript internally stores character data as utf16 (like java).
 * String.charCodeAt() does *not* produce unicode points, but simply
 * reflects this internal representation. Thus, it is necessary
 * to first decode the utf-16 representation before encoding to
 * utf-8.
 */
var encodeUtf8 = function(string) {
  var bytes = [];
  var i = 0;
  var j = 0;
  var wc;

  while (i < string.length) {
    wc = string.charCodeAt(i++);
    if (wc >= 0xD800 && wc <= 0xDBFF && i < string.length && string.charCodeAt(i) >= 0xDC00 && string.charCodeAt(i) <= 0xDFFF) {
      /* decode UTF-16 */
      wc = 0x10000 + ((wc & 0x3FF) << 10) + (string.charCodeAt(i++) & 0x3FF);
    }

    /* emit lead byte */
    if (wc < 0x80) {
      bytes[j++] = wc;
      count = 0;
    } else if (wc < 0x800) {
      bytes[j++] = 0xC0 | (wc >> 6);
      count = 1;
    } else if (wc < 0x10000) {
      bytes[j++] = 0xE0 | (wc >> 12);
      count = 2;
    } else {
      /* SMP: 21-bit Unicode */
      bytes[j++] = 0xF0 | (wc >> 18);
      count = 3;
    }

    /* emit trail bytes, if any */
    while (count) {
      bytes[j++] = 0x80 | ((wc >> (6 * --count)) & 0x3F);
    }
  }

  return bytes;

};

Lexer.prototype.bytesToString = function(bytes) {
  if(typeof bytes.write == 'function') {
    // Node.js
    return bytes.toString('utf-8');
  }
  return decodeUtf8(bytes);
};

Lexer.prototype.stringToBytes = function(string) {
  return encodeUtf8(string);
};

Lexer.prototype.unindent = function(startcol, text) {
  startcol = startcol || 0;
  return text.replace(new RegExp('^[\t ]{0,' + startcol + '}', 'gm'), ''); 
};

Lexer.prototype.store_keyword_content = function(event, data, p, eof) {
  var end_point = (!this.next_keyword_start || (p == eof)) ? p : this.next_keyword_start;
  var content = this.unindent(this.start_col + 2, this.bytesToString(data.slice(this.content_start, end_point))).replace(/\s+$/,"");
  var content_lines = content.split("\n")
  var name = content_lines.shift() || "";
  name = name.trim();
  var description = content_lines.join("\n");
  this.listener[event](this.keyword, name, description, this.current_line);
  var nks = this.next_keyword_start;
  this.next_keyword_start = null;
  return nks ? nks - 1 : p;
};

Lexer.prototype.current_line_content = function(data, p) {
  var rest = Array.prototype.slice.call(data,this.last_newline, -1);
  var end = rest.indexOf(10) || -1;
  return this.bytesToString(rest.slice(0, end)).trim();
};

// Node.js export
if(typeof module !== 'undefined') {
  module.exports = Lexer;
}
// Require.js export
if (typeof define !== 'undefined') {
  if(define.amd) {
    define('gherkin/lexer/no', [], function() {
      return Lexer;
    });
  } else {
    define('gherkin/lexer/no', function(require, exports, module) {
      exports.Lexer = Lexer;
    });
  }
}

})();

}).call(this,require("buffer").Buffer)

},{"buffer":69}],223:[function(require,module,exports){
(function (Buffer){

/* line 1 "ragel/i18n/pa.js.rl" */
;(function() {


/* line 126 "ragel/i18n/pa.js.rl" */



/* line 11 "js/lib/gherkin/lexer/pa.js" */
var _lexer_actions = [
	0, 1, 0, 1, 1, 1, 2, 1, 
	3, 1, 4, 1, 5, 1, 6, 1, 
	7, 1, 8, 1, 9, 1, 10, 1, 
	11, 1, 12, 1, 13, 1, 16, 1, 
	17, 1, 18, 1, 19, 1, 20, 1, 
	21, 1, 22, 1, 23, 2, 2, 18, 
	2, 3, 4, 2, 13, 0, 2, 14, 
	15, 2, 17, 0, 2, 17, 1, 2, 
	17, 16, 2, 17, 19, 2, 18, 6, 
	2, 18, 7, 2, 18, 8, 2, 18, 
	9, 2, 18, 10, 2, 18, 16, 2, 
	20, 21, 2, 22, 0, 2, 22, 1, 
	2, 22, 16, 2, 22, 19, 3, 4, 
	14, 15, 3, 5, 14, 15, 3, 11, 
	14, 15, 3, 12, 14, 15, 3, 13, 
	14, 15, 3, 14, 15, 18, 3, 17, 
	0, 11, 3, 17, 14, 15, 4, 2, 
	14, 15, 18, 4, 3, 4, 14, 15, 
	4, 17, 0, 14, 15, 5, 17, 0, 
	11, 14, 15
];

var _lexer_key_offsets = [
	0, 0, 12, 13, 21, 22, 23, 24, 
	25, 26, 27, 28, 30, 32, 43, 44, 
	45, 47, 49, 54, 59, 64, 69, 73, 
	77, 79, 80, 81, 82, 83, 84, 85, 
	86, 87, 88, 89, 90, 91, 92, 93, 
	94, 99, 106, 111, 115, 121, 124, 126, 
	132, 143, 144, 145, 146, 147, 148, 149, 
	150, 151, 152, 153, 154, 155, 156, 157, 
	158, 159, 160, 161, 162, 163, 164, 165, 
	166, 167, 174, 176, 180, 182, 184, 186, 
	188, 190, 192, 194, 196, 198, 200, 202, 
	204, 206, 208, 210, 212, 223, 225, 227, 
	229, 231, 233, 235, 237, 239, 241, 243, 
	245, 247, 249, 251, 253, 255, 257, 259, 
	261, 263, 265, 267, 269, 271, 273, 275, 
	277, 279, 281, 283, 285, 287, 289, 291, 
	293, 295, 297, 299, 301, 303, 305, 307, 
	309, 310, 311, 312, 313, 314, 315, 316, 
	317, 318, 319, 320, 321, 322, 323, 324, 
	325, 326, 327, 335, 337, 343, 345, 347, 
	349, 351, 353, 355, 357, 359, 361, 363, 
	365, 367, 369, 371, 373, 375, 377, 379, 
	381, 383, 385, 387, 389, 391, 393, 395, 
	397, 399, 401, 403, 405, 407, 409, 411, 
	413, 415, 417, 419, 421, 423, 425, 427, 
	429, 431, 433, 435, 437, 439, 441, 443, 
	445, 447, 449, 451, 453, 455, 457, 459, 
	461, 463, 465, 468, 470, 472, 474, 476, 
	478, 480, 482, 484, 486, 489, 491, 493, 
	496, 498, 500, 502, 504, 506, 508, 510, 
	512, 514, 516, 518, 520, 522, 524, 526, 
	528, 530, 532, 534, 536, 538, 540, 542, 
	544, 546, 548, 550, 552, 554, 556, 558, 
	560, 562, 564, 566, 568, 570, 572, 574, 
	576, 578, 580, 582, 584, 586, 588, 590, 
	592, 594, 596, 598, 600, 602, 604, 606, 
	608, 610, 612, 614, 616, 618, 620, 622, 
	624, 626, 628, 630, 632, 634, 636, 638, 
	640, 641, 643, 645, 646, 647, 648, 649, 
	650, 651, 652, 653, 654, 655, 656, 657, 
	658, 659, 660, 661, 662, 663, 664, 665, 
	666, 667, 668, 669, 670, 671, 672, 673, 
	674, 675, 676, 677, 678, 679, 680, 681, 
	682, 683, 684, 685, 686, 687, 688, 689, 
	690, 691, 692, 693, 694, 695, 696, 697, 
	698, 699, 700, 701, 704, 705, 706, 707, 
	708, 709, 710, 711, 712, 713, 715, 716, 
	717, 719, 720, 721, 722, 723, 724, 725, 
	726, 727, 728, 729, 730, 731, 732, 733, 
	734, 743, 745, 753, 755, 757, 759, 761, 
	763, 765, 767, 769, 771, 773, 775, 777, 
	779, 781, 783, 785, 787, 789, 791, 793, 
	795, 797, 799, 801, 804, 807, 809, 811, 
	813, 815, 817, 819, 821, 823, 825, 827, 
	829, 831, 833, 835, 837, 839, 841, 843, 
	845, 847, 849, 851, 853, 855, 857, 859, 
	861, 863, 865, 867, 869, 871, 873, 875, 
	877, 879, 881, 883, 885, 887, 889, 891, 
	893, 895, 897, 899, 901, 903, 905, 907, 
	909, 911, 913, 915, 917, 919, 922, 924, 
	926, 928, 930, 932, 934, 936, 938, 940, 
	942, 944, 946, 948, 950, 952, 954, 956, 
	958, 960, 962, 964, 966, 968, 970, 972, 
	974, 976, 978, 980, 982, 984, 986, 988, 
	990, 992, 994, 996, 998, 1000, 1002, 1004, 
	1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 
	1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 
	1021, 1022, 1031, 1033, 1041, 1043, 1045, 1047, 
	1049, 1051, 1053, 1055, 1057, 1059, 1061, 1063, 
	1065, 1067, 1069, 1071, 1073, 1075, 1077, 1079, 
	1081, 1083, 1085, 1087, 1089, 1092, 1095, 1097, 
	1099, 1101, 1103, 1105, 1107, 1109, 1111, 1113, 
	1115, 1117, 1119, 1121, 1123, 1125, 1127, 1129, 
	1131, 1133, 1135, 1137, 1139, 1141, 1143, 1145, 
	1147, 1149, 1151, 1153, 1155, 1157, 1159, 1161, 
	1163, 1165, 1167, 1169, 1171, 1173, 1175, 1177, 
	1179, 1181, 1183, 1185, 1187, 1189, 1191, 1193, 
	1195, 1197, 1199, 1201, 1203, 1205, 1207, 1211, 
	1213, 1215, 1217, 1219, 1221, 1223, 1225, 1227, 
	1229, 1232, 1234, 1236, 1239, 1241, 1243, 1245, 
	1247, 1249, 1251, 1253, 1255, 1257, 1259, 1261, 
	1263, 1265, 1267, 1269, 1271, 1273, 1275, 1277, 
	1279, 1281, 1283, 1285, 1287, 1289, 1291, 1293, 
	1295, 1297, 1299, 1301, 1303, 1305, 1307, 1309, 
	1311, 1313, 1315, 1317, 1319, 1321, 1323, 1325, 
	1327, 1329, 1331, 1333, 1335, 1337, 1339, 1341, 
	1343, 1345, 1347, 1349, 1351, 1353, 1355, 1357, 
	1359, 1361, 1363, 1365, 1367, 1369, 1371, 1373, 
	1375, 1377, 1379, 1381, 1383, 1384, 1385, 1386, 
	1387, 1388, 1389, 1390, 1391, 1392, 1393, 1394, 
	1395, 1396, 1397, 1398, 1407, 1409, 1417, 1419, 
	1421, 1423, 1425, 1427, 1429, 1431, 1433, 1435, 
	1437, 1439, 1441, 1443, 1445, 1447, 1449, 1451, 
	1453, 1455, 1457, 1459, 1461, 1463, 1465, 1468, 
	1471, 1473, 1475, 1477, 1479, 1481, 1483, 1485, 
	1487, 1489, 1491, 1493, 1495, 1497, 1499, 1501, 
	1503, 1505, 1507, 1509, 1511, 1513, 1515, 1517, 
	1519, 1521, 1523, 1525, 1527, 1529, 1531, 1533, 
	1535, 1537, 1539, 1541, 1543, 1545, 1547, 1549, 
	1551, 1553, 1555, 1557, 1559, 1561, 1563, 1565, 
	1567, 1569, 1571, 1573, 1575, 1577, 1579, 1581, 
	1583, 1586, 1588, 1590, 1592, 1594, 1596, 1598, 
	1600, 1602, 1604, 1607, 1609, 1611, 1614, 1616, 
	1618, 1620, 1622, 1624, 1626, 1628, 1630, 1632, 
	1634, 1636, 1638, 1640, 1642, 1644, 1646, 1648, 
	1650, 1652, 1654, 1656, 1658, 1660, 1662, 1664, 
	1666, 1668, 1670, 1672, 1674, 1676, 1678, 1680, 
	1682, 1684, 1686, 1688, 1690, 1692, 1694, 1696, 
	1698, 1700, 1702, 1704, 1706, 1708, 1710, 1712, 
	1714, 1716, 1718, 1720, 1722, 1724, 1726, 1728, 
	1730, 1732, 1734, 1735, 1736, 1737, 1738, 1739, 
	1740, 1741, 1742, 1743, 1744, 1745, 1746, 1747, 
	1748, 1749, 1750, 1751, 1752, 1753, 1754, 1755, 
	1756, 1757
];

var _lexer_trans_keys = [
	-32, 10, 32, 34, 35, 37, 42, 64, 
	124, 239, 9, 13, -88, -123, -119, -106, 
	-100, -92, -88, -86, -82, -32, -88, -92, 
	-32, -87, -121, 32, 10, 13, 10, 13, 
	-32, 10, 32, 34, 35, 37, 42, 64, 
	124, 9, 13, 34, 34, 10, 13, 10, 
	13, 10, 32, 34, 9, 13, 10, 32, 
	34, 9, 13, 10, 32, 34, 9, 13, 
	10, 32, 34, 9, 13, 10, 32, 9, 
	13, 10, 32, 9, 13, 10, 13, 10, 
	95, 70, 69, 65, 84, 85, 82, 69, 
	95, 69, 78, 68, 95, 37, 13, 32, 
	64, 9, 10, 9, 10, 13, 32, 64, 
	11, 12, 10, 32, 64, 9, 13, 32, 
	124, 9, 13, 10, 32, 92, 124, 9, 
	13, 10, 92, 124, 10, 92, 10, 32, 
	92, 124, 9, 13, -32, 10, 32, 34, 
	35, 37, 42, 64, 124, 9, 13, -32, 
	-88, -90, -32, -88, -66, -32, -88, -71, 
	-32, -88, -80, -32, -88, -88, -32, -88, 
	-66, -32, -88, -126, 58, 10, 10, -32, 
	10, 32, 35, 124, 9, 13, -88, 10, 
	-106, -88, -82, 10, -32, 10, -88, 10, 
	-66, 10, -32, 10, -88, 10, -72, 10, 
	-32, 10, -87, 10, -128, 10, -32, 10, 
	-88, 10, -123, 10, -32, 10, -88, 10, 
	-92, 10, 10, 58, -32, 10, 32, 34, 
	35, 37, 42, 64, 124, 9, 13, -32, 
	10, -88, 10, -107, 10, -32, 10, -88, 
	10, -74, 10, 10, 32, -32, 10, -88, 
	10, -88, 10, -32, 10, -87, 10, -127, 
	10, -32, 10, -88, 10, -71, 10, -32, 
	10, -88, 10, -66, 10, -32, 10, -88, 
	10, -80, 10, -32, 10, -87, 10, -127, 
	10, -32, 10, -88, 10, -71, 10, -32, 
	10, -88, 10, -66, 10, -32, 10, -88, 
	10, -126, 10, -32, 10, -88, 10, -90, 
	10, -32, 10, -88, 10, -80, 10, -32, 
	10, -88, 10, -66, 10, -32, -88, -66, 
	-32, -88, -72, -32, -87, -128, -32, -88, 
	-123, -32, -88, -92, 58, 10, 10, -32, 
	10, 32, 35, 37, 64, 9, 13, -88, 
	10, -119, -106, -88, -86, -82, 10, -32, 
	10, -88, 10, -90, 10, -32, 10, -88, 
	10, -66, 10, -32, 10, -88, 10, -71, 
	10, -32, 10, -88, 10, -80, 10, -32, 
	10, -88, 10, -88, 10, -32, 10, -88, 
	10, -66, 10, -32, 10, -88, 10, -126, 
	10, 10, 58, -32, 10, -88, 10, -66, 
	10, -32, 10, -88, 10, -72, 10, -32, 
	10, -87, 10, -128, 10, -32, 10, -88, 
	10, -123, 10, -32, 10, -88, 10, -92, 
	10, -32, 10, -88, 10, -107, 10, -32, 
	10, -88, 10, -74, 10, 10, 32, -32, 
	10, -88, 10, -88, 10, -32, 10, -87, 
	10, -127, 10, -32, 10, -88, 10, -71, 
	10, -32, 10, -88, 10, -66, 10, -32, 
	10, -88, 10, -80, 10, -32, 10, -88, 
	10, -97, -65, 10, -32, 10, -88, 10, 
	-107, 10, -32, 10, -88, 10, -91, 10, 
	-32, 10, -88, 10, -66, 10, 10, 32, 
	58, -32, 10, -88, 10, -94, -80, 10, 
	-32, 10, -88, 10, -66, 10, -32, 10, 
	-88, 10, -126, 10, -32, 10, -88, 10, 
	-102, 10, -32, 10, -88, 10, -66, 10, 
	-32, 10, -87, 10, -126, 10, -32, 10, 
	-88, 10, -86, 10, 10, 32, -32, 10, 
	-88, 10, -80, 10, -32, 10, -87, 10, 
	-121, 10, -32, 10, -88, 10, -106, 10, 
	-32, 10, -88, 10, -101, 10, -32, 10, 
	-87, 10, -117, 10, -32, 10, -88, 10, 
	-107, 10, -32, 10, -87, 10, -100, 10, 
	-32, 10, -87, 10, -127, 10, -32, 10, 
	-88, 10, -71, 10, -32, 10, -88, 10, 
	-66, 10, -32, 10, -88, 10, -126, 10, 
	-32, 10, -88, 10, -90, 10, -32, 10, 
	-88, 10, -80, 10, 10, 95, 10, 70, 
	10, 69, 10, 65, 10, 84, 10, 85, 
	10, 82, 10, 69, 10, 95, 10, 69, 
	10, 78, 10, 68, 10, 95, 10, 37, 
	-32, -88, -87, -90, -65, -32, -87, -117, 
	-32, -88, -126, -32, -88, -75, -32, -87, 
	-121, -32, -88, -126, 32, -32, -88, -107, 
	-32, -88, -65, -121, -32, -88, -107, -32, 
	-88, -80, -32, -88, -90, -32, -88, -107, 
	-32, -88, -74, 32, -32, -88, -88, -32, 
	-87, -127, -32, -88, -71, -32, -88, -66, 
	-32, -88, -80, -32, -88, -97, -80, -65, 
	-32, -88, -107, -32, -88, -91, -32, -88, 
	-66, 32, 58, -32, -88, -94, -80, -32, 
	-88, -66, -32, -88, -126, -32, -88, -102, 
	-32, -88, -66, 58, 10, 10, -32, 10, 
	32, 35, 37, 42, 64, 9, 13, -88, 
	10, -123, -106, -100, -92, -88, -86, -82, 
	10, -32, 10, -88, 10, -92, 10, -32, 
	10, -87, 10, -121, 10, 10, 32, -32, 
	10, -88, 10, -66, 10, -32, 10, -88, 
	10, -72, 10, -32, 10, -87, 10, -128, 
	10, -32, 10, -88, 10, -123, 10, -32, 
	10, -88, 10, -92, 10, 10, 58, -32, 
	10, -88, -87, 10, -90, -65, 10, -32, 
	10, -87, 10, -117, 10, -32, 10, -88, 
	10, -126, 10, -32, 10, -88, 10, -75, 
	10, -32, 10, -87, 10, -121, 10, -32, 
	10, -88, 10, -126, 10, 10, 32, -32, 
	10, -88, 10, -107, 10, -32, 10, -88, 
	10, -65, 10, -121, 10, -32, 10, -88, 
	10, -107, 10, -32, 10, -88, 10, -80, 
	10, -32, 10, -88, 10, -90, 10, -32, 
	10, -88, 10, -107, 10, -32, 10, -88, 
	10, -74, 10, 10, 32, -32, 10, -88, 
	10, -88, 10, -32, 10, -87, 10, -127, 
	10, -32, 10, -88, 10, -71, 10, -32, 
	10, -88, 10, -66, 10, -32, 10, -88, 
	10, -80, 10, -32, 10, -88, 10, -97, 
	-80, 10, -32, 10, -88, 10, -107, 10, 
	-32, 10, -88, 10, -91, 10, -32, 10, 
	-88, 10, -66, 10, -32, 10, -87, 10, 
	-127, 10, -32, 10, -88, 10, -71, 10, 
	-32, 10, -88, 10, -66, 10, -32, 10, 
	-88, 10, -126, 10, -32, 10, -88, 10, 
	-90, 10, -32, 10, -88, 10, -80, 10, 
	10, 95, 10, 70, 10, 69, 10, 65, 
	10, 84, 10, 85, 10, 82, 10, 69, 
	10, 95, 10, 69, 10, 78, 10, 68, 
	10, 95, 10, 37, -32, -87, -126, -32, 
	-88, -86, 32, -32, -88, -80, -32, -87, 
	-121, -32, -88, -106, 10, 10, -32, 10, 
	32, 35, 37, 42, 64, 9, 13, -88, 
	10, -123, -106, -100, -92, -88, -86, -82, 
	10, -32, 10, -88, 10, -92, 10, -32, 
	10, -87, 10, -121, 10, 10, 32, -32, 
	10, -88, 10, -66, 10, -32, 10, -88, 
	10, -72, 10, -32, 10, -87, 10, -128, 
	10, -32, 10, -88, 10, -123, 10, -32, 
	10, -88, 10, -92, 10, 10, 58, -32, 
	10, -88, -87, 10, -90, -65, 10, -32, 
	10, -87, 10, -117, 10, -32, 10, -88, 
	10, -126, 10, -32, 10, -88, 10, -75, 
	10, -32, 10, -87, 10, -121, 10, -32, 
	10, -88, 10, -126, 10, 10, 32, -32, 
	10, -88, 10, -107, 10, -32, 10, -88, 
	10, -65, 10, -121, 10, -32, 10, -88, 
	10, -107, 10, -32, 10, -88, 10, -80, 
	10, -32, 10, -88, 10, -90, 10, -32, 
	10, -88, 10, -107, 10, -32, 10, -88, 
	10, -74, 10, 10, 32, -32, 10, -88, 
	10, -88, 10, -32, 10, -87, 10, -127, 
	10, -32, 10, -88, 10, -71, 10, -32, 
	10, -88, 10, -66, 10, -32, 10, -88, 
	10, -80, 10, -32, 10, -88, 10, -97, 
	-80, -65, 10, -32, 10, -88, 10, -107, 
	10, -32, 10, -88, 10, -91, 10, -32, 
	10, -88, 10, -66, 10, 10, 32, 58, 
	-32, 10, -88, 10, -94, -80, 10, -32, 
	10, -88, 10, -66, 10, -32, 10, -88, 
	10, -126, 10, -32, 10, -88, 10, -102, 
	10, -32, 10, -88, 10, -66, 10, -32, 
	10, -87, 10, -126, 10, -32, 10, -88, 
	10, -86, 10, 10, 32, -32, 10, -88, 
	10, -80, 10, -32, 10, -87, 10, -121, 
	10, -32, 10, -88, 10, -106, 10, -32, 
	10, -88, 10, -101, 10, -32, 10, -87, 
	10, -117, 10, -32, 10, -88, 10, -107, 
	10, -32, 10, -87, 10, -100, 10, -32, 
	10, -87, 10, -127, 10, -32, 10, -88, 
	10, -71, 10, -32, 10, -88, 10, -66, 
	10, -32, 10, -88, 10, -126, 10, -32, 
	10, -88, 10, -90, 10, -32, 10, -88, 
	10, -80, 10, 10, 95, 10, 70, 10, 
	69, 10, 65, 10, 84, 10, 85, 10, 
	82, 10, 69, 10, 95, 10, 69, 10, 
	78, 10, 68, 10, 95, 10, 37, -32, 
	-88, -101, -32, -87, -117, -32, -88, -107, 
	-32, -87, -100, 58, 10, 10, -32, 10, 
	32, 35, 37, 42, 64, 9, 13, -88, 
	10, -123, -106, -100, -92, -88, -86, -82, 
	10, -32, 10, -88, 10, -92, 10, -32, 
	10, -87, 10, -121, 10, 10, 32, -32, 
	10, -88, 10, -66, 10, -32, 10, -88, 
	10, -72, 10, -32, 10, -87, 10, -128, 
	10, -32, 10, -88, 10, -123, 10, -32, 
	10, -88, 10, -92, 10, 10, 58, -32, 
	10, -88, -87, 10, -90, -65, 10, -32, 
	10, -87, 10, -117, 10, -32, 10, -88, 
	10, -126, 10, -32, 10, -88, 10, -75, 
	10, -32, 10, -87, 10, -121, 10, -32, 
	10, -88, 10, -126, 10, 10, 32, -32, 
	10, -88, 10, -107, 10, -32, 10, -88, 
	10, -65, 10, -121, 10, -32, 10, -88, 
	10, -107, 10, -32, 10, -88, 10, -80, 
	10, -32, 10, -88, 10, -90, 10, -32, 
	10, -88, 10, -107, 10, -32, 10, -88, 
	10, -74, 10, 10, 32, -32, 10, -88, 
	10, -88, 10, -32, 10, -87, 10, -127, 
	10, -32, 10, -88, 10, -71, 10, -32, 
	10, -88, 10, -66, 10, -32, 10, -88, 
	10, -80, 10, -32, 10, -88, 10, -97, 
	-80, 10, -32, 10, -88, 10, -107, 10, 
	-32, 10, -88, 10, -91, 10, -32, 10, 
	-88, 10, -66, 10, 10, 32, 58, -32, 
	10, -88, 10, -94, -80, 10, -32, 10, 
	-88, 10, -66, 10, -32, 10, -88, 10, 
	-126, 10, -32, 10, -88, 10, -102, 10, 
	-32, 10, -88, 10, -66, 10, -32, 10, 
	-87, 10, -126, 10, -32, 10, -88, 10, 
	-86, 10, 10, 32, -32, 10, -88, 10, 
	-80, 10, -32, 10, -87, 10, -121, 10, 
	-32, 10, -88, 10, -106, 10, -32, 10, 
	-87, 10, -127, 10, -32, 10, -88, 10, 
	-71, 10, -32, 10, -88, 10, -66, 10, 
	-32, 10, -88, 10, -126, 10, -32, 10, 
	-88, 10, -90, 10, -32, 10, -88, 10, 
	-80, 10, 10, 95, 10, 70, 10, 69, 
	10, 65, 10, 84, 10, 85, 10, 82, 
	10, 69, 10, 95, 10, 69, 10, 78, 
	10, 68, 10, 95, 10, 37, -32, -87, 
	-127, -32, -88, -71, -32, -88, -66, -32, 
	-88, -126, -32, -88, -90, -32, -88, -80, 
	-32, -88, -66, 187, 191, 0
];

var _lexer_single_lengths = [
	0, 10, 1, 8, 1, 1, 1, 1, 
	1, 1, 1, 2, 2, 9, 1, 1, 
	2, 2, 3, 3, 3, 3, 2, 2, 
	2, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	3, 5, 3, 2, 4, 3, 2, 4, 
	9, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 5, 2, 4, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 9, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 6, 2, 6, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 3, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 3, 2, 2, 3, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	1, 2, 2, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 3, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 2, 1, 1, 
	2, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	7, 2, 8, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 3, 3, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 3, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 7, 2, 8, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 3, 3, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 4, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	3, 2, 2, 3, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 7, 2, 8, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 3, 3, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	3, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 3, 2, 2, 3, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 0
];

var _lexer_range_lengths = [
	0, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 0, 0, 
	0, 0, 1, 1, 1, 1, 1, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 1, 1, 1, 1, 0, 0, 1, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0
];

var _lexer_index_offsets = [
	0, 0, 12, 14, 23, 25, 27, 29, 
	31, 33, 35, 37, 40, 43, 54, 56, 
	58, 61, 64, 69, 74, 79, 84, 88, 
	92, 95, 97, 99, 101, 103, 105, 107, 
	109, 111, 113, 115, 117, 119, 121, 123, 
	125, 130, 137, 142, 146, 152, 156, 159, 
	165, 176, 178, 180, 182, 184, 186, 188, 
	190, 192, 194, 196, 198, 200, 202, 204, 
	206, 208, 210, 212, 214, 216, 218, 220, 
	222, 224, 231, 234, 239, 242, 245, 248, 
	251, 254, 257, 260, 263, 266, 269, 272, 
	275, 278, 281, 284, 287, 298, 301, 304, 
	307, 310, 313, 316, 319, 322, 325, 328, 
	331, 334, 337, 340, 343, 346, 349, 352, 
	355, 358, 361, 364, 367, 370, 373, 376, 
	379, 382, 385, 388, 391, 394, 397, 400, 
	403, 406, 409, 412, 415, 418, 421, 424, 
	427, 429, 431, 433, 435, 437, 439, 441, 
	443, 445, 447, 449, 451, 453, 455, 457, 
	459, 461, 463, 471, 474, 481, 484, 487, 
	490, 493, 496, 499, 502, 505, 508, 511, 
	514, 517, 520, 523, 526, 529, 532, 535, 
	538, 541, 544, 547, 550, 553, 556, 559, 
	562, 565, 568, 571, 574, 577, 580, 583, 
	586, 589, 592, 595, 598, 601, 604, 607, 
	610, 613, 616, 619, 622, 625, 628, 631, 
	634, 637, 640, 643, 646, 649, 652, 655, 
	658, 661, 664, 668, 671, 674, 677, 680, 
	683, 686, 689, 692, 695, 699, 702, 705, 
	709, 712, 715, 718, 721, 724, 727, 730, 
	733, 736, 739, 742, 745, 748, 751, 754, 
	757, 760, 763, 766, 769, 772, 775, 778, 
	781, 784, 787, 790, 793, 796, 799, 802, 
	805, 808, 811, 814, 817, 820, 823, 826, 
	829, 832, 835, 838, 841, 844, 847, 850, 
	853, 856, 859, 862, 865, 868, 871, 874, 
	877, 880, 883, 886, 889, 892, 895, 898, 
	901, 904, 907, 910, 913, 916, 919, 922, 
	925, 927, 930, 933, 935, 937, 939, 941, 
	943, 945, 947, 949, 951, 953, 955, 957, 
	959, 961, 963, 965, 967, 969, 971, 973, 
	975, 977, 979, 981, 983, 985, 987, 989, 
	991, 993, 995, 997, 999, 1001, 1003, 1005, 
	1007, 1009, 1011, 1013, 1015, 1017, 1019, 1021, 
	1023, 1025, 1027, 1029, 1031, 1033, 1035, 1037, 
	1039, 1041, 1043, 1045, 1049, 1051, 1053, 1055, 
	1057, 1059, 1061, 1063, 1065, 1067, 1070, 1072, 
	1074, 1077, 1079, 1081, 1083, 1085, 1087, 1089, 
	1091, 1093, 1095, 1097, 1099, 1101, 1103, 1105, 
	1107, 1116, 1119, 1128, 1131, 1134, 1137, 1140, 
	1143, 1146, 1149, 1152, 1155, 1158, 1161, 1164, 
	1167, 1170, 1173, 1176, 1179, 1182, 1185, 1188, 
	1191, 1194, 1197, 1200, 1204, 1208, 1211, 1214, 
	1217, 1220, 1223, 1226, 1229, 1232, 1235, 1238, 
	1241, 1244, 1247, 1250, 1253, 1256, 1259, 1262, 
	1265, 1268, 1271, 1274, 1277, 1280, 1283, 1286, 
	1289, 1292, 1295, 1298, 1301, 1304, 1307, 1310, 
	1313, 1316, 1319, 1322, 1325, 1328, 1331, 1334, 
	1337, 1340, 1343, 1346, 1349, 1352, 1355, 1358, 
	1361, 1364, 1367, 1370, 1373, 1376, 1380, 1383, 
	1386, 1389, 1392, 1395, 1398, 1401, 1404, 1407, 
	1410, 1413, 1416, 1419, 1422, 1425, 1428, 1431, 
	1434, 1437, 1440, 1443, 1446, 1449, 1452, 1455, 
	1458, 1461, 1464, 1467, 1470, 1473, 1476, 1479, 
	1482, 1485, 1488, 1491, 1494, 1497, 1500, 1503, 
	1505, 1507, 1509, 1511, 1513, 1515, 1517, 1519, 
	1521, 1523, 1525, 1527, 1529, 1531, 1533, 1535, 
	1537, 1539, 1548, 1551, 1560, 1563, 1566, 1569, 
	1572, 1575, 1578, 1581, 1584, 1587, 1590, 1593, 
	1596, 1599, 1602, 1605, 1608, 1611, 1614, 1617, 
	1620, 1623, 1626, 1629, 1632, 1636, 1640, 1643, 
	1646, 1649, 1652, 1655, 1658, 1661, 1664, 1667, 
	1670, 1673, 1676, 1679, 1682, 1685, 1688, 1691, 
	1694, 1697, 1700, 1703, 1706, 1709, 1712, 1715, 
	1718, 1721, 1724, 1727, 1730, 1733, 1736, 1739, 
	1742, 1745, 1748, 1751, 1754, 1757, 1760, 1763, 
	1766, 1769, 1772, 1775, 1778, 1781, 1784, 1787, 
	1790, 1793, 1796, 1799, 1802, 1805, 1808, 1813, 
	1816, 1819, 1822, 1825, 1828, 1831, 1834, 1837, 
	1840, 1844, 1847, 1850, 1854, 1857, 1860, 1863, 
	1866, 1869, 1872, 1875, 1878, 1881, 1884, 1887, 
	1890, 1893, 1896, 1899, 1902, 1905, 1908, 1911, 
	1914, 1917, 1920, 1923, 1926, 1929, 1932, 1935, 
	1938, 1941, 1944, 1947, 1950, 1953, 1956, 1959, 
	1962, 1965, 1968, 1971, 1974, 1977, 1980, 1983, 
	1986, 1989, 1992, 1995, 1998, 2001, 2004, 2007, 
	2010, 2013, 2016, 2019, 2022, 2025, 2028, 2031, 
	2034, 2037, 2040, 2043, 2046, 2049, 2052, 2055, 
	2058, 2061, 2064, 2067, 2070, 2072, 2074, 2076, 
	2078, 2080, 2082, 2084, 2086, 2088, 2090, 2092, 
	2094, 2096, 2098, 2100, 2109, 2112, 2121, 2124, 
	2127, 2130, 2133, 2136, 2139, 2142, 2145, 2148, 
	2151, 2154, 2157, 2160, 2163, 2166, 2169, 2172, 
	2175, 2178, 2181, 2184, 2187, 2190, 2193, 2197, 
	2201, 2204, 2207, 2210, 2213, 2216, 2219, 2222, 
	2225, 2228, 2231, 2234, 2237, 2240, 2243, 2246, 
	2249, 2252, 2255, 2258, 2261, 2264, 2267, 2270, 
	2273, 2276, 2279, 2282, 2285, 2288, 2291, 2294, 
	2297, 2300, 2303, 2306, 2309, 2312, 2315, 2318, 
	2321, 2324, 2327, 2330, 2333, 2336, 2339, 2342, 
	2345, 2348, 2351, 2354, 2357, 2360, 2363, 2366, 
	2369, 2373, 2376, 2379, 2382, 2385, 2388, 2391, 
	2394, 2397, 2400, 2404, 2407, 2410, 2414, 2417, 
	2420, 2423, 2426, 2429, 2432, 2435, 2438, 2441, 
	2444, 2447, 2450, 2453, 2456, 2459, 2462, 2465, 
	2468, 2471, 2474, 2477, 2480, 2483, 2486, 2489, 
	2492, 2495, 2498, 2501, 2504, 2507, 2510, 2513, 
	2516, 2519, 2522, 2525, 2528, 2531, 2534, 2537, 
	2540, 2543, 2546, 2549, 2552, 2555, 2558, 2561, 
	2564, 2567, 2570, 2573, 2576, 2579, 2582, 2585, 
	2588, 2591, 2594, 2596, 2598, 2600, 2602, 2604, 
	2606, 2608, 2610, 2612, 2614, 2616, 2618, 2620, 
	2622, 2624, 2626, 2628, 2630, 2632, 2634, 2636, 
	2638, 2640
];

var _lexer_indicies = [
	1, 3, 2, 4, 5, 6, 7, 8, 
	9, 10, 2, 0, 11, 0, 12, 13, 
	14, 15, 16, 17, 18, 19, 0, 20, 
	0, 21, 0, 22, 0, 23, 0, 24, 
	0, 25, 0, 26, 0, 28, 29, 27, 
	31, 32, 30, 1, 3, 2, 4, 5, 
	6, 7, 8, 9, 2, 0, 33, 0, 
	34, 0, 36, 37, 35, 39, 40, 38, 
	43, 42, 44, 42, 41, 47, 46, 48, 
	46, 45, 47, 46, 49, 46, 45, 47, 
	46, 50, 46, 45, 52, 51, 51, 0, 
	3, 53, 53, 0, 55, 56, 54, 3, 
	0, 57, 0, 58, 0, 59, 0, 60, 
	0, 61, 0, 62, 0, 63, 0, 64, 
	0, 65, 0, 66, 0, 67, 0, 68, 
	0, 69, 0, 70, 0, 0, 0, 0, 
	0, 71, 72, 73, 72, 72, 75, 74, 
	71, 3, 76, 8, 76, 0, 77, 78, 
	77, 0, 81, 80, 82, 83, 80, 79, 
	0, 85, 86, 84, 0, 85, 84, 81, 
	87, 85, 86, 87, 84, 88, 81, 89, 
	90, 91, 92, 93, 94, 95, 89, 0, 
	96, 0, 97, 0, 98, 0, 99, 0, 
	100, 0, 101, 0, 102, 0, 103, 0, 
	104, 0, 105, 0, 106, 0, 107, 0, 
	108, 0, 109, 0, 110, 0, 111, 0, 
	112, 0, 113, 0, 114, 0, 115, 0, 
	116, 0, 117, 0, 119, 118, 121, 120, 
	122, 121, 123, 124, 124, 123, 120, 125, 
	121, 120, 126, 127, 128, 121, 120, 129, 
	121, 120, 130, 121, 120, 131, 121, 120, 
	132, 121, 120, 133, 121, 120, 134, 121, 
	120, 135, 121, 120, 136, 121, 120, 137, 
	121, 120, 138, 121, 120, 139, 121, 120, 
	140, 121, 120, 141, 121, 120, 142, 121, 
	120, 143, 121, 120, 121, 144, 120, 145, 
	147, 146, 148, 149, 150, 151, 152, 153, 
	146, 0, 154, 121, 120, 155, 121, 120, 
	156, 121, 120, 157, 121, 120, 158, 121, 
	120, 159, 121, 120, 121, 160, 120, 161, 
	121, 120, 162, 121, 120, 163, 121, 120, 
	164, 121, 120, 165, 121, 120, 166, 121, 
	120, 167, 121, 120, 168, 121, 120, 169, 
	121, 120, 170, 121, 120, 171, 121, 120, 
	172, 121, 120, 173, 121, 120, 174, 121, 
	120, 143, 121, 120, 175, 121, 120, 176, 
	121, 120, 177, 121, 120, 178, 121, 120, 
	179, 121, 120, 180, 121, 120, 181, 121, 
	120, 182, 121, 120, 183, 121, 120, 184, 
	121, 120, 185, 121, 120, 186, 121, 120, 
	187, 121, 120, 188, 121, 120, 189, 121, 
	120, 190, 121, 120, 191, 121, 120, 192, 
	121, 120, 193, 121, 120, 194, 121, 120, 
	143, 121, 120, 195, 0, 196, 0, 197, 
	0, 198, 0, 199, 0, 200, 0, 201, 
	0, 202, 0, 203, 0, 204, 0, 205, 
	0, 206, 0, 207, 0, 208, 0, 209, 
	0, 210, 0, 212, 211, 214, 213, 215, 
	214, 216, 217, 218, 217, 216, 213, 219, 
	214, 213, 220, 221, 222, 223, 224, 214, 
	213, 225, 214, 213, 226, 214, 213, 227, 
	214, 213, 228, 214, 213, 229, 214, 213, 
	230, 214, 213, 231, 214, 213, 232, 214, 
	213, 233, 214, 213, 234, 214, 213, 235, 
	214, 213, 236, 214, 213, 237, 214, 213, 
	238, 214, 213, 239, 214, 213, 240, 214, 
	213, 241, 214, 213, 242, 214, 213, 243, 
	214, 213, 244, 214, 213, 245, 214, 213, 
	214, 246, 213, 247, 214, 213, 248, 214, 
	213, 249, 214, 213, 250, 214, 213, 251, 
	214, 213, 252, 214, 213, 253, 214, 213, 
	254, 214, 213, 255, 214, 213, 256, 214, 
	213, 257, 214, 213, 258, 214, 213, 259, 
	214, 213, 260, 214, 213, 245, 214, 213, 
	261, 214, 213, 262, 214, 213, 263, 214, 
	213, 264, 214, 213, 265, 214, 213, 266, 
	214, 213, 214, 267, 213, 268, 214, 213, 
	269, 214, 213, 270, 214, 213, 271, 214, 
	213, 272, 214, 213, 273, 214, 213, 274, 
	214, 213, 275, 214, 213, 276, 214, 213, 
	277, 214, 213, 278, 214, 213, 279, 214, 
	213, 280, 214, 213, 281, 214, 213, 245, 
	214, 213, 282, 214, 213, 283, 214, 213, 
	284, 285, 214, 213, 286, 214, 213, 287, 
	214, 213, 288, 214, 213, 289, 214, 213, 
	290, 214, 213, 291, 214, 213, 292, 214, 
	213, 293, 214, 213, 294, 214, 213, 214, 
	295, 246, 213, 296, 214, 213, 297, 214, 
	213, 298, 299, 214, 213, 300, 214, 213, 
	301, 214, 213, 302, 214, 213, 303, 214, 
	213, 304, 214, 213, 305, 214, 213, 306, 
	214, 213, 307, 214, 213, 308, 214, 213, 
	309, 214, 213, 310, 214, 213, 245, 214, 
	213, 311, 214, 213, 312, 214, 213, 313, 
	214, 213, 314, 214, 213, 315, 214, 213, 
	316, 214, 213, 214, 317, 213, 318, 214, 
	213, 319, 214, 213, 320, 214, 213, 321, 
	214, 213, 322, 214, 213, 323, 214, 213, 
	324, 214, 213, 325, 214, 213, 308, 214, 
	213, 326, 214, 213, 327, 214, 213, 328, 
	214, 213, 329, 214, 213, 330, 214, 213, 
	331, 214, 213, 332, 214, 213, 333, 214, 
	213, 334, 214, 213, 335, 214, 213, 336, 
	214, 213, 245, 214, 213, 337, 214, 213, 
	338, 214, 213, 339, 214, 213, 340, 214, 
	213, 341, 214, 213, 342, 214, 213, 343, 
	214, 213, 344, 214, 213, 345, 214, 213, 
	346, 214, 213, 347, 214, 213, 348, 214, 
	213, 349, 214, 213, 350, 214, 213, 351, 
	214, 213, 352, 214, 213, 353, 214, 213, 
	308, 214, 213, 214, 354, 213, 214, 355, 
	213, 214, 356, 213, 214, 357, 213, 214, 
	358, 213, 214, 359, 213, 214, 360, 213, 
	214, 361, 213, 214, 362, 213, 214, 363, 
	213, 214, 364, 213, 214, 365, 213, 214, 
	366, 213, 214, 367, 213, 368, 0, 369, 
	370, 0, 371, 372, 0, 373, 0, 374, 
	0, 375, 0, 376, 0, 377, 0, 25, 
	0, 378, 0, 379, 0, 380, 0, 381, 
	0, 382, 0, 383, 0, 384, 0, 385, 
	0, 386, 0, 387, 0, 388, 0, 389, 
	0, 390, 0, 391, 0, 392, 0, 25, 
	0, 393, 0, 394, 0, 395, 0, 396, 
	0, 397, 0, 398, 0, 25, 0, 399, 
	0, 400, 0, 25, 0, 401, 0, 402, 
	0, 403, 0, 404, 0, 405, 0, 406, 
	0, 407, 0, 408, 0, 409, 0, 410, 
	0, 411, 0, 412, 0, 413, 0, 414, 
	0, 415, 0, 416, 0, 417, 0, 418, 
	0, 419, 0, 420, 0, 421, 0, 209, 
	0, 422, 0, 423, 0, 424, 25, 425, 
	0, 426, 0, 427, 0, 428, 0, 429, 
	0, 430, 0, 431, 0, 432, 0, 433, 
	0, 434, 0, 435, 436, 0, 437, 0, 
	438, 0, 439, 440, 0, 441, 0, 442, 
	0, 443, 0, 444, 0, 445, 0, 446, 
	0, 447, 0, 448, 0, 449, 0, 450, 
	0, 451, 0, 452, 0, 453, 0, 455, 
	454, 457, 456, 458, 457, 459, 460, 461, 
	462, 460, 459, 456, 463, 457, 456, 464, 
	465, 466, 467, 468, 469, 470, 457, 456, 
	471, 457, 456, 472, 457, 456, 473, 457, 
	456, 474, 457, 456, 475, 457, 456, 476, 
	457, 456, 457, 477, 456, 478, 457, 456, 
	479, 457, 456, 480, 457, 456, 481, 457, 
	456, 482, 457, 456, 483, 457, 456, 484, 
	457, 456, 485, 457, 456, 486, 457, 456, 
	487, 457, 456, 488, 457, 456, 489, 457, 
	456, 490, 457, 456, 491, 457, 456, 492, 
	457, 456, 457, 477, 456, 493, 457, 456, 
	494, 495, 457, 456, 496, 497, 457, 456, 
	498, 457, 456, 499, 457, 456, 500, 457, 
	456, 501, 457, 456, 502, 457, 456, 476, 
	457, 456, 503, 457, 456, 504, 457, 456, 
	505, 457, 456, 506, 457, 456, 507, 457, 
	456, 508, 457, 456, 509, 457, 456, 510, 
	457, 456, 511, 457, 456, 457, 512, 456, 
	513, 457, 456, 514, 457, 456, 515, 457, 
	456, 516, 457, 456, 517, 457, 456, 476, 
	457, 456, 518, 457, 456, 519, 457, 456, 
	520, 457, 456, 521, 457, 456, 522, 457, 
	456, 523, 457, 456, 476, 457, 456, 524, 
	457, 456, 525, 457, 456, 476, 457, 456, 
	526, 457, 456, 527, 457, 456, 528, 457, 
	456, 529, 457, 456, 530, 457, 456, 531, 
	457, 456, 457, 532, 456, 533, 457, 456, 
	534, 457, 456, 535, 457, 456, 536, 457, 
	456, 537, 457, 456, 538, 457, 456, 539, 
	457, 456, 540, 457, 456, 541, 457, 456, 
	542, 457, 456, 543, 457, 456, 544, 457, 
	456, 545, 457, 456, 546, 457, 456, 492, 
	457, 456, 547, 457, 456, 548, 457, 456, 
	549, 476, 457, 456, 550, 457, 456, 551, 
	457, 456, 552, 457, 456, 553, 457, 456, 
	554, 457, 456, 555, 457, 456, 556, 457, 
	456, 557, 457, 456, 492, 457, 456, 558, 
	457, 456, 559, 457, 456, 560, 457, 456, 
	561, 457, 456, 562, 457, 456, 563, 457, 
	456, 564, 457, 456, 565, 457, 456, 566, 
	457, 456, 567, 457, 456, 568, 457, 456, 
	569, 457, 456, 570, 457, 456, 571, 457, 
	456, 572, 457, 456, 573, 457, 456, 574, 
	457, 456, 555, 457, 456, 457, 575, 456, 
	457, 576, 456, 457, 577, 456, 457, 578, 
	456, 457, 579, 456, 457, 580, 456, 457, 
	581, 456, 457, 582, 456, 457, 583, 456, 
	457, 584, 456, 457, 585, 456, 457, 586, 
	456, 457, 587, 456, 457, 588, 456, 589, 
	0, 590, 0, 591, 0, 592, 0, 593, 
	0, 594, 0, 595, 0, 596, 0, 597, 
	0, 598, 0, 599, 0, 600, 0, 601, 
	0, 602, 0, 603, 0, 449, 0, 605, 
	604, 607, 606, 608, 607, 609, 610, 611, 
	612, 610, 609, 606, 613, 607, 606, 614, 
	615, 616, 617, 618, 619, 620, 607, 606, 
	621, 607, 606, 622, 607, 606, 623, 607, 
	606, 624, 607, 606, 625, 607, 606, 626, 
	607, 606, 607, 627, 606, 628, 607, 606, 
	629, 607, 606, 630, 607, 606, 631, 607, 
	606, 632, 607, 606, 633, 607, 606, 634, 
	607, 606, 635, 607, 606, 636, 607, 606, 
	637, 607, 606, 638, 607, 606, 639, 607, 
	606, 640, 607, 606, 641, 607, 606, 642, 
	607, 606, 607, 627, 606, 643, 607, 606, 
	644, 645, 607, 606, 646, 647, 607, 606, 
	648, 607, 606, 649, 607, 606, 650, 607, 
	606, 651, 607, 606, 652, 607, 606, 626, 
	607, 606, 653, 607, 606, 654, 607, 606, 
	655, 607, 606, 656, 607, 606, 657, 607, 
	606, 658, 607, 606, 659, 607, 606, 660, 
	607, 606, 661, 607, 606, 607, 662, 606, 
	663, 607, 606, 664, 607, 606, 665, 607, 
	606, 666, 607, 606, 667, 607, 606, 626, 
	607, 606, 668, 607, 606, 669, 607, 606, 
	670, 607, 606, 671, 607, 606, 672, 607, 
	606, 673, 607, 606, 626, 607, 606, 674, 
	607, 606, 675, 607, 606, 626, 607, 606, 
	676, 607, 606, 677, 607, 606, 678, 607, 
	606, 679, 607, 606, 680, 607, 606, 681, 
	607, 606, 607, 682, 606, 683, 607, 606, 
	684, 607, 606, 685, 607, 606, 686, 607, 
	606, 687, 607, 606, 688, 607, 606, 689, 
	607, 606, 690, 607, 606, 691, 607, 606, 
	692, 607, 606, 693, 607, 606, 694, 607, 
	606, 695, 607, 606, 696, 607, 606, 642, 
	607, 606, 697, 607, 606, 698, 607, 606, 
	699, 626, 700, 607, 606, 701, 607, 606, 
	702, 607, 606, 703, 607, 606, 704, 607, 
	606, 705, 607, 606, 706, 607, 606, 707, 
	607, 606, 708, 607, 606, 709, 607, 606, 
	607, 710, 627, 606, 711, 607, 606, 712, 
	607, 606, 713, 714, 607, 606, 715, 607, 
	606, 716, 607, 606, 717, 607, 606, 718, 
	607, 606, 719, 607, 606, 720, 607, 606, 
	721, 607, 606, 722, 607, 606, 723, 607, 
	606, 724, 607, 606, 725, 607, 606, 642, 
	607, 606, 726, 607, 606, 727, 607, 606, 
	728, 607, 606, 729, 607, 606, 730, 607, 
	606, 731, 607, 606, 607, 732, 606, 733, 
	607, 606, 734, 607, 606, 735, 607, 606, 
	736, 607, 606, 737, 607, 606, 738, 607, 
	606, 739, 607, 606, 740, 607, 606, 723, 
	607, 606, 741, 607, 606, 742, 607, 606, 
	743, 607, 606, 744, 607, 606, 745, 607, 
	606, 746, 607, 606, 747, 607, 606, 748, 
	607, 606, 749, 607, 606, 750, 607, 606, 
	751, 607, 606, 642, 607, 606, 752, 607, 
	606, 753, 607, 606, 754, 607, 606, 755, 
	607, 606, 756, 607, 606, 757, 607, 606, 
	758, 607, 606, 759, 607, 606, 760, 607, 
	606, 761, 607, 606, 762, 607, 606, 763, 
	607, 606, 764, 607, 606, 765, 607, 606, 
	766, 607, 606, 767, 607, 606, 768, 607, 
	606, 723, 607, 606, 607, 769, 606, 607, 
	770, 606, 607, 771, 606, 607, 772, 606, 
	607, 773, 606, 607, 774, 606, 607, 775, 
	606, 607, 776, 606, 607, 777, 606, 607, 
	778, 606, 607, 779, 606, 607, 780, 606, 
	607, 781, 606, 607, 782, 606, 783, 0, 
	784, 0, 785, 0, 786, 0, 787, 0, 
	788, 0, 789, 0, 790, 0, 791, 0, 
	792, 0, 793, 0, 794, 0, 795, 0, 
	797, 796, 799, 798, 800, 799, 801, 802, 
	803, 804, 802, 801, 798, 805, 799, 798, 
	806, 807, 808, 809, 810, 811, 812, 799, 
	798, 813, 799, 798, 814, 799, 798, 815, 
	799, 798, 816, 799, 798, 817, 799, 798, 
	818, 799, 798, 799, 819, 798, 820, 799, 
	798, 821, 799, 798, 822, 799, 798, 823, 
	799, 798, 824, 799, 798, 825, 799, 798, 
	826, 799, 798, 827, 799, 798, 828, 799, 
	798, 829, 799, 798, 830, 799, 798, 831, 
	799, 798, 832, 799, 798, 833, 799, 798, 
	834, 799, 798, 799, 819, 798, 835, 799, 
	798, 836, 837, 799, 798, 838, 839, 799, 
	798, 840, 799, 798, 841, 799, 798, 842, 
	799, 798, 843, 799, 798, 844, 799, 798, 
	818, 799, 798, 845, 799, 798, 846, 799, 
	798, 847, 799, 798, 848, 799, 798, 849, 
	799, 798, 850, 799, 798, 851, 799, 798, 
	852, 799, 798, 853, 799, 798, 799, 854, 
	798, 855, 799, 798, 856, 799, 798, 857, 
	799, 798, 858, 799, 798, 859, 799, 798, 
	818, 799, 798, 860, 799, 798, 861, 799, 
	798, 862, 799, 798, 863, 799, 798, 864, 
	799, 798, 865, 799, 798, 818, 799, 798, 
	866, 799, 798, 867, 799, 798, 818, 799, 
	798, 868, 799, 798, 869, 799, 798, 870, 
	799, 798, 871, 799, 798, 872, 799, 798, 
	873, 799, 798, 799, 874, 798, 875, 799, 
	798, 876, 799, 798, 877, 799, 798, 878, 
	799, 798, 879, 799, 798, 880, 799, 798, 
	881, 799, 798, 882, 799, 798, 883, 799, 
	798, 884, 799, 798, 885, 799, 798, 886, 
	799, 798, 887, 799, 798, 888, 799, 798, 
	834, 799, 798, 889, 799, 798, 890, 799, 
	798, 891, 818, 799, 798, 892, 799, 798, 
	893, 799, 798, 894, 799, 798, 895, 799, 
	798, 896, 799, 798, 897, 799, 798, 898, 
	799, 798, 899, 799, 798, 900, 799, 798, 
	799, 901, 819, 798, 902, 799, 798, 903, 
	799, 798, 904, 905, 799, 798, 906, 799, 
	798, 907, 799, 798, 908, 799, 798, 909, 
	799, 798, 910, 799, 798, 911, 799, 798, 
	912, 799, 798, 913, 799, 798, 914, 799, 
	798, 915, 799, 798, 916, 799, 798, 834, 
	799, 798, 917, 799, 798, 918, 799, 798, 
	919, 799, 798, 920, 799, 798, 921, 799, 
	798, 922, 799, 798, 799, 923, 798, 924, 
	799, 798, 925, 799, 798, 926, 799, 798, 
	927, 799, 798, 928, 799, 798, 929, 799, 
	798, 930, 799, 798, 931, 799, 798, 914, 
	799, 798, 932, 799, 798, 933, 799, 798, 
	934, 799, 798, 935, 799, 798, 936, 799, 
	798, 937, 799, 798, 938, 799, 798, 939, 
	799, 798, 940, 799, 798, 941, 799, 798, 
	942, 799, 798, 943, 799, 798, 944, 799, 
	798, 945, 799, 798, 946, 799, 798, 947, 
	799, 798, 948, 799, 798, 914, 799, 798, 
	799, 949, 798, 799, 950, 798, 799, 951, 
	798, 799, 952, 798, 799, 953, 798, 799, 
	954, 798, 799, 955, 798, 799, 956, 798, 
	799, 957, 798, 799, 958, 798, 799, 959, 
	798, 799, 960, 798, 799, 961, 798, 799, 
	962, 798, 963, 0, 964, 0, 965, 0, 
	966, 0, 967, 0, 968, 0, 969, 0, 
	970, 0, 971, 0, 972, 0, 973, 0, 
	974, 0, 975, 0, 976, 0, 977, 0, 
	978, 0, 979, 0, 980, 0, 981, 0, 
	982, 0, 209, 0, 983, 0, 2, 0, 
	984, 0
];

var _lexer_trans_targs = [
	0, 2, 13, 13, 14, 24, 26, 10, 
	40, 43, 903, 3, 4, 49, 136, 304, 
	336, 339, 361, 882, 5, 6, 7, 8, 
	9, 10, 11, 12, 13, 25, 12, 13, 
	25, 15, 16, 17, 18, 17, 17, 18, 
	17, 19, 19, 19, 20, 19, 19, 19, 
	20, 21, 22, 23, 13, 23, 24, 13, 
	25, 27, 28, 29, 30, 31, 32, 33, 
	34, 35, 36, 37, 38, 39, 905, 41, 
	42, 13, 41, 40, 42, 43, 44, 45, 
	47, 48, 46, 44, 45, 46, 44, 47, 
	2, 48, 14, 24, 26, 10, 40, 43, 
	50, 51, 52, 53, 54, 55, 56, 57, 
	58, 59, 60, 61, 62, 63, 64, 65, 
	66, 67, 68, 69, 70, 71, 72, 73, 
	72, 73, 74, 73, 13, 75, 76, 93, 
	115, 77, 78, 79, 80, 81, 82, 83, 
	84, 85, 86, 87, 88, 89, 90, 91, 
	92, 2, 13, 13, 14, 24, 26, 10, 
	40, 43, 94, 95, 96, 97, 98, 99, 
	100, 101, 102, 103, 104, 105, 106, 107, 
	108, 109, 110, 111, 112, 113, 114, 116, 
	117, 118, 119, 120, 121, 122, 123, 124, 
	125, 126, 127, 128, 129, 130, 131, 132, 
	133, 134, 135, 137, 138, 139, 140, 141, 
	142, 143, 144, 145, 146, 147, 148, 149, 
	150, 151, 152, 153, 154, 153, 154, 155, 
	154, 13, 290, 156, 157, 179, 194, 216, 
	272, 158, 159, 160, 161, 162, 163, 164, 
	165, 166, 167, 168, 169, 170, 171, 172, 
	173, 174, 175, 176, 177, 178, 92, 180, 
	181, 182, 183, 184, 185, 186, 187, 188, 
	189, 190, 191, 192, 193, 195, 196, 197, 
	198, 199, 200, 201, 202, 203, 204, 205, 
	206, 207, 208, 209, 210, 211, 212, 213, 
	214, 215, 217, 218, 219, 260, 220, 221, 
	222, 223, 224, 225, 226, 227, 228, 229, 
	230, 231, 232, 244, 233, 234, 235, 236, 
	237, 238, 239, 240, 241, 242, 243, 245, 
	246, 247, 248, 249, 250, 251, 252, 253, 
	254, 255, 256, 257, 258, 259, 261, 262, 
	263, 264, 265, 266, 267, 268, 269, 270, 
	271, 273, 274, 275, 276, 277, 278, 279, 
	280, 281, 282, 283, 284, 285, 286, 287, 
	288, 289, 291, 292, 293, 294, 295, 296, 
	297, 298, 299, 300, 301, 302, 303, 13, 
	305, 306, 329, 307, 313, 308, 309, 310, 
	311, 312, 314, 315, 316, 317, 318, 319, 
	320, 321, 322, 323, 324, 325, 326, 327, 
	328, 330, 331, 332, 333, 334, 335, 337, 
	338, 340, 341, 342, 343, 344, 345, 346, 
	347, 348, 349, 350, 351, 352, 353, 354, 
	355, 356, 357, 358, 359, 360, 362, 363, 
	364, 708, 365, 366, 367, 368, 369, 370, 
	371, 372, 373, 374, 535, 375, 376, 377, 
	519, 378, 379, 380, 381, 382, 383, 384, 
	385, 386, 387, 388, 389, 390, 391, 392, 
	391, 392, 393, 392, 13, 505, 401, 394, 
	395, 402, 418, 450, 453, 475, 487, 396, 
	397, 398, 399, 400, 401, 92, 403, 404, 
	405, 406, 407, 408, 409, 410, 411, 412, 
	413, 414, 415, 416, 417, 419, 420, 443, 
	421, 427, 422, 423, 424, 425, 426, 428, 
	429, 430, 431, 432, 433, 434, 435, 436, 
	437, 438, 439, 440, 441, 442, 444, 445, 
	446, 447, 448, 449, 451, 452, 454, 455, 
	456, 457, 458, 459, 460, 461, 462, 463, 
	464, 465, 466, 467, 468, 469, 470, 471, 
	472, 473, 474, 476, 477, 478, 479, 480, 
	481, 482, 483, 484, 485, 486, 488, 489, 
	490, 491, 492, 493, 494, 495, 496, 497, 
	498, 499, 500, 501, 502, 503, 504, 506, 
	507, 508, 509, 510, 511, 512, 513, 514, 
	515, 516, 517, 518, 13, 520, 521, 522, 
	523, 524, 525, 526, 527, 528, 529, 530, 
	531, 532, 533, 534, 536, 537, 536, 537, 
	538, 537, 13, 694, 546, 539, 540, 547, 
	563, 595, 598, 620, 676, 541, 542, 543, 
	544, 545, 546, 92, 548, 549, 550, 551, 
	552, 553, 554, 555, 556, 557, 558, 559, 
	560, 561, 562, 564, 565, 588, 566, 572, 
	567, 568, 569, 570, 571, 573, 574, 575, 
	576, 577, 578, 579, 580, 581, 582, 583, 
	584, 585, 586, 587, 589, 590, 591, 592, 
	593, 594, 596, 597, 599, 600, 601, 602, 
	603, 604, 605, 606, 607, 608, 609, 610, 
	611, 612, 613, 614, 615, 616, 617, 618, 
	619, 621, 622, 623, 664, 624, 625, 626, 
	627, 628, 629, 630, 631, 632, 633, 634, 
	635, 636, 648, 637, 638, 639, 640, 641, 
	642, 643, 644, 645, 646, 647, 649, 650, 
	651, 652, 653, 654, 655, 656, 657, 658, 
	659, 660, 661, 662, 663, 665, 666, 667, 
	668, 669, 670, 671, 672, 673, 674, 675, 
	677, 678, 679, 680, 681, 682, 683, 684, 
	685, 686, 687, 688, 689, 690, 691, 692, 
	693, 695, 696, 697, 698, 699, 700, 701, 
	702, 703, 704, 705, 706, 707, 13, 709, 
	710, 711, 712, 713, 714, 715, 716, 717, 
	718, 719, 720, 721, 722, 723, 722, 723, 
	724, 723, 13, 868, 732, 725, 726, 733, 
	749, 781, 784, 806, 850, 727, 728, 729, 
	730, 731, 732, 92, 734, 735, 736, 737, 
	738, 739, 740, 741, 742, 743, 744, 745, 
	746, 747, 748, 750, 751, 774, 752, 758, 
	753, 754, 755, 756, 757, 759, 760, 761, 
	762, 763, 764, 765, 766, 767, 768, 769, 
	770, 771, 772, 773, 775, 776, 777, 778, 
	779, 780, 782, 783, 785, 786, 787, 788, 
	789, 790, 791, 792, 793, 794, 795, 796, 
	797, 798, 799, 800, 801, 802, 803, 804, 
	805, 807, 808, 809, 810, 811, 812, 813, 
	814, 815, 816, 817, 818, 819, 820, 821, 
	822, 834, 823, 824, 825, 826, 827, 828, 
	829, 830, 831, 832, 833, 835, 836, 837, 
	838, 839, 840, 841, 842, 843, 844, 845, 
	846, 847, 848, 849, 851, 852, 853, 854, 
	855, 856, 857, 858, 859, 860, 861, 862, 
	863, 864, 865, 866, 867, 869, 870, 871, 
	872, 873, 874, 875, 876, 877, 878, 879, 
	880, 881, 13, 883, 884, 885, 886, 887, 
	888, 889, 890, 891, 892, 893, 894, 895, 
	896, 897, 898, 899, 900, 901, 902, 904, 
	0
];

var _lexer_trans_actions = [
	43, 29, 0, 54, 3, 1, 0, 29, 
	1, 35, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 57, 149, 126, 0, 110, 
	23, 0, 0, 7, 139, 48, 0, 102, 
	9, 5, 45, 134, 45, 0, 33, 122, 
	33, 33, 0, 11, 106, 0, 0, 114, 
	25, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	27, 118, 27, 51, 0, 0, 0, 37, 
	37, 54, 37, 87, 0, 0, 39, 0, 
	96, 0, 93, 90, 41, 96, 90, 99, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 57, 144, 
	0, 54, 84, 0, 81, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	21, 63, 31, 130, 60, 57, 31, 63, 
	57, 66, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 57, 144, 0, 54, 84, 
	0, 69, 33, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 13, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 13, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 57, 144, 
	0, 54, 84, 0, 78, 33, 84, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 19, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 19, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 57, 144, 0, 54, 
	84, 0, 75, 33, 84, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 17, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 17, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 57, 144, 0, 54, 
	84, 0, 72, 33, 84, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 15, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 15, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0
];

var _lexer_eof_actions = [
	0, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43
];

var lexer_start = 1;
var lexer_first_final = 905;
var lexer_error = 0;

var lexer_en_main = 1;


/* line 129 "ragel/i18n/pa.js.rl" */

/* line 130 "ragel/i18n/pa.js.rl" */

/* line 131 "ragel/i18n/pa.js.rl" */

/* line 132 "ragel/i18n/pa.js.rl" */

var Lexer = function(listener) {
  // Check that listener has the required functions
  var events = ['comment', 'tag', 'feature', 'background', 'scenario', 'scenario_outline', 'examples', 'step', 'doc_string', 'row', 'eof'];
  for(var i=0, len=events.length; i<len; i++) {
    var event = events[i];
    if(typeof listener[event] != 'function') {
      throw new Error("Error. No " + event + " function exists on " + JSON.stringify(listener));
    }
  }
  this.listener = listener;
};

Lexer.prototype.scan = function(data) {
  var ending = "\n%_FEATURE_END_%";
  if(typeof data == 'string') {
    data = this.stringToBytes(data + ending);
  } else if(typeof Buffer != 'undefined' && Buffer.isBuffer(data)) {
    // Node.js
    var buf = new Buffer(data.length + ending.length);
    data.copy(buf, 0, 0);
    new Buffer(ending).copy(buf, data.length, 0);
    data = buf;
  }
  var eof = pe = data.length;
  var p = 0;

  this.line_number = 1;
  this.last_newline = 0;
  var signedCharValue=function(v){return v > 127 ? v-256 : v; };

  
/* line 1477 "js/lib/gherkin/lexer/pa.js" */
{
	  this.cs = lexer_start;
} /* JSCodeGen::writeInit */

/* line 164 "ragel/i18n/pa.js.rl" */
  
/* line 1484 "js/lib/gherkin/lexer/pa.js" */
{
	var _klen, _trans, _keys, _ps, _widec, _acts, _nacts;
	var _goto_level, _resume, _eof_trans, _again, _test_eof;
	var _out;
	_klen = _trans = _keys = _acts = _nacts = null;
	_goto_level = 0;
	_resume = 10;
	_eof_trans = 15;
	_again = 20;
	_test_eof = 30;
	_out = 40;
	while (true) {
	_trigger_goto = false;
	if (_goto_level <= 0) {
	if (p == pe) {
		_goto_level = _test_eof;
		continue;
	}
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	}
	if (_goto_level <= _resume) {
	_keys = _lexer_key_offsets[ this.cs];
	_trans = _lexer_index_offsets[ this.cs];
	_klen = _lexer_single_lengths[ this.cs];
	_break_match = false;
	
	do {
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + _klen - 1;

	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + ( (_upper - _lower) >> 1 );

	        if (( signedCharValue(data[p])) < _lexer_trans_keys[_mid]) {
	           _upper = _mid - 1;
	        } else if (( signedCharValue(data[p])) > _lexer_trans_keys[_mid]) {
	           _lower = _mid + 1;
	        } else {
	           _trans += (_mid - _keys);
	           _break_match = true;
	           break;
	        };
	     } /* while */
	     if (_break_match) { break; }
	     _keys += _klen;
	     _trans += _klen;
	  }
	  _klen = _lexer_range_lengths[ this.cs];
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + (_klen << 1) - 2;
	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + (((_upper-_lower) >> 1) & ~1);
	        if (( signedCharValue(data[p])) < _lexer_trans_keys[_mid]) {
	          _upper = _mid - 2;
	         } else if (( signedCharValue(data[p])) > _lexer_trans_keys[_mid+1]) {
	          _lower = _mid + 2;
	        } else {
	          _trans += ((_mid - _keys) >> 1);
	          _break_match = true;
	          break;
	        }
	     } /* while */
	     if (_break_match) { break; }
	     _trans += _klen
	  }
	} while (false);
	_trans = _lexer_indicies[_trans];
	 this.cs = _lexer_trans_targs[_trans];
	if (_lexer_trans_actions[_trans] != 0) {
		_acts = _lexer_trans_actions[_trans];
		_nacts = _lexer_actions[_acts];
		_acts += 1;
		while (_nacts > 0) {
			_nacts -= 1;
			_acts += 1;
			switch (_lexer_actions[_acts - 1]) {
case 0:
/* line 6 "ragel/i18n/pa.js.rl" */

    this.content_start = p;
    this.current_line = this.line_number;
    this.start_col = p - this.last_newline - (this.keyword+':').length;
  		break;
case 1:
/* line 12 "ragel/i18n/pa.js.rl" */

    this.current_line = this.line_number;
    this.start_col = p - this.last_newline;
  		break;
case 2:
/* line 17 "ragel/i18n/pa.js.rl" */

    this.content_start = p;
  		break;
case 3:
/* line 21 "ragel/i18n/pa.js.rl" */

    this.docstring_content_type_start = p;
  		break;
case 4:
/* line 25 "ragel/i18n/pa.js.rl" */

    this.docstring_content_type_end = p;
  		break;
case 5:
/* line 29 "ragel/i18n/pa.js.rl" */

    var con = this.unindent(
      this.start_col, 
      this.bytesToString(data.slice(this.content_start, this.next_keyword_start-1)).replace(/(\r?\n)?([\t ])*$/, '').replace(/\\\"\\\"\\\"/mg, '"""')
    );
    var con_type = this.bytesToString(data.slice(this.docstring_content_type_start, this.docstring_content_type_end)).trim();
    this.listener.doc_string(con_type, con, this.current_line); 
  		break;
case 6:
/* line 38 "ragel/i18n/pa.js.rl" */

    p = this.store_keyword_content('feature', data, p, eof);
  		break;
case 7:
/* line 42 "ragel/i18n/pa.js.rl" */

    p = this.store_keyword_content('background', data, p, eof);
  		break;
case 8:
/* line 46 "ragel/i18n/pa.js.rl" */

    p = this.store_keyword_content('scenario', data, p, eof);
  		break;
case 9:
/* line 50 "ragel/i18n/pa.js.rl" */

    p = this.store_keyword_content('scenario_outline', data, p, eof);
  		break;
case 10:
/* line 54 "ragel/i18n/pa.js.rl" */

    p = this.store_keyword_content('examples', data, p, eof);
  		break;
case 11:
/* line 58 "ragel/i18n/pa.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.step(this.keyword, con, this.current_line);
  		break;
case 12:
/* line 63 "ragel/i18n/pa.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.comment(con, this.line_number);
    this.keyword_start = null;
  		break;
case 13:
/* line 69 "ragel/i18n/pa.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.tag(con, this.line_number);
    this.keyword_start = null;
  		break;
case 14:
/* line 75 "ragel/i18n/pa.js.rl" */

    this.line_number++;
  		break;
case 15:
/* line 79 "ragel/i18n/pa.js.rl" */

    this.last_newline = p + 1;
  		break;
case 16:
/* line 83 "ragel/i18n/pa.js.rl" */

    this.keyword_start = this.keyword_start || p;
  		break;
case 17:
/* line 87 "ragel/i18n/pa.js.rl" */

    this.keyword = this.bytesToString(data.slice(this.keyword_start, p)).replace(/:$/, '');
    this.keyword_start = null;
  		break;
case 18:
/* line 92 "ragel/i18n/pa.js.rl" */

    this.next_keyword_start = p;
  		break;
case 19:
/* line 96 "ragel/i18n/pa.js.rl" */

    p = p - 1;
    current_row = [];
    this.current_line = this.line_number;
  		break;
case 20:
/* line 102 "ragel/i18n/pa.js.rl" */

    this.content_start = p;
  		break;
case 21:
/* line 106 "ragel/i18n/pa.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    current_row.push(con.replace(/\\\|/, "|").replace(/\\n/, "\n").replace(/\\\\/, "\\"));
  		break;
case 22:
/* line 111 "ragel/i18n/pa.js.rl" */

    this.listener.row(current_row, this.current_line);
  		break;
case 23:
/* line 115 "ragel/i18n/pa.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw new Error("Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.");
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 1711 "js/lib/gherkin/lexer/pa.js" */
			} /* action switch */
		}
	}
	if (_trigger_goto) {
		continue;
	}
	}
	if (_goto_level <= _again) {
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	p += 1;
	if (p != pe) {
		_goto_level = _resume;
		continue;
	}
	}
	if (_goto_level <= _test_eof) {
	if (p == eof) {
	__acts = _lexer_eof_actions[ this.cs];
	__nacts =  _lexer_actions[__acts];
	__acts += 1;
	while (__nacts > 0) {
		__nacts -= 1;
		__acts += 1;
		switch (_lexer_actions[__acts - 1]) {
case 23:
/* line 115 "ragel/i18n/pa.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw new Error("Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.");
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 1750 "js/lib/gherkin/lexer/pa.js" */
		} /* eof action switch */
	}
	if (_trigger_goto) {
		continue;
	}
}
	}
	if (_goto_level <= _out) {
		break;
	}
	}
	}

/* line 165 "ragel/i18n/pa.js.rl" */
};


/*
 * Decode utf-8 byte sequence to string.
 */
var decodeUtf8 = function(bytes) {
  var result = "";
  var i = 0;
  var wc;
  var c;

  while (i < bytes.length) {
    /* parse as UTF-8 lead byte */
    wc = bytes[i++];
    if (wc < 0x80) {
      count = 0;
    } else if (wc < 0xC2 || wc >= 0xF8) {
      throw new Error("input is not a valid UTF-8 lead octet");
    } else if (wc < 0xE0) {
      count = 1;
      wc = (wc & 0x1F) << 6;
    } else if (wc < 0xF0) {
      count = 2;
      wc = (wc & 0x0F) << 12;
    } else /* wc < 0xF8 */ {
      count = 3;
      wc = (wc & 0x07) << 18;
    }

    /* parse trail bytes, if any */
    while (count) {
      if (!(i < bytes.length)) {
        throw new Error("short read");
      }
      if ((c = bytes[i++] ^ 0x80) > 0x3F) {
        throw new Error("input is not a valid UTF-8 trail octet");
      }
      wc |= c << (6 * --count);
      if (wc < (1 << (5 * count + 6))) {
        throw new Error("invalid non-minimal encoded input");
      }
    }

    /* handle conversion to UTF-16 if needed */
    if (wc > 0xFFFF) {
      wc -= 0x10000;
      result += String.fromCharCode(0xD800 + (wc >> 10));
      wc = 0xDC00 + (wc & 0x3FF);
    }
    result += String.fromCharCode(wc);
  }

  return result;
};

/*
 * Encode string to an array of bytes using utf8 encoding.
 *
 * Javascript internally stores character data as utf16 (like java).
 * String.charCodeAt() does *not* produce unicode points, but simply
 * reflects this internal representation. Thus, it is necessary
 * to first decode the utf-16 representation before encoding to
 * utf-8.
 */
var encodeUtf8 = function(string) {
  var bytes = [];
  var i = 0;
  var j = 0;
  var wc;

  while (i < string.length) {
    wc = string.charCodeAt(i++);
    if (wc >= 0xD800 && wc <= 0xDBFF && i < string.length && string.charCodeAt(i) >= 0xDC00 && string.charCodeAt(i) <= 0xDFFF) {
      /* decode UTF-16 */
      wc = 0x10000 + ((wc & 0x3FF) << 10) + (string.charCodeAt(i++) & 0x3FF);
    }

    /* emit lead byte */
    if (wc < 0x80) {
      bytes[j++] = wc;
      count = 0;
    } else if (wc < 0x800) {
      bytes[j++] = 0xC0 | (wc >> 6);
      count = 1;
    } else if (wc < 0x10000) {
      bytes[j++] = 0xE0 | (wc >> 12);
      count = 2;
    } else {
      /* SMP: 21-bit Unicode */
      bytes[j++] = 0xF0 | (wc >> 18);
      count = 3;
    }

    /* emit trail bytes, if any */
    while (count) {
      bytes[j++] = 0x80 | ((wc >> (6 * --count)) & 0x3F);
    }
  }

  return bytes;

};

Lexer.prototype.bytesToString = function(bytes) {
  if(typeof bytes.write == 'function') {
    // Node.js
    return bytes.toString('utf-8');
  }
  return decodeUtf8(bytes);
};

Lexer.prototype.stringToBytes = function(string) {
  return encodeUtf8(string);
};

Lexer.prototype.unindent = function(startcol, text) {
  startcol = startcol || 0;
  return text.replace(new RegExp('^[\t ]{0,' + startcol + '}', 'gm'), ''); 
};

Lexer.prototype.store_keyword_content = function(event, data, p, eof) {
  var end_point = (!this.next_keyword_start || (p == eof)) ? p : this.next_keyword_start;
  var content = this.unindent(this.start_col + 2, this.bytesToString(data.slice(this.content_start, end_point))).replace(/\s+$/,"");
  var content_lines = content.split("\n")
  var name = content_lines.shift() || "";
  name = name.trim();
  var description = content_lines.join("\n");
  this.listener[event](this.keyword, name, description, this.current_line);
  var nks = this.next_keyword_start;
  this.next_keyword_start = null;
  return nks ? nks - 1 : p;
};

Lexer.prototype.current_line_content = function(data, p) {
  var rest = Array.prototype.slice.call(data,this.last_newline, -1);
  var end = rest.indexOf(10) || -1;
  return this.bytesToString(rest.slice(0, end)).trim();
};

// Node.js export
if(typeof module !== 'undefined') {
  module.exports = Lexer;
}
// Require.js export
if (typeof define !== 'undefined') {
  if(define.amd) {
    define('gherkin/lexer/pa', [], function() {
      return Lexer;
    });
  } else {
    define('gherkin/lexer/pa', function(require, exports, module) {
      exports.Lexer = Lexer;
    });
  }
}

})();

}).call(this,require("buffer").Buffer)

},{"buffer":69}],224:[function(require,module,exports){
(function (Buffer){

/* line 1 "ragel/i18n/pl.js.rl" */
;(function() {


/* line 126 "ragel/i18n/pl.js.rl" */



/* line 11 "js/lib/gherkin/lexer/pl.js" */
var _lexer_actions = [
	0, 1, 0, 1, 1, 1, 2, 1, 
	3, 1, 4, 1, 5, 1, 6, 1, 
	7, 1, 8, 1, 9, 1, 10, 1, 
	11, 1, 12, 1, 13, 1, 16, 1, 
	17, 1, 18, 1, 19, 1, 20, 1, 
	21, 1, 22, 1, 23, 2, 2, 18, 
	2, 3, 4, 2, 13, 0, 2, 14, 
	15, 2, 17, 0, 2, 17, 1, 2, 
	17, 16, 2, 17, 19, 2, 18, 6, 
	2, 18, 7, 2, 18, 8, 2, 18, 
	9, 2, 18, 10, 2, 18, 16, 2, 
	20, 21, 2, 22, 0, 2, 22, 1, 
	2, 22, 16, 2, 22, 19, 3, 4, 
	14, 15, 3, 5, 14, 15, 3, 11, 
	14, 15, 3, 12, 14, 15, 3, 13, 
	14, 15, 3, 14, 15, 18, 3, 17, 
	0, 11, 3, 17, 14, 15, 4, 2, 
	14, 15, 18, 4, 3, 4, 14, 15, 
	4, 17, 0, 14, 15, 5, 17, 0, 
	11, 14, 15
];

var _lexer_key_offsets = [
	0, 0, 23, 45, 46, 47, 49, 51, 
	56, 61, 66, 71, 75, 79, 81, 82, 
	83, 84, 85, 86, 87, 88, 89, 90, 
	91, 92, 93, 94, 95, 96, 97, 99, 
	101, 106, 113, 118, 120, 121, 122, 123, 
	124, 125, 126, 127, 128, 141, 143, 145, 
	147, 149, 151, 153, 155, 157, 159, 161, 
	163, 165, 167, 169, 171, 173, 175, 177, 
	179, 181, 203, 204, 205, 206, 207, 208, 
	209, 210, 211, 212, 213, 215, 216, 217, 
	218, 219, 220, 221, 222, 223, 224, 225, 
	226, 227, 228, 230, 231, 232, 233, 234, 
	235, 236, 237, 238, 239, 240, 241, 242, 
	243, 244, 245, 246, 247, 248, 249, 250, 
	251, 252, 253, 254, 255, 256, 266, 268, 
	270, 272, 274, 276, 278, 280, 282, 284, 
	286, 288, 290, 292, 294, 296, 298, 300, 
	302, 304, 306, 308, 310, 312, 314, 316, 
	318, 320, 322, 324, 326, 328, 330, 332, 
	334, 336, 338, 340, 342, 344, 346, 348, 
	350, 351, 352, 353, 354, 355, 356, 357, 
	358, 359, 360, 361, 381, 383, 385, 387, 
	389, 391, 393, 395, 397, 399, 401, 403, 
	405, 407, 409, 411, 414, 416, 418, 420, 
	422, 424, 426, 428, 430, 432, 434, 436, 
	438, 440, 442, 444, 446, 449, 451, 453, 
	455, 457, 459, 461, 463, 465, 467, 469, 
	471, 473, 475, 477, 479, 481, 483, 485, 
	487, 489, 491, 493, 495, 497, 499, 501, 
	503, 505, 507, 510, 512, 514, 516, 518, 
	520, 522, 524, 526, 528, 530, 532, 534, 
	536, 538, 540, 542, 544, 546, 548, 550, 
	552, 554, 556, 558, 561, 563, 565, 567, 
	569, 571, 573, 575, 577, 579, 581, 583, 
	585, 587, 590, 592, 594, 596, 598, 600, 
	602, 604, 606, 608, 610, 612, 613, 614, 
	615, 616, 617, 618, 619, 620, 621, 622, 
	623, 624, 625, 626, 627, 628, 629, 630, 
	631, 632, 652, 654, 656, 658, 660, 662, 
	664, 666, 668, 670, 672, 674, 676, 678, 
	680, 682, 685, 687, 689, 691, 693, 695, 
	697, 699, 701, 703, 705, 707, 709, 711, 
	713, 715, 717, 720, 722, 724, 726, 728, 
	730, 732, 734, 736, 738, 740, 742, 744, 
	746, 748, 750, 752, 754, 756, 758, 760, 
	762, 764, 766, 768, 770, 772, 774, 776, 
	778, 780, 782, 784, 786, 788, 790, 792, 
	794, 796, 799, 801, 803, 805, 807, 809, 
	811, 813, 815, 817, 819, 821, 823, 825, 
	827, 829, 831, 833, 835, 837, 838, 839, 
	840, 841, 842, 843, 844, 845, 846, 847, 
	848, 849, 850, 852, 853, 854, 855, 856, 
	857, 858, 859, 860, 861, 862, 863, 883, 
	885, 887, 889, 891, 893, 895, 897, 899, 
	901, 903, 905, 907, 909, 911, 913, 916, 
	918, 920, 922, 924, 926, 928, 930, 932, 
	934, 936, 938, 940, 942, 944, 946, 948, 
	951, 953, 955, 957, 959, 961, 963, 965, 
	967, 969, 971, 973, 975, 977, 979, 981, 
	983, 985, 987, 989, 991, 993, 995, 997, 
	999, 1001, 1003, 1005, 1007, 1009, 1012, 1014, 
	1016, 1018, 1020, 1022, 1024, 1026, 1028, 1030, 
	1032, 1034, 1036, 1038, 1040, 1042, 1044, 1046, 
	1048, 1050, 1052, 1054, 1056, 1058, 1060, 1063, 
	1065, 1067, 1069, 1071, 1073, 1075, 1077, 1079, 
	1081, 1083, 1085, 1087, 1089, 1091, 1093, 1095, 
	1097, 1099, 1100, 1101, 1102, 1103, 1107, 1113, 
	1116, 1118, 1124, 1146, 1148, 1150, 1152, 1154, 
	1156, 1158, 1161, 1163, 1165, 1167, 1169, 1171, 
	1173, 1175, 1177, 1179, 1181, 1183, 1185, 1187, 
	1189, 1191, 1193, 1195, 1197, 1199, 1201, 1203, 
	1205, 1207, 1210, 1212, 1214, 1216, 1218, 1220, 
	1222, 1224, 1226, 1228, 1230, 1232, 1234, 1236, 
	1238, 1240, 1242, 1244, 1246, 1248, 1250, 1252, 
	1254, 1256, 1258, 1260, 1262, 1264, 1266, 1268, 
	1270, 1272, 1274, 1276, 1278, 1280, 1282, 1284, 
	1286, 1288, 1290, 1292, 1294, 1296, 1298, 1300, 
	1302, 1303, 1304
];

var _lexer_trans_keys = [
	10, 32, 34, 35, 37, 42, 64, 65, 
	70, 71, 73, 74, 75, 77, 79, 80, 
	83, 87, 90, 124, 239, 9, 13, 10, 
	32, 34, 35, 37, 42, 64, 65, 70, 
	71, 73, 74, 75, 77, 79, 80, 83, 
	87, 90, 124, 9, 13, 34, 34, 10, 
	13, 10, 13, 10, 32, 34, 9, 13, 
	10, 32, 34, 9, 13, 10, 32, 34, 
	9, 13, 10, 32, 34, 9, 13, 10, 
	32, 9, 13, 10, 32, 9, 13, 10, 
	13, 10, 95, 70, 69, 65, 84, 85, 
	82, 69, 95, 69, 78, 68, 95, 37, 
	32, 10, 13, 10, 13, 13, 32, 64, 
	9, 10, 9, 10, 13, 32, 64, 11, 
	12, 10, 32, 64, 9, 13, 108, 115, 
	101, 112, 101, 107, 116, 58, 10, 10, 
	10, 32, 35, 37, 64, 65, 70, 80, 
	83, 87, 90, 9, 13, 10, 95, 10, 
	70, 10, 69, 10, 65, 10, 84, 10, 
	85, 10, 82, 10, 69, 10, 95, 10, 
	69, 10, 78, 10, 68, 10, 95, 10, 
	37, 10, 115, 10, 112, 10, 101, 10, 
	107, 10, 116, 10, 58, 10, 32, 34, 
	35, 37, 42, 64, 65, 70, 71, 73, 
	74, 75, 77, 79, 80, 83, 87, 90, 
	124, 9, 13, 117, 110, 107, 99, 106, 
	97, 100, 121, 101, -59, -101, -68, 108, 
	105, 101, 105, 101, 97, 106, -60, -123, 
	99, 114, 97, 122, 111, 114, 116, 114, 
	122, 101, 98, 97, 32, 98, 105, 122, 
	110, 101, 115, 111, 119, 122, 121, 107, 
	-59, -126, 97, 100, 121, 58, 10, 10, 
	10, 32, 35, 65, 70, 80, 87, 124, 
	9, 13, 10, 115, 10, 112, 10, 101, 
	10, 107, 10, 116, 10, 58, 10, 117, 
	10, 110, 10, 107, 10, 99, 10, 106, 
	10, 97, 10, 111, 10, 116, 10, 114, 
	10, 122, 10, 101, 10, 98, 10, 97, 
	10, 32, 10, 98, 10, 105, 10, 122, 
	10, 110, 10, 101, 10, 115, 10, 111, 
	10, 119, -59, 10, -126, 10, 10, 97, 
	-59, 10, -101, 10, 10, 99, 10, 105, 
	10, 119, 10, 111, -59, 10, -101, 10, 
	-60, 10, -121, 10, 99, 122, 101, 110, 
	97, 114, 105, 117, 115, 122, 58, 10, 
	10, 10, 32, 35, 37, 42, 64, 65, 
	70, 71, 73, 74, 75, 77, 79, 80, 
	83, 87, 90, 9, 13, 10, 95, 10, 
	70, 10, 69, 10, 65, 10, 84, 10, 
	85, 10, 82, 10, 69, 10, 95, 10, 
	69, 10, 78, 10, 68, 10, 95, 10, 
	37, 10, 32, 10, 108, 115, 10, 101, 
	10, 112, 10, 101, 10, 107, 10, 116, 
	10, 58, 10, 117, 10, 110, 10, 107, 
	10, 99, 10, 106, 10, 97, 10, 100, 
	10, 121, 10, 101, -59, 10, -101, -68, 
	10, 10, 108, 10, 105, 10, 101, 10, 
	105, 10, 101, 10, 97, 10, 106, -60, 
	10, -123, 10, 10, 99, 10, 114, 10, 
	97, 10, 122, 10, 111, 10, 116, 10, 
	114, 10, 122, 10, 101, 10, 98, 10, 
	97, 10, 32, 10, 98, 10, 105, 10, 
	122, 10, 110, 10, 101, 10, 115, 10, 
	111, 10, 119, 10, 99, 122, 10, 101, 
	10, 110, 10, 97, 10, 114, 10, 105, 
	10, 117, 10, 115, 10, 122, 10, 97, 
	10, 98, 10, 108, 10, 111, 10, 110, 
	10, 32, 10, 115, 10, 99, 10, 101, 
	10, 110, 10, 97, 10, 114, 10, 105, 
	10, 117, 10, 115, 10, 122, -59, 10, 
	116, -126, 10, 10, 97, -59, 10, -101, 
	10, 10, 99, 10, 105, 10, 119, 10, 
	111, -59, 10, -101, 10, -60, 10, -121, 
	10, 10, 97, -59, 10, 107, -126, 10, 
	10, 111, -59, 10, -68, 10, 10, 101, 
	10, 110, 10, 105, -59, 10, -126, 10, 
	10, 97, 10, 100, 97, 98, 108, 111, 
	110, 32, 115, 99, 101, 110, 97, 114, 
	105, 117, 115, 122, 97, 58, 10, 10, 
	10, 32, 35, 37, 42, 64, 65, 70, 
	71, 73, 74, 75, 77, 79, 80, 83, 
	87, 90, 9, 13, 10, 95, 10, 70, 
	10, 69, 10, 65, 10, 84, 10, 85, 
	10, 82, 10, 69, 10, 95, 10, 69, 
	10, 78, 10, 68, 10, 95, 10, 37, 
	10, 32, 10, 108, 115, 10, 101, 10, 
	112, 10, 101, 10, 107, 10, 116, 10, 
	58, 10, 117, 10, 110, 10, 107, 10, 
	99, 10, 106, 10, 97, 10, 100, 10, 
	121, 10, 101, -59, 10, -101, -68, 10, 
	10, 108, 10, 105, 10, 101, 10, 105, 
	10, 101, 10, 97, 10, 106, -60, 10, 
	-123, 10, 10, 99, 10, 114, 10, 97, 
	10, 122, 10, 111, 10, 116, 10, 114, 
	10, 122, 10, 101, 10, 98, 10, 97, 
	10, 32, 10, 98, 10, 105, 10, 122, 
	10, 110, 10, 101, 10, 115, 10, 111, 
	10, 119, 10, 99, 10, 101, 10, 110, 
	10, 97, 10, 114, 10, 105, 10, 117, 
	10, 115, 10, 122, -59, 10, 116, -126, 
	10, 10, 97, -59, 10, -101, 10, 10, 
	99, 10, 105, 10, 119, 10, 111, -59, 
	10, -101, 10, -60, 10, -121, 10, 10, 
	97, 10, 107, -59, 10, -126, 10, 10, 
	97, 10, 100, -59, 116, -126, 97, -59, 
	-101, 99, 105, 119, 111, -59, -101, -60, 
	-121, 97, -59, 107, -126, 111, -59, -68, 
	101, 110, 105, 97, 58, 10, 10, 10, 
	32, 35, 37, 42, 64, 65, 70, 71, 
	73, 74, 75, 77, 79, 80, 83, 87, 
	90, 9, 13, 10, 95, 10, 70, 10, 
	69, 10, 65, 10, 84, 10, 85, 10, 
	82, 10, 69, 10, 95, 10, 69, 10, 
	78, 10, 68, 10, 95, 10, 37, 10, 
	32, 10, 108, 115, 10, 101, 10, 112, 
	10, 101, 10, 107, 10, 116, 10, 58, 
	10, 117, 10, 110, 10, 107, 10, 99, 
	10, 106, 10, 97, 10, 100, 10, 121, 
	10, 101, -59, 10, -101, -68, 10, 10, 
	108, 10, 105, 10, 101, 10, 105, 10, 
	101, 10, 97, 10, 106, -60, 10, -123, 
	10, 10, 99, 10, 114, 10, 97, 10, 
	122, 10, 111, 10, 116, 10, 114, 10, 
	122, 10, 101, 10, 98, 10, 97, 10, 
	32, 10, 98, 10, 105, 10, 122, 10, 
	110, 10, 101, 10, 115, 10, 111, 10, 
	119, 10, 99, 122, 10, 101, 10, 110, 
	10, 97, 10, 114, 10, 105, 10, 117, 
	10, 115, 10, 122, 10, 97, 10, 98, 
	10, 108, 10, 111, 10, 110, 10, 32, 
	10, 115, 10, 99, 10, 101, 10, 110, 
	10, 97, 10, 114, 10, 105, 10, 117, 
	10, 115, 10, 122, -59, 10, 116, -126, 
	10, 10, 97, -59, 10, -101, 10, 10, 
	99, 10, 105, 10, 119, 10, 111, -59, 
	10, -101, 10, -60, 10, -121, 10, 10, 
	97, 10, 107, -59, 10, -126, 10, 10, 
	97, 10, 100, -59, -126, 97, 100, 32, 
	124, 9, 13, 10, 32, 92, 124, 9, 
	13, 10, 92, 124, 10, 92, 10, 32, 
	92, 124, 9, 13, 10, 32, 34, 35, 
	37, 42, 64, 65, 70, 71, 73, 74, 
	75, 77, 79, 80, 83, 87, 90, 124, 
	9, 13, 10, 117, 10, 110, 10, 107, 
	10, 99, 10, 106, 10, 97, 10, 111, 
	114, 10, 116, 10, 114, 10, 122, 10, 
	101, 10, 98, 10, 97, 10, 32, 10, 
	98, 10, 105, 10, 122, 10, 110, 10, 
	101, 10, 115, 10, 111, 10, 119, 10, 
	122, 10, 121, 10, 107, -59, 10, -126, 
	10, 10, 97, 10, 100, 10, 121, 10, 
	99, 122, 10, 101, 10, 110, 10, 97, 
	10, 114, 10, 105, 10, 117, 10, 115, 
	10, 122, 10, 97, 10, 98, 10, 108, 
	10, 111, 10, 110, 10, 32, 10, 115, 
	10, 99, 10, 101, 10, 110, 10, 97, 
	10, 114, 10, 105, 10, 117, 10, 115, 
	10, 122, -59, 10, -126, 10, 10, 97, 
	-59, 10, -101, 10, 10, 99, 10, 105, 
	10, 119, 10, 111, -59, 10, -101, 10, 
	-60, 10, -121, 10, 10, 97, -59, 10, 
	-126, 10, 10, 111, -59, 10, -68, 10, 
	10, 101, 10, 110, 10, 105, 187, 191, 
	0
];

var _lexer_single_lengths = [
	0, 21, 20, 1, 1, 2, 2, 3, 
	3, 3, 3, 2, 2, 2, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 2, 2, 
	3, 5, 3, 2, 1, 1, 1, 1, 
	1, 1, 1, 1, 11, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 20, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 2, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 2, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 8, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 18, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 3, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 3, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 3, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 3, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 3, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 18, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 3, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 3, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 3, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 2, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 18, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 3, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 3, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 3, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 3, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 1, 1, 1, 1, 2, 4, 3, 
	2, 4, 20, 2, 2, 2, 2, 2, 
	2, 3, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 3, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	1, 1, 0
];

var _lexer_range_lengths = [
	0, 1, 1, 0, 0, 0, 0, 1, 
	1, 1, 1, 1, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 1, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 1, 0, 
	0, 1, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0
];

var _lexer_index_offsets = [
	0, 0, 23, 45, 47, 49, 52, 55, 
	60, 65, 70, 75, 79, 83, 86, 88, 
	90, 92, 94, 96, 98, 100, 102, 104, 
	106, 108, 110, 112, 114, 116, 118, 121, 
	124, 129, 136, 141, 144, 146, 148, 150, 
	152, 154, 156, 158, 160, 173, 176, 179, 
	182, 185, 188, 191, 194, 197, 200, 203, 
	206, 209, 212, 215, 218, 221, 224, 227, 
	230, 233, 255, 257, 259, 261, 263, 265, 
	267, 269, 271, 273, 275, 278, 280, 282, 
	284, 286, 288, 290, 292, 294, 296, 298, 
	300, 302, 304, 307, 309, 311, 313, 315, 
	317, 319, 321, 323, 325, 327, 329, 331, 
	333, 335, 337, 339, 341, 343, 345, 347, 
	349, 351, 353, 355, 357, 359, 369, 372, 
	375, 378, 381, 384, 387, 390, 393, 396, 
	399, 402, 405, 408, 411, 414, 417, 420, 
	423, 426, 429, 432, 435, 438, 441, 444, 
	447, 450, 453, 456, 459, 462, 465, 468, 
	471, 474, 477, 480, 483, 486, 489, 492, 
	495, 497, 499, 501, 503, 505, 507, 509, 
	511, 513, 515, 517, 537, 540, 543, 546, 
	549, 552, 555, 558, 561, 564, 567, 570, 
	573, 576, 579, 582, 586, 589, 592, 595, 
	598, 601, 604, 607, 610, 613, 616, 619, 
	622, 625, 628, 631, 634, 638, 641, 644, 
	647, 650, 653, 656, 659, 662, 665, 668, 
	671, 674, 677, 680, 683, 686, 689, 692, 
	695, 698, 701, 704, 707, 710, 713, 716, 
	719, 722, 725, 729, 732, 735, 738, 741, 
	744, 747, 750, 753, 756, 759, 762, 765, 
	768, 771, 774, 777, 780, 783, 786, 789, 
	792, 795, 798, 801, 805, 808, 811, 814, 
	817, 820, 823, 826, 829, 832, 835, 838, 
	841, 844, 848, 851, 854, 857, 860, 863, 
	866, 869, 872, 875, 878, 881, 883, 885, 
	887, 889, 891, 893, 895, 897, 899, 901, 
	903, 905, 907, 909, 911, 913, 915, 917, 
	919, 921, 941, 944, 947, 950, 953, 956, 
	959, 962, 965, 968, 971, 974, 977, 980, 
	983, 986, 990, 993, 996, 999, 1002, 1005, 
	1008, 1011, 1014, 1017, 1020, 1023, 1026, 1029, 
	1032, 1035, 1038, 1042, 1045, 1048, 1051, 1054, 
	1057, 1060, 1063, 1066, 1069, 1072, 1075, 1078, 
	1081, 1084, 1087, 1090, 1093, 1096, 1099, 1102, 
	1105, 1108, 1111, 1114, 1117, 1120, 1123, 1126, 
	1129, 1132, 1135, 1138, 1141, 1144, 1147, 1150, 
	1153, 1156, 1160, 1163, 1166, 1169, 1172, 1175, 
	1178, 1181, 1184, 1187, 1190, 1193, 1196, 1199, 
	1202, 1205, 1208, 1211, 1214, 1217, 1219, 1221, 
	1223, 1225, 1227, 1229, 1231, 1233, 1235, 1237, 
	1239, 1241, 1243, 1246, 1248, 1250, 1252, 1254, 
	1256, 1258, 1260, 1262, 1264, 1266, 1268, 1288, 
	1291, 1294, 1297, 1300, 1303, 1306, 1309, 1312, 
	1315, 1318, 1321, 1324, 1327, 1330, 1333, 1337, 
	1340, 1343, 1346, 1349, 1352, 1355, 1358, 1361, 
	1364, 1367, 1370, 1373, 1376, 1379, 1382, 1385, 
	1389, 1392, 1395, 1398, 1401, 1404, 1407, 1410, 
	1413, 1416, 1419, 1422, 1425, 1428, 1431, 1434, 
	1437, 1440, 1443, 1446, 1449, 1452, 1455, 1458, 
	1461, 1464, 1467, 1470, 1473, 1476, 1480, 1483, 
	1486, 1489, 1492, 1495, 1498, 1501, 1504, 1507, 
	1510, 1513, 1516, 1519, 1522, 1525, 1528, 1531, 
	1534, 1537, 1540, 1543, 1546, 1549, 1552, 1556, 
	1559, 1562, 1565, 1568, 1571, 1574, 1577, 1580, 
	1583, 1586, 1589, 1592, 1595, 1598, 1601, 1604, 
	1607, 1610, 1612, 1614, 1616, 1618, 1622, 1628, 
	1632, 1635, 1641, 1663, 1666, 1669, 1672, 1675, 
	1678, 1681, 1685, 1688, 1691, 1694, 1697, 1700, 
	1703, 1706, 1709, 1712, 1715, 1718, 1721, 1724, 
	1727, 1730, 1733, 1736, 1739, 1742, 1745, 1748, 
	1751, 1754, 1758, 1761, 1764, 1767, 1770, 1773, 
	1776, 1779, 1782, 1785, 1788, 1791, 1794, 1797, 
	1800, 1803, 1806, 1809, 1812, 1815, 1818, 1821, 
	1824, 1827, 1830, 1833, 1836, 1839, 1842, 1845, 
	1848, 1851, 1854, 1857, 1860, 1863, 1866, 1869, 
	1872, 1875, 1878, 1881, 1884, 1887, 1890, 1893, 
	1896, 1898, 1900
];

var _lexer_indicies = [
	2, 1, 3, 4, 5, 6, 7, 8, 
	9, 10, 6, 11, 12, 13, 14, 15, 
	16, 17, 18, 19, 20, 1, 0, 2, 
	1, 3, 4, 5, 6, 7, 8, 9, 
	10, 6, 11, 12, 13, 14, 15, 16, 
	17, 18, 19, 1, 0, 21, 0, 22, 
	0, 24, 25, 23, 27, 28, 26, 31, 
	30, 32, 30, 29, 35, 34, 36, 34, 
	33, 35, 34, 37, 34, 33, 35, 34, 
	38, 34, 33, 40, 39, 39, 0, 2, 
	41, 41, 0, 43, 44, 42, 2, 0, 
	45, 0, 46, 0, 47, 0, 48, 0, 
	49, 0, 50, 0, 51, 0, 52, 0, 
	53, 0, 54, 0, 55, 0, 56, 0, 
	57, 0, 58, 0, 59, 0, 61, 62, 
	60, 64, 65, 63, 0, 0, 0, 0, 
	66, 67, 68, 67, 67, 70, 69, 66, 
	2, 71, 7, 71, 0, 72, 73, 0, 
	74, 0, 75, 0, 76, 0, 77, 0, 
	78, 0, 79, 0, 81, 80, 83, 82, 
	83, 84, 85, 86, 85, 87, 88, 89, 
	90, 91, 92, 84, 82, 83, 93, 82, 
	83, 94, 82, 83, 95, 82, 83, 96, 
	82, 83, 97, 82, 83, 98, 82, 83, 
	99, 82, 83, 100, 82, 83, 101, 82, 
	83, 102, 82, 83, 103, 82, 83, 104, 
	82, 83, 105, 82, 83, 106, 82, 83, 
	107, 82, 83, 108, 82, 83, 109, 82, 
	83, 110, 82, 83, 111, 82, 83, 112, 
	82, 114, 113, 115, 116, 117, 118, 119, 
	120, 121, 122, 118, 123, 124, 125, 126, 
	127, 128, 129, 130, 131, 113, 0, 132, 
	0, 133, 0, 134, 0, 135, 0, 136, 
	0, 78, 0, 137, 0, 74, 0, 138, 
	0, 139, 0, 140, 141, 0, 142, 0, 
	74, 0, 140, 0, 143, 0, 144, 0, 
	145, 0, 146, 0, 147, 0, 148, 0, 
	74, 0, 149, 0, 150, 0, 74, 0, 
	151, 152, 0, 153, 0, 154, 0, 155, 
	0, 156, 0, 157, 0, 158, 0, 159, 
	0, 160, 0, 161, 0, 162, 0, 163, 
	0, 164, 0, 165, 0, 166, 0, 136, 
	0, 167, 0, 168, 0, 169, 0, 170, 
	0, 171, 0, 172, 0, 173, 0, 174, 
	0, 175, 0, 177, 176, 179, 178, 179, 
	180, 181, 182, 183, 184, 185, 181, 180, 
	178, 179, 186, 178, 179, 187, 178, 179, 
	188, 178, 179, 189, 178, 179, 190, 178, 
	179, 191, 178, 179, 192, 178, 179, 193, 
	178, 179, 194, 178, 179, 195, 178, 179, 
	196, 178, 179, 190, 178, 179, 197, 178, 
	179, 198, 178, 179, 199, 178, 179, 200, 
	178, 179, 201, 178, 179, 202, 178, 179, 
	203, 178, 179, 204, 178, 179, 205, 178, 
	179, 206, 178, 179, 207, 178, 179, 208, 
	178, 179, 209, 178, 179, 210, 178, 179, 
	211, 178, 179, 196, 178, 212, 179, 178, 
	213, 179, 178, 179, 214, 178, 215, 179, 
	178, 216, 179, 178, 179, 217, 178, 179, 
	218, 178, 179, 219, 178, 179, 220, 178, 
	221, 179, 178, 222, 179, 178, 223, 179, 
	178, 190, 179, 178, 224, 225, 0, 226, 
	0, 227, 0, 228, 0, 229, 0, 230, 
	0, 231, 0, 232, 0, 233, 0, 234, 
	0, 236, 235, 238, 237, 238, 239, 240, 
	241, 242, 240, 243, 244, 245, 242, 246, 
	247, 248, 249, 250, 251, 252, 253, 239, 
	237, 238, 254, 237, 238, 255, 237, 238, 
	256, 237, 238, 257, 237, 238, 258, 237, 
	238, 259, 237, 238, 260, 237, 238, 261, 
	237, 238, 262, 237, 238, 263, 237, 238, 
	264, 237, 238, 265, 237, 238, 266, 237, 
	238, 267, 237, 238, 268, 237, 238, 269, 
	270, 237, 238, 271, 237, 238, 272, 237, 
	238, 273, 237, 238, 274, 237, 238, 275, 
	237, 238, 268, 237, 238, 276, 237, 238, 
	277, 237, 238, 278, 237, 238, 279, 237, 
	238, 280, 237, 238, 275, 237, 238, 281, 
	237, 238, 271, 237, 238, 282, 237, 283, 
	238, 237, 284, 285, 238, 237, 238, 286, 
	237, 238, 271, 237, 238, 284, 237, 238, 
	287, 237, 238, 288, 237, 238, 289, 237, 
	238, 290, 237, 291, 238, 237, 292, 238, 
	237, 238, 271, 237, 238, 293, 237, 238, 
	294, 237, 238, 271, 237, 238, 295, 237, 
	238, 296, 237, 238, 297, 237, 238, 298, 
	237, 238, 299, 237, 238, 300, 237, 238, 
	301, 237, 238, 302, 237, 238, 303, 237, 
	238, 304, 237, 238, 305, 237, 238, 306, 
	237, 238, 307, 237, 238, 308, 237, 238, 
	309, 237, 238, 280, 237, 238, 310, 311, 
	237, 238, 312, 237, 238, 313, 237, 238, 
	314, 237, 238, 315, 237, 238, 316, 237, 
	238, 317, 237, 238, 318, 237, 238, 275, 
	237, 238, 319, 237, 238, 320, 237, 238, 
	321, 237, 238, 322, 237, 238, 323, 237, 
	238, 324, 237, 238, 325, 237, 238, 326, 
	237, 238, 327, 237, 238, 328, 237, 238, 
	329, 237, 238, 330, 237, 238, 331, 237, 
	238, 332, 237, 238, 333, 237, 238, 280, 
	237, 334, 238, 287, 237, 335, 238, 237, 
	238, 336, 237, 337, 238, 237, 338, 238, 
	237, 238, 339, 237, 238, 340, 237, 238, 
	341, 237, 238, 342, 237, 343, 238, 237, 
	344, 238, 237, 345, 238, 237, 275, 238, 
	237, 238, 346, 237, 347, 238, 348, 237, 
	349, 238, 237, 238, 350, 237, 351, 238, 
	237, 352, 238, 237, 238, 353, 237, 238, 
	354, 237, 238, 280, 237, 355, 238, 237, 
	356, 238, 237, 238, 357, 237, 238, 358, 
	237, 359, 0, 360, 0, 361, 0, 362, 
	0, 363, 0, 364, 0, 365, 0, 366, 
	0, 367, 0, 368, 0, 369, 0, 370, 
	0, 371, 0, 372, 0, 373, 0, 374, 
	0, 375, 0, 376, 0, 378, 377, 380, 
	379, 380, 381, 382, 383, 384, 382, 385, 
	386, 387, 384, 388, 389, 390, 391, 392, 
	393, 394, 395, 381, 379, 380, 396, 379, 
	380, 397, 379, 380, 398, 379, 380, 399, 
	379, 380, 400, 379, 380, 401, 379, 380, 
	402, 379, 380, 403, 379, 380, 404, 379, 
	380, 405, 379, 380, 406, 379, 380, 407, 
	379, 380, 408, 379, 380, 409, 379, 380, 
	410, 379, 380, 411, 412, 379, 380, 413, 
	379, 380, 414, 379, 380, 415, 379, 380, 
	416, 379, 380, 417, 379, 380, 410, 379, 
	380, 418, 379, 380, 419, 379, 380, 420, 
	379, 380, 421, 379, 380, 422, 379, 380, 
	417, 379, 380, 423, 379, 380, 413, 379, 
	380, 424, 379, 425, 380, 379, 426, 427, 
	380, 379, 380, 428, 379, 380, 413, 379, 
	380, 426, 379, 380, 429, 379, 380, 430, 
	379, 380, 431, 379, 380, 432, 379, 433, 
	380, 379, 434, 380, 379, 380, 413, 379, 
	380, 435, 379, 380, 436, 379, 380, 413, 
	379, 380, 437, 379, 380, 438, 379, 380, 
	439, 379, 380, 440, 379, 380, 441, 379, 
	380, 442, 379, 380, 443, 379, 380, 444, 
	379, 380, 445, 379, 380, 446, 379, 380, 
	447, 379, 380, 448, 379, 380, 449, 379, 
	380, 450, 379, 380, 451, 379, 380, 422, 
	379, 380, 452, 379, 380, 453, 379, 380, 
	454, 379, 380, 455, 379, 380, 456, 379, 
	380, 457, 379, 380, 458, 379, 380, 459, 
	379, 380, 417, 379, 460, 380, 429, 379, 
	461, 380, 379, 380, 462, 379, 463, 380, 
	379, 464, 380, 379, 380, 465, 379, 380, 
	466, 379, 380, 467, 379, 380, 468, 379, 
	469, 380, 379, 470, 380, 379, 471, 380, 
	379, 417, 380, 379, 380, 472, 379, 380, 
	473, 379, 474, 380, 379, 475, 380, 379, 
	380, 476, 379, 380, 477, 379, 478, 143, 
	0, 479, 0, 480, 0, 481, 0, 482, 
	0, 483, 0, 484, 0, 485, 0, 486, 
	0, 487, 0, 488, 0, 489, 0, 78, 
	0, 490, 0, 491, 492, 0, 493, 0, 
	494, 0, 495, 0, 496, 0, 497, 0, 
	498, 0, 499, 0, 500, 0, 501, 0, 
	503, 502, 505, 504, 505, 506, 507, 508, 
	509, 507, 510, 511, 512, 509, 513, 514, 
	515, 516, 517, 518, 519, 520, 506, 504, 
	505, 521, 504, 505, 522, 504, 505, 523, 
	504, 505, 524, 504, 505, 525, 504, 505, 
	526, 504, 505, 527, 504, 505, 528, 504, 
	505, 529, 504, 505, 530, 504, 505, 531, 
	504, 505, 532, 504, 505, 533, 504, 505, 
	534, 504, 505, 535, 504, 505, 536, 537, 
	504, 505, 538, 504, 505, 539, 504, 505, 
	540, 504, 505, 541, 504, 505, 542, 504, 
	505, 535, 504, 505, 543, 504, 505, 544, 
	504, 505, 545, 504, 505, 546, 504, 505, 
	547, 504, 505, 542, 504, 505, 548, 504, 
	505, 538, 504, 505, 549, 504, 550, 505, 
	504, 551, 552, 505, 504, 505, 553, 504, 
	505, 538, 504, 505, 551, 504, 505, 554, 
	504, 505, 555, 504, 505, 556, 504, 505, 
	557, 504, 558, 505, 504, 559, 505, 504, 
	505, 538, 504, 505, 560, 504, 505, 561, 
	504, 505, 538, 504, 505, 562, 504, 505, 
	563, 504, 505, 564, 504, 505, 565, 504, 
	505, 566, 504, 505, 567, 504, 505, 568, 
	504, 505, 569, 504, 505, 570, 504, 505, 
	571, 504, 505, 572, 504, 505, 573, 504, 
	505, 574, 504, 505, 575, 504, 505, 576, 
	504, 505, 547, 504, 505, 577, 578, 504, 
	505, 579, 504, 505, 580, 504, 505, 581, 
	504, 505, 582, 504, 505, 583, 504, 505, 
	584, 504, 505, 585, 504, 505, 542, 504, 
	505, 586, 504, 505, 587, 504, 505, 588, 
	504, 505, 589, 504, 505, 590, 504, 505, 
	591, 504, 505, 592, 504, 505, 593, 504, 
	505, 594, 504, 505, 595, 504, 505, 596, 
	504, 505, 597, 504, 505, 598, 504, 505, 
	599, 504, 505, 600, 504, 505, 547, 504, 
	601, 505, 554, 504, 602, 505, 504, 505, 
	603, 504, 604, 505, 504, 605, 505, 504, 
	505, 606, 504, 505, 607, 504, 505, 608, 
	504, 505, 609, 504, 610, 505, 504, 611, 
	505, 504, 612, 505, 504, 542, 505, 504, 
	505, 613, 504, 505, 614, 504, 615, 505, 
	504, 616, 505, 504, 505, 617, 504, 505, 
	618, 504, 619, 0, 620, 0, 621, 0, 
	622, 0, 623, 624, 623, 0, 627, 626, 
	628, 629, 626, 625, 0, 631, 632, 630, 
	0, 631, 630, 627, 633, 631, 632, 633, 
	630, 627, 634, 635, 636, 637, 638, 639, 
	640, 641, 642, 638, 643, 644, 645, 646, 
	647, 648, 649, 650, 651, 634, 0, 83, 
	652, 82, 83, 653, 82, 83, 654, 82, 
	83, 655, 82, 83, 656, 82, 83, 111, 
	82, 83, 657, 658, 82, 83, 659, 82, 
	83, 660, 82, 83, 661, 82, 83, 662, 
	82, 83, 663, 82, 83, 664, 82, 83, 
	665, 82, 83, 666, 82, 83, 667, 82, 
	83, 668, 82, 83, 669, 82, 83, 670, 
	82, 83, 671, 82, 83, 672, 82, 83, 
	656, 82, 83, 673, 82, 83, 674, 82, 
	83, 675, 82, 676, 83, 82, 677, 83, 
	82, 83, 678, 82, 83, 679, 82, 83, 
	111, 82, 83, 680, 681, 82, 83, 682, 
	82, 83, 683, 82, 83, 684, 82, 83, 
	685, 82, 83, 686, 82, 83, 687, 82, 
	83, 688, 82, 83, 111, 82, 83, 689, 
	82, 83, 690, 82, 83, 691, 82, 83, 
	692, 82, 83, 693, 82, 83, 694, 82, 
	83, 695, 82, 83, 696, 82, 83, 697, 
	82, 83, 698, 82, 83, 699, 82, 83, 
	700, 82, 83, 701, 82, 83, 702, 82, 
	83, 703, 82, 83, 656, 82, 704, 83, 
	82, 705, 83, 82, 83, 706, 82, 707, 
	83, 82, 708, 83, 82, 83, 709, 82, 
	83, 710, 82, 83, 711, 82, 83, 712, 
	82, 713, 83, 82, 714, 83, 82, 715, 
	83, 82, 111, 83, 82, 83, 716, 82, 
	717, 83, 82, 718, 83, 82, 83, 719, 
	82, 720, 83, 82, 721, 83, 82, 83, 
	722, 82, 83, 723, 82, 83, 656, 82, 
	724, 0, 1, 0, 725, 0
];

var _lexer_trans_targs = [
	0, 2, 2, 3, 13, 15, 29, 32, 
	35, 66, 72, 74, 80, 82, 87, 90, 
	159, 396, 409, 533, 616, 4, 5, 6, 
	7, 6, 6, 7, 6, 8, 8, 8, 
	9, 8, 8, 8, 9, 10, 11, 12, 
	2, 12, 13, 2, 14, 16, 17, 18, 
	19, 20, 21, 22, 23, 24, 25, 26, 
	27, 28, 618, 30, 31, 2, 14, 31, 
	2, 14, 33, 34, 2, 33, 32, 34, 
	36, 37, 29, 38, 39, 40, 41, 42, 
	43, 44, 43, 44, 44, 2, 45, 59, 
	539, 545, 569, 594, 607, 46, 47, 48, 
	49, 50, 51, 52, 53, 54, 55, 56, 
	57, 58, 2, 60, 61, 62, 63, 64, 
	65, 2, 2, 3, 13, 15, 29, 32, 
	35, 66, 72, 74, 80, 82, 87, 90, 
	159, 396, 409, 533, 67, 68, 69, 70, 
	71, 73, 75, 76, 77, 79, 78, 81, 
	72, 83, 84, 85, 86, 88, 89, 91, 
	106, 92, 93, 94, 95, 96, 97, 98, 
	99, 100, 101, 102, 103, 104, 105, 107, 
	108, 109, 110, 111, 112, 113, 114, 115, 
	116, 117, 116, 117, 117, 2, 118, 124, 
	130, 146, 119, 120, 121, 122, 123, 65, 
	125, 126, 127, 128, 129, 131, 132, 133, 
	134, 135, 136, 137, 138, 139, 140, 141, 
	142, 143, 144, 145, 147, 148, 149, 150, 
	151, 152, 153, 154, 155, 156, 157, 158, 
	160, 285, 161, 162, 163, 164, 165, 166, 
	167, 168, 169, 170, 171, 170, 171, 171, 
	2, 172, 186, 187, 194, 200, 202, 208, 
	210, 215, 218, 234, 259, 272, 173, 174, 
	175, 176, 177, 178, 179, 180, 181, 182, 
	183, 184, 185, 2, 65, 188, 189, 186, 
	190, 191, 192, 193, 195, 196, 197, 198, 
	199, 201, 203, 204, 205, 207, 206, 209, 
	200, 211, 212, 213, 214, 216, 217, 219, 
	220, 221, 222, 223, 224, 225, 226, 227, 
	228, 229, 230, 231, 232, 233, 235, 243, 
	236, 237, 238, 239, 240, 241, 242, 244, 
	245, 246, 247, 248, 249, 250, 251, 252, 
	253, 254, 255, 256, 257, 258, 260, 261, 
	262, 263, 264, 265, 266, 267, 268, 269, 
	270, 271, 273, 274, 281, 275, 276, 277, 
	278, 279, 280, 282, 283, 284, 210, 286, 
	287, 288, 289, 290, 291, 292, 293, 294, 
	295, 296, 297, 298, 299, 300, 301, 302, 
	303, 304, 305, 304, 305, 305, 2, 306, 
	320, 321, 328, 334, 336, 342, 344, 349, 
	352, 368, 377, 390, 307, 308, 309, 310, 
	311, 312, 313, 314, 315, 316, 317, 318, 
	319, 2, 65, 322, 323, 320, 324, 325, 
	326, 327, 329, 330, 331, 332, 333, 335, 
	337, 338, 339, 341, 340, 343, 334, 345, 
	346, 347, 348, 350, 351, 353, 354, 355, 
	356, 357, 358, 359, 360, 361, 362, 363, 
	364, 365, 366, 367, 369, 370, 371, 372, 
	373, 374, 375, 376, 378, 379, 380, 381, 
	382, 383, 384, 385, 386, 387, 388, 389, 
	391, 392, 393, 394, 395, 344, 397, 398, 
	399, 400, 401, 402, 403, 404, 405, 406, 
	407, 408, 410, 411, 529, 412, 413, 414, 
	415, 416, 417, 418, 419, 420, 421, 422, 
	421, 422, 422, 2, 423, 437, 438, 445, 
	451, 453, 459, 461, 466, 469, 485, 510, 
	523, 424, 425, 426, 427, 428, 429, 430, 
	431, 432, 433, 434, 435, 436, 2, 65, 
	439, 440, 437, 441, 442, 443, 444, 446, 
	447, 448, 449, 450, 452, 454, 455, 456, 
	458, 457, 460, 451, 462, 463, 464, 465, 
	467, 468, 470, 471, 472, 473, 474, 475, 
	476, 477, 478, 479, 480, 481, 482, 483, 
	484, 486, 494, 487, 488, 489, 490, 491, 
	492, 493, 495, 496, 497, 498, 499, 500, 
	501, 502, 503, 504, 505, 506, 507, 508, 
	509, 511, 512, 513, 514, 515, 516, 517, 
	518, 519, 520, 521, 522, 524, 525, 526, 
	527, 528, 461, 530, 531, 532, 82, 533, 
	534, 535, 537, 538, 536, 534, 535, 536, 
	534, 537, 538, 3, 13, 15, 29, 32, 
	35, 66, 72, 74, 80, 82, 87, 90, 
	159, 396, 409, 533, 540, 541, 542, 543, 
	544, 546, 561, 547, 548, 549, 550, 551, 
	552, 553, 554, 555, 556, 557, 558, 559, 
	560, 562, 563, 564, 565, 566, 567, 568, 
	570, 578, 571, 572, 573, 574, 575, 576, 
	577, 579, 580, 581, 582, 583, 584, 585, 
	586, 587, 588, 589, 590, 591, 592, 593, 
	595, 596, 597, 598, 599, 600, 601, 602, 
	603, 604, 605, 606, 608, 609, 610, 611, 
	612, 613, 614, 615, 617, 0
];

var _lexer_trans_actions = [
	43, 0, 54, 3, 1, 0, 29, 1, 
	29, 29, 29, 29, 29, 29, 29, 29, 
	29, 29, 29, 35, 0, 0, 0, 7, 
	139, 48, 0, 102, 9, 5, 45, 134, 
	45, 0, 33, 122, 33, 33, 0, 11, 
	106, 0, 0, 114, 25, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 57, 149, 126, 0, 
	110, 23, 0, 27, 118, 27, 51, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	57, 144, 0, 54, 0, 69, 33, 84, 
	84, 84, 84, 84, 84, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 13, 0, 0, 0, 0, 0, 
	13, 31, 130, 60, 57, 31, 63, 57, 
	63, 63, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 66, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	57, 144, 0, 54, 0, 81, 84, 84, 
	84, 84, 0, 0, 0, 0, 0, 21, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 57, 144, 0, 54, 0, 
	75, 33, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 17, 17, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 57, 144, 0, 54, 0, 78, 33, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 19, 19, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 57, 144, 
	0, 54, 0, 72, 33, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 15, 15, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 37, 37, 54, 37, 87, 0, 0, 
	39, 0, 0, 93, 90, 41, 96, 90, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 99, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0
];

var _lexer_eof_actions = [
	0, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43
];

var lexer_start = 1;
var lexer_first_final = 618;
var lexer_error = 0;

var lexer_en_main = 1;


/* line 129 "ragel/i18n/pl.js.rl" */

/* line 130 "ragel/i18n/pl.js.rl" */

/* line 131 "ragel/i18n/pl.js.rl" */

/* line 132 "ragel/i18n/pl.js.rl" */

var Lexer = function(listener) {
  // Check that listener has the required functions
  var events = ['comment', 'tag', 'feature', 'background', 'scenario', 'scenario_outline', 'examples', 'step', 'doc_string', 'row', 'eof'];
  for(var i=0, len=events.length; i<len; i++) {
    var event = events[i];
    if(typeof listener[event] != 'function') {
      throw new Error("Error. No " + event + " function exists on " + JSON.stringify(listener));
    }
  }
  this.listener = listener;
};

Lexer.prototype.scan = function(data) {
  var ending = "\n%_FEATURE_END_%";
  if(typeof data == 'string') {
    data = this.stringToBytes(data + ending);
  } else if(typeof Buffer != 'undefined' && Buffer.isBuffer(data)) {
    // Node.js
    var buf = new Buffer(data.length + ending.length);
    data.copy(buf, 0, 0);
    new Buffer(ending).copy(buf, data.length, 0);
    data = buf;
  }
  var eof = pe = data.length;
  var p = 0;

  this.line_number = 1;
  this.last_newline = 0;
  var signedCharValue=function(v){return v > 127 ? v-256 : v; };

  
/* line 1082 "js/lib/gherkin/lexer/pl.js" */
{
	  this.cs = lexer_start;
} /* JSCodeGen::writeInit */

/* line 164 "ragel/i18n/pl.js.rl" */
  
/* line 1089 "js/lib/gherkin/lexer/pl.js" */
{
	var _klen, _trans, _keys, _ps, _widec, _acts, _nacts;
	var _goto_level, _resume, _eof_trans, _again, _test_eof;
	var _out;
	_klen = _trans = _keys = _acts = _nacts = null;
	_goto_level = 0;
	_resume = 10;
	_eof_trans = 15;
	_again = 20;
	_test_eof = 30;
	_out = 40;
	while (true) {
	_trigger_goto = false;
	if (_goto_level <= 0) {
	if (p == pe) {
		_goto_level = _test_eof;
		continue;
	}
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	}
	if (_goto_level <= _resume) {
	_keys = _lexer_key_offsets[ this.cs];
	_trans = _lexer_index_offsets[ this.cs];
	_klen = _lexer_single_lengths[ this.cs];
	_break_match = false;
	
	do {
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + _klen - 1;

	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + ( (_upper - _lower) >> 1 );

	        if (( signedCharValue(data[p])) < _lexer_trans_keys[_mid]) {
	           _upper = _mid - 1;
	        } else if (( signedCharValue(data[p])) > _lexer_trans_keys[_mid]) {
	           _lower = _mid + 1;
	        } else {
	           _trans += (_mid - _keys);
	           _break_match = true;
	           break;
	        };
	     } /* while */
	     if (_break_match) { break; }
	     _keys += _klen;
	     _trans += _klen;
	  }
	  _klen = _lexer_range_lengths[ this.cs];
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + (_klen << 1) - 2;
	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + (((_upper-_lower) >> 1) & ~1);
	        if (( signedCharValue(data[p])) < _lexer_trans_keys[_mid]) {
	          _upper = _mid - 2;
	         } else if (( signedCharValue(data[p])) > _lexer_trans_keys[_mid+1]) {
	          _lower = _mid + 2;
	        } else {
	          _trans += ((_mid - _keys) >> 1);
	          _break_match = true;
	          break;
	        }
	     } /* while */
	     if (_break_match) { break; }
	     _trans += _klen
	  }
	} while (false);
	_trans = _lexer_indicies[_trans];
	 this.cs = _lexer_trans_targs[_trans];
	if (_lexer_trans_actions[_trans] != 0) {
		_acts = _lexer_trans_actions[_trans];
		_nacts = _lexer_actions[_acts];
		_acts += 1;
		while (_nacts > 0) {
			_nacts -= 1;
			_acts += 1;
			switch (_lexer_actions[_acts - 1]) {
case 0:
/* line 6 "ragel/i18n/pl.js.rl" */

    this.content_start = p;
    this.current_line = this.line_number;
    this.start_col = p - this.last_newline - (this.keyword+':').length;
  		break;
case 1:
/* line 12 "ragel/i18n/pl.js.rl" */

    this.current_line = this.line_number;
    this.start_col = p - this.last_newline;
  		break;
case 2:
/* line 17 "ragel/i18n/pl.js.rl" */

    this.content_start = p;
  		break;
case 3:
/* line 21 "ragel/i18n/pl.js.rl" */

    this.docstring_content_type_start = p;
  		break;
case 4:
/* line 25 "ragel/i18n/pl.js.rl" */

    this.docstring_content_type_end = p;
  		break;
case 5:
/* line 29 "ragel/i18n/pl.js.rl" */

    var con = this.unindent(
      this.start_col, 
      this.bytesToString(data.slice(this.content_start, this.next_keyword_start-1)).replace(/(\r?\n)?([\t ])*$/, '').replace(/\\\"\\\"\\\"/mg, '"""')
    );
    var con_type = this.bytesToString(data.slice(this.docstring_content_type_start, this.docstring_content_type_end)).trim();
    this.listener.doc_string(con_type, con, this.current_line); 
  		break;
case 6:
/* line 38 "ragel/i18n/pl.js.rl" */

    p = this.store_keyword_content('feature', data, p, eof);
  		break;
case 7:
/* line 42 "ragel/i18n/pl.js.rl" */

    p = this.store_keyword_content('background', data, p, eof);
  		break;
case 8:
/* line 46 "ragel/i18n/pl.js.rl" */

    p = this.store_keyword_content('scenario', data, p, eof);
  		break;
case 9:
/* line 50 "ragel/i18n/pl.js.rl" */

    p = this.store_keyword_content('scenario_outline', data, p, eof);
  		break;
case 10:
/* line 54 "ragel/i18n/pl.js.rl" */

    p = this.store_keyword_content('examples', data, p, eof);
  		break;
case 11:
/* line 58 "ragel/i18n/pl.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.step(this.keyword, con, this.current_line);
  		break;
case 12:
/* line 63 "ragel/i18n/pl.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.comment(con, this.line_number);
    this.keyword_start = null;
  		break;
case 13:
/* line 69 "ragel/i18n/pl.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.tag(con, this.line_number);
    this.keyword_start = null;
  		break;
case 14:
/* line 75 "ragel/i18n/pl.js.rl" */

    this.line_number++;
  		break;
case 15:
/* line 79 "ragel/i18n/pl.js.rl" */

    this.last_newline = p + 1;
  		break;
case 16:
/* line 83 "ragel/i18n/pl.js.rl" */

    this.keyword_start = this.keyword_start || p;
  		break;
case 17:
/* line 87 "ragel/i18n/pl.js.rl" */

    this.keyword = this.bytesToString(data.slice(this.keyword_start, p)).replace(/:$/, '');
    this.keyword_start = null;
  		break;
case 18:
/* line 92 "ragel/i18n/pl.js.rl" */

    this.next_keyword_start = p;
  		break;
case 19:
/* line 96 "ragel/i18n/pl.js.rl" */

    p = p - 1;
    current_row = [];
    this.current_line = this.line_number;
  		break;
case 20:
/* line 102 "ragel/i18n/pl.js.rl" */

    this.content_start = p;
  		break;
case 21:
/* line 106 "ragel/i18n/pl.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    current_row.push(con.replace(/\\\|/, "|").replace(/\\n/, "\n").replace(/\\\\/, "\\"));
  		break;
case 22:
/* line 111 "ragel/i18n/pl.js.rl" */

    this.listener.row(current_row, this.current_line);
  		break;
case 23:
/* line 115 "ragel/i18n/pl.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw new Error("Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.");
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 1316 "js/lib/gherkin/lexer/pl.js" */
			} /* action switch */
		}
	}
	if (_trigger_goto) {
		continue;
	}
	}
	if (_goto_level <= _again) {
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	p += 1;
	if (p != pe) {
		_goto_level = _resume;
		continue;
	}
	}
	if (_goto_level <= _test_eof) {
	if (p == eof) {
	__acts = _lexer_eof_actions[ this.cs];
	__nacts =  _lexer_actions[__acts];
	__acts += 1;
	while (__nacts > 0) {
		__nacts -= 1;
		__acts += 1;
		switch (_lexer_actions[__acts - 1]) {
case 23:
/* line 115 "ragel/i18n/pl.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw new Error("Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.");
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 1355 "js/lib/gherkin/lexer/pl.js" */
		} /* eof action switch */
	}
	if (_trigger_goto) {
		continue;
	}
}
	}
	if (_goto_level <= _out) {
		break;
	}
	}
	}

/* line 165 "ragel/i18n/pl.js.rl" */
};


/*
 * Decode utf-8 byte sequence to string.
 */
var decodeUtf8 = function(bytes) {
  var result = "";
  var i = 0;
  var wc;
  var c;

  while (i < bytes.length) {
    /* parse as UTF-8 lead byte */
    wc = bytes[i++];
    if (wc < 0x80) {
      count = 0;
    } else if (wc < 0xC2 || wc >= 0xF8) {
      throw new Error("input is not a valid UTF-8 lead octet");
    } else if (wc < 0xE0) {
      count = 1;
      wc = (wc & 0x1F) << 6;
    } else if (wc < 0xF0) {
      count = 2;
      wc = (wc & 0x0F) << 12;
    } else /* wc < 0xF8 */ {
      count = 3;
      wc = (wc & 0x07) << 18;
    }

    /* parse trail bytes, if any */
    while (count) {
      if (!(i < bytes.length)) {
        throw new Error("short read");
      }
      if ((c = bytes[i++] ^ 0x80) > 0x3F) {
        throw new Error("input is not a valid UTF-8 trail octet");
      }
      wc |= c << (6 * --count);
      if (wc < (1 << (5 * count + 6))) {
        throw new Error("invalid non-minimal encoded input");
      }
    }

    /* handle conversion to UTF-16 if needed */
    if (wc > 0xFFFF) {
      wc -= 0x10000;
      result += String.fromCharCode(0xD800 + (wc >> 10));
      wc = 0xDC00 + (wc & 0x3FF);
    }
    result += String.fromCharCode(wc);
  }

  return result;
};

/*
 * Encode string to an array of bytes using utf8 encoding.
 *
 * Javascript internally stores character data as utf16 (like java).
 * String.charCodeAt() does *not* produce unicode points, but simply
 * reflects this internal representation. Thus, it is necessary
 * to first decode the utf-16 representation before encoding to
 * utf-8.
 */
var encodeUtf8 = function(string) {
  var bytes = [];
  var i = 0;
  var j = 0;
  var wc;

  while (i < string.length) {
    wc = string.charCodeAt(i++);
    if (wc >= 0xD800 && wc <= 0xDBFF && i < string.length && string.charCodeAt(i) >= 0xDC00 && string.charCodeAt(i) <= 0xDFFF) {
      /* decode UTF-16 */
      wc = 0x10000 + ((wc & 0x3FF) << 10) + (string.charCodeAt(i++) & 0x3FF);
    }

    /* emit lead byte */
    if (wc < 0x80) {
      bytes[j++] = wc;
      count = 0;
    } else if (wc < 0x800) {
      bytes[j++] = 0xC0 | (wc >> 6);
      count = 1;
    } else if (wc < 0x10000) {
      bytes[j++] = 0xE0 | (wc >> 12);
      count = 2;
    } else {
      /* SMP: 21-bit Unicode */
      bytes[j++] = 0xF0 | (wc >> 18);
      count = 3;
    }

    /* emit trail bytes, if any */
    while (count) {
      bytes[j++] = 0x80 | ((wc >> (6 * --count)) & 0x3F);
    }
  }

  return bytes;

};

Lexer.prototype.bytesToString = function(bytes) {
  if(typeof bytes.write == 'function') {
    // Node.js
    return bytes.toString('utf-8');
  }
  return decodeUtf8(bytes);
};

Lexer.prototype.stringToBytes = function(string) {
  return encodeUtf8(string);
};

Lexer.prototype.unindent = function(startcol, text) {
  startcol = startcol || 0;
  return text.replace(new RegExp('^[\t ]{0,' + startcol + '}', 'gm'), ''); 
};

Lexer.prototype.store_keyword_content = function(event, data, p, eof) {
  var end_point = (!this.next_keyword_start || (p == eof)) ? p : this.next_keyword_start;
  var content = this.unindent(this.start_col + 2, this.bytesToString(data.slice(this.content_start, end_point))).replace(/\s+$/,"");
  var content_lines = content.split("\n")
  var name = content_lines.shift() || "";
  name = name.trim();
  var description = content_lines.join("\n");
  this.listener[event](this.keyword, name, description, this.current_line);
  var nks = this.next_keyword_start;
  this.next_keyword_start = null;
  return nks ? nks - 1 : p;
};

Lexer.prototype.current_line_content = function(data, p) {
  var rest = Array.prototype.slice.call(data,this.last_newline, -1);
  var end = rest.indexOf(10) || -1;
  return this.bytesToString(rest.slice(0, end)).trim();
};

// Node.js export
if(typeof module !== 'undefined') {
  module.exports = Lexer;
}
// Require.js export
if (typeof define !== 'undefined') {
  if(define.amd) {
    define('gherkin/lexer/pl', [], function() {
      return Lexer;
    });
  } else {
    define('gherkin/lexer/pl', function(require, exports, module) {
      exports.Lexer = Lexer;
    });
  }
}

})();

}).call(this,require("buffer").Buffer)

},{"buffer":69}],225:[function(require,module,exports){
(function (Buffer){

/* line 1 "ragel/i18n/pt.js.rl" */
;(function() {


/* line 126 "ragel/i18n/pt.js.rl" */



/* line 11 "js/lib/gherkin/lexer/pt.js" */
var _lexer_actions = [
	0, 1, 0, 1, 1, 1, 2, 1, 
	3, 1, 4, 1, 5, 1, 6, 1, 
	7, 1, 8, 1, 9, 1, 10, 1, 
	11, 1, 12, 1, 13, 1, 16, 1, 
	17, 1, 18, 1, 19, 1, 20, 1, 
	21, 1, 22, 1, 23, 2, 2, 18, 
	2, 3, 4, 2, 13, 0, 2, 14, 
	15, 2, 17, 0, 2, 17, 1, 2, 
	17, 16, 2, 17, 19, 2, 18, 6, 
	2, 18, 7, 2, 18, 8, 2, 18, 
	9, 2, 18, 10, 2, 18, 16, 2, 
	20, 21, 2, 22, 0, 2, 22, 1, 
	2, 22, 16, 2, 22, 19, 3, 4, 
	14, 15, 3, 5, 14, 15, 3, 11, 
	14, 15, 3, 12, 14, 15, 3, 13, 
	14, 15, 3, 14, 15, 18, 3, 17, 
	0, 11, 3, 17, 14, 15, 4, 2, 
	14, 15, 18, 4, 3, 4, 14, 15, 
	4, 17, 0, 14, 15, 5, 17, 0, 
	11, 14, 15
];

var _lexer_key_offsets = [
	0, 0, 17, 33, 34, 35, 37, 39, 
	44, 49, 54, 59, 63, 67, 69, 70, 
	71, 72, 73, 74, 75, 76, 77, 78, 
	79, 80, 81, 82, 83, 84, 85, 87, 
	89, 94, 101, 106, 109, 110, 111, 112, 
	113, 114, 115, 117, 118, 119, 120, 121, 
	122, 123, 124, 125, 126, 137, 139, 141, 
	143, 145, 147, 149, 151, 153, 155, 157, 
	159, 161, 163, 165, 169, 171, 173, 175, 
	177, 179, 181, 184, 186, 188, 190, 192, 
	194, 196, 198, 214, 216, 217, 219, 221, 
	222, 223, 224, 225, 226, 228, 229, 230, 
	231, 232, 233, 234, 235, 236, 237, 238, 
	239, 240, 241, 242, 243, 244, 245, 246, 
	247, 261, 263, 265, 267, 269, 271, 273, 
	275, 277, 279, 281, 283, 285, 287, 289, 
	291, 294, 296, 298, 300, 302, 304, 306, 
	309, 311, 313, 315, 317, 319, 321, 323, 
	325, 328, 330, 332, 334, 336, 338, 340, 
	343, 346, 349, 351, 354, 356, 358, 360, 
	362, 364, 366, 368, 370, 372, 374, 376, 
	378, 380, 382, 384, 386, 388, 390, 392, 
	394, 396, 397, 398, 399, 400, 401, 402, 
	403, 404, 405, 406, 410, 411, 413, 414, 
	415, 416, 417, 418, 419, 420, 421, 422, 
	423, 424, 425, 426, 427, 429, 430, 431, 
	432, 433, 434, 435, 436, 437, 438, 446, 
	448, 450, 452, 454, 456, 458, 460, 463, 
	465, 467, 469, 471, 473, 475, 477, 479, 
	481, 483, 485, 487, 489, 491, 493, 495, 
	497, 499, 501, 503, 504, 505, 507, 508, 
	509, 510, 511, 512, 513, 514, 515, 516, 
	517, 518, 519, 520, 521, 535, 537, 539, 
	541, 543, 545, 547, 549, 551, 553, 555, 
	557, 559, 561, 563, 565, 568, 570, 572, 
	574, 576, 578, 580, 583, 585, 587, 589, 
	591, 593, 595, 597, 599, 602, 604, 606, 
	608, 610, 613, 615, 618, 621, 623, 625, 
	627, 629, 631, 634, 636, 638, 640, 642, 
	644, 646, 648, 650, 652, 654, 656, 658, 
	660, 662, 664, 666, 668, 670, 672, 674, 
	676, 678, 682, 684, 687, 689, 691, 693, 
	695, 697, 699, 701, 703, 705, 707, 709, 
	711, 713, 715, 717, 719, 721, 723, 725, 
	727, 729, 731, 733, 735, 737, 739, 741, 
	743, 745, 747, 749, 751, 752, 753, 754, 
	755, 756, 757, 761, 767, 770, 772, 778, 
	794, 796, 799, 801, 803, 805, 807, 811, 
	813, 815, 817, 819, 821, 823, 825, 827, 
	829, 831, 833, 835, 837, 839, 841, 843, 
	845, 847, 849, 852, 854, 856, 858, 860, 
	862, 864, 866, 868, 870, 872, 874, 876, 
	878, 880, 882, 884, 886, 888, 890, 892, 
	894, 896, 898, 900, 902, 905, 907, 909, 
	911, 913, 915, 917, 919, 921, 923, 925, 
	927, 929, 932, 934, 936, 938, 940, 942, 
	944, 946, 948, 951, 953, 955, 957, 959, 
	961, 963, 965, 967, 969, 971, 972, 974, 
	975, 976, 977, 978, 981, 982, 983, 984, 
	985, 986, 987, 988, 989, 990, 1004, 1006, 
	1008, 1010, 1012, 1014, 1016, 1018, 1020, 1022, 
	1024, 1026, 1028, 1030, 1032, 1034, 1038, 1040, 
	1042, 1044, 1046, 1048, 1050, 1053, 1055, 1057, 
	1059, 1061, 1063, 1065, 1067, 1069, 1072, 1074, 
	1076, 1078, 1080, 1083, 1085, 1087, 1089, 1091, 
	1093, 1095, 1097, 1099, 1101, 1103, 1105, 1107, 
	1109, 1112, 1114, 1117, 1120, 1122, 1124, 1126, 
	1128, 1130, 1133, 1135, 1137, 1139, 1141, 1143, 
	1145, 1147, 1149, 1151, 1153, 1155, 1157, 1159, 
	1161, 1163, 1165, 1167, 1169, 1171, 1173, 1175, 
	1177, 1179, 1181, 1183, 1187, 1189, 1192, 1194, 
	1196, 1198, 1200, 1202, 1204, 1206, 1208, 1210, 
	1212, 1214, 1216, 1218, 1220, 1223, 1225, 1227, 
	1230, 1232, 1234, 1236, 1238, 1240, 1242, 1244, 
	1246, 1248, 1250, 1252, 1254, 1256, 1258, 1260, 
	1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269
];

var _lexer_trans_keys = [
	10, 32, 34, 35, 37, 42, 64, 67, 
	68, 69, 70, 77, 81, 124, 239, 9, 
	13, 10, 32, 34, 35, 37, 42, 64, 
	67, 68, 69, 70, 77, 81, 124, 9, 
	13, 34, 34, 10, 13, 10, 13, 10, 
	32, 34, 9, 13, 10, 32, 34, 9, 
	13, 10, 32, 34, 9, 13, 10, 32, 
	34, 9, 13, 10, 32, 9, 13, 10, 
	32, 9, 13, 10, 13, 10, 95, 70, 
	69, 65, 84, 85, 82, 69, 95, 69, 
	78, 68, 95, 37, 32, 10, 13, 10, 
	13, 13, 32, 64, 9, 10, 9, 10, 
	13, 32, 64, 11, 12, 10, 32, 64, 
	9, 13, 97, 101, 111, 114, 97, 99, 
	116, 101, 114, -61, 105, -83, 115, 116, 
	105, 99, 97, 58, 10, 10, 10, 32, 
	35, 37, 64, 67, 68, 69, 70, 9, 
	13, 10, 95, 10, 70, 10, 69, 10, 
	65, 10, 84, 10, 85, 10, 82, 10, 
	69, 10, 95, 10, 69, 10, 78, 10, 
	68, 10, 95, 10, 37, 10, 97, 101, 
	111, 10, 114, 10, 97, 10, 99, 10, 
	116, 10, 101, 10, 114, -61, 10, 105, 
	-83, 10, 10, 115, 10, 116, 10, 105, 
	10, 99, 10, 97, 10, 58, 10, 32, 
	34, 35, 37, 42, 64, 67, 68, 69, 
	70, 77, 81, 124, 9, 13, 97, 101, 
	100, 97, 111, 32, 115, 108, 105, 110, 
	101, 97, -61, 99, -89, -61, -93, 111, 
	32, 100, 111, 32, 67, 101, 110, -61, 
	-95, 114, 105, 111, 58, 10, 10, 10, 
	32, 35, 37, 42, 64, 67, 68, 69, 
	70, 77, 81, 9, 13, 10, 95, 10, 
	70, 10, 69, 10, 65, 10, 84, 10, 
	85, 10, 82, 10, 69, 10, 95, 10, 
	69, 10, 78, 10, 68, 10, 95, 10, 
	37, 10, 32, 10, 97, 101, 10, 114, 
	10, 97, 10, 99, 10, 116, 10, 101, 
	10, 114, -61, 10, 105, -83, 10, 10, 
	115, 10, 116, 10, 105, 10, 99, 10, 
	97, 10, 58, 10, 110, -61, 10, 97, 
	-95, 10, 10, 114, 10, 105, 10, 111, 
	10, 97, 10, 100, 10, 97, 111, 10, 
	32, 115, 10, 32, 110, 10, 116, -61, 
	10, 97, -93, 10, 10, 111, 10, 117, 
	10, 110, 10, 99, 10, 105, 10, 111, 
	10, 110, 10, 97, 10, 108, 10, 105, 
	10, 100, 10, 97, 10, 100, 10, 101, 
	10, 97, 10, 115, 10, 117, 10, 97, 
	10, 110, 10, 100, 97, 111, 32, 100, 
	111, 32, 67, 101, 110, 97, 32, 110, 
	115, 120, 116, -61, 97, -93, 111, 113, 
	117, 101, 109, 97, 32, 100, 111, 32, 
	67, 101, 110, -61, 97, 101, 109, 112, 
	108, 111, 115, 58, 10, 10, 10, 32, 
	35, 67, 70, 124, 9, 13, 10, 97, 
	10, 114, 10, 97, 10, 99, 10, 116, 
	10, 101, 10, 114, -61, 10, 105, -83, 
	10, 10, 115, 10, 116, 10, 105, 10, 
	99, 10, 97, 10, 58, 10, 117, 10, 
	110, 10, 99, 10, 105, 10, 111, 10, 
	110, 10, 97, 10, 108, 10, 105, 10, 
	100, 10, 97, 10, 100, 10, 101, 117, 
	110, 99, 100, 105, 111, 110, 97, 108, 
	105, 100, 97, 100, 101, 111, 58, 10, 
	10, 10, 32, 35, 37, 42, 64, 67, 
	68, 69, 70, 77, 81, 9, 13, 10, 
	95, 10, 70, 10, 69, 10, 65, 10, 
	84, 10, 85, 10, 82, 10, 69, 10, 
	95, 10, 69, 10, 78, 10, 68, 10, 
	95, 10, 37, 10, 32, 10, 97, 101, 
	10, 114, 10, 97, 10, 99, 10, 116, 
	10, 101, 10, 114, -61, 10, 105, -83, 
	10, 10, 115, 10, 116, 10, 105, 10, 
	99, 10, 97, 10, 58, 10, 110, -61, 
	10, 97, -95, 10, 10, 114, 10, 105, 
	10, 111, 10, 97, 101, 10, 100, 10, 
	97, 111, 10, 32, 115, 10, 108, 10, 
	105, 10, 110, 10, 101, 10, 97, -61, 
	10, 99, -89, 10, -61, 10, -93, 10, 
	10, 111, 10, 32, 10, 100, 10, 111, 
	10, 32, 10, 67, 10, 101, 10, 110, 
	-61, 10, 10, 97, 10, 111, 10, 32, 
	10, 100, 10, 111, 10, 32, 10, 67, 
	10, 101, 10, 110, 10, 97, 10, 32, 
	110, 115, 10, 116, -61, 10, 97, -93, 
	10, 10, 111, 10, 113, 10, 117, 10, 
	101, 10, 109, 10, 97, 10, 32, 10, 
	100, 10, 111, 10, 32, 10, 67, 10, 
	101, 10, 117, 10, 110, 10, 99, 10, 
	105, 10, 111, 10, 110, 10, 97, 10, 
	108, 10, 105, 10, 100, 10, 97, 10, 
	100, 10, 101, 10, 97, 10, 115, 10, 
	117, 10, 97, 10, 110, 10, 100, 97, 
	115, 117, 97, 110, 100, 32, 124, 9, 
	13, 10, 32, 92, 124, 9, 13, 10, 
	92, 124, 10, 92, 10, 32, 92, 124, 
	9, 13, 10, 32, 34, 35, 37, 42, 
	64, 67, 68, 69, 70, 77, 81, 124, 
	9, 13, 10, 110, -61, 10, 97, -95, 
	10, 10, 114, 10, 105, 10, 111, 10, 
	32, 58, 115, 10, 100, 10, 101, 10, 
	32, 10, 70, 10, 117, 10, 110, 10, 
	100, 10, 111, 10, 110, 10, 116, 10, 
	101, 10, 120, 10, 116, 10, 101, 10, 
	108, 10, 105, 10, 110, 10, 101, 10, 
	97, -61, 10, 99, -89, 10, -61, 10, 
	-93, 10, 10, 111, 10, 32, 10, 100, 
	10, 111, 10, 32, 10, 67, 10, 101, 
	10, 110, -61, 10, -95, 10, 10, 114, 
	10, 105, 10, 97, 10, 111, 10, 32, 
	10, 100, 10, 111, 10, 32, 10, 67, 
	10, 101, 10, 110, 10, 97, 10, 115, 
	120, 10, 113, 10, 117, 10, 101, 10, 
	109, 10, 97, 10, 32, 10, 100, 10, 
	111, 10, 32, 10, 67, 10, 101, 10, 
	110, -61, 10, 97, 10, 101, 10, 109, 
	10, 112, 10, 108, 10, 111, 10, 115, 
	10, 117, 10, 110, 10, 99, 100, 10, 
	105, 10, 111, 10, 110, 10, 97, 10, 
	108, 10, 105, 10, 100, 10, 97, 10, 
	100, 10, 101, 110, -61, 97, -95, 114, 
	105, 111, 32, 58, 115, 100, 101, 32, 
	70, 117, 110, 100, 10, 10, 10, 32, 
	35, 37, 42, 64, 67, 68, 69, 70, 
	77, 81, 9, 13, 10, 95, 10, 70, 
	10, 69, 10, 65, 10, 84, 10, 85, 
	10, 82, 10, 69, 10, 95, 10, 69, 
	10, 78, 10, 68, 10, 95, 10, 37, 
	10, 32, 10, 97, 101, 111, 10, 114, 
	10, 97, 10, 99, 10, 116, 10, 101, 
	10, 114, -61, 10, 105, -83, 10, 10, 
	115, 10, 116, 10, 105, 10, 99, 10, 
	97, 10, 58, 10, 110, -61, 10, 97, 
	-95, 10, 10, 114, 10, 105, 10, 111, 
	10, 32, 58, 10, 100, 10, 101, 10, 
	32, 10, 70, 10, 117, 10, 110, 10, 
	100, 10, 111, 10, 110, 10, 116, 10, 
	101, 10, 120, 10, 116, 10, 97, 101, 
	10, 100, 10, 97, 111, 10, 32, 115, 
	10, 108, 10, 105, 10, 110, 10, 101, 
	10, 97, -61, 10, 99, -89, 10, -61, 
	10, -93, 10, 10, 111, 10, 32, 10, 
	100, 10, 111, 10, 32, 10, 67, 10, 
	101, 10, 110, -61, 10, -95, 10, 10, 
	114, 10, 105, 10, 97, 10, 111, 10, 
	32, 10, 100, 10, 111, 10, 32, 10, 
	67, 10, 101, 10, 110, 10, 97, 10, 
	32, 110, 115, 10, 116, -61, 10, 97, 
	-93, 10, 10, 111, 10, 113, 10, 117, 
	10, 101, 10, 109, 10, 97, 10, 32, 
	10, 100, 10, 111, 10, 32, 10, 67, 
	10, 101, 10, 110, -61, 10, 97, 10, 
	117, 10, 110, 10, 99, 100, 10, 105, 
	10, 111, 10, 110, 10, 97, 10, 108, 
	10, 105, 10, 100, 10, 97, 10, 100, 
	10, 101, 10, 97, 10, 115, 10, 117, 
	10, 97, 10, 110, 10, 100, 110, 116, 
	101, 120, 116, 187, 191, 0
];

var _lexer_single_lengths = [
	0, 15, 14, 1, 1, 2, 2, 3, 
	3, 3, 3, 2, 2, 2, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 2, 2, 
	3, 5, 3, 3, 1, 1, 1, 1, 
	1, 1, 2, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 9, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 4, 2, 2, 2, 2, 
	2, 2, 3, 2, 2, 2, 2, 2, 
	2, 2, 14, 2, 1, 2, 2, 1, 
	1, 1, 1, 1, 2, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	12, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	3, 2, 2, 2, 2, 2, 2, 3, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	3, 2, 2, 2, 2, 2, 2, 3, 
	3, 3, 2, 3, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 4, 1, 2, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 2, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 6, 2, 
	2, 2, 2, 2, 2, 2, 3, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 1, 1, 2, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 12, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 3, 2, 2, 2, 
	2, 2, 2, 3, 2, 2, 2, 2, 
	2, 2, 2, 2, 3, 2, 2, 2, 
	2, 3, 2, 3, 3, 2, 2, 2, 
	2, 2, 3, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 4, 2, 3, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 1, 1, 1, 1, 
	1, 1, 2, 4, 3, 2, 4, 14, 
	2, 3, 2, 2, 2, 2, 4, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 3, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 3, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 3, 2, 2, 2, 2, 2, 2, 
	2, 2, 3, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 1, 2, 1, 
	1, 1, 1, 3, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 12, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 4, 2, 2, 
	2, 2, 2, 2, 3, 2, 2, 2, 
	2, 2, 2, 2, 2, 3, 2, 2, 
	2, 2, 3, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	3, 2, 3, 3, 2, 2, 2, 2, 
	2, 3, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 4, 2, 3, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 3, 2, 2, 3, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	1, 1, 1, 1, 1, 1, 1, 0
];

var _lexer_range_lengths = [
	0, 1, 1, 0, 0, 0, 0, 1, 
	1, 1, 1, 1, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 1, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 1, 0, 0, 1, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0
];

var _lexer_index_offsets = [
	0, 0, 17, 33, 35, 37, 40, 43, 
	48, 53, 58, 63, 67, 71, 74, 76, 
	78, 80, 82, 84, 86, 88, 90, 92, 
	94, 96, 98, 100, 102, 104, 106, 109, 
	112, 117, 124, 129, 133, 135, 137, 139, 
	141, 143, 145, 148, 150, 152, 154, 156, 
	158, 160, 162, 164, 166, 177, 180, 183, 
	186, 189, 192, 195, 198, 201, 204, 207, 
	210, 213, 216, 219, 224, 227, 230, 233, 
	236, 239, 242, 246, 249, 252, 255, 258, 
	261, 264, 267, 283, 286, 288, 291, 294, 
	296, 298, 300, 302, 304, 307, 309, 311, 
	313, 315, 317, 319, 321, 323, 325, 327, 
	329, 331, 333, 335, 337, 339, 341, 343, 
	345, 359, 362, 365, 368, 371, 374, 377, 
	380, 383, 386, 389, 392, 395, 398, 401, 
	404, 408, 411, 414, 417, 420, 423, 426, 
	430, 433, 436, 439, 442, 445, 448, 451, 
	454, 458, 461, 464, 467, 470, 473, 476, 
	480, 484, 488, 491, 495, 498, 501, 504, 
	507, 510, 513, 516, 519, 522, 525, 528, 
	531, 534, 537, 540, 543, 546, 549, 552, 
	555, 558, 560, 562, 564, 566, 568, 570, 
	572, 574, 576, 578, 583, 585, 588, 590, 
	592, 594, 596, 598, 600, 602, 604, 606, 
	608, 610, 612, 614, 616, 619, 621, 623, 
	625, 627, 629, 631, 633, 635, 637, 645, 
	648, 651, 654, 657, 660, 663, 666, 670, 
	673, 676, 679, 682, 685, 688, 691, 694, 
	697, 700, 703, 706, 709, 712, 715, 718, 
	721, 724, 727, 730, 732, 734, 737, 739, 
	741, 743, 745, 747, 749, 751, 753, 755, 
	757, 759, 761, 763, 765, 779, 782, 785, 
	788, 791, 794, 797, 800, 803, 806, 809, 
	812, 815, 818, 821, 824, 828, 831, 834, 
	837, 840, 843, 846, 850, 853, 856, 859, 
	862, 865, 868, 871, 874, 878, 881, 884, 
	887, 890, 894, 897, 901, 905, 908, 911, 
	914, 917, 920, 924, 927, 930, 933, 936, 
	939, 942, 945, 948, 951, 954, 957, 960, 
	963, 966, 969, 972, 975, 978, 981, 984, 
	987, 990, 995, 998, 1002, 1005, 1008, 1011, 
	1014, 1017, 1020, 1023, 1026, 1029, 1032, 1035, 
	1038, 1041, 1044, 1047, 1050, 1053, 1056, 1059, 
	1062, 1065, 1068, 1071, 1074, 1077, 1080, 1083, 
	1086, 1089, 1092, 1095, 1098, 1100, 1102, 1104, 
	1106, 1108, 1110, 1114, 1120, 1124, 1127, 1133, 
	1149, 1152, 1156, 1159, 1162, 1165, 1168, 1173, 
	1176, 1179, 1182, 1185, 1188, 1191, 1194, 1197, 
	1200, 1203, 1206, 1209, 1212, 1215, 1218, 1221, 
	1224, 1227, 1230, 1234, 1237, 1240, 1243, 1246, 
	1249, 1252, 1255, 1258, 1261, 1264, 1267, 1270, 
	1273, 1276, 1279, 1282, 1285, 1288, 1291, 1294, 
	1297, 1300, 1303, 1306, 1309, 1313, 1316, 1319, 
	1322, 1325, 1328, 1331, 1334, 1337, 1340, 1343, 
	1346, 1349, 1353, 1356, 1359, 1362, 1365, 1368, 
	1371, 1374, 1377, 1381, 1384, 1387, 1390, 1393, 
	1396, 1399, 1402, 1405, 1408, 1411, 1413, 1416, 
	1418, 1420, 1422, 1424, 1428, 1430, 1432, 1434, 
	1436, 1438, 1440, 1442, 1444, 1446, 1460, 1463, 
	1466, 1469, 1472, 1475, 1478, 1481, 1484, 1487, 
	1490, 1493, 1496, 1499, 1502, 1505, 1510, 1513, 
	1516, 1519, 1522, 1525, 1528, 1532, 1535, 1538, 
	1541, 1544, 1547, 1550, 1553, 1556, 1560, 1563, 
	1566, 1569, 1572, 1576, 1579, 1582, 1585, 1588, 
	1591, 1594, 1597, 1600, 1603, 1606, 1609, 1612, 
	1615, 1619, 1622, 1626, 1630, 1633, 1636, 1639, 
	1642, 1645, 1649, 1652, 1655, 1658, 1661, 1664, 
	1667, 1670, 1673, 1676, 1679, 1682, 1685, 1688, 
	1691, 1694, 1697, 1700, 1703, 1706, 1709, 1712, 
	1715, 1718, 1721, 1724, 1729, 1732, 1736, 1739, 
	1742, 1745, 1748, 1751, 1754, 1757, 1760, 1763, 
	1766, 1769, 1772, 1775, 1778, 1782, 1785, 1788, 
	1792, 1795, 1798, 1801, 1804, 1807, 1810, 1813, 
	1816, 1819, 1822, 1825, 1828, 1831, 1834, 1837, 
	1840, 1842, 1844, 1846, 1848, 1850, 1852, 1854
];

var _lexer_indicies = [
	2, 1, 3, 4, 5, 6, 7, 8, 
	9, 10, 11, 12, 13, 14, 15, 1, 
	0, 2, 1, 3, 4, 5, 6, 7, 
	8, 9, 10, 11, 12, 13, 14, 1, 
	0, 16, 0, 17, 0, 19, 20, 18, 
	22, 23, 21, 26, 25, 27, 25, 24, 
	30, 29, 31, 29, 28, 30, 29, 32, 
	29, 28, 30, 29, 33, 29, 28, 35, 
	34, 34, 0, 2, 36, 36, 0, 38, 
	39, 37, 2, 0, 40, 0, 41, 0, 
	42, 0, 43, 0, 44, 0, 45, 0, 
	46, 0, 47, 0, 48, 0, 49, 0, 
	50, 0, 51, 0, 52, 0, 53, 0, 
	54, 0, 56, 57, 55, 59, 60, 58, 
	0, 0, 0, 0, 61, 62, 63, 62, 
	62, 65, 64, 61, 2, 66, 7, 66, 
	0, 67, 68, 69, 0, 70, 0, 71, 
	0, 72, 0, 73, 0, 74, 0, 75, 
	0, 76, 77, 0, 77, 0, 78, 0, 
	79, 0, 80, 0, 81, 0, 82, 0, 
	83, 0, 85, 84, 87, 86, 87, 88, 
	89, 90, 89, 91, 92, 93, 94, 88, 
	86, 87, 95, 86, 87, 96, 86, 87, 
	97, 86, 87, 98, 86, 87, 99, 86, 
	87, 100, 86, 87, 101, 86, 87, 102, 
	86, 87, 103, 86, 87, 104, 86, 87, 
	105, 86, 87, 106, 86, 87, 107, 86, 
	87, 108, 86, 87, 109, 110, 111, 86, 
	87, 112, 86, 87, 113, 86, 87, 114, 
	86, 87, 115, 86, 87, 116, 86, 87, 
	117, 86, 118, 87, 119, 86, 119, 87, 
	86, 87, 120, 86, 87, 121, 86, 87, 
	122, 86, 87, 123, 86, 87, 124, 86, 
	87, 125, 86, 127, 126, 128, 129, 130, 
	131, 132, 133, 134, 135, 136, 137, 138, 
	139, 126, 0, 140, 141, 0, 142, 0, 
	143, 143, 0, 54, 144, 0, 145, 0, 
	146, 0, 147, 0, 148, 0, 149, 0, 
	150, 151, 0, 152, 0, 153, 0, 154, 
	0, 155, 0, 156, 0, 157, 0, 158, 
	0, 159, 0, 160, 0, 161, 0, 162, 
	0, 163, 0, 164, 0, 165, 0, 166, 
	0, 167, 0, 168, 0, 170, 169, 172, 
	171, 172, 173, 174, 175, 176, 174, 177, 
	178, 179, 180, 181, 182, 173, 171, 172, 
	183, 171, 172, 184, 171, 172, 185, 171, 
	172, 186, 171, 172, 187, 171, 172, 188, 
	171, 172, 189, 171, 172, 190, 171, 172, 
	191, 171, 172, 192, 171, 172, 193, 171, 
	172, 194, 171, 172, 195, 171, 172, 196, 
	171, 172, 197, 171, 172, 198, 199, 171, 
	172, 200, 171, 172, 201, 171, 172, 202, 
	171, 172, 203, 171, 172, 204, 171, 172, 
	205, 171, 206, 172, 207, 171, 207, 172, 
	171, 172, 208, 171, 172, 209, 171, 172, 
	210, 171, 172, 211, 171, 172, 212, 171, 
	172, 197, 171, 172, 213, 171, 214, 172, 
	215, 171, 215, 172, 171, 172, 216, 171, 
	172, 217, 171, 172, 212, 171, 172, 218, 
	171, 172, 219, 171, 172, 220, 220, 171, 
	172, 197, 221, 171, 172, 197, 222, 171, 
	172, 223, 171, 224, 172, 225, 171, 225, 
	172, 171, 172, 221, 171, 172, 226, 171, 
	172, 227, 171, 172, 228, 171, 172, 229, 
	171, 172, 230, 171, 172, 231, 171, 172, 
	232, 171, 172, 233, 171, 172, 234, 171, 
	172, 235, 171, 172, 236, 171, 172, 237, 
	171, 172, 212, 171, 172, 238, 171, 172, 
	221, 171, 172, 239, 171, 172, 240, 171, 
	172, 241, 171, 172, 225, 171, 242, 0, 
	243, 0, 244, 0, 245, 0, 246, 0, 
	247, 0, 248, 0, 249, 0, 250, 0, 
	164, 0, 54, 251, 252, 253, 0, 254, 
	0, 255, 256, 0, 256, 0, 144, 0, 
	257, 0, 258, 0, 259, 0, 260, 0, 
	261, 0, 262, 0, 263, 0, 264, 0, 
	265, 0, 266, 0, 267, 0, 268, 0, 
	163, 164, 0, 269, 0, 270, 0, 271, 
	0, 272, 0, 273, 0, 274, 0, 275, 
	0, 277, 276, 279, 278, 279, 280, 281, 
	282, 283, 281, 280, 278, 279, 284, 278, 
	279, 285, 278, 279, 286, 278, 279, 287, 
	278, 279, 288, 278, 279, 289, 278, 279, 
	290, 278, 291, 279, 292, 278, 292, 279, 
	278, 279, 293, 278, 279, 294, 278, 279, 
	295, 278, 279, 296, 278, 279, 297, 278, 
	279, 298, 278, 279, 299, 278, 279, 300, 
	278, 279, 301, 278, 279, 302, 278, 279, 
	303, 278, 279, 304, 278, 279, 305, 278, 
	279, 306, 278, 279, 307, 278, 279, 308, 
	278, 279, 309, 278, 279, 310, 278, 279, 
	297, 278, 311, 0, 312, 0, 313, 314, 
	0, 315, 0, 316, 0, 317, 0, 318, 
	0, 319, 0, 320, 0, 321, 0, 322, 
	0, 323, 0, 82, 0, 324, 0, 325, 
	0, 327, 326, 329, 328, 329, 330, 331, 
	332, 333, 331, 334, 335, 336, 337, 338, 
	339, 330, 328, 329, 340, 328, 329, 341, 
	328, 329, 342, 328, 329, 343, 328, 329, 
	344, 328, 329, 345, 328, 329, 346, 328, 
	329, 347, 328, 329, 348, 328, 329, 349, 
	328, 329, 350, 328, 329, 351, 328, 329, 
	352, 328, 329, 353, 328, 329, 354, 328, 
	329, 355, 356, 328, 329, 357, 328, 329, 
	358, 328, 329, 359, 328, 329, 360, 328, 
	329, 361, 328, 329, 362, 328, 363, 329, 
	364, 328, 364, 329, 328, 329, 365, 328, 
	329, 366, 328, 329, 367, 328, 329, 368, 
	328, 329, 369, 328, 329, 354, 328, 329, 
	370, 328, 371, 329, 372, 328, 372, 329, 
	328, 329, 373, 328, 329, 374, 328, 329, 
	369, 328, 329, 375, 376, 328, 329, 377, 
	328, 329, 378, 378, 328, 329, 354, 379, 
	328, 329, 380, 328, 329, 381, 328, 329, 
	382, 328, 329, 383, 328, 329, 384, 328, 
	385, 329, 386, 328, 387, 329, 328, 388, 
	329, 328, 389, 329, 328, 329, 390, 328, 
	329, 391, 328, 329, 392, 328, 329, 393, 
	328, 329, 394, 328, 329, 395, 328, 329, 
	396, 328, 329, 397, 328, 371, 329, 328, 
	329, 398, 328, 329, 399, 328, 329, 400, 
	328, 329, 401, 328, 329, 402, 328, 329, 
	403, 328, 329, 404, 328, 329, 405, 328, 
	329, 406, 328, 329, 372, 328, 329, 354, 
	407, 408, 328, 329, 409, 328, 410, 329, 
	411, 328, 411, 329, 328, 329, 379, 328, 
	329, 412, 328, 329, 413, 328, 329, 414, 
	328, 329, 415, 328, 329, 416, 328, 329, 
	417, 328, 329, 418, 328, 329, 419, 328, 
	329, 420, 328, 329, 421, 328, 329, 356, 
	328, 329, 422, 328, 329, 423, 328, 329, 
	424, 328, 329, 425, 328, 329, 426, 328, 
	329, 427, 328, 329, 428, 328, 329, 429, 
	328, 329, 430, 328, 329, 431, 328, 329, 
	432, 328, 329, 433, 328, 329, 369, 328, 
	329, 434, 328, 329, 379, 328, 329, 435, 
	328, 329, 436, 328, 329, 437, 328, 329, 
	411, 328, 438, 0, 144, 0, 439, 0, 
	440, 0, 441, 0, 256, 0, 442, 443, 
	442, 0, 446, 445, 447, 448, 445, 444, 
	0, 450, 451, 449, 0, 450, 449, 446, 
	452, 450, 451, 452, 449, 446, 453, 454, 
	455, 456, 457, 458, 459, 460, 461, 462, 
	463, 464, 465, 453, 0, 87, 466, 86, 
	467, 87, 468, 86, 468, 87, 86, 87, 
	469, 86, 87, 470, 86, 87, 471, 86, 
	87, 472, 125, 124, 86, 87, 473, 86, 
	87, 474, 86, 87, 475, 86, 87, 476, 
	86, 87, 477, 86, 87, 478, 86, 87, 
	479, 86, 87, 124, 86, 87, 480, 86, 
	87, 481, 86, 87, 482, 86, 87, 483, 
	86, 87, 479, 86, 87, 484, 86, 87, 
	485, 86, 87, 486, 86, 87, 487, 86, 
	87, 488, 86, 87, 489, 86, 490, 87, 
	491, 86, 492, 87, 86, 493, 87, 86, 
	494, 87, 86, 87, 495, 86, 87, 496, 
	86, 87, 497, 86, 87, 498, 86, 87, 
	499, 86, 87, 500, 86, 87, 501, 86, 
	87, 502, 86, 503, 87, 86, 504, 87, 
	86, 87, 505, 86, 87, 479, 86, 87, 
	506, 86, 87, 507, 86, 87, 508, 86, 
	87, 509, 86, 87, 510, 86, 87, 511, 
	86, 87, 512, 86, 87, 513, 86, 87, 
	514, 86, 87, 504, 86, 87, 515, 516, 
	86, 87, 517, 86, 87, 518, 86, 87, 
	519, 86, 87, 520, 86, 87, 521, 86, 
	87, 522, 86, 87, 523, 86, 87, 524, 
	86, 87, 525, 86, 87, 526, 86, 87, 
	527, 86, 87, 528, 86, 503, 87, 504, 
	86, 87, 529, 86, 87, 530, 86, 87, 
	531, 86, 87, 532, 86, 87, 533, 86, 
	87, 124, 86, 87, 534, 86, 87, 535, 
	86, 87, 536, 479, 86, 87, 537, 86, 
	87, 538, 86, 87, 539, 86, 87, 540, 
	86, 87, 541, 86, 87, 542, 86, 87, 
	543, 86, 87, 544, 86, 87, 545, 86, 
	87, 124, 86, 546, 0, 547, 548, 0, 
	548, 0, 549, 0, 550, 0, 551, 0, 
	552, 553, 274, 0, 554, 0, 555, 0, 
	556, 0, 557, 0, 558, 0, 559, 0, 
	314, 0, 561, 560, 563, 562, 563, 564, 
	565, 566, 567, 565, 568, 569, 570, 571, 
	572, 573, 564, 562, 563, 574, 562, 563, 
	575, 562, 563, 576, 562, 563, 577, 562, 
	563, 578, 562, 563, 579, 562, 563, 580, 
	562, 563, 581, 562, 563, 582, 562, 563, 
	583, 562, 563, 584, 562, 563, 585, 562, 
	563, 586, 562, 563, 587, 562, 563, 588, 
	562, 563, 589, 590, 591, 562, 563, 592, 
	562, 563, 593, 562, 563, 594, 562, 563, 
	595, 562, 563, 596, 562, 563, 597, 562, 
	598, 563, 599, 562, 599, 563, 562, 563, 
	600, 562, 563, 601, 562, 563, 602, 562, 
	563, 603, 562, 563, 604, 562, 563, 588, 
	562, 563, 605, 562, 606, 563, 607, 562, 
	607, 563, 562, 563, 608, 562, 563, 609, 
	562, 563, 610, 562, 563, 611, 588, 562, 
	563, 612, 562, 563, 613, 562, 563, 614, 
	562, 563, 615, 562, 563, 616, 562, 563, 
	617, 562, 563, 618, 562, 563, 604, 562, 
	563, 619, 562, 563, 620, 562, 563, 621, 
	562, 563, 622, 562, 563, 618, 562, 563, 
	623, 624, 562, 563, 625, 562, 563, 626, 
	626, 562, 563, 588, 627, 562, 563, 628, 
	562, 563, 629, 562, 563, 630, 562, 563, 
	631, 562, 563, 632, 562, 633, 563, 634, 
	562, 635, 563, 562, 636, 563, 562, 637, 
	563, 562, 563, 638, 562, 563, 639, 562, 
	563, 640, 562, 563, 641, 562, 563, 642, 
	562, 563, 643, 562, 563, 644, 562, 563, 
	645, 562, 646, 563, 562, 647, 563, 562, 
	563, 648, 562, 563, 618, 562, 563, 649, 
	562, 563, 650, 562, 563, 651, 562, 563, 
	652, 562, 563, 653, 562, 563, 654, 562, 
	563, 655, 562, 563, 656, 562, 563, 657, 
	562, 563, 647, 562, 563, 588, 658, 659, 
	562, 563, 660, 562, 661, 563, 662, 562, 
	662, 563, 562, 563, 627, 562, 563, 663, 
	562, 563, 664, 562, 563, 665, 562, 563, 
	666, 562, 563, 667, 562, 563, 668, 562, 
	563, 669, 562, 563, 670, 562, 563, 671, 
	562, 563, 672, 562, 563, 673, 562, 563, 
	674, 562, 646, 563, 647, 562, 563, 675, 
	562, 563, 676, 562, 563, 677, 618, 562, 
	563, 678, 562, 563, 679, 562, 563, 680, 
	562, 563, 681, 562, 563, 682, 562, 563, 
	683, 562, 563, 684, 562, 563, 685, 562, 
	563, 686, 562, 563, 604, 562, 563, 687, 
	562, 563, 627, 562, 563, 688, 562, 563, 
	689, 562, 563, 690, 562, 563, 662, 562, 
	691, 0, 692, 0, 693, 0, 694, 0, 
	314, 0, 695, 0, 1, 0, 696, 0
];

var _lexer_trans_targs = [
	0, 2, 2, 3, 13, 15, 29, 32, 
	35, 83, 187, 243, 364, 366, 370, 605, 
	4, 5, 6, 7, 6, 6, 7, 6, 
	8, 8, 8, 9, 8, 8, 8, 9, 
	10, 11, 12, 2, 12, 13, 2, 14, 
	16, 17, 18, 19, 20, 21, 22, 23, 
	24, 25, 26, 27, 28, 607, 30, 31, 
	2, 14, 31, 2, 14, 33, 34, 2, 
	33, 32, 34, 36, 461, 600, 37, 38, 
	39, 40, 41, 42, 43, 44, 45, 46, 
	47, 48, 49, 50, 51, 52, 51, 52, 
	52, 2, 53, 67, 396, 428, 448, 54, 
	55, 56, 57, 58, 59, 60, 61, 62, 
	63, 64, 65, 66, 2, 68, 376, 391, 
	69, 70, 71, 72, 73, 74, 75, 76, 
	77, 78, 79, 80, 81, 82, 2, 2, 
	3, 13, 15, 29, 32, 35, 83, 187, 
	243, 364, 366, 370, 84, 87, 85, 86, 
	29, 88, 89, 90, 91, 92, 93, 177, 
	94, 95, 96, 97, 98, 99, 100, 101, 
	102, 103, 104, 105, 106, 107, 108, 109, 
	110, 111, 112, 111, 112, 112, 2, 113, 
	127, 128, 149, 153, 158, 171, 173, 114, 
	115, 116, 117, 118, 119, 120, 121, 122, 
	123, 124, 125, 126, 2, 82, 129, 143, 
	130, 131, 132, 133, 134, 135, 136, 137, 
	138, 139, 140, 141, 142, 144, 145, 146, 
	147, 148, 150, 151, 152, 127, 154, 155, 
	156, 157, 159, 160, 161, 162, 163, 164, 
	165, 166, 167, 168, 169, 170, 172, 174, 
	175, 176, 178, 179, 180, 181, 182, 183, 
	184, 185, 186, 188, 192, 205, 189, 190, 
	191, 193, 194, 195, 196, 197, 198, 199, 
	200, 201, 202, 203, 204, 206, 207, 208, 
	209, 210, 211, 212, 213, 214, 213, 214, 
	214, 2, 215, 230, 216, 217, 218, 219, 
	220, 221, 222, 223, 224, 225, 226, 227, 
	228, 229, 82, 231, 232, 233, 234, 235, 
	236, 237, 238, 239, 240, 241, 242, 244, 
	245, 246, 256, 247, 248, 249, 250, 251, 
	252, 253, 254, 255, 257, 258, 259, 260, 
	259, 260, 260, 2, 261, 275, 276, 297, 
	329, 345, 358, 360, 262, 263, 264, 265, 
	266, 267, 268, 269, 270, 271, 272, 273, 
	274, 2, 82, 277, 291, 278, 279, 280, 
	281, 282, 283, 284, 285, 286, 287, 288, 
	289, 290, 292, 293, 294, 295, 296, 298, 
	301, 299, 300, 275, 302, 303, 304, 305, 
	306, 307, 319, 308, 309, 310, 311, 312, 
	313, 314, 315, 316, 317, 318, 320, 321, 
	322, 323, 324, 325, 326, 327, 328, 330, 
	334, 331, 332, 333, 335, 336, 337, 338, 
	339, 340, 341, 342, 343, 344, 346, 347, 
	348, 349, 350, 351, 352, 353, 354, 355, 
	356, 357, 359, 361, 362, 363, 365, 367, 
	368, 369, 370, 371, 372, 374, 375, 373, 
	371, 372, 373, 371, 374, 375, 3, 13, 
	15, 29, 32, 35, 83, 187, 243, 364, 
	366, 370, 377, 378, 379, 380, 381, 382, 
	383, 384, 385, 386, 387, 388, 389, 390, 
	392, 393, 394, 395, 397, 398, 399, 400, 
	401, 402, 403, 418, 404, 405, 406, 407, 
	408, 409, 410, 411, 412, 413, 414, 415, 
	416, 417, 419, 420, 421, 422, 423, 424, 
	425, 426, 427, 429, 442, 430, 431, 432, 
	433, 434, 435, 436, 437, 438, 439, 440, 
	441, 443, 444, 445, 446, 447, 449, 450, 
	451, 452, 453, 454, 455, 456, 457, 458, 
	459, 460, 462, 463, 464, 465, 466, 467, 
	468, 475, 469, 470, 471, 472, 473, 474, 
	476, 477, 476, 477, 477, 2, 478, 492, 
	493, 528, 563, 581, 594, 596, 479, 480, 
	481, 482, 483, 484, 485, 486, 487, 488, 
	489, 490, 491, 2, 82, 494, 508, 523, 
	495, 496, 497, 498, 499, 500, 501, 502, 
	503, 504, 505, 506, 507, 509, 510, 511, 
	512, 513, 514, 515, 516, 517, 518, 519, 
	520, 521, 522, 524, 525, 526, 527, 529, 
	532, 530, 531, 492, 533, 534, 535, 536, 
	537, 538, 553, 539, 540, 541, 542, 543, 
	544, 545, 546, 547, 548, 549, 550, 551, 
	552, 554, 555, 556, 557, 558, 559, 560, 
	561, 562, 564, 568, 565, 566, 567, 569, 
	570, 571, 572, 573, 574, 575, 576, 577, 
	578, 579, 580, 582, 583, 584, 585, 586, 
	587, 588, 589, 590, 591, 592, 593, 595, 
	597, 598, 599, 601, 602, 603, 604, 606, 
	0
];

var _lexer_trans_actions = [
	43, 0, 54, 3, 1, 0, 29, 1, 
	29, 29, 29, 29, 29, 29, 35, 0, 
	0, 0, 7, 139, 48, 0, 102, 9, 
	5, 45, 134, 45, 0, 33, 122, 33, 
	33, 0, 11, 106, 0, 0, 114, 25, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 57, 
	149, 126, 0, 110, 23, 0, 27, 118, 
	27, 51, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 57, 144, 0, 54, 
	0, 69, 33, 84, 84, 84, 84, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 13, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 13, 31, 130, 
	60, 57, 31, 63, 57, 63, 63, 63, 
	63, 63, 63, 66, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 57, 144, 0, 54, 0, 78, 33, 
	84, 84, 84, 84, 84, 84, 84, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 19, 19, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 57, 144, 0, 54, 
	0, 81, 84, 84, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 21, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 57, 144, 
	0, 54, 0, 72, 33, 84, 84, 84, 
	84, 84, 84, 84, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 15, 15, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 37, 37, 54, 37, 
	87, 0, 0, 39, 0, 0, 93, 90, 
	41, 96, 90, 96, 96, 96, 96, 96, 
	96, 99, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	57, 144, 0, 54, 0, 75, 33, 84, 
	84, 84, 84, 84, 84, 84, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 17, 17, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0
];

var _lexer_eof_actions = [
	0, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43
];

var lexer_start = 1;
var lexer_first_final = 607;
var lexer_error = 0;

var lexer_en_main = 1;


/* line 129 "ragel/i18n/pt.js.rl" */

/* line 130 "ragel/i18n/pt.js.rl" */

/* line 131 "ragel/i18n/pt.js.rl" */

/* line 132 "ragel/i18n/pt.js.rl" */

var Lexer = function(listener) {
  // Check that listener has the required functions
  var events = ['comment', 'tag', 'feature', 'background', 'scenario', 'scenario_outline', 'examples', 'step', 'doc_string', 'row', 'eof'];
  for(var i=0, len=events.length; i<len; i++) {
    var event = events[i];
    if(typeof listener[event] != 'function') {
      throw new Error("Error. No " + event + " function exists on " + JSON.stringify(listener));
    }
  }
  this.listener = listener;
};

Lexer.prototype.scan = function(data) {
  var ending = "\n%_FEATURE_END_%";
  if(typeof data == 'string') {
    data = this.stringToBytes(data + ending);
  } else if(typeof Buffer != 'undefined' && Buffer.isBuffer(data)) {
    // Node.js
    var buf = new Buffer(data.length + ending.length);
    data.copy(buf, 0, 0);
    new Buffer(ending).copy(buf, data.length, 0);
    data = buf;
  }
  var eof = pe = data.length;
  var p = 0;

  this.line_number = 1;
  this.last_newline = 0;
  var signedCharValue=function(v){return v > 127 ? v-256 : v; };

  
/* line 1055 "js/lib/gherkin/lexer/pt.js" */
{
	  this.cs = lexer_start;
} /* JSCodeGen::writeInit */

/* line 164 "ragel/i18n/pt.js.rl" */
  
/* line 1062 "js/lib/gherkin/lexer/pt.js" */
{
	var _klen, _trans, _keys, _ps, _widec, _acts, _nacts;
	var _goto_level, _resume, _eof_trans, _again, _test_eof;
	var _out;
	_klen = _trans = _keys = _acts = _nacts = null;
	_goto_level = 0;
	_resume = 10;
	_eof_trans = 15;
	_again = 20;
	_test_eof = 30;
	_out = 40;
	while (true) {
	_trigger_goto = false;
	if (_goto_level <= 0) {
	if (p == pe) {
		_goto_level = _test_eof;
		continue;
	}
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	}
	if (_goto_level <= _resume) {
	_keys = _lexer_key_offsets[ this.cs];
	_trans = _lexer_index_offsets[ this.cs];
	_klen = _lexer_single_lengths[ this.cs];
	_break_match = false;
	
	do {
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + _klen - 1;

	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + ( (_upper - _lower) >> 1 );

	        if (( signedCharValue(data[p])) < _lexer_trans_keys[_mid]) {
	           _upper = _mid - 1;
	        } else if (( signedCharValue(data[p])) > _lexer_trans_keys[_mid]) {
	           _lower = _mid + 1;
	        } else {
	           _trans += (_mid - _keys);
	           _break_match = true;
	           break;
	        };
	     } /* while */
	     if (_break_match) { break; }
	     _keys += _klen;
	     _trans += _klen;
	  }
	  _klen = _lexer_range_lengths[ this.cs];
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + (_klen << 1) - 2;
	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + (((_upper-_lower) >> 1) & ~1);
	        if (( signedCharValue(data[p])) < _lexer_trans_keys[_mid]) {
	          _upper = _mid - 2;
	         } else if (( signedCharValue(data[p])) > _lexer_trans_keys[_mid+1]) {
	          _lower = _mid + 2;
	        } else {
	          _trans += ((_mid - _keys) >> 1);
	          _break_match = true;
	          break;
	        }
	     } /* while */
	     if (_break_match) { break; }
	     _trans += _klen
	  }
	} while (false);
	_trans = _lexer_indicies[_trans];
	 this.cs = _lexer_trans_targs[_trans];
	if (_lexer_trans_actions[_trans] != 0) {
		_acts = _lexer_trans_actions[_trans];
		_nacts = _lexer_actions[_acts];
		_acts += 1;
		while (_nacts > 0) {
			_nacts -= 1;
			_acts += 1;
			switch (_lexer_actions[_acts - 1]) {
case 0:
/* line 6 "ragel/i18n/pt.js.rl" */

    this.content_start = p;
    this.current_line = this.line_number;
    this.start_col = p - this.last_newline - (this.keyword+':').length;
  		break;
case 1:
/* line 12 "ragel/i18n/pt.js.rl" */

    this.current_line = this.line_number;
    this.start_col = p - this.last_newline;
  		break;
case 2:
/* line 17 "ragel/i18n/pt.js.rl" */

    this.content_start = p;
  		break;
case 3:
/* line 21 "ragel/i18n/pt.js.rl" */

    this.docstring_content_type_start = p;
  		break;
case 4:
/* line 25 "ragel/i18n/pt.js.rl" */

    this.docstring_content_type_end = p;
  		break;
case 5:
/* line 29 "ragel/i18n/pt.js.rl" */

    var con = this.unindent(
      this.start_col, 
      this.bytesToString(data.slice(this.content_start, this.next_keyword_start-1)).replace(/(\r?\n)?([\t ])*$/, '').replace(/\\\"\\\"\\\"/mg, '"""')
    );
    var con_type = this.bytesToString(data.slice(this.docstring_content_type_start, this.docstring_content_type_end)).trim();
    this.listener.doc_string(con_type, con, this.current_line); 
  		break;
case 6:
/* line 38 "ragel/i18n/pt.js.rl" */

    p = this.store_keyword_content('feature', data, p, eof);
  		break;
case 7:
/* line 42 "ragel/i18n/pt.js.rl" */

    p = this.store_keyword_content('background', data, p, eof);
  		break;
case 8:
/* line 46 "ragel/i18n/pt.js.rl" */

    p = this.store_keyword_content('scenario', data, p, eof);
  		break;
case 9:
/* line 50 "ragel/i18n/pt.js.rl" */

    p = this.store_keyword_content('scenario_outline', data, p, eof);
  		break;
case 10:
/* line 54 "ragel/i18n/pt.js.rl" */

    p = this.store_keyword_content('examples', data, p, eof);
  		break;
case 11:
/* line 58 "ragel/i18n/pt.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.step(this.keyword, con, this.current_line);
  		break;
case 12:
/* line 63 "ragel/i18n/pt.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.comment(con, this.line_number);
    this.keyword_start = null;
  		break;
case 13:
/* line 69 "ragel/i18n/pt.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.tag(con, this.line_number);
    this.keyword_start = null;
  		break;
case 14:
/* line 75 "ragel/i18n/pt.js.rl" */

    this.line_number++;
  		break;
case 15:
/* line 79 "ragel/i18n/pt.js.rl" */

    this.last_newline = p + 1;
  		break;
case 16:
/* line 83 "ragel/i18n/pt.js.rl" */

    this.keyword_start = this.keyword_start || p;
  		break;
case 17:
/* line 87 "ragel/i18n/pt.js.rl" */

    this.keyword = this.bytesToString(data.slice(this.keyword_start, p)).replace(/:$/, '');
    this.keyword_start = null;
  		break;
case 18:
/* line 92 "ragel/i18n/pt.js.rl" */

    this.next_keyword_start = p;
  		break;
case 19:
/* line 96 "ragel/i18n/pt.js.rl" */

    p = p - 1;
    current_row = [];
    this.current_line = this.line_number;
  		break;
case 20:
/* line 102 "ragel/i18n/pt.js.rl" */

    this.content_start = p;
  		break;
case 21:
/* line 106 "ragel/i18n/pt.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    current_row.push(con.replace(/\\\|/, "|").replace(/\\n/, "\n").replace(/\\\\/, "\\"));
  		break;
case 22:
/* line 111 "ragel/i18n/pt.js.rl" */

    this.listener.row(current_row, this.current_line);
  		break;
case 23:
/* line 115 "ragel/i18n/pt.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw new Error("Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.");
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 1289 "js/lib/gherkin/lexer/pt.js" */
			} /* action switch */
		}
	}
	if (_trigger_goto) {
		continue;
	}
	}
	if (_goto_level <= _again) {
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	p += 1;
	if (p != pe) {
		_goto_level = _resume;
		continue;
	}
	}
	if (_goto_level <= _test_eof) {
	if (p == eof) {
	__acts = _lexer_eof_actions[ this.cs];
	__nacts =  _lexer_actions[__acts];
	__acts += 1;
	while (__nacts > 0) {
		__nacts -= 1;
		__acts += 1;
		switch (_lexer_actions[__acts - 1]) {
case 23:
/* line 115 "ragel/i18n/pt.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw new Error("Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.");
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 1328 "js/lib/gherkin/lexer/pt.js" */
		} /* eof action switch */
	}
	if (_trigger_goto) {
		continue;
	}
}
	}
	if (_goto_level <= _out) {
		break;
	}
	}
	}

/* line 165 "ragel/i18n/pt.js.rl" */
};


/*
 * Decode utf-8 byte sequence to string.
 */
var decodeUtf8 = function(bytes) {
  var result = "";
  var i = 0;
  var wc;
  var c;

  while (i < bytes.length) {
    /* parse as UTF-8 lead byte */
    wc = bytes[i++];
    if (wc < 0x80) {
      count = 0;
    } else if (wc < 0xC2 || wc >= 0xF8) {
      throw new Error("input is not a valid UTF-8 lead octet");
    } else if (wc < 0xE0) {
      count = 1;
      wc = (wc & 0x1F) << 6;
    } else if (wc < 0xF0) {
      count = 2;
      wc = (wc & 0x0F) << 12;
    } else /* wc < 0xF8 */ {
      count = 3;
      wc = (wc & 0x07) << 18;
    }

    /* parse trail bytes, if any */
    while (count) {
      if (!(i < bytes.length)) {
        throw new Error("short read");
      }
      if ((c = bytes[i++] ^ 0x80) > 0x3F) {
        throw new Error("input is not a valid UTF-8 trail octet");
      }
      wc |= c << (6 * --count);
      if (wc < (1 << (5 * count + 6))) {
        throw new Error("invalid non-minimal encoded input");
      }
    }

    /* handle conversion to UTF-16 if needed */
    if (wc > 0xFFFF) {
      wc -= 0x10000;
      result += String.fromCharCode(0xD800 + (wc >> 10));
      wc = 0xDC00 + (wc & 0x3FF);
    }
    result += String.fromCharCode(wc);
  }

  return result;
};

/*
 * Encode string to an array of bytes using utf8 encoding.
 *
 * Javascript internally stores character data as utf16 (like java).
 * String.charCodeAt() does *not* produce unicode points, but simply
 * reflects this internal representation. Thus, it is necessary
 * to first decode the utf-16 representation before encoding to
 * utf-8.
 */
var encodeUtf8 = function(string) {
  var bytes = [];
  var i = 0;
  var j = 0;
  var wc;

  while (i < string.length) {
    wc = string.charCodeAt(i++);
    if (wc >= 0xD800 && wc <= 0xDBFF && i < string.length && string.charCodeAt(i) >= 0xDC00 && string.charCodeAt(i) <= 0xDFFF) {
      /* decode UTF-16 */
      wc = 0x10000 + ((wc & 0x3FF) << 10) + (string.charCodeAt(i++) & 0x3FF);
    }

    /* emit lead byte */
    if (wc < 0x80) {
      bytes[j++] = wc;
      count = 0;
    } else if (wc < 0x800) {
      bytes[j++] = 0xC0 | (wc >> 6);
      count = 1;
    } else if (wc < 0x10000) {
      bytes[j++] = 0xE0 | (wc >> 12);
      count = 2;
    } else {
      /* SMP: 21-bit Unicode */
      bytes[j++] = 0xF0 | (wc >> 18);
      count = 3;
    }

    /* emit trail bytes, if any */
    while (count) {
      bytes[j++] = 0x80 | ((wc >> (6 * --count)) & 0x3F);
    }
  }

  return bytes;

};

Lexer.prototype.bytesToString = function(bytes) {
  if(typeof bytes.write == 'function') {
    // Node.js
    return bytes.toString('utf-8');
  }
  return decodeUtf8(bytes);
};

Lexer.prototype.stringToBytes = function(string) {
  return encodeUtf8(string);
};

Lexer.prototype.unindent = function(startcol, text) {
  startcol = startcol || 0;
  return text.replace(new RegExp('^[\t ]{0,' + startcol + '}', 'gm'), ''); 
};

Lexer.prototype.store_keyword_content = function(event, data, p, eof) {
  var end_point = (!this.next_keyword_start || (p == eof)) ? p : this.next_keyword_start;
  var content = this.unindent(this.start_col + 2, this.bytesToString(data.slice(this.content_start, end_point))).replace(/\s+$/,"");
  var content_lines = content.split("\n")
  var name = content_lines.shift() || "";
  name = name.trim();
  var description = content_lines.join("\n");
  this.listener[event](this.keyword, name, description, this.current_line);
  var nks = this.next_keyword_start;
  this.next_keyword_start = null;
  return nks ? nks - 1 : p;
};

Lexer.prototype.current_line_content = function(data, p) {
  var rest = Array.prototype.slice.call(data,this.last_newline, -1);
  var end = rest.indexOf(10) || -1;
  return this.bytesToString(rest.slice(0, end)).trim();
};

// Node.js export
if(typeof module !== 'undefined') {
  module.exports = Lexer;
}
// Require.js export
if (typeof define !== 'undefined') {
  if(define.amd) {
    define('gherkin/lexer/pt', [], function() {
      return Lexer;
    });
  } else {
    define('gherkin/lexer/pt', function(require, exports, module) {
      exports.Lexer = Lexer;
    });
  }
}

})();

}).call(this,require("buffer").Buffer)

},{"buffer":69}],226:[function(require,module,exports){
(function (Buffer){

/* line 1 "ragel/i18n/ro.js.rl" */
;(function() {


/* line 126 "ragel/i18n/ro.js.rl" */



/* line 11 "js/lib/gherkin/lexer/ro.js" */
var _lexer_actions = [
	0, 1, 0, 1, 1, 1, 2, 1, 
	3, 1, 4, 1, 5, 1, 6, 1, 
	7, 1, 8, 1, 9, 1, 10, 1, 
	11, 1, 12, 1, 13, 1, 16, 1, 
	17, 1, 18, 1, 19, 1, 20, 1, 
	21, 1, 22, 1, 23, 2, 2, 18, 
	2, 3, 4, 2, 13, 0, 2, 14, 
	15, 2, 17, 0, 2, 17, 1, 2, 
	17, 16, 2, 17, 19, 2, 18, 6, 
	2, 18, 7, 2, 18, 8, 2, 18, 
	9, 2, 18, 10, 2, 18, 16, 2, 
	20, 21, 2, 22, 0, 2, 22, 1, 
	2, 22, 16, 2, 22, 19, 3, 4, 
	14, 15, 3, 5, 14, 15, 3, 11, 
	14, 15, 3, 12, 14, 15, 3, 13, 
	14, 15, 3, 14, 15, 18, 3, 17, 
	0, 11, 3, 17, 14, 15, 4, 2, 
	14, 15, 18, 4, 3, 4, 14, 15, 
	4, 17, 0, 14, 15, 5, 17, 0, 
	11, 14, 15
];

var _lexer_key_offsets = [
	0, 0, 19, 20, 21, 22, 24, 26, 
	44, 45, 46, 47, 49, 51, 56, 61, 
	66, 71, 75, 79, 81, 82, 83, 84, 
	85, 86, 87, 88, 89, 90, 91, 92, 
	93, 94, 95, 96, 101, 108, 113, 114, 
	115, 116, 117, 120, 121, 122, 123, 124, 
	125, 126, 127, 128, 129, 130, 131, 146, 
	148, 150, 152, 170, 171, 175, 176, 177, 
	178, 179, 180, 181, 182, 185, 186, 187, 
	188, 189, 190, 191, 192, 193, 194, 201, 
	203, 205, 207, 211, 213, 215, 217, 219, 
	221, 223, 225, 227, 229, 231, 233, 235, 
	237, 238, 239, 240, 243, 244, 245, 246, 
	247, 248, 249, 250, 251, 252, 253, 254, 
	255, 256, 257, 268, 270, 272, 274, 276, 
	278, 280, 282, 284, 286, 288, 290, 292, 
	294, 296, 298, 300, 302, 304, 306, 308, 
	310, 312, 314, 316, 318, 320, 322, 324, 
	326, 328, 332, 334, 336, 338, 340, 342, 
	344, 346, 348, 350, 352, 354, 357, 359, 
	361, 363, 365, 367, 369, 371, 373, 375, 
	377, 379, 381, 384, 386, 388, 390, 392, 
	393, 396, 397, 398, 399, 400, 401, 402, 
	403, 404, 405, 420, 422, 424, 426, 428, 
	430, 432, 434, 436, 438, 440, 442, 444, 
	446, 448, 450, 452, 454, 456, 458, 460, 
	462, 464, 468, 470, 472, 474, 476, 478, 
	480, 482, 484, 486, 488, 493, 495, 497, 
	499, 501, 503, 505, 507, 511, 513, 515, 
	517, 521, 523, 525, 527, 529, 531, 533, 
	535, 537, 539, 541, 543, 545, 549, 551, 
	553, 555, 557, 559, 561, 563, 565, 567, 
	569, 571, 573, 576, 578, 580, 582, 584, 
	585, 586, 587, 588, 589, 590, 592, 593, 
	594, 595, 596, 597, 598, 599, 600, 601, 
	602, 603, 604, 605, 620, 622, 624, 626, 
	628, 630, 632, 634, 636, 638, 640, 642, 
	644, 646, 648, 650, 652, 654, 656, 658, 
	660, 662, 664, 667, 669, 671, 673, 675, 
	680, 682, 684, 686, 688, 690, 692, 694, 
	698, 700, 702, 704, 708, 710, 712, 714, 
	716, 718, 720, 722, 724, 726, 728, 730, 
	732, 734, 737, 739, 741, 743, 745, 747, 
	749, 753, 759, 762, 764, 770, 788, 790, 
	792, 794, 796, 798, 800, 802, 804, 806, 
	808, 810, 812, 814, 816, 818, 820, 822, 
	824, 826, 829, 831, 833, 835, 837, 842, 
	844, 846, 848, 850, 852, 854, 856, 860, 
	862, 864, 866, 870, 872, 874, 876, 878, 
	880, 882, 884, 886, 888, 890, 892, 894, 
	896, 900, 902, 904, 906, 908, 910, 912, 
	914, 916, 918, 920, 922, 924, 927, 929, 
	931, 933, 935, 936, 937
];

var _lexer_trans_keys = [
	-59, -56, 10, 32, 34, 35, 37, 42, 
	64, 65, 67, 68, 69, 70, 83, 124, 
	239, 9, 13, -98, 105, 32, 10, 13, 
	10, 13, -59, -56, 10, 32, 34, 35, 
	37, 42, 64, 65, 67, 68, 69, 70, 
	83, 124, 9, 13, -104, 34, 34, 10, 
	13, 10, 13, 10, 32, 34, 9, 13, 
	10, 32, 34, 9, 13, 10, 32, 34, 
	9, 13, 10, 32, 34, 9, 13, 10, 
	32, 9, 13, 10, 32, 9, 13, 10, 
	13, 10, 95, 70, 69, 65, 84, 85, 
	82, 69, 95, 69, 78, 68, 95, 37, 
	13, 32, 64, 9, 10, 9, 10, 13, 
	32, 64, 11, 12, 10, 32, 64, 9, 
	13, 116, 117, 110, 99, -61, 97, 111, 
	-94, 110, 100, 110, 116, 101, 120, 116, 
	58, 10, 10, -59, -56, 10, 32, 35, 
	37, 42, 64, 65, 67, 68, 70, 83, 
	9, 13, -98, 10, 10, 105, 10, 32, 
	-59, -56, 10, 32, 34, 35, 37, 42, 
	64, 65, 67, 68, 69, 70, 83, 124, 
	9, 13, 97, -59, -56, 114, 116, -93, 
	105, 32, 102, 105, 105, -101, 32, 101, 
	105, 120, 101, 109, 112, 108, 101, 58, 
	10, 10, 10, 32, 35, 70, 124, 9, 
	13, 10, 117, 10, 110, 10, 99, -59, 
	-56, 10, 116, -93, 10, 10, 105, 10, 
	111, 10, 110, 10, 97, 10, 108, 10, 
	105, 10, 116, 10, 97, 10, 116, 10, 
	101, 10, 58, -101, 10, 117, 110, 99, 
	-59, -56, 116, -93, 105, 111, 110, 97, 
	108, 105, 116, 97, 116, 101, 58, 10, 
	10, 10, 32, 35, 37, 64, 67, 69, 
	70, 83, 9, 13, 10, 95, 10, 70, 
	10, 69, 10, 65, 10, 84, 10, 85, 
	10, 82, 10, 69, 10, 95, 10, 69, 
	10, 78, 10, 68, 10, 95, 10, 37, 
	10, 111, 10, 110, 10, 116, 10, 101, 
	10, 120, 10, 116, 10, 58, 10, 120, 
	10, 101, 10, 109, 10, 112, 10, 108, 
	10, 101, 10, 117, 10, 110, 10, 99, 
	-59, -56, 10, 116, -93, 10, 10, 105, 
	10, 111, 10, 110, 10, 97, 10, 108, 
	10, 105, 10, 116, 10, 97, 10, 116, 
	-101, 10, 10, 99, 116, 10, 101, 10, 
	110, 10, 97, 10, 114, 10, 105, 10, 
	117, 10, 114, 10, 117, 10, 99, 10, 
	116, 10, 117, 10, 114, -60, 10, 97, 
	-125, 10, 10, 32, 10, 115, 10, 99, 
	-101, 99, 105, 116, 101, 110, 97, 114, 
	105, 117, 58, 10, 10, -59, -56, 10, 
	32, 35, 37, 42, 64, 65, 67, 68, 
	70, 83, 9, 13, -98, 10, 10, 105, 
	10, 32, -104, 10, 10, 95, 10, 70, 
	10, 69, 10, 65, 10, 84, 10, 85, 
	10, 82, 10, 69, 10, 95, 10, 69, 
	10, 78, 10, 68, 10, 95, 10, 37, 
	10, 116, 10, 117, 10, 110, 10, 99, 
	-61, 10, 97, 111, -94, 10, 10, 110, 
	10, 100, 10, 110, 10, 116, 10, 101, 
	10, 120, 10, 116, 10, 58, 10, 97, 
	-59, -56, 10, 114, 116, -93, 10, 10, 
	105, 10, 32, 10, 102, 10, 105, 10, 
	105, -101, 10, 10, 32, 101, 105, 10, 
	117, 10, 110, 10, 99, -59, -56, 10, 
	116, -93, 10, 10, 105, 10, 111, 10, 
	110, 10, 97, 10, 108, 10, 105, 10, 
	116, 10, 97, 10, 116, 10, 101, -101, 
	10, 10, 99, 105, 116, 10, 101, 10, 
	110, 10, 97, 10, 114, 10, 105, 10, 
	117, 10, 114, 10, 117, 10, 99, 10, 
	116, 10, 117, 10, 114, -60, 10, 97, 
	-125, 10, 10, 32, 10, 115, 10, 99, 
	114, 117, 99, 116, 117, 114, -60, 97, 
	-125, 32, 115, 99, 101, 110, 97, 114, 
	105, 117, 58, 10, 10, -59, -56, 10, 
	32, 35, 37, 42, 64, 65, 67, 68, 
	70, 83, 9, 13, -98, 10, 10, 105, 
	10, 32, -104, 10, 10, 95, 10, 70, 
	10, 69, 10, 65, 10, 84, 10, 85, 
	10, 82, 10, 69, 10, 95, 10, 69, 
	10, 78, 10, 68, 10, 95, 10, 37, 
	10, 116, 10, 117, 10, 110, 10, 99, 
	-61, 10, 97, -94, 10, 10, 110, 10, 
	100, 10, 97, -59, -56, 10, 114, 116, 
	-93, 10, 10, 105, 10, 32, 10, 102, 
	10, 105, 10, 105, -101, 10, 10, 32, 
	101, 105, 10, 117, 10, 110, 10, 99, 
	-59, -56, 10, 116, -93, 10, 10, 105, 
	10, 111, 10, 110, 10, 97, 10, 108, 
	10, 105, 10, 116, 10, 97, 10, 116, 
	10, 101, 10, 58, -101, 10, 10, 99, 
	105, 10, 101, 10, 110, 10, 97, 10, 
	114, 10, 105, 10, 117, 32, 124, 9, 
	13, 10, 32, 92, 124, 9, 13, 10, 
	92, 124, 10, 92, 10, 32, 92, 124, 
	9, 13, -59, -56, 10, 32, 34, 35, 
	37, 42, 64, 65, 67, 68, 69, 70, 
	83, 124, 9, 13, -104, 10, 10, 95, 
	10, 70, 10, 69, 10, 65, 10, 84, 
	10, 85, 10, 82, 10, 69, 10, 95, 
	10, 69, 10, 78, 10, 68, 10, 95, 
	10, 37, 10, 116, 10, 117, 10, 110, 
	10, 99, -61, 10, 97, -94, 10, 10, 
	110, 10, 100, 10, 97, -59, -56, 10, 
	114, 116, -93, 10, 10, 105, 10, 32, 
	10, 102, 10, 105, 10, 105, -101, 10, 
	10, 32, 101, 105, 10, 117, 10, 110, 
	10, 99, -59, -56, 10, 116, -93, 10, 
	10, 105, 10, 111, 10, 110, 10, 97, 
	10, 108, 10, 105, 10, 116, 10, 97, 
	10, 116, 10, 101, 10, 58, -101, 10, 
	10, 99, 105, 116, 10, 101, 10, 110, 
	10, 97, 10, 114, 10, 105, 10, 117, 
	10, 114, 10, 117, 10, 99, 10, 116, 
	10, 117, 10, 114, -60, 10, 97, -125, 
	10, 10, 32, 10, 115, 10, 99, 187, 
	191, 0
];

var _lexer_single_lengths = [
	0, 17, 1, 1, 1, 2, 2, 16, 
	1, 1, 1, 2, 2, 3, 3, 3, 
	3, 2, 2, 2, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 3, 5, 3, 1, 1, 
	1, 1, 3, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 13, 2, 
	2, 2, 16, 1, 4, 1, 1, 1, 
	1, 1, 1, 1, 3, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 5, 2, 
	2, 2, 4, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	1, 1, 1, 3, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 9, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 4, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 3, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 3, 2, 2, 2, 2, 1, 
	3, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 13, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 4, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 5, 2, 2, 2, 
	2, 2, 2, 2, 4, 2, 2, 2, 
	4, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 4, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 3, 2, 2, 2, 2, 1, 
	1, 1, 1, 1, 1, 2, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 13, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 3, 2, 2, 2, 2, 5, 
	2, 2, 2, 2, 2, 2, 2, 4, 
	2, 2, 2, 4, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 3, 2, 2, 2, 2, 2, 2, 
	2, 4, 3, 2, 4, 16, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 3, 2, 2, 2, 2, 5, 2, 
	2, 2, 2, 2, 2, 2, 4, 2, 
	2, 2, 4, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	4, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 3, 2, 2, 
	2, 2, 1, 1, 0
];

var _lexer_range_lengths = [
	0, 1, 0, 0, 0, 0, 0, 1, 
	0, 0, 0, 0, 0, 1, 1, 1, 
	1, 1, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 1, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 0, 
	0, 0, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 1, 0, 0, 1, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0
];

var _lexer_index_offsets = [
	0, 0, 19, 21, 23, 25, 28, 31, 
	49, 51, 53, 55, 58, 61, 66, 71, 
	76, 81, 85, 89, 92, 94, 96, 98, 
	100, 102, 104, 106, 108, 110, 112, 114, 
	116, 118, 120, 122, 127, 134, 139, 141, 
	143, 145, 147, 151, 153, 155, 157, 159, 
	161, 163, 165, 167, 169, 171, 173, 188, 
	191, 194, 197, 215, 217, 222, 224, 226, 
	228, 230, 232, 234, 236, 240, 242, 244, 
	246, 248, 250, 252, 254, 256, 258, 265, 
	268, 271, 274, 279, 282, 285, 288, 291, 
	294, 297, 300, 303, 306, 309, 312, 315, 
	318, 320, 322, 324, 328, 330, 332, 334, 
	336, 338, 340, 342, 344, 346, 348, 350, 
	352, 354, 356, 367, 370, 373, 376, 379, 
	382, 385, 388, 391, 394, 397, 400, 403, 
	406, 409, 412, 415, 418, 421, 424, 427, 
	430, 433, 436, 439, 442, 445, 448, 451, 
	454, 457, 462, 465, 468, 471, 474, 477, 
	480, 483, 486, 489, 492, 495, 499, 502, 
	505, 508, 511, 514, 517, 520, 523, 526, 
	529, 532, 535, 539, 542, 545, 548, 551, 
	553, 557, 559, 561, 563, 565, 567, 569, 
	571, 573, 575, 590, 593, 596, 599, 602, 
	605, 608, 611, 614, 617, 620, 623, 626, 
	629, 632, 635, 638, 641, 644, 647, 650, 
	653, 656, 661, 664, 667, 670, 673, 676, 
	679, 682, 685, 688, 691, 697, 700, 703, 
	706, 709, 712, 715, 718, 723, 726, 729, 
	732, 737, 740, 743, 746, 749, 752, 755, 
	758, 761, 764, 767, 770, 773, 778, 781, 
	784, 787, 790, 793, 796, 799, 802, 805, 
	808, 811, 814, 818, 821, 824, 827, 830, 
	832, 834, 836, 838, 840, 842, 845, 847, 
	849, 851, 853, 855, 857, 859, 861, 863, 
	865, 867, 869, 871, 886, 889, 892, 895, 
	898, 901, 904, 907, 910, 913, 916, 919, 
	922, 925, 928, 931, 934, 937, 940, 943, 
	946, 949, 952, 956, 959, 962, 965, 968, 
	974, 977, 980, 983, 986, 989, 992, 995, 
	1000, 1003, 1006, 1009, 1014, 1017, 1020, 1023, 
	1026, 1029, 1032, 1035, 1038, 1041, 1044, 1047, 
	1050, 1053, 1057, 1060, 1063, 1066, 1069, 1072, 
	1075, 1079, 1085, 1089, 1092, 1098, 1116, 1119, 
	1122, 1125, 1128, 1131, 1134, 1137, 1140, 1143, 
	1146, 1149, 1152, 1155, 1158, 1161, 1164, 1167, 
	1170, 1173, 1177, 1180, 1183, 1186, 1189, 1195, 
	1198, 1201, 1204, 1207, 1210, 1213, 1216, 1221, 
	1224, 1227, 1230, 1235, 1238, 1241, 1244, 1247, 
	1250, 1253, 1256, 1259, 1262, 1265, 1268, 1271, 
	1274, 1279, 1282, 1285, 1288, 1291, 1294, 1297, 
	1300, 1303, 1306, 1309, 1312, 1315, 1319, 1322, 
	1325, 1328, 1331, 1333, 1335
];

var _lexer_indicies = [
	1, 2, 4, 3, 5, 6, 7, 8, 
	9, 10, 11, 12, 13, 14, 15, 16, 
	17, 3, 0, 18, 0, 19, 0, 20, 
	0, 22, 23, 21, 25, 26, 24, 1, 
	2, 4, 3, 5, 6, 7, 8, 9, 
	10, 11, 12, 13, 14, 15, 16, 3, 
	0, 18, 0, 27, 0, 28, 0, 30, 
	31, 29, 33, 34, 32, 37, 36, 38, 
	36, 35, 41, 40, 42, 40, 39, 41, 
	40, 43, 40, 39, 41, 40, 44, 40, 
	39, 46, 45, 45, 0, 4, 47, 47, 
	0, 49, 50, 48, 4, 0, 51, 0, 
	52, 0, 53, 0, 54, 0, 55, 0, 
	56, 0, 57, 0, 58, 0, 59, 0, 
	60, 0, 61, 0, 62, 0, 63, 0, 
	64, 0, 0, 0, 0, 0, 65, 66, 
	67, 66, 66, 69, 68, 65, 4, 70, 
	9, 70, 0, 71, 0, 72, 0, 73, 
	0, 18, 0, 74, 75, 76, 0, 75, 
	0, 77, 0, 19, 0, 78, 0, 79, 
	0, 80, 0, 81, 0, 82, 0, 83, 
	0, 85, 84, 87, 86, 88, 89, 87, 
	90, 91, 92, 93, 91, 94, 95, 96, 
	97, 98, 90, 86, 99, 87, 86, 87, 
	100, 86, 87, 101, 86, 102, 103, 105, 
	104, 106, 107, 108, 109, 110, 111, 112, 
	113, 114, 115, 116, 117, 104, 0, 118, 
	0, 119, 120, 19, 121, 0, 122, 0, 
	123, 0, 124, 0, 125, 0, 126, 0, 
	75, 0, 122, 0, 124, 123, 123, 0, 
	127, 0, 128, 0, 129, 0, 130, 0, 
	131, 0, 132, 0, 133, 0, 135, 134, 
	137, 136, 137, 138, 139, 140, 139, 138, 
	136, 137, 141, 136, 137, 142, 136, 137, 
	143, 136, 144, 145, 137, 146, 136, 146, 
	137, 136, 137, 147, 136, 137, 148, 136, 
	137, 149, 136, 137, 150, 136, 137, 151, 
	136, 137, 152, 136, 137, 153, 136, 137, 
	154, 136, 137, 155, 136, 137, 156, 136, 
	137, 157, 136, 146, 137, 136, 158, 0, 
	159, 0, 160, 0, 161, 162, 163, 0, 
	163, 0, 164, 0, 165, 0, 166, 0, 
	167, 0, 168, 0, 169, 0, 170, 0, 
	171, 0, 172, 0, 173, 0, 174, 0, 
	176, 175, 178, 177, 178, 179, 180, 181, 
	180, 182, 183, 184, 185, 179, 177, 178, 
	186, 177, 178, 187, 177, 178, 188, 177, 
	178, 189, 177, 178, 190, 177, 178, 191, 
	177, 178, 192, 177, 178, 193, 177, 178, 
	194, 177, 178, 195, 177, 178, 196, 177, 
	178, 197, 177, 178, 198, 177, 178, 199, 
	177, 178, 200, 177, 178, 201, 177, 178, 
	202, 177, 178, 203, 177, 178, 204, 177, 
	178, 205, 177, 178, 206, 177, 178, 207, 
	177, 178, 208, 177, 178, 209, 177, 178, 
	210, 177, 178, 211, 177, 178, 205, 177, 
	178, 212, 177, 178, 213, 177, 178, 214, 
	177, 215, 216, 178, 217, 177, 217, 178, 
	177, 178, 218, 177, 178, 219, 177, 178, 
	220, 177, 178, 221, 177, 178, 222, 177, 
	178, 223, 177, 178, 224, 177, 178, 225, 
	177, 178, 211, 177, 217, 178, 177, 178, 
	226, 227, 177, 178, 228, 177, 178, 229, 
	177, 178, 230, 177, 178, 231, 177, 178, 
	232, 177, 178, 205, 177, 178, 233, 177, 
	178, 234, 177, 178, 235, 177, 178, 236, 
	177, 178, 237, 177, 178, 238, 177, 239, 
	178, 240, 177, 240, 178, 177, 178, 241, 
	177, 178, 242, 177, 178, 226, 177, 163, 
	0, 243, 19, 244, 0, 245, 0, 246, 
	0, 247, 0, 248, 0, 249, 0, 250, 
	0, 251, 0, 253, 252, 255, 254, 256, 
	257, 255, 258, 259, 260, 261, 259, 262, 
	263, 264, 265, 266, 258, 254, 267, 255, 
	254, 255, 268, 254, 255, 269, 254, 267, 
	255, 254, 255, 270, 254, 255, 271, 254, 
	255, 272, 254, 255, 273, 254, 255, 274, 
	254, 255, 275, 254, 255, 276, 254, 255, 
	277, 254, 255, 278, 254, 255, 279, 254, 
	255, 280, 254, 255, 281, 254, 255, 282, 
	254, 255, 283, 254, 255, 284, 254, 255, 
	285, 254, 255, 286, 254, 255, 267, 254, 
	287, 255, 288, 289, 254, 288, 255, 254, 
	255, 290, 254, 255, 268, 254, 255, 291, 
	254, 255, 292, 254, 255, 293, 254, 255, 
	294, 254, 255, 295, 254, 255, 269, 254, 
	255, 296, 254, 297, 298, 255, 268, 299, 
	254, 300, 255, 254, 255, 301, 254, 255, 
	302, 254, 255, 303, 254, 255, 304, 254, 
	255, 288, 254, 300, 255, 254, 255, 302, 
	301, 301, 254, 255, 305, 254, 255, 306, 
	254, 255, 307, 254, 308, 309, 255, 310, 
	254, 310, 255, 254, 255, 311, 254, 255, 
	312, 254, 255, 313, 254, 255, 314, 254, 
	255, 315, 254, 255, 316, 254, 255, 317, 
	254, 255, 318, 254, 255, 319, 254, 255, 
	295, 254, 310, 255, 254, 255, 320, 268, 
	321, 254, 255, 322, 254, 255, 323, 254, 
	255, 324, 254, 255, 325, 254, 255, 326, 
	254, 255, 295, 254, 255, 327, 254, 255, 
	328, 254, 255, 329, 254, 255, 330, 254, 
	255, 331, 254, 255, 332, 254, 333, 255, 
	334, 254, 334, 255, 254, 255, 335, 254, 
	255, 336, 254, 255, 320, 254, 337, 0, 
	338, 0, 339, 0, 340, 0, 341, 0, 
	342, 0, 343, 344, 0, 344, 0, 345, 
	0, 346, 0, 347, 0, 348, 0, 349, 
	0, 350, 0, 351, 0, 352, 0, 353, 
	0, 354, 0, 356, 355, 358, 357, 359, 
	360, 358, 361, 362, 363, 364, 362, 365, 
	366, 367, 368, 369, 361, 357, 370, 358, 
	357, 358, 371, 357, 358, 372, 357, 370, 
	358, 357, 358, 373, 357, 358, 374, 357, 
	358, 375, 357, 358, 376, 357, 358, 377, 
	357, 358, 378, 357, 358, 379, 357, 358, 
	380, 357, 358, 381, 357, 358, 382, 357, 
	358, 383, 357, 358, 384, 357, 358, 385, 
	357, 358, 386, 357, 358, 387, 357, 358, 
	388, 357, 358, 389, 357, 358, 370, 357, 
	390, 358, 391, 357, 391, 358, 357, 358, 
	392, 357, 358, 371, 357, 358, 393, 357, 
	394, 395, 358, 371, 396, 357, 397, 358, 
	357, 358, 398, 357, 358, 399, 357, 358, 
	400, 357, 358, 401, 357, 358, 391, 357, 
	397, 358, 357, 358, 399, 398, 398, 357, 
	358, 402, 357, 358, 403, 357, 358, 404, 
	357, 405, 406, 358, 407, 357, 407, 358, 
	357, 358, 408, 357, 358, 409, 357, 358, 
	410, 357, 358, 411, 357, 358, 412, 357, 
	358, 413, 357, 358, 414, 357, 358, 415, 
	357, 358, 416, 357, 358, 417, 357, 358, 
	372, 357, 407, 358, 357, 358, 418, 371, 
	357, 358, 419, 357, 358, 420, 357, 358, 
	421, 357, 358, 422, 357, 358, 423, 357, 
	358, 417, 357, 424, 425, 424, 0, 428, 
	427, 429, 430, 427, 426, 0, 432, 433, 
	431, 0, 432, 431, 428, 434, 432, 433, 
	434, 431, 435, 436, 428, 437, 438, 439, 
	440, 441, 442, 443, 444, 445, 446, 447, 
	448, 449, 437, 0, 99, 87, 86, 87, 
	450, 86, 87, 451, 86, 87, 452, 86, 
	87, 453, 86, 87, 454, 86, 87, 455, 
	86, 87, 456, 86, 87, 457, 86, 87, 
	458, 86, 87, 459, 86, 87, 460, 86, 
	87, 461, 86, 87, 462, 86, 87, 463, 
	86, 87, 464, 86, 87, 465, 86, 87, 
	466, 86, 87, 99, 86, 467, 87, 468, 
	86, 468, 87, 86, 87, 469, 86, 87, 
	100, 86, 87, 470, 86, 471, 472, 87, 
	100, 473, 86, 474, 87, 86, 87, 475, 
	86, 87, 476, 86, 87, 477, 86, 87, 
	478, 86, 87, 468, 86, 474, 87, 86, 
	87, 476, 475, 475, 86, 87, 479, 86, 
	87, 480, 86, 87, 481, 86, 482, 483, 
	87, 484, 86, 484, 87, 86, 87, 485, 
	86, 87, 486, 86, 87, 487, 86, 87, 
	488, 86, 87, 489, 86, 87, 490, 86, 
	87, 491, 86, 87, 492, 86, 87, 493, 
	86, 87, 494, 86, 87, 101, 86, 484, 
	87, 86, 87, 495, 100, 496, 86, 87, 
	497, 86, 87, 498, 86, 87, 499, 86, 
	87, 500, 86, 87, 501, 86, 87, 494, 
	86, 87, 502, 86, 87, 503, 86, 87, 
	504, 86, 87, 505, 86, 87, 506, 86, 
	87, 507, 86, 508, 87, 509, 86, 509, 
	87, 86, 87, 510, 86, 87, 511, 86, 
	87, 495, 86, 512, 0, 3, 0, 513, 
	0
];

var _lexer_trans_targs = [
	0, 2, 8, 7, 7, 9, 19, 21, 
	4, 35, 38, 42, 59, 69, 96, 176, 
	344, 418, 3, 4, 5, 6, 7, 20, 
	6, 7, 20, 10, 11, 12, 13, 12, 
	12, 13, 12, 14, 14, 14, 15, 14, 
	14, 14, 15, 16, 17, 18, 7, 18, 
	19, 7, 20, 22, 23, 24, 25, 26, 
	27, 28, 29, 30, 31, 32, 33, 34, 
	420, 36, 37, 7, 36, 35, 37, 39, 
	40, 41, 43, 44, 46, 45, 47, 48, 
	49, 50, 51, 52, 53, 54, 53, 54, 
	55, 350, 54, 7, 351, 57, 365, 369, 
	373, 383, 400, 56, 57, 58, 2, 8, 
	7, 7, 9, 19, 21, 4, 35, 38, 
	42, 59, 69, 96, 176, 344, 60, 61, 
	67, 68, 62, 63, 64, 65, 66, 70, 
	71, 72, 73, 74, 75, 76, 77, 78, 
	77, 78, 78, 7, 79, 80, 81, 82, 
	83, 95, 84, 85, 86, 87, 88, 89, 
	90, 91, 92, 93, 94, 58, 97, 98, 
	99, 100, 175, 101, 102, 103, 104, 105, 
	106, 107, 108, 109, 110, 111, 112, 113, 
	114, 113, 114, 114, 7, 115, 129, 136, 
	142, 157, 116, 117, 118, 119, 120, 121, 
	122, 123, 124, 125, 126, 127, 128, 7, 
	130, 131, 132, 133, 134, 135, 58, 137, 
	138, 139, 140, 141, 143, 144, 145, 146, 
	156, 147, 148, 149, 150, 151, 152, 153, 
	154, 155, 158, 164, 159, 160, 161, 162, 
	163, 165, 166, 167, 168, 169, 170, 171, 
	172, 173, 174, 177, 263, 178, 179, 180, 
	181, 182, 183, 184, 185, 186, 185, 186, 
	187, 190, 186, 7, 191, 189, 205, 209, 
	219, 229, 245, 188, 189, 58, 192, 193, 
	194, 195, 196, 197, 198, 199, 200, 201, 
	202, 203, 204, 7, 206, 207, 208, 210, 
	211, 213, 212, 214, 215, 216, 217, 218, 
	220, 221, 227, 228, 222, 223, 224, 225, 
	226, 230, 231, 232, 233, 244, 234, 235, 
	236, 237, 238, 239, 240, 241, 242, 243, 
	246, 252, 247, 248, 249, 250, 251, 253, 
	254, 255, 256, 257, 258, 259, 260, 261, 
	262, 264, 265, 266, 267, 268, 269, 270, 
	271, 272, 273, 274, 275, 276, 277, 278, 
	279, 280, 281, 282, 283, 282, 283, 284, 
	287, 283, 7, 288, 286, 302, 306, 310, 
	320, 337, 285, 286, 58, 289, 290, 291, 
	292, 293, 294, 295, 296, 297, 298, 299, 
	300, 301, 7, 303, 304, 305, 307, 308, 
	309, 311, 312, 318, 319, 313, 314, 315, 
	316, 317, 321, 322, 323, 324, 336, 325, 
	326, 327, 328, 329, 330, 331, 332, 333, 
	334, 335, 338, 339, 340, 341, 342, 343, 
	344, 345, 346, 348, 349, 347, 345, 346, 
	347, 345, 348, 2, 8, 349, 9, 19, 
	21, 4, 35, 38, 42, 59, 69, 96, 
	176, 344, 352, 353, 354, 355, 356, 357, 
	358, 359, 360, 361, 362, 363, 364, 7, 
	366, 367, 368, 370, 371, 372, 374, 375, 
	381, 382, 376, 377, 378, 379, 380, 384, 
	385, 386, 387, 399, 388, 389, 390, 391, 
	392, 393, 394, 395, 396, 397, 398, 401, 
	407, 402, 403, 404, 405, 406, 408, 409, 
	410, 411, 412, 413, 414, 415, 416, 417, 
	419, 0
];

var _lexer_trans_actions = [
	43, 29, 29, 0, 54, 3, 1, 0, 
	29, 1, 29, 29, 29, 29, 29, 29, 
	35, 0, 0, 0, 0, 57, 149, 126, 
	0, 110, 23, 0, 0, 7, 139, 48, 
	0, 102, 9, 5, 45, 134, 45, 0, 
	33, 122, 33, 33, 0, 11, 106, 0, 
	0, 114, 25, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 27, 118, 27, 51, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 57, 144, 0, 54, 
	84, 84, 0, 72, 33, 84, 84, 84, 
	84, 84, 84, 0, 0, 15, 63, 63, 
	31, 130, 60, 57, 31, 63, 57, 63, 
	63, 63, 63, 63, 63, 66, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 57, 144, 
	0, 54, 0, 81, 84, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 21, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 57, 
	144, 0, 54, 0, 69, 33, 84, 84, 
	84, 84, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 13, 
	0, 0, 0, 0, 0, 0, 13, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 57, 144, 0, 54, 
	84, 84, 0, 75, 33, 84, 84, 84, 
	84, 84, 84, 0, 0, 17, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 17, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 57, 144, 0, 54, 84, 
	84, 0, 78, 33, 84, 84, 84, 84, 
	84, 84, 0, 0, 19, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 19, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 37, 37, 54, 37, 87, 0, 
	0, 39, 0, 96, 96, 0, 93, 90, 
	41, 96, 90, 96, 96, 96, 96, 96, 
	96, 99, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 15, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0
];

var _lexer_eof_actions = [
	0, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43
];

var lexer_start = 1;
var lexer_first_final = 420;
var lexer_error = 0;

var lexer_en_main = 1;


/* line 129 "ragel/i18n/ro.js.rl" */

/* line 130 "ragel/i18n/ro.js.rl" */

/* line 131 "ragel/i18n/ro.js.rl" */

/* line 132 "ragel/i18n/ro.js.rl" */

var Lexer = function(listener) {
  // Check that listener has the required functions
  var events = ['comment', 'tag', 'feature', 'background', 'scenario', 'scenario_outline', 'examples', 'step', 'doc_string', 'row', 'eof'];
  for(var i=0, len=events.length; i<len; i++) {
    var event = events[i];
    if(typeof listener[event] != 'function') {
      throw new Error("Error. No " + event + " function exists on " + JSON.stringify(listener));
    }
  }
  this.listener = listener;
};

Lexer.prototype.scan = function(data) {
  var ending = "\n%_FEATURE_END_%";
  if(typeof data == 'string') {
    data = this.stringToBytes(data + ending);
  } else if(typeof Buffer != 'undefined' && Buffer.isBuffer(data)) {
    // Node.js
    var buf = new Buffer(data.length + ending.length);
    data.copy(buf, 0, 0);
    new Buffer(ending).copy(buf, data.length, 0);
    data = buf;
  }
  var eof = pe = data.length;
  var p = 0;

  this.line_number = 1;
  this.last_newline = 0;
  var signedCharValue=function(v){return v > 127 ? v-256 : v; };

  
/* line 789 "js/lib/gherkin/lexer/ro.js" */
{
	  this.cs = lexer_start;
} /* JSCodeGen::writeInit */

/* line 164 "ragel/i18n/ro.js.rl" */
  
/* line 796 "js/lib/gherkin/lexer/ro.js" */
{
	var _klen, _trans, _keys, _ps, _widec, _acts, _nacts;
	var _goto_level, _resume, _eof_trans, _again, _test_eof;
	var _out;
	_klen = _trans = _keys = _acts = _nacts = null;
	_goto_level = 0;
	_resume = 10;
	_eof_trans = 15;
	_again = 20;
	_test_eof = 30;
	_out = 40;
	while (true) {
	_trigger_goto = false;
	if (_goto_level <= 0) {
	if (p == pe) {
		_goto_level = _test_eof;
		continue;
	}
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	}
	if (_goto_level <= _resume) {
	_keys = _lexer_key_offsets[ this.cs];
	_trans = _lexer_index_offsets[ this.cs];
	_klen = _lexer_single_lengths[ this.cs];
	_break_match = false;
	
	do {
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + _klen - 1;

	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + ( (_upper - _lower) >> 1 );

	        if (( signedCharValue(data[p])) < _lexer_trans_keys[_mid]) {
	           _upper = _mid - 1;
	        } else if (( signedCharValue(data[p])) > _lexer_trans_keys[_mid]) {
	           _lower = _mid + 1;
	        } else {
	           _trans += (_mid - _keys);
	           _break_match = true;
	           break;
	        };
	     } /* while */
	     if (_break_match) { break; }
	     _keys += _klen;
	     _trans += _klen;
	  }
	  _klen = _lexer_range_lengths[ this.cs];
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + (_klen << 1) - 2;
	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + (((_upper-_lower) >> 1) & ~1);
	        if (( signedCharValue(data[p])) < _lexer_trans_keys[_mid]) {
	          _upper = _mid - 2;
	         } else if (( signedCharValue(data[p])) > _lexer_trans_keys[_mid+1]) {
	          _lower = _mid + 2;
	        } else {
	          _trans += ((_mid - _keys) >> 1);
	          _break_match = true;
	          break;
	        }
	     } /* while */
	     if (_break_match) { break; }
	     _trans += _klen
	  }
	} while (false);
	_trans = _lexer_indicies[_trans];
	 this.cs = _lexer_trans_targs[_trans];
	if (_lexer_trans_actions[_trans] != 0) {
		_acts = _lexer_trans_actions[_trans];
		_nacts = _lexer_actions[_acts];
		_acts += 1;
		while (_nacts > 0) {
			_nacts -= 1;
			_acts += 1;
			switch (_lexer_actions[_acts - 1]) {
case 0:
/* line 6 "ragel/i18n/ro.js.rl" */

    this.content_start = p;
    this.current_line = this.line_number;
    this.start_col = p - this.last_newline - (this.keyword+':').length;
  		break;
case 1:
/* line 12 "ragel/i18n/ro.js.rl" */

    this.current_line = this.line_number;
    this.start_col = p - this.last_newline;
  		break;
case 2:
/* line 17 "ragel/i18n/ro.js.rl" */

    this.content_start = p;
  		break;
case 3:
/* line 21 "ragel/i18n/ro.js.rl" */

    this.docstring_content_type_start = p;
  		break;
case 4:
/* line 25 "ragel/i18n/ro.js.rl" */

    this.docstring_content_type_end = p;
  		break;
case 5:
/* line 29 "ragel/i18n/ro.js.rl" */

    var con = this.unindent(
      this.start_col, 
      this.bytesToString(data.slice(this.content_start, this.next_keyword_start-1)).replace(/(\r?\n)?([\t ])*$/, '').replace(/\\\"\\\"\\\"/mg, '"""')
    );
    var con_type = this.bytesToString(data.slice(this.docstring_content_type_start, this.docstring_content_type_end)).trim();
    this.listener.doc_string(con_type, con, this.current_line); 
  		break;
case 6:
/* line 38 "ragel/i18n/ro.js.rl" */

    p = this.store_keyword_content('feature', data, p, eof);
  		break;
case 7:
/* line 42 "ragel/i18n/ro.js.rl" */

    p = this.store_keyword_content('background', data, p, eof);
  		break;
case 8:
/* line 46 "ragel/i18n/ro.js.rl" */

    p = this.store_keyword_content('scenario', data, p, eof);
  		break;
case 9:
/* line 50 "ragel/i18n/ro.js.rl" */

    p = this.store_keyword_content('scenario_outline', data, p, eof);
  		break;
case 10:
/* line 54 "ragel/i18n/ro.js.rl" */

    p = this.store_keyword_content('examples', data, p, eof);
  		break;
case 11:
/* line 58 "ragel/i18n/ro.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.step(this.keyword, con, this.current_line);
  		break;
case 12:
/* line 63 "ragel/i18n/ro.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.comment(con, this.line_number);
    this.keyword_start = null;
  		break;
case 13:
/* line 69 "ragel/i18n/ro.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.tag(con, this.line_number);
    this.keyword_start = null;
  		break;
case 14:
/* line 75 "ragel/i18n/ro.js.rl" */

    this.line_number++;
  		break;
case 15:
/* line 79 "ragel/i18n/ro.js.rl" */

    this.last_newline = p + 1;
  		break;
case 16:
/* line 83 "ragel/i18n/ro.js.rl" */

    this.keyword_start = this.keyword_start || p;
  		break;
case 17:
/* line 87 "ragel/i18n/ro.js.rl" */

    this.keyword = this.bytesToString(data.slice(this.keyword_start, p)).replace(/:$/, '');
    this.keyword_start = null;
  		break;
case 18:
/* line 92 "ragel/i18n/ro.js.rl" */

    this.next_keyword_start = p;
  		break;
case 19:
/* line 96 "ragel/i18n/ro.js.rl" */

    p = p - 1;
    current_row = [];
    this.current_line = this.line_number;
  		break;
case 20:
/* line 102 "ragel/i18n/ro.js.rl" */

    this.content_start = p;
  		break;
case 21:
/* line 106 "ragel/i18n/ro.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    current_row.push(con.replace(/\\\|/, "|").replace(/\\n/, "\n").replace(/\\\\/, "\\"));
  		break;
case 22:
/* line 111 "ragel/i18n/ro.js.rl" */

    this.listener.row(current_row, this.current_line);
  		break;
case 23:
/* line 115 "ragel/i18n/ro.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw new Error("Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.");
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 1023 "js/lib/gherkin/lexer/ro.js" */
			} /* action switch */
		}
	}
	if (_trigger_goto) {
		continue;
	}
	}
	if (_goto_level <= _again) {
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	p += 1;
	if (p != pe) {
		_goto_level = _resume;
		continue;
	}
	}
	if (_goto_level <= _test_eof) {
	if (p == eof) {
	__acts = _lexer_eof_actions[ this.cs];
	__nacts =  _lexer_actions[__acts];
	__acts += 1;
	while (__nacts > 0) {
		__nacts -= 1;
		__acts += 1;
		switch (_lexer_actions[__acts - 1]) {
case 23:
/* line 115 "ragel/i18n/ro.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw new Error("Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.");
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 1062 "js/lib/gherkin/lexer/ro.js" */
		} /* eof action switch */
	}
	if (_trigger_goto) {
		continue;
	}
}
	}
	if (_goto_level <= _out) {
		break;
	}
	}
	}

/* line 165 "ragel/i18n/ro.js.rl" */
};


/*
 * Decode utf-8 byte sequence to string.
 */
var decodeUtf8 = function(bytes) {
  var result = "";
  var i = 0;
  var wc;
  var c;

  while (i < bytes.length) {
    /* parse as UTF-8 lead byte */
    wc = bytes[i++];
    if (wc < 0x80) {
      count = 0;
    } else if (wc < 0xC2 || wc >= 0xF8) {
      throw new Error("input is not a valid UTF-8 lead octet");
    } else if (wc < 0xE0) {
      count = 1;
      wc = (wc & 0x1F) << 6;
    } else if (wc < 0xF0) {
      count = 2;
      wc = (wc & 0x0F) << 12;
    } else /* wc < 0xF8 */ {
      count = 3;
      wc = (wc & 0x07) << 18;
    }

    /* parse trail bytes, if any */
    while (count) {
      if (!(i < bytes.length)) {
        throw new Error("short read");
      }
      if ((c = bytes[i++] ^ 0x80) > 0x3F) {
        throw new Error("input is not a valid UTF-8 trail octet");
      }
      wc |= c << (6 * --count);
      if (wc < (1 << (5 * count + 6))) {
        throw new Error("invalid non-minimal encoded input");
      }
    }

    /* handle conversion to UTF-16 if needed */
    if (wc > 0xFFFF) {
      wc -= 0x10000;
      result += String.fromCharCode(0xD800 + (wc >> 10));
      wc = 0xDC00 + (wc & 0x3FF);
    }
    result += String.fromCharCode(wc);
  }

  return result;
};

/*
 * Encode string to an array of bytes using utf8 encoding.
 *
 * Javascript internally stores character data as utf16 (like java).
 * String.charCodeAt() does *not* produce unicode points, but simply
 * reflects this internal representation. Thus, it is necessary
 * to first decode the utf-16 representation before encoding to
 * utf-8.
 */
var encodeUtf8 = function(string) {
  var bytes = [];
  var i = 0;
  var j = 0;
  var wc;

  while (i < string.length) {
    wc = string.charCodeAt(i++);
    if (wc >= 0xD800 && wc <= 0xDBFF && i < string.length && string.charCodeAt(i) >= 0xDC00 && string.charCodeAt(i) <= 0xDFFF) {
      /* decode UTF-16 */
      wc = 0x10000 + ((wc & 0x3FF) << 10) + (string.charCodeAt(i++) & 0x3FF);
    }

    /* emit lead byte */
    if (wc < 0x80) {
      bytes[j++] = wc;
      count = 0;
    } else if (wc < 0x800) {
      bytes[j++] = 0xC0 | (wc >> 6);
      count = 1;
    } else if (wc < 0x10000) {
      bytes[j++] = 0xE0 | (wc >> 12);
      count = 2;
    } else {
      /* SMP: 21-bit Unicode */
      bytes[j++] = 0xF0 | (wc >> 18);
      count = 3;
    }

    /* emit trail bytes, if any */
    while (count) {
      bytes[j++] = 0x80 | ((wc >> (6 * --count)) & 0x3F);
    }
  }

  return bytes;

};

Lexer.prototype.bytesToString = function(bytes) {
  if(typeof bytes.write == 'function') {
    // Node.js
    return bytes.toString('utf-8');
  }
  return decodeUtf8(bytes);
};

Lexer.prototype.stringToBytes = function(string) {
  return encodeUtf8(string);
};

Lexer.prototype.unindent = function(startcol, text) {
  startcol = startcol || 0;
  return text.replace(new RegExp('^[\t ]{0,' + startcol + '}', 'gm'), ''); 
};

Lexer.prototype.store_keyword_content = function(event, data, p, eof) {
  var end_point = (!this.next_keyword_start || (p == eof)) ? p : this.next_keyword_start;
  var content = this.unindent(this.start_col + 2, this.bytesToString(data.slice(this.content_start, end_point))).replace(/\s+$/,"");
  var content_lines = content.split("\n")
  var name = content_lines.shift() || "";
  name = name.trim();
  var description = content_lines.join("\n");
  this.listener[event](this.keyword, name, description, this.current_line);
  var nks = this.next_keyword_start;
  this.next_keyword_start = null;
  return nks ? nks - 1 : p;
};

Lexer.prototype.current_line_content = function(data, p) {
  var rest = Array.prototype.slice.call(data,this.last_newline, -1);
  var end = rest.indexOf(10) || -1;
  return this.bytesToString(rest.slice(0, end)).trim();
};

// Node.js export
if(typeof module !== 'undefined') {
  module.exports = Lexer;
}
// Require.js export
if (typeof define !== 'undefined') {
  if(define.amd) {
    define('gherkin/lexer/ro', [], function() {
      return Lexer;
    });
  } else {
    define('gherkin/lexer/ro', function(require, exports, module) {
      exports.Lexer = Lexer;
    });
  }
}

})();

}).call(this,require("buffer").Buffer)

},{"buffer":69}],227:[function(require,module,exports){
(function (Buffer){

/* line 1 "ragel/i18n/ru.js.rl" */
;(function() {


/* line 126 "ragel/i18n/ru.js.rl" */



/* line 11 "js/lib/gherkin/lexer/ru.js" */
var _lexer_actions = [
	0, 1, 0, 1, 1, 1, 2, 1, 
	3, 1, 4, 1, 5, 1, 6, 1, 
	7, 1, 8, 1, 9, 1, 10, 1, 
	11, 1, 12, 1, 13, 1, 16, 1, 
	17, 1, 18, 1, 19, 1, 20, 1, 
	21, 1, 22, 1, 23, 2, 2, 18, 
	2, 3, 4, 2, 13, 0, 2, 14, 
	15, 2, 17, 0, 2, 17, 1, 2, 
	17, 16, 2, 17, 19, 2, 18, 6, 
	2, 18, 7, 2, 18, 8, 2, 18, 
	9, 2, 18, 10, 2, 18, 16, 2, 
	20, 21, 2, 22, 0, 2, 22, 1, 
	2, 22, 16, 2, 22, 19, 3, 4, 
	14, 15, 3, 5, 14, 15, 3, 11, 
	14, 15, 3, 12, 14, 15, 3, 13, 
	14, 15, 3, 14, 15, 18, 3, 17, 
	0, 11, 3, 17, 14, 15, 4, 2, 
	14, 15, 18, 4, 3, 4, 14, 15, 
	4, 17, 0, 14, 15, 5, 17, 0, 
	11, 14, 15
];

var _lexer_key_offsets = [
	0, 0, 12, 22, 23, 25, 27, 38, 
	39, 40, 42, 44, 49, 54, 59, 64, 
	68, 72, 74, 75, 76, 77, 78, 79, 
	80, 81, 82, 83, 84, 85, 86, 87, 
	88, 89, 94, 101, 106, 110, 116, 119, 
	121, 127, 138, 139, 141, 142, 143, 144, 
	145, 146, 147, 148, 149, 150, 151, 152, 
	153, 154, 155, 156, 157, 158, 159, 160, 
	161, 162, 163, 165, 166, 167, 169, 170, 
	171, 172, 173, 174, 175, 176, 177, 178, 
	179, 180, 181, 182, 183, 184, 185, 186, 
	195, 206, 208, 219, 221, 224, 226, 228, 
	230, 232, 234, 236, 238, 240, 242, 244, 
	246, 248, 250, 252, 254, 256, 258, 260, 
	262, 264, 266, 268, 271, 273, 275, 277, 
	279, 281, 283, 285, 287, 289, 291, 293, 
	295, 297, 299, 301, 303, 305, 307, 309, 
	311, 313, 315, 317, 319, 321, 323, 325, 
	327, 330, 332, 334, 336, 338, 340, 342, 
	344, 346, 348, 350, 352, 354, 356, 358, 
	361, 363, 365, 367, 369, 371, 373, 375, 
	377, 379, 381, 383, 385, 387, 389, 391, 
	393, 395, 397, 399, 401, 403, 405, 407, 
	409, 411, 413, 415, 417, 419, 421, 423, 
	425, 427, 429, 431, 433, 435, 437, 439, 
	441, 443, 445, 447, 449, 452, 454, 456, 
	459, 461, 463, 465, 467, 469, 471, 473, 
	475, 477, 479, 482, 484, 486, 488, 490, 
	492, 494, 496, 498, 500, 502, 504, 506, 
	508, 510, 512, 514, 516, 518, 520, 522, 
	524, 525, 526, 527, 528, 529, 530, 531, 
	532, 533, 534, 535, 536, 537, 538, 540, 
	541, 543, 544, 545, 546, 547, 548, 549, 
	550, 551, 552, 553, 554, 555, 556, 557, 
	558, 559, 560, 561, 562, 563, 564, 565, 
	566, 567, 568, 569, 570, 577, 580, 582, 
	584, 586, 588, 590, 592, 594, 596, 598, 
	600, 602, 604, 606, 608, 610, 612, 614, 
	616, 618, 620, 622, 624, 626, 628, 630, 
	633, 635, 637, 639, 641, 643, 645, 647, 
	649, 650, 651, 652, 653, 654, 655, 657, 
	658, 659, 660, 661, 662, 663, 664, 665, 
	666, 667, 668, 669, 670, 671, 672, 673, 
	681, 686, 688, 690, 692, 694, 696, 698, 
	700, 702, 704, 706, 708, 710, 712, 714, 
	716, 718, 720, 722, 725, 727, 729, 731, 
	733, 735, 737, 739, 741, 743, 745, 747, 
	749, 751, 753, 755, 757, 759, 761, 763, 
	765, 767, 769, 771, 773, 776, 778, 780, 
	782, 784, 786, 788, 790, 792, 794, 796, 
	798, 800, 802, 805, 807, 809, 811, 813, 
	815, 817, 819, 821, 823, 825, 827, 829, 
	831, 833, 835, 837, 839, 841, 843, 845, 
	847, 849, 851, 853, 855, 857, 859, 861, 
	863, 865, 867, 869, 871, 873, 875, 877, 
	879, 881, 883, 885, 887, 889, 891, 893, 
	895, 897, 899, 902, 904, 906, 908, 910, 
	912, 914, 916, 918, 920, 922, 924, 926, 
	928, 930, 932, 934, 936, 938, 940, 942, 
	944, 946, 947, 948, 949, 950, 951, 952, 
	953, 954, 955, 956, 957, 958, 959, 960, 
	961, 962, 963, 964, 965, 966, 967, 968, 
	969, 970, 971, 972, 973, 974, 975, 976, 
	977, 978, 979, 980, 989, 1000, 1002, 1004, 
	1007, 1009, 1011, 1013, 1015, 1017, 1019, 1021, 
	1023, 1025, 1027, 1029, 1031, 1033, 1035, 1037, 
	1039, 1041, 1043, 1045, 1047, 1049, 1051, 1054, 
	1056, 1058, 1060, 1062, 1064, 1066, 1068, 1070, 
	1072, 1074, 1076, 1078, 1080, 1082, 1084, 1086, 
	1088, 1090, 1092, 1094, 1096, 1098, 1100, 1102, 
	1104, 1106, 1108, 1110, 1113, 1115, 1117, 1119, 
	1121, 1123, 1125, 1127, 1129, 1131, 1133, 1135, 
	1137, 1139, 1141, 1143, 1145, 1147, 1149, 1151, 
	1153, 1155, 1157, 1159, 1161, 1163, 1165, 1167, 
	1169, 1172, 1174, 1176, 1179, 1181, 1183, 1185, 
	1187, 1189, 1191, 1193, 1195, 1197, 1199, 1202, 
	1204, 1206, 1208, 1210, 1212, 1214, 1216, 1218, 
	1220, 1222, 1224, 1226, 1228, 1230, 1232, 1234, 
	1236, 1238, 1240, 1242, 1244, 1246, 1247, 1248, 
	1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 
	1257, 1258, 1259, 1260, 1261, 1270, 1281, 1283, 
	1285, 1288, 1290, 1292, 1294, 1296, 1298, 1300, 
	1302, 1304, 1306, 1308, 1310, 1312, 1314, 1316, 
	1318, 1320, 1322, 1324, 1326, 1328, 1330, 1332, 
	1335, 1337, 1339, 1342, 1344, 1346, 1348, 1350, 
	1352, 1354, 1356, 1358, 1360, 1362, 1364, 1366, 
	1368, 1370, 1372, 1374, 1376, 1378, 1380, 1382, 
	1384, 1386, 1388, 1390, 1392, 1394, 1396, 1398, 
	1400, 1403, 1405, 1407, 1409, 1411, 1413, 1415, 
	1417, 1419, 1421, 1423, 1425, 1427, 1429, 1431, 
	1433, 1435, 1437, 1439, 1441, 1443, 1445, 1447, 
	1449, 1451, 1454, 1456, 1458, 1460, 1462, 1464, 
	1466, 1468, 1470, 1472, 1474, 1476, 1478, 1480, 
	1483, 1485, 1487, 1489, 1491, 1493, 1495, 1497, 
	1499, 1501, 1503, 1505, 1507, 1509, 1511, 1513, 
	1515, 1517, 1519, 1521, 1523, 1525, 1527, 1529, 
	1531, 1533, 1535, 1537, 1539, 1541, 1543, 1545, 
	1547, 1549, 1551, 1553, 1555, 1557, 1559, 1562, 
	1564, 1566, 1569, 1571, 1573, 1575, 1577, 1579, 
	1581, 1583, 1585, 1587, 1589, 1591, 1594, 1596, 
	1598, 1600, 1602, 1604, 1606, 1608, 1610, 1612, 
	1614, 1616, 1618, 1620, 1622, 1624, 1626, 1628, 
	1630, 1632, 1634, 1636, 1637, 1639, 1640, 1641, 
	1643, 1644, 1645, 1646, 1647, 1648, 1649, 1650, 
	1651, 1652, 1653, 1654, 1656, 1657, 1658, 1659, 
	1660, 1661, 1662, 1663, 1664, 1665, 1666
];

var _lexer_trans_keys = [
	-48, 10, 32, 34, 35, 37, 42, 64, 
	124, 239, 9, 13, -112, -108, -107, -104, 
	-102, -99, -97, -95, -94, -92, 32, 10, 
	13, 10, 13, -48, 10, 32, 34, 35, 
	37, 42, 64, 124, 9, 13, 34, 34, 
	10, 13, 10, 13, 10, 32, 34, 9, 
	13, 10, 32, 34, 9, 13, 10, 32, 
	34, 9, 13, 10, 32, 34, 9, 13, 
	10, 32, 9, 13, 10, 32, 9, 13, 
	10, 13, 10, 95, 70, 69, 65, 84, 
	85, 82, 69, 95, 69, 78, 68, 95, 
	37, 13, 32, 64, 9, 10, 9, 10, 
	13, 32, 64, 11, 12, 10, 32, 64, 
	9, 13, 32, 124, 9, 13, 10, 32, 
	92, 124, 9, 13, 10, 92, 124, 10, 
	92, 10, 32, 92, 124, 9, 13, -48, 
	10, 32, 34, 35, 37, 42, 64, 124, 
	9, 13, -48, -80, -66, -48, -67, -48, 
	-66, -48, -65, -47, -125, -47, -127, -47, 
	-126, -48, -72, -48, -68, -47, -127, -48, 
	-69, -48, -72, -48, 32, -66, -48, -77, 
	-67, -48, -76, -48, -80, -47, -126, -48, 
	-75, -48, -70, -47, -127, -47, -126, 58, 
	10, 10, -48, 10, 32, 35, 37, 42, 
	64, 9, 13, -112, -108, -107, -104, -102, 
	-99, -97, -95, -94, -92, 10, 10, 32, 
	-48, 10, 32, 34, 35, 37, 42, 64, 
	124, 9, 13, -48, 10, -80, -66, 10, 
	-48, 10, -67, 10, -48, 10, -66, 10, 
	-48, 10, -65, 10, -47, 10, -125, 10, 
	-47, 10, -127, 10, -47, 10, -126, 10, 
	-48, 10, -72, 10, -48, 10, -68, 10, 
	-47, 10, -127, 10, -48, 10, -69, 10, 
	-48, 10, -72, 10, -48, 10, 32, -66, 
	10, -48, 10, -77, 10, -48, 10, -76, 
	10, -48, 10, -80, 10, -47, 10, -126, 
	10, -48, 10, -66, 10, -48, 10, -68, 
	10, -47, 10, -125, 10, 10, 32, -48, 
	10, -74, 10, -48, 10, -75, 10, -47, 
	10, -125, 10, -47, 10, -127, 10, -47, 
	10, -126, 10, -47, 10, -116, 10, -48, 
	-47, 10, -78, 10, -48, 10, -66, 10, 
	-48, 10, -71, 10, -47, 10, -127, 10, 
	-47, 10, -126, 10, -48, 10, -78, 10, 
	-48, 10, -66, 10, 10, 58, -126, -122, 
	10, -47, 10, -128, 10, -47, 10, -125, 
	10, -48, 10, -70, 10, -47, 10, -126, 
	10, -47, 10, -125, 10, -47, 10, -128, 
	10, -48, 10, -80, 10, 10, 32, -47, 
	10, -127, 10, -47, 10, -122, 10, -48, 
	10, -75, 10, -48, 10, -67, 10, -48, 
	10, -80, 10, -47, 10, -128, 10, -48, 
	10, -72, 10, -47, 10, -113, 10, -48, 
	10, -75, 10, -48, 10, -67, 10, -48, 
	10, -80, 10, -47, 10, -128, 10, -48, 
	10, -72, 10, -48, 10, -71, 10, -48, 
	10, -80, -66, 10, -48, 10, -70, 10, 
	-48, 10, 32, -47, 10, -125, 10, -48, 
	10, -67, 10, -48, 10, -70, 10, -47, 
	10, -122, 10, -48, 10, -72, 10, -48, 
	-47, 10, -66, 10, -48, 10, -67, 10, 
	-48, 10, -80, 10, -48, 10, -69, 10, 
	10, 95, 10, 70, 10, 69, 10, 65, 
	10, 84, 10, 85, 10, 82, 10, 69, 
	10, 95, 10, 69, 10, 78, 10, 68, 
	10, 95, 10, 37, -47, -126, -48, -66, 
	-48, -68, -47, -125, 32, -48, -74, -48, 
	-75, -47, -128, -125, -48, -75, -72, -48, 
	-76, -47, -117, -47, -127, -47, -126, -48, 
	-66, -47, -128, -48, -72, -47, -113, -48, 
	-68, -48, -75, -47, -128, -47, -117, 58, 
	10, 10, -48, 10, 32, 35, 124, 9, 
	13, -95, -92, 10, -48, 10, -78, 10, 
	-48, 10, -66, 10, -48, 10, -71, 10, 
	-47, 10, -127, 10, -47, 10, -126, 10, 
	-48, 10, -78, 10, -48, 10, -66, 10, 
	10, 58, -47, 10, -125, 10, -48, 10, 
	-67, 10, -48, 10, -70, 10, -47, 10, 
	-122, 10, -48, 10, -72, 10, -48, -47, 
	10, -66, 10, -48, 10, -67, 10, -48, 
	10, -80, 10, -48, 10, -69, 10, -113, 
	10, -47, -127, -47, -126, -47, -116, -48, 
	-47, -78, -48, -66, -48, -71, -47, -127, 
	-47, -126, -48, -78, -48, -66, 58, 10, 
	10, -48, 10, 32, 35, 37, 64, 9, 
	13, -102, -97, -95, -92, 10, -48, 10, 
	-66, 10, -48, 10, -67, 10, -47, 10, 
	-126, 10, -48, 10, -75, 10, -48, 10, 
	-70, 10, -47, 10, -127, 10, -47, 10, 
	-126, 10, 10, 58, -47, 10, -128, 10, 
	-48, 10, -75, -72, 10, -48, 10, -76, 
	10, -47, 10, -117, 10, -47, 10, -127, 
	10, -47, 10, -126, 10, -48, 10, -66, 
	10, -47, 10, -128, 10, -48, 10, -72, 
	10, -47, 10, -113, 10, -48, 10, -68, 
	10, -48, 10, -75, 10, -47, 10, -128, 
	10, -47, 10, -117, 10, -48, -47, 10, 
	-78, 10, -48, 10, -66, 10, -48, 10, 
	-71, 10, -47, 10, -127, 10, -47, 10, 
	-126, 10, -48, 10, -78, 10, -48, 10, 
	-66, 10, -126, -122, 10, -47, 10, -128, 
	10, -47, 10, -125, 10, -48, 10, -70, 
	10, -47, 10, -126, 10, -47, 10, -125, 
	10, -47, 10, -128, 10, -48, 10, -80, 
	10, 10, 32, -47, 10, -127, 10, -47, 
	10, -122, 10, -48, 10, -75, 10, -48, 
	10, -67, 10, -48, 10, -80, 10, -48, 
	10, -75, 10, -48, 10, -67, 10, -48, 
	10, -80, 10, -47, 10, -128, 10, -48, 
	10, -72, 10, -48, 10, -71, 10, -47, 
	10, -125, 10, -48, 10, -67, 10, -48, 
	10, -70, 10, -47, 10, -122, 10, -48, 
	10, -72, 10, -48, -47, 10, -66, 10, 
	-48, 10, -67, 10, -48, 10, -80, 10, 
	-48, 10, -69, 10, 10, 95, 10, 70, 
	10, 69, 10, 65, 10, 84, 10, 85, 
	10, 82, 10, 69, 10, 95, 10, 69, 
	10, 78, 10, 68, 10, 95, 10, 37, 
	-126, -122, -47, -128, -47, -125, -48, -70, 
	-47, -126, -47, -125, -47, -128, -48, -80, 
	32, -47, -127, -47, -122, -48, -75, -48, 
	-67, -48, -80, -47, -128, -48, -72, -47, 
	-113, 58, 10, 10, -48, 10, 32, 35, 
	37, 42, 64, 9, 13, -112, -108, -107, 
	-104, -102, -99, -97, -95, -94, -92, 10, 
	10, 32, -48, 10, -80, -66, 10, -48, 
	10, -67, 10, -48, 10, -66, 10, -48, 
	10, -65, 10, -47, 10, -125, 10, -47, 
	10, -127, 10, -47, 10, -126, 10, -48, 
	10, -72, 10, -48, 10, -68, 10, -47, 
	10, -127, 10, -48, 10, -69, 10, -48, 
	10, -72, 10, -48, 10, 32, -66, 10, 
	-48, 10, -77, 10, -48, 10, -76, 10, 
	-48, 10, -80, 10, -47, 10, -126, 10, 
	-48, 10, -66, 10, -48, 10, -68, 10, 
	-47, 10, -125, 10, 10, 32, -48, 10, 
	-74, 10, -48, 10, -75, 10, -47, 10, 
	-125, 10, -47, 10, -127, 10, -47, 10, 
	-126, 10, -47, 10, -116, 10, -48, -47, 
	10, -78, 10, -48, 10, -66, 10, -48, 
	10, -71, 10, -47, 10, -127, 10, -47, 
	10, -126, 10, -48, 10, -78, 10, -48, 
	10, -66, 10, 10, 58, -122, 10, -48, 
	10, -75, 10, -48, 10, -67, 10, -48, 
	10, -80, 10, -47, 10, -128, 10, -48, 
	10, -72, 10, -48, 10, -71, 10, -48, 
	10, -80, -66, 10, -48, 10, -70, 10, 
	-48, 10, 32, -47, 10, -125, 10, -48, 
	10, -67, 10, -48, 10, -70, 10, -47, 
	10, -122, 10, -48, 10, -72, 10, -48, 
	-47, 10, -66, 10, -48, 10, -67, 10, 
	-48, 10, -80, 10, -48, 10, -69, 10, 
	-113, 10, 10, 95, 10, 70, 10, 69, 
	10, 65, 10, 84, 10, 85, 10, 82, 
	10, 69, 10, 95, 10, 69, 10, 78, 
	10, 68, 10, 95, 10, 37, -48, -75, 
	-48, -67, -48, -80, -47, -128, -48, -72, 
	-48, -71, 58, 10, 10, -48, 10, 32, 
	35, 37, 42, 64, 9, 13, -112, -108, 
	-107, -104, -102, -99, -97, -95, -94, -92, 
	10, 10, 32, -48, 10, -80, -66, 10, 
	-48, 10, -67, 10, -48, 10, -66, 10, 
	-48, 10, -65, 10, -47, 10, -125, 10, 
	-47, 10, -127, 10, -47, 10, -126, 10, 
	-48, 10, -72, 10, -48, 10, -68, 10, 
	-47, 10, -127, 10, -48, 10, -69, 10, 
	-48, 10, -72, 10, -48, 10, 32, -66, 
	10, -48, 10, -77, -67, 10, -48, 10, 
	-76, 10, -48, 10, -80, 10, -47, 10, 
	-126, 10, -48, 10, -75, 10, -48, 10, 
	-70, 10, -47, 10, -127, 10, -47, 10, 
	-126, 10, 10, 58, -47, 10, -126, 10, 
	-48, 10, -66, 10, -48, 10, -68, 10, 
	-47, 10, -125, 10, 10, 32, -48, 10, 
	-74, 10, -48, 10, -75, 10, -47, 10, 
	-128, -125, 10, -48, 10, -75, 10, -48, 
	10, -76, 10, -47, 10, -117, 10, -47, 
	10, -127, 10, -47, 10, -126, 10, -48, 
	10, -66, 10, -47, 10, -128, 10, -48, 
	10, -72, 10, -47, 10, -113, 10, -47, 
	10, -127, 10, -47, 10, -126, 10, -47, 
	10, -116, 10, -48, -47, 10, -78, 10, 
	-48, 10, -66, 10, -48, 10, -71, 10, 
	-47, 10, -127, 10, -47, 10, -126, 10, 
	-48, 10, -78, 10, -48, 10, -66, 10, 
	-126, -122, 10, -47, 10, -128, 10, -47, 
	10, -125, 10, -48, 10, -70, 10, -47, 
	10, -126, 10, -47, 10, -125, 10, -47, 
	10, -128, 10, -48, 10, -80, 10, 10, 
	32, -47, 10, -127, 10, -47, 10, -122, 
	10, -48, 10, -75, 10, -48, 10, -67, 
	10, -48, 10, -80, 10, -48, 10, -75, 
	10, -48, 10, -67, 10, -48, 10, -80, 
	10, -47, 10, -128, 10, -48, 10, -72, 
	10, -48, 10, -71, 10, -48, 10, -80, 
	-66, 10, -48, 10, -70, 10, -48, 10, 
	32, -77, 10, -47, 10, -125, 10, -48, 
	10, -67, 10, -48, 10, -70, 10, -47, 
	10, -122, 10, -48, 10, -72, 10, -48, 
	-47, 10, -66, 10, -48, 10, -67, 10, 
	-48, 10, -80, 10, -48, 10, -69, 10, 
	10, 95, 10, 70, 10, 69, 10, 65, 
	10, 84, 10, 85, 10, 82, 10, 69, 
	10, 95, 10, 69, 10, 78, 10, 68, 
	10, 95, 10, 37, -48, -80, -66, -48, 
	-70, -48, 32, -77, -47, -125, -48, -67, 
	-48, -70, -47, -122, -48, -72, -48, -47, 
	-66, -48, -67, -48, -80, -48, -69, -113, 
	187, 191, 0
];

var _lexer_single_lengths = [
	0, 10, 10, 1, 2, 2, 9, 1, 
	1, 2, 2, 3, 3, 3, 3, 2, 
	2, 2, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 3, 5, 3, 2, 4, 3, 2, 
	4, 9, 1, 2, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 2, 1, 1, 2, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 7, 
	11, 2, 9, 2, 3, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 3, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	3, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 3, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 3, 2, 2, 3, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 3, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 2, 1, 
	2, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 5, 3, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 3, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	1, 1, 1, 1, 1, 1, 2, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 6, 
	5, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 3, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 3, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 3, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 3, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 7, 11, 2, 2, 3, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 3, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 3, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	3, 2, 2, 3, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 3, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 7, 11, 2, 2, 
	3, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 3, 
	2, 2, 3, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	3, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 3, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 3, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 3, 2, 
	2, 3, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 3, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 1, 2, 1, 1, 2, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 2, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 0
];

var _lexer_range_lengths = [
	0, 1, 0, 0, 0, 0, 1, 0, 
	0, 0, 0, 1, 1, 1, 1, 1, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 1, 1, 1, 1, 0, 0, 
	1, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	0, 0, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0
];

var _lexer_index_offsets = [
	0, 0, 12, 23, 25, 28, 31, 42, 
	44, 46, 49, 52, 57, 62, 67, 72, 
	76, 80, 83, 85, 87, 89, 91, 93, 
	95, 97, 99, 101, 103, 105, 107, 109, 
	111, 113, 118, 125, 130, 134, 140, 144, 
	147, 153, 164, 166, 169, 171, 173, 175, 
	177, 179, 181, 183, 185, 187, 189, 191, 
	193, 195, 197, 199, 201, 203, 205, 207, 
	209, 211, 213, 216, 218, 220, 223, 225, 
	227, 229, 231, 233, 235, 237, 239, 241, 
	243, 245, 247, 249, 251, 253, 255, 257, 
	266, 278, 281, 292, 295, 299, 302, 305, 
	308, 311, 314, 317, 320, 323, 326, 329, 
	332, 335, 338, 341, 344, 347, 350, 353, 
	356, 359, 362, 365, 369, 372, 375, 378, 
	381, 384, 387, 390, 393, 396, 399, 402, 
	405, 408, 411, 414, 417, 420, 423, 426, 
	429, 432, 435, 438, 441, 444, 447, 450, 
	453, 457, 460, 463, 466, 469, 472, 475, 
	478, 481, 484, 487, 490, 493, 496, 499, 
	503, 506, 509, 512, 515, 518, 521, 524, 
	527, 530, 533, 536, 539, 542, 545, 548, 
	551, 554, 557, 560, 563, 566, 569, 572, 
	575, 578, 581, 584, 587, 590, 593, 596, 
	599, 602, 605, 608, 611, 614, 617, 620, 
	623, 626, 629, 632, 635, 639, 642, 645, 
	649, 652, 655, 658, 661, 664, 667, 670, 
	673, 676, 679, 683, 686, 689, 692, 695, 
	698, 701, 704, 707, 710, 713, 716, 719, 
	722, 725, 728, 731, 734, 737, 740, 743, 
	746, 748, 750, 752, 754, 756, 758, 760, 
	762, 764, 766, 768, 770, 772, 774, 777, 
	779, 782, 784, 786, 788, 790, 792, 794, 
	796, 798, 800, 802, 804, 806, 808, 810, 
	812, 814, 816, 818, 820, 822, 824, 826, 
	828, 830, 832, 834, 836, 843, 847, 850, 
	853, 856, 859, 862, 865, 868, 871, 874, 
	877, 880, 883, 886, 889, 892, 895, 898, 
	901, 904, 907, 910, 913, 916, 919, 922, 
	926, 929, 932, 935, 938, 941, 944, 947, 
	950, 952, 954, 956, 958, 960, 962, 965, 
	967, 969, 971, 973, 975, 977, 979, 981, 
	983, 985, 987, 989, 991, 993, 995, 997, 
	1005, 1011, 1014, 1017, 1020, 1023, 1026, 1029, 
	1032, 1035, 1038, 1041, 1044, 1047, 1050, 1053, 
	1056, 1059, 1062, 1065, 1069, 1072, 1075, 1078, 
	1081, 1084, 1087, 1090, 1093, 1096, 1099, 1102, 
	1105, 1108, 1111, 1114, 1117, 1120, 1123, 1126, 
	1129, 1132, 1135, 1138, 1141, 1145, 1148, 1151, 
	1154, 1157, 1160, 1163, 1166, 1169, 1172, 1175, 
	1178, 1181, 1184, 1188, 1191, 1194, 1197, 1200, 
	1203, 1206, 1209, 1212, 1215, 1218, 1221, 1224, 
	1227, 1230, 1233, 1236, 1239, 1242, 1245, 1248, 
	1251, 1254, 1257, 1260, 1263, 1266, 1269, 1272, 
	1275, 1278, 1281, 1284, 1287, 1290, 1293, 1296, 
	1299, 1302, 1305, 1308, 1311, 1314, 1317, 1320, 
	1323, 1326, 1329, 1333, 1336, 1339, 1342, 1345, 
	1348, 1351, 1354, 1357, 1360, 1363, 1366, 1369, 
	1372, 1375, 1378, 1381, 1384, 1387, 1390, 1393, 
	1396, 1399, 1401, 1403, 1405, 1407, 1409, 1411, 
	1413, 1415, 1417, 1419, 1421, 1423, 1425, 1427, 
	1429, 1431, 1433, 1435, 1437, 1439, 1441, 1443, 
	1445, 1447, 1449, 1451, 1453, 1455, 1457, 1459, 
	1461, 1463, 1465, 1467, 1476, 1488, 1491, 1494, 
	1498, 1501, 1504, 1507, 1510, 1513, 1516, 1519, 
	1522, 1525, 1528, 1531, 1534, 1537, 1540, 1543, 
	1546, 1549, 1552, 1555, 1558, 1561, 1564, 1568, 
	1571, 1574, 1577, 1580, 1583, 1586, 1589, 1592, 
	1595, 1598, 1601, 1604, 1607, 1610, 1613, 1616, 
	1619, 1622, 1625, 1628, 1631, 1634, 1637, 1640, 
	1643, 1646, 1649, 1652, 1656, 1659, 1662, 1665, 
	1668, 1671, 1674, 1677, 1680, 1683, 1686, 1689, 
	1692, 1695, 1698, 1701, 1704, 1707, 1710, 1713, 
	1716, 1719, 1722, 1725, 1728, 1731, 1734, 1737, 
	1740, 1744, 1747, 1750, 1754, 1757, 1760, 1763, 
	1766, 1769, 1772, 1775, 1778, 1781, 1784, 1788, 
	1791, 1794, 1797, 1800, 1803, 1806, 1809, 1812, 
	1815, 1818, 1821, 1824, 1827, 1830, 1833, 1836, 
	1839, 1842, 1845, 1848, 1851, 1854, 1856, 1858, 
	1860, 1862, 1864, 1866, 1868, 1870, 1872, 1874, 
	1876, 1878, 1880, 1882, 1884, 1893, 1905, 1908, 
	1911, 1915, 1918, 1921, 1924, 1927, 1930, 1933, 
	1936, 1939, 1942, 1945, 1948, 1951, 1954, 1957, 
	1960, 1963, 1966, 1969, 1972, 1975, 1978, 1981, 
	1985, 1988, 1991, 1995, 1998, 2001, 2004, 2007, 
	2010, 2013, 2016, 2019, 2022, 2025, 2028, 2031, 
	2034, 2037, 2040, 2043, 2046, 2049, 2052, 2055, 
	2058, 2061, 2064, 2067, 2070, 2073, 2076, 2079, 
	2082, 2086, 2089, 2092, 2095, 2098, 2101, 2104, 
	2107, 2110, 2113, 2116, 2119, 2122, 2125, 2128, 
	2131, 2134, 2137, 2140, 2143, 2146, 2149, 2152, 
	2155, 2158, 2162, 2165, 2168, 2171, 2174, 2177, 
	2180, 2183, 2186, 2189, 2192, 2195, 2198, 2201, 
	2205, 2208, 2211, 2214, 2217, 2220, 2223, 2226, 
	2229, 2232, 2235, 2238, 2241, 2244, 2247, 2250, 
	2253, 2256, 2259, 2262, 2265, 2268, 2271, 2274, 
	2277, 2280, 2283, 2286, 2289, 2292, 2295, 2298, 
	2301, 2304, 2307, 2310, 2313, 2316, 2319, 2323, 
	2326, 2329, 2333, 2336, 2339, 2342, 2345, 2348, 
	2351, 2354, 2357, 2360, 2363, 2366, 2370, 2373, 
	2376, 2379, 2382, 2385, 2388, 2391, 2394, 2397, 
	2400, 2403, 2406, 2409, 2412, 2415, 2418, 2421, 
	2424, 2427, 2430, 2433, 2435, 2438, 2440, 2442, 
	2445, 2447, 2449, 2451, 2453, 2455, 2457, 2459, 
	2461, 2463, 2465, 2467, 2470, 2472, 2474, 2476, 
	2478, 2480, 2482, 2484, 2486, 2488, 2490
];

var _lexer_indicies = [
	1, 3, 2, 4, 5, 6, 7, 8, 
	9, 10, 2, 0, 11, 12, 13, 11, 
	14, 15, 16, 17, 18, 19, 0, 20, 
	0, 22, 23, 21, 25, 26, 24, 1, 
	3, 2, 4, 5, 6, 7, 8, 9, 
	2, 0, 27, 0, 28, 0, 30, 31, 
	29, 33, 34, 32, 37, 36, 38, 36, 
	35, 41, 40, 42, 40, 39, 41, 40, 
	43, 40, 39, 41, 40, 44, 40, 39, 
	46, 45, 45, 0, 3, 47, 47, 0, 
	49, 50, 48, 3, 0, 51, 0, 52, 
	0, 53, 0, 54, 0, 55, 0, 56, 
	0, 57, 0, 58, 0, 59, 0, 60, 
	0, 61, 0, 62, 0, 63, 0, 64, 
	0, 0, 0, 0, 0, 65, 66, 67, 
	66, 66, 69, 68, 65, 3, 70, 8, 
	70, 0, 71, 72, 71, 0, 75, 74, 
	76, 77, 74, 73, 0, 79, 80, 78, 
	0, 79, 78, 75, 81, 79, 80, 81, 
	78, 82, 75, 83, 84, 85, 86, 87, 
	88, 89, 83, 0, 90, 0, 91, 92, 
	0, 93, 0, 15, 0, 94, 0, 11, 
	0, 95, 0, 96, 0, 97, 0, 98, 
	0, 99, 0, 100, 0, 101, 0, 102, 
	0, 103, 0, 104, 0, 105, 0, 11, 
	0, 106, 0, 107, 0, 108, 0, 109, 
	0, 110, 0, 11, 0, 111, 112, 0, 
	113, 0, 114, 0, 115, 116, 0, 117, 
	0, 118, 0, 119, 0, 11, 0, 120, 
	0, 121, 0, 122, 0, 123, 0, 124, 
	0, 125, 0, 126, 0, 127, 0, 128, 
	0, 129, 0, 130, 0, 132, 131, 134, 
	133, 135, 134, 136, 137, 138, 139, 137, 
	136, 133, 140, 141, 142, 140, 143, 144, 
	145, 146, 147, 148, 134, 133, 134, 149, 
	133, 150, 152, 151, 153, 154, 155, 156, 
	157, 158, 151, 0, 159, 134, 133, 160, 
	161, 134, 133, 162, 134, 133, 144, 134, 
	133, 163, 134, 133, 140, 134, 133, 164, 
	134, 133, 165, 134, 133, 166, 134, 133, 
	167, 134, 133, 168, 134, 133, 169, 134, 
	133, 170, 134, 133, 171, 134, 133, 172, 
	134, 133, 173, 134, 133, 174, 134, 133, 
	140, 134, 133, 175, 134, 133, 176, 134, 
	133, 177, 134, 133, 178, 134, 133, 179, 
	134, 133, 140, 134, 133, 180, 134, 181, 
	133, 182, 134, 133, 183, 134, 133, 184, 
	134, 133, 185, 134, 133, 186, 134, 133, 
	187, 134, 133, 140, 134, 133, 188, 134, 
	133, 189, 134, 133, 190, 134, 133, 191, 
	134, 133, 192, 134, 133, 193, 134, 133, 
	194, 134, 133, 195, 134, 133, 134, 196, 
	133, 197, 134, 133, 198, 134, 133, 199, 
	134, 133, 140, 134, 133, 200, 134, 133, 
	201, 134, 133, 202, 134, 133, 203, 134, 
	133, 204, 134, 133, 205, 134, 133, 206, 
	134, 133, 140, 134, 133, 207, 208, 134, 
	133, 209, 134, 133, 210, 134, 133, 211, 
	134, 133, 212, 134, 133, 213, 134, 133, 
	214, 134, 133, 215, 134, 133, 216, 134, 
	133, 217, 134, 133, 218, 134, 133, 219, 
	134, 133, 220, 134, 133, 221, 134, 133, 
	134, 149, 133, 222, 223, 134, 133, 224, 
	134, 133, 225, 134, 133, 226, 134, 133, 
	227, 134, 133, 228, 134, 133, 229, 134, 
	133, 230, 134, 133, 231, 134, 133, 232, 
	134, 133, 233, 134, 133, 234, 134, 133, 
	235, 134, 133, 236, 134, 133, 237, 134, 
	133, 134, 238, 133, 239, 134, 133, 240, 
	134, 133, 241, 134, 133, 242, 134, 133, 
	243, 134, 133, 244, 134, 133, 245, 134, 
	133, 246, 134, 133, 247, 134, 133, 248, 
	134, 133, 249, 134, 133, 250, 134, 133, 
	251, 134, 133, 252, 134, 133, 253, 134, 
	133, 221, 134, 133, 254, 134, 133, 255, 
	134, 133, 256, 134, 133, 257, 134, 133, 
	258, 134, 133, 259, 134, 133, 260, 134, 
	133, 261, 134, 133, 262, 134, 133, 263, 
	134, 133, 264, 134, 133, 221, 134, 133, 
	265, 134, 133, 266, 267, 134, 133, 268, 
	134, 133, 196, 134, 133, 183, 134, 149, 
	133, 269, 134, 133, 270, 134, 133, 271, 
	134, 133, 272, 134, 133, 273, 134, 133, 
	274, 134, 133, 275, 134, 133, 276, 134, 
	133, 277, 134, 133, 278, 134, 133, 279, 
	253, 134, 133, 280, 134, 133, 281, 134, 
	133, 282, 134, 133, 283, 134, 133, 284, 
	134, 133, 285, 134, 133, 221, 134, 133, 
	134, 286, 133, 134, 287, 133, 134, 288, 
	133, 134, 289, 133, 134, 290, 133, 134, 
	291, 133, 134, 292, 133, 134, 293, 133, 
	134, 294, 133, 134, 295, 133, 134, 296, 
	133, 134, 297, 133, 134, 298, 133, 134, 
	299, 133, 300, 0, 301, 0, 302, 0, 
	303, 0, 304, 0, 305, 0, 306, 0, 
	307, 0, 308, 0, 309, 0, 310, 0, 
	311, 0, 11, 0, 312, 0, 313, 314, 
	0, 315, 0, 316, 317, 0, 318, 0, 
	319, 0, 320, 0, 321, 0, 322, 0, 
	323, 0, 324, 0, 325, 0, 326, 0, 
	327, 0, 328, 0, 329, 0, 330, 0, 
	331, 0, 332, 0, 129, 0, 333, 0, 
	334, 0, 335, 0, 336, 0, 337, 0, 
	338, 0, 339, 0, 340, 0, 341, 0, 
	343, 342, 345, 344, 346, 345, 347, 348, 
	348, 347, 344, 349, 350, 345, 344, 351, 
	345, 344, 352, 345, 344, 353, 345, 344, 
	354, 345, 344, 355, 345, 344, 356, 345, 
	344, 357, 345, 344, 358, 345, 344, 359, 
	345, 344, 360, 345, 344, 361, 345, 344, 
	362, 345, 344, 363, 345, 344, 364, 345, 
	344, 345, 365, 344, 366, 345, 344, 367, 
	345, 344, 368, 345, 344, 369, 345, 344, 
	370, 345, 344, 371, 345, 344, 372, 345, 
	344, 373, 345, 344, 374, 345, 344, 375, 
	345, 344, 376, 377, 345, 344, 378, 345, 
	344, 379, 345, 344, 380, 345, 344, 381, 
	345, 344, 382, 345, 344, 383, 345, 344, 
	364, 345, 344, 364, 345, 344, 384, 0, 
	385, 0, 386, 0, 387, 0, 388, 0, 
	11, 0, 389, 390, 0, 391, 0, 392, 
	0, 393, 0, 394, 0, 395, 0, 396, 
	0, 397, 0, 398, 0, 399, 0, 400, 
	0, 401, 0, 402, 0, 403, 0, 404, 
	0, 406, 405, 408, 407, 409, 408, 410, 
	411, 412, 411, 410, 407, 413, 414, 415, 
	416, 408, 407, 417, 408, 407, 418, 408, 
	407, 419, 408, 407, 420, 408, 407, 421, 
	408, 407, 422, 408, 407, 423, 408, 407, 
	424, 408, 407, 425, 408, 407, 426, 408, 
	407, 427, 408, 407, 428, 408, 407, 429, 
	408, 407, 430, 408, 407, 408, 431, 407, 
	432, 408, 407, 433, 408, 407, 434, 408, 
	407, 435, 436, 408, 407, 437, 408, 407, 
	438, 408, 407, 439, 408, 407, 440, 408, 
	407, 441, 408, 407, 442, 408, 407, 443, 
	408, 407, 444, 408, 407, 445, 408, 407, 
	446, 408, 407, 447, 408, 407, 448, 408, 
	407, 449, 408, 407, 450, 408, 407, 451, 
	408, 407, 430, 408, 407, 452, 408, 407, 
	453, 408, 407, 454, 408, 407, 455, 408, 
	407, 456, 408, 407, 457, 408, 407, 458, 
	408, 407, 430, 408, 407, 459, 460, 408, 
	407, 461, 408, 407, 462, 408, 407, 463, 
	408, 407, 464, 408, 407, 465, 408, 407, 
	466, 408, 407, 467, 408, 407, 468, 408, 
	407, 469, 408, 407, 470, 408, 407, 471, 
	408, 407, 472, 408, 407, 430, 408, 407, 
	473, 474, 408, 407, 475, 408, 407, 476, 
	408, 407, 477, 408, 407, 478, 408, 407, 
	479, 408, 407, 480, 408, 407, 481, 408, 
	407, 482, 408, 407, 483, 408, 407, 484, 
	408, 407, 485, 408, 407, 486, 408, 407, 
	487, 408, 407, 488, 408, 407, 408, 489, 
	407, 490, 408, 407, 491, 408, 407, 492, 
	408, 407, 493, 408, 407, 494, 408, 407, 
	495, 408, 407, 496, 408, 407, 497, 408, 
	407, 498, 408, 407, 446, 408, 407, 499, 
	408, 407, 500, 408, 407, 501, 408, 407, 
	502, 408, 407, 503, 408, 407, 504, 408, 
	407, 505, 408, 407, 506, 408, 407, 507, 
	408, 407, 508, 408, 407, 509, 408, 407, 
	430, 408, 407, 510, 408, 407, 511, 408, 
	407, 512, 408, 407, 513, 408, 407, 514, 
	408, 407, 515, 408, 407, 516, 408, 407, 
	517, 408, 407, 518, 408, 407, 519, 408, 
	407, 520, 451, 408, 407, 521, 408, 407, 
	522, 408, 407, 523, 408, 407, 524, 408, 
	407, 525, 408, 407, 526, 408, 407, 430, 
	408, 407, 408, 527, 407, 408, 528, 407, 
	408, 529, 407, 408, 530, 407, 408, 531, 
	407, 408, 532, 407, 408, 533, 407, 408, 
	534, 407, 408, 535, 407, 408, 536, 407, 
	408, 537, 407, 408, 538, 407, 408, 539, 
	407, 408, 540, 407, 541, 542, 0, 543, 
	0, 544, 0, 545, 0, 546, 0, 547, 
	0, 548, 0, 549, 0, 550, 0, 551, 
	0, 552, 0, 553, 0, 554, 0, 555, 
	0, 556, 0, 557, 0, 558, 0, 559, 
	0, 560, 0, 561, 0, 562, 0, 563, 
	0, 564, 0, 565, 0, 566, 0, 567, 
	0, 568, 0, 569, 0, 570, 0, 571, 
	0, 572, 0, 573, 0, 574, 0, 576, 
	575, 578, 577, 579, 578, 580, 581, 582, 
	583, 581, 580, 577, 584, 585, 586, 584, 
	587, 588, 589, 590, 591, 592, 578, 577, 
	578, 593, 577, 594, 578, 577, 595, 596, 
	578, 577, 597, 578, 577, 588, 578, 577, 
	598, 578, 577, 584, 578, 577, 599, 578, 
	577, 600, 578, 577, 601, 578, 577, 602, 
	578, 577, 603, 578, 577, 604, 578, 577, 
	605, 578, 577, 606, 578, 577, 607, 578, 
	577, 608, 578, 577, 609, 578, 577, 584, 
	578, 577, 610, 578, 577, 611, 578, 577, 
	612, 578, 577, 613, 578, 577, 614, 578, 
	577, 584, 578, 577, 615, 578, 616, 577, 
	617, 578, 577, 618, 578, 577, 619, 578, 
	577, 620, 578, 577, 621, 578, 577, 622, 
	578, 577, 584, 578, 577, 623, 578, 577, 
	624, 578, 577, 625, 578, 577, 626, 578, 
	577, 627, 578, 577, 628, 578, 577, 629, 
	578, 577, 630, 578, 577, 578, 631, 577, 
	632, 578, 577, 633, 578, 577, 634, 578, 
	577, 584, 578, 577, 635, 578, 577, 636, 
	578, 577, 637, 578, 577, 638, 578, 577, 
	639, 578, 577, 640, 578, 577, 641, 578, 
	577, 584, 578, 577, 642, 643, 578, 577, 
	644, 578, 577, 645, 578, 577, 646, 578, 
	577, 647, 578, 577, 648, 578, 577, 649, 
	578, 577, 650, 578, 577, 651, 578, 577, 
	652, 578, 577, 653, 578, 577, 654, 578, 
	577, 655, 578, 577, 656, 578, 577, 578, 
	593, 577, 657, 578, 577, 658, 578, 577, 
	659, 578, 577, 660, 578, 577, 661, 578, 
	577, 662, 578, 577, 663, 578, 577, 664, 
	578, 577, 665, 578, 577, 666, 578, 577, 
	667, 578, 577, 668, 578, 577, 656, 578, 
	577, 669, 578, 577, 670, 671, 578, 577, 
	672, 578, 577, 631, 578, 577, 618, 578, 
	593, 577, 673, 578, 577, 674, 578, 577, 
	675, 578, 577, 676, 578, 577, 677, 578, 
	577, 678, 578, 577, 679, 578, 577, 680, 
	578, 577, 681, 578, 577, 682, 578, 577, 
	683, 684, 578, 577, 685, 578, 577, 686, 
	578, 577, 687, 578, 577, 688, 578, 577, 
	689, 578, 577, 690, 578, 577, 656, 578, 
	577, 656, 578, 577, 578, 691, 577, 578, 
	692, 577, 578, 693, 577, 578, 694, 577, 
	578, 695, 577, 578, 696, 577, 578, 697, 
	577, 578, 698, 577, 578, 699, 577, 578, 
	700, 577, 578, 701, 577, 578, 702, 577, 
	578, 703, 577, 578, 704, 577, 705, 0, 
	706, 0, 707, 0, 708, 0, 709, 0, 
	710, 0, 711, 0, 712, 0, 713, 0, 
	714, 0, 715, 0, 716, 0, 717, 0, 
	719, 718, 721, 720, 722, 721, 723, 724, 
	725, 726, 724, 723, 720, 727, 728, 729, 
	727, 730, 731, 732, 733, 734, 735, 721, 
	720, 721, 736, 720, 737, 721, 720, 738, 
	739, 721, 720, 740, 721, 720, 731, 721, 
	720, 741, 721, 720, 727, 721, 720, 742, 
	721, 720, 743, 721, 720, 744, 721, 720, 
	745, 721, 720, 746, 721, 720, 747, 721, 
	720, 748, 721, 720, 749, 721, 720, 750, 
	721, 720, 751, 721, 720, 752, 721, 720, 
	727, 721, 720, 753, 721, 720, 754, 721, 
	720, 755, 721, 720, 756, 721, 720, 757, 
	721, 720, 727, 721, 720, 758, 721, 759, 
	720, 760, 721, 720, 761, 721, 720, 762, 
	763, 721, 720, 764, 721, 720, 765, 721, 
	720, 766, 721, 720, 727, 721, 720, 767, 
	721, 720, 768, 721, 720, 769, 721, 720, 
	770, 721, 720, 771, 721, 720, 772, 721, 
	720, 773, 721, 720, 774, 721, 720, 775, 
	721, 720, 776, 721, 720, 721, 736, 720, 
	777, 721, 720, 778, 721, 720, 779, 721, 
	720, 780, 721, 720, 781, 721, 720, 782, 
	721, 720, 783, 721, 720, 784, 721, 720, 
	721, 785, 720, 786, 721, 720, 787, 721, 
	720, 788, 721, 720, 727, 721, 720, 789, 
	721, 720, 790, 791, 721, 720, 792, 721, 
	720, 793, 721, 720, 794, 721, 720, 795, 
	721, 720, 796, 721, 720, 797, 721, 720, 
	798, 721, 720, 799, 721, 720, 800, 721, 
	720, 801, 721, 720, 802, 721, 720, 803, 
	721, 720, 804, 721, 720, 805, 721, 720, 
	806, 721, 720, 807, 721, 720, 808, 721, 
	720, 776, 721, 720, 809, 721, 720, 810, 
	721, 720, 811, 721, 720, 812, 721, 720, 
	813, 721, 720, 727, 721, 720, 814, 815, 
	721, 720, 816, 721, 720, 817, 721, 720, 
	818, 721, 720, 819, 721, 720, 820, 721, 
	720, 821, 721, 720, 822, 721, 720, 823, 
	721, 720, 824, 721, 720, 825, 721, 720, 
	826, 721, 720, 827, 721, 720, 776, 721, 
	720, 828, 829, 721, 720, 830, 721, 720, 
	831, 721, 720, 832, 721, 720, 833, 721, 
	720, 834, 721, 720, 835, 721, 720, 836, 
	721, 720, 837, 721, 720, 838, 721, 720, 
	839, 721, 720, 840, 721, 720, 841, 721, 
	720, 842, 721, 720, 843, 721, 720, 721, 
	844, 720, 845, 721, 720, 846, 721, 720, 
	847, 721, 720, 848, 721, 720, 849, 721, 
	720, 850, 721, 720, 851, 721, 720, 852, 
	721, 720, 853, 721, 720, 803, 721, 720, 
	854, 721, 720, 855, 721, 720, 856, 721, 
	720, 857, 721, 720, 858, 721, 720, 859, 
	721, 720, 860, 721, 720, 861, 721, 720, 
	862, 721, 720, 863, 721, 720, 864, 721, 
	720, 776, 721, 720, 865, 721, 720, 866, 
	867, 721, 720, 868, 721, 720, 785, 721, 
	720, 869, 721, 736, 720, 762, 721, 720, 
	870, 721, 720, 871, 721, 720, 872, 721, 
	720, 873, 721, 720, 874, 721, 720, 875, 
	721, 720, 876, 721, 720, 877, 721, 720, 
	878, 721, 720, 879, 721, 720, 880, 808, 
	721, 720, 881, 721, 720, 882, 721, 720, 
	883, 721, 720, 884, 721, 720, 885, 721, 
	720, 886, 721, 720, 776, 721, 720, 721, 
	887, 720, 721, 888, 720, 721, 889, 720, 
	721, 890, 720, 721, 891, 720, 721, 892, 
	720, 721, 893, 720, 721, 894, 720, 721, 
	895, 720, 721, 896, 720, 721, 897, 720, 
	721, 898, 720, 721, 899, 720, 721, 900, 
	720, 901, 0, 902, 903, 0, 904, 0, 
	308, 0, 905, 20, 0, 115, 0, 906, 
	0, 907, 0, 908, 0, 909, 0, 910, 
	0, 911, 0, 912, 0, 913, 0, 914, 
	0, 915, 0, 916, 917, 0, 918, 0, 
	919, 0, 920, 0, 921, 0, 922, 0, 
	923, 0, 403, 0, 403, 0, 924, 0, 
	2, 0, 925, 0
];

var _lexer_trans_targs = [
	0, 2, 6, 6, 7, 17, 19, 3, 
	33, 36, 844, 3, 42, 60, 66, 46, 
	253, 326, 819, 825, 4, 5, 6, 18, 
	5, 6, 18, 8, 9, 10, 11, 10, 
	10, 11, 10, 12, 12, 12, 13, 12, 
	12, 12, 13, 14, 15, 16, 6, 16, 
	17, 6, 18, 20, 21, 22, 23, 24, 
	25, 26, 27, 28, 29, 30, 31, 32, 
	846, 34, 35, 6, 34, 33, 35, 36, 
	37, 38, 40, 41, 39, 37, 38, 39, 
	37, 40, 2, 41, 7, 17, 19, 3, 
	33, 36, 43, 44, 48, 45, 47, 49, 
	50, 51, 52, 53, 54, 55, 56, 57, 
	58, 59, 61, 62, 63, 64, 65, 67, 
	240, 68, 69, 70, 74, 71, 72, 73, 
	75, 76, 77, 78, 79, 80, 81, 82, 
	83, 84, 85, 86, 87, 86, 87, 88, 
	87, 6, 226, 89, 89, 91, 109, 115, 
	95, 136, 144, 203, 208, 90, 2, 6, 
	6, 7, 17, 19, 3, 33, 36, 92, 
	93, 97, 94, 96, 98, 99, 100, 101, 
	102, 103, 104, 105, 106, 107, 108, 110, 
	111, 112, 113, 114, 116, 123, 117, 118, 
	119, 120, 121, 122, 124, 125, 126, 127, 
	128, 129, 130, 131, 132, 133, 134, 135, 
	137, 138, 139, 140, 141, 142, 143, 145, 
	159, 146, 147, 148, 149, 150, 151, 152, 
	153, 154, 155, 156, 157, 158, 160, 191, 
	161, 162, 163, 164, 165, 166, 167, 168, 
	169, 170, 171, 172, 173, 174, 175, 176, 
	177, 178, 179, 180, 181, 182, 183, 184, 
	185, 186, 187, 188, 189, 190, 192, 193, 
	194, 195, 196, 197, 198, 199, 200, 201, 
	202, 204, 205, 207, 206, 209, 210, 211, 
	212, 213, 214, 215, 216, 217, 218, 219, 
	220, 221, 222, 223, 224, 225, 227, 228, 
	229, 230, 231, 232, 233, 234, 235, 236, 
	237, 238, 239, 6, 241, 242, 243, 244, 
	245, 246, 247, 248, 249, 250, 251, 252, 
	254, 255, 320, 256, 257, 273, 258, 259, 
	260, 261, 262, 263, 264, 265, 266, 267, 
	268, 269, 270, 271, 272, 274, 275, 276, 
	277, 278, 279, 280, 281, 282, 283, 284, 
	283, 284, 285, 284, 6, 286, 301, 287, 
	288, 289, 290, 291, 292, 293, 294, 295, 
	296, 297, 298, 299, 300, 90, 302, 303, 
	304, 305, 306, 307, 308, 309, 310, 311, 
	312, 319, 313, 314, 315, 316, 317, 318, 
	321, 322, 323, 324, 325, 327, 472, 328, 
	329, 330, 331, 332, 333, 334, 335, 336, 
	337, 338, 339, 340, 341, 342, 343, 342, 
	343, 344, 343, 6, 458, 345, 360, 388, 
	440, 346, 347, 348, 349, 350, 351, 352, 
	353, 354, 355, 356, 357, 358, 359, 90, 
	361, 362, 363, 364, 380, 365, 366, 367, 
	368, 369, 370, 371, 372, 373, 374, 375, 
	376, 377, 378, 379, 381, 382, 383, 384, 
	385, 386, 387, 389, 402, 390, 391, 392, 
	393, 394, 395, 396, 397, 398, 399, 400, 
	401, 403, 428, 404, 405, 406, 407, 408, 
	409, 410, 411, 412, 413, 414, 415, 416, 
	417, 418, 419, 420, 421, 422, 423, 424, 
	425, 426, 427, 429, 430, 431, 432, 433, 
	434, 435, 436, 437, 438, 439, 441, 442, 
	443, 444, 445, 446, 447, 448, 449, 450, 
	451, 452, 453, 454, 455, 456, 457, 459, 
	460, 461, 462, 463, 464, 465, 466, 467, 
	468, 469, 470, 471, 6, 473, 629, 474, 
	475, 476, 477, 478, 479, 480, 481, 482, 
	483, 484, 485, 486, 487, 488, 489, 490, 
	491, 492, 493, 494, 495, 496, 497, 498, 
	499, 500, 501, 502, 503, 504, 505, 506, 
	507, 506, 507, 508, 507, 6, 615, 509, 
	509, 510, 528, 534, 514, 555, 563, 591, 
	596, 90, 511, 512, 516, 513, 515, 517, 
	518, 519, 520, 521, 522, 523, 524, 525, 
	526, 527, 529, 530, 531, 532, 533, 535, 
	542, 536, 537, 538, 539, 540, 541, 543, 
	544, 545, 546, 547, 548, 549, 550, 551, 
	552, 553, 554, 556, 557, 558, 559, 560, 
	561, 562, 564, 578, 565, 566, 567, 568, 
	569, 570, 571, 572, 573, 574, 575, 576, 
	577, 579, 580, 581, 582, 583, 584, 585, 
	586, 587, 588, 589, 590, 592, 593, 595, 
	594, 597, 598, 599, 600, 601, 602, 603, 
	604, 605, 606, 607, 614, 608, 609, 610, 
	611, 612, 613, 616, 617, 618, 619, 620, 
	621, 622, 623, 624, 625, 626, 627, 628, 
	6, 630, 631, 632, 633, 634, 635, 636, 
	637, 638, 639, 640, 641, 642, 643, 644, 
	643, 644, 645, 644, 6, 805, 646, 646, 
	647, 665, 671, 651, 703, 729, 781, 787, 
	90, 648, 649, 653, 650, 652, 654, 655, 
	656, 657, 658, 659, 660, 661, 662, 663, 
	664, 666, 667, 668, 669, 670, 672, 690, 
	673, 674, 675, 679, 676, 677, 678, 680, 
	681, 682, 683, 684, 685, 686, 687, 688, 
	689, 691, 692, 693, 694, 695, 696, 697, 
	698, 699, 700, 701, 702, 704, 705, 723, 
	706, 707, 708, 709, 710, 711, 712, 713, 
	714, 715, 716, 717, 718, 719, 720, 721, 
	722, 724, 725, 726, 727, 728, 730, 743, 
	731, 732, 733, 734, 735, 736, 737, 738, 
	739, 740, 741, 742, 744, 769, 745, 746, 
	747, 748, 749, 750, 751, 752, 753, 754, 
	755, 756, 757, 758, 759, 760, 761, 762, 
	763, 764, 765, 766, 767, 768, 770, 771, 
	772, 773, 774, 775, 776, 777, 778, 779, 
	780, 782, 783, 785, 784, 786, 788, 789, 
	790, 791, 792, 793, 794, 795, 796, 797, 
	798, 799, 800, 801, 802, 803, 804, 806, 
	807, 808, 809, 810, 811, 812, 813, 814, 
	815, 816, 817, 818, 6, 820, 821, 823, 
	822, 824, 826, 827, 828, 829, 830, 831, 
	832, 833, 834, 835, 836, 843, 837, 838, 
	839, 840, 841, 842, 845, 0
];

var _lexer_trans_actions = [
	43, 29, 0, 54, 3, 1, 0, 29, 
	1, 35, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 57, 149, 126, 
	0, 110, 23, 0, 0, 7, 139, 48, 
	0, 102, 9, 5, 45, 134, 45, 0, 
	33, 122, 33, 33, 0, 11, 106, 0, 
	0, 114, 25, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 27, 118, 27, 51, 0, 0, 
	0, 37, 37, 54, 37, 87, 0, 0, 
	39, 0, 96, 0, 93, 90, 41, 96, 
	90, 99, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 57, 144, 0, 54, 84, 
	0, 72, 33, 84, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 15, 63, 31, 
	130, 60, 57, 31, 63, 57, 66, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 15, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 57, 144, 
	0, 54, 84, 0, 81, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 21, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 57, 144, 0, 
	54, 84, 0, 69, 33, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 13, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 13, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 57, 
	144, 0, 54, 84, 0, 78, 33, 84, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 19, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	19, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 57, 144, 
	0, 54, 84, 0, 75, 33, 84, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	17, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 17, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0
];

var _lexer_eof_actions = [
	0, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43
];

var lexer_start = 1;
var lexer_first_final = 846;
var lexer_error = 0;

var lexer_en_main = 1;


/* line 129 "ragel/i18n/ru.js.rl" */

/* line 130 "ragel/i18n/ru.js.rl" */

/* line 131 "ragel/i18n/ru.js.rl" */

/* line 132 "ragel/i18n/ru.js.rl" */

var Lexer = function(listener) {
  // Check that listener has the required functions
  var events = ['comment', 'tag', 'feature', 'background', 'scenario', 'scenario_outline', 'examples', 'step', 'doc_string', 'row', 'eof'];
  for(var i=0, len=events.length; i<len; i++) {
    var event = events[i];
    if(typeof listener[event] != 'function') {
      throw new Error("Error. No " + event + " function exists on " + JSON.stringify(listener));
    }
  }
  this.listener = listener;
};

Lexer.prototype.scan = function(data) {
  var ending = "\n%_FEATURE_END_%";
  if(typeof data == 'string') {
    data = this.stringToBytes(data + ending);
  } else if(typeof Buffer != 'undefined' && Buffer.isBuffer(data)) {
    // Node.js
    var buf = new Buffer(data.length + ending.length);
    data.copy(buf, 0, 0);
    new Buffer(ending).copy(buf, data.length, 0);
    data = buf;
  }
  var eof = pe = data.length;
  var p = 0;

  this.line_number = 1;
  this.last_newline = 0;
  var signedCharValue=function(v){return v > 127 ? v-256 : v; };

  
/* line 1391 "js/lib/gherkin/lexer/ru.js" */
{
	  this.cs = lexer_start;
} /* JSCodeGen::writeInit */

/* line 164 "ragel/i18n/ru.js.rl" */
  
/* line 1398 "js/lib/gherkin/lexer/ru.js" */
{
	var _klen, _trans, _keys, _ps, _widec, _acts, _nacts;
	var _goto_level, _resume, _eof_trans, _again, _test_eof;
	var _out;
	_klen = _trans = _keys = _acts = _nacts = null;
	_goto_level = 0;
	_resume = 10;
	_eof_trans = 15;
	_again = 20;
	_test_eof = 30;
	_out = 40;
	while (true) {
	_trigger_goto = false;
	if (_goto_level <= 0) {
	if (p == pe) {
		_goto_level = _test_eof;
		continue;
	}
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	}
	if (_goto_level <= _resume) {
	_keys = _lexer_key_offsets[ this.cs];
	_trans = _lexer_index_offsets[ this.cs];
	_klen = _lexer_single_lengths[ this.cs];
	_break_match = false;
	
	do {
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + _klen - 1;

	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + ( (_upper - _lower) >> 1 );

	        if (( signedCharValue(data[p])) < _lexer_trans_keys[_mid]) {
	           _upper = _mid - 1;
	        } else if (( signedCharValue(data[p])) > _lexer_trans_keys[_mid]) {
	           _lower = _mid + 1;
	        } else {
	           _trans += (_mid - _keys);
	           _break_match = true;
	           break;
	        };
	     } /* while */
	     if (_break_match) { break; }
	     _keys += _klen;
	     _trans += _klen;
	  }
	  _klen = _lexer_range_lengths[ this.cs];
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + (_klen << 1) - 2;
	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + (((_upper-_lower) >> 1) & ~1);
	        if (( signedCharValue(data[p])) < _lexer_trans_keys[_mid]) {
	          _upper = _mid - 2;
	         } else if (( signedCharValue(data[p])) > _lexer_trans_keys[_mid+1]) {
	          _lower = _mid + 2;
	        } else {
	          _trans += ((_mid - _keys) >> 1);
	          _break_match = true;
	          break;
	        }
	     } /* while */
	     if (_break_match) { break; }
	     _trans += _klen
	  }
	} while (false);
	_trans = _lexer_indicies[_trans];
	 this.cs = _lexer_trans_targs[_trans];
	if (_lexer_trans_actions[_trans] != 0) {
		_acts = _lexer_trans_actions[_trans];
		_nacts = _lexer_actions[_acts];
		_acts += 1;
		while (_nacts > 0) {
			_nacts -= 1;
			_acts += 1;
			switch (_lexer_actions[_acts - 1]) {
case 0:
/* line 6 "ragel/i18n/ru.js.rl" */

    this.content_start = p;
    this.current_line = this.line_number;
    this.start_col = p - this.last_newline - (this.keyword+':').length;
  		break;
case 1:
/* line 12 "ragel/i18n/ru.js.rl" */

    this.current_line = this.line_number;
    this.start_col = p - this.last_newline;
  		break;
case 2:
/* line 17 "ragel/i18n/ru.js.rl" */

    this.content_start = p;
  		break;
case 3:
/* line 21 "ragel/i18n/ru.js.rl" */

    this.docstring_content_type_start = p;
  		break;
case 4:
/* line 25 "ragel/i18n/ru.js.rl" */

    this.docstring_content_type_end = p;
  		break;
case 5:
/* line 29 "ragel/i18n/ru.js.rl" */

    var con = this.unindent(
      this.start_col, 
      this.bytesToString(data.slice(this.content_start, this.next_keyword_start-1)).replace(/(\r?\n)?([\t ])*$/, '').replace(/\\\"\\\"\\\"/mg, '"""')
    );
    var con_type = this.bytesToString(data.slice(this.docstring_content_type_start, this.docstring_content_type_end)).trim();
    this.listener.doc_string(con_type, con, this.current_line); 
  		break;
case 6:
/* line 38 "ragel/i18n/ru.js.rl" */

    p = this.store_keyword_content('feature', data, p, eof);
  		break;
case 7:
/* line 42 "ragel/i18n/ru.js.rl" */

    p = this.store_keyword_content('background', data, p, eof);
  		break;
case 8:
/* line 46 "ragel/i18n/ru.js.rl" */

    p = this.store_keyword_content('scenario', data, p, eof);
  		break;
case 9:
/* line 50 "ragel/i18n/ru.js.rl" */

    p = this.store_keyword_content('scenario_outline', data, p, eof);
  		break;
case 10:
/* line 54 "ragel/i18n/ru.js.rl" */

    p = this.store_keyword_content('examples', data, p, eof);
  		break;
case 11:
/* line 58 "ragel/i18n/ru.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.step(this.keyword, con, this.current_line);
  		break;
case 12:
/* line 63 "ragel/i18n/ru.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.comment(con, this.line_number);
    this.keyword_start = null;
  		break;
case 13:
/* line 69 "ragel/i18n/ru.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.tag(con, this.line_number);
    this.keyword_start = null;
  		break;
case 14:
/* line 75 "ragel/i18n/ru.js.rl" */

    this.line_number++;
  		break;
case 15:
/* line 79 "ragel/i18n/ru.js.rl" */

    this.last_newline = p + 1;
  		break;
case 16:
/* line 83 "ragel/i18n/ru.js.rl" */

    this.keyword_start = this.keyword_start || p;
  		break;
case 17:
/* line 87 "ragel/i18n/ru.js.rl" */

    this.keyword = this.bytesToString(data.slice(this.keyword_start, p)).replace(/:$/, '');
    this.keyword_start = null;
  		break;
case 18:
/* line 92 "ragel/i18n/ru.js.rl" */

    this.next_keyword_start = p;
  		break;
case 19:
/* line 96 "ragel/i18n/ru.js.rl" */

    p = p - 1;
    current_row = [];
    this.current_line = this.line_number;
  		break;
case 20:
/* line 102 "ragel/i18n/ru.js.rl" */

    this.content_start = p;
  		break;
case 21:
/* line 106 "ragel/i18n/ru.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    current_row.push(con.replace(/\\\|/, "|").replace(/\\n/, "\n").replace(/\\\\/, "\\"));
  		break;
case 22:
/* line 111 "ragel/i18n/ru.js.rl" */

    this.listener.row(current_row, this.current_line);
  		break;
case 23:
/* line 115 "ragel/i18n/ru.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw new Error("Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.");
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 1625 "js/lib/gherkin/lexer/ru.js" */
			} /* action switch */
		}
	}
	if (_trigger_goto) {
		continue;
	}
	}
	if (_goto_level <= _again) {
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	p += 1;
	if (p != pe) {
		_goto_level = _resume;
		continue;
	}
	}
	if (_goto_level <= _test_eof) {
	if (p == eof) {
	__acts = _lexer_eof_actions[ this.cs];
	__nacts =  _lexer_actions[__acts];
	__acts += 1;
	while (__nacts > 0) {
		__nacts -= 1;
		__acts += 1;
		switch (_lexer_actions[__acts - 1]) {
case 23:
/* line 115 "ragel/i18n/ru.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw new Error("Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.");
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 1664 "js/lib/gherkin/lexer/ru.js" */
		} /* eof action switch */
	}
	if (_trigger_goto) {
		continue;
	}
}
	}
	if (_goto_level <= _out) {
		break;
	}
	}
	}

/* line 165 "ragel/i18n/ru.js.rl" */
};


/*
 * Decode utf-8 byte sequence to string.
 */
var decodeUtf8 = function(bytes) {
  var result = "";
  var i = 0;
  var wc;
  var c;

  while (i < bytes.length) {
    /* parse as UTF-8 lead byte */
    wc = bytes[i++];
    if (wc < 0x80) {
      count = 0;
    } else if (wc < 0xC2 || wc >= 0xF8) {
      throw new Error("input is not a valid UTF-8 lead octet");
    } else if (wc < 0xE0) {
      count = 1;
      wc = (wc & 0x1F) << 6;
    } else if (wc < 0xF0) {
      count = 2;
      wc = (wc & 0x0F) << 12;
    } else /* wc < 0xF8 */ {
      count = 3;
      wc = (wc & 0x07) << 18;
    }

    /* parse trail bytes, if any */
    while (count) {
      if (!(i < bytes.length)) {
        throw new Error("short read");
      }
      if ((c = bytes[i++] ^ 0x80) > 0x3F) {
        throw new Error("input is not a valid UTF-8 trail octet");
      }
      wc |= c << (6 * --count);
      if (wc < (1 << (5 * count + 6))) {
        throw new Error("invalid non-minimal encoded input");
      }
    }

    /* handle conversion to UTF-16 if needed */
    if (wc > 0xFFFF) {
      wc -= 0x10000;
      result += String.fromCharCode(0xD800 + (wc >> 10));
      wc = 0xDC00 + (wc & 0x3FF);
    }
    result += String.fromCharCode(wc);
  }

  return result;
};

/*
 * Encode string to an array of bytes using utf8 encoding.
 *
 * Javascript internally stores character data as utf16 (like java).
 * String.charCodeAt() does *not* produce unicode points, but simply
 * reflects this internal representation. Thus, it is necessary
 * to first decode the utf-16 representation before encoding to
 * utf-8.
 */
var encodeUtf8 = function(string) {
  var bytes = [];
  var i = 0;
  var j = 0;
  var wc;

  while (i < string.length) {
    wc = string.charCodeAt(i++);
    if (wc >= 0xD800 && wc <= 0xDBFF && i < string.length && string.charCodeAt(i) >= 0xDC00 && string.charCodeAt(i) <= 0xDFFF) {
      /* decode UTF-16 */
      wc = 0x10000 + ((wc & 0x3FF) << 10) + (string.charCodeAt(i++) & 0x3FF);
    }

    /* emit lead byte */
    if (wc < 0x80) {
      bytes[j++] = wc;
      count = 0;
    } else if (wc < 0x800) {
      bytes[j++] = 0xC0 | (wc >> 6);
      count = 1;
    } else if (wc < 0x10000) {
      bytes[j++] = 0xE0 | (wc >> 12);
      count = 2;
    } else {
      /* SMP: 21-bit Unicode */
      bytes[j++] = 0xF0 | (wc >> 18);
      count = 3;
    }

    /* emit trail bytes, if any */
    while (count) {
      bytes[j++] = 0x80 | ((wc >> (6 * --count)) & 0x3F);
    }
  }

  return bytes;

};

Lexer.prototype.bytesToString = function(bytes) {
  if(typeof bytes.write == 'function') {
    // Node.js
    return bytes.toString('utf-8');
  }
  return decodeUtf8(bytes);
};

Lexer.prototype.stringToBytes = function(string) {
  return encodeUtf8(string);
};

Lexer.prototype.unindent = function(startcol, text) {
  startcol = startcol || 0;
  return text.replace(new RegExp('^[\t ]{0,' + startcol + '}', 'gm'), ''); 
};

Lexer.prototype.store_keyword_content = function(event, data, p, eof) {
  var end_point = (!this.next_keyword_start || (p == eof)) ? p : this.next_keyword_start;
  var content = this.unindent(this.start_col + 2, this.bytesToString(data.slice(this.content_start, end_point))).replace(/\s+$/,"");
  var content_lines = content.split("\n")
  var name = content_lines.shift() || "";
  name = name.trim();
  var description = content_lines.join("\n");
  this.listener[event](this.keyword, name, description, this.current_line);
  var nks = this.next_keyword_start;
  this.next_keyword_start = null;
  return nks ? nks - 1 : p;
};

Lexer.prototype.current_line_content = function(data, p) {
  var rest = Array.prototype.slice.call(data,this.last_newline, -1);
  var end = rest.indexOf(10) || -1;
  return this.bytesToString(rest.slice(0, end)).trim();
};

// Node.js export
if(typeof module !== 'undefined') {
  module.exports = Lexer;
}
// Require.js export
if (typeof define !== 'undefined') {
  if(define.amd) {
    define('gherkin/lexer/ru', [], function() {
      return Lexer;
    });
  } else {
    define('gherkin/lexer/ru', function(require, exports, module) {
      exports.Lexer = Lexer;
    });
  }
}

})();

}).call(this,require("buffer").Buffer)

},{"buffer":69}],228:[function(require,module,exports){
(function (Buffer){

/* line 1 "ragel/i18n/sk.js.rl" */
;(function() {


/* line 126 "ragel/i18n/sk.js.rl" */



/* line 11 "js/lib/gherkin/lexer/sk.js" */
var _lexer_actions = [
	0, 1, 0, 1, 1, 1, 2, 1, 
	3, 1, 4, 1, 5, 1, 6, 1, 
	7, 1, 8, 1, 9, 1, 10, 1, 
	11, 1, 12, 1, 13, 1, 16, 1, 
	17, 1, 18, 1, 19, 1, 20, 1, 
	21, 1, 22, 1, 23, 2, 2, 18, 
	2, 3, 4, 2, 13, 0, 2, 14, 
	15, 2, 17, 0, 2, 17, 1, 2, 
	17, 16, 2, 17, 19, 2, 18, 6, 
	2, 18, 7, 2, 18, 8, 2, 18, 
	9, 2, 18, 10, 2, 18, 16, 2, 
	20, 21, 2, 22, 0, 2, 22, 1, 
	2, 22, 16, 2, 22, 19, 3, 4, 
	14, 15, 3, 5, 14, 15, 3, 11, 
	14, 15, 3, 12, 14, 15, 3, 13, 
	14, 15, 3, 14, 15, 18, 3, 17, 
	0, 11, 3, 17, 14, 15, 4, 2, 
	14, 15, 18, 4, 3, 4, 14, 15, 
	4, 17, 0, 14, 15, 5, 17, 0, 
	11, 14, 15
];

var _lexer_key_offsets = [
	0, 0, 21, 41, 42, 43, 45, 47, 
	52, 57, 62, 67, 71, 75, 77, 78, 
	79, 80, 81, 82, 83, 84, 85, 86, 
	87, 88, 89, 90, 91, 92, 93, 95, 
	97, 102, 109, 114, 117, 121, 125, 128, 
	131, 134, 137, 140, 143, 146, 149, 152, 
	155, 158, 161, 164, 167, 170, 171, 172, 
	173, 174, 175, 176, 177, 178, 179, 180, 
	193, 195, 197, 199, 201, 203, 205, 207, 
	209, 211, 213, 215, 217, 219, 221, 223, 
	225, 227, 229, 231, 233, 235, 255, 256, 
	257, 258, 259, 260, 261, 262, 263, 264, 
	265, 266, 267, 268, 269, 270, 271, 272, 
	274, 275, 276, 277, 293, 295, 297, 299, 
	301, 303, 305, 307, 309, 311, 313, 315, 
	317, 319, 321, 323, 327, 349, 350, 351, 
	352, 353, 354, 355, 356, 357, 358, 359, 
	360, 361, 362, 363, 365, 369, 370, 371, 
	372, 373, 374, 375, 376, 377, 378, 379, 
	380, 381, 382, 383, 384, 385, 386, 387, 
	388, 389, 407, 409, 411, 413, 415, 417, 
	419, 421, 423, 425, 427, 429, 431, 433, 
	435, 437, 441, 463, 464, 465, 466, 467, 
	468, 469, 470, 471, 472, 490, 492, 494, 
	496, 498, 500, 502, 504, 506, 508, 510, 
	512, 514, 516, 518, 520, 524, 546, 547, 
	548, 549, 550, 551, 552, 553, 554, 555, 
	556, 557, 558, 559, 560, 561, 562, 563, 
	564, 565, 566, 567, 568, 569, 570, 572, 
	573, 574, 575, 576, 577, 578, 579, 580, 
	581, 582, 583, 584, 585, 586, 587, 591, 
	597, 600, 602, 608, 628, 630, 632, 634, 
	636, 638, 640, 642, 644, 646, 648, 650, 
	652, 654, 656, 658, 660, 662, 664, 666, 
	668, 670, 672, 674, 676, 678, 681, 683, 
	685, 687, 689, 691, 693, 695, 697, 699, 
	701, 703, 705, 707, 709, 714, 716, 718, 
	720, 722, 724, 726, 728, 730, 732, 734, 
	736, 738, 740, 742, 744, 746, 748, 750, 
	752, 754, 756, 758, 760, 762, 764, 766, 
	768, 770, 772, 774, 776, 778, 780, 782, 
	784, 786, 788, 790, 792, 794, 796, 798, 
	800, 802, 804, 806, 808, 810, 811, 812, 
	813, 814, 815, 816, 817, 818, 819, 820, 
	821, 822, 823, 824, 825, 827, 829, 831, 
	833, 835, 837, 839, 841, 843, 845, 847, 
	849, 851, 853, 855, 857, 859, 861, 863, 
	865, 867, 869, 871, 873, 875, 878, 880, 
	882, 884, 886, 888, 890, 892, 894, 896, 
	898, 900, 902, 904, 906, 910, 912, 914, 
	916, 918, 920, 922, 924, 926, 928, 930, 
	932, 934, 936, 938, 940, 942, 944, 946, 
	948, 950, 952, 954, 956, 958, 960, 962, 
	964, 966, 968, 970, 972, 974, 976, 978, 
	980, 982, 984, 986, 988, 990, 992, 994, 
	996, 997, 998, 999, 1000, 1001, 1002, 1003, 
	1004, 1005, 1006, 1015, 1017, 1019, 1021, 1023, 
	1025, 1027, 1029, 1031, 1033, 1035, 1037, 1039, 
	1041, 1043, 1045, 1047, 1049, 1051, 1053, 1055, 
	1057, 1059, 1061, 1063, 1065, 1067, 1068, 1069, 
	1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 
	1078, 1079, 1080, 1081, 1082, 1084, 1086, 1088, 
	1090, 1092, 1094, 1096, 1098, 1100, 1102, 1104, 
	1106, 1110, 1112, 1114, 1116, 1118, 1120, 1122, 
	1124, 1126, 1128, 1130, 1132, 1134, 1136, 1138, 
	1140, 1142, 1144, 1146, 1148, 1150, 1152, 1154, 
	1156, 1158, 1160, 1162, 1164, 1166, 1168, 1170, 
	1172, 1174, 1176, 1178, 1180, 1182, 1184, 1186, 
	1188, 1190, 1192, 1194, 1196, 1198, 1200, 1202, 
	1204, 1206, 1208, 1210, 1212, 1214, 1216, 1218, 
	1220, 1222, 1224, 1227, 1229, 1231, 1233, 1235, 
	1237, 1239, 1241, 1243, 1245, 1247, 1249, 1251, 
	1253, 1256, 1259, 1261, 1263, 1265, 1267, 1269, 
	1271, 1273, 1275, 1277, 1279, 1281, 1283, 1285, 
	1287, 1289, 1291, 1293, 1295, 1297, 1299, 1301, 
	1303, 1305, 1307, 1309, 1311, 1313, 1315, 1317, 
	1319, 1321, 1323, 1325, 1326, 1327
];

var _lexer_trans_keys = [
	10, 32, 34, 35, 37, 42, 64, 65, 
	70, 75, 78, 79, 80, 83, 84, 86, 
	90, 124, 239, 9, 13, 10, 32, 34, 
	35, 37, 42, 64, 65, 70, 75, 78, 
	79, 80, 83, 84, 86, 90, 124, 9, 
	13, 34, 34, 10, 13, 10, 13, 10, 
	32, 34, 9, 13, 10, 32, 34, 9, 
	13, 10, 32, 34, 9, 13, 10, 32, 
	34, 9, 13, 10, 32, 9, 13, 10, 
	32, 9, 13, 10, 13, 10, 95, 70, 
	69, 65, 84, 85, 82, 69, 95, 69, 
	78, 68, 95, 37, 32, 10, 13, 10, 
	13, 13, 32, 64, 9, 10, 9, 10, 
	13, 32, 64, 11, 12, 10, 32, 64, 
	9, 13, 32, 107, 108, 10, 13, 116, 
	122, 10, 13, 97, 105, 10, 13, 107, 
	10, 13, 116, 10, 13, 105, 10, 13, 
	101, -59, 10, 13, -66, 10, 13, 10, 
	13, 32, -61, 10, 13, -95, 10, 13, 
	10, 13, 114, 10, 13, 111, 10, 13, 
	118, 10, 13, 101, -59, 10, 13, -120, 
	10, 13, 101, 117, 110, 107, 99, 105, 
	97, 58, 10, 10, 10, 32, 35, 37, 
	64, 70, 78, 79, 80, 83, 86, 9, 
	13, 10, 95, 10, 70, 10, 69, 10, 
	65, 10, 84, 10, 85, 10, 82, 10, 
	69, 10, 95, 10, 69, 10, 78, 10, 
	68, 10, 95, 10, 37, 10, 117, 10, 
	110, 10, 107, 10, 99, 10, 105, 10, 
	97, 10, 58, 10, 32, 34, 35, 37, 
	42, 64, 65, 70, 75, 78, 79, 80, 
	83, 84, 86, 90, 124, 9, 13, 101, 
	-60, -113, -61, -95, -60, -115, 114, 116, 
	32, 83, 99, 101, 110, -61, -95, 114, 
	97, 117, 58, 10, 10, 10, 32, 35, 
	37, 42, 64, 65, 70, 75, 80, 83, 
	84, 86, 90, 9, 13, 10, 95, 10, 
	70, 10, 69, 10, 65, 10, 84, 10, 
	85, 10, 82, 10, 69, 10, 95, 10, 
	69, 10, 78, 10, 68, 10, 95, 10, 
	37, 10, 32, 10, 32, 107, 108, 10, 
	32, 34, 35, 37, 42, 64, 65, 70, 
	75, 78, 79, 80, 83, 84, 86, 90, 
	116, 122, 124, 9, 13, 115, 110, 111, 
	118, 97, 32, 83, 99, 101, 110, -61, 
	-95, 114, 97, 111, 114, -59, 107, 116, 
	122, -66, 105, 97, 100, 97, 118, 107, 
	105, 97, -60, -66, 111, 109, 97, 100, 
	105, 101, 58, 10, 10, 10, 32, 35, 
	37, 42, 64, 65, 70, 75, 78, 79, 
	80, 83, 84, 86, 90, 9, 13, 10, 
	95, 10, 70, 10, 69, 10, 65, 10, 
	84, 10, 85, 10, 82, 10, 69, 10, 
	95, 10, 69, 10, 78, 10, 68, 10, 
	95, 10, 37, 10, 32, 10, 32, 107, 
	108, 10, 32, 34, 35, 37, 42, 64, 
	65, 70, 75, 78, 79, 80, 83, 84, 
	86, 90, 116, 122, 124, 9, 13, 99, 
	101, 110, -61, -95, 114, 58, 10, 10, 
	10, 32, 35, 37, 42, 64, 65, 70, 
	75, 78, 79, 80, 83, 84, 86, 90, 
	9, 13, 10, 95, 10, 70, 10, 69, 
	10, 65, 10, 84, 10, 85, 10, 82, 
	10, 69, 10, 95, 10, 69, 10, 78, 
	10, 68, 10, 95, 10, 37, 10, 32, 
	10, 32, 107, 108, 10, 32, 34, 35, 
	37, 42, 64, 65, 70, 75, 78, 79, 
	80, 83, 84, 86, 90, 116, 122, 124, 
	9, 13, 97, 107, 108, 97, 115, 116, 
	110, 111, 115, -59, -91, 97, 32, 112, 
	114, 101, 100, 112, 111, 107, 108, 97, 
	100, 117, 97, 105, 107, 116, 105, 101, 
	-59, -66, 32, -61, -95, 114, 111, 118, 
	101, -59, -120, 32, 124, 9, 13, 10, 
	32, 92, 124, 9, 13, 10, 92, 124, 
	10, 92, 10, 32, 92, 124, 9, 13, 
	10, 32, 34, 35, 37, 42, 64, 65, 
	70, 75, 78, 79, 80, 83, 84, 86, 
	90, 124, 9, 13, 10, 101, 10, 117, 
	10, 110, 10, 107, 10, 99, 10, 105, 
	10, 97, 10, 58, 10, 101, -60, 10, 
	-113, 10, -61, 10, -95, 10, -60, 10, 
	-115, 10, 10, 114, 10, 116, 10, 32, 
	10, 83, 10, 99, 10, 101, 10, 110, 
	-61, 10, -95, 10, 10, 114, 10, 97, 
	117, 10, 115, 10, 110, 10, 111, 10, 
	118, 10, 97, 10, 32, 10, 83, 10, 
	99, 10, 101, 10, 110, -61, 10, -95, 
	10, 10, 114, 10, 111, -59, 10, 107, 
	116, 122, -66, 10, 10, 105, 10, 97, 
	10, 100, 10, 97, 10, 118, 10, 107, 
	10, 105, 10, 97, -60, 10, -66, 10, 
	10, 111, 10, 109, 10, 97, 10, 100, 
	10, 105, 10, 101, 10, 99, 10, 101, 
	10, 110, -61, 10, -95, 10, 10, 114, 
	10, 97, 10, 107, 10, 108, 10, 97, 
	10, 115, 10, 116, 10, 110, 10, 111, 
	10, 115, -59, 10, -91, 10, 10, 97, 
	10, 32, 10, 112, 10, 114, 10, 101, 
	10, 100, 10, 112, 10, 111, 10, 107, 
	10, 108, 10, 97, 10, 100, 10, 117, 
	97, 105, 107, 116, 105, 101, -59, -66, 
	32, -61, -95, 114, 111, 118, 101, -59, 
	-120, 10, 101, 10, 117, 10, 110, 10, 
	107, 10, 99, 10, 105, 10, 97, 10, 
	58, 10, 101, -60, 10, -113, 10, -61, 
	10, -95, 10, -60, 10, -115, 10, 10, 
	114, 10, 116, 10, 32, 10, 83, 10, 
	99, 10, 101, 10, 110, -61, 10, -95, 
	10, 10, 114, 10, 97, 117, 10, 115, 
	10, 110, 10, 111, 10, 118, 10, 97, 
	10, 32, 10, 83, 10, 99, 10, 101, 
	10, 110, -61, 10, -95, 10, 10, 114, 
	10, 111, -59, 10, 107, 116, -66, 10, 
	10, 105, 10, 97, 10, 100, 10, 97, 
	10, 118, 10, 107, 10, 105, 10, 97, 
	-60, 10, -66, 10, 10, 111, 10, 109, 
	10, 99, 10, 101, 10, 110, -61, 10, 
	-95, 10, 10, 114, 10, 97, 10, 107, 
	10, 108, 10, 97, 10, 115, 10, 116, 
	10, 110, 10, 111, 10, 115, -59, 10, 
	-91, 10, 10, 97, 10, 32, 10, 112, 
	10, 114, 10, 101, 10, 100, 10, 112, 
	10, 111, 10, 107, 10, 108, 10, 97, 
	10, 100, 10, 117, -61, -83, 107, 108, 
	97, 100, 121, 58, 10, 10, 10, 32, 
	35, 70, 80, 86, 124, 9, 13, 10, 
	117, 10, 110, 10, 107, 10, 99, 10, 
	105, 10, 97, 10, 58, 10, 111, -59, 
	10, -66, 10, 10, 105, 10, 97, 10, 
	100, 10, 97, 10, 118, 10, 107, 10, 
	108, 10, 97, 10, 115, 10, 116, 10, 
	110, 10, 111, 10, 115, -59, 10, -91, 
	10, 97, 105, 107, 116, 105, 101, -59, 
	-66, 32, -61, -95, 114, 111, 118, 101, 
	-59, -120, 10, 101, 10, 117, 10, 110, 
	10, 107, 10, 99, 10, 105, 10, 97, 
	10, 58, 10, 101, -60, 10, -113, 10, 
	10, 111, -59, 10, 107, 116, -66, 10, 
	10, 105, 10, 97, 10, 100, 10, 97, 
	10, 118, 10, 107, 10, 105, 10, 97, 
	-60, 10, -66, 10, 10, 111, 10, 109, 
	10, 99, 10, 101, 10, 110, -61, 10, 
	-95, 10, 10, 114, 10, 97, 10, 107, 
	10, 108, 10, 97, 10, 115, 10, 116, 
	10, 110, 10, 111, 10, 115, -59, 10, 
	-91, 10, 10, 97, 10, 32, 10, 112, 
	10, 114, 10, 101, 10, 100, 10, 112, 
	10, 111, 10, 107, 10, 108, 10, 97, 
	10, 100, 10, 117, -61, 10, -95, 10, 
	-60, 10, -115, 10, 10, 114, 10, 116, 
	10, 32, 10, 83, 10, 99, 10, 101, 
	10, 110, -61, 10, -95, 10, 10, 114, 
	10, 97, 117, 10, 115, 10, 110, 10, 
	111, 10, 118, 10, 97, 10, 32, 10, 
	83, 10, 99, 10, 101, 10, 110, -61, 
	10, -95, 10, 10, 114, 10, 111, 114, 
	-59, 10, 122, -66, 10, 10, 105, 10, 
	97, 10, 100, 10, 97, 10, 118, 10, 
	107, 10, 97, 10, 100, 10, 105, 10, 
	101, -61, 10, -83, 10, 10, 107, 10, 
	108, 10, 97, 10, 100, 10, 121, 10, 
	99, 10, 101, 10, 110, -61, 10, -95, 
	10, 10, 114, 10, 108, 10, 97, 10, 
	115, 10, 116, 10, 110, 10, 111, 10, 
	115, -59, 10, -91, 10, 187, 191, 0
];

var _lexer_single_lengths = [
	0, 19, 18, 1, 1, 2, 2, 3, 
	3, 3, 3, 2, 2, 2, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 2, 2, 
	3, 5, 3, 3, 4, 4, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 11, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 18, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 2, 
	1, 1, 1, 14, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 4, 20, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 2, 4, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 16, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 4, 20, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 16, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 4, 20, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 2, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 2, 4, 
	3, 2, 4, 18, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 3, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 5, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 3, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 4, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 7, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	4, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 3, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	3, 3, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 1, 1, 0
];

var _lexer_range_lengths = [
	0, 1, 1, 0, 0, 0, 0, 1, 
	1, 1, 1, 1, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 1, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 1, 
	0, 0, 1, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0
];

var _lexer_index_offsets = [
	0, 0, 21, 41, 43, 45, 48, 51, 
	56, 61, 66, 71, 75, 79, 82, 84, 
	86, 88, 90, 92, 94, 96, 98, 100, 
	102, 104, 106, 108, 110, 112, 114, 117, 
	120, 125, 132, 137, 141, 146, 151, 155, 
	159, 163, 167, 171, 175, 179, 183, 187, 
	191, 195, 199, 203, 207, 211, 213, 215, 
	217, 219, 221, 223, 225, 227, 229, 231, 
	244, 247, 250, 253, 256, 259, 262, 265, 
	268, 271, 274, 277, 280, 283, 286, 289, 
	292, 295, 298, 301, 304, 307, 327, 329, 
	331, 333, 335, 337, 339, 341, 343, 345, 
	347, 349, 351, 353, 355, 357, 359, 361, 
	364, 366, 368, 370, 386, 389, 392, 395, 
	398, 401, 404, 407, 410, 413, 416, 419, 
	422, 425, 428, 431, 436, 458, 460, 462, 
	464, 466, 468, 470, 472, 474, 476, 478, 
	480, 482, 484, 486, 489, 494, 496, 498, 
	500, 502, 504, 506, 508, 510, 512, 514, 
	516, 518, 520, 522, 524, 526, 528, 530, 
	532, 534, 552, 555, 558, 561, 564, 567, 
	570, 573, 576, 579, 582, 585, 588, 591, 
	594, 597, 602, 624, 626, 628, 630, 632, 
	634, 636, 638, 640, 642, 660, 663, 666, 
	669, 672, 675, 678, 681, 684, 687, 690, 
	693, 696, 699, 702, 705, 710, 732, 734, 
	736, 738, 740, 742, 744, 746, 748, 750, 
	752, 754, 756, 758, 760, 762, 764, 766, 
	768, 770, 772, 774, 776, 778, 780, 783, 
	785, 787, 789, 791, 793, 795, 797, 799, 
	801, 803, 805, 807, 809, 811, 813, 817, 
	823, 827, 830, 836, 856, 859, 862, 865, 
	868, 871, 874, 877, 880, 883, 886, 889, 
	892, 895, 898, 901, 904, 907, 910, 913, 
	916, 919, 922, 925, 928, 931, 935, 938, 
	941, 944, 947, 950, 953, 956, 959, 962, 
	965, 968, 971, 974, 977, 983, 986, 989, 
	992, 995, 998, 1001, 1004, 1007, 1010, 1013, 
	1016, 1019, 1022, 1025, 1028, 1031, 1034, 1037, 
	1040, 1043, 1046, 1049, 1052, 1055, 1058, 1061, 
	1064, 1067, 1070, 1073, 1076, 1079, 1082, 1085, 
	1088, 1091, 1094, 1097, 1100, 1103, 1106, 1109, 
	1112, 1115, 1118, 1121, 1124, 1127, 1129, 1131, 
	1133, 1135, 1137, 1139, 1141, 1143, 1145, 1147, 
	1149, 1151, 1153, 1155, 1157, 1160, 1163, 1166, 
	1169, 1172, 1175, 1178, 1181, 1184, 1187, 1190, 
	1193, 1196, 1199, 1202, 1205, 1208, 1211, 1214, 
	1217, 1220, 1223, 1226, 1229, 1232, 1236, 1239, 
	1242, 1245, 1248, 1251, 1254, 1257, 1260, 1263, 
	1266, 1269, 1272, 1275, 1278, 1283, 1286, 1289, 
	1292, 1295, 1298, 1301, 1304, 1307, 1310, 1313, 
	1316, 1319, 1322, 1325, 1328, 1331, 1334, 1337, 
	1340, 1343, 1346, 1349, 1352, 1355, 1358, 1361, 
	1364, 1367, 1370, 1373, 1376, 1379, 1382, 1385, 
	1388, 1391, 1394, 1397, 1400, 1403, 1406, 1409, 
	1412, 1414, 1416, 1418, 1420, 1422, 1424, 1426, 
	1428, 1430, 1432, 1441, 1444, 1447, 1450, 1453, 
	1456, 1459, 1462, 1465, 1468, 1471, 1474, 1477, 
	1480, 1483, 1486, 1489, 1492, 1495, 1498, 1501, 
	1504, 1507, 1510, 1513, 1516, 1519, 1521, 1523, 
	1525, 1527, 1529, 1531, 1533, 1535, 1537, 1539, 
	1541, 1543, 1545, 1547, 1549, 1552, 1555, 1558, 
	1561, 1564, 1567, 1570, 1573, 1576, 1579, 1582, 
	1585, 1590, 1593, 1596, 1599, 1602, 1605, 1608, 
	1611, 1614, 1617, 1620, 1623, 1626, 1629, 1632, 
	1635, 1638, 1641, 1644, 1647, 1650, 1653, 1656, 
	1659, 1662, 1665, 1668, 1671, 1674, 1677, 1680, 
	1683, 1686, 1689, 1692, 1695, 1698, 1701, 1704, 
	1707, 1710, 1713, 1716, 1719, 1722, 1725, 1728, 
	1731, 1734, 1737, 1740, 1743, 1746, 1749, 1752, 
	1755, 1758, 1761, 1765, 1768, 1771, 1774, 1777, 
	1780, 1783, 1786, 1789, 1792, 1795, 1798, 1801, 
	1804, 1808, 1812, 1815, 1818, 1821, 1824, 1827, 
	1830, 1833, 1836, 1839, 1842, 1845, 1848, 1851, 
	1854, 1857, 1860, 1863, 1866, 1869, 1872, 1875, 
	1878, 1881, 1884, 1887, 1890, 1893, 1896, 1899, 
	1902, 1905, 1908, 1911, 1913, 1915
];

var _lexer_indicies = [
	2, 1, 3, 4, 5, 6, 7, 8, 
	9, 10, 11, 12, 13, 14, 15, 16, 
	17, 18, 19, 1, 0, 2, 1, 3, 
	4, 5, 6, 7, 8, 9, 10, 11, 
	12, 13, 14, 15, 16, 17, 18, 1, 
	0, 20, 0, 21, 0, 23, 24, 22, 
	26, 27, 25, 30, 29, 31, 29, 28, 
	34, 33, 35, 33, 32, 34, 33, 36, 
	33, 32, 34, 33, 37, 33, 32, 39, 
	38, 38, 0, 2, 40, 40, 0, 42, 
	43, 41, 2, 0, 44, 0, 45, 0, 
	46, 0, 47, 0, 48, 0, 49, 0, 
	50, 0, 51, 0, 52, 0, 53, 0, 
	54, 0, 55, 0, 56, 0, 57, 0, 
	58, 0, 60, 61, 59, 63, 64, 62, 
	0, 0, 0, 0, 65, 66, 67, 66, 
	66, 69, 68, 65, 2, 70, 7, 70, 
	0, 71, 72, 73, 0, 60, 61, 74, 
	75, 59, 63, 64, 76, 77, 62, 63, 
	64, 78, 62, 63, 64, 79, 62, 63, 
	64, 77, 62, 63, 64, 80, 62, 81, 
	63, 64, 62, 82, 63, 64, 62, 63, 
	64, 58, 62, 83, 63, 64, 62, 84, 
	63, 64, 62, 63, 64, 85, 62, 63, 
	64, 86, 62, 63, 64, 87, 62, 63, 
	64, 88, 62, 89, 63, 64, 62, 82, 
	63, 64, 62, 72, 0, 90, 0, 91, 
	0, 92, 0, 93, 0, 94, 0, 95, 
	0, 96, 0, 98, 97, 100, 99, 100, 
	101, 102, 103, 102, 104, 105, 106, 107, 
	108, 109, 101, 99, 100, 110, 99, 100, 
	111, 99, 100, 112, 99, 100, 113, 99, 
	100, 114, 99, 100, 115, 99, 100, 116, 
	99, 100, 117, 99, 100, 118, 99, 100, 
	119, 99, 100, 120, 99, 100, 121, 99, 
	100, 122, 99, 100, 123, 99, 100, 124, 
	99, 100, 125, 99, 100, 126, 99, 100, 
	127, 99, 100, 128, 99, 100, 129, 99, 
	100, 130, 99, 132, 131, 133, 134, 135, 
	136, 137, 138, 139, 140, 141, 142, 143, 
	144, 145, 146, 147, 148, 131, 0, 149, 
	0, 150, 0, 72, 0, 151, 0, 152, 
	0, 153, 0, 154, 0, 155, 0, 156, 
	0, 157, 0, 158, 0, 159, 0, 160, 
	0, 161, 0, 162, 0, 163, 0, 164, 
	0, 165, 165, 0, 166, 0, 168, 167, 
	170, 169, 170, 171, 172, 173, 174, 172, 
	175, 176, 177, 178, 179, 180, 181, 182, 
	171, 169, 170, 183, 169, 170, 184, 169, 
	170, 185, 169, 170, 186, 169, 170, 187, 
	169, 170, 188, 169, 170, 189, 169, 170, 
	190, 169, 170, 191, 169, 170, 192, 169, 
	170, 193, 169, 170, 194, 169, 170, 195, 
	169, 170, 196, 169, 170, 197, 169, 170, 
	198, 199, 200, 169, 132, 131, 133, 134, 
	135, 136, 137, 138, 139, 140, 141, 142, 
	143, 144, 145, 146, 147, 201, 202, 148, 
	131, 0, 203, 0, 204, 0, 205, 0, 
	206, 0, 207, 0, 208, 0, 209, 0, 
	210, 0, 211, 0, 212, 0, 213, 0, 
	214, 0, 215, 0, 165, 0, 216, 217, 
	0, 218, 219, 220, 221, 0, 222, 0, 
	223, 0, 224, 0, 225, 0, 226, 0, 
	227, 0, 94, 0, 228, 0, 229, 0, 
	230, 0, 72, 0, 231, 0, 72, 0, 
	232, 0, 233, 0, 234, 0, 235, 0, 
	236, 0, 238, 237, 240, 239, 240, 241, 
	242, 243, 244, 242, 245, 246, 247, 248, 
	249, 250, 251, 252, 253, 254, 241, 239, 
	240, 255, 239, 240, 256, 239, 240, 257, 
	239, 240, 258, 239, 240, 259, 239, 240, 
	260, 239, 240, 261, 239, 240, 262, 239, 
	240, 263, 239, 240, 264, 239, 240, 265, 
	239, 240, 266, 239, 240, 267, 239, 240, 
	268, 239, 240, 269, 239, 240, 270, 271, 
	272, 239, 132, 131, 133, 134, 135, 136, 
	137, 138, 139, 140, 141, 142, 143, 144, 
	145, 146, 147, 273, 274, 148, 131, 0, 
	275, 0, 276, 0, 277, 0, 278, 0, 
	279, 0, 280, 0, 281, 0, 283, 282, 
	285, 284, 285, 286, 287, 288, 289, 287, 
	290, 291, 292, 293, 294, 295, 296, 297, 
	298, 299, 286, 284, 285, 300, 284, 285, 
	301, 284, 285, 302, 284, 285, 303, 284, 
	285, 304, 284, 285, 305, 284, 285, 306, 
	284, 285, 307, 284, 285, 308, 284, 285, 
	309, 284, 285, 310, 284, 285, 311, 284, 
	285, 312, 284, 285, 313, 284, 285, 314, 
	284, 285, 315, 316, 317, 284, 132, 131, 
	133, 134, 135, 136, 137, 138, 139, 140, 
	141, 142, 143, 144, 145, 146, 147, 318, 
	319, 148, 131, 0, 320, 0, 72, 0, 
	321, 0, 322, 0, 323, 0, 324, 0, 
	325, 0, 326, 0, 327, 0, 328, 0, 
	95, 0, 329, 0, 330, 0, 331, 0, 
	332, 0, 333, 0, 334, 0, 335, 0, 
	336, 0, 337, 0, 338, 0, 339, 0, 
	340, 0, 72, 0, 341, 342, 0, 343, 
	0, 344, 0, 342, 0, 345, 0, 346, 
	0, 347, 0, 314, 0, 348, 0, 349, 
	0, 350, 0, 351, 0, 352, 0, 353, 
	0, 354, 0, 347, 0, 355, 356, 355, 
	0, 359, 358, 360, 361, 358, 357, 0, 
	363, 364, 362, 0, 363, 362, 359, 365, 
	363, 364, 365, 362, 359, 366, 367, 368, 
	369, 370, 371, 372, 373, 374, 375, 376, 
	377, 378, 379, 380, 381, 382, 366, 0, 
	285, 316, 284, 285, 383, 284, 285, 384, 
	284, 285, 385, 284, 285, 386, 284, 285, 
	387, 284, 285, 388, 284, 285, 314, 284, 
	285, 389, 284, 390, 285, 284, 316, 285, 
	284, 391, 285, 284, 392, 285, 284, 393, 
	285, 284, 394, 285, 284, 285, 395, 284, 
	285, 396, 284, 285, 397, 284, 285, 398, 
	284, 285, 399, 284, 285, 400, 284, 285, 
	401, 284, 402, 285, 284, 403, 285, 284, 
	285, 404, 284, 285, 388, 388, 284, 285, 
	405, 284, 285, 406, 284, 285, 407, 284, 
	285, 408, 284, 285, 409, 284, 285, 410, 
	284, 285, 411, 284, 285, 412, 284, 285, 
	413, 284, 285, 414, 284, 415, 285, 284, 
	416, 285, 284, 285, 387, 284, 285, 417, 
	284, 418, 285, 419, 420, 421, 284, 422, 
	285, 284, 285, 423, 284, 285, 424, 284, 
	285, 425, 284, 285, 426, 284, 285, 427, 
	284, 285, 387, 284, 285, 428, 284, 285, 
	429, 284, 430, 285, 284, 316, 285, 284, 
	285, 431, 284, 285, 316, 284, 285, 432, 
	284, 285, 433, 284, 285, 434, 284, 285, 
	388, 284, 285, 435, 284, 285, 436, 284, 
	285, 437, 284, 438, 285, 284, 439, 285, 
	284, 285, 388, 284, 285, 440, 284, 285, 
	316, 284, 285, 441, 284, 285, 442, 284, 
	285, 443, 284, 285, 444, 284, 285, 445, 
	284, 285, 446, 284, 285, 447, 284, 448, 
	285, 284, 388, 285, 284, 285, 449, 284, 
	285, 450, 284, 285, 451, 284, 285, 452, 
	284, 285, 453, 284, 285, 454, 284, 285, 
	455, 284, 285, 456, 284, 285, 457, 284, 
	285, 458, 284, 285, 459, 284, 285, 460, 
	284, 285, 316, 284, 461, 462, 0, 463, 
	0, 464, 0, 462, 0, 465, 0, 466, 
	0, 467, 0, 269, 0, 468, 0, 469, 
	0, 470, 0, 471, 0, 472, 0, 473, 
	0, 474, 0, 467, 0, 240, 271, 239, 
	240, 475, 239, 240, 476, 239, 240, 477, 
	239, 240, 478, 239, 240, 479, 239, 240, 
	480, 239, 240, 269, 239, 240, 481, 239, 
	482, 240, 239, 271, 240, 239, 483, 240, 
	239, 484, 240, 239, 485, 240, 239, 486, 
	240, 239, 240, 487, 239, 240, 488, 239, 
	240, 489, 239, 240, 490, 239, 240, 491, 
	239, 240, 492, 239, 240, 493, 239, 494, 
	240, 239, 495, 240, 239, 240, 496, 239, 
	240, 480, 480, 239, 240, 497, 239, 240, 
	498, 239, 240, 499, 239, 240, 500, 239, 
	240, 501, 239, 240, 502, 239, 240, 503, 
	239, 240, 504, 239, 240, 505, 239, 240, 
	506, 239, 507, 240, 239, 508, 240, 239, 
	240, 479, 239, 240, 509, 239, 510, 240, 
	511, 512, 239, 513, 240, 239, 240, 514, 
	239, 240, 515, 239, 240, 516, 239, 240, 
	517, 239, 240, 518, 239, 240, 479, 239, 
	240, 519, 239, 240, 520, 239, 521, 240, 
	239, 271, 240, 239, 240, 522, 239, 240, 
	271, 239, 240, 523, 239, 240, 524, 239, 
	240, 525, 239, 526, 240, 239, 527, 240, 
	239, 240, 480, 239, 240, 528, 239, 240, 
	271, 239, 240, 529, 239, 240, 530, 239, 
	240, 531, 239, 240, 532, 239, 240, 533, 
	239, 240, 534, 239, 240, 535, 239, 536, 
	240, 239, 480, 240, 239, 240, 537, 239, 
	240, 538, 239, 240, 539, 239, 240, 540, 
	239, 240, 541, 239, 240, 542, 239, 240, 
	543, 239, 240, 544, 239, 240, 545, 239, 
	240, 546, 239, 240, 547, 239, 240, 548, 
	239, 240, 271, 239, 549, 0, 550, 0, 
	551, 0, 552, 0, 553, 0, 554, 0, 
	555, 0, 556, 0, 558, 557, 560, 559, 
	560, 561, 562, 563, 564, 565, 562, 561, 
	559, 560, 566, 559, 560, 567, 559, 560, 
	568, 559, 560, 569, 559, 560, 570, 559, 
	560, 571, 559, 560, 572, 559, 560, 573, 
	559, 574, 560, 559, 575, 560, 559, 560, 
	576, 559, 560, 577, 559, 560, 578, 559, 
	560, 579, 559, 560, 580, 559, 560, 570, 
	559, 560, 581, 559, 560, 582, 559, 560, 
	583, 559, 560, 584, 559, 560, 585, 559, 
	560, 586, 559, 560, 587, 559, 588, 560, 
	559, 571, 560, 559, 589, 590, 0, 591, 
	0, 592, 0, 590, 0, 593, 0, 594, 
	0, 595, 0, 197, 0, 596, 0, 597, 
	0, 598, 0, 599, 0, 600, 0, 601, 
	0, 602, 0, 595, 0, 170, 199, 169, 
	170, 603, 169, 170, 604, 169, 170, 605, 
	169, 170, 606, 169, 170, 607, 169, 170, 
	608, 169, 170, 197, 169, 170, 609, 169, 
	610, 170, 169, 199, 170, 169, 170, 611, 
	169, 612, 170, 613, 614, 169, 615, 170, 
	169, 170, 616, 169, 170, 617, 169, 170, 
	618, 169, 170, 619, 169, 170, 620, 169, 
	170, 607, 169, 170, 621, 169, 170, 622, 
	169, 623, 170, 169, 199, 170, 169, 170, 
	624, 169, 170, 199, 169, 170, 625, 169, 
	170, 626, 169, 170, 627, 169, 628, 170, 
	169, 629, 170, 169, 170, 608, 169, 170, 
	630, 169, 170, 199, 169, 170, 631, 169, 
	170, 632, 169, 170, 633, 169, 170, 634, 
	169, 170, 635, 169, 170, 636, 169, 170, 
	637, 169, 638, 170, 169, 608, 170, 169, 
	170, 639, 169, 170, 640, 169, 170, 641, 
	169, 170, 642, 169, 170, 643, 169, 170, 
	644, 169, 170, 645, 169, 170, 646, 169, 
	170, 647, 169, 170, 648, 169, 170, 649, 
	169, 170, 650, 169, 170, 199, 169, 651, 
	100, 99, 652, 100, 99, 653, 100, 99, 
	654, 100, 99, 100, 655, 99, 100, 656, 
	99, 100, 657, 99, 100, 658, 99, 100, 
	659, 99, 100, 660, 99, 100, 661, 99, 
	662, 100, 99, 663, 100, 99, 100, 664, 
	99, 100, 129, 129, 99, 100, 665, 99, 
	100, 666, 99, 100, 667, 99, 100, 668, 
	99, 100, 669, 99, 100, 670, 99, 100, 
	671, 99, 100, 672, 99, 100, 673, 99, 
	100, 674, 99, 675, 100, 99, 676, 100, 
	99, 100, 128, 99, 100, 677, 678, 99, 
	679, 100, 680, 99, 681, 100, 99, 100, 
	682, 99, 100, 683, 99, 100, 684, 99, 
	100, 685, 99, 100, 686, 99, 100, 128, 
	99, 100, 687, 99, 100, 688, 99, 100, 
	689, 99, 100, 129, 99, 690, 100, 99, 
	691, 100, 99, 100, 692, 99, 100, 693, 
	99, 100, 694, 99, 100, 695, 99, 100, 
	129, 99, 100, 696, 99, 100, 697, 99, 
	100, 698, 99, 699, 100, 99, 700, 100, 
	99, 100, 129, 99, 100, 701, 99, 100, 
	702, 99, 100, 703, 99, 100, 704, 99, 
	100, 705, 99, 100, 706, 99, 100, 707, 
	99, 708, 100, 99, 129, 100, 99, 709, 
	0, 1, 0, 710, 0
];

var _lexer_trans_targs = [
	0, 2, 2, 3, 13, 15, 29, 32, 
	35, 54, 86, 89, 125, 139, 179, 206, 
	208, 217, 246, 611, 4, 5, 6, 7, 
	6, 6, 7, 6, 8, 8, 8, 9, 
	8, 8, 8, 9, 10, 11, 12, 2, 
	12, 13, 2, 14, 16, 17, 18, 19, 
	20, 21, 22, 23, 24, 25, 26, 27, 
	28, 613, 30, 31, 2, 14, 31, 2, 
	14, 33, 34, 2, 33, 32, 34, 36, 
	29, 53, 37, 45, 38, 41, 39, 40, 
	42, 43, 44, 46, 47, 48, 49, 50, 
	51, 52, 55, 56, 57, 58, 59, 60, 
	61, 62, 63, 62, 63, 63, 2, 64, 
	78, 548, 563, 576, 596, 602, 65, 66, 
	67, 68, 69, 70, 71, 72, 73, 74, 
	75, 76, 77, 2, 79, 80, 81, 82, 
	83, 84, 85, 2, 2, 3, 13, 15, 
	29, 32, 35, 54, 86, 89, 125, 139, 
	179, 206, 208, 217, 246, 87, 88, 90, 
	91, 92, 93, 94, 95, 96, 97, 98, 
	99, 100, 101, 102, 103, 104, 105, 106, 
	107, 106, 107, 107, 2, 108, 122, 123, 
	493, 500, 503, 518, 524, 526, 535, 109, 
	110, 111, 112, 113, 114, 115, 116, 117, 
	118, 119, 120, 121, 2, 85, 124, 122, 
	492, 476, 484, 126, 127, 128, 129, 130, 
	131, 132, 133, 134, 135, 136, 137, 138, 
	140, 440, 141, 148, 152, 154, 142, 143, 
	144, 145, 146, 147, 149, 150, 151, 153, 
	155, 156, 157, 158, 159, 160, 161, 160, 
	161, 161, 2, 162, 176, 177, 357, 364, 
	367, 382, 395, 410, 416, 418, 427, 163, 
	164, 165, 166, 167, 168, 169, 170, 171, 
	172, 173, 174, 175, 2, 85, 178, 176, 
	356, 340, 348, 180, 181, 182, 183, 184, 
	185, 186, 187, 188, 187, 188, 188, 2, 
	189, 203, 204, 253, 260, 263, 278, 291, 
	310, 316, 318, 327, 190, 191, 192, 193, 
	194, 195, 196, 197, 198, 199, 200, 201, 
	202, 2, 85, 205, 203, 252, 230, 238, 
	207, 209, 210, 211, 212, 213, 214, 215, 
	216, 218, 219, 220, 221, 222, 223, 224, 
	225, 226, 227, 228, 229, 231, 234, 232, 
	233, 235, 236, 237, 239, 240, 241, 242, 
	243, 244, 245, 246, 247, 248, 250, 251, 
	249, 247, 248, 249, 247, 250, 251, 3, 
	13, 15, 29, 32, 35, 54, 86, 89, 
	125, 139, 179, 206, 208, 217, 246, 254, 
	255, 256, 257, 258, 259, 261, 262, 264, 
	265, 266, 267, 268, 269, 270, 271, 272, 
	273, 274, 275, 276, 277, 279, 280, 281, 
	282, 283, 284, 285, 286, 287, 288, 289, 
	290, 292, 293, 300, 304, 306, 294, 295, 
	296, 297, 298, 299, 301, 302, 303, 305, 
	307, 308, 309, 311, 312, 313, 314, 315, 
	317, 319, 320, 321, 322, 323, 324, 325, 
	326, 328, 329, 330, 331, 332, 333, 334, 
	335, 336, 337, 338, 339, 341, 344, 342, 
	343, 345, 346, 347, 349, 350, 351, 352, 
	353, 354, 355, 358, 359, 360, 361, 362, 
	363, 365, 366, 368, 369, 370, 371, 372, 
	373, 374, 375, 376, 377, 378, 379, 380, 
	381, 383, 384, 385, 386, 387, 388, 389, 
	390, 391, 392, 393, 394, 396, 397, 404, 
	408, 398, 399, 400, 401, 402, 403, 405, 
	406, 407, 409, 411, 412, 413, 414, 415, 
	417, 419, 420, 421, 422, 423, 424, 425, 
	426, 428, 429, 430, 431, 432, 433, 434, 
	435, 436, 437, 438, 439, 441, 442, 443, 
	444, 445, 446, 447, 448, 449, 450, 449, 
	450, 450, 2, 451, 458, 467, 452, 453, 
	454, 455, 456, 457, 85, 459, 460, 461, 
	462, 463, 464, 465, 466, 468, 469, 470, 
	471, 472, 473, 474, 475, 477, 480, 478, 
	479, 481, 482, 483, 485, 486, 487, 488, 
	489, 490, 491, 494, 495, 496, 497, 498, 
	499, 501, 502, 504, 505, 512, 516, 506, 
	507, 508, 509, 510, 511, 513, 514, 515, 
	517, 519, 520, 521, 522, 523, 525, 527, 
	528, 529, 530, 531, 532, 533, 534, 536, 
	537, 538, 539, 540, 541, 542, 543, 544, 
	545, 546, 547, 549, 550, 551, 552, 553, 
	554, 555, 556, 557, 558, 559, 560, 561, 
	562, 564, 565, 566, 567, 568, 569, 570, 
	571, 572, 573, 574, 575, 577, 589, 578, 
	585, 579, 580, 581, 582, 583, 584, 586, 
	587, 588, 590, 591, 592, 593, 594, 595, 
	597, 598, 599, 600, 601, 603, 604, 605, 
	606, 607, 608, 609, 610, 612, 0
];

var _lexer_trans_actions = [
	43, 0, 54, 3, 1, 0, 29, 1, 
	29, 29, 29, 29, 29, 29, 29, 29, 
	29, 29, 35, 0, 0, 0, 7, 139, 
	48, 0, 102, 9, 5, 45, 134, 45, 
	0, 33, 122, 33, 33, 0, 11, 106, 
	0, 0, 114, 25, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 57, 149, 126, 0, 110, 
	23, 0, 27, 118, 27, 51, 0, 0, 
	0, 0, 57, 57, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 57, 144, 0, 54, 0, 69, 33, 
	84, 84, 84, 84, 84, 84, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 13, 0, 0, 0, 0, 
	0, 0, 13, 31, 130, 60, 57, 31, 
	63, 57, 63, 63, 63, 63, 63, 63, 
	63, 63, 63, 63, 66, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 57, 
	144, 0, 54, 0, 78, 33, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 19, 19, 19, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 57, 144, 0, 
	54, 0, 72, 33, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 15, 15, 15, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 57, 144, 0, 54, 0, 75, 
	33, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 17, 17, 17, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 37, 37, 54, 
	37, 87, 0, 0, 39, 0, 0, 93, 
	90, 41, 96, 90, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 99, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 57, 144, 0, 
	54, 0, 81, 84, 84, 84, 0, 0, 
	0, 0, 0, 0, 21, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0
];

var _lexer_eof_actions = [
	0, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43
];

var lexer_start = 1;
var lexer_first_final = 613;
var lexer_error = 0;

var lexer_en_main = 1;


/* line 129 "ragel/i18n/sk.js.rl" */

/* line 130 "ragel/i18n/sk.js.rl" */

/* line 131 "ragel/i18n/sk.js.rl" */

/* line 132 "ragel/i18n/sk.js.rl" */

var Lexer = function(listener) {
  // Check that listener has the required functions
  var events = ['comment', 'tag', 'feature', 'background', 'scenario', 'scenario_outline', 'examples', 'step', 'doc_string', 'row', 'eof'];
  for(var i=0, len=events.length; i<len; i++) {
    var event = events[i];
    if(typeof listener[event] != 'function') {
      throw new Error("Error. No " + event + " function exists on " + JSON.stringify(listener));
    }
  }
  this.listener = listener;
};

Lexer.prototype.scan = function(data) {
  var ending = "\n%_FEATURE_END_%";
  if(typeof data == 'string') {
    data = this.stringToBytes(data + ending);
  } else if(typeof Buffer != 'undefined' && Buffer.isBuffer(data)) {
    // Node.js
    var buf = new Buffer(data.length + ending.length);
    data.copy(buf, 0, 0);
    new Buffer(ending).copy(buf, data.length, 0);
    data = buf;
  }
  var eof = pe = data.length;
  var p = 0;

  this.line_number = 1;
  this.last_newline = 0;
  var signedCharValue=function(v){return v > 127 ? v-256 : v; };

  
/* line 1077 "js/lib/gherkin/lexer/sk.js" */
{
	  this.cs = lexer_start;
} /* JSCodeGen::writeInit */

/* line 164 "ragel/i18n/sk.js.rl" */
  
/* line 1084 "js/lib/gherkin/lexer/sk.js" */
{
	var _klen, _trans, _keys, _ps, _widec, _acts, _nacts;
	var _goto_level, _resume, _eof_trans, _again, _test_eof;
	var _out;
	_klen = _trans = _keys = _acts = _nacts = null;
	_goto_level = 0;
	_resume = 10;
	_eof_trans = 15;
	_again = 20;
	_test_eof = 30;
	_out = 40;
	while (true) {
	_trigger_goto = false;
	if (_goto_level <= 0) {
	if (p == pe) {
		_goto_level = _test_eof;
		continue;
	}
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	}
	if (_goto_level <= _resume) {
	_keys = _lexer_key_offsets[ this.cs];
	_trans = _lexer_index_offsets[ this.cs];
	_klen = _lexer_single_lengths[ this.cs];
	_break_match = false;
	
	do {
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + _klen - 1;

	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + ( (_upper - _lower) >> 1 );

	        if (( signedCharValue(data[p])) < _lexer_trans_keys[_mid]) {
	           _upper = _mid - 1;
	        } else if (( signedCharValue(data[p])) > _lexer_trans_keys[_mid]) {
	           _lower = _mid + 1;
	        } else {
	           _trans += (_mid - _keys);
	           _break_match = true;
	           break;
	        };
	     } /* while */
	     if (_break_match) { break; }
	     _keys += _klen;
	     _trans += _klen;
	  }
	  _klen = _lexer_range_lengths[ this.cs];
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + (_klen << 1) - 2;
	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + (((_upper-_lower) >> 1) & ~1);
	        if (( signedCharValue(data[p])) < _lexer_trans_keys[_mid]) {
	          _upper = _mid - 2;
	         } else if (( signedCharValue(data[p])) > _lexer_trans_keys[_mid+1]) {
	          _lower = _mid + 2;
	        } else {
	          _trans += ((_mid - _keys) >> 1);
	          _break_match = true;
	          break;
	        }
	     } /* while */
	     if (_break_match) { break; }
	     _trans += _klen
	  }
	} while (false);
	_trans = _lexer_indicies[_trans];
	 this.cs = _lexer_trans_targs[_trans];
	if (_lexer_trans_actions[_trans] != 0) {
		_acts = _lexer_trans_actions[_trans];
		_nacts = _lexer_actions[_acts];
		_acts += 1;
		while (_nacts > 0) {
			_nacts -= 1;
			_acts += 1;
			switch (_lexer_actions[_acts - 1]) {
case 0:
/* line 6 "ragel/i18n/sk.js.rl" */

    this.content_start = p;
    this.current_line = this.line_number;
    this.start_col = p - this.last_newline - (this.keyword+':').length;
  		break;
case 1:
/* line 12 "ragel/i18n/sk.js.rl" */

    this.current_line = this.line_number;
    this.start_col = p - this.last_newline;
  		break;
case 2:
/* line 17 "ragel/i18n/sk.js.rl" */

    this.content_start = p;
  		break;
case 3:
/* line 21 "ragel/i18n/sk.js.rl" */

    this.docstring_content_type_start = p;
  		break;
case 4:
/* line 25 "ragel/i18n/sk.js.rl" */

    this.docstring_content_type_end = p;
  		break;
case 5:
/* line 29 "ragel/i18n/sk.js.rl" */

    var con = this.unindent(
      this.start_col, 
      this.bytesToString(data.slice(this.content_start, this.next_keyword_start-1)).replace(/(\r?\n)?([\t ])*$/, '').replace(/\\\"\\\"\\\"/mg, '"""')
    );
    var con_type = this.bytesToString(data.slice(this.docstring_content_type_start, this.docstring_content_type_end)).trim();
    this.listener.doc_string(con_type, con, this.current_line); 
  		break;
case 6:
/* line 38 "ragel/i18n/sk.js.rl" */

    p = this.store_keyword_content('feature', data, p, eof);
  		break;
case 7:
/* line 42 "ragel/i18n/sk.js.rl" */

    p = this.store_keyword_content('background', data, p, eof);
  		break;
case 8:
/* line 46 "ragel/i18n/sk.js.rl" */

    p = this.store_keyword_content('scenario', data, p, eof);
  		break;
case 9:
/* line 50 "ragel/i18n/sk.js.rl" */

    p = this.store_keyword_content('scenario_outline', data, p, eof);
  		break;
case 10:
/* line 54 "ragel/i18n/sk.js.rl" */

    p = this.store_keyword_content('examples', data, p, eof);
  		break;
case 11:
/* line 58 "ragel/i18n/sk.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.step(this.keyword, con, this.current_line);
  		break;
case 12:
/* line 63 "ragel/i18n/sk.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.comment(con, this.line_number);
    this.keyword_start = null;
  		break;
case 13:
/* line 69 "ragel/i18n/sk.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.tag(con, this.line_number);
    this.keyword_start = null;
  		break;
case 14:
/* line 75 "ragel/i18n/sk.js.rl" */

    this.line_number++;
  		break;
case 15:
/* line 79 "ragel/i18n/sk.js.rl" */

    this.last_newline = p + 1;
  		break;
case 16:
/* line 83 "ragel/i18n/sk.js.rl" */

    this.keyword_start = this.keyword_start || p;
  		break;
case 17:
/* line 87 "ragel/i18n/sk.js.rl" */

    this.keyword = this.bytesToString(data.slice(this.keyword_start, p)).replace(/:$/, '');
    this.keyword_start = null;
  		break;
case 18:
/* line 92 "ragel/i18n/sk.js.rl" */

    this.next_keyword_start = p;
  		break;
case 19:
/* line 96 "ragel/i18n/sk.js.rl" */

    p = p - 1;
    current_row = [];
    this.current_line = this.line_number;
  		break;
case 20:
/* line 102 "ragel/i18n/sk.js.rl" */

    this.content_start = p;
  		break;
case 21:
/* line 106 "ragel/i18n/sk.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    current_row.push(con.replace(/\\\|/, "|").replace(/\\n/, "\n").replace(/\\\\/, "\\"));
  		break;
case 22:
/* line 111 "ragel/i18n/sk.js.rl" */

    this.listener.row(current_row, this.current_line);
  		break;
case 23:
/* line 115 "ragel/i18n/sk.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw new Error("Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.");
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 1311 "js/lib/gherkin/lexer/sk.js" */
			} /* action switch */
		}
	}
	if (_trigger_goto) {
		continue;
	}
	}
	if (_goto_level <= _again) {
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	p += 1;
	if (p != pe) {
		_goto_level = _resume;
		continue;
	}
	}
	if (_goto_level <= _test_eof) {
	if (p == eof) {
	__acts = _lexer_eof_actions[ this.cs];
	__nacts =  _lexer_actions[__acts];
	__acts += 1;
	while (__nacts > 0) {
		__nacts -= 1;
		__acts += 1;
		switch (_lexer_actions[__acts - 1]) {
case 23:
/* line 115 "ragel/i18n/sk.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw new Error("Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.");
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 1350 "js/lib/gherkin/lexer/sk.js" */
		} /* eof action switch */
	}
	if (_trigger_goto) {
		continue;
	}
}
	}
	if (_goto_level <= _out) {
		break;
	}
	}
	}

/* line 165 "ragel/i18n/sk.js.rl" */
};


/*
 * Decode utf-8 byte sequence to string.
 */
var decodeUtf8 = function(bytes) {
  var result = "";
  var i = 0;
  var wc;
  var c;

  while (i < bytes.length) {
    /* parse as UTF-8 lead byte */
    wc = bytes[i++];
    if (wc < 0x80) {
      count = 0;
    } else if (wc < 0xC2 || wc >= 0xF8) {
      throw new Error("input is not a valid UTF-8 lead octet");
    } else if (wc < 0xE0) {
      count = 1;
      wc = (wc & 0x1F) << 6;
    } else if (wc < 0xF0) {
      count = 2;
      wc = (wc & 0x0F) << 12;
    } else /* wc < 0xF8 */ {
      count = 3;
      wc = (wc & 0x07) << 18;
    }

    /* parse trail bytes, if any */
    while (count) {
      if (!(i < bytes.length)) {
        throw new Error("short read");
      }
      if ((c = bytes[i++] ^ 0x80) > 0x3F) {
        throw new Error("input is not a valid UTF-8 trail octet");
      }
      wc |= c << (6 * --count);
      if (wc < (1 << (5 * count + 6))) {
        throw new Error("invalid non-minimal encoded input");
      }
    }

    /* handle conversion to UTF-16 if needed */
    if (wc > 0xFFFF) {
      wc -= 0x10000;
      result += String.fromCharCode(0xD800 + (wc >> 10));
      wc = 0xDC00 + (wc & 0x3FF);
    }
    result += String.fromCharCode(wc);
  }

  return result;
};

/*
 * Encode string to an array of bytes using utf8 encoding.
 *
 * Javascript internally stores character data as utf16 (like java).
 * String.charCodeAt() does *not* produce unicode points, but simply
 * reflects this internal representation. Thus, it is necessary
 * to first decode the utf-16 representation before encoding to
 * utf-8.
 */
var encodeUtf8 = function(string) {
  var bytes = [];
  var i = 0;
  var j = 0;
  var wc;

  while (i < string.length) {
    wc = string.charCodeAt(i++);
    if (wc >= 0xD800 && wc <= 0xDBFF && i < string.length && string.charCodeAt(i) >= 0xDC00 && string.charCodeAt(i) <= 0xDFFF) {
      /* decode UTF-16 */
      wc = 0x10000 + ((wc & 0x3FF) << 10) + (string.charCodeAt(i++) & 0x3FF);
    }

    /* emit lead byte */
    if (wc < 0x80) {
      bytes[j++] = wc;
      count = 0;
    } else if (wc < 0x800) {
      bytes[j++] = 0xC0 | (wc >> 6);
      count = 1;
    } else if (wc < 0x10000) {
      bytes[j++] = 0xE0 | (wc >> 12);
      count = 2;
    } else {
      /* SMP: 21-bit Unicode */
      bytes[j++] = 0xF0 | (wc >> 18);
      count = 3;
    }

    /* emit trail bytes, if any */
    while (count) {
      bytes[j++] = 0x80 | ((wc >> (6 * --count)) & 0x3F);
    }
  }

  return bytes;

};

Lexer.prototype.bytesToString = function(bytes) {
  if(typeof bytes.write == 'function') {
    // Node.js
    return bytes.toString('utf-8');
  }
  return decodeUtf8(bytes);
};

Lexer.prototype.stringToBytes = function(string) {
  return encodeUtf8(string);
};

Lexer.prototype.unindent = function(startcol, text) {
  startcol = startcol || 0;
  return text.replace(new RegExp('^[\t ]{0,' + startcol + '}', 'gm'), ''); 
};

Lexer.prototype.store_keyword_content = function(event, data, p, eof) {
  var end_point = (!this.next_keyword_start || (p == eof)) ? p : this.next_keyword_start;
  var content = this.unindent(this.start_col + 2, this.bytesToString(data.slice(this.content_start, end_point))).replace(/\s+$/,"");
  var content_lines = content.split("\n")
  var name = content_lines.shift() || "";
  name = name.trim();
  var description = content_lines.join("\n");
  this.listener[event](this.keyword, name, description, this.current_line);
  var nks = this.next_keyword_start;
  this.next_keyword_start = null;
  return nks ? nks - 1 : p;
};

Lexer.prototype.current_line_content = function(data, p) {
  var rest = Array.prototype.slice.call(data,this.last_newline, -1);
  var end = rest.indexOf(10) || -1;
  return this.bytesToString(rest.slice(0, end)).trim();
};

// Node.js export
if(typeof module !== 'undefined') {
  module.exports = Lexer;
}
// Require.js export
if (typeof define !== 'undefined') {
  if(define.amd) {
    define('gherkin/lexer/sk', [], function() {
      return Lexer;
    });
  } else {
    define('gherkin/lexer/sk', function(require, exports, module) {
      exports.Lexer = Lexer;
    });
  }
}

})();

}).call(this,require("buffer").Buffer)

},{"buffer":69}],229:[function(require,module,exports){
(function (Buffer){

/* line 1 "ragel/i18n/sr_cyrl.js.rl" */
;(function() {


/* line 126 "ragel/i18n/sr_cyrl.js.rl" */



/* line 11 "js/lib/gherkin/lexer/sr_cyrl.js" */
var _lexer_actions = [
	0, 1, 0, 1, 1, 1, 2, 1, 
	3, 1, 4, 1, 5, 1, 6, 1, 
	7, 1, 8, 1, 9, 1, 10, 1, 
	11, 1, 12, 1, 13, 1, 16, 1, 
	17, 1, 18, 1, 19, 1, 20, 1, 
	21, 1, 22, 1, 23, 2, 2, 18, 
	2, 3, 4, 2, 13, 0, 2, 14, 
	15, 2, 17, 0, 2, 17, 1, 2, 
	17, 16, 2, 17, 19, 2, 18, 6, 
	2, 18, 7, 2, 18, 8, 2, 18, 
	9, 2, 18, 10, 2, 18, 16, 2, 
	20, 21, 2, 22, 0, 2, 22, 1, 
	2, 22, 16, 2, 22, 19, 3, 4, 
	14, 15, 3, 5, 14, 15, 3, 11, 
	14, 15, 3, 12, 14, 15, 3, 13, 
	14, 15, 3, 14, 15, 18, 3, 17, 
	0, 11, 3, 17, 14, 15, 4, 2, 
	14, 15, 18, 4, 3, 4, 14, 15, 
	4, 17, 0, 14, 15, 5, 17, 0, 
	11, 14, 15
];

var _lexer_key_offsets = [
	0, 0, 12, 21, 22, 23, 24, 25, 
	26, 28, 30, 41, 42, 43, 45, 47, 
	52, 57, 62, 67, 71, 75, 77, 78, 
	79, 80, 81, 82, 83, 84, 85, 86, 
	87, 88, 89, 90, 91, 92, 97, 104, 
	109, 113, 119, 122, 124, 130, 141, 142, 
	143, 144, 145, 146, 147, 148, 149, 150, 
	153, 154, 156, 157, 158, 160, 161, 162, 
	163, 164, 166, 167, 168, 169, 170, 171, 
	172, 173, 174, 175, 176, 177, 186, 196, 
	198, 200, 202, 204, 206, 217, 219, 221, 
	223, 225, 227, 229, 231, 233, 235, 239, 
	241, 244, 246, 248, 251, 253, 255, 257, 
	259, 261, 263, 265, 267, 269, 271, 273, 
	275, 277, 279, 281, 283, 285, 287, 289, 
	291, 293, 295, 297, 299, 301, 303, 306, 
	308, 310, 312, 314, 316, 318, 320, 322, 
	324, 326, 328, 330, 332, 334, 336, 338, 
	340, 342, 344, 346, 348, 350, 352, 354, 
	356, 359, 361, 363, 365, 367, 369, 372, 
	374, 376, 378, 380, 382, 384, 386, 388, 
	390, 392, 394, 396, 398, 400, 402, 404, 
	406, 408, 410, 412, 414, 416, 418, 420, 
	422, 424, 426, 428, 430, 432, 434, 436, 
	438, 440, 442, 444, 446, 448, 450, 452, 
	454, 456, 458, 460, 462, 464, 466, 468, 
	470, 472, 474, 476, 478, 480, 482, 484, 
	486, 488, 490, 492, 494, 496, 498, 500, 
	502, 504, 506, 508, 510, 512, 514, 516, 
	518, 520, 522, 523, 524, 525, 526, 527, 
	528, 529, 530, 531, 540, 550, 552, 554, 
	556, 558, 560, 562, 564, 566, 568, 570, 
	572, 574, 576, 578, 582, 584, 586, 588, 
	590, 593, 595, 597, 599, 601, 603, 605, 
	607, 609, 611, 613, 615, 617, 619, 621, 
	623, 625, 627, 629, 632, 634, 636, 638, 
	640, 642, 644, 646, 648, 650, 652, 654, 
	656, 658, 660, 662, 664, 666, 668, 670, 
	672, 674, 676, 678, 680, 682, 684, 686, 
	688, 690, 692, 694, 696, 698, 700, 702, 
	704, 706, 708, 710, 712, 714, 716, 718, 
	720, 722, 724, 726, 728, 730, 732, 734, 
	736, 738, 740, 742, 744, 746, 748, 750, 
	752, 754, 756, 758, 760, 762, 764, 766, 
	768, 770, 772, 774, 775, 776, 777, 778, 
	779, 780, 781, 782, 783, 784, 785, 786, 
	787, 788, 789, 790, 791, 792, 793, 801, 
	808, 810, 812, 814, 816, 818, 821, 823, 
	825, 827, 829, 831, 833, 835, 837, 839, 
	841, 843, 845, 847, 849, 851, 853, 855, 
	857, 859, 861, 863, 865, 867, 869, 871, 
	873, 875, 877, 880, 882, 884, 886, 888, 
	890, 892, 894, 896, 898, 900, 902, 904, 
	907, 909, 911, 913, 915, 917, 919, 921, 
	923, 925, 927, 929, 931, 933, 935, 937, 
	939, 942, 944, 947, 949, 951, 953, 955, 
	957, 960, 962, 964, 966, 968, 970, 972, 
	974, 976, 978, 980, 982, 984, 986, 988, 
	990, 992, 994, 996, 998, 1000, 1002, 1004, 
	1006, 1008, 1010, 1012, 1014, 1016, 1018, 1020, 
	1022, 1024, 1026, 1028, 1030, 1032, 1034, 1036, 
	1038, 1040, 1042, 1045, 1047, 1049, 1051, 1053, 
	1055, 1057, 1059, 1061, 1063, 1065, 1067, 1069, 
	1071, 1073, 1075, 1077, 1079, 1081, 1083, 1085, 
	1087, 1089, 1091, 1093, 1095, 1097, 1099, 1101, 
	1103, 1105, 1107, 1109, 1111, 1113, 1115, 1117, 
	1118, 1119, 1120, 1121, 1122, 1123, 1125, 1126, 
	1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 
	1135, 1136, 1137, 1138, 1139, 1141, 1142, 1143, 
	1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 
	1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 
	1160, 1161, 1163, 1164, 1165, 1166, 1167, 1174, 
	1178, 1180, 1182, 1184, 1186, 1188, 1190, 1192, 
	1194, 1196, 1198, 1200, 1202, 1204, 1206, 1208, 
	1210, 1212, 1214, 1216, 1218, 1220, 1222, 1224, 
	1226, 1228, 1230, 1232, 1234, 1236, 1238, 1240, 
	1242, 1244, 1246, 1248, 1250, 1252, 1254, 1256, 
	1258, 1260, 1262, 1264, 1266, 1268, 1270, 1272, 
	1273, 1274, 1283, 1293, 1295, 1297, 1299, 1301, 
	1303, 1305, 1307, 1309, 1311, 1313, 1315, 1317, 
	1319, 1321, 1325, 1327, 1330, 1332, 1334, 1337, 
	1339, 1341, 1343, 1345, 1348, 1350, 1352, 1354, 
	1356, 1358, 1360, 1362, 1364, 1366, 1368, 1370, 
	1372, 1374, 1376, 1378, 1380, 1382, 1384, 1386, 
	1388, 1390, 1392, 1394, 1396, 1398, 1401, 1403, 
	1405, 1407, 1409, 1411, 1413, 1416, 1418, 1420, 
	1422, 1424, 1426, 1428, 1430, 1432, 1434, 1436, 
	1438, 1440, 1443, 1445, 1447, 1449, 1451, 1453, 
	1455, 1457, 1459, 1461, 1463, 1465, 1467, 1469, 
	1471, 1473, 1475, 1478, 1480, 1482, 1484, 1486, 
	1488, 1491, 1493, 1495, 1497, 1499, 1501, 1503, 
	1505, 1507, 1509, 1511, 1513, 1515, 1517, 1519, 
	1521, 1523, 1525, 1527, 1529, 1531, 1533, 1535, 
	1537, 1539, 1541, 1543, 1545, 1547, 1549, 1551, 
	1553, 1555, 1557, 1559, 1561, 1563, 1565, 1567, 
	1569, 1571, 1573, 1575, 1577, 1579, 1581, 1583, 
	1585, 1587, 1589, 1591, 1593, 1595, 1597, 1599, 
	1601, 1603, 1605, 1607, 1609, 1611, 1613, 1615, 
	1617, 1619, 1621, 1623, 1625, 1627, 1629, 1631, 
	1633, 1635, 1637, 1639, 1641, 1643, 1644, 1645, 
	1646, 1647, 1648, 1649, 1650, 1652, 1653, 1654, 
	1655, 1656, 1657, 1658, 1659, 1660, 1661, 1662, 
	1663, 1664, 1665, 1666, 1667, 1668, 1669, 1670, 
	1671, 1672, 1673, 1674, 1675, 1676, 1677, 1678, 
	1679, 1680, 1681, 1682, 1683, 1684, 1685, 1686, 
	1687, 1688, 1689, 1690, 1691, 1692, 1693, 1695, 
	1696, 1697, 1698, 1699, 1700, 1701, 1702, 1703, 
	1704, 1705, 1706, 1707, 1708, 1709, 1710, 1711, 
	1712, 1713, 1714, 1715, 1716, 1717, 1718, 1719
];

var _lexer_trans_keys = [
	-48, 10, 32, 34, 35, 37, 42, 64, 
	124, 239, 9, 13, -112, -105, -104, -102, 
	-100, -98, -97, -95, -92, -48, -69, -48, 
	-72, 32, 10, 13, 10, 13, -48, 10, 
	32, 34, 35, 37, 42, 64, 124, 9, 
	13, 34, 34, 10, 13, 10, 13, 10, 
	32, 34, 9, 13, 10, 32, 34, 9, 
	13, 10, 32, 34, 9, 13, 10, 32, 
	34, 9, 13, 10, 32, 9, 13, 10, 
	32, 9, 13, 10, 13, 10, 95, 70, 
	69, 65, 84, 85, 82, 69, 95, 69, 
	78, 68, 95, 37, 13, 32, 64, 9, 
	10, 9, 10, 13, 32, 64, 11, 12, 
	10, 32, 64, 9, 13, 32, 124, 9, 
	13, 10, 32, 92, 124, 9, 13, 10, 
	92, 124, 10, 92, 10, 32, 92, 124, 
	9, 13, -48, 10, 32, 34, 35, 37, 
	42, 64, 124, 9, 13, -48, -80, -48, 
	-76, -48, -80, -47, -126, -48, -75, -72, 
	-66, -48, -80, -66, -48, -76, -48, 32, 
	-80, -48, -67, -47, -126, -122, -48, -75, 
	-48, -70, -47, -127, -47, -126, 58, 10, 
	10, -48, 10, 32, 35, 37, 42, 64, 
	9, 13, -112, -105, -104, -102, -100, -98, 
	-97, -95, -92, 10, -48, 10, -69, 10, 
	-48, 10, -72, 10, 10, 32, -48, 10, 
	32, 34, 35, 37, 42, 64, 124, 9, 
	13, -48, 10, -80, 10, -48, 10, -76, 
	10, -48, 10, -80, 10, -47, 10, -126, 
	10, -48, 10, -75, -72, -66, 10, -48, 
	10, -80, -66, 10, -48, 10, -76, 10, 
	-48, 10, 32, -80, 10, -48, 10, -67, 
	10, -47, 10, -122, 10, -48, 10, -75, 
	10, -48, 10, -65, 10, -47, 10, -126, 
	10, 10, 58, -48, 10, -66, 10, -48, 
	10, -77, 10, -47, 10, -125, 10, -47, 
	10, -101, 10, -48, 10, -67, 10, -48, 
	10, -66, 10, -47, 10, -127, 10, -48, 
	-47, 10, -67, 10, -48, 10, -76, 10, 
	-48, 10, -127, 10, -48, 10, -66, 10, 
	-48, 10, -79, 10, -48, 10, -72, 10, 
	-48, 10, -67, 10, -48, 10, -80, 10, 
	-47, 10, -128, 10, -48, 10, -72, 10, 
	-48, 10, -68, 10, -48, 10, -75, 10, 
	-47, 10, -128, 10, -48, -47, 10, -70, 
	10, -48, 10, -72, 10, -47, 10, -122, 
	10, -126, -122, 10, -47, 10, -128, 10, 
	-47, 10, -125, 10, -48, 10, -70, 10, 
	-47, 10, -126, 10, -47, 10, -125, 10, 
	-47, 10, -128, 10, -48, 10, -80, 10, 
	10, 32, -47, 10, -127, 10, -47, 10, 
	-122, 10, -48, 10, -75, 10, -48, 10, 
	-67, 10, -48, 10, -80, 10, -47, 10, 
	-128, 10, -48, 10, -72, 10, -47, 10, 
	-104, 10, -48, 10, -75, 10, -48, 10, 
	-67, 10, -48, 10, -80, 10, -47, 10, 
	-128, 10, -48, 10, -72, 10, -48, 10, 
	-66, 10, -47, 10, -125, 10, -48, 10, 
	-67, 10, -48, 10, -70, 10, -47, 10, 
	-122, 10, -48, 10, -72, 10, -48, 10, 
	-66, 10, -48, 10, -67, 10, -48, 10, 
	-80, 10, -48, 10, -69, 10, 10, 95, 
	10, 70, 10, 69, 10, 65, 10, 84, 
	10, 85, 10, 82, 10, 69, 10, 95, 
	10, 69, 10, 78, 10, 68, 10, 95, 
	10, 37, -48, -75, -48, -65, -47, -126, 
	58, 10, 10, -48, 10, 32, 35, 37, 
	42, 64, 9, 13, -112, -105, -104, -102, 
	-100, -98, -97, -95, -92, 10, -48, 10, 
	-69, 10, -48, 10, -72, 10, 10, 32, 
	-48, 10, -80, 10, -48, 10, -76, 10, 
	-48, 10, -80, 10, -47, 10, -126, 10, 
	-48, 10, -75, -72, -66, 10, -48, 10, 
	-80, 10, -48, 10, -76, 10, -48, 10, 
	32, -80, 10, -48, 10, -66, 10, -48, 
	10, -77, 10, -47, 10, -125, 10, -47, 
	10, -101, 10, -48, 10, -67, 10, -48, 
	10, -66, 10, -47, 10, -127, 10, -47, 
	10, -126, 10, 10, 58, -48, -47, 10, 
	-67, 10, -48, 10, -76, 10, -48, 10, 
	-127, 10, -48, 10, -66, 10, -48, 10, 
	-79, 10, -48, 10, -72, 10, -48, 10, 
	-67, 10, -48, 10, -80, 10, -47, 10, 
	-128, 10, -48, 10, -72, 10, -48, 10, 
	-68, 10, -48, 10, -75, 10, -47, 10, 
	-128, 10, -47, 10, -122, 10, -48, 10, 
	-75, 10, -48, 10, -67, 10, -48, 10, 
	-80, 10, -47, 10, -128, 10, -48, 10, 
	-72, 10, -48, 10, -66, 10, -47, 10, 
	-125, 10, -48, 10, -67, 10, -48, 10, 
	-70, 10, -47, 10, -122, 10, -48, 10, 
	-72, 10, -48, 10, -66, 10, -48, 10, 
	-67, 10, -48, 10, -80, 10, -48, 10, 
	-69, 10, 10, 95, 10, 70, 10, 69, 
	10, 65, 10, 84, 10, 85, 10, 82, 
	10, 69, 10, 95, 10, 69, 10, 78, 
	10, 68, 10, 95, 10, 37, -48, -66, 
	-48, -77, -47, -125, -47, -101, -48, -67, 
	-48, -66, -47, -127, -47, -126, 58, 10, 
	10, -48, 10, 32, 35, 37, 64, 9, 
	13, -102, -100, -98, -97, -95, -92, 10, 
	-48, 10, -66, 10, -48, 10, -67, 10, 
	-47, 10, -126, -122, 10, -48, 10, -75, 
	10, -48, 10, -70, 10, -47, 10, -127, 
	10, -47, 10, -126, 10, 10, 58, -48, 
	10, -75, 10, -48, 10, -65, 10, -48, 
	10, -66, 10, -48, 10, -77, 10, -47, 
	10, -125, 10, -47, 10, -101, 10, -48, 
	10, -67, 10, -48, 10, -66, 10, -47, 
	10, -127, 10, -48, 10, -67, -66, 10, 
	-48, 10, -66, 10, -48, 10, -78, 10, 
	-48, 10, -80, 10, -48, 10, -79, 10, 
	-48, 10, -72, 10, -48, 10, -67, 10, 
	-48, -47, 10, -66, 10, -48, 10, -73, 
	10, -48, 10, -80, 10, -48, 10, -76, 
	10, -128, 10, -48, 10, -72, 10, -48, 
	10, -68, 10, -48, 10, -75, 10, -47, 
	10, -128, 10, -48, 10, 58, -72, 10, 
	-48, -47, 10, -70, 10, -48, 10, -72, 
	10, -47, 10, -122, 10, -126, -122, 10, 
	-47, 10, -128, 10, -47, 10, -125, 10, 
	-48, 10, -70, 10, -47, 10, -126, 10, 
	-47, 10, -125, 10, -47, 10, -128, 10, 
	-48, 10, -80, 10, 10, 32, -47, 10, 
	-127, 10, -47, 10, -122, 10, -48, 10, 
	-75, 10, -48, 10, -67, 10, -48, 10, 
	-80, 10, -47, 10, -128, 10, -48, 10, 
	-72, 10, -47, 10, -104, 10, -48, 10, 
	-75, 10, -48, 10, -67, 10, -48, 10, 
	-80, 10, -47, 10, -128, 10, -48, 10, 
	-72, 10, -48, -47, 10, -66, 10, -104, 
	10, -48, 10, -47, 10, -125, 10, -48, 
	10, -67, 10, -48, 10, -70, 10, -47, 
	10, -122, 10, -48, 10, -72, 10, -48, 
	10, -66, 10, -48, 10, -67, 10, -48, 
	10, -80, 10, -48, 10, -69, 10, 10, 
	95, 10, 70, 10, 69, 10, 65, 10, 
	84, 10, 85, 10, 82, 10, 69, 10, 
	95, 10, 69, 10, 78, 10, 68, 10, 
	95, 10, 37, -48, -47, -67, -48, -76, 
	-48, -127, -48, -67, -66, -48, -66, -48, 
	-78, -48, -80, -48, -79, -48, -72, -48, 
	-67, -48, -80, -48, -47, -66, -48, -73, 
	-48, -80, -48, -76, -48, -72, -48, -67, 
	-128, -48, -72, -48, -68, -48, -75, -47, 
	-128, -48, 58, -72, 58, 10, 10, -48, 
	10, 32, 35, 124, 9, 13, -100, -98, 
	-92, 10, -48, 10, -66, 10, -48, 10, 
	-77, 10, -47, 10, -125, 10, -47, 10, 
	-101, 10, -48, 10, -67, 10, -48, 10, 
	-66, 10, -47, 10, -127, 10, -47, 10, 
	-126, 10, 10, 58, -47, 10, -127, 10, 
	-48, 10, -66, 10, -48, 10, -79, 10, 
	-48, 10, -72, 10, -48, 10, -67, 10, 
	-48, 10, -80, 10, -47, 10, -125, 10, 
	-48, 10, -67, 10, -48, 10, -70, 10, 
	-47, 10, -122, 10, -48, 10, -72, 10, 
	-48, 10, -66, 10, -48, 10, -67, 10, 
	-48, 10, -80, 10, -48, 10, -69, 10, 
	10, 10, -48, 10, 32, 35, 37, 42, 
	64, 9, 13, -112, -105, -104, -102, -100, 
	-98, -97, -95, -92, 10, -48, 10, -69, 
	10, -48, 10, -72, 10, 10, 32, -48, 
	10, -80, 10, -48, 10, -76, 10, -48, 
	10, -80, 10, -47, 10, -126, 10, -48, 
	10, -75, -72, -66, 10, -48, 10, -80, 
	-66, 10, -48, 10, -76, 10, -48, 10, 
	32, -80, 10, -48, 10, -67, 10, -47, 
	10, -126, -122, 10, -48, 10, -75, 10, 
	-48, 10, -70, 10, -47, 10, -127, 10, 
	-47, 10, -126, 10, 10, 58, -48, 10, 
	-75, 10, -48, 10, -65, 10, -48, 10, 
	-66, 10, -48, 10, -77, 10, -47, 10, 
	-125, 10, -47, 10, -101, 10, -48, 10, 
	-67, 10, -48, 10, -66, 10, -48, -47, 
	10, -67, 10, -48, 10, -76, 10, -48, 
	10, -127, 10, -48, 10, -67, -66, 10, 
	-48, 10, -66, 10, -48, 10, -78, 10, 
	-48, 10, -80, 10, -48, 10, -79, 10, 
	-48, 10, -72, 10, -48, 10, -67, 10, 
	-48, -47, 10, -66, 10, -48, 10, -73, 
	10, -48, 10, -80, 10, -48, 10, -76, 
	10, -128, 10, -48, 10, -72, 10, -48, 
	10, -68, 10, -48, 10, -75, 10, -47, 
	10, -128, 10, -48, -47, 10, -70, 10, 
	-48, 10, -72, 10, -47, 10, -122, 10, 
	-126, -122, 10, -47, 10, -128, 10, -47, 
	10, -125, 10, -48, 10, -70, 10, -47, 
	10, -126, 10, -47, 10, -125, 10, -47, 
	10, -128, 10, -48, 10, -80, 10, 10, 
	32, -47, 10, -127, 10, -47, 10, -122, 
	10, -48, 10, -75, 10, -48, 10, -67, 
	10, -48, 10, -80, 10, -47, 10, -128, 
	10, -48, 10, -72, 10, -47, 10, -104, 
	10, -48, 10, -75, 10, -48, 10, -67, 
	10, -48, 10, -80, 10, -47, 10, -128, 
	10, -48, 10, -72, 10, -48, 10, -66, 
	10, -47, 10, -125, 10, -48, 10, -67, 
	10, -48, 10, -70, 10, -47, 10, -122, 
	10, -48, 10, -72, 10, -48, 10, -66, 
	10, -48, 10, -67, 10, -48, 10, -80, 
	10, -48, 10, -69, 10, 10, 95, 10, 
	70, 10, 69, 10, 65, 10, 84, 10, 
	85, 10, 82, 10, 69, 10, 95, 10, 
	69, 10, 78, 10, 68, 10, 95, 10, 
	37, -48, -47, -70, -48, -72, -47, -122, 
	-48, -80, -126, -122, -47, -128, -47, -125, 
	-48, -70, -47, -126, -47, -125, -47, -128, 
	-48, -80, 32, -47, -127, -47, -122, -48, 
	-75, -48, -67, -48, -80, -47, -128, -48, 
	-72, -47, -104, -48, -75, -48, -67, -48, 
	-80, -47, -128, -48, -72, -48, -47, -66, 
	58, -104, -48, -47, -125, -48, -67, -48, 
	-70, -47, -122, -48, -72, -48, -66, -48, 
	-67, -48, -80, -48, -69, 187, 191, 0
];

var _lexer_single_lengths = [
	0, 10, 9, 1, 1, 1, 1, 1, 
	2, 2, 9, 1, 1, 2, 2, 3, 
	3, 3, 3, 2, 2, 2, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 3, 5, 3, 
	2, 4, 3, 2, 4, 9, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 3, 
	1, 2, 1, 1, 2, 1, 1, 1, 
	1, 2, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 7, 10, 2, 
	2, 2, 2, 2, 9, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 4, 2, 
	3, 2, 2, 3, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 3, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	3, 2, 2, 2, 2, 2, 3, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 7, 10, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 4, 2, 2, 2, 2, 
	3, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 3, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 6, 7, 
	2, 2, 2, 2, 2, 3, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 3, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 3, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	3, 2, 3, 2, 2, 2, 2, 2, 
	3, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 3, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 1, 
	1, 1, 1, 1, 1, 2, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 2, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 2, 1, 1, 1, 1, 5, 4, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 1, 
	1, 7, 10, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 4, 2, 3, 2, 2, 3, 2, 
	2, 2, 2, 3, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 3, 2, 2, 
	2, 2, 2, 2, 3, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 3, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 3, 2, 2, 2, 2, 2, 
	3, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 1, 1, 1, 
	1, 1, 1, 1, 2, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 2, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 0
];

var _lexer_range_lengths = [
	0, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 0, 0, 0, 0, 1, 
	1, 1, 1, 1, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 1, 1, 
	1, 1, 0, 0, 1, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 0, 0, 
	0, 0, 0, 0, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0
];

var _lexer_index_offsets = [
	0, 0, 12, 22, 24, 26, 28, 30, 
	32, 35, 38, 49, 51, 53, 56, 59, 
	64, 69, 74, 79, 83, 87, 90, 92, 
	94, 96, 98, 100, 102, 104, 106, 108, 
	110, 112, 114, 116, 118, 120, 125, 132, 
	137, 141, 147, 151, 154, 160, 171, 173, 
	175, 177, 179, 181, 183, 185, 187, 189, 
	193, 195, 198, 200, 202, 205, 207, 209, 
	211, 213, 216, 218, 220, 222, 224, 226, 
	228, 230, 232, 234, 236, 238, 247, 258, 
	261, 264, 267, 270, 273, 284, 287, 290, 
	293, 296, 299, 302, 305, 308, 311, 316, 
	319, 323, 326, 329, 333, 336, 339, 342, 
	345, 348, 351, 354, 357, 360, 363, 366, 
	369, 372, 375, 378, 381, 384, 387, 390, 
	393, 396, 399, 402, 405, 408, 411, 415, 
	418, 421, 424, 427, 430, 433, 436, 439, 
	442, 445, 448, 451, 454, 457, 460, 463, 
	466, 469, 472, 475, 478, 481, 484, 487, 
	490, 494, 497, 500, 503, 506, 509, 513, 
	516, 519, 522, 525, 528, 531, 534, 537, 
	540, 543, 546, 549, 552, 555, 558, 561, 
	564, 567, 570, 573, 576, 579, 582, 585, 
	588, 591, 594, 597, 600, 603, 606, 609, 
	612, 615, 618, 621, 624, 627, 630, 633, 
	636, 639, 642, 645, 648, 651, 654, 657, 
	660, 663, 666, 669, 672, 675, 678, 681, 
	684, 687, 690, 693, 696, 699, 702, 705, 
	708, 711, 714, 717, 720, 723, 726, 729, 
	732, 735, 738, 740, 742, 744, 746, 748, 
	750, 752, 754, 756, 765, 776, 779, 782, 
	785, 788, 791, 794, 797, 800, 803, 806, 
	809, 812, 815, 818, 823, 826, 829, 832, 
	835, 839, 842, 845, 848, 851, 854, 857, 
	860, 863, 866, 869, 872, 875, 878, 881, 
	884, 887, 890, 893, 897, 900, 903, 906, 
	909, 912, 915, 918, 921, 924, 927, 930, 
	933, 936, 939, 942, 945, 948, 951, 954, 
	957, 960, 963, 966, 969, 972, 975, 978, 
	981, 984, 987, 990, 993, 996, 999, 1002, 
	1005, 1008, 1011, 1014, 1017, 1020, 1023, 1026, 
	1029, 1032, 1035, 1038, 1041, 1044, 1047, 1050, 
	1053, 1056, 1059, 1062, 1065, 1068, 1071, 1074, 
	1077, 1080, 1083, 1086, 1089, 1092, 1095, 1098, 
	1101, 1104, 1107, 1110, 1112, 1114, 1116, 1118, 
	1120, 1122, 1124, 1126, 1128, 1130, 1132, 1134, 
	1136, 1138, 1140, 1142, 1144, 1146, 1148, 1156, 
	1164, 1167, 1170, 1173, 1176, 1179, 1183, 1186, 
	1189, 1192, 1195, 1198, 1201, 1204, 1207, 1210, 
	1213, 1216, 1219, 1222, 1225, 1228, 1231, 1234, 
	1237, 1240, 1243, 1246, 1249, 1252, 1255, 1258, 
	1261, 1264, 1267, 1271, 1274, 1277, 1280, 1283, 
	1286, 1289, 1292, 1295, 1298, 1301, 1304, 1307, 
	1311, 1314, 1317, 1320, 1323, 1326, 1329, 1332, 
	1335, 1338, 1341, 1344, 1347, 1350, 1353, 1356, 
	1359, 1363, 1366, 1370, 1373, 1376, 1379, 1382, 
	1385, 1389, 1392, 1395, 1398, 1401, 1404, 1407, 
	1410, 1413, 1416, 1419, 1422, 1425, 1428, 1431, 
	1434, 1437, 1440, 1443, 1446, 1449, 1452, 1455, 
	1458, 1461, 1464, 1467, 1470, 1473, 1476, 1479, 
	1482, 1485, 1488, 1491, 1494, 1497, 1500, 1503, 
	1506, 1509, 1512, 1516, 1519, 1522, 1525, 1528, 
	1531, 1534, 1537, 1540, 1543, 1546, 1549, 1552, 
	1555, 1558, 1561, 1564, 1567, 1570, 1573, 1576, 
	1579, 1582, 1585, 1588, 1591, 1594, 1597, 1600, 
	1603, 1606, 1609, 1612, 1615, 1618, 1621, 1624, 
	1626, 1628, 1630, 1632, 1634, 1636, 1639, 1641, 
	1643, 1645, 1647, 1649, 1651, 1653, 1655, 1657, 
	1659, 1661, 1663, 1665, 1667, 1670, 1672, 1674, 
	1676, 1678, 1680, 1682, 1684, 1686, 1688, 1690, 
	1692, 1694, 1696, 1698, 1700, 1702, 1704, 1706, 
	1708, 1710, 1713, 1715, 1717, 1719, 1721, 1728, 
	1733, 1736, 1739, 1742, 1745, 1748, 1751, 1754, 
	1757, 1760, 1763, 1766, 1769, 1772, 1775, 1778, 
	1781, 1784, 1787, 1790, 1793, 1796, 1799, 1802, 
	1805, 1808, 1811, 1814, 1817, 1820, 1823, 1826, 
	1829, 1832, 1835, 1838, 1841, 1844, 1847, 1850, 
	1853, 1856, 1859, 1862, 1865, 1868, 1871, 1874, 
	1876, 1878, 1887, 1898, 1901, 1904, 1907, 1910, 
	1913, 1916, 1919, 1922, 1925, 1928, 1931, 1934, 
	1937, 1940, 1945, 1948, 1952, 1955, 1958, 1962, 
	1965, 1968, 1971, 1974, 1978, 1981, 1984, 1987, 
	1990, 1993, 1996, 1999, 2002, 2005, 2008, 2011, 
	2014, 2017, 2020, 2023, 2026, 2029, 2032, 2035, 
	2038, 2041, 2044, 2047, 2050, 2053, 2057, 2060, 
	2063, 2066, 2069, 2072, 2075, 2079, 2082, 2085, 
	2088, 2091, 2094, 2097, 2100, 2103, 2106, 2109, 
	2112, 2115, 2119, 2122, 2125, 2128, 2131, 2134, 
	2137, 2140, 2143, 2146, 2149, 2152, 2155, 2158, 
	2161, 2164, 2167, 2171, 2174, 2177, 2180, 2183, 
	2186, 2190, 2193, 2196, 2199, 2202, 2205, 2208, 
	2211, 2214, 2217, 2220, 2223, 2226, 2229, 2232, 
	2235, 2238, 2241, 2244, 2247, 2250, 2253, 2256, 
	2259, 2262, 2265, 2268, 2271, 2274, 2277, 2280, 
	2283, 2286, 2289, 2292, 2295, 2298, 2301, 2304, 
	2307, 2310, 2313, 2316, 2319, 2322, 2325, 2328, 
	2331, 2334, 2337, 2340, 2343, 2346, 2349, 2352, 
	2355, 2358, 2361, 2364, 2367, 2370, 2373, 2376, 
	2379, 2382, 2385, 2388, 2391, 2394, 2397, 2400, 
	2403, 2406, 2409, 2412, 2415, 2418, 2420, 2422, 
	2424, 2426, 2428, 2430, 2432, 2435, 2437, 2439, 
	2441, 2443, 2445, 2447, 2449, 2451, 2453, 2455, 
	2457, 2459, 2461, 2463, 2465, 2467, 2469, 2471, 
	2473, 2475, 2477, 2479, 2481, 2483, 2485, 2487, 
	2489, 2491, 2493, 2495, 2497, 2499, 2501, 2503, 
	2505, 2507, 2509, 2511, 2513, 2515, 2517, 2520, 
	2522, 2524, 2526, 2528, 2530, 2532, 2534, 2536, 
	2538, 2540, 2542, 2544, 2546, 2548, 2550, 2552, 
	2554, 2556, 2558, 2560, 2562, 2564, 2566, 2568
];

var _lexer_indicies = [
	1, 3, 2, 4, 5, 6, 7, 8, 
	9, 10, 2, 0, 11, 12, 13, 14, 
	15, 16, 17, 18, 19, 0, 20, 0, 
	21, 0, 22, 0, 13, 0, 23, 0, 
	25, 26, 24, 28, 29, 27, 1, 3, 
	2, 4, 5, 6, 7, 8, 9, 2, 
	0, 30, 0, 31, 0, 33, 34, 32, 
	36, 37, 35, 40, 39, 41, 39, 38, 
	44, 43, 45, 43, 42, 44, 43, 46, 
	43, 42, 44, 43, 47, 43, 42, 49, 
	48, 48, 0, 3, 50, 50, 0, 52, 
	53, 51, 3, 0, 54, 0, 55, 0, 
	56, 0, 57, 0, 58, 0, 59, 0, 
	60, 0, 61, 0, 62, 0, 63, 0, 
	64, 0, 65, 0, 66, 0, 67, 0, 
	0, 0, 0, 0, 68, 69, 70, 69, 
	69, 72, 71, 68, 3, 73, 8, 73, 
	0, 74, 75, 74, 0, 78, 77, 79, 
	80, 77, 76, 0, 82, 83, 81, 0, 
	82, 81, 78, 84, 82, 83, 84, 81, 
	85, 78, 86, 87, 88, 89, 90, 91, 
	92, 86, 0, 93, 0, 94, 0, 95, 
	0, 96, 0, 97, 0, 98, 0, 99, 
	0, 100, 0, 101, 0, 13, 13, 13, 
	0, 102, 0, 103, 104, 0, 105, 0, 
	106, 0, 107, 23, 0, 13, 0, 108, 
	0, 109, 0, 110, 0, 111, 112, 0, 
	113, 0, 114, 0, 115, 0, 116, 0, 
	117, 0, 118, 0, 119, 0, 120, 0, 
	121, 0, 123, 122, 125, 124, 126, 125, 
	127, 128, 129, 130, 128, 127, 124, 131, 
	132, 133, 134, 135, 136, 137, 138, 139, 
	125, 124, 140, 125, 124, 141, 125, 124, 
	142, 125, 124, 133, 125, 124, 125, 143, 
	124, 144, 146, 145, 147, 148, 149, 150, 
	151, 152, 145, 0, 153, 125, 124, 154, 
	125, 124, 155, 125, 124, 156, 125, 124, 
	157, 125, 124, 158, 125, 124, 159, 125, 
	124, 160, 125, 124, 161, 125, 124, 133, 
	133, 133, 125, 124, 162, 125, 124, 163, 
	164, 125, 124, 165, 125, 124, 166, 125, 
	124, 167, 125, 143, 124, 133, 125, 124, 
	168, 125, 124, 169, 125, 124, 170, 125, 
	124, 171, 125, 124, 172, 125, 124, 173, 
	125, 124, 174, 125, 124, 175, 125, 124, 
	176, 125, 124, 177, 125, 124, 125, 143, 
	124, 178, 125, 124, 179, 125, 124, 180, 
	125, 124, 181, 125, 124, 182, 125, 124, 
	183, 125, 124, 184, 125, 124, 185, 125, 
	124, 186, 125, 124, 187, 125, 124, 188, 
	125, 124, 189, 125, 124, 190, 125, 124, 
	175, 125, 124, 191, 192, 125, 124, 193, 
	125, 124, 194, 125, 124, 195, 125, 124, 
	167, 125, 124, 196, 125, 124, 197, 125, 
	124, 198, 125, 124, 199, 125, 124, 200, 
	125, 124, 201, 125, 124, 202, 125, 124, 
	203, 125, 124, 204, 125, 124, 205, 125, 
	124, 177, 125, 124, 206, 125, 124, 207, 
	125, 124, 208, 125, 124, 209, 125, 124, 
	210, 125, 124, 211, 125, 124, 212, 125, 
	124, 213, 125, 124, 214, 125, 124, 177, 
	125, 124, 215, 216, 125, 124, 217, 125, 
	124, 218, 125, 124, 219, 125, 124, 220, 
	125, 124, 204, 125, 124, 221, 222, 125, 
	124, 223, 125, 124, 224, 125, 124, 225, 
	125, 124, 226, 125, 124, 227, 125, 124, 
	228, 125, 124, 229, 125, 124, 230, 125, 
	124, 231, 125, 124, 232, 125, 124, 233, 
	125, 124, 234, 125, 124, 235, 125, 124, 
	236, 125, 124, 125, 237, 124, 238, 125, 
	124, 239, 125, 124, 240, 125, 124, 241, 
	125, 124, 242, 125, 124, 243, 125, 124, 
	244, 125, 124, 245, 125, 124, 246, 125, 
	124, 247, 125, 124, 248, 125, 124, 249, 
	125, 124, 250, 125, 124, 251, 125, 124, 
	252, 125, 124, 204, 125, 124, 253, 125, 
	124, 254, 125, 124, 255, 125, 124, 256, 
	125, 124, 257, 125, 124, 258, 125, 124, 
	259, 125, 124, 260, 125, 124, 261, 125, 
	124, 262, 125, 124, 263, 125, 124, 177, 
	125, 124, 264, 125, 124, 265, 125, 124, 
	266, 125, 124, 267, 125, 124, 268, 125, 
	124, 269, 125, 124, 270, 125, 124, 271, 
	125, 124, 272, 125, 124, 273, 125, 124, 
	274, 125, 124, 275, 125, 124, 276, 125, 
	124, 277, 125, 124, 278, 125, 124, 279, 
	125, 124, 280, 125, 124, 185, 125, 124, 
	125, 281, 124, 125, 282, 124, 125, 283, 
	124, 125, 284, 124, 125, 285, 124, 125, 
	286, 124, 125, 287, 124, 125, 288, 124, 
	125, 289, 124, 125, 290, 124, 125, 291, 
	124, 125, 292, 124, 125, 293, 124, 125, 
	294, 124, 295, 0, 296, 0, 297, 0, 
	298, 0, 299, 0, 300, 0, 301, 0, 
	303, 302, 305, 304, 306, 305, 307, 308, 
	309, 310, 308, 307, 304, 311, 312, 313, 
	314, 315, 316, 317, 318, 319, 305, 304, 
	320, 305, 304, 321, 305, 304, 322, 305, 
	304, 313, 305, 304, 305, 323, 304, 324, 
	305, 304, 325, 305, 304, 326, 305, 304, 
	327, 305, 304, 328, 305, 304, 329, 305, 
	304, 330, 305, 304, 331, 305, 304, 332, 
	305, 304, 313, 313, 313, 305, 304, 333, 
	305, 304, 334, 305, 304, 335, 305, 304, 
	336, 305, 304, 337, 305, 323, 304, 313, 
	305, 304, 338, 305, 304, 339, 305, 304, 
	340, 305, 304, 341, 305, 304, 342, 305, 
	304, 343, 305, 304, 344, 305, 304, 345, 
	305, 304, 346, 305, 304, 347, 305, 304, 
	348, 305, 304, 349, 305, 304, 350, 305, 
	304, 351, 305, 304, 352, 305, 304, 353, 
	305, 304, 305, 323, 304, 354, 355, 305, 
	304, 356, 305, 304, 357, 305, 304, 358, 
	305, 304, 337, 305, 304, 359, 305, 304, 
	360, 305, 304, 361, 305, 304, 362, 305, 
	304, 363, 305, 304, 364, 305, 304, 365, 
	305, 304, 366, 305, 304, 367, 305, 304, 
	368, 305, 304, 353, 305, 304, 369, 305, 
	304, 370, 305, 304, 371, 305, 304, 372, 
	305, 304, 373, 305, 304, 374, 305, 304, 
	375, 305, 304, 376, 305, 304, 377, 305, 
	304, 353, 305, 304, 378, 305, 304, 379, 
	305, 304, 380, 305, 304, 381, 305, 304, 
	382, 305, 304, 383, 305, 304, 384, 305, 
	304, 385, 305, 304, 386, 305, 304, 387, 
	305, 304, 388, 305, 304, 389, 305, 304, 
	390, 305, 304, 353, 305, 304, 391, 305, 
	304, 392, 305, 304, 393, 305, 304, 394, 
	305, 304, 395, 305, 304, 396, 305, 304, 
	397, 305, 304, 398, 305, 304, 399, 305, 
	304, 400, 305, 304, 401, 305, 304, 402, 
	305, 304, 403, 305, 304, 404, 305, 304, 
	405, 305, 304, 406, 305, 304, 407, 305, 
	304, 345, 305, 304, 305, 408, 304, 305, 
	409, 304, 305, 410, 304, 305, 411, 304, 
	305, 412, 304, 305, 413, 304, 305, 414, 
	304, 305, 415, 304, 305, 416, 304, 305, 
	417, 304, 305, 418, 304, 305, 419, 304, 
	305, 420, 304, 305, 421, 304, 422, 0, 
	423, 0, 424, 0, 425, 0, 426, 0, 
	427, 0, 428, 0, 429, 0, 430, 0, 
	431, 0, 432, 0, 433, 0, 434, 0, 
	435, 0, 436, 0, 437, 0, 438, 0, 
	440, 439, 442, 441, 443, 442, 444, 445, 
	446, 445, 444, 441, 447, 448, 449, 450, 
	451, 452, 442, 441, 453, 442, 441, 454, 
	442, 441, 455, 442, 441, 456, 442, 441, 
	457, 442, 441, 458, 459, 442, 441, 460, 
	442, 441, 461, 442, 441, 462, 442, 441, 
	463, 442, 441, 464, 442, 441, 465, 442, 
	441, 466, 442, 441, 467, 442, 441, 442, 
	468, 441, 469, 442, 441, 470, 442, 441, 
	471, 442, 441, 465, 442, 441, 472, 442, 
	441, 473, 442, 441, 474, 442, 441, 475, 
	442, 441, 476, 442, 441, 477, 442, 441, 
	478, 442, 441, 479, 442, 441, 480, 442, 
	441, 481, 442, 441, 482, 442, 441, 463, 
	442, 441, 483, 442, 441, 484, 442, 441, 
	485, 442, 441, 486, 487, 442, 441, 488, 
	442, 441, 489, 442, 441, 490, 442, 441, 
	491, 442, 441, 492, 442, 441, 467, 442, 
	441, 493, 442, 441, 494, 442, 441, 495, 
	442, 441, 496, 442, 441, 497, 442, 441, 
	491, 442, 441, 498, 499, 442, 441, 500, 
	442, 441, 501, 442, 441, 502, 442, 441, 
	503, 442, 441, 504, 442, 441, 505, 442, 
	441, 494, 442, 441, 506, 442, 441, 507, 
	442, 441, 508, 442, 441, 509, 442, 441, 
	510, 442, 441, 511, 442, 441, 512, 442, 
	441, 513, 442, 441, 514, 442, 441, 515, 
	442, 468, 441, 467, 442, 441, 516, 517, 
	442, 441, 518, 442, 441, 519, 442, 441, 
	520, 442, 441, 521, 442, 441, 491, 442, 
	441, 522, 523, 442, 441, 524, 442, 441, 
	525, 442, 441, 526, 442, 441, 527, 442, 
	441, 528, 442, 441, 529, 442, 441, 530, 
	442, 441, 531, 442, 441, 532, 442, 441, 
	533, 442, 441, 534, 442, 441, 535, 442, 
	441, 536, 442, 441, 537, 442, 441, 442, 
	538, 441, 539, 442, 441, 540, 442, 441, 
	541, 442, 441, 542, 442, 441, 543, 442, 
	441, 544, 442, 441, 545, 442, 441, 546, 
	442, 441, 547, 442, 441, 548, 442, 441, 
	549, 442, 441, 550, 442, 441, 551, 442, 
	441, 552, 442, 441, 553, 442, 441, 491, 
	442, 441, 554, 442, 441, 555, 442, 441, 
	556, 442, 441, 557, 442, 441, 558, 442, 
	441, 559, 442, 441, 560, 442, 441, 561, 
	442, 441, 562, 442, 441, 563, 442, 441, 
	564, 565, 442, 441, 467, 442, 441, 566, 
	442, 441, 515, 442, 441, 567, 442, 441, 
	568, 442, 441, 569, 442, 441, 570, 442, 
	441, 571, 442, 441, 572, 442, 441, 573, 
	442, 441, 574, 442, 441, 575, 442, 441, 
	576, 442, 441, 577, 442, 441, 578, 442, 
	441, 579, 442, 441, 580, 442, 441, 581, 
	442, 441, 582, 442, 441, 583, 442, 441, 
	479, 442, 441, 442, 584, 441, 442, 585, 
	441, 442, 586, 441, 442, 587, 441, 442, 
	588, 441, 442, 589, 441, 442, 590, 441, 
	442, 591, 441, 442, 592, 441, 442, 593, 
	441, 442, 594, 441, 442, 595, 441, 442, 
	596, 441, 442, 597, 441, 598, 599, 0, 
	600, 0, 601, 0, 602, 0, 107, 0, 
	603, 0, 604, 0, 605, 606, 0, 607, 
	0, 608, 0, 609, 0, 610, 0, 611, 
	0, 120, 0, 612, 0, 613, 0, 614, 
	0, 615, 0, 616, 0, 617, 0, 618, 
	0, 437, 0, 619, 620, 0, 621, 0, 
	622, 0, 623, 0, 624, 0, 625, 0, 
	626, 0, 627, 0, 628, 0, 629, 0, 
	630, 0, 610, 0, 631, 0, 632, 0, 
	633, 0, 634, 0, 635, 0, 636, 0, 
	637, 0, 638, 0, 639, 0, 640, 641, 
	0, 642, 0, 643, 0, 645, 644, 647, 
	646, 648, 647, 649, 650, 650, 649, 646, 
	651, 652, 653, 647, 646, 654, 647, 646, 
	655, 647, 646, 656, 647, 646, 657, 647, 
	646, 658, 647, 646, 659, 647, 646, 660, 
	647, 646, 661, 647, 646, 662, 647, 646, 
	663, 647, 646, 664, 647, 646, 665, 647, 
	646, 666, 647, 646, 667, 647, 646, 668, 
	647, 646, 669, 647, 646, 647, 670, 646, 
	671, 647, 646, 672, 647, 646, 673, 647, 
	646, 674, 647, 646, 675, 647, 646, 676, 
	647, 646, 677, 647, 646, 678, 647, 646, 
	679, 647, 646, 680, 647, 646, 681, 647, 
	646, 669, 647, 646, 682, 647, 646, 683, 
	647, 646, 684, 647, 646, 685, 647, 646, 
	686, 647, 646, 687, 647, 646, 688, 647, 
	646, 689, 647, 646, 690, 647, 646, 691, 
	647, 646, 692, 647, 646, 693, 647, 646, 
	694, 647, 646, 695, 647, 646, 696, 647, 
	646, 697, 647, 646, 698, 647, 646, 661, 
	647, 646, 700, 699, 702, 701, 703, 702, 
	704, 705, 706, 707, 705, 704, 701, 708, 
	709, 710, 711, 712, 713, 714, 715, 716, 
	702, 701, 717, 702, 701, 718, 702, 701, 
	719, 702, 701, 710, 702, 701, 702, 720, 
	701, 721, 702, 701, 722, 702, 701, 723, 
	702, 701, 724, 702, 701, 725, 702, 701, 
	726, 702, 701, 727, 702, 701, 728, 702, 
	701, 729, 702, 701, 710, 710, 710, 702, 
	701, 730, 702, 701, 731, 732, 702, 701, 
	733, 702, 701, 734, 702, 701, 735, 702, 
	720, 701, 710, 702, 701, 736, 702, 701, 
	737, 702, 701, 738, 702, 701, 739, 740, 
	702, 701, 741, 702, 701, 742, 702, 701, 
	743, 702, 701, 744, 702, 701, 745, 702, 
	701, 746, 702, 701, 747, 702, 701, 748, 
	702, 701, 702, 720, 701, 749, 702, 701, 
	750, 702, 701, 751, 702, 701, 746, 702, 
	701, 752, 702, 701, 753, 702, 701, 754, 
	702, 701, 755, 702, 701, 756, 702, 701, 
	757, 702, 701, 758, 702, 701, 759, 702, 
	701, 760, 702, 701, 761, 702, 701, 762, 
	702, 701, 744, 702, 701, 763, 764, 702, 
	701, 765, 702, 701, 766, 702, 701, 767, 
	702, 701, 735, 702, 701, 768, 702, 701, 
	769, 702, 701, 770, 771, 702, 701, 772, 
	702, 701, 773, 702, 701, 774, 702, 701, 
	775, 702, 701, 776, 702, 701, 748, 702, 
	701, 777, 702, 701, 778, 702, 701, 779, 
	702, 701, 780, 702, 701, 781, 702, 701, 
	775, 702, 701, 782, 783, 702, 701, 784, 
	702, 701, 785, 702, 701, 786, 702, 701, 
	787, 702, 701, 788, 702, 701, 789, 702, 
	701, 778, 702, 701, 790, 702, 701, 791, 
	702, 701, 792, 702, 701, 793, 702, 701, 
	794, 702, 701, 795, 702, 701, 796, 702, 
	701, 797, 702, 701, 748, 702, 701, 798, 
	799, 702, 701, 800, 702, 701, 801, 702, 
	701, 802, 702, 701, 803, 702, 701, 775, 
	702, 701, 804, 805, 702, 701, 806, 702, 
	701, 807, 702, 701, 808, 702, 701, 809, 
	702, 701, 810, 702, 701, 811, 702, 701, 
	812, 702, 701, 813, 702, 701, 814, 702, 
	701, 815, 702, 701, 816, 702, 701, 817, 
	702, 701, 818, 702, 701, 819, 702, 701, 
	702, 820, 701, 821, 702, 701, 822, 702, 
	701, 823, 702, 701, 824, 702, 701, 825, 
	702, 701, 826, 702, 701, 827, 702, 701, 
	828, 702, 701, 829, 702, 701, 830, 702, 
	701, 831, 702, 701, 832, 702, 701, 833, 
	702, 701, 834, 702, 701, 835, 702, 701, 
	775, 702, 701, 836, 702, 701, 837, 702, 
	701, 838, 702, 701, 839, 702, 701, 840, 
	702, 701, 841, 702, 701, 842, 702, 701, 
	843, 702, 701, 844, 702, 701, 845, 702, 
	701, 846, 702, 701, 748, 702, 701, 847, 
	702, 701, 848, 702, 701, 849, 702, 701, 
	850, 702, 701, 851, 702, 701, 852, 702, 
	701, 853, 702, 701, 854, 702, 701, 855, 
	702, 701, 856, 702, 701, 857, 702, 701, 
	858, 702, 701, 859, 702, 701, 860, 702, 
	701, 861, 702, 701, 862, 702, 701, 863, 
	702, 701, 759, 702, 701, 702, 864, 701, 
	702, 865, 701, 702, 866, 701, 702, 867, 
	701, 702, 868, 701, 702, 869, 701, 702, 
	870, 701, 702, 871, 701, 702, 872, 701, 
	702, 873, 701, 702, 874, 701, 702, 875, 
	701, 702, 876, 701, 702, 877, 701, 878, 
	879, 0, 880, 0, 881, 0, 882, 0, 
	883, 0, 884, 0, 885, 0, 300, 0, 
	886, 887, 0, 888, 0, 889, 0, 890, 
	0, 891, 0, 892, 0, 893, 0, 894, 
	0, 895, 0, 896, 0, 897, 0, 898, 
	0, 899, 0, 900, 0, 901, 0, 902, 
	0, 903, 0, 904, 0, 905, 0, 906, 
	0, 907, 0, 908, 0, 909, 0, 910, 
	0, 911, 0, 912, 0, 913, 0, 914, 
	0, 915, 0, 916, 0, 917, 0, 884, 
	0, 918, 0, 919, 0, 920, 0, 921, 
	0, 922, 0, 923, 0, 924, 0, 925, 
	0, 926, 0, 927, 0, 928, 929, 0, 
	930, 0, 641, 0, 931, 0, 640, 0, 
	932, 0, 933, 0, 934, 0, 935, 0, 
	936, 0, 937, 0, 938, 0, 939, 0, 
	940, 0, 941, 0, 942, 0, 943, 0, 
	944, 0, 945, 0, 946, 0, 947, 0, 
	948, 0, 429, 0, 949, 0, 2, 0, 
	950, 0
];

var _lexer_trans_targs = [
	0, 2, 10, 10, 11, 21, 23, 7, 
	37, 40, 869, 3, 46, 7, 56, 355, 
	526, 548, 796, 851, 4, 5, 6, 8, 
	9, 10, 22, 9, 10, 22, 12, 13, 
	14, 15, 14, 14, 15, 14, 16, 16, 
	16, 17, 16, 16, 16, 17, 18, 19, 
	20, 10, 20, 21, 10, 22, 24, 25, 
	26, 27, 28, 29, 30, 31, 32, 33, 
	34, 35, 36, 871, 38, 39, 10, 38, 
	37, 39, 40, 41, 42, 44, 45, 43, 
	41, 42, 43, 41, 44, 2, 45, 11, 
	21, 23, 7, 37, 40, 47, 48, 49, 
	50, 51, 52, 53, 54, 55, 57, 58, 
	62, 59, 60, 61, 63, 64, 65, 66, 
	234, 67, 68, 69, 70, 71, 72, 73, 
	74, 75, 76, 77, 76, 77, 78, 77, 
	10, 220, 83, 79, 85, 83, 95, 112, 
	126, 142, 152, 202, 80, 81, 82, 84, 
	2, 10, 10, 11, 21, 23, 7, 37, 
	40, 86, 87, 88, 89, 90, 91, 92, 
	93, 94, 96, 97, 101, 98, 99, 100, 
	102, 103, 104, 105, 106, 107, 108, 109, 
	110, 111, 113, 114, 115, 116, 117, 118, 
	119, 120, 121, 122, 123, 124, 125, 127, 
	131, 128, 129, 130, 132, 133, 134, 135, 
	136, 137, 138, 139, 140, 141, 143, 144, 
	145, 146, 147, 148, 149, 150, 151, 153, 
	158, 154, 155, 156, 157, 159, 190, 160, 
	161, 162, 163, 164, 165, 166, 167, 168, 
	169, 170, 171, 172, 173, 174, 175, 176, 
	177, 178, 179, 180, 181, 182, 183, 184, 
	185, 186, 187, 188, 189, 191, 192, 193, 
	194, 195, 196, 197, 198, 199, 200, 201, 
	203, 204, 205, 206, 207, 208, 209, 210, 
	211, 212, 213, 214, 215, 216, 217, 218, 
	219, 221, 222, 223, 224, 225, 226, 227, 
	228, 229, 230, 231, 232, 233, 10, 235, 
	236, 237, 238, 239, 240, 241, 242, 243, 
	242, 243, 244, 243, 10, 341, 249, 245, 
	250, 249, 260, 266, 283, 299, 309, 323, 
	246, 247, 248, 84, 251, 252, 253, 254, 
	255, 256, 257, 258, 259, 261, 262, 263, 
	264, 265, 267, 268, 269, 270, 271, 272, 
	273, 274, 275, 276, 277, 278, 279, 280, 
	281, 282, 284, 288, 285, 286, 287, 289, 
	290, 291, 292, 293, 294, 295, 296, 297, 
	298, 300, 301, 302, 303, 304, 305, 306, 
	307, 308, 310, 311, 312, 313, 314, 315, 
	316, 317, 318, 319, 320, 321, 322, 324, 
	325, 326, 327, 328, 329, 330, 331, 332, 
	333, 334, 335, 336, 337, 338, 339, 340, 
	342, 343, 344, 345, 346, 347, 348, 349, 
	350, 351, 352, 353, 354, 10, 356, 357, 
	358, 359, 360, 361, 362, 363, 364, 365, 
	366, 367, 368, 369, 370, 371, 372, 373, 
	374, 373, 374, 375, 374, 10, 512, 376, 
	395, 407, 423, 442, 494, 377, 378, 379, 
	380, 381, 382, 391, 383, 384, 385, 386, 
	387, 388, 389, 390, 84, 392, 393, 394, 
	396, 397, 398, 399, 400, 401, 402, 403, 
	404, 405, 406, 408, 409, 410, 411, 417, 
	412, 413, 414, 415, 416, 418, 419, 420, 
	421, 422, 424, 431, 425, 426, 427, 428, 
	429, 430, 432, 433, 434, 435, 436, 437, 
	438, 439, 440, 441, 443, 448, 444, 445, 
	446, 447, 449, 480, 450, 451, 452, 453, 
	454, 455, 456, 457, 458, 459, 460, 461, 
	462, 463, 464, 465, 466, 467, 468, 469, 
	470, 471, 472, 473, 474, 475, 476, 477, 
	478, 479, 481, 482, 483, 484, 485, 486, 
	487, 488, 489, 490, 491, 492, 493, 495, 
	496, 497, 498, 499, 500, 501, 502, 503, 
	504, 505, 506, 507, 508, 509, 510, 511, 
	513, 514, 515, 516, 517, 518, 519, 520, 
	521, 522, 523, 524, 525, 10, 527, 531, 
	528, 529, 530, 532, 533, 534, 540, 535, 
	536, 537, 538, 539, 541, 542, 543, 544, 
	545, 546, 547, 549, 560, 550, 551, 552, 
	553, 554, 555, 556, 557, 558, 559, 561, 
	562, 563, 564, 565, 566, 567, 568, 569, 
	570, 623, 571, 572, 573, 574, 573, 574, 
	575, 574, 10, 576, 593, 605, 577, 578, 
	579, 580, 581, 582, 583, 584, 585, 586, 
	587, 588, 589, 590, 591, 592, 84, 594, 
	595, 596, 597, 598, 599, 600, 601, 602, 
	603, 604, 606, 607, 608, 609, 610, 611, 
	612, 613, 614, 615, 616, 617, 618, 619, 
	620, 621, 622, 624, 625, 624, 625, 626, 
	625, 10, 782, 631, 627, 632, 631, 642, 
	665, 677, 697, 714, 764, 628, 629, 630, 
	84, 633, 634, 635, 636, 637, 638, 639, 
	640, 641, 643, 644, 648, 645, 646, 647, 
	649, 650, 651, 652, 661, 653, 654, 655, 
	656, 657, 658, 659, 660, 662, 663, 664, 
	666, 667, 668, 669, 670, 671, 672, 673, 
	674, 675, 676, 678, 682, 679, 680, 681, 
	683, 684, 685, 691, 686, 687, 688, 689, 
	690, 692, 693, 694, 695, 696, 698, 705, 
	699, 700, 701, 702, 703, 704, 706, 707, 
	708, 709, 710, 711, 712, 713, 715, 720, 
	716, 717, 718, 719, 721, 752, 722, 723, 
	724, 725, 726, 727, 728, 729, 730, 731, 
	732, 733, 734, 735, 736, 737, 738, 739, 
	740, 741, 742, 743, 744, 745, 746, 747, 
	748, 749, 750, 751, 753, 754, 755, 756, 
	757, 758, 759, 760, 761, 762, 763, 765, 
	766, 767, 768, 769, 770, 771, 772, 773, 
	774, 775, 776, 777, 778, 779, 780, 781, 
	783, 784, 785, 786, 787, 788, 789, 790, 
	791, 792, 793, 794, 795, 10, 797, 804, 
	798, 799, 800, 801, 802, 803, 805, 836, 
	806, 807, 808, 809, 810, 811, 812, 813, 
	814, 815, 816, 817, 818, 819, 820, 821, 
	822, 823, 824, 825, 826, 827, 828, 829, 
	830, 831, 832, 833, 834, 835, 837, 838, 
	839, 840, 841, 842, 843, 844, 845, 846, 
	847, 849, 848, 850, 852, 853, 854, 855, 
	856, 857, 858, 859, 860, 861, 862, 863, 
	864, 865, 866, 867, 868, 870, 0
];

var _lexer_trans_actions = [
	43, 29, 0, 54, 3, 1, 0, 29, 
	1, 35, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	57, 149, 126, 0, 110, 23, 0, 0, 
	7, 139, 48, 0, 102, 9, 5, 45, 
	134, 45, 0, 33, 122, 33, 33, 0, 
	11, 106, 0, 0, 114, 25, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 27, 118, 27, 
	51, 0, 0, 0, 37, 37, 54, 37, 
	87, 0, 0, 39, 0, 96, 0, 93, 
	90, 41, 96, 90, 99, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 57, 144, 0, 54, 84, 0, 
	72, 33, 84, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 15, 
	63, 31, 130, 60, 57, 31, 63, 57, 
	66, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 15, 0, 
	0, 0, 0, 0, 0, 0, 57, 144, 
	0, 54, 84, 0, 78, 33, 84, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 19, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 19, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 57, 
	144, 0, 54, 84, 0, 69, 33, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 13, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 13, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 57, 144, 0, 54, 
	84, 0, 81, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 21, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 57, 144, 0, 54, 84, 
	0, 75, 33, 84, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	17, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 17, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0
];

var _lexer_eof_actions = [
	0, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43
];

var lexer_start = 1;
var lexer_first_final = 871;
var lexer_error = 0;

var lexer_en_main = 1;


/* line 129 "ragel/i18n/sr_cyrl.js.rl" */

/* line 130 "ragel/i18n/sr_cyrl.js.rl" */

/* line 131 "ragel/i18n/sr_cyrl.js.rl" */

/* line 132 "ragel/i18n/sr_cyrl.js.rl" */

var Lexer = function(listener) {
  // Check that listener has the required functions
  var events = ['comment', 'tag', 'feature', 'background', 'scenario', 'scenario_outline', 'examples', 'step', 'doc_string', 'row', 'eof'];
  for(var i=0, len=events.length; i<len; i++) {
    var event = events[i];
    if(typeof listener[event] != 'function') {
      throw new Error("Error. No " + event + " function exists on " + JSON.stringify(listener));
    }
  }
  this.listener = listener;
};

Lexer.prototype.scan = function(data) {
  var ending = "\n%_FEATURE_END_%";
  if(typeof data == 'string') {
    data = this.stringToBytes(data + ending);
  } else if(typeof Buffer != 'undefined' && Buffer.isBuffer(data)) {
    // Node.js
    var buf = new Buffer(data.length + ending.length);
    data.copy(buf, 0, 0);
    new Buffer(ending).copy(buf, data.length, 0);
    data = buf;
  }
  var eof = pe = data.length;
  var p = 0;

  this.line_number = 1;
  this.last_newline = 0;
  var signedCharValue=function(v){return v > 127 ? v-256 : v; };

  
/* line 1428 "js/lib/gherkin/lexer/sr_cyrl.js" */
{
	  this.cs = lexer_start;
} /* JSCodeGen::writeInit */

/* line 164 "ragel/i18n/sr_cyrl.js.rl" */
  
/* line 1435 "js/lib/gherkin/lexer/sr_cyrl.js" */
{
	var _klen, _trans, _keys, _ps, _widec, _acts, _nacts;
	var _goto_level, _resume, _eof_trans, _again, _test_eof;
	var _out;
	_klen = _trans = _keys = _acts = _nacts = null;
	_goto_level = 0;
	_resume = 10;
	_eof_trans = 15;
	_again = 20;
	_test_eof = 30;
	_out = 40;
	while (true) {
	_trigger_goto = false;
	if (_goto_level <= 0) {
	if (p == pe) {
		_goto_level = _test_eof;
		continue;
	}
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	}
	if (_goto_level <= _resume) {
	_keys = _lexer_key_offsets[ this.cs];
	_trans = _lexer_index_offsets[ this.cs];
	_klen = _lexer_single_lengths[ this.cs];
	_break_match = false;
	
	do {
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + _klen - 1;

	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + ( (_upper - _lower) >> 1 );

	        if (( signedCharValue(data[p])) < _lexer_trans_keys[_mid]) {
	           _upper = _mid - 1;
	        } else if (( signedCharValue(data[p])) > _lexer_trans_keys[_mid]) {
	           _lower = _mid + 1;
	        } else {
	           _trans += (_mid - _keys);
	           _break_match = true;
	           break;
	        };
	     } /* while */
	     if (_break_match) { break; }
	     _keys += _klen;
	     _trans += _klen;
	  }
	  _klen = _lexer_range_lengths[ this.cs];
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + (_klen << 1) - 2;
	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + (((_upper-_lower) >> 1) & ~1);
	        if (( signedCharValue(data[p])) < _lexer_trans_keys[_mid]) {
	          _upper = _mid - 2;
	         } else if (( signedCharValue(data[p])) > _lexer_trans_keys[_mid+1]) {
	          _lower = _mid + 2;
	        } else {
	          _trans += ((_mid - _keys) >> 1);
	          _break_match = true;
	          break;
	        }
	     } /* while */
	     if (_break_match) { break; }
	     _trans += _klen
	  }
	} while (false);
	_trans = _lexer_indicies[_trans];
	 this.cs = _lexer_trans_targs[_trans];
	if (_lexer_trans_actions[_trans] != 0) {
		_acts = _lexer_trans_actions[_trans];
		_nacts = _lexer_actions[_acts];
		_acts += 1;
		while (_nacts > 0) {
			_nacts -= 1;
			_acts += 1;
			switch (_lexer_actions[_acts - 1]) {
case 0:
/* line 6 "ragel/i18n/sr_cyrl.js.rl" */

    this.content_start = p;
    this.current_line = this.line_number;
    this.start_col = p - this.last_newline - (this.keyword+':').length;
  		break;
case 1:
/* line 12 "ragel/i18n/sr_cyrl.js.rl" */

    this.current_line = this.line_number;
    this.start_col = p - this.last_newline;
  		break;
case 2:
/* line 17 "ragel/i18n/sr_cyrl.js.rl" */

    this.content_start = p;
  		break;
case 3:
/* line 21 "ragel/i18n/sr_cyrl.js.rl" */

    this.docstring_content_type_start = p;
  		break;
case 4:
/* line 25 "ragel/i18n/sr_cyrl.js.rl" */

    this.docstring_content_type_end = p;
  		break;
case 5:
/* line 29 "ragel/i18n/sr_cyrl.js.rl" */

    var con = this.unindent(
      this.start_col, 
      this.bytesToString(data.slice(this.content_start, this.next_keyword_start-1)).replace(/(\r?\n)?([\t ])*$/, '').replace(/\\\"\\\"\\\"/mg, '"""')
    );
    var con_type = this.bytesToString(data.slice(this.docstring_content_type_start, this.docstring_content_type_end)).trim();
    this.listener.doc_string(con_type, con, this.current_line); 
  		break;
case 6:
/* line 38 "ragel/i18n/sr_cyrl.js.rl" */

    p = this.store_keyword_content('feature', data, p, eof);
  		break;
case 7:
/* line 42 "ragel/i18n/sr_cyrl.js.rl" */

    p = this.store_keyword_content('background', data, p, eof);
  		break;
case 8:
/* line 46 "ragel/i18n/sr_cyrl.js.rl" */

    p = this.store_keyword_content('scenario', data, p, eof);
  		break;
case 9:
/* line 50 "ragel/i18n/sr_cyrl.js.rl" */

    p = this.store_keyword_content('scenario_outline', data, p, eof);
  		break;
case 10:
/* line 54 "ragel/i18n/sr_cyrl.js.rl" */

    p = this.store_keyword_content('examples', data, p, eof);
  		break;
case 11:
/* line 58 "ragel/i18n/sr_cyrl.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.step(this.keyword, con, this.current_line);
  		break;
case 12:
/* line 63 "ragel/i18n/sr_cyrl.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.comment(con, this.line_number);
    this.keyword_start = null;
  		break;
case 13:
/* line 69 "ragel/i18n/sr_cyrl.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.tag(con, this.line_number);
    this.keyword_start = null;
  		break;
case 14:
/* line 75 "ragel/i18n/sr_cyrl.js.rl" */

    this.line_number++;
  		break;
case 15:
/* line 79 "ragel/i18n/sr_cyrl.js.rl" */

    this.last_newline = p + 1;
  		break;
case 16:
/* line 83 "ragel/i18n/sr_cyrl.js.rl" */

    this.keyword_start = this.keyword_start || p;
  		break;
case 17:
/* line 87 "ragel/i18n/sr_cyrl.js.rl" */

    this.keyword = this.bytesToString(data.slice(this.keyword_start, p)).replace(/:$/, '');
    this.keyword_start = null;
  		break;
case 18:
/* line 92 "ragel/i18n/sr_cyrl.js.rl" */

    this.next_keyword_start = p;
  		break;
case 19:
/* line 96 "ragel/i18n/sr_cyrl.js.rl" */

    p = p - 1;
    current_row = [];
    this.current_line = this.line_number;
  		break;
case 20:
/* line 102 "ragel/i18n/sr_cyrl.js.rl" */

    this.content_start = p;
  		break;
case 21:
/* line 106 "ragel/i18n/sr_cyrl.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    current_row.push(con.replace(/\\\|/, "|").replace(/\\n/, "\n").replace(/\\\\/, "\\"));
  		break;
case 22:
/* line 111 "ragel/i18n/sr_cyrl.js.rl" */

    this.listener.row(current_row, this.current_line);
  		break;
case 23:
/* line 115 "ragel/i18n/sr_cyrl.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw new Error("Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.");
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 1662 "js/lib/gherkin/lexer/sr_cyrl.js" */
			} /* action switch */
		}
	}
	if (_trigger_goto) {
		continue;
	}
	}
	if (_goto_level <= _again) {
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	p += 1;
	if (p != pe) {
		_goto_level = _resume;
		continue;
	}
	}
	if (_goto_level <= _test_eof) {
	if (p == eof) {
	__acts = _lexer_eof_actions[ this.cs];
	__nacts =  _lexer_actions[__acts];
	__acts += 1;
	while (__nacts > 0) {
		__nacts -= 1;
		__acts += 1;
		switch (_lexer_actions[__acts - 1]) {
case 23:
/* line 115 "ragel/i18n/sr_cyrl.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw new Error("Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.");
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 1701 "js/lib/gherkin/lexer/sr_cyrl.js" */
		} /* eof action switch */
	}
	if (_trigger_goto) {
		continue;
	}
}
	}
	if (_goto_level <= _out) {
		break;
	}
	}
	}

/* line 165 "ragel/i18n/sr_cyrl.js.rl" */
};


/*
 * Decode utf-8 byte sequence to string.
 */
var decodeUtf8 = function(bytes) {
  var result = "";
  var i = 0;
  var wc;
  var c;

  while (i < bytes.length) {
    /* parse as UTF-8 lead byte */
    wc = bytes[i++];
    if (wc < 0x80) {
      count = 0;
    } else if (wc < 0xC2 || wc >= 0xF8) {
      throw new Error("input is not a valid UTF-8 lead octet");
    } else if (wc < 0xE0) {
      count = 1;
      wc = (wc & 0x1F) << 6;
    } else if (wc < 0xF0) {
      count = 2;
      wc = (wc & 0x0F) << 12;
    } else /* wc < 0xF8 */ {
      count = 3;
      wc = (wc & 0x07) << 18;
    }

    /* parse trail bytes, if any */
    while (count) {
      if (!(i < bytes.length)) {
        throw new Error("short read");
      }
      if ((c = bytes[i++] ^ 0x80) > 0x3F) {
        throw new Error("input is not a valid UTF-8 trail octet");
      }
      wc |= c << (6 * --count);
      if (wc < (1 << (5 * count + 6))) {
        throw new Error("invalid non-minimal encoded input");
      }
    }

    /* handle conversion to UTF-16 if needed */
    if (wc > 0xFFFF) {
      wc -= 0x10000;
      result += String.fromCharCode(0xD800 + (wc >> 10));
      wc = 0xDC00 + (wc & 0x3FF);
    }
    result += String.fromCharCode(wc);
  }

  return result;
};

/*
 * Encode string to an array of bytes using utf8 encoding.
 *
 * Javascript internally stores character data as utf16 (like java).
 * String.charCodeAt() does *not* produce unicode points, but simply
 * reflects this internal representation. Thus, it is necessary
 * to first decode the utf-16 representation before encoding to
 * utf-8.
 */
var encodeUtf8 = function(string) {
  var bytes = [];
  var i = 0;
  var j = 0;
  var wc;

  while (i < string.length) {
    wc = string.charCodeAt(i++);
    if (wc >= 0xD800 && wc <= 0xDBFF && i < string.length && string.charCodeAt(i) >= 0xDC00 && string.charCodeAt(i) <= 0xDFFF) {
      /* decode UTF-16 */
      wc = 0x10000 + ((wc & 0x3FF) << 10) + (string.charCodeAt(i++) & 0x3FF);
    }

    /* emit lead byte */
    if (wc < 0x80) {
      bytes[j++] = wc;
      count = 0;
    } else if (wc < 0x800) {
      bytes[j++] = 0xC0 | (wc >> 6);
      count = 1;
    } else if (wc < 0x10000) {
      bytes[j++] = 0xE0 | (wc >> 12);
      count = 2;
    } else {
      /* SMP: 21-bit Unicode */
      bytes[j++] = 0xF0 | (wc >> 18);
      count = 3;
    }

    /* emit trail bytes, if any */
    while (count) {
      bytes[j++] = 0x80 | ((wc >> (6 * --count)) & 0x3F);
    }
  }

  return bytes;

};

Lexer.prototype.bytesToString = function(bytes) {
  if(typeof bytes.write == 'function') {
    // Node.js
    return bytes.toString('utf-8');
  }
  return decodeUtf8(bytes);
};

Lexer.prototype.stringToBytes = function(string) {
  return encodeUtf8(string);
};

Lexer.prototype.unindent = function(startcol, text) {
  startcol = startcol || 0;
  return text.replace(new RegExp('^[\t ]{0,' + startcol + '}', 'gm'), ''); 
};

Lexer.prototype.store_keyword_content = function(event, data, p, eof) {
  var end_point = (!this.next_keyword_start || (p == eof)) ? p : this.next_keyword_start;
  var content = this.unindent(this.start_col + 2, this.bytesToString(data.slice(this.content_start, end_point))).replace(/\s+$/,"");
  var content_lines = content.split("\n")
  var name = content_lines.shift() || "";
  name = name.trim();
  var description = content_lines.join("\n");
  this.listener[event](this.keyword, name, description, this.current_line);
  var nks = this.next_keyword_start;
  this.next_keyword_start = null;
  return nks ? nks - 1 : p;
};

Lexer.prototype.current_line_content = function(data, p) {
  var rest = Array.prototype.slice.call(data,this.last_newline, -1);
  var end = rest.indexOf(10) || -1;
  return this.bytesToString(rest.slice(0, end)).trim();
};

// Node.js export
if(typeof module !== 'undefined') {
  module.exports = Lexer;
}
// Require.js export
if (typeof define !== 'undefined') {
  if(define.amd) {
    define('gherkin/lexer/sr_cyrl', [], function() {
      return Lexer;
    });
  } else {
    define('gherkin/lexer/sr_cyrl', function(require, exports, module) {
      exports.Lexer = Lexer;
    });
  }
}

})();

}).call(this,require("buffer").Buffer)

},{"buffer":69}],230:[function(require,module,exports){
(function (Buffer){

/* line 1 "ragel/i18n/sr_latn.js.rl" */
;(function() {


/* line 126 "ragel/i18n/sr_latn.js.rl" */



/* line 11 "js/lib/gherkin/lexer/sr_latn.js" */
var _lexer_actions = [
	0, 1, 0, 1, 1, 1, 2, 1, 
	3, 1, 4, 1, 5, 1, 6, 1, 
	7, 1, 8, 1, 9, 1, 10, 1, 
	11, 1, 12, 1, 13, 1, 16, 1, 
	17, 1, 18, 1, 19, 1, 20, 1, 
	21, 1, 22, 1, 23, 2, 2, 18, 
	2, 3, 4, 2, 13, 0, 2, 14, 
	15, 2, 17, 0, 2, 17, 1, 2, 
	17, 16, 2, 17, 19, 2, 18, 6, 
	2, 18, 7, 2, 18, 8, 2, 18, 
	9, 2, 18, 10, 2, 18, 16, 2, 
	20, 21, 2, 22, 0, 2, 22, 1, 
	2, 22, 16, 2, 22, 19, 3, 4, 
	14, 15, 3, 5, 14, 15, 3, 11, 
	14, 15, 3, 12, 14, 15, 3, 13, 
	14, 15, 3, 14, 15, 18, 3, 17, 
	0, 11, 3, 17, 14, 15, 4, 2, 
	14, 15, 18, 4, 3, 4, 14, 15, 
	4, 17, 0, 14, 15, 5, 17, 0, 
	11, 14, 15
];

var _lexer_key_offsets = [
	0, 0, 20, 39, 40, 41, 43, 45, 
	50, 55, 60, 65, 69, 73, 75, 76, 
	77, 78, 79, 80, 81, 82, 83, 84, 
	85, 86, 87, 88, 89, 90, 91, 93, 
	95, 100, 107, 112, 113, 114, 115, 116, 
	117, 118, 119, 120, 121, 122, 123, 124, 
	125, 126, 127, 128, 129, 130, 143, 145, 
	147, 149, 151, 153, 155, 157, 159, 161, 
	163, 165, 167, 169, 171, 173, 175, 177, 
	179, 181, 183, 185, 187, 189, 191, 193, 
	195, 197, 199, 218, 220, 221, 223, 224, 
	226, 227, 228, 229, 230, 231, 232, 249, 
	251, 253, 255, 257, 259, 261, 263, 265, 
	267, 269, 271, 273, 275, 277, 279, 281, 
	283, 285, 287, 289, 291, 293, 295, 297, 
	299, 301, 303, 305, 307, 309, 311, 313, 
	315, 318, 320, 322, 324, 327, 329, 332, 
	334, 336, 338, 340, 342, 344, 346, 348, 
	350, 352, 354, 356, 358, 360, 362, 364, 
	366, 368, 370, 372, 375, 377, 379, 382, 
	384, 386, 387, 388, 389, 390, 391, 392, 
	393, 410, 412, 414, 416, 418, 420, 422, 
	424, 426, 428, 430, 432, 434, 436, 438, 
	440, 442, 444, 446, 448, 450, 452, 454, 
	456, 458, 460, 462, 464, 466, 468, 470, 
	472, 475, 477, 480, 482, 484, 486, 488, 
	490, 492, 494, 497, 499, 502, 504, 506, 
	508, 510, 512, 514, 516, 518, 520, 522, 
	524, 526, 530, 532, 534, 536, 538, 540, 
	542, 544, 546, 548, 550, 552, 554, 556, 
	558, 560, 562, 564, 566, 568, 570, 572, 
	574, 576, 578, 580, 583, 585, 587, 590, 
	592, 594, 595, 596, 597, 599, 600, 602, 
	603, 604, 606, 607, 608, 609, 610, 611, 
	612, 613, 615, 616, 617, 618, 619, 620, 
	621, 622, 623, 624, 626, 627, 628, 645, 
	647, 649, 651, 653, 655, 657, 659, 661, 
	663, 665, 667, 669, 671, 673, 675, 677, 
	679, 681, 683, 685, 687, 689, 691, 693, 
	695, 697, 699, 701, 703, 705, 707, 710, 
	712, 715, 717, 720, 722, 724, 726, 728, 
	730, 732, 734, 737, 739, 742, 744, 746, 
	749, 751, 753, 755, 757, 759, 761, 764, 
	766, 768, 770, 772, 774, 776, 778, 782, 
	784, 786, 788, 790, 792, 794, 796, 798, 
	800, 802, 804, 806, 808, 810, 812, 814, 
	816, 818, 820, 822, 824, 826, 828, 830, 
	832, 835, 837, 839, 842, 844, 846, 847, 
	848, 849, 858, 860, 862, 864, 866, 868, 
	870, 872, 874, 876, 878, 880, 882, 884, 
	886, 888, 890, 892, 895, 897, 899, 901, 
	903, 905, 907, 909, 912, 913, 914, 915, 
	916, 917, 919, 920, 921, 922, 923, 924, 
	925, 926, 927, 928, 929, 930, 931, 932, 
	933, 934, 935, 936, 937, 938, 939, 940, 
	941, 943, 944, 945, 947, 948, 949, 953, 
	959, 962, 964, 970, 989, 991, 993, 996, 
	998, 1000, 1002, 1004, 1006, 1008, 1010, 1013, 
	1015, 1017, 1020, 1022, 1024, 1026, 1028, 1030, 
	1032, 1035, 1037, 1039, 1041, 1043, 1045, 1047, 
	1049, 1052, 1056, 1058, 1060, 1062, 1064, 1066, 
	1069, 1071, 1073, 1075, 1077, 1079, 1081, 1083, 
	1085, 1087, 1089, 1091, 1093, 1095, 1097, 1099, 
	1101, 1103, 1105, 1107, 1108, 1109
];

var _lexer_trans_keys = [
	10, 32, 34, 35, 37, 42, 64, 65, 
	70, 73, 75, 77, 79, 80, 83, 90, 
	124, 239, 9, 13, 10, 32, 34, 35, 
	37, 42, 64, 65, 70, 73, 75, 77, 
	79, 80, 83, 90, 124, 9, 13, 34, 
	34, 10, 13, 10, 13, 10, 32, 34, 
	9, 13, 10, 32, 34, 9, 13, 10, 
	32, 34, 9, 13, 10, 32, 34, 9, 
	13, 10, 32, 9, 13, 10, 32, 9, 
	13, 10, 13, 10, 95, 70, 69, 65, 
	84, 85, 82, 69, 95, 69, 78, 68, 
	95, 37, 32, 10, 13, 10, 13, 13, 
	32, 64, 9, 10, 9, 10, 13, 32, 
	64, 11, 12, 10, 32, 64, 9, 13, 
	108, 105, 117, 110, 107, 99, 105, 111, 
	110, 97, 108, 110, 111, 115, 116, 58, 
	10, 10, 10, 32, 35, 37, 64, 70, 
	75, 77, 79, 80, 83, 9, 13, 10, 
	95, 10, 70, 10, 69, 10, 65, 10, 
	84, 10, 85, 10, 82, 10, 69, 10, 
	95, 10, 69, 10, 78, 10, 68, 10, 
	95, 10, 37, 10, 117, 10, 110, 10, 
	107, 10, 99, 10, 105, 10, 111, 10, 
	110, 10, 97, 10, 108, 10, 110, 10, 
	111, 10, 115, 10, 116, 10, 58, 10, 
	32, 34, 35, 37, 42, 64, 65, 70, 
	73, 75, 77, 79, 80, 83, 90, 124, 
	9, 13, 97, 111, 100, 32, 97, 110, 
	99, 116, 101, 112, 116, 58, 10, 10, 
	10, 32, 35, 37, 42, 64, 65, 70, 
	73, 75, 77, 79, 80, 83, 90, 9, 
	13, 10, 95, 10, 70, 10, 69, 10, 
	65, 10, 84, 10, 85, 10, 82, 10, 
	69, 10, 95, 10, 69, 10, 78, 10, 
	68, 10, 95, 10, 37, 10, 32, 10, 
	108, 10, 105, 10, 117, 10, 110, 10, 
	107, 10, 99, 10, 105, 10, 111, 10, 
	110, 10, 97, 10, 108, 10, 110, 10, 
	111, 10, 115, 10, 116, 10, 58, 10, 
	97, 10, 100, 10, 32, 97, 10, 111, 
	10, 103, 10, 117, -60, 10, 99, -121, 
	10, 10, 110, 115, 10, 100, 10, 97, 
	10, 111, 10, 98, 10, 105, 10, 110, 
	10, 97, 10, 114, 10, 105, 10, 109, 
	10, 101, 10, 114, 10, 99, 10, 101, 
	10, 110, 10, 97, 10, 114, 10, 105, 
	10, 111, 10, 97, 10, 100, 116, 10, 
	97, 10, 116, 10, 101, 111, 10, 97, 
	10, 116, 101, 107, 115, 116, 58, 10, 
	10, 10, 32, 35, 37, 42, 64, 65, 
	70, 73, 75, 77, 79, 80, 83, 90, 
	9, 13, 10, 95, 10, 70, 10, 69, 
	10, 65, 10, 84, 10, 85, 10, 82, 
	10, 69, 10, 95, 10, 69, 10, 78, 
	10, 68, 10, 95, 10, 37, 10, 32, 
	10, 108, 10, 105, 10, 117, 10, 110, 
	10, 107, 10, 99, 10, 105, 10, 111, 
	10, 110, 10, 97, 10, 108, 10, 110, 
	10, 111, 10, 115, 10, 116, 10, 58, 
	10, 97, 111, 10, 100, 10, 32, 97, 
	10, 110, 10, 99, 10, 101, 10, 112, 
	10, 111, 10, 103, 10, 117, -60, 10, 
	99, -121, 10, 10, 110, 115, 10, 100, 
	10, 97, 10, 111, 10, 98, 10, 105, 
	10, 110, 10, 97, 10, 114, 10, 105, 
	10, 109, 10, 101, 10, 114, 10, 99, 
	107, 116, 10, 101, 10, 110, 10, 97, 
	10, 114, 10, 105, 10, 111, 10, 105, 
	10, 99, 10, 114, 10, 117, 10, 107, 
	10, 116, 10, 117, 10, 114, 10, 97, 
	10, 32, 10, 115, 10, 99, 10, 101, 
	10, 110, 10, 97, 10, 114, 10, 105, 
	10, 106, 10, 97, 10, 100, 116, 10, 
	97, 10, 116, 10, 101, 111, 10, 97, 
	10, 116, 111, 103, 117, -60, 99, -121, 
	110, 115, 100, 97, 110, 111, 111, 118, 
	97, 98, 105, 110, 97, 111, 114, 122, 
	97, 100, 105, 110, 105, 109, 101, 114, 
	58, 105, 10, 10, 10, 32, 35, 37, 
	42, 64, 65, 70, 73, 75, 77, 79, 
	80, 83, 90, 9, 13, 10, 95, 10, 
	70, 10, 69, 10, 65, 10, 84, 10, 
	85, 10, 82, 10, 69, 10, 95, 10, 
	69, 10, 78, 10, 68, 10, 95, 10, 
	37, 10, 32, 10, 108, 10, 105, 10, 
	117, 10, 110, 10, 107, 10, 99, 10, 
	105, 10, 111, 10, 110, 10, 97, 10, 
	108, 10, 110, 10, 111, 10, 115, 10, 
	116, 10, 58, 10, 97, 111, 10, 100, 
	10, 32, 97, 10, 110, 10, 99, 116, 
	10, 101, 10, 112, 10, 101, 10, 107, 
	10, 111, 10, 103, 10, 117, -60, 10, 
	99, -121, 10, 10, 110, 115, 10, 100, 
	10, 97, 10, 110, 111, 10, 111, 10, 
	118, 10, 97, 10, 98, 10, 105, 10, 
	110, 10, 111, 114, 10, 122, 10, 97, 
	10, 100, 10, 105, 10, 109, 10, 101, 
	10, 114, 10, 99, 107, 116, 10, 101, 
	10, 110, 10, 97, 10, 114, 10, 105, 
	10, 111, 10, 105, 10, 99, 10, 114, 
	10, 117, 10, 107, 10, 116, 10, 117, 
	10, 114, 10, 97, 10, 32, 10, 115, 
	10, 99, 10, 101, 10, 110, 10, 97, 
	10, 114, 10, 105, 10, 106, 10, 97, 
	10, 100, 116, 10, 97, 10, 116, 10, 
	101, 111, 10, 97, 10, 116, 58, 10, 
	10, 10, 32, 35, 70, 77, 79, 124, 
	9, 13, 10, 117, 10, 110, 10, 107, 
	10, 99, 10, 105, 10, 111, 10, 110, 
	10, 97, 10, 108, 10, 110, 10, 111, 
	10, 115, 10, 116, 10, 58, 10, 111, 
	10, 103, 10, 117, -60, 10, 99, -121, 
	10, 10, 115, 10, 111, 10, 98, 10, 
	105, 10, 110, 10, 97, 99, 107, 116, 
	101, 110, 97, 114, 105, 106, 111, 105, 
	58, 105, 99, 97, 114, 117, 107, 116, 
	117, 114, 97, 32, 115, 99, 101, 110, 
	97, 114, 105, 106, 97, 100, 116, 97, 
	116, 101, 111, 97, 116, 32, 124, 9, 
	13, 10, 32, 92, 124, 9, 13, 10, 
	92, 124, 10, 92, 10, 32, 92, 124, 
	9, 13, 10, 32, 34, 35, 37, 42, 
	64, 65, 70, 73, 75, 77, 79, 80, 
	83, 90, 124, 9, 13, 10, 111, 10, 
	110, 10, 99, 116, 10, 101, 10, 112, 
	10, 101, 10, 107, 10, 111, 10, 103, 
	10, 117, -60, 10, 99, -121, 10, 10, 
	115, 10, 110, 111, 10, 111, 10, 118, 
	10, 97, 10, 98, 10, 105, 10, 110, 
	10, 111, 114, 10, 122, 10, 97, 10, 
	100, 10, 105, 10, 109, 10, 101, 10, 
	114, 10, 58, 105, 10, 99, 107, 116, 
	10, 101, 10, 110, 10, 97, 10, 114, 
	10, 105, 10, 106, 111, 10, 105, 10, 
	105, 10, 99, 10, 114, 10, 117, 10, 
	107, 10, 116, 10, 117, 10, 114, 10, 
	97, 10, 32, 10, 115, 10, 99, 10, 
	101, 10, 110, 10, 97, 10, 114, 10, 
	105, 10, 106, 187, 191, 0
];

var _lexer_single_lengths = [
	0, 18, 17, 1, 1, 2, 2, 3, 
	3, 3, 3, 2, 2, 2, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 2, 2, 
	3, 5, 3, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 11, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 17, 2, 1, 2, 1, 2, 
	1, 1, 1, 1, 1, 1, 15, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	3, 2, 2, 2, 3, 2, 3, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 3, 2, 2, 3, 2, 
	2, 1, 1, 1, 1, 1, 1, 1, 
	15, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	3, 2, 3, 2, 2, 2, 2, 2, 
	2, 2, 3, 2, 3, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 4, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 3, 2, 2, 3, 2, 
	2, 1, 1, 1, 2, 1, 2, 1, 
	1, 2, 1, 1, 1, 1, 1, 1, 
	1, 2, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 2, 1, 1, 15, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 3, 2, 
	3, 2, 3, 2, 2, 2, 2, 2, 
	2, 2, 3, 2, 3, 2, 2, 3, 
	2, 2, 2, 2, 2, 2, 3, 2, 
	2, 2, 2, 2, 2, 2, 4, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	3, 2, 2, 3, 2, 2, 1, 1, 
	1, 7, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 3, 2, 2, 2, 2, 
	2, 2, 2, 3, 1, 1, 1, 1, 
	1, 2, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	2, 1, 1, 2, 1, 1, 2, 4, 
	3, 2, 4, 17, 2, 2, 3, 2, 
	2, 2, 2, 2, 2, 2, 3, 2, 
	2, 3, 2, 2, 2, 2, 2, 2, 
	3, 2, 2, 2, 2, 2, 2, 2, 
	3, 4, 2, 2, 2, 2, 2, 3, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 1, 1, 0
];

var _lexer_range_lengths = [
	0, 1, 1, 0, 0, 0, 0, 1, 
	1, 1, 1, 1, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 1, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 1, 
	0, 0, 1, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0
];

var _lexer_index_offsets = [
	0, 0, 20, 39, 41, 43, 46, 49, 
	54, 59, 64, 69, 73, 77, 80, 82, 
	84, 86, 88, 90, 92, 94, 96, 98, 
	100, 102, 104, 106, 108, 110, 112, 115, 
	118, 123, 130, 135, 137, 139, 141, 143, 
	145, 147, 149, 151, 153, 155, 157, 159, 
	161, 163, 165, 167, 169, 171, 184, 187, 
	190, 193, 196, 199, 202, 205, 208, 211, 
	214, 217, 220, 223, 226, 229, 232, 235, 
	238, 241, 244, 247, 250, 253, 256, 259, 
	262, 265, 268, 287, 290, 292, 295, 297, 
	300, 302, 304, 306, 308, 310, 312, 329, 
	332, 335, 338, 341, 344, 347, 350, 353, 
	356, 359, 362, 365, 368, 371, 374, 377, 
	380, 383, 386, 389, 392, 395, 398, 401, 
	404, 407, 410, 413, 416, 419, 422, 425, 
	428, 432, 435, 438, 441, 445, 448, 452, 
	455, 458, 461, 464, 467, 470, 473, 476, 
	479, 482, 485, 488, 491, 494, 497, 500, 
	503, 506, 509, 512, 516, 519, 522, 526, 
	529, 532, 534, 536, 538, 540, 542, 544, 
	546, 563, 566, 569, 572, 575, 578, 581, 
	584, 587, 590, 593, 596, 599, 602, 605, 
	608, 611, 614, 617, 620, 623, 626, 629, 
	632, 635, 638, 641, 644, 647, 650, 653, 
	656, 660, 663, 667, 670, 673, 676, 679, 
	682, 685, 688, 692, 695, 699, 702, 705, 
	708, 711, 714, 717, 720, 723, 726, 729, 
	732, 735, 740, 743, 746, 749, 752, 755, 
	758, 761, 764, 767, 770, 773, 776, 779, 
	782, 785, 788, 791, 794, 797, 800, 803, 
	806, 809, 812, 815, 819, 822, 825, 829, 
	832, 835, 837, 839, 841, 844, 846, 849, 
	851, 853, 856, 858, 860, 862, 864, 866, 
	868, 870, 873, 875, 877, 879, 881, 883, 
	885, 887, 889, 891, 894, 896, 898, 915, 
	918, 921, 924, 927, 930, 933, 936, 939, 
	942, 945, 948, 951, 954, 957, 960, 963, 
	966, 969, 972, 975, 978, 981, 984, 987, 
	990, 993, 996, 999, 1002, 1005, 1008, 1012, 
	1015, 1019, 1022, 1026, 1029, 1032, 1035, 1038, 
	1041, 1044, 1047, 1051, 1054, 1058, 1061, 1064, 
	1068, 1071, 1074, 1077, 1080, 1083, 1086, 1090, 
	1093, 1096, 1099, 1102, 1105, 1108, 1111, 1116, 
	1119, 1122, 1125, 1128, 1131, 1134, 1137, 1140, 
	1143, 1146, 1149, 1152, 1155, 1158, 1161, 1164, 
	1167, 1170, 1173, 1176, 1179, 1182, 1185, 1188, 
	1191, 1195, 1198, 1201, 1205, 1208, 1211, 1213, 
	1215, 1217, 1226, 1229, 1232, 1235, 1238, 1241, 
	1244, 1247, 1250, 1253, 1256, 1259, 1262, 1265, 
	1268, 1271, 1274, 1277, 1281, 1284, 1287, 1290, 
	1293, 1296, 1299, 1302, 1306, 1308, 1310, 1312, 
	1314, 1316, 1319, 1321, 1323, 1325, 1327, 1329, 
	1331, 1333, 1335, 1337, 1339, 1341, 1343, 1345, 
	1347, 1349, 1351, 1353, 1355, 1357, 1359, 1361, 
	1363, 1366, 1368, 1370, 1373, 1375, 1377, 1381, 
	1387, 1391, 1394, 1400, 1419, 1422, 1425, 1429, 
	1432, 1435, 1438, 1441, 1444, 1447, 1450, 1454, 
	1457, 1460, 1464, 1467, 1470, 1473, 1476, 1479, 
	1482, 1486, 1489, 1492, 1495, 1498, 1501, 1504, 
	1507, 1511, 1516, 1519, 1522, 1525, 1528, 1531, 
	1535, 1538, 1541, 1544, 1547, 1550, 1553, 1556, 
	1559, 1562, 1565, 1568, 1571, 1574, 1577, 1580, 
	1583, 1586, 1589, 1592, 1594, 1596
];

var _lexer_indicies = [
	2, 1, 3, 4, 5, 6, 7, 8, 
	9, 6, 10, 11, 12, 13, 14, 15, 
	16, 17, 1, 0, 2, 1, 3, 4, 
	5, 6, 7, 8, 9, 6, 10, 11, 
	12, 13, 14, 15, 16, 1, 0, 18, 
	0, 19, 0, 21, 22, 20, 24, 25, 
	23, 28, 27, 29, 27, 26, 32, 31, 
	33, 31, 30, 32, 31, 34, 31, 30, 
	32, 31, 35, 31, 30, 37, 36, 36, 
	0, 2, 38, 38, 0, 40, 41, 39, 
	2, 0, 42, 0, 43, 0, 44, 0, 
	45, 0, 46, 0, 47, 0, 48, 0, 
	49, 0, 50, 0, 51, 0, 52, 0, 
	53, 0, 54, 0, 55, 0, 56, 0, 
	58, 59, 57, 61, 62, 60, 0, 0, 
	0, 0, 63, 64, 65, 64, 64, 67, 
	66, 63, 2, 68, 7, 68, 0, 69, 
	0, 70, 0, 71, 0, 72, 0, 73, 
	0, 74, 0, 75, 0, 76, 0, 77, 
	0, 78, 0, 79, 0, 80, 0, 81, 
	0, 82, 0, 83, 0, 84, 0, 86, 
	85, 88, 87, 88, 89, 90, 91, 90, 
	92, 93, 94, 95, 96, 97, 89, 87, 
	88, 98, 87, 88, 99, 87, 88, 100, 
	87, 88, 101, 87, 88, 102, 87, 88, 
	103, 87, 88, 104, 87, 88, 105, 87, 
	88, 106, 87, 88, 107, 87, 88, 108, 
	87, 88, 109, 87, 88, 110, 87, 88, 
	111, 87, 88, 112, 87, 88, 113, 87, 
	88, 114, 87, 88, 115, 87, 88, 116, 
	87, 88, 117, 87, 88, 118, 87, 88, 
	119, 87, 88, 120, 87, 88, 121, 87, 
	88, 122, 87, 88, 123, 87, 88, 124, 
	87, 88, 125, 87, 127, 126, 128, 129, 
	130, 131, 132, 133, 134, 131, 135, 136, 
	137, 138, 139, 140, 141, 126, 0, 142, 
	143, 0, 144, 0, 56, 70, 0, 145, 
	0, 146, 147, 0, 148, 0, 149, 0, 
	150, 0, 151, 0, 153, 152, 155, 154, 
	155, 156, 157, 158, 159, 157, 160, 161, 
	159, 162, 163, 164, 165, 166, 167, 156, 
	154, 155, 168, 154, 155, 169, 154, 155, 
	170, 154, 155, 171, 154, 155, 172, 154, 
	155, 173, 154, 155, 174, 154, 155, 175, 
	154, 155, 176, 154, 155, 177, 154, 155, 
	178, 154, 155, 179, 154, 155, 180, 154, 
	155, 181, 154, 155, 182, 154, 155, 183, 
	154, 155, 184, 154, 155, 185, 154, 155, 
	186, 154, 155, 187, 154, 155, 188, 154, 
	155, 189, 154, 155, 190, 154, 155, 191, 
	154, 155, 192, 154, 155, 193, 154, 155, 
	194, 154, 155, 195, 154, 155, 196, 154, 
	155, 197, 154, 155, 182, 154, 155, 198, 
	154, 155, 199, 154, 155, 182, 184, 154, 
	155, 200, 154, 155, 201, 154, 155, 202, 
	154, 203, 155, 193, 154, 193, 155, 154, 
	155, 204, 205, 154, 155, 206, 154, 155, 
	184, 154, 155, 207, 154, 155, 208, 154, 
	155, 209, 154, 155, 210, 154, 155, 197, 
	154, 155, 211, 154, 155, 212, 154, 155, 
	213, 154, 155, 214, 154, 155, 197, 154, 
	155, 215, 154, 155, 216, 154, 155, 217, 
	154, 155, 218, 154, 155, 219, 154, 155, 
	220, 154, 155, 197, 154, 155, 221, 154, 
	155, 222, 223, 154, 155, 224, 154, 155, 
	225, 154, 155, 184, 184, 154, 155, 226, 
	154, 155, 183, 154, 227, 0, 228, 0, 
	229, 0, 230, 0, 231, 0, 233, 232, 
	235, 234, 235, 236, 237, 238, 239, 237, 
	240, 241, 239, 242, 243, 244, 245, 246, 
	247, 236, 234, 235, 248, 234, 235, 249, 
	234, 235, 250, 234, 235, 251, 234, 235, 
	252, 234, 235, 253, 234, 235, 254, 234, 
	235, 255, 234, 235, 256, 234, 235, 257, 
	234, 235, 258, 234, 235, 259, 234, 235, 
	260, 234, 235, 261, 234, 235, 262, 234, 
	235, 263, 234, 235, 264, 234, 235, 265, 
	234, 235, 266, 234, 235, 267, 234, 235, 
	268, 234, 235, 269, 234, 235, 270, 234, 
	235, 271, 234, 235, 272, 234, 235, 273, 
	234, 235, 274, 234, 235, 275, 234, 235, 
	276, 234, 235, 277, 234, 235, 262, 234, 
	235, 278, 279, 234, 235, 280, 234, 235, 
	262, 264, 234, 235, 281, 234, 235, 282, 
	234, 235, 283, 234, 235, 276, 234, 235, 
	284, 234, 235, 285, 234, 235, 286, 234, 
	287, 235, 273, 234, 273, 235, 234, 235, 
	288, 289, 234, 235, 290, 234, 235, 264, 
	234, 235, 291, 234, 235, 292, 234, 235, 
	293, 234, 235, 294, 234, 235, 277, 234, 
	235, 295, 234, 235, 296, 234, 235, 297, 
	234, 235, 298, 234, 235, 277, 234, 235, 
	299, 300, 301, 234, 235, 302, 234, 235, 
	303, 234, 235, 304, 234, 235, 305, 234, 
	235, 306, 234, 235, 277, 234, 235, 307, 
	234, 235, 294, 234, 235, 308, 234, 235, 
	309, 234, 235, 310, 234, 235, 311, 234, 
	235, 312, 234, 235, 313, 234, 235, 314, 
	234, 235, 315, 234, 235, 316, 234, 235, 
	317, 234, 235, 318, 234, 235, 319, 234, 
	235, 320, 234, 235, 321, 234, 235, 322, 
	234, 235, 294, 234, 235, 323, 234, 235, 
	324, 325, 234, 235, 326, 234, 235, 327, 
	234, 235, 264, 264, 234, 235, 328, 234, 
	235, 263, 234, 329, 0, 330, 0, 331, 
	0, 332, 79, 0, 79, 0, 333, 334, 
	0, 335, 0, 70, 0, 336, 337, 0, 
	338, 0, 339, 0, 230, 0, 340, 0, 
	341, 0, 342, 0, 83, 0, 343, 344, 
	0, 345, 0, 346, 0, 347, 0, 348, 
	0, 339, 0, 349, 0, 350, 0, 351, 
	0, 352, 0, 353, 354, 0, 356, 355, 
	358, 357, 358, 359, 360, 361, 362, 360, 
	363, 364, 362, 365, 366, 367, 368, 369, 
	370, 359, 357, 358, 371, 357, 358, 372, 
	357, 358, 373, 357, 358, 374, 357, 358, 
	375, 357, 358, 376, 357, 358, 377, 357, 
	358, 378, 357, 358, 379, 357, 358, 380, 
	357, 358, 381, 357, 358, 382, 357, 358, 
	383, 357, 358, 384, 357, 358, 385, 357, 
	358, 386, 357, 358, 387, 357, 358, 388, 
	357, 358, 389, 357, 358, 390, 357, 358, 
	391, 357, 358, 392, 357, 358, 393, 357, 
	358, 394, 357, 358, 395, 357, 358, 396, 
	357, 358, 397, 357, 358, 398, 357, 358, 
	399, 357, 358, 400, 357, 358, 385, 357, 
	358, 401, 402, 357, 358, 403, 357, 358, 
	385, 387, 357, 358, 404, 357, 358, 405, 
	406, 357, 358, 407, 357, 358, 399, 357, 
	358, 408, 357, 358, 398, 357, 358, 409, 
	357, 358, 410, 357, 358, 411, 357, 412, 
	358, 396, 357, 396, 358, 357, 358, 413, 
	414, 357, 358, 415, 357, 358, 387, 357, 
	358, 416, 417, 357, 358, 418, 357, 358, 
	419, 357, 358, 400, 357, 358, 420, 357, 
	358, 421, 357, 358, 419, 357, 358, 422, 
	423, 357, 358, 424, 357, 358, 425, 357, 
	358, 420, 357, 358, 426, 357, 358, 427, 
	357, 358, 428, 357, 358, 400, 357, 358, 
	429, 430, 431, 357, 358, 432, 357, 358, 
	433, 357, 358, 434, 357, 358, 435, 357, 
	358, 436, 357, 358, 400, 357, 358, 437, 
	357, 358, 419, 357, 358, 438, 357, 358, 
	439, 357, 358, 440, 357, 358, 441, 357, 
	358, 442, 357, 358, 443, 357, 358, 444, 
	357, 358, 445, 357, 358, 446, 357, 358, 
	447, 357, 358, 448, 357, 358, 449, 357, 
	358, 450, 357, 358, 451, 357, 358, 452, 
	357, 358, 419, 357, 358, 453, 357, 358, 
	454, 455, 357, 358, 456, 357, 358, 457, 
	357, 358, 387, 387, 357, 358, 458, 357, 
	358, 386, 357, 459, 0, 461, 460, 463, 
	462, 463, 464, 465, 466, 467, 468, 465, 
	464, 462, 463, 469, 462, 463, 470, 462, 
	463, 471, 462, 463, 472, 462, 463, 473, 
	462, 463, 474, 462, 463, 475, 462, 463, 
	476, 462, 463, 477, 462, 463, 478, 462, 
	463, 479, 462, 463, 480, 462, 463, 481, 
	462, 463, 482, 462, 463, 483, 462, 463, 
	484, 462, 463, 485, 462, 486, 463, 477, 
	462, 477, 463, 462, 463, 487, 462, 463, 
	488, 462, 463, 489, 462, 463, 490, 462, 
	463, 491, 462, 463, 481, 462, 492, 493, 
	494, 0, 495, 0, 496, 0, 497, 0, 
	498, 0, 499, 0, 500, 501, 0, 354, 
	0, 353, 0, 502, 0, 503, 0, 150, 
	0, 504, 0, 505, 0, 506, 0, 507, 
	0, 508, 0, 509, 0, 510, 0, 511, 
	0, 512, 0, 513, 0, 514, 0, 515, 
	0, 516, 0, 517, 0, 518, 0, 503, 
	0, 519, 0, 520, 521, 0, 522, 0, 
	523, 0, 70, 70, 0, 524, 0, 69, 
	0, 525, 526, 525, 0, 529, 528, 530, 
	531, 528, 527, 0, 533, 534, 532, 0, 
	533, 532, 529, 535, 533, 534, 535, 532, 
	529, 536, 537, 538, 539, 540, 541, 542, 
	543, 540, 544, 545, 546, 547, 548, 549, 
	550, 536, 0, 88, 551, 87, 88, 552, 
	87, 88, 553, 554, 87, 88, 555, 87, 
	88, 123, 87, 88, 556, 87, 88, 122, 
	87, 88, 557, 87, 88, 558, 87, 88, 
	559, 87, 560, 88, 120, 87, 120, 88, 
	87, 88, 561, 87, 88, 562, 563, 87, 
	88, 564, 87, 88, 565, 87, 88, 124, 
	87, 88, 566, 87, 88, 567, 87, 88, 
	565, 87, 88, 568, 569, 87, 88, 570, 
	87, 88, 571, 87, 88, 566, 87, 88, 
	572, 87, 88, 573, 87, 88, 574, 87, 
	88, 575, 87, 88, 125, 124, 87, 88, 
	576, 577, 578, 87, 88, 579, 87, 88, 
	580, 87, 88, 581, 87, 88, 582, 87, 
	88, 583, 87, 88, 584, 124, 87, 88, 
	124, 87, 88, 585, 87, 88, 565, 87, 
	88, 586, 87, 88, 587, 87, 88, 588, 
	87, 88, 589, 87, 88, 590, 87, 88, 
	591, 87, 88, 592, 87, 88, 593, 87, 
	88, 594, 87, 88, 595, 87, 88, 596, 
	87, 88, 597, 87, 88, 598, 87, 88, 
	599, 87, 88, 600, 87, 88, 565, 87, 
	601, 0, 1, 0, 602, 0
];

var _lexer_trans_targs = [
	0, 2, 2, 3, 13, 15, 29, 32, 
	35, 37, 83, 257, 262, 273, 411, 439, 
	446, 507, 4, 5, 6, 7, 6, 6, 
	7, 6, 8, 8, 8, 9, 8, 8, 
	8, 9, 10, 11, 12, 2, 12, 13, 
	2, 14, 16, 17, 18, 19, 20, 21, 
	22, 23, 24, 25, 26, 27, 28, 509, 
	30, 31, 2, 14, 31, 2, 14, 33, 
	34, 2, 33, 32, 34, 36, 29, 38, 
	39, 40, 41, 42, 43, 44, 45, 46, 
	47, 48, 49, 50, 51, 52, 53, 52, 
	53, 53, 2, 54, 68, 452, 459, 464, 
	472, 481, 55, 56, 57, 58, 59, 60, 
	61, 62, 63, 64, 65, 66, 67, 2, 
	69, 70, 71, 72, 73, 74, 75, 76, 
	77, 78, 79, 80, 81, 82, 2, 2, 
	3, 13, 15, 29, 32, 35, 37, 83, 
	257, 262, 273, 411, 439, 446, 84, 86, 
	85, 87, 88, 161, 89, 90, 91, 92, 
	93, 94, 93, 94, 94, 2, 95, 109, 
	110, 112, 126, 129, 134, 142, 147, 154, 
	96, 97, 98, 99, 100, 101, 102, 103, 
	104, 105, 106, 107, 108, 2, 82, 111, 
	109, 113, 114, 115, 116, 117, 118, 119, 
	120, 121, 122, 123, 124, 125, 127, 128, 
	130, 131, 132, 133, 135, 137, 136, 138, 
	139, 140, 141, 143, 144, 145, 146, 148, 
	149, 150, 151, 152, 153, 155, 156, 159, 
	157, 158, 160, 162, 163, 164, 165, 166, 
	167, 168, 167, 168, 168, 2, 169, 183, 
	184, 186, 200, 207, 212, 220, 225, 250, 
	170, 171, 172, 173, 174, 175, 176, 177, 
	178, 179, 180, 181, 182, 2, 82, 185, 
	183, 187, 188, 189, 190, 191, 192, 193, 
	194, 195, 196, 197, 198, 199, 201, 203, 
	202, 204, 205, 206, 208, 209, 210, 211, 
	213, 215, 214, 216, 217, 218, 219, 221, 
	222, 223, 224, 226, 232, 234, 227, 228, 
	229, 230, 231, 233, 235, 236, 237, 238, 
	239, 240, 241, 242, 243, 244, 245, 246, 
	247, 248, 249, 251, 252, 255, 253, 254, 
	256, 258, 259, 260, 261, 263, 265, 264, 
	266, 269, 267, 268, 270, 271, 272, 274, 
	279, 275, 276, 277, 278, 280, 281, 282, 
	283, 284, 382, 285, 286, 285, 286, 286, 
	2, 287, 301, 302, 304, 318, 327, 332, 
	342, 350, 375, 288, 289, 290, 291, 292, 
	293, 294, 295, 296, 297, 298, 299, 300, 
	2, 82, 303, 301, 305, 306, 307, 308, 
	309, 310, 311, 312, 313, 314, 315, 316, 
	317, 319, 321, 320, 322, 323, 325, 324, 
	326, 328, 329, 330, 331, 333, 335, 334, 
	336, 339, 337, 338, 340, 341, 343, 346, 
	344, 345, 347, 348, 349, 351, 357, 359, 
	352, 353, 354, 355, 356, 358, 360, 361, 
	362, 363, 364, 365, 366, 367, 368, 369, 
	370, 371, 372, 373, 374, 376, 377, 380, 
	378, 379, 381, 383, 384, 385, 384, 385, 
	385, 2, 386, 400, 405, 387, 388, 389, 
	390, 391, 392, 393, 394, 395, 396, 397, 
	398, 399, 82, 401, 402, 403, 404, 406, 
	407, 408, 409, 410, 412, 420, 423, 413, 
	414, 415, 416, 417, 418, 419, 421, 422, 
	424, 425, 426, 427, 428, 429, 430, 431, 
	432, 433, 434, 435, 436, 437, 438, 440, 
	441, 444, 442, 443, 445, 446, 447, 448, 
	450, 451, 449, 447, 448, 449, 447, 450, 
	451, 3, 13, 15, 29, 32, 35, 37, 
	83, 257, 262, 273, 411, 439, 446, 453, 
	454, 455, 457, 456, 458, 460, 461, 462, 
	463, 465, 466, 469, 467, 468, 470, 471, 
	473, 476, 474, 475, 477, 478, 479, 480, 
	482, 489, 491, 483, 484, 485, 486, 487, 
	488, 490, 492, 493, 494, 495, 496, 497, 
	498, 499, 500, 501, 502, 503, 504, 505, 
	506, 508, 0
];

var _lexer_trans_actions = [
	43, 0, 54, 3, 1, 0, 29, 1, 
	29, 29, 29, 29, 29, 29, 29, 29, 
	35, 0, 0, 0, 7, 139, 48, 0, 
	102, 9, 5, 45, 134, 45, 0, 33, 
	122, 33, 33, 0, 11, 106, 0, 0, 
	114, 25, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 57, 149, 126, 0, 110, 23, 0, 
	27, 118, 27, 51, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 57, 144, 0, 
	54, 0, 69, 33, 84, 84, 84, 84, 
	84, 84, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 13, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 13, 31, 130, 
	60, 57, 31, 63, 57, 63, 63, 63, 
	63, 63, 63, 63, 63, 66, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	57, 144, 0, 54, 0, 78, 33, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 19, 19, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	57, 144, 0, 54, 0, 72, 33, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 15, 15, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 57, 144, 0, 54, 0, 
	75, 33, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	17, 17, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 57, 144, 0, 54, 
	0, 81, 84, 84, 84, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 21, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 37, 
	37, 54, 37, 87, 0, 0, 39, 0, 
	0, 93, 90, 41, 96, 90, 96, 96, 
	96, 96, 96, 96, 96, 96, 99, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0
];

var _lexer_eof_actions = [
	0, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43
];

var lexer_start = 1;
var lexer_first_final = 509;
var lexer_error = 0;

var lexer_en_main = 1;


/* line 129 "ragel/i18n/sr_latn.js.rl" */

/* line 130 "ragel/i18n/sr_latn.js.rl" */

/* line 131 "ragel/i18n/sr_latn.js.rl" */

/* line 132 "ragel/i18n/sr_latn.js.rl" */

var Lexer = function(listener) {
  // Check that listener has the required functions
  var events = ['comment', 'tag', 'feature', 'background', 'scenario', 'scenario_outline', 'examples', 'step', 'doc_string', 'row', 'eof'];
  for(var i=0, len=events.length; i<len; i++) {
    var event = events[i];
    if(typeof listener[event] != 'function') {
      throw new Error("Error. No " + event + " function exists on " + JSON.stringify(listener));
    }
  }
  this.listener = listener;
};

Lexer.prototype.scan = function(data) {
  var ending = "\n%_FEATURE_END_%";
  if(typeof data == 'string') {
    data = this.stringToBytes(data + ending);
  } else if(typeof Buffer != 'undefined' && Buffer.isBuffer(data)) {
    // Node.js
    var buf = new Buffer(data.length + ending.length);
    data.copy(buf, 0, 0);
    new Buffer(ending).copy(buf, data.length, 0);
    data = buf;
  }
  var eof = pe = data.length;
  var p = 0;

  this.line_number = 1;
  this.last_newline = 0;
  var signedCharValue=function(v){return v > 127 ? v-256 : v; };

  
/* line 919 "js/lib/gherkin/lexer/sr_latn.js" */
{
	  this.cs = lexer_start;
} /* JSCodeGen::writeInit */

/* line 164 "ragel/i18n/sr_latn.js.rl" */
  
/* line 926 "js/lib/gherkin/lexer/sr_latn.js" */
{
	var _klen, _trans, _keys, _ps, _widec, _acts, _nacts;
	var _goto_level, _resume, _eof_trans, _again, _test_eof;
	var _out;
	_klen = _trans = _keys = _acts = _nacts = null;
	_goto_level = 0;
	_resume = 10;
	_eof_trans = 15;
	_again = 20;
	_test_eof = 30;
	_out = 40;
	while (true) {
	_trigger_goto = false;
	if (_goto_level <= 0) {
	if (p == pe) {
		_goto_level = _test_eof;
		continue;
	}
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	}
	if (_goto_level <= _resume) {
	_keys = _lexer_key_offsets[ this.cs];
	_trans = _lexer_index_offsets[ this.cs];
	_klen = _lexer_single_lengths[ this.cs];
	_break_match = false;
	
	do {
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + _klen - 1;

	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + ( (_upper - _lower) >> 1 );

	        if (( signedCharValue(data[p])) < _lexer_trans_keys[_mid]) {
	           _upper = _mid - 1;
	        } else if (( signedCharValue(data[p])) > _lexer_trans_keys[_mid]) {
	           _lower = _mid + 1;
	        } else {
	           _trans += (_mid - _keys);
	           _break_match = true;
	           break;
	        };
	     } /* while */
	     if (_break_match) { break; }
	     _keys += _klen;
	     _trans += _klen;
	  }
	  _klen = _lexer_range_lengths[ this.cs];
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + (_klen << 1) - 2;
	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + (((_upper-_lower) >> 1) & ~1);
	        if (( signedCharValue(data[p])) < _lexer_trans_keys[_mid]) {
	          _upper = _mid - 2;
	         } else if (( signedCharValue(data[p])) > _lexer_trans_keys[_mid+1]) {
	          _lower = _mid + 2;
	        } else {
	          _trans += ((_mid - _keys) >> 1);
	          _break_match = true;
	          break;
	        }
	     } /* while */
	     if (_break_match) { break; }
	     _trans += _klen
	  }
	} while (false);
	_trans = _lexer_indicies[_trans];
	 this.cs = _lexer_trans_targs[_trans];
	if (_lexer_trans_actions[_trans] != 0) {
		_acts = _lexer_trans_actions[_trans];
		_nacts = _lexer_actions[_acts];
		_acts += 1;
		while (_nacts > 0) {
			_nacts -= 1;
			_acts += 1;
			switch (_lexer_actions[_acts - 1]) {
case 0:
/* line 6 "ragel/i18n/sr_latn.js.rl" */

    this.content_start = p;
    this.current_line = this.line_number;
    this.start_col = p - this.last_newline - (this.keyword+':').length;
  		break;
case 1:
/* line 12 "ragel/i18n/sr_latn.js.rl" */

    this.current_line = this.line_number;
    this.start_col = p - this.last_newline;
  		break;
case 2:
/* line 17 "ragel/i18n/sr_latn.js.rl" */

    this.content_start = p;
  		break;
case 3:
/* line 21 "ragel/i18n/sr_latn.js.rl" */

    this.docstring_content_type_start = p;
  		break;
case 4:
/* line 25 "ragel/i18n/sr_latn.js.rl" */

    this.docstring_content_type_end = p;
  		break;
case 5:
/* line 29 "ragel/i18n/sr_latn.js.rl" */

    var con = this.unindent(
      this.start_col, 
      this.bytesToString(data.slice(this.content_start, this.next_keyword_start-1)).replace(/(\r?\n)?([\t ])*$/, '').replace(/\\\"\\\"\\\"/mg, '"""')
    );
    var con_type = this.bytesToString(data.slice(this.docstring_content_type_start, this.docstring_content_type_end)).trim();
    this.listener.doc_string(con_type, con, this.current_line); 
  		break;
case 6:
/* line 38 "ragel/i18n/sr_latn.js.rl" */

    p = this.store_keyword_content('feature', data, p, eof);
  		break;
case 7:
/* line 42 "ragel/i18n/sr_latn.js.rl" */

    p = this.store_keyword_content('background', data, p, eof);
  		break;
case 8:
/* line 46 "ragel/i18n/sr_latn.js.rl" */

    p = this.store_keyword_content('scenario', data, p, eof);
  		break;
case 9:
/* line 50 "ragel/i18n/sr_latn.js.rl" */

    p = this.store_keyword_content('scenario_outline', data, p, eof);
  		break;
case 10:
/* line 54 "ragel/i18n/sr_latn.js.rl" */

    p = this.store_keyword_content('examples', data, p, eof);
  		break;
case 11:
/* line 58 "ragel/i18n/sr_latn.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.step(this.keyword, con, this.current_line);
  		break;
case 12:
/* line 63 "ragel/i18n/sr_latn.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.comment(con, this.line_number);
    this.keyword_start = null;
  		break;
case 13:
/* line 69 "ragel/i18n/sr_latn.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.tag(con, this.line_number);
    this.keyword_start = null;
  		break;
case 14:
/* line 75 "ragel/i18n/sr_latn.js.rl" */

    this.line_number++;
  		break;
case 15:
/* line 79 "ragel/i18n/sr_latn.js.rl" */

    this.last_newline = p + 1;
  		break;
case 16:
/* line 83 "ragel/i18n/sr_latn.js.rl" */

    this.keyword_start = this.keyword_start || p;
  		break;
case 17:
/* line 87 "ragel/i18n/sr_latn.js.rl" */

    this.keyword = this.bytesToString(data.slice(this.keyword_start, p)).replace(/:$/, '');
    this.keyword_start = null;
  		break;
case 18:
/* line 92 "ragel/i18n/sr_latn.js.rl" */

    this.next_keyword_start = p;
  		break;
case 19:
/* line 96 "ragel/i18n/sr_latn.js.rl" */

    p = p - 1;
    current_row = [];
    this.current_line = this.line_number;
  		break;
case 20:
/* line 102 "ragel/i18n/sr_latn.js.rl" */

    this.content_start = p;
  		break;
case 21:
/* line 106 "ragel/i18n/sr_latn.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    current_row.push(con.replace(/\\\|/, "|").replace(/\\n/, "\n").replace(/\\\\/, "\\"));
  		break;
case 22:
/* line 111 "ragel/i18n/sr_latn.js.rl" */

    this.listener.row(current_row, this.current_line);
  		break;
case 23:
/* line 115 "ragel/i18n/sr_latn.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw new Error("Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.");
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 1153 "js/lib/gherkin/lexer/sr_latn.js" */
			} /* action switch */
		}
	}
	if (_trigger_goto) {
		continue;
	}
	}
	if (_goto_level <= _again) {
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	p += 1;
	if (p != pe) {
		_goto_level = _resume;
		continue;
	}
	}
	if (_goto_level <= _test_eof) {
	if (p == eof) {
	__acts = _lexer_eof_actions[ this.cs];
	__nacts =  _lexer_actions[__acts];
	__acts += 1;
	while (__nacts > 0) {
		__nacts -= 1;
		__acts += 1;
		switch (_lexer_actions[__acts - 1]) {
case 23:
/* line 115 "ragel/i18n/sr_latn.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw new Error("Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.");
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 1192 "js/lib/gherkin/lexer/sr_latn.js" */
		} /* eof action switch */
	}
	if (_trigger_goto) {
		continue;
	}
}
	}
	if (_goto_level <= _out) {
		break;
	}
	}
	}

/* line 165 "ragel/i18n/sr_latn.js.rl" */
};


/*
 * Decode utf-8 byte sequence to string.
 */
var decodeUtf8 = function(bytes) {
  var result = "";
  var i = 0;
  var wc;
  var c;

  while (i < bytes.length) {
    /* parse as UTF-8 lead byte */
    wc = bytes[i++];
    if (wc < 0x80) {
      count = 0;
    } else if (wc < 0xC2 || wc >= 0xF8) {
      throw new Error("input is not a valid UTF-8 lead octet");
    } else if (wc < 0xE0) {
      count = 1;
      wc = (wc & 0x1F) << 6;
    } else if (wc < 0xF0) {
      count = 2;
      wc = (wc & 0x0F) << 12;
    } else /* wc < 0xF8 */ {
      count = 3;
      wc = (wc & 0x07) << 18;
    }

    /* parse trail bytes, if any */
    while (count) {
      if (!(i < bytes.length)) {
        throw new Error("short read");
      }
      if ((c = bytes[i++] ^ 0x80) > 0x3F) {
        throw new Error("input is not a valid UTF-8 trail octet");
      }
      wc |= c << (6 * --count);
      if (wc < (1 << (5 * count + 6))) {
        throw new Error("invalid non-minimal encoded input");
      }
    }

    /* handle conversion to UTF-16 if needed */
    if (wc > 0xFFFF) {
      wc -= 0x10000;
      result += String.fromCharCode(0xD800 + (wc >> 10));
      wc = 0xDC00 + (wc & 0x3FF);
    }
    result += String.fromCharCode(wc);
  }

  return result;
};

/*
 * Encode string to an array of bytes using utf8 encoding.
 *
 * Javascript internally stores character data as utf16 (like java).
 * String.charCodeAt() does *not* produce unicode points, but simply
 * reflects this internal representation. Thus, it is necessary
 * to first decode the utf-16 representation before encoding to
 * utf-8.
 */
var encodeUtf8 = function(string) {
  var bytes = [];
  var i = 0;
  var j = 0;
  var wc;

  while (i < string.length) {
    wc = string.charCodeAt(i++);
    if (wc >= 0xD800 && wc <= 0xDBFF && i < string.length && string.charCodeAt(i) >= 0xDC00 && string.charCodeAt(i) <= 0xDFFF) {
      /* decode UTF-16 */
      wc = 0x10000 + ((wc & 0x3FF) << 10) + (string.charCodeAt(i++) & 0x3FF);
    }

    /* emit lead byte */
    if (wc < 0x80) {
      bytes[j++] = wc;
      count = 0;
    } else if (wc < 0x800) {
      bytes[j++] = 0xC0 | (wc >> 6);
      count = 1;
    } else if (wc < 0x10000) {
      bytes[j++] = 0xE0 | (wc >> 12);
      count = 2;
    } else {
      /* SMP: 21-bit Unicode */
      bytes[j++] = 0xF0 | (wc >> 18);
      count = 3;
    }

    /* emit trail bytes, if any */
    while (count) {
      bytes[j++] = 0x80 | ((wc >> (6 * --count)) & 0x3F);
    }
  }

  return bytes;

};

Lexer.prototype.bytesToString = function(bytes) {
  if(typeof bytes.write == 'function') {
    // Node.js
    return bytes.toString('utf-8');
  }
  return decodeUtf8(bytes);
};

Lexer.prototype.stringToBytes = function(string) {
  return encodeUtf8(string);
};

Lexer.prototype.unindent = function(startcol, text) {
  startcol = startcol || 0;
  return text.replace(new RegExp('^[\t ]{0,' + startcol + '}', 'gm'), ''); 
};

Lexer.prototype.store_keyword_content = function(event, data, p, eof) {
  var end_point = (!this.next_keyword_start || (p == eof)) ? p : this.next_keyword_start;
  var content = this.unindent(this.start_col + 2, this.bytesToString(data.slice(this.content_start, end_point))).replace(/\s+$/,"");
  var content_lines = content.split("\n")
  var name = content_lines.shift() || "";
  name = name.trim();
  var description = content_lines.join("\n");
  this.listener[event](this.keyword, name, description, this.current_line);
  var nks = this.next_keyword_start;
  this.next_keyword_start = null;
  return nks ? nks - 1 : p;
};

Lexer.prototype.current_line_content = function(data, p) {
  var rest = Array.prototype.slice.call(data,this.last_newline, -1);
  var end = rest.indexOf(10) || -1;
  return this.bytesToString(rest.slice(0, end)).trim();
};

// Node.js export
if(typeof module !== 'undefined') {
  module.exports = Lexer;
}
// Require.js export
if (typeof define !== 'undefined') {
  if(define.amd) {
    define('gherkin/lexer/sr_latn', [], function() {
      return Lexer;
    });
  } else {
    define('gherkin/lexer/sr_latn', function(require, exports, module) {
      exports.Lexer = Lexer;
    });
  }
}

})();

}).call(this,require("buffer").Buffer)

},{"buffer":69}],231:[function(require,module,exports){
(function (Buffer){

/* line 1 "ragel/i18n/sv.js.rl" */
;(function() {


/* line 126 "ragel/i18n/sv.js.rl" */



/* line 11 "js/lib/gherkin/lexer/sv.js" */
var _lexer_actions = [
	0, 1, 0, 1, 1, 1, 2, 1, 
	3, 1, 4, 1, 5, 1, 6, 1, 
	7, 1, 8, 1, 9, 1, 10, 1, 
	11, 1, 12, 1, 13, 1, 16, 1, 
	17, 1, 18, 1, 19, 1, 20, 1, 
	21, 1, 22, 1, 23, 2, 2, 18, 
	2, 3, 4, 2, 13, 0, 2, 14, 
	15, 2, 17, 0, 2, 17, 1, 2, 
	17, 16, 2, 17, 19, 2, 18, 6, 
	2, 18, 7, 2, 18, 8, 2, 18, 
	9, 2, 18, 10, 2, 18, 16, 2, 
	20, 21, 2, 22, 0, 2, 22, 1, 
	2, 22, 16, 2, 22, 19, 3, 4, 
	14, 15, 3, 5, 14, 15, 3, 11, 
	14, 15, 3, 12, 14, 15, 3, 13, 
	14, 15, 3, 14, 15, 18, 3, 17, 
	0, 11, 3, 17, 14, 15, 4, 2, 
	14, 15, 18, 4, 3, 4, 14, 15, 
	4, 17, 0, 14, 15, 5, 17, 0, 
	11, 14, 15
];

var _lexer_key_offsets = [
	0, 0, 19, 37, 38, 39, 41, 43, 
	48, 53, 58, 63, 67, 71, 73, 74, 
	75, 76, 77, 78, 79, 80, 81, 82, 
	83, 84, 85, 86, 87, 88, 89, 91, 
	93, 98, 105, 110, 111, 112, 113, 114, 
	115, 116, 117, 118, 119, 120, 121, 122, 
	123, 124, 125, 126, 127, 128, 129, 143, 
	145, 147, 149, 151, 153, 155, 157, 159, 
	161, 163, 165, 167, 169, 171, 173, 191, 
	192, 193, 194, 195, 196, 197, 198, 199, 
	200, 201, 216, 218, 220, 222, 224, 226, 
	228, 230, 232, 234, 236, 238, 240, 242, 
	244, 246, 248, 250, 252, 254, 256, 258, 
	260, 262, 264, 266, 268, 270, 272, 274, 
	276, 278, 280, 282, 284, 286, 288, 290, 
	292, 294, 296, 298, 300, 302, 304, 306, 
	308, 310, 312, 314, 316, 319, 321, 323, 
	325, 327, 329, 331, 333, 336, 338, 340, 
	342, 344, 345, 346, 347, 348, 349, 350, 
	351, 352, 353, 364, 366, 368, 370, 372, 
	374, 376, 378, 380, 382, 384, 386, 388, 
	390, 392, 394, 396, 398, 400, 402, 404, 
	406, 408, 410, 412, 414, 416, 418, 420, 
	422, 424, 426, 428, 430, 432, 434, 436, 
	438, 440, 443, 445, 447, 449, 451, 453, 
	455, 457, 459, 461, 463, 465, 467, 469, 
	471, 473, 475, 477, 479, 482, 484, 486, 
	487, 488, 489, 490, 491, 492, 493, 494, 
	501, 503, 505, 507, 509, 511, 513, 515, 
	517, 518, 519, 520, 521, 522, 523, 524, 
	525, 526, 527, 528, 530, 531, 532, 533, 
	534, 535, 536, 537, 539, 540, 541, 557, 
	559, 561, 563, 565, 567, 569, 571, 573, 
	575, 577, 579, 581, 583, 585, 587, 589, 
	591, 593, 595, 597, 599, 601, 603, 605, 
	607, 609, 611, 613, 615, 617, 619, 621, 
	623, 625, 627, 629, 631, 633, 635, 637, 
	639, 641, 643, 645, 647, 649, 651, 653, 
	655, 657, 659, 661, 663, 665, 667, 669, 
	671, 674, 676, 678, 680, 682, 684, 686, 
	688, 691, 693, 695, 697, 698, 699, 700, 
	704, 710, 713, 715, 721, 739, 741, 743, 
	745, 747, 749, 751, 753, 755, 757, 759, 
	761, 763, 765, 767, 769, 771, 773, 775, 
	777, 780, 782, 784, 786, 788, 790, 792, 
	794, 795, 796
];

var _lexer_trans_keys = [
	10, 32, 34, 35, 37, 42, 64, 65, 
	66, 69, 71, 77, 78, 79, 83, 124, 
	239, 9, 13, 10, 32, 34, 35, 37, 
	42, 64, 65, 66, 69, 71, 77, 78, 
	79, 83, 124, 9, 13, 34, 34, 10, 
	13, 10, 13, 10, 32, 34, 9, 13, 
	10, 32, 34, 9, 13, 10, 32, 34, 
	9, 13, 10, 32, 34, 9, 13, 10, 
	32, 9, 13, 10, 32, 9, 13, 10, 
	13, 10, 95, 70, 69, 65, 84, 85, 
	82, 69, 95, 69, 78, 68, 95, 37, 
	32, 10, 13, 10, 13, 13, 32, 64, 
	9, 10, 9, 10, 13, 32, 64, 11, 
	12, 10, 32, 64, 9, 13, 98, 115, 
	116, 114, 97, 107, 116, 32, 83, 99, 
	101, 110, 97, 114, 105, 111, 58, 10, 
	10, 10, 32, 35, 37, 42, 64, 69, 
	71, 77, 78, 79, 83, 9, 13, 10, 
	95, 10, 70, 10, 69, 10, 65, 10, 
	84, 10, 85, 10, 82, 10, 69, 10, 
	95, 10, 69, 10, 78, 10, 68, 10, 
	95, 10, 37, 10, 32, 10, 32, 34, 
	35, 37, 42, 64, 65, 66, 69, 71, 
	77, 78, 79, 83, 124, 9, 13, 97, 
	107, 103, 114, 117, 110, 100, 58, 10, 
	10, 10, 32, 35, 37, 42, 64, 65, 
	69, 71, 77, 78, 79, 83, 9, 13, 
	10, 95, 10, 70, 10, 69, 10, 65, 
	10, 84, 10, 85, 10, 82, 10, 69, 
	10, 95, 10, 69, 10, 78, 10, 68, 
	10, 95, 10, 37, 10, 32, 10, 98, 
	10, 115, 10, 116, 10, 114, 10, 97, 
	10, 107, 10, 116, 10, 32, 10, 83, 
	10, 99, 10, 101, 10, 110, 10, 97, 
	10, 114, 10, 105, 10, 111, 10, 58, 
	10, 103, 10, 101, 10, 110, 10, 115, 
	10, 107, 10, 97, 10, 112, 10, 105, 
	10, 118, 10, 101, 10, 116, 10, 101, 
	10, 110, -61, 10, -92, 10, 10, 114, 
	10, 99, 10, 104, -61, 10, 99, -91, 
	10, 10, 101, 10, 110, 10, 97, 10, 
	114, 10, 105, 10, 111, 10, 58, 109, 
	10, 97, 10, 108, 10, 108, 103, 120, 
	101, 110, 115, 107, 97, 112, 58, 10, 
	10, 10, 32, 35, 37, 64, 65, 66, 
	69, 83, 9, 13, 10, 95, 10, 70, 
	10, 69, 10, 65, 10, 84, 10, 85, 
	10, 82, 10, 69, 10, 95, 10, 69, 
	10, 78, 10, 68, 10, 95, 10, 37, 
	10, 98, 10, 115, 10, 116, 10, 114, 
	10, 97, 10, 107, 10, 116, 10, 32, 
	10, 83, 10, 99, 10, 101, 10, 110, 
	10, 97, 10, 114, 10, 105, 10, 111, 
	10, 58, 10, 97, 10, 107, 10, 103, 
	10, 114, 10, 117, 10, 110, 10, 100, 
	10, 103, 120, 10, 101, 10, 110, 10, 
	115, 10, 107, 10, 97, 10, 112, 10, 
	101, 10, 109, 10, 112, 10, 101, 10, 
	108, 10, 99, 10, 101, 10, 110, 10, 
	97, 10, 114, 10, 105, 10, 111, 10, 
	58, 109, 10, 97, 10, 108, 101, 109, 
	112, 101, 108, 58, 10, 10, 10, 32, 
	35, 69, 124, 9, 13, 10, 103, 10, 
	101, 10, 110, 10, 115, 10, 107, 10, 
	97, 10, 112, 10, 58, 105, 118, 101, 
	116, 101, 110, -61, -92, 114, 99, 104, 
	-61, 99, -91, 101, 110, 97, 114, 105, 
	111, 58, 109, 10, 10, 10, 32, 35, 
	37, 42, 64, 65, 66, 69, 71, 77, 
	78, 79, 83, 9, 13, 10, 95, 10, 
	70, 10, 69, 10, 65, 10, 84, 10, 
	85, 10, 82, 10, 69, 10, 95, 10, 
	69, 10, 78, 10, 68, 10, 95, 10, 
	37, 10, 32, 10, 98, 10, 115, 10, 
	116, 10, 114, 10, 97, 10, 107, 10, 
	116, 10, 32, 10, 83, 10, 99, 10, 
	101, 10, 110, 10, 97, 10, 114, 10, 
	105, 10, 111, 10, 58, 10, 97, 10, 
	107, 10, 103, 10, 114, 10, 117, 10, 
	110, 10, 100, 10, 103, 10, 101, 10, 
	110, 10, 115, 10, 107, 10, 97, 10, 
	112, 10, 105, 10, 118, 10, 101, 10, 
	116, 10, 101, 10, 110, -61, 10, -92, 
	10, 10, 114, 10, 99, 10, 104, -61, 
	10, 99, -91, 10, 10, 101, 10, 110, 
	10, 97, 10, 114, 10, 105, 10, 111, 
	10, 58, 109, 10, 97, 10, 108, 10, 
	108, 97, 108, 108, 32, 124, 9, 13, 
	10, 32, 92, 124, 9, 13, 10, 92, 
	124, 10, 92, 10, 32, 92, 124, 9, 
	13, 10, 32, 34, 35, 37, 42, 64, 
	65, 66, 69, 71, 77, 78, 79, 83, 
	124, 9, 13, 10, 103, 10, 101, 10, 
	110, 10, 115, 10, 107, 10, 97, 10, 
	112, 10, 58, 10, 105, 10, 118, 10, 
	101, 10, 116, 10, 101, 10, 110, -61, 
	10, -92, 10, 10, 114, 10, 99, 10, 
	104, -61, 10, 99, -91, 10, 10, 101, 
	10, 110, 10, 97, 10, 114, 10, 105, 
	10, 111, 187, 191, 0
];

var _lexer_single_lengths = [
	0, 17, 16, 1, 1, 2, 2, 3, 
	3, 3, 3, 2, 2, 2, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 2, 2, 
	3, 5, 3, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 12, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 16, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 13, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 3, 2, 2, 2, 
	2, 2, 2, 2, 3, 2, 2, 2, 
	2, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 9, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 3, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 3, 2, 2, 1, 
	1, 1, 1, 1, 1, 1, 1, 5, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 2, 1, 1, 1, 1, 
	1, 1, 1, 2, 1, 1, 14, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	3, 2, 2, 2, 2, 2, 2, 2, 
	3, 2, 2, 2, 1, 1, 1, 2, 
	4, 3, 2, 4, 16, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	3, 2, 2, 2, 2, 2, 2, 2, 
	1, 1, 0
];

var _lexer_range_lengths = [
	0, 1, 1, 0, 0, 0, 0, 1, 
	1, 1, 1, 1, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 1, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	1, 0, 0, 1, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0
];

var _lexer_index_offsets = [
	0, 0, 19, 37, 39, 41, 44, 47, 
	52, 57, 62, 67, 71, 75, 78, 80, 
	82, 84, 86, 88, 90, 92, 94, 96, 
	98, 100, 102, 104, 106, 108, 110, 113, 
	116, 121, 128, 133, 135, 137, 139, 141, 
	143, 145, 147, 149, 151, 153, 155, 157, 
	159, 161, 163, 165, 167, 169, 171, 185, 
	188, 191, 194, 197, 200, 203, 206, 209, 
	212, 215, 218, 221, 224, 227, 230, 248, 
	250, 252, 254, 256, 258, 260, 262, 264, 
	266, 268, 283, 286, 289, 292, 295, 298, 
	301, 304, 307, 310, 313, 316, 319, 322, 
	325, 328, 331, 334, 337, 340, 343, 346, 
	349, 352, 355, 358, 361, 364, 367, 370, 
	373, 376, 379, 382, 385, 388, 391, 394, 
	397, 400, 403, 406, 409, 412, 415, 418, 
	421, 424, 427, 430, 433, 437, 440, 443, 
	446, 449, 452, 455, 458, 462, 465, 468, 
	471, 474, 476, 478, 480, 482, 484, 486, 
	488, 490, 492, 503, 506, 509, 512, 515, 
	518, 521, 524, 527, 530, 533, 536, 539, 
	542, 545, 548, 551, 554, 557, 560, 563, 
	566, 569, 572, 575, 578, 581, 584, 587, 
	590, 593, 596, 599, 602, 605, 608, 611, 
	614, 617, 621, 624, 627, 630, 633, 636, 
	639, 642, 645, 648, 651, 654, 657, 660, 
	663, 666, 669, 672, 675, 679, 682, 685, 
	687, 689, 691, 693, 695, 697, 699, 701, 
	708, 711, 714, 717, 720, 723, 726, 729, 
	732, 734, 736, 738, 740, 742, 744, 746, 
	748, 750, 752, 754, 757, 759, 761, 763, 
	765, 767, 769, 771, 774, 776, 778, 794, 
	797, 800, 803, 806, 809, 812, 815, 818, 
	821, 824, 827, 830, 833, 836, 839, 842, 
	845, 848, 851, 854, 857, 860, 863, 866, 
	869, 872, 875, 878, 881, 884, 887, 890, 
	893, 896, 899, 902, 905, 908, 911, 914, 
	917, 920, 923, 926, 929, 932, 935, 938, 
	941, 944, 947, 950, 953, 956, 959, 962, 
	965, 969, 972, 975, 978, 981, 984, 987, 
	990, 994, 997, 1000, 1003, 1005, 1007, 1009, 
	1013, 1019, 1023, 1026, 1032, 1050, 1053, 1056, 
	1059, 1062, 1065, 1068, 1071, 1074, 1077, 1080, 
	1083, 1086, 1089, 1092, 1095, 1098, 1101, 1104, 
	1107, 1111, 1114, 1117, 1120, 1123, 1126, 1129, 
	1132, 1134, 1136
];

var _lexer_indicies = [
	2, 1, 3, 4, 5, 6, 7, 8, 
	9, 10, 11, 12, 13, 14, 15, 16, 
	17, 1, 0, 2, 1, 3, 4, 5, 
	6, 7, 8, 9, 10, 11, 12, 13, 
	14, 15, 16, 1, 0, 18, 0, 19, 
	0, 21, 22, 20, 24, 25, 23, 28, 
	27, 29, 27, 26, 32, 31, 33, 31, 
	30, 32, 31, 34, 31, 30, 32, 31, 
	35, 31, 30, 37, 36, 36, 0, 2, 
	38, 38, 0, 40, 41, 39, 2, 0, 
	42, 0, 43, 0, 44, 0, 45, 0, 
	46, 0, 47, 0, 48, 0, 49, 0, 
	50, 0, 51, 0, 52, 0, 53, 0, 
	54, 0, 55, 0, 56, 0, 58, 59, 
	57, 61, 62, 60, 0, 0, 0, 0, 
	63, 64, 65, 64, 64, 67, 66, 63, 
	2, 68, 7, 68, 0, 69, 0, 70, 
	0, 71, 0, 72, 0, 73, 0, 74, 
	0, 75, 0, 76, 0, 77, 0, 78, 
	0, 79, 0, 80, 0, 81, 0, 82, 
	0, 83, 0, 84, 0, 85, 0, 87, 
	86, 89, 88, 89, 90, 91, 92, 93, 
	91, 94, 95, 96, 97, 98, 99, 90, 
	88, 89, 100, 88, 89, 101, 88, 89, 
	102, 88, 89, 103, 88, 89, 104, 88, 
	89, 105, 88, 89, 106, 88, 89, 107, 
	88, 89, 108, 88, 89, 109, 88, 89, 
	110, 88, 89, 111, 88, 89, 112, 88, 
	89, 113, 88, 89, 114, 88, 116, 115, 
	117, 118, 119, 120, 121, 122, 123, 124, 
	125, 126, 127, 128, 129, 130, 115, 0, 
	131, 0, 132, 0, 133, 0, 134, 0, 
	135, 0, 136, 0, 137, 0, 138, 0, 
	140, 139, 142, 141, 142, 143, 144, 145, 
	146, 144, 147, 148, 149, 150, 151, 152, 
	153, 143, 141, 142, 154, 141, 142, 155, 
	141, 142, 156, 141, 142, 157, 141, 142, 
	158, 141, 142, 159, 141, 142, 160, 141, 
	142, 161, 141, 142, 162, 141, 142, 163, 
	141, 142, 164, 141, 142, 165, 141, 142, 
	166, 141, 142, 167, 141, 142, 168, 141, 
	142, 169, 141, 142, 170, 141, 142, 171, 
	141, 142, 172, 141, 142, 173, 141, 142, 
	174, 141, 142, 175, 141, 142, 176, 141, 
	142, 177, 141, 142, 178, 141, 142, 179, 
	141, 142, 180, 141, 142, 181, 141, 142, 
	182, 141, 142, 183, 141, 142, 184, 141, 
	142, 168, 141, 142, 185, 141, 142, 186, 
	141, 142, 187, 141, 142, 188, 141, 142, 
	189, 141, 142, 190, 141, 142, 184, 141, 
	142, 191, 141, 142, 192, 141, 142, 193, 
	141, 142, 194, 141, 142, 195, 141, 142, 
	194, 141, 196, 142, 141, 197, 142, 141, 
	142, 194, 141, 142, 198, 141, 142, 194, 
	141, 199, 142, 200, 141, 194, 142, 141, 
	142, 201, 141, 142, 202, 141, 142, 203, 
	141, 142, 204, 141, 142, 205, 141, 142, 
	206, 141, 142, 168, 207, 141, 142, 208, 
	141, 142, 209, 141, 142, 184, 141, 210, 
	211, 0, 212, 0, 213, 0, 214, 0, 
	215, 0, 216, 0, 217, 0, 218, 0, 
	220, 219, 222, 221, 222, 223, 224, 225, 
	224, 226, 227, 228, 229, 223, 221, 222, 
	230, 221, 222, 231, 221, 222, 232, 221, 
	222, 233, 221, 222, 234, 221, 222, 235, 
	221, 222, 236, 221, 222, 237, 221, 222, 
	238, 221, 222, 239, 221, 222, 240, 221, 
	222, 241, 221, 222, 242, 221, 222, 243, 
	221, 222, 244, 221, 222, 245, 221, 222, 
	246, 221, 222, 247, 221, 222, 248, 221, 
	222, 249, 221, 222, 250, 221, 222, 251, 
	221, 222, 252, 221, 222, 253, 221, 222, 
	254, 221, 222, 255, 221, 222, 256, 221, 
	222, 257, 221, 222, 258, 221, 222, 259, 
	221, 222, 260, 221, 222, 261, 221, 222, 
	262, 221, 222, 263, 221, 222, 264, 221, 
	222, 265, 221, 222, 266, 221, 222, 259, 
	221, 222, 267, 268, 221, 222, 269, 221, 
	222, 270, 221, 222, 271, 221, 222, 272, 
	221, 222, 273, 221, 222, 259, 221, 222, 
	274, 221, 222, 275, 221, 222, 276, 221, 
	222, 277, 221, 222, 259, 221, 222, 278, 
	221, 222, 279, 221, 222, 280, 221, 222, 
	281, 221, 222, 282, 221, 222, 283, 221, 
	222, 284, 221, 222, 260, 285, 221, 222, 
	286, 221, 222, 277, 221, 287, 0, 288, 
	0, 289, 0, 290, 0, 291, 0, 292, 
	0, 294, 293, 296, 295, 296, 297, 298, 
	299, 298, 297, 295, 296, 300, 295, 296, 
	301, 295, 296, 302, 295, 296, 303, 295, 
	296, 304, 295, 296, 305, 295, 296, 306, 
	295, 296, 307, 295, 308, 0, 309, 0, 
	310, 0, 311, 0, 312, 0, 311, 0, 
	313, 0, 314, 0, 311, 0, 315, 0, 
	311, 0, 316, 317, 0, 311, 0, 318, 
	0, 319, 0, 320, 0, 321, 0, 322, 
	0, 323, 0, 324, 325, 0, 327, 326, 
	329, 328, 329, 330, 331, 332, 333, 331, 
	334, 335, 336, 337, 338, 339, 340, 341, 
	330, 328, 329, 342, 328, 329, 343, 328, 
	329, 344, 328, 329, 345, 328, 329, 346, 
	328, 329, 347, 328, 329, 348, 328, 329, 
	349, 328, 329, 350, 328, 329, 351, 328, 
	329, 352, 328, 329, 353, 328, 329, 354, 
	328, 329, 355, 328, 329, 356, 328, 329, 
	357, 328, 329, 358, 328, 329, 359, 328, 
	329, 360, 328, 329, 361, 328, 329, 362, 
	328, 329, 363, 328, 329, 364, 328, 329, 
	365, 328, 329, 366, 328, 329, 367, 328, 
	329, 368, 328, 329, 369, 328, 329, 370, 
	328, 329, 371, 328, 329, 372, 328, 329, 
	356, 328, 329, 373, 328, 329, 374, 328, 
	329, 375, 328, 329, 376, 328, 329, 377, 
	328, 329, 378, 328, 329, 372, 328, 329, 
	379, 328, 329, 380, 328, 329, 381, 328, 
	329, 382, 328, 329, 383, 328, 329, 384, 
	328, 329, 372, 328, 329, 385, 328, 329, 
	386, 328, 329, 387, 328, 329, 388, 328, 
	329, 389, 328, 329, 388, 328, 390, 329, 
	328, 391, 329, 328, 329, 388, 328, 329, 
	392, 328, 329, 388, 328, 393, 329, 394, 
	328, 388, 329, 328, 329, 395, 328, 329, 
	396, 328, 329, 397, 328, 329, 398, 328, 
	329, 399, 328, 329, 400, 328, 329, 356, 
	401, 328, 329, 402, 328, 329, 403, 328, 
	329, 372, 328, 404, 0, 405, 0, 84, 
	0, 406, 407, 406, 0, 410, 409, 411, 
	412, 409, 408, 0, 414, 415, 413, 0, 
	414, 413, 410, 416, 414, 415, 416, 413, 
	410, 417, 418, 419, 420, 421, 422, 423, 
	424, 425, 426, 427, 428, 429, 430, 431, 
	417, 0, 89, 432, 88, 89, 433, 88, 
	89, 434, 88, 89, 435, 88, 89, 436, 
	88, 89, 437, 88, 89, 438, 88, 89, 
	114, 88, 89, 439, 88, 89, 440, 88, 
	89, 441, 88, 89, 442, 88, 89, 443, 
	88, 89, 442, 88, 444, 89, 88, 445, 
	89, 88, 89, 442, 88, 89, 446, 88, 
	89, 442, 88, 447, 89, 448, 88, 442, 
	89, 88, 89, 449, 88, 89, 450, 88, 
	89, 451, 88, 89, 452, 88, 89, 453, 
	88, 89, 438, 88, 454, 0, 1, 0, 
	455, 0
];

var _lexer_trans_targs = [
	0, 2, 2, 3, 13, 15, 29, 32, 
	35, 71, 144, 232, 236, 238, 241, 243, 
	327, 360, 4, 5, 6, 7, 6, 6, 
	7, 6, 8, 8, 8, 9, 8, 8, 
	8, 9, 10, 11, 12, 2, 12, 13, 
	2, 14, 16, 17, 18, 19, 20, 21, 
	22, 23, 24, 25, 26, 27, 28, 362, 
	30, 31, 2, 14, 31, 2, 14, 33, 
	34, 2, 33, 32, 34, 36, 37, 38, 
	39, 40, 41, 42, 43, 44, 45, 46, 
	47, 48, 49, 50, 51, 52, 53, 54, 
	53, 54, 54, 2, 55, 69, 333, 341, 
	345, 347, 350, 352, 56, 57, 58, 59, 
	60, 61, 62, 63, 64, 65, 66, 67, 
	68, 2, 70, 2, 2, 3, 13, 15, 
	29, 32, 35, 71, 144, 232, 236, 238, 
	241, 243, 327, 72, 73, 74, 75, 76, 
	77, 78, 79, 80, 81, 80, 81, 81, 
	2, 82, 96, 97, 114, 121, 125, 127, 
	130, 132, 83, 84, 85, 86, 87, 88, 
	89, 90, 91, 92, 93, 94, 95, 2, 
	70, 98, 99, 100, 101, 102, 103, 104, 
	105, 106, 107, 108, 109, 110, 111, 112, 
	113, 115, 116, 117, 118, 119, 120, 122, 
	123, 124, 96, 126, 128, 129, 131, 133, 
	134, 135, 136, 137, 138, 139, 140, 141, 
	142, 143, 145, 215, 146, 147, 148, 149, 
	150, 151, 152, 153, 154, 153, 154, 154, 
	2, 155, 169, 186, 193, 205, 156, 157, 
	158, 159, 160, 161, 162, 163, 164, 165, 
	166, 167, 168, 2, 170, 171, 172, 173, 
	174, 175, 176, 177, 178, 179, 180, 181, 
	182, 183, 184, 185, 70, 187, 188, 189, 
	190, 191, 192, 194, 200, 195, 196, 197, 
	198, 199, 201, 202, 203, 204, 206, 207, 
	208, 209, 210, 211, 212, 213, 214, 216, 
	217, 218, 219, 220, 221, 222, 223, 222, 
	223, 223, 2, 224, 225, 226, 227, 228, 
	229, 230, 231, 70, 233, 234, 235, 29, 
	237, 239, 240, 242, 244, 245, 246, 247, 
	248, 249, 250, 251, 252, 324, 253, 254, 
	253, 254, 254, 2, 255, 269, 270, 287, 
	294, 301, 305, 307, 310, 312, 256, 257, 
	258, 259, 260, 261, 262, 263, 264, 265, 
	266, 267, 268, 2, 70, 271, 272, 273, 
	274, 275, 276, 277, 278, 279, 280, 281, 
	282, 283, 284, 285, 286, 288, 289, 290, 
	291, 292, 293, 295, 296, 297, 298, 299, 
	300, 302, 303, 304, 269, 306, 308, 309, 
	311, 313, 314, 315, 316, 317, 318, 319, 
	320, 321, 322, 323, 325, 326, 327, 328, 
	329, 331, 332, 330, 328, 329, 330, 328, 
	331, 332, 3, 13, 15, 29, 32, 35, 
	71, 144, 232, 236, 238, 241, 243, 327, 
	334, 335, 336, 337, 338, 339, 340, 342, 
	343, 344, 69, 346, 348, 349, 351, 353, 
	354, 355, 356, 357, 358, 359, 361, 0
];

var _lexer_trans_actions = [
	43, 0, 54, 3, 1, 0, 29, 1, 
	29, 29, 29, 29, 29, 29, 29, 29, 
	35, 0, 0, 0, 7, 139, 48, 0, 
	102, 9, 5, 45, 134, 45, 0, 33, 
	122, 33, 33, 0, 11, 106, 0, 0, 
	114, 25, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 57, 149, 126, 0, 110, 23, 0, 
	27, 118, 27, 51, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 57, 144, 
	0, 54, 0, 78, 33, 84, 84, 84, 
	84, 84, 84, 84, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 19, 19, 31, 130, 60, 57, 31, 
	63, 57, 63, 63, 63, 63, 63, 63, 
	63, 63, 66, 0, 0, 0, 0, 0, 
	0, 0, 0, 57, 144, 0, 54, 0, 
	72, 33, 84, 84, 84, 84, 84, 84, 
	84, 84, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 15, 
	15, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 57, 144, 0, 54, 0, 
	69, 33, 84, 84, 84, 84, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 13, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 13, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 57, 144, 0, 
	54, 0, 81, 84, 0, 0, 0, 0, 
	0, 0, 0, 21, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 57, 144, 
	0, 54, 0, 75, 33, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 17, 17, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	37, 37, 54, 37, 87, 0, 0, 39, 
	0, 0, 93, 90, 41, 96, 90, 96, 
	96, 96, 96, 96, 96, 96, 96, 99, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0
];

var _lexer_eof_actions = [
	0, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43
];

var lexer_start = 1;
var lexer_first_final = 362;
var lexer_error = 0;

var lexer_en_main = 1;


/* line 129 "ragel/i18n/sv.js.rl" */

/* line 130 "ragel/i18n/sv.js.rl" */

/* line 131 "ragel/i18n/sv.js.rl" */

/* line 132 "ragel/i18n/sv.js.rl" */

var Lexer = function(listener) {
  // Check that listener has the required functions
  var events = ['comment', 'tag', 'feature', 'background', 'scenario', 'scenario_outline', 'examples', 'step', 'doc_string', 'row', 'eof'];
  for(var i=0, len=events.length; i<len; i++) {
    var event = events[i];
    if(typeof listener[event] != 'function') {
      throw new Error("Error. No " + event + " function exists on " + JSON.stringify(listener));
    }
  }
  this.listener = listener;
};

Lexer.prototype.scan = function(data) {
  var ending = "\n%_FEATURE_END_%";
  if(typeof data == 'string') {
    data = this.stringToBytes(data + ending);
  } else if(typeof Buffer != 'undefined' && Buffer.isBuffer(data)) {
    // Node.js
    var buf = new Buffer(data.length + ending.length);
    data.copy(buf, 0, 0);
    new Buffer(ending).copy(buf, data.length, 0);
    data = buf;
  }
  var eof = pe = data.length;
  var p = 0;

  this.line_number = 1;
  this.last_newline = 0;
  var signedCharValue=function(v){return v > 127 ? v-256 : v; };

  
/* line 695 "js/lib/gherkin/lexer/sv.js" */
{
	  this.cs = lexer_start;
} /* JSCodeGen::writeInit */

/* line 164 "ragel/i18n/sv.js.rl" */
  
/* line 702 "js/lib/gherkin/lexer/sv.js" */
{
	var _klen, _trans, _keys, _ps, _widec, _acts, _nacts;
	var _goto_level, _resume, _eof_trans, _again, _test_eof;
	var _out;
	_klen = _trans = _keys = _acts = _nacts = null;
	_goto_level = 0;
	_resume = 10;
	_eof_trans = 15;
	_again = 20;
	_test_eof = 30;
	_out = 40;
	while (true) {
	_trigger_goto = false;
	if (_goto_level <= 0) {
	if (p == pe) {
		_goto_level = _test_eof;
		continue;
	}
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	}
	if (_goto_level <= _resume) {
	_keys = _lexer_key_offsets[ this.cs];
	_trans = _lexer_index_offsets[ this.cs];
	_klen = _lexer_single_lengths[ this.cs];
	_break_match = false;
	
	do {
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + _klen - 1;

	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + ( (_upper - _lower) >> 1 );

	        if (( signedCharValue(data[p])) < _lexer_trans_keys[_mid]) {
	           _upper = _mid - 1;
	        } else if (( signedCharValue(data[p])) > _lexer_trans_keys[_mid]) {
	           _lower = _mid + 1;
	        } else {
	           _trans += (_mid - _keys);
	           _break_match = true;
	           break;
	        };
	     } /* while */
	     if (_break_match) { break; }
	     _keys += _klen;
	     _trans += _klen;
	  }
	  _klen = _lexer_range_lengths[ this.cs];
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + (_klen << 1) - 2;
	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + (((_upper-_lower) >> 1) & ~1);
	        if (( signedCharValue(data[p])) < _lexer_trans_keys[_mid]) {
	          _upper = _mid - 2;
	         } else if (( signedCharValue(data[p])) > _lexer_trans_keys[_mid+1]) {
	          _lower = _mid + 2;
	        } else {
	          _trans += ((_mid - _keys) >> 1);
	          _break_match = true;
	          break;
	        }
	     } /* while */
	     if (_break_match) { break; }
	     _trans += _klen
	  }
	} while (false);
	_trans = _lexer_indicies[_trans];
	 this.cs = _lexer_trans_targs[_trans];
	if (_lexer_trans_actions[_trans] != 0) {
		_acts = _lexer_trans_actions[_trans];
		_nacts = _lexer_actions[_acts];
		_acts += 1;
		while (_nacts > 0) {
			_nacts -= 1;
			_acts += 1;
			switch (_lexer_actions[_acts - 1]) {
case 0:
/* line 6 "ragel/i18n/sv.js.rl" */

    this.content_start = p;
    this.current_line = this.line_number;
    this.start_col = p - this.last_newline - (this.keyword+':').length;
  		break;
case 1:
/* line 12 "ragel/i18n/sv.js.rl" */

    this.current_line = this.line_number;
    this.start_col = p - this.last_newline;
  		break;
case 2:
/* line 17 "ragel/i18n/sv.js.rl" */

    this.content_start = p;
  		break;
case 3:
/* line 21 "ragel/i18n/sv.js.rl" */

    this.docstring_content_type_start = p;
  		break;
case 4:
/* line 25 "ragel/i18n/sv.js.rl" */

    this.docstring_content_type_end = p;
  		break;
case 5:
/* line 29 "ragel/i18n/sv.js.rl" */

    var con = this.unindent(
      this.start_col, 
      this.bytesToString(data.slice(this.content_start, this.next_keyword_start-1)).replace(/(\r?\n)?([\t ])*$/, '').replace(/\\\"\\\"\\\"/mg, '"""')
    );
    var con_type = this.bytesToString(data.slice(this.docstring_content_type_start, this.docstring_content_type_end)).trim();
    this.listener.doc_string(con_type, con, this.current_line); 
  		break;
case 6:
/* line 38 "ragel/i18n/sv.js.rl" */

    p = this.store_keyword_content('feature', data, p, eof);
  		break;
case 7:
/* line 42 "ragel/i18n/sv.js.rl" */

    p = this.store_keyword_content('background', data, p, eof);
  		break;
case 8:
/* line 46 "ragel/i18n/sv.js.rl" */

    p = this.store_keyword_content('scenario', data, p, eof);
  		break;
case 9:
/* line 50 "ragel/i18n/sv.js.rl" */

    p = this.store_keyword_content('scenario_outline', data, p, eof);
  		break;
case 10:
/* line 54 "ragel/i18n/sv.js.rl" */

    p = this.store_keyword_content('examples', data, p, eof);
  		break;
case 11:
/* line 58 "ragel/i18n/sv.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.step(this.keyword, con, this.current_line);
  		break;
case 12:
/* line 63 "ragel/i18n/sv.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.comment(con, this.line_number);
    this.keyword_start = null;
  		break;
case 13:
/* line 69 "ragel/i18n/sv.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.tag(con, this.line_number);
    this.keyword_start = null;
  		break;
case 14:
/* line 75 "ragel/i18n/sv.js.rl" */

    this.line_number++;
  		break;
case 15:
/* line 79 "ragel/i18n/sv.js.rl" */

    this.last_newline = p + 1;
  		break;
case 16:
/* line 83 "ragel/i18n/sv.js.rl" */

    this.keyword_start = this.keyword_start || p;
  		break;
case 17:
/* line 87 "ragel/i18n/sv.js.rl" */

    this.keyword = this.bytesToString(data.slice(this.keyword_start, p)).replace(/:$/, '');
    this.keyword_start = null;
  		break;
case 18:
/* line 92 "ragel/i18n/sv.js.rl" */

    this.next_keyword_start = p;
  		break;
case 19:
/* line 96 "ragel/i18n/sv.js.rl" */

    p = p - 1;
    current_row = [];
    this.current_line = this.line_number;
  		break;
case 20:
/* line 102 "ragel/i18n/sv.js.rl" */

    this.content_start = p;
  		break;
case 21:
/* line 106 "ragel/i18n/sv.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    current_row.push(con.replace(/\\\|/, "|").replace(/\\n/, "\n").replace(/\\\\/, "\\"));
  		break;
case 22:
/* line 111 "ragel/i18n/sv.js.rl" */

    this.listener.row(current_row, this.current_line);
  		break;
case 23:
/* line 115 "ragel/i18n/sv.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw new Error("Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.");
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 929 "js/lib/gherkin/lexer/sv.js" */
			} /* action switch */
		}
	}
	if (_trigger_goto) {
		continue;
	}
	}
	if (_goto_level <= _again) {
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	p += 1;
	if (p != pe) {
		_goto_level = _resume;
		continue;
	}
	}
	if (_goto_level <= _test_eof) {
	if (p == eof) {
	__acts = _lexer_eof_actions[ this.cs];
	__nacts =  _lexer_actions[__acts];
	__acts += 1;
	while (__nacts > 0) {
		__nacts -= 1;
		__acts += 1;
		switch (_lexer_actions[__acts - 1]) {
case 23:
/* line 115 "ragel/i18n/sv.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw new Error("Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.");
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 968 "js/lib/gherkin/lexer/sv.js" */
		} /* eof action switch */
	}
	if (_trigger_goto) {
		continue;
	}
}
	}
	if (_goto_level <= _out) {
		break;
	}
	}
	}

/* line 165 "ragel/i18n/sv.js.rl" */
};


/*
 * Decode utf-8 byte sequence to string.
 */
var decodeUtf8 = function(bytes) {
  var result = "";
  var i = 0;
  var wc;
  var c;

  while (i < bytes.length) {
    /* parse as UTF-8 lead byte */
    wc = bytes[i++];
    if (wc < 0x80) {
      count = 0;
    } else if (wc < 0xC2 || wc >= 0xF8) {
      throw new Error("input is not a valid UTF-8 lead octet");
    } else if (wc < 0xE0) {
      count = 1;
      wc = (wc & 0x1F) << 6;
    } else if (wc < 0xF0) {
      count = 2;
      wc = (wc & 0x0F) << 12;
    } else /* wc < 0xF8 */ {
      count = 3;
      wc = (wc & 0x07) << 18;
    }

    /* parse trail bytes, if any */
    while (count) {
      if (!(i < bytes.length)) {
        throw new Error("short read");
      }
      if ((c = bytes[i++] ^ 0x80) > 0x3F) {
        throw new Error("input is not a valid UTF-8 trail octet");
      }
      wc |= c << (6 * --count);
      if (wc < (1 << (5 * count + 6))) {
        throw new Error("invalid non-minimal encoded input");
      }
    }

    /* handle conversion to UTF-16 if needed */
    if (wc > 0xFFFF) {
      wc -= 0x10000;
      result += String.fromCharCode(0xD800 + (wc >> 10));
      wc = 0xDC00 + (wc & 0x3FF);
    }
    result += String.fromCharCode(wc);
  }

  return result;
};

/*
 * Encode string to an array of bytes using utf8 encoding.
 *
 * Javascript internally stores character data as utf16 (like java).
 * String.charCodeAt() does *not* produce unicode points, but simply
 * reflects this internal representation. Thus, it is necessary
 * to first decode the utf-16 representation before encoding to
 * utf-8.
 */
var encodeUtf8 = function(string) {
  var bytes = [];
  var i = 0;
  var j = 0;
  var wc;

  while (i < string.length) {
    wc = string.charCodeAt(i++);
    if (wc >= 0xD800 && wc <= 0xDBFF && i < string.length && string.charCodeAt(i) >= 0xDC00 && string.charCodeAt(i) <= 0xDFFF) {
      /* decode UTF-16 */
      wc = 0x10000 + ((wc & 0x3FF) << 10) + (string.charCodeAt(i++) & 0x3FF);
    }

    /* emit lead byte */
    if (wc < 0x80) {
      bytes[j++] = wc;
      count = 0;
    } else if (wc < 0x800) {
      bytes[j++] = 0xC0 | (wc >> 6);
      count = 1;
    } else if (wc < 0x10000) {
      bytes[j++] = 0xE0 | (wc >> 12);
      count = 2;
    } else {
      /* SMP: 21-bit Unicode */
      bytes[j++] = 0xF0 | (wc >> 18);
      count = 3;
    }

    /* emit trail bytes, if any */
    while (count) {
      bytes[j++] = 0x80 | ((wc >> (6 * --count)) & 0x3F);
    }
  }

  return bytes;

};

Lexer.prototype.bytesToString = function(bytes) {
  if(typeof bytes.write == 'function') {
    // Node.js
    return bytes.toString('utf-8');
  }
  return decodeUtf8(bytes);
};

Lexer.prototype.stringToBytes = function(string) {
  return encodeUtf8(string);
};

Lexer.prototype.unindent = function(startcol, text) {
  startcol = startcol || 0;
  return text.replace(new RegExp('^[\t ]{0,' + startcol + '}', 'gm'), ''); 
};

Lexer.prototype.store_keyword_content = function(event, data, p, eof) {
  var end_point = (!this.next_keyword_start || (p == eof)) ? p : this.next_keyword_start;
  var content = this.unindent(this.start_col + 2, this.bytesToString(data.slice(this.content_start, end_point))).replace(/\s+$/,"");
  var content_lines = content.split("\n")
  var name = content_lines.shift() || "";
  name = name.trim();
  var description = content_lines.join("\n");
  this.listener[event](this.keyword, name, description, this.current_line);
  var nks = this.next_keyword_start;
  this.next_keyword_start = null;
  return nks ? nks - 1 : p;
};

Lexer.prototype.current_line_content = function(data, p) {
  var rest = Array.prototype.slice.call(data,this.last_newline, -1);
  var end = rest.indexOf(10) || -1;
  return this.bytesToString(rest.slice(0, end)).trim();
};

// Node.js export
if(typeof module !== 'undefined') {
  module.exports = Lexer;
}
// Require.js export
if (typeof define !== 'undefined') {
  if(define.amd) {
    define('gherkin/lexer/sv', [], function() {
      return Lexer;
    });
  } else {
    define('gherkin/lexer/sv', function(require, exports, module) {
      exports.Lexer = Lexer;
    });
  }
}

})();

}).call(this,require("buffer").Buffer)

},{"buffer":69}],232:[function(require,module,exports){
(function (Buffer){

/* line 1 "ragel/i18n/th.js.rl" */
;(function() {


/* line 126 "ragel/i18n/th.js.rl" */



/* line 11 "js/lib/gherkin/lexer/th.js" */
var _lexer_actions = [
	0, 1, 0, 1, 1, 1, 2, 1, 
	3, 1, 4, 1, 5, 1, 6, 1, 
	7, 1, 8, 1, 9, 1, 10, 1, 
	11, 1, 12, 1, 13, 1, 16, 1, 
	17, 1, 18, 1, 19, 1, 20, 1, 
	21, 1, 22, 1, 23, 2, 2, 18, 
	2, 3, 4, 2, 13, 0, 2, 14, 
	15, 2, 17, 0, 2, 17, 1, 2, 
	17, 16, 2, 17, 19, 2, 18, 6, 
	2, 18, 7, 2, 18, 8, 2, 18, 
	9, 2, 18, 10, 2, 18, 16, 2, 
	20, 21, 2, 22, 0, 2, 22, 1, 
	2, 22, 16, 2, 22, 19, 3, 4, 
	14, 15, 3, 5, 14, 15, 3, 11, 
	14, 15, 3, 12, 14, 15, 3, 13, 
	14, 15, 3, 14, 15, 18, 3, 17, 
	0, 11, 3, 17, 14, 15, 4, 2, 
	14, 15, 18, 4, 3, 4, 14, 15, 
	4, 17, 0, 14, 15, 5, 17, 0, 
	11, 14, 15
];

var _lexer_key_offsets = [
	0, 0, 12, 14, 19, 20, 21, 22, 
	23, 24, 25, 26, 27, 28, 29, 30, 
	31, 32, 33, 34, 35, 36, 37, 38, 
	39, 40, 41, 43, 45, 56, 57, 58, 
	60, 62, 67, 72, 77, 82, 86, 90, 
	92, 93, 94, 95, 96, 97, 98, 99, 
	100, 101, 102, 103, 104, 105, 106, 107, 
	112, 119, 124, 128, 134, 137, 139, 145, 
	156, 157, 158, 159, 160, 161, 162, 163, 
	164, 165, 166, 167, 169, 170, 171, 172, 
	173, 174, 175, 176, 177, 178, 179, 180, 
	181, 182, 183, 184, 185, 186, 187, 188, 
	189, 190, 191, 192, 193, 194, 195, 196, 
	197, 198, 199, 200, 201, 202, 203, 204, 
	205, 206, 207, 208, 209, 210, 211, 212, 
	213, 214, 215, 216, 217, 225, 228, 232, 
	234, 236, 238, 240, 242, 244, 246, 248, 
	250, 252, 254, 257, 259, 261, 263, 265, 
	267, 269, 271, 273, 275, 277, 279, 281, 
	283, 285, 287, 289, 291, 293, 295, 297, 
	299, 301, 303, 305, 307, 309, 311, 313, 
	315, 317, 319, 321, 323, 325, 327, 329, 
	331, 333, 335, 337, 339, 341, 343, 345, 
	347, 349, 360, 362, 364, 366, 368, 370, 
	372, 374, 376, 378, 380, 382, 384, 386, 
	388, 390, 392, 394, 396, 398, 400, 402, 
	404, 406, 408, 410, 412, 414, 416, 418, 
	420, 422, 425, 427, 429, 431, 433, 435, 
	437, 439, 441, 443, 445, 447, 449, 451, 
	453, 455, 457, 459, 461, 463, 465, 467, 
	469, 471, 473, 475, 477, 479, 481, 483, 
	485, 487, 489, 491, 493, 495, 497, 499, 
	501, 503, 505, 507, 509, 511, 513, 515, 
	517, 519, 521, 523, 525, 527, 529, 531, 
	533, 535, 537, 539, 541, 545, 547, 549, 
	551, 553, 555, 557, 559, 561, 563, 565, 
	567, 569, 571, 573, 575, 577, 579, 581, 
	583, 585, 587, 589, 591, 593, 595, 597, 
	600, 602, 604, 606, 608, 610, 612, 614, 
	616, 618, 620, 622, 624, 626, 628, 630, 
	632, 634, 636, 638, 640, 642, 644, 646, 
	648, 650, 652, 654, 656, 658, 660, 662, 
	664, 666, 668, 670, 672, 674, 676, 678, 
	680, 682, 684, 686, 688, 689, 690, 691, 
	692, 693, 694, 695, 696, 697, 698, 699, 
	700, 701, 702, 703, 704, 705, 706, 707, 
	708, 709, 710, 711, 712, 713, 714, 715, 
	716, 717, 718, 719, 721, 722, 723, 724, 
	725, 726, 727, 728, 729, 730, 731, 732, 
	733, 734, 735, 736, 737, 738, 739, 740, 
	741, 742, 743, 744, 745, 746, 753, 756, 
	758, 760, 762, 764, 766, 768, 770, 772, 
	774, 776, 778, 780, 783, 785, 787, 789, 
	791, 793, 795, 797, 799, 801, 803, 805, 
	807, 809, 811, 813, 815, 817, 819, 821, 
	823, 825, 827, 829, 831, 833, 835, 837, 
	839, 841, 843, 845, 847, 849, 851, 853, 
	855, 857, 859, 861, 863, 865, 867, 869, 
	871, 873, 875, 877, 879, 881, 883, 885, 
	887, 889, 891, 893, 895, 897, 899, 901, 
	903, 905, 907, 909, 911, 913, 915, 917, 
	919, 921, 923, 925, 927, 929, 931, 933, 
	935, 937, 939, 941, 943, 945, 947, 949, 
	950, 951, 952, 953, 954, 955, 956, 957, 
	958, 959, 960, 961, 962, 963, 964, 965, 
	966, 967, 968, 969, 970, 971, 972, 973, 
	974, 975, 976, 977, 978, 979, 980, 981, 
	982, 983, 984, 985, 986, 987, 988, 989, 
	990, 991, 992, 993, 994, 995, 996, 997, 
	998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 
	1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 
	1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 
	1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 
	1030, 1031, 1040, 1043, 1047, 1049, 1051, 1053, 
	1055, 1057, 1059, 1061, 1063, 1065, 1067, 1069, 
	1071, 1073, 1075, 1077, 1079, 1081, 1083, 1085, 
	1087, 1089, 1091, 1093, 1095, 1097, 1099, 1101, 
	1103, 1105, 1107, 1109, 1111, 1113, 1116, 1118, 
	1120, 1122, 1124, 1126, 1128, 1130, 1132, 1134, 
	1136, 1138, 1140, 1142, 1144, 1146, 1148, 1150, 
	1152, 1154, 1156, 1158, 1160, 1162, 1164, 1166, 
	1168, 1170, 1172, 1174, 1176, 1178, 1180, 1182, 
	1184, 1186, 1188, 1190, 1192, 1194, 1196, 1198, 
	1200, 1202, 1204, 1206, 1208, 1210, 1212, 1214, 
	1216, 1218, 1220, 1222, 1224, 1226, 1228, 1230, 
	1232, 1234, 1236, 1238, 1240, 1242, 1244, 1246, 
	1248, 1250, 1252, 1254, 1256, 1258, 1260, 1262, 
	1264, 1266, 1268, 1270, 1272, 1274, 1278, 1280, 
	1282, 1285, 1287, 1289, 1291, 1293, 1295, 1297, 
	1299, 1301, 1303, 1305, 1307, 1309, 1311, 1313, 
	1315, 1317, 1319, 1321, 1323, 1325, 1327, 1329, 
	1331, 1333, 1335, 1337, 1339, 1341, 1343, 1345, 
	1347, 1349, 1352, 1354, 1356, 1358, 1360, 1362, 
	1364, 1366, 1368, 1370, 1372, 1374, 1376, 1378, 
	1380, 1382, 1384, 1386, 1388, 1390, 1392, 1394, 
	1396, 1398, 1400, 1402, 1404, 1406, 1408, 1410, 
	1412, 1414, 1416, 1418, 1420, 1422, 1424, 1426, 
	1428, 1430, 1432, 1434, 1437, 1438, 1439, 1441, 
	1442, 1443, 1444, 1445, 1446, 1447, 1448, 1449, 
	1450, 1451, 1452, 1453, 1454, 1455, 1456, 1457, 
	1458, 1459, 1460, 1461, 1462, 1463, 1464, 1465, 
	1466, 1467, 1468, 1469, 1470, 1471, 1472, 1473, 
	1474, 1483, 1486, 1491, 1493, 1495, 1497, 1499, 
	1501, 1503, 1505, 1507, 1509, 1511, 1513, 1515, 
	1517, 1519, 1521, 1523, 1525, 1527, 1529, 1531, 
	1533, 1535, 1537, 1539, 1541, 1543, 1545, 1547, 
	1549, 1551, 1553, 1555, 1557, 1560, 1562, 1564, 
	1566, 1568, 1570, 1572, 1574, 1576, 1578, 1580, 
	1582, 1584, 1586, 1588, 1590, 1592, 1594, 1596, 
	1598, 1600, 1602, 1604, 1606, 1608, 1610, 1612, 
	1614, 1616, 1618, 1620, 1622, 1624, 1626, 1628, 
	1630, 1632, 1634, 1636, 1638, 1640, 1642, 1644, 
	1646, 1648, 1650, 1652, 1654, 1656, 1658, 1660, 
	1662, 1664, 1666, 1668, 1670, 1672, 1674, 1676, 
	1678, 1680, 1682, 1684, 1686, 1688, 1690, 1692, 
	1694, 1696, 1698, 1700, 1702, 1704, 1706, 1708, 
	1710, 1712, 1714, 1716, 1718, 1720, 1722, 1724, 
	1726, 1728, 1730, 1732, 1734, 1736, 1738, 1740, 
	1742, 1744, 1746, 1748, 1750, 1752, 1754, 1756, 
	1758, 1760, 1762, 1764, 1766, 1768, 1770, 1772, 
	1774, 1776, 1778, 1780, 1782, 1784, 1786, 1788, 
	1790, 1794, 1796, 1798, 1801, 1803, 1805, 1807, 
	1809, 1811, 1813, 1815, 1817, 1819, 1821, 1823, 
	1827, 1829, 1831, 1833, 1835, 1837, 1839, 1841, 
	1843, 1845, 1847, 1849, 1851, 1853, 1855, 1857, 
	1859, 1861, 1863, 1865, 1867, 1869, 1871, 1873, 
	1875, 1877, 1879, 1881, 1883, 1885, 1888, 1890, 
	1892, 1894, 1896, 1898, 1900, 1902, 1904, 1906, 
	1908, 1910, 1912, 1914, 1916, 1918, 1920, 1922, 
	1924, 1926, 1928, 1930, 1932, 1934, 1936, 1938, 
	1940, 1942, 1944, 1946, 1948, 1950, 1952, 1954, 
	1956, 1958, 1960, 1962, 1964, 1966, 1968, 1970, 
	1972, 1974, 1976, 1977, 1978, 1981, 1982, 1983, 
	1984, 1985, 1986, 1987, 1988, 1989, 1990, 1991, 
	1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 
	2008, 2011, 2016, 2018, 2020, 2022, 2024, 2026, 
	2028, 2030, 2032, 2034, 2036, 2038, 2040, 2042, 
	2044, 2046, 2048, 2050, 2052, 2054, 2056, 2058, 
	2060, 2062, 2064, 2066, 2068, 2070, 2072, 2074, 
	2076, 2078, 2080, 2082, 2085, 2087, 2089, 2091, 
	2093, 2095, 2097, 2099, 2101, 2103, 2105, 2107, 
	2109, 2111, 2113, 2115, 2117, 2119, 2121, 2123, 
	2125, 2127, 2129, 2131, 2133, 2135, 2137, 2139, 
	2141, 2143, 2145, 2147, 2149, 2151, 2153, 2155, 
	2157, 2159, 2161, 2163, 2165, 2167, 2169, 2171, 
	2173, 2175, 2177, 2179, 2181, 2183, 2185, 2187, 
	2189, 2191, 2193, 2195, 2197, 2199, 2201, 2203, 
	2205, 2207, 2209, 2211, 2213, 2215, 2217, 2219, 
	2221, 2223, 2225, 2227, 2229, 2231, 2233, 2235, 
	2237, 2239, 2241, 2243, 2245, 2247, 2249, 2251, 
	2253, 2255, 2257, 2259, 2261, 2263, 2265, 2267, 
	2269, 2271, 2273, 2275, 2277, 2279, 2281, 2283, 
	2285, 2287, 2289, 2291, 2293, 2295, 2297, 2299, 
	2301, 2303, 2305, 2307, 2309, 2311, 2313, 2315, 
	2319, 2321, 2323, 2326, 2328, 2330, 2332, 2334, 
	2336, 2338, 2340, 2342, 2344, 2346, 2348, 2351, 
	2353, 2355, 2357, 2359, 2361, 2363, 2365, 2367, 
	2369, 2371, 2373, 2375, 2377, 2379, 2381, 2383, 
	2385, 2388, 2390, 2392, 2394, 2396, 2398, 2400, 
	2402, 2404, 2406, 2408, 2410, 2412, 2414, 2416, 
	2418, 2420, 2422, 2424, 2426, 2428, 2430, 2432, 
	2434, 2436, 2438, 2440, 2442, 2444, 2446, 2448, 
	2450, 2452, 2454, 2456, 2458, 2460, 2462, 2464, 
	2466, 2468, 2470, 2472, 2474, 2476, 2477, 2478, 
	2479, 2480, 2481, 2482, 2483, 2484, 2485, 2486, 
	2487, 2488, 2489, 2490, 2492, 2493, 2494, 2495, 
	2496, 2497, 2498, 2499, 2500, 2501, 2502, 2503, 
	2504, 2505, 2506, 2507, 2508, 2509, 2510, 2511, 
	2512, 2513, 2514, 2515, 2516, 2517, 2518, 2519, 
	2520, 2521, 2522, 2523, 2524
];

var _lexer_trans_keys = [
	-32, 10, 32, 34, 35, 37, 42, 64, 
	124, 239, 9, 13, -72, -71, -127, -124, 
	-118, -108, -86, -32, -72, -77, -32, -72, 
	-85, -32, -72, -103, -32, -72, -108, -32, 
	-71, -125, -32, -72, -85, -32, -71, -119, 
	32, 10, 13, 10, 13, -32, 10, 32, 
	34, 35, 37, 42, 64, 124, 9, 13, 
	34, 34, 10, 13, 10, 13, 10, 32, 
	34, 9, 13, 10, 32, 34, 9, 13, 
	10, 32, 34, 9, 13, 10, 32, 34, 
	9, 13, 10, 32, 9, 13, 10, 32, 
	9, 13, 10, 13, 10, 95, 70, 69, 
	65, 84, 85, 82, 69, 95, 69, 78, 
	68, 95, 37, 13, 32, 64, 9, 10, 
	9, 10, 13, 32, 64, 11, 12, 10, 
	32, 64, 9, 13, 32, 124, 9, 13, 
	10, 32, 92, 124, 9, 13, 10, 92, 
	124, 10, 92, 10, 32, 92, 124, 9, 
	13, -32, 10, 32, 34, 35, 37, 42, 
	64, 124, 9, 13, -32, -72, -89, -32, 
	-72, -78, -32, -72, -95, -32, -72, -107, 
	-86, -32, -71, -119, -32, -72, -83, -32, 
	-72, -121, -32, -72, -127, -32, -72, -78, 
	-32, -72, -93, -32, -72, -105, -32, -72, 
	-78, -32, -72, -121, -32, -72, -104, -32, 
	-72, -72, -32, -72, -93, -32, -72, -127, 
	-32, -72, -76, -32, -72, -120, 58, 10, 
	10, -32, 10, 32, 35, 37, 64, 9, 
	13, -72, -71, 10, -124, -118, -86, 10, 
	-32, 10, -72, 10, -89, 10, -32, 10, 
	-72, 10, -78, 10, -32, 10, -72, 10, 
	-95, 10, -32, 10, -72, 10, -107, -86, 
	10, -32, 10, -71, 10, -119, 10, -32, 
	10, -72, 10, -83, 10, -32, 10, -72, 
	10, -121, 10, -32, 10, -72, 10, -127, 
	10, -32, 10, -72, 10, -78, 10, -32, 
	10, -72, 10, -93, 10, -32, 10, -72, 
	10, -105, 10, -32, 10, -72, 10, -78, 
	10, -32, 10, -72, 10, -121, 10, -32, 
	10, -72, 10, -104, 10, -32, 10, -72, 
	10, -72, 10, -32, 10, -72, 10, -93, 
	10, -32, 10, -72, 10, -127, 10, -32, 
	10, -72, 10, -76, 10, -32, 10, -72, 
	10, -120, 10, 10, 58, -32, 10, 32, 
	34, 35, 37, 42, 64, 124, 9, 13, 
	-32, 10, -72, 10, -78, 10, -32, 10, 
	-72, 10, -95, 10, -32, 10, -72, 10, 
	-78, 10, -32, 10, -72, 10, -93, 10, 
	-32, 10, -72, 10, -106, 10, -32, 10, 
	-72, 10, -72, 10, -32, 10, -72, 10, 
	-108, 10, -32, 10, -72, 10, -126, 10, 
	-32, 10, -72, 10, -83, 10, -32, 10, 
	-72, 10, -121, 10, -32, 10, -72, -71, 
	10, -107, 10, -32, 10, -72, 10, -79, 
	10, -32, 10, -72, 10, -89, 10, -32, 
	10, -72, 10, -83, 10, -32, 10, -72, 
	10, -94, 10, -32, 10, -71, 10, -120, 
	10, -32, 10, -72, 10, -78, 10, -32, 
	10, -72, 10, -121, 10, -128, 10, -32, 
	10, -72, 10, -85, 10, -32, 10, -72, 
	10, -107, 10, -32, 10, -72, 10, -72, 
	10, -32, 10, -72, 10, -127, 10, -32, 
	10, -72, 10, -78, 10, -32, 10, -72, 
	10, -93, 10, -32, 10, -72, 10, -109, 
	10, -32, 10, -71, 10, -116, 10, -32, 
	10, -72, 10, -93, 10, -32, 10, -72, 
	10, -72, 10, -32, 10, -72, 10, -101, 
	10, -32, 10, -71, 10, -128, -127, -126, 
	10, -32, 10, -72, 10, -103, 10, -32, 
	10, -72, 10, -89, 10, -32, 10, -72, 
	10, -124, 10, -32, 10, -72, 10, -76, 
	10, -32, 10, -72, 10, -108, 10, -32, 
	10, -72, 10, -124, 10, -32, 10, -72, 
	10, -93, 10, -32, 10, -72, 10, -121, 
	10, -32, 10, -72, 10, -86, -85, 10, 
	-32, 10, -72, 10, -93, 10, -32, 10, 
	-71, 10, -119, 10, -32, 10, -72, 10, 
	-78, 10, -32, 10, -72, 10, -121, 10, 
	-32, 10, -72, 10, -126, 10, -32, 10, 
	-72, 10, -83, 10, -32, 10, -72, 10, 
	-121, 10, -32, 10, -72, 10, -91, 10, 
	-32, 10, -72, 10, -79, 10, -32, 10, 
	-72, 10, -127, 10, 10, 95, 10, 70, 
	10, 69, 10, 65, 10, 84, 10, 85, 
	10, 82, 10, 69, 10, 95, 10, 69, 
	10, 78, 10, 68, 10, 95, 10, 37, 
	-32, -72, -78, -32, -72, -95, -32, -72, 
	-78, -32, -72, -93, -32, -72, -106, -32, 
	-72, -72, -32, -72, -108, -32, -72, -126, 
	-32, -72, -83, -32, -72, -121, -32, -72, 
	-71, -107, -32, -72, -79, -32, -72, -89, 
	-32, -72, -83, -32, -72, -94, -32, -71, 
	-120, -32, -72, -78, -32, -72, -121, 58, 
	10, 10, -32, 10, 32, 35, 124, 9, 
	13, -72, -71, 10, -124, 10, -32, 10, 
	-72, 10, -89, 10, -32, 10, -72, 10, 
	-78, 10, -32, 10, -72, 10, -95, 10, 
	-32, 10, -72, 10, -107, -86, 10, -32, 
	10, -71, 10, -119, 10, -32, 10, -72, 
	10, -83, 10, -32, 10, -72, 10, -121, 
	10, -32, 10, -72, 10, -127, 10, -32, 
	10, -72, 10, -78, 10, -32, 10, -72, 
	10, -93, 10, -32, 10, -72, 10, -105, 
	10, -32, 10, -72, 10, -78, 10, -32, 
	10, -72, 10, -121, 10, -32, 10, -72, 
	10, -104, 10, -32, 10, -72, 10, -72, 
	10, -32, 10, -72, 10, -93, 10, -32, 
	10, -72, 10, -127, 10, -32, 10, -72, 
	10, -76, 10, -32, 10, -72, 10, -120, 
	10, 10, 58, -32, 10, -72, 10, -78, 
	10, -32, 10, -72, 10, -95, 10, -32, 
	10, -72, 10, -78, 10, -32, 10, -72, 
	10, -93, 10, -32, 10, -72, 10, -106, 
	10, -126, 10, -32, 10, -72, 10, -124, 
	10, -32, 10, -72, 10, -93, 10, -32, 
	10, -72, 10, -121, 10, -32, 10, -72, 
	10, -85, 10, -32, 10, -72, 10, -91, 
	10, -32, 10, -72, 10, -79, 10, -32, 
	10, -72, 10, -127, 10, -128, -32, -72, 
	-85, -32, -72, -107, -32, -72, -72, -32, 
	-72, -127, -32, -72, -78, -32, -72, -93, 
	-32, -72, -109, -32, -71, -116, -32, -72, 
	-79, -32, -72, -121, -32, -72, -103, -32, 
	-72, -79, -32, -71, -119, -32, -72, -103, 
	-32, -72, -93, -32, -72, -72, -32, -72, 
	-101, -32, -71, -128, -32, -72, -85, -32, 
	-72, -107, -32, -72, -72, -32, -72, -127, 
	-32, -72, -78, -32, -72, -93, -32, -72, 
	-109, -32, -71, -116, 58, 10, 10, -32, 
	10, 32, 35, 37, 42, 64, 9, 13, 
	-72, -71, 10, -127, -124, -108, 10, -32, 
	10, -72, 10, -77, 10, -32, 10, -72, 
	10, -85, 10, -32, 10, -72, 10, -103, 
	10, -32, 10, -72, 10, -108, 10, -32, 
	10, -71, 10, -125, 10, -32, 10, -72, 
	10, -85, 10, -32, 10, -71, 10, -119, 
	10, 10, 32, -32, 10, -72, 10, -89, 
	10, -32, 10, -72, 10, -78, 10, -32, 
	10, -72, 10, -95, 10, -32, 10, -72, 
	10, -107, -86, 10, -32, 10, -71, 10, 
	-119, 10, -32, 10, -72, 10, -83, 10, 
	-32, 10, -72, 10, -121, 10, -32, 10, 
	-72, 10, -127, 10, -32, 10, -72, 10, 
	-78, 10, -32, 10, -72, 10, -93, 10, 
	-32, 10, -72, 10, -105, 10, -32, 10, 
	-72, 10, -78, 10, -32, 10, -72, 10, 
	-121, 10, -32, 10, -72, 10, -104, 10, 
	-32, 10, -72, 10, -72, 10, -32, 10, 
	-72, 10, -93, 10, -32, 10, -72, 10, 
	-127, 10, -32, 10, -72, 10, -76, 10, 
	-32, 10, -72, 10, -120, 10, 10, 58, 
	-32, 10, -72, 10, -78, 10, -32, 10, 
	-72, 10, -95, 10, -32, 10, -72, 10, 
	-78, 10, -32, 10, -72, 10, -93, 10, 
	-32, 10, -72, 10, -106, 10, -32, 10, 
	-72, 10, -79, 10, -32, 10, -72, 10, 
	-121, 10, -32, 10, -72, 10, -103, 10, 
	-32, 10, -72, 10, -79, 10, -32, 10, 
	-71, 10, -119, 10, -32, 10, -72, 10, 
	-103, 10, -128, -127, -126, 10, -32, 10, 
	-72, 10, -95, -85, 10, -32, 10, -72, 
	10, -73, 10, -32, 10, -71, 10, -120, 
	10, -32, 10, -72, 10, -83, 10, -32, 
	10, -72, 10, -107, 10, -32, 10, -72, 
	10, -72, 10, -32, 10, -72, 10, -127, 
	10, -32, 10, -72, 10, -78, 10, -32, 
	10, -72, 10, -93, 10, -32, 10, -72, 
	10, -109, 10, -32, 10, -71, 10, -116, 
	10, -32, 10, -72, 10, -107, -91, 10, 
	-32, 10, -71, 10, -120, 10, -32, 10, 
	-72, 10, -80, 10, -32, 10, -72, 10, 
	-124, 10, -32, 10, -72, 10, -93, 10, 
	-32, 10, -72, 10, -121, 10, -32, 10, 
	-72, 10, -85, 10, -32, 10, -72, 10, 
	-91, 10, -32, 10, -72, 10, -79, 10, 
	-32, 10, -72, 10, -127, 10, 10, 95, 
	10, 70, 10, 69, 10, 65, 10, 84, 
	10, 85, 10, 82, 10, 69, 10, 95, 
	10, 69, 10, 78, 10, 68, 10, 95, 
	10, 37, -128, -127, -126, -32, -72, -95, 
	-85, -32, -72, -73, -32, -71, -120, -32, 
	-72, -83, -32, -72, -107, -32, -72, -72, 
	-32, -72, -127, -32, -72, -78, -32, -72, 
	-93, -32, -72, -109, -32, -71, -116, 58, 
	10, 10, -32, 10, 32, 35, 37, 42, 
	64, 9, 13, -72, -71, 10, -127, -124, 
	-108, -86, 10, -32, 10, -72, 10, -77, 
	10, -32, 10, -72, 10, -85, 10, -32, 
	10, -72, 10, -103, 10, -32, 10, -72, 
	10, -108, 10, -32, 10, -71, 10, -125, 
	10, -32, 10, -72, 10, -85, 10, -32, 
	10, -71, 10, -119, 10, 10, 32, -32, 
	10, -72, 10, -89, 10, -32, 10, -72, 
	10, -78, 10, -32, 10, -72, 10, -95, 
	10, -32, 10, -72, 10, -107, -86, 10, 
	-32, 10, -71, 10, -119, 10, -32, 10, 
	-72, 10, -83, 10, -32, 10, -72, 10, 
	-121, 10, -32, 10, -72, 10, -127, 10, 
	-32, 10, -72, 10, -78, 10, -32, 10, 
	-72, 10, -93, 10, -32, 10, -72, 10, 
	-105, 10, -32, 10, -72, 10, -78, 10, 
	-32, 10, -72, 10, -121, 10, -32, 10, 
	-72, 10, -104, 10, -32, 10, -72, 10, 
	-72, 10, -32, 10, -72, 10, -93, 10, 
	-32, 10, -72, 10, -127, 10, -32, 10, 
	-72, 10, -76, 10, -32, 10, -72, 10, 
	-120, 10, 10, 58, -32, 10, -72, 10, 
	-78, 10, -32, 10, -72, 10, -95, 10, 
	-32, 10, -72, 10, -78, 10, -32, 10, 
	-72, 10, -93, 10, -32, 10, -72, 10, 
	-106, 10, -32, 10, -72, 10, -79, 10, 
	-32, 10, -72, 10, -121, 10, -32, 10, 
	-72, 10, -103, 10, -32, 10, -72, 10, 
	-79, 10, -32, 10, -71, 10, -119, 10, 
	-32, 10, -72, 10, -103, 10, -32, 10, 
	-72, 10, -93, 10, -32, 10, -72, 10, 
	-72, 10, -32, 10, -72, 10, -101, 10, 
	-32, 10, -71, 10, -128, 10, -32, 10, 
	-72, 10, -85, 10, -32, 10, -72, 10, 
	-107, 10, -32, 10, -72, 10, -72, 10, 
	-32, 10, -72, 10, -127, 10, -32, 10, 
	-72, 10, -78, 10, -32, 10, -72, 10, 
	-93, 10, -32, 10, -72, 10, -109, 10, 
	-32, 10, -71, 10, -116, 10, -128, -127, 
	-126, 10, -32, 10, -72, 10, -95, -85, 
	10, -32, 10, -72, 10, -73, 10, -32, 
	10, -71, 10, -120, 10, -32, 10, -72, 
	10, -83, 10, -32, 10, -72, 10, -107, 
	-103, -91, 10, -32, 10, -71, 10, -120, 
	10, -32, 10, -72, 10, -89, 10, -32, 
	10, -72, 10, -124, 10, -32, 10, -72, 
	10, -76, 10, -32, 10, -72, 10, -108, 
	10, -32, 10, -72, 10, -80, 10, -32, 
	10, -72, 10, -124, 10, -32, 10, -72, 
	10, -93, 10, -32, 10, -72, 10, -121, 
	10, -32, 10, -72, 10, -86, -85, 10, 
	-32, 10, -72, 10, -93, 10, -32, 10, 
	-71, 10, -119, 10, -32, 10, -72, 10, 
	-78, 10, -32, 10, -72, 10, -121, 10, 
	-32, 10, -72, 10, -126, 10, -32, 10, 
	-72, 10, -83, 10, -32, 10, -72, 10, 
	-121, 10, -32, 10, -72, 10, -91, 10, 
	-32, 10, -72, 10, -79, 10, -32, 10, 
	-72, 10, -127, 10, 10, 95, 10, 70, 
	10, 69, 10, 65, 10, 84, 10, 85, 
	10, 82, 10, 69, 10, 95, 10, 69, 
	10, 78, 10, 68, 10, 95, 10, 37, 
	-32, -72, -107, -103, -91, -32, -71, -120, 
	-32, -72, -89, -32, -72, -124, -32, -72, 
	-76, -32, -72, -108, 58, 10, 10, -32, 
	10, 32, 35, 37, 42, 64, 9, 13, 
	-72, -71, 10, -127, -124, -108, -86, 10, 
	-32, 10, -72, 10, -77, 10, -32, 10, 
	-72, 10, -85, 10, -32, 10, -72, 10, 
	-103, 10, -32, 10, -72, 10, -108, 10, 
	-32, 10, -71, 10, -125, 10, -32, 10, 
	-72, 10, -85, 10, -32, 10, -71, 10, 
	-119, 10, 10, 32, -32, 10, -72, 10, 
	-89, 10, -32, 10, -72, 10, -78, 10, 
	-32, 10, -72, 10, -95, 10, -32, 10, 
	-72, 10, -107, -86, 10, -32, 10, -71, 
	10, -119, 10, -32, 10, -72, 10, -83, 
	10, -32, 10, -72, 10, -121, 10, -32, 
	10, -72, 10, -127, 10, -32, 10, -72, 
	10, -78, 10, -32, 10, -72, 10, -93, 
	10, -32, 10, -72, 10, -105, 10, -32, 
	10, -72, 10, -78, 10, -32, 10, -72, 
	10, -121, 10, -32, 10, -72, 10, -104, 
	10, -32, 10, -72, 10, -72, 10, -32, 
	10, -72, 10, -93, 10, -32, 10, -72, 
	10, -127, 10, -32, 10, -72, 10, -76, 
	10, -32, 10, -72, 10, -120, 10, 10, 
	58, -32, 10, -72, 10, -78, 10, -32, 
	10, -72, 10, -95, 10, -32, 10, -72, 
	10, -78, 10, -32, 10, -72, 10, -93, 
	10, -32, 10, -72, 10, -106, 10, -32, 
	10, -72, 10, -79, 10, -32, 10, -72, 
	10, -121, 10, -32, 10, -72, 10, -103, 
	10, -32, 10, -72, 10, -79, 10, -32, 
	10, -71, 10, -119, 10, -32, 10, -72, 
	10, -103, 10, -32, 10, -72, 10, -93, 
	10, -32, 10, -72, 10, -72, 10, -32, 
	10, -72, 10, -101, 10, -32, 10, -71, 
	10, -128, 10, -32, 10, -72, 10, -85, 
	10, -32, 10, -72, 10, -107, 10, -32, 
	10, -72, 10, -72, 10, -32, 10, -72, 
	10, -127, 10, -32, 10, -72, 10, -78, 
	10, -32, 10, -72, 10, -93, 10, -32, 
	10, -72, 10, -109, 10, -32, 10, -71, 
	10, -116, 10, -128, -127, -126, 10, -32, 
	10, -72, 10, -95, -85, 10, -32, 10, 
	-72, 10, -73, 10, -32, 10, -71, 10, 
	-120, 10, -32, 10, -72, 10, -83, 10, 
	-32, 10, -72, 10, -107, -91, 10, -32, 
	10, -71, 10, -120, 10, -32, 10, -72, 
	10, -80, 10, -32, 10, -72, 10, -124, 
	10, -32, 10, -72, 10, -93, 10, -32, 
	10, -72, 10, -121, 10, -32, 10, -72, 
	10, -86, -85, 10, -32, 10, -72, 10, 
	-93, 10, -32, 10, -71, 10, -119, 10, 
	-32, 10, -72, 10, -78, 10, -32, 10, 
	-72, 10, -121, 10, -32, 10, -72, 10, 
	-126, 10, -32, 10, -72, 10, -83, 10, 
	-32, 10, -72, 10, -121, 10, -32, 10, 
	-72, 10, -91, 10, -32, 10, -72, 10, 
	-79, 10, -32, 10, -72, 10, -127, 10, 
	10, 95, 10, 70, 10, 69, 10, 65, 
	10, 84, 10, 85, 10, 82, 10, 69, 
	10, 95, 10, 69, 10, 78, 10, 68, 
	10, 95, 10, 37, -32, -72, -80, -32, 
	-72, -124, -32, -72, -93, -32, -72, -121, 
	-32, -72, -86, -85, -32, -72, -93, -32, 
	-71, -119, -32, -72, -78, -32, -72, -121, 
	-32, -72, -126, -32, -72, -83, -32, -72, 
	-121, -32, -72, -91, -32, -72, -79, -32, 
	-72, -127, 187, 191, 0
];

var _lexer_single_lengths = [
	0, 10, 2, 5, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 2, 2, 9, 1, 1, 2, 
	2, 3, 3, 3, 3, 2, 2, 2, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 3, 
	5, 3, 2, 4, 3, 2, 4, 9, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 2, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 6, 3, 4, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 3, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 9, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 3, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 4, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 3, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 2, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 5, 3, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 3, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 7, 3, 4, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 3, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 4, 2, 2, 
	3, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 3, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 3, 1, 1, 2, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	7, 3, 5, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 3, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	4, 2, 2, 3, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 4, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 3, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 1, 1, 3, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 7, 
	3, 5, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 3, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 4, 
	2, 2, 3, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 3, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	3, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 2, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 0
];

var _lexer_range_lengths = [
	0, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 0, 0, 0, 
	0, 1, 1, 1, 1, 1, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	1, 1, 1, 1, 0, 0, 1, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0
];

var _lexer_index_offsets = [
	0, 0, 12, 15, 21, 23, 25, 27, 
	29, 31, 33, 35, 37, 39, 41, 43, 
	45, 47, 49, 51, 53, 55, 57, 59, 
	61, 63, 65, 68, 71, 82, 84, 86, 
	89, 92, 97, 102, 107, 112, 116, 120, 
	123, 125, 127, 129, 131, 133, 135, 137, 
	139, 141, 143, 145, 147, 149, 151, 153, 
	158, 165, 170, 174, 180, 184, 187, 193, 
	204, 206, 208, 210, 212, 214, 216, 218, 
	220, 222, 224, 226, 229, 231, 233, 235, 
	237, 239, 241, 243, 245, 247, 249, 251, 
	253, 255, 257, 259, 261, 263, 265, 267, 
	269, 271, 273, 275, 277, 279, 281, 283, 
	285, 287, 289, 291, 293, 295, 297, 299, 
	301, 303, 305, 307, 309, 311, 313, 315, 
	317, 319, 321, 323, 325, 333, 337, 342, 
	345, 348, 351, 354, 357, 360, 363, 366, 
	369, 372, 375, 379, 382, 385, 388, 391, 
	394, 397, 400, 403, 406, 409, 412, 415, 
	418, 421, 424, 427, 430, 433, 436, 439, 
	442, 445, 448, 451, 454, 457, 460, 463, 
	466, 469, 472, 475, 478, 481, 484, 487, 
	490, 493, 496, 499, 502, 505, 508, 511, 
	514, 517, 528, 531, 534, 537, 540, 543, 
	546, 549, 552, 555, 558, 561, 564, 567, 
	570, 573, 576, 579, 582, 585, 588, 591, 
	594, 597, 600, 603, 606, 609, 612, 615, 
	618, 621, 625, 628, 631, 634, 637, 640, 
	643, 646, 649, 652, 655, 658, 661, 664, 
	667, 670, 673, 676, 679, 682, 685, 688, 
	691, 694, 697, 700, 703, 706, 709, 712, 
	715, 718, 721, 724, 727, 730, 733, 736, 
	739, 742, 745, 748, 751, 754, 757, 760, 
	763, 766, 769, 772, 775, 778, 781, 784, 
	787, 790, 793, 796, 799, 804, 807, 810, 
	813, 816, 819, 822, 825, 828, 831, 834, 
	837, 840, 843, 846, 849, 852, 855, 858, 
	861, 864, 867, 870, 873, 876, 879, 882, 
	886, 889, 892, 895, 898, 901, 904, 907, 
	910, 913, 916, 919, 922, 925, 928, 931, 
	934, 937, 940, 943, 946, 949, 952, 955, 
	958, 961, 964, 967, 970, 973, 976, 979, 
	982, 985, 988, 991, 994, 997, 1000, 1003, 
	1006, 1009, 1012, 1015, 1018, 1020, 1022, 1024, 
	1026, 1028, 1030, 1032, 1034, 1036, 1038, 1040, 
	1042, 1044, 1046, 1048, 1050, 1052, 1054, 1056, 
	1058, 1060, 1062, 1064, 1066, 1068, 1070, 1072, 
	1074, 1076, 1078, 1080, 1083, 1085, 1087, 1089, 
	1091, 1093, 1095, 1097, 1099, 1101, 1103, 1105, 
	1107, 1109, 1111, 1113, 1115, 1117, 1119, 1121, 
	1123, 1125, 1127, 1129, 1131, 1133, 1140, 1144, 
	1147, 1150, 1153, 1156, 1159, 1162, 1165, 1168, 
	1171, 1174, 1177, 1180, 1184, 1187, 1190, 1193, 
	1196, 1199, 1202, 1205, 1208, 1211, 1214, 1217, 
	1220, 1223, 1226, 1229, 1232, 1235, 1238, 1241, 
	1244, 1247, 1250, 1253, 1256, 1259, 1262, 1265, 
	1268, 1271, 1274, 1277, 1280, 1283, 1286, 1289, 
	1292, 1295, 1298, 1301, 1304, 1307, 1310, 1313, 
	1316, 1319, 1322, 1325, 1328, 1331, 1334, 1337, 
	1340, 1343, 1346, 1349, 1352, 1355, 1358, 1361, 
	1364, 1367, 1370, 1373, 1376, 1379, 1382, 1385, 
	1388, 1391, 1394, 1397, 1400, 1403, 1406, 1409, 
	1412, 1415, 1418, 1421, 1424, 1427, 1430, 1433, 
	1435, 1437, 1439, 1441, 1443, 1445, 1447, 1449, 
	1451, 1453, 1455, 1457, 1459, 1461, 1463, 1465, 
	1467, 1469, 1471, 1473, 1475, 1477, 1479, 1481, 
	1483, 1485, 1487, 1489, 1491, 1493, 1495, 1497, 
	1499, 1501, 1503, 1505, 1507, 1509, 1511, 1513, 
	1515, 1517, 1519, 1521, 1523, 1525, 1527, 1529, 
	1531, 1533, 1535, 1537, 1539, 1541, 1543, 1545, 
	1547, 1549, 1551, 1553, 1555, 1557, 1559, 1561, 
	1563, 1565, 1567, 1569, 1571, 1573, 1575, 1577, 
	1579, 1581, 1583, 1585, 1587, 1589, 1591, 1593, 
	1595, 1597, 1606, 1610, 1615, 1618, 1621, 1624, 
	1627, 1630, 1633, 1636, 1639, 1642, 1645, 1648, 
	1651, 1654, 1657, 1660, 1663, 1666, 1669, 1672, 
	1675, 1678, 1681, 1684, 1687, 1690, 1693, 1696, 
	1699, 1702, 1705, 1708, 1711, 1714, 1718, 1721, 
	1724, 1727, 1730, 1733, 1736, 1739, 1742, 1745, 
	1748, 1751, 1754, 1757, 1760, 1763, 1766, 1769, 
	1772, 1775, 1778, 1781, 1784, 1787, 1790, 1793, 
	1796, 1799, 1802, 1805, 1808, 1811, 1814, 1817, 
	1820, 1823, 1826, 1829, 1832, 1835, 1838, 1841, 
	1844, 1847, 1850, 1853, 1856, 1859, 1862, 1865, 
	1868, 1871, 1874, 1877, 1880, 1883, 1886, 1889, 
	1892, 1895, 1898, 1901, 1904, 1907, 1910, 1913, 
	1916, 1919, 1922, 1925, 1928, 1931, 1934, 1937, 
	1940, 1943, 1946, 1949, 1952, 1955, 1960, 1963, 
	1966, 1970, 1973, 1976, 1979, 1982, 1985, 1988, 
	1991, 1994, 1997, 2000, 2003, 2006, 2009, 2012, 
	2015, 2018, 2021, 2024, 2027, 2030, 2033, 2036, 
	2039, 2042, 2045, 2048, 2051, 2054, 2057, 2060, 
	2063, 2066, 2070, 2073, 2076, 2079, 2082, 2085, 
	2088, 2091, 2094, 2097, 2100, 2103, 2106, 2109, 
	2112, 2115, 2118, 2121, 2124, 2127, 2130, 2133, 
	2136, 2139, 2142, 2145, 2148, 2151, 2154, 2157, 
	2160, 2163, 2166, 2169, 2172, 2175, 2178, 2181, 
	2184, 2187, 2190, 2193, 2197, 2199, 2201, 2204, 
	2206, 2208, 2210, 2212, 2214, 2216, 2218, 2220, 
	2222, 2224, 2226, 2228, 2230, 2232, 2234, 2236, 
	2238, 2240, 2242, 2244, 2246, 2248, 2250, 2252, 
	2254, 2256, 2258, 2260, 2262, 2264, 2266, 2268, 
	2270, 2279, 2283, 2289, 2292, 2295, 2298, 2301, 
	2304, 2307, 2310, 2313, 2316, 2319, 2322, 2325, 
	2328, 2331, 2334, 2337, 2340, 2343, 2346, 2349, 
	2352, 2355, 2358, 2361, 2364, 2367, 2370, 2373, 
	2376, 2379, 2382, 2385, 2388, 2392, 2395, 2398, 
	2401, 2404, 2407, 2410, 2413, 2416, 2419, 2422, 
	2425, 2428, 2431, 2434, 2437, 2440, 2443, 2446, 
	2449, 2452, 2455, 2458, 2461, 2464, 2467, 2470, 
	2473, 2476, 2479, 2482, 2485, 2488, 2491, 2494, 
	2497, 2500, 2503, 2506, 2509, 2512, 2515, 2518, 
	2521, 2524, 2527, 2530, 2533, 2536, 2539, 2542, 
	2545, 2548, 2551, 2554, 2557, 2560, 2563, 2566, 
	2569, 2572, 2575, 2578, 2581, 2584, 2587, 2590, 
	2593, 2596, 2599, 2602, 2605, 2608, 2611, 2614, 
	2617, 2620, 2623, 2626, 2629, 2632, 2635, 2638, 
	2641, 2644, 2647, 2650, 2653, 2656, 2659, 2662, 
	2665, 2668, 2671, 2674, 2677, 2680, 2683, 2686, 
	2689, 2692, 2695, 2698, 2701, 2704, 2707, 2710, 
	2713, 2716, 2719, 2722, 2725, 2728, 2731, 2734, 
	2737, 2742, 2745, 2748, 2752, 2755, 2758, 2761, 
	2764, 2767, 2770, 2773, 2776, 2779, 2782, 2785, 
	2790, 2793, 2796, 2799, 2802, 2805, 2808, 2811, 
	2814, 2817, 2820, 2823, 2826, 2829, 2832, 2835, 
	2838, 2841, 2844, 2847, 2850, 2853, 2856, 2859, 
	2862, 2865, 2868, 2871, 2874, 2877, 2881, 2884, 
	2887, 2890, 2893, 2896, 2899, 2902, 2905, 2908, 
	2911, 2914, 2917, 2920, 2923, 2926, 2929, 2932, 
	2935, 2938, 2941, 2944, 2947, 2950, 2953, 2956, 
	2959, 2962, 2965, 2968, 2971, 2974, 2977, 2980, 
	2983, 2986, 2989, 2992, 2995, 2998, 3001, 3004, 
	3007, 3010, 3013, 3015, 3017, 3021, 3023, 3025, 
	3027, 3029, 3031, 3033, 3035, 3037, 3039, 3041, 
	3043, 3045, 3047, 3049, 3051, 3053, 3055, 3057, 
	3066, 3070, 3076, 3079, 3082, 3085, 3088, 3091, 
	3094, 3097, 3100, 3103, 3106, 3109, 3112, 3115, 
	3118, 3121, 3124, 3127, 3130, 3133, 3136, 3139, 
	3142, 3145, 3148, 3151, 3154, 3157, 3160, 3163, 
	3166, 3169, 3172, 3175, 3179, 3182, 3185, 3188, 
	3191, 3194, 3197, 3200, 3203, 3206, 3209, 3212, 
	3215, 3218, 3221, 3224, 3227, 3230, 3233, 3236, 
	3239, 3242, 3245, 3248, 3251, 3254, 3257, 3260, 
	3263, 3266, 3269, 3272, 3275, 3278, 3281, 3284, 
	3287, 3290, 3293, 3296, 3299, 3302, 3305, 3308, 
	3311, 3314, 3317, 3320, 3323, 3326, 3329, 3332, 
	3335, 3338, 3341, 3344, 3347, 3350, 3353, 3356, 
	3359, 3362, 3365, 3368, 3371, 3374, 3377, 3380, 
	3383, 3386, 3389, 3392, 3395, 3398, 3401, 3404, 
	3407, 3410, 3413, 3416, 3419, 3422, 3425, 3428, 
	3431, 3434, 3437, 3440, 3443, 3446, 3449, 3452, 
	3455, 3458, 3461, 3464, 3467, 3470, 3473, 3476, 
	3479, 3482, 3485, 3488, 3491, 3494, 3497, 3500, 
	3503, 3506, 3509, 3512, 3515, 3518, 3521, 3524, 
	3529, 3532, 3535, 3539, 3542, 3545, 3548, 3551, 
	3554, 3557, 3560, 3563, 3566, 3569, 3572, 3576, 
	3579, 3582, 3585, 3588, 3591, 3594, 3597, 3600, 
	3603, 3606, 3609, 3612, 3615, 3618, 3621, 3624, 
	3627, 3631, 3634, 3637, 3640, 3643, 3646, 3649, 
	3652, 3655, 3658, 3661, 3664, 3667, 3670, 3673, 
	3676, 3679, 3682, 3685, 3688, 3691, 3694, 3697, 
	3700, 3703, 3706, 3709, 3712, 3715, 3718, 3721, 
	3724, 3727, 3730, 3733, 3736, 3739, 3742, 3745, 
	3748, 3751, 3754, 3757, 3760, 3763, 3765, 3767, 
	3769, 3771, 3773, 3775, 3777, 3779, 3781, 3783, 
	3785, 3787, 3789, 3791, 3794, 3796, 3798, 3800, 
	3802, 3804, 3806, 3808, 3810, 3812, 3814, 3816, 
	3818, 3820, 3822, 3824, 3826, 3828, 3830, 3832, 
	3834, 3836, 3838, 3840, 3842, 3844, 3846, 3848, 
	3850, 3852, 3854, 3856, 3858
];

var _lexer_indicies = [
	1, 3, 2, 4, 5, 6, 7, 8, 
	9, 10, 2, 0, 11, 12, 0, 13, 
	14, 15, 16, 17, 0, 18, 0, 19, 
	0, 20, 0, 21, 0, 22, 0, 23, 
	0, 24, 0, 25, 0, 26, 0, 27, 
	0, 28, 0, 29, 0, 30, 0, 31, 
	0, 32, 0, 33, 0, 34, 0, 35, 
	0, 36, 0, 37, 0, 38, 0, 39, 
	0, 41, 42, 40, 44, 45, 43, 1, 
	3, 2, 4, 5, 6, 7, 8, 9, 
	2, 0, 46, 0, 47, 0, 49, 50, 
	48, 52, 53, 51, 56, 55, 57, 55, 
	54, 60, 59, 61, 59, 58, 60, 59, 
	62, 59, 58, 60, 59, 63, 59, 58, 
	65, 64, 64, 0, 3, 66, 66, 0, 
	68, 69, 67, 3, 0, 70, 0, 71, 
	0, 72, 0, 73, 0, 74, 0, 75, 
	0, 76, 0, 77, 0, 78, 0, 79, 
	0, 80, 0, 81, 0, 82, 0, 83, 
	0, 0, 0, 0, 0, 84, 85, 86, 
	85, 85, 88, 87, 84, 3, 89, 8, 
	89, 0, 90, 91, 90, 0, 94, 93, 
	95, 96, 93, 92, 0, 98, 99, 97, 
	0, 98, 97, 94, 100, 98, 99, 100, 
	97, 101, 94, 102, 103, 104, 105, 106, 
	107, 108, 102, 0, 109, 0, 110, 0, 
	111, 0, 112, 0, 113, 0, 114, 0, 
	115, 0, 116, 0, 117, 0, 118, 0, 
	119, 0, 120, 121, 0, 122, 0, 123, 
	0, 124, 0, 125, 0, 126, 0, 127, 
	0, 128, 0, 129, 0, 130, 0, 131, 
	0, 132, 0, 133, 0, 134, 0, 135, 
	0, 136, 0, 137, 0, 138, 0, 139, 
	0, 140, 0, 141, 0, 142, 0, 143, 
	0, 144, 0, 145, 0, 146, 0, 147, 
	0, 148, 0, 149, 0, 150, 0, 151, 
	0, 152, 0, 153, 0, 154, 0, 155, 
	0, 156, 0, 157, 0, 158, 0, 159, 
	0, 160, 0, 161, 0, 162, 0, 163, 
	0, 164, 0, 165, 0, 166, 0, 167, 
	0, 169, 168, 171, 170, 172, 171, 173, 
	174, 175, 174, 173, 170, 176, 177, 171, 
	170, 178, 179, 180, 171, 170, 181, 171, 
	170, 182, 171, 170, 183, 171, 170, 184, 
	171, 170, 185, 171, 170, 186, 171, 170, 
	187, 171, 170, 188, 171, 170, 189, 171, 
	170, 190, 171, 170, 191, 171, 170, 192, 
	193, 171, 170, 194, 171, 170, 195, 171, 
	170, 196, 171, 170, 197, 171, 170, 198, 
	171, 170, 199, 171, 170, 200, 171, 170, 
	201, 171, 170, 202, 171, 170, 203, 171, 
	170, 204, 171, 170, 205, 171, 170, 206, 
	171, 170, 207, 171, 170, 208, 171, 170, 
	209, 171, 170, 210, 171, 170, 211, 171, 
	170, 212, 171, 170, 213, 171, 170, 214, 
	171, 170, 215, 171, 170, 216, 171, 170, 
	217, 171, 170, 218, 171, 170, 219, 171, 
	170, 220, 171, 170, 221, 171, 170, 222, 
	171, 170, 223, 171, 170, 224, 171, 170, 
	225, 171, 170, 226, 171, 170, 227, 171, 
	170, 228, 171, 170, 229, 171, 170, 230, 
	171, 170, 231, 171, 170, 232, 171, 170, 
	233, 171, 170, 234, 171, 170, 235, 171, 
	170, 236, 171, 170, 237, 171, 170, 238, 
	171, 170, 171, 239, 170, 240, 242, 241, 
	243, 244, 245, 246, 247, 248, 241, 0, 
	249, 171, 170, 250, 171, 170, 251, 171, 
	170, 252, 171, 170, 253, 171, 170, 254, 
	171, 170, 255, 171, 170, 256, 171, 170, 
	257, 171, 170, 258, 171, 170, 259, 171, 
	170, 260, 171, 170, 261, 171, 170, 262, 
	171, 170, 238, 171, 170, 263, 171, 170, 
	264, 171, 170, 265, 171, 170, 266, 171, 
	170, 267, 171, 170, 268, 171, 170, 269, 
	171, 170, 270, 171, 170, 271, 171, 170, 
	272, 171, 170, 273, 171, 170, 274, 171, 
	170, 275, 171, 170, 276, 171, 170, 277, 
	171, 170, 278, 171, 170, 279, 280, 171, 
	170, 281, 171, 170, 282, 171, 170, 283, 
	171, 170, 284, 171, 170, 285, 171, 170, 
	286, 171, 170, 287, 171, 170, 288, 171, 
	170, 289, 171, 170, 290, 171, 170, 291, 
	171, 170, 292, 171, 170, 293, 171, 170, 
	294, 171, 170, 295, 171, 170, 296, 171, 
	170, 297, 171, 170, 298, 171, 170, 299, 
	171, 170, 300, 171, 170, 301, 171, 170, 
	238, 171, 170, 302, 171, 170, 303, 171, 
	170, 304, 171, 170, 305, 171, 170, 306, 
	171, 170, 307, 171, 170, 308, 171, 170, 
	309, 171, 170, 310, 171, 170, 311, 171, 
	170, 312, 171, 170, 313, 171, 170, 314, 
	171, 170, 315, 171, 170, 316, 171, 170, 
	317, 171, 170, 318, 171, 170, 319, 171, 
	170, 320, 171, 170, 321, 171, 170, 322, 
	171, 170, 323, 171, 170, 324, 171, 170, 
	325, 171, 170, 238, 171, 170, 326, 171, 
	170, 327, 171, 170, 328, 171, 170, 329, 
	171, 170, 330, 171, 170, 331, 171, 170, 
	332, 171, 170, 333, 171, 170, 334, 171, 
	170, 335, 171, 170, 280, 171, 170, 302, 
	336, 337, 171, 170, 338, 171, 170, 339, 
	171, 170, 340, 171, 170, 341, 171, 170, 
	342, 171, 170, 343, 171, 170, 344, 171, 
	170, 345, 171, 170, 346, 171, 170, 347, 
	171, 170, 348, 171, 170, 349, 171, 170, 
	350, 171, 170, 351, 171, 170, 238, 171, 
	170, 352, 171, 170, 353, 171, 170, 354, 
	171, 170, 355, 171, 170, 356, 171, 170, 
	357, 171, 170, 358, 171, 170, 359, 171, 
	170, 360, 171, 170, 361, 171, 170, 362, 
	171, 170, 363, 364, 171, 170, 365, 171, 
	170, 366, 171, 170, 367, 171, 170, 368, 
	171, 170, 369, 171, 170, 370, 171, 170, 
	371, 171, 170, 372, 171, 170, 373, 171, 
	170, 374, 171, 170, 375, 171, 170, 376, 
	171, 170, 377, 171, 170, 378, 171, 170, 
	379, 171, 170, 380, 171, 170, 381, 171, 
	170, 382, 171, 170, 383, 171, 170, 384, 
	171, 170, 334, 171, 170, 385, 171, 170, 
	386, 171, 170, 387, 171, 170, 388, 171, 
	170, 389, 171, 170, 390, 171, 170, 391, 
	171, 170, 392, 171, 170, 238, 171, 170, 
	171, 393, 170, 171, 394, 170, 171, 395, 
	170, 171, 396, 170, 171, 397, 170, 171, 
	398, 170, 171, 399, 170, 171, 400, 170, 
	171, 401, 170, 171, 402, 170, 171, 403, 
	170, 171, 404, 170, 171, 405, 170, 171, 
	406, 170, 407, 0, 408, 0, 409, 0, 
	410, 0, 411, 0, 412, 0, 413, 0, 
	414, 0, 415, 0, 416, 0, 417, 0, 
	418, 0, 419, 0, 420, 0, 166, 0, 
	421, 0, 422, 0, 423, 0, 424, 0, 
	425, 0, 426, 0, 427, 0, 428, 0, 
	429, 0, 430, 0, 431, 0, 432, 0, 
	433, 0, 434, 0, 435, 0, 436, 0, 
	437, 438, 0, 439, 0, 440, 0, 441, 
	0, 442, 0, 443, 0, 444, 0, 445, 
	0, 446, 0, 447, 0, 448, 0, 449, 
	0, 450, 0, 451, 0, 452, 0, 453, 
	0, 454, 0, 455, 0, 456, 0, 457, 
	0, 458, 0, 459, 0, 460, 0, 461, 
	0, 463, 462, 465, 464, 466, 465, 467, 
	468, 468, 467, 464, 469, 470, 465, 464, 
	471, 465, 464, 472, 465, 464, 473, 465, 
	464, 474, 465, 464, 475, 465, 464, 476, 
	465, 464, 477, 465, 464, 478, 465, 464, 
	479, 465, 464, 480, 465, 464, 481, 465, 
	464, 482, 465, 464, 483, 484, 465, 464, 
	485, 465, 464, 486, 465, 464, 487, 465, 
	464, 488, 465, 464, 489, 465, 464, 490, 
	465, 464, 491, 465, 464, 492, 465, 464, 
	493, 465, 464, 494, 465, 464, 495, 465, 
	464, 496, 465, 464, 497, 465, 464, 498, 
	465, 464, 499, 465, 464, 500, 465, 464, 
	501, 465, 464, 502, 465, 464, 503, 465, 
	464, 504, 465, 464, 505, 465, 464, 506, 
	465, 464, 507, 465, 464, 508, 465, 464, 
	509, 465, 464, 510, 465, 464, 511, 465, 
	464, 512, 465, 464, 513, 465, 464, 514, 
	465, 464, 515, 465, 464, 516, 465, 464, 
	517, 465, 464, 518, 465, 464, 519, 465, 
	464, 520, 465, 464, 521, 465, 464, 522, 
	465, 464, 523, 465, 464, 524, 465, 464, 
	525, 465, 464, 526, 465, 464, 527, 465, 
	464, 528, 465, 464, 529, 465, 464, 465, 
	530, 464, 531, 465, 464, 532, 465, 464, 
	533, 465, 464, 534, 465, 464, 535, 465, 
	464, 536, 465, 464, 537, 465, 464, 538, 
	465, 464, 539, 465, 464, 540, 465, 464, 
	541, 465, 464, 542, 465, 464, 543, 465, 
	464, 544, 465, 464, 529, 465, 464, 545, 
	465, 464, 546, 465, 464, 547, 465, 464, 
	548, 465, 464, 549, 465, 464, 550, 465, 
	464, 551, 465, 464, 552, 465, 464, 553, 
	465, 464, 554, 465, 464, 555, 465, 464, 
	556, 465, 464, 557, 465, 464, 558, 465, 
	464, 559, 465, 464, 560, 465, 464, 561, 
	465, 464, 562, 465, 464, 563, 465, 464, 
	564, 465, 464, 565, 465, 464, 529, 465, 
	464, 566, 0, 567, 0, 568, 0, 569, 
	0, 570, 0, 571, 0, 572, 0, 573, 
	0, 574, 0, 575, 0, 576, 0, 577, 
	0, 578, 0, 579, 0, 580, 0, 581, 
	0, 582, 0, 583, 0, 584, 0, 585, 
	0, 586, 0, 587, 0, 588, 0, 589, 
	0, 460, 0, 590, 0, 591, 0, 592, 
	0, 593, 0, 594, 0, 595, 0, 596, 
	0, 597, 0, 598, 0, 599, 0, 600, 
	0, 601, 0, 602, 0, 603, 0, 604, 
	0, 605, 0, 606, 0, 38, 0, 607, 
	0, 608, 0, 609, 0, 610, 0, 611, 
	0, 612, 0, 613, 0, 614, 0, 615, 
	0, 616, 0, 617, 0, 618, 0, 619, 
	0, 620, 0, 621, 0, 622, 0, 623, 
	0, 624, 0, 625, 0, 626, 0, 627, 
	0, 628, 0, 629, 0, 630, 0, 631, 
	0, 632, 0, 633, 0, 634, 0, 635, 
	0, 636, 0, 637, 0, 638, 0, 639, 
	0, 640, 0, 641, 0, 642, 0, 643, 
	0, 645, 644, 647, 646, 648, 647, 649, 
	650, 651, 652, 650, 649, 646, 653, 654, 
	647, 646, 655, 656, 657, 647, 646, 658, 
	647, 646, 659, 647, 646, 660, 647, 646, 
	661, 647, 646, 662, 647, 646, 663, 647, 
	646, 664, 647, 646, 665, 647, 646, 666, 
	647, 646, 667, 647, 646, 668, 647, 646, 
	669, 647, 646, 670, 647, 646, 671, 647, 
	646, 672, 647, 646, 673, 647, 646, 674, 
	647, 646, 675, 647, 646, 676, 647, 646, 
	677, 647, 646, 678, 647, 646, 647, 679, 
	646, 680, 647, 646, 681, 647, 646, 682, 
	647, 646, 683, 647, 646, 684, 647, 646, 
	685, 647, 646, 686, 647, 646, 687, 647, 
	646, 688, 647, 646, 689, 647, 646, 690, 
	647, 646, 691, 692, 647, 646, 693, 647, 
	646, 694, 647, 646, 695, 647, 646, 696, 
	647, 646, 697, 647, 646, 698, 647, 646, 
	699, 647, 646, 700, 647, 646, 701, 647, 
	646, 702, 647, 646, 703, 647, 646, 704, 
	647, 646, 705, 647, 646, 706, 647, 646, 
	707, 647, 646, 708, 647, 646, 709, 647, 
	646, 710, 647, 646, 711, 647, 646, 712, 
	647, 646, 713, 647, 646, 714, 647, 646, 
	715, 647, 646, 716, 647, 646, 717, 647, 
	646, 718, 647, 646, 719, 647, 646, 720, 
	647, 646, 721, 647, 646, 722, 647, 646, 
	723, 647, 646, 724, 647, 646, 725, 647, 
	646, 726, 647, 646, 727, 647, 646, 728, 
	647, 646, 729, 647, 646, 730, 647, 646, 
	731, 647, 646, 732, 647, 646, 733, 647, 
	646, 734, 647, 646, 735, 647, 646, 736, 
	647, 646, 737, 647, 646, 647, 679, 646, 
	738, 647, 646, 739, 647, 646, 740, 647, 
	646, 741, 647, 646, 742, 647, 646, 743, 
	647, 646, 744, 647, 646, 745, 647, 646, 
	746, 647, 646, 747, 647, 646, 748, 647, 
	646, 749, 647, 646, 750, 647, 646, 751, 
	647, 646, 737, 647, 646, 752, 647, 646, 
	753, 647, 646, 754, 647, 646, 755, 647, 
	646, 756, 647, 646, 757, 647, 646, 758, 
	647, 646, 759, 647, 646, 760, 647, 646, 
	761, 647, 646, 762, 647, 646, 763, 647, 
	646, 764, 647, 646, 765, 647, 646, 766, 
	647, 646, 767, 647, 646, 768, 647, 646, 
	678, 647, 646, 769, 770, 771, 647, 646, 
	772, 647, 646, 773, 647, 646, 774, 775, 
	647, 646, 776, 647, 646, 777, 647, 646, 
	778, 647, 646, 779, 647, 646, 780, 647, 
	646, 781, 647, 646, 782, 647, 646, 783, 
	647, 646, 678, 647, 646, 784, 647, 646, 
	785, 647, 646, 786, 647, 646, 787, 647, 
	646, 788, 647, 646, 789, 647, 646, 790, 
	647, 646, 791, 647, 646, 792, 647, 646, 
	793, 647, 646, 794, 647, 646, 795, 647, 
	646, 796, 647, 646, 797, 647, 646, 798, 
	647, 646, 799, 647, 646, 800, 647, 646, 
	801, 647, 646, 802, 647, 646, 803, 647, 
	646, 737, 647, 646, 804, 647, 646, 805, 
	647, 646, 806, 807, 647, 646, 808, 647, 
	646, 809, 647, 646, 678, 647, 646, 810, 
	647, 646, 811, 647, 646, 678, 647, 646, 
	812, 647, 646, 813, 647, 646, 814, 647, 
	646, 815, 647, 646, 816, 647, 646, 817, 
	647, 646, 818, 647, 646, 819, 647, 646, 
	820, 647, 646, 821, 647, 646, 822, 647, 
	646, 823, 647, 646, 824, 647, 646, 825, 
	647, 646, 826, 647, 646, 827, 647, 646, 
	828, 647, 646, 829, 647, 646, 830, 647, 
	646, 831, 647, 646, 737, 647, 646, 647, 
	832, 646, 647, 833, 646, 647, 834, 646, 
	647, 835, 646, 647, 836, 646, 647, 837, 
	646, 647, 838, 646, 647, 839, 646, 647, 
	840, 646, 647, 841, 646, 647, 842, 646, 
	647, 843, 646, 647, 844, 646, 647, 845, 
	646, 846, 847, 848, 0, 849, 0, 850, 
	0, 851, 852, 0, 853, 0, 854, 0, 
	855, 0, 856, 0, 857, 0, 858, 0, 
	859, 0, 860, 0, 38, 0, 861, 0, 
	862, 0, 863, 0, 864, 0, 865, 0, 
	866, 0, 867, 0, 868, 0, 869, 0, 
	870, 0, 871, 0, 872, 0, 873, 0, 
	874, 0, 875, 0, 876, 0, 877, 0, 
	878, 0, 879, 0, 880, 0, 881, 0, 
	882, 0, 884, 883, 886, 885, 887, 886, 
	888, 889, 890, 891, 889, 888, 885, 892, 
	893, 886, 885, 894, 895, 896, 897, 886, 
	885, 898, 886, 885, 899, 886, 885, 900, 
	886, 885, 901, 886, 885, 902, 886, 885, 
	903, 886, 885, 904, 886, 885, 905, 886, 
	885, 906, 886, 885, 907, 886, 885, 908, 
	886, 885, 909, 886, 885, 910, 886, 885, 
	911, 886, 885, 912, 886, 885, 913, 886, 
	885, 914, 886, 885, 915, 886, 885, 916, 
	886, 885, 917, 886, 885, 918, 886, 885, 
	886, 919, 885, 920, 886, 885, 921, 886, 
	885, 922, 886, 885, 923, 886, 885, 924, 
	886, 885, 925, 886, 885, 926, 886, 885, 
	927, 886, 885, 928, 886, 885, 929, 886, 
	885, 930, 886, 885, 931, 932, 886, 885, 
	933, 886, 885, 934, 886, 885, 935, 886, 
	885, 936, 886, 885, 937, 886, 885, 938, 
	886, 885, 939, 886, 885, 940, 886, 885, 
	941, 886, 885, 942, 886, 885, 943, 886, 
	885, 944, 886, 885, 945, 886, 885, 946, 
	886, 885, 947, 886, 885, 948, 886, 885, 
	949, 886, 885, 950, 886, 885, 951, 886, 
	885, 952, 886, 885, 953, 886, 885, 954, 
	886, 885, 955, 886, 885, 956, 886, 885, 
	957, 886, 885, 958, 886, 885, 959, 886, 
	885, 960, 886, 885, 961, 886, 885, 962, 
	886, 885, 963, 886, 885, 964, 886, 885, 
	965, 886, 885, 966, 886, 885, 967, 886, 
	885, 968, 886, 885, 969, 886, 885, 970, 
	886, 885, 971, 886, 885, 972, 886, 885, 
	973, 886, 885, 974, 886, 885, 975, 886, 
	885, 976, 886, 885, 977, 886, 885, 886, 
	919, 885, 978, 886, 885, 979, 886, 885, 
	980, 886, 885, 981, 886, 885, 982, 886, 
	885, 983, 886, 885, 984, 886, 885, 985, 
	886, 885, 986, 886, 885, 987, 886, 885, 
	988, 886, 885, 989, 886, 885, 990, 886, 
	885, 991, 886, 885, 977, 886, 885, 992, 
	886, 885, 993, 886, 885, 994, 886, 885, 
	995, 886, 885, 996, 886, 885, 997, 886, 
	885, 998, 886, 885, 999, 886, 885, 1000, 
	886, 885, 1001, 886, 885, 1002, 886, 885, 
	1003, 886, 885, 1004, 886, 885, 1005, 886, 
	885, 1006, 886, 885, 1007, 886, 885, 1008, 
	886, 885, 918, 886, 885, 1009, 886, 885, 
	1010, 886, 885, 1011, 886, 885, 1012, 886, 
	885, 1013, 886, 885, 1014, 886, 885, 1015, 
	886, 885, 1016, 886, 885, 1017, 886, 885, 
	1018, 886, 885, 1019, 886, 885, 1020, 886, 
	885, 1021, 886, 885, 1022, 886, 885, 1023, 
	886, 885, 1024, 886, 885, 1025, 886, 885, 
	1026, 886, 885, 1027, 886, 885, 1028, 886, 
	885, 1029, 886, 885, 1030, 886, 885, 1031, 
	886, 885, 1032, 886, 885, 1033, 886, 885, 
	1034, 886, 885, 1035, 886, 885, 1036, 886, 
	885, 1037, 886, 885, 1038, 886, 885, 1039, 
	886, 885, 1040, 886, 885, 1041, 886, 885, 
	1042, 886, 885, 1043, 886, 885, 977, 886, 
	885, 1044, 1045, 1046, 886, 885, 1047, 886, 
	885, 1048, 886, 885, 1049, 1023, 886, 885, 
	1050, 886, 885, 1051, 886, 885, 1052, 886, 
	885, 1053, 886, 885, 1054, 886, 885, 1055, 
	886, 885, 1056, 886, 885, 1057, 886, 885, 
	918, 886, 885, 1058, 886, 885, 1059, 886, 
	885, 1060, 1061, 1062, 886, 885, 1063, 886, 
	885, 1064, 886, 885, 918, 886, 885, 1065, 
	886, 885, 1066, 886, 885, 1067, 886, 885, 
	1068, 886, 885, 1069, 886, 885, 1070, 886, 
	885, 1071, 886, 885, 1072, 886, 885, 1073, 
	886, 885, 1074, 886, 885, 1075, 886, 885, 
	977, 886, 885, 1076, 886, 885, 1077, 886, 
	885, 918, 886, 885, 1078, 886, 885, 1079, 
	886, 885, 1080, 886, 885, 1081, 886, 885, 
	1082, 886, 885, 1083, 886, 885, 1084, 886, 
	885, 1085, 886, 885, 1086, 886, 885, 1087, 
	886, 885, 1088, 886, 885, 1089, 1090, 886, 
	885, 1091, 886, 885, 1092, 886, 885, 1093, 
	886, 885, 1094, 886, 885, 1095, 886, 885, 
	1096, 886, 885, 1097, 886, 885, 1098, 886, 
	885, 1099, 886, 885, 1100, 886, 885, 1101, 
	886, 885, 1102, 886, 885, 1103, 886, 885, 
	1104, 886, 885, 1105, 886, 885, 1106, 886, 
	885, 1107, 886, 885, 1108, 886, 885, 1109, 
	886, 885, 1110, 886, 885, 1017, 886, 885, 
	1111, 886, 885, 1112, 886, 885, 1113, 886, 
	885, 1114, 886, 885, 1115, 886, 885, 1116, 
	886, 885, 1117, 886, 885, 1118, 886, 885, 
	977, 886, 885, 886, 1119, 885, 886, 1120, 
	885, 886, 1121, 885, 886, 1122, 885, 886, 
	1123, 885, 886, 1124, 885, 886, 1125, 885, 
	886, 1126, 885, 886, 1127, 885, 886, 1128, 
	885, 886, 1129, 885, 886, 1130, 885, 886, 
	1131, 885, 886, 1132, 885, 1133, 0, 1134, 
	0, 1135, 1136, 1137, 0, 1138, 0, 1139, 
	0, 38, 0, 1140, 0, 1141, 0, 1142, 
	0, 1143, 0, 1144, 0, 1145, 0, 1146, 
	0, 1147, 0, 1148, 0, 1149, 0, 1150, 
	0, 1151, 0, 1152, 0, 1154, 1153, 1156, 
	1155, 1157, 1156, 1158, 1159, 1160, 1161, 1159, 
	1158, 1155, 1162, 1163, 1156, 1155, 1164, 1165, 
	1166, 1167, 1156, 1155, 1168, 1156, 1155, 1169, 
	1156, 1155, 1170, 1156, 1155, 1171, 1156, 1155, 
	1172, 1156, 1155, 1173, 1156, 1155, 1174, 1156, 
	1155, 1175, 1156, 1155, 1176, 1156, 1155, 1177, 
	1156, 1155, 1178, 1156, 1155, 1179, 1156, 1155, 
	1180, 1156, 1155, 1181, 1156, 1155, 1182, 1156, 
	1155, 1183, 1156, 1155, 1184, 1156, 1155, 1185, 
	1156, 1155, 1186, 1156, 1155, 1187, 1156, 1155, 
	1188, 1156, 1155, 1156, 1189, 1155, 1190, 1156, 
	1155, 1191, 1156, 1155, 1192, 1156, 1155, 1193, 
	1156, 1155, 1194, 1156, 1155, 1195, 1156, 1155, 
	1196, 1156, 1155, 1197, 1156, 1155, 1198, 1156, 
	1155, 1199, 1156, 1155, 1200, 1156, 1155, 1201, 
	1202, 1156, 1155, 1203, 1156, 1155, 1204, 1156, 
	1155, 1205, 1156, 1155, 1206, 1156, 1155, 1207, 
	1156, 1155, 1208, 1156, 1155, 1209, 1156, 1155, 
	1210, 1156, 1155, 1211, 1156, 1155, 1212, 1156, 
	1155, 1213, 1156, 1155, 1214, 1156, 1155, 1215, 
	1156, 1155, 1216, 1156, 1155, 1217, 1156, 1155, 
	1218, 1156, 1155, 1219, 1156, 1155, 1220, 1156, 
	1155, 1221, 1156, 1155, 1222, 1156, 1155, 1223, 
	1156, 1155, 1224, 1156, 1155, 1225, 1156, 1155, 
	1226, 1156, 1155, 1227, 1156, 1155, 1228, 1156, 
	1155, 1229, 1156, 1155, 1230, 1156, 1155, 1231, 
	1156, 1155, 1232, 1156, 1155, 1233, 1156, 1155, 
	1234, 1156, 1155, 1235, 1156, 1155, 1236, 1156, 
	1155, 1237, 1156, 1155, 1238, 1156, 1155, 1239, 
	1156, 1155, 1240, 1156, 1155, 1241, 1156, 1155, 
	1242, 1156, 1155, 1243, 1156, 1155, 1244, 1156, 
	1155, 1245, 1156, 1155, 1246, 1156, 1155, 1247, 
	1156, 1155, 1156, 1189, 1155, 1248, 1156, 1155, 
	1249, 1156, 1155, 1250, 1156, 1155, 1251, 1156, 
	1155, 1252, 1156, 1155, 1253, 1156, 1155, 1254, 
	1156, 1155, 1255, 1156, 1155, 1256, 1156, 1155, 
	1257, 1156, 1155, 1258, 1156, 1155, 1259, 1156, 
	1155, 1260, 1156, 1155, 1261, 1156, 1155, 1247, 
	1156, 1155, 1262, 1156, 1155, 1263, 1156, 1155, 
	1264, 1156, 1155, 1265, 1156, 1155, 1266, 1156, 
	1155, 1267, 1156, 1155, 1268, 1156, 1155, 1269, 
	1156, 1155, 1270, 1156, 1155, 1271, 1156, 1155, 
	1272, 1156, 1155, 1273, 1156, 1155, 1274, 1156, 
	1155, 1275, 1156, 1155, 1276, 1156, 1155, 1277, 
	1156, 1155, 1278, 1156, 1155, 1188, 1156, 1155, 
	1279, 1156, 1155, 1280, 1156, 1155, 1281, 1156, 
	1155, 1282, 1156, 1155, 1283, 1156, 1155, 1284, 
	1156, 1155, 1285, 1156, 1155, 1286, 1156, 1155, 
	1287, 1156, 1155, 1288, 1156, 1155, 1289, 1156, 
	1155, 1290, 1156, 1155, 1291, 1156, 1155, 1292, 
	1156, 1155, 1293, 1156, 1155, 1294, 1156, 1155, 
	1295, 1156, 1155, 1296, 1156, 1155, 1297, 1156, 
	1155, 1298, 1156, 1155, 1299, 1156, 1155, 1300, 
	1156, 1155, 1301, 1156, 1155, 1302, 1156, 1155, 
	1303, 1156, 1155, 1304, 1156, 1155, 1305, 1156, 
	1155, 1306, 1156, 1155, 1307, 1156, 1155, 1308, 
	1156, 1155, 1309, 1156, 1155, 1310, 1156, 1155, 
	1311, 1156, 1155, 1312, 1156, 1155, 1313, 1156, 
	1155, 1247, 1156, 1155, 1314, 1315, 1316, 1156, 
	1155, 1317, 1156, 1155, 1318, 1156, 1155, 1319, 
	1293, 1156, 1155, 1320, 1156, 1155, 1321, 1156, 
	1155, 1322, 1156, 1155, 1323, 1156, 1155, 1324, 
	1156, 1155, 1325, 1156, 1155, 1326, 1156, 1155, 
	1327, 1156, 1155, 1188, 1156, 1155, 1328, 1156, 
	1155, 1329, 1156, 1155, 1330, 1331, 1156, 1155, 
	1332, 1156, 1155, 1333, 1156, 1155, 1188, 1156, 
	1155, 1334, 1156, 1155, 1335, 1156, 1155, 1188, 
	1156, 1155, 1336, 1156, 1155, 1337, 1156, 1155, 
	1338, 1156, 1155, 1339, 1156, 1155, 1340, 1156, 
	1155, 1341, 1156, 1155, 1342, 1156, 1155, 1343, 
	1156, 1155, 1344, 1156, 1155, 1345, 1156, 1155, 
	1346, 1156, 1155, 1347, 1348, 1156, 1155, 1349, 
	1156, 1155, 1350, 1156, 1155, 1351, 1156, 1155, 
	1352, 1156, 1155, 1353, 1156, 1155, 1354, 1156, 
	1155, 1355, 1156, 1155, 1356, 1156, 1155, 1357, 
	1156, 1155, 1358, 1156, 1155, 1359, 1156, 1155, 
	1360, 1156, 1155, 1361, 1156, 1155, 1362, 1156, 
	1155, 1363, 1156, 1155, 1364, 1156, 1155, 1365, 
	1156, 1155, 1366, 1156, 1155, 1367, 1156, 1155, 
	1368, 1156, 1155, 1287, 1156, 1155, 1369, 1156, 
	1155, 1370, 1156, 1155, 1371, 1156, 1155, 1372, 
	1156, 1155, 1373, 1156, 1155, 1374, 1156, 1155, 
	1375, 1156, 1155, 1376, 1156, 1155, 1247, 1156, 
	1155, 1156, 1377, 1155, 1156, 1378, 1155, 1156, 
	1379, 1155, 1156, 1380, 1155, 1156, 1381, 1155, 
	1156, 1382, 1155, 1156, 1383, 1155, 1156, 1384, 
	1155, 1156, 1385, 1155, 1156, 1386, 1155, 1156, 
	1387, 1155, 1156, 1388, 1155, 1156, 1389, 1155, 
	1156, 1390, 1155, 1391, 0, 1392, 0, 38, 
	0, 1393, 0, 1394, 0, 1395, 0, 1396, 
	0, 1397, 0, 1398, 0, 1399, 0, 1400, 
	0, 1401, 0, 1402, 0, 1403, 0, 1404, 
	1405, 0, 1406, 0, 1407, 0, 1408, 0, 
	1409, 0, 1410, 0, 1411, 0, 1412, 0, 
	1413, 0, 1414, 0, 1415, 0, 1416, 0, 
	1417, 0, 1418, 0, 1419, 0, 1420, 0, 
	1421, 0, 1422, 0, 1423, 0, 1424, 0, 
	1425, 0, 615, 0, 1426, 0, 1427, 0, 
	1428, 0, 1429, 0, 1430, 0, 1431, 0, 
	1432, 0, 1433, 0, 166, 0, 1434, 0, 
	2, 0, 1435, 0
];

var _lexer_trans_targs = [
	0, 2, 28, 28, 29, 39, 41, 25, 
	55, 58, 1354, 3, 779, 4, 64, 363, 
	528, 546, 5, 6, 7, 8, 9, 10, 
	11, 12, 13, 14, 15, 16, 17, 18, 
	19, 20, 21, 22, 23, 24, 25, 26, 
	27, 28, 40, 27, 28, 40, 30, 31, 
	32, 33, 32, 32, 33, 32, 34, 34, 
	34, 35, 34, 34, 34, 35, 36, 37, 
	38, 28, 38, 39, 28, 40, 42, 43, 
	44, 45, 46, 47, 48, 49, 50, 51, 
	52, 53, 54, 1356, 56, 57, 28, 56, 
	55, 57, 58, 59, 60, 62, 63, 61, 
	59, 60, 61, 59, 62, 2, 63, 29, 
	39, 41, 25, 55, 58, 65, 66, 67, 
	68, 69, 70, 71, 72, 73, 74, 75, 
	76, 348, 77, 78, 79, 80, 81, 82, 
	83, 84, 85, 86, 87, 88, 89, 90, 
	91, 92, 93, 94, 95, 96, 97, 98, 
	99, 100, 101, 102, 103, 104, 105, 106, 
	107, 108, 109, 110, 111, 112, 113, 114, 
	115, 116, 117, 118, 119, 120, 121, 122, 
	123, 124, 123, 124, 125, 124, 28, 334, 
	126, 276, 127, 201, 265, 128, 129, 130, 
	131, 132, 133, 134, 135, 136, 137, 138, 
	139, 186, 140, 141, 142, 143, 144, 145, 
	146, 147, 148, 149, 150, 151, 152, 153, 
	154, 155, 156, 157, 158, 159, 160, 161, 
	162, 163, 164, 165, 166, 167, 168, 169, 
	170, 171, 172, 173, 174, 175, 176, 177, 
	178, 179, 180, 181, 182, 183, 184, 185, 
	2, 28, 28, 29, 39, 41, 25, 55, 
	58, 187, 188, 189, 190, 191, 192, 193, 
	194, 195, 196, 197, 198, 199, 200, 202, 
	203, 204, 205, 206, 207, 208, 209, 210, 
	211, 212, 213, 214, 215, 216, 217, 218, 
	240, 219, 220, 221, 222, 223, 224, 225, 
	226, 227, 228, 229, 230, 231, 232, 233, 
	234, 235, 236, 237, 238, 239, 241, 242, 
	243, 244, 245, 246, 247, 248, 249, 250, 
	251, 252, 253, 254, 255, 256, 257, 258, 
	259, 260, 261, 262, 263, 264, 266, 267, 
	268, 269, 270, 271, 272, 273, 274, 275, 
	277, 292, 278, 279, 280, 281, 282, 283, 
	284, 285, 286, 287, 288, 289, 290, 291, 
	293, 294, 295, 296, 297, 298, 299, 300, 
	301, 302, 303, 304, 325, 305, 306, 307, 
	308, 309, 310, 311, 312, 313, 314, 315, 
	316, 317, 318, 319, 320, 321, 322, 323, 
	324, 326, 327, 328, 329, 330, 331, 332, 
	333, 335, 336, 337, 338, 339, 340, 341, 
	342, 343, 344, 345, 346, 347, 28, 349, 
	350, 351, 352, 353, 354, 355, 356, 357, 
	358, 359, 360, 361, 362, 364, 365, 366, 
	367, 368, 369, 370, 371, 372, 373, 374, 
	375, 376, 377, 378, 379, 380, 503, 381, 
	382, 383, 384, 385, 386, 387, 388, 389, 
	390, 391, 392, 393, 394, 395, 396, 397, 
	398, 399, 400, 401, 402, 403, 404, 405, 
	404, 405, 406, 405, 28, 407, 481, 408, 
	409, 410, 411, 412, 413, 414, 415, 416, 
	417, 418, 419, 420, 466, 421, 422, 423, 
	424, 425, 426, 427, 428, 429, 430, 431, 
	432, 433, 434, 435, 436, 437, 438, 439, 
	440, 441, 442, 443, 444, 445, 446, 447, 
	448, 449, 450, 451, 452, 453, 454, 455, 
	456, 457, 458, 459, 460, 461, 462, 463, 
	464, 465, 185, 467, 468, 469, 470, 471, 
	472, 473, 474, 475, 476, 477, 478, 479, 
	480, 482, 483, 484, 485, 486, 487, 488, 
	489, 490, 491, 492, 493, 494, 495, 496, 
	497, 498, 499, 500, 501, 502, 504, 505, 
	506, 507, 508, 509, 510, 511, 512, 513, 
	514, 515, 516, 517, 518, 519, 520, 521, 
	522, 523, 524, 525, 526, 527, 529, 530, 
	531, 532, 533, 534, 535, 536, 537, 538, 
	539, 540, 541, 542, 543, 544, 545, 547, 
	548, 549, 550, 551, 552, 553, 554, 555, 
	556, 557, 558, 559, 560, 561, 562, 563, 
	564, 565, 566, 567, 568, 569, 570, 571, 
	572, 573, 574, 575, 576, 577, 578, 579, 
	580, 581, 582, 583, 584, 585, 584, 585, 
	586, 585, 28, 765, 609, 587, 701, 588, 
	610, 683, 589, 590, 591, 592, 593, 594, 
	595, 596, 597, 598, 599, 600, 601, 602, 
	603, 604, 605, 606, 607, 608, 609, 185, 
	611, 612, 613, 614, 615, 616, 617, 618, 
	619, 620, 621, 622, 668, 623, 624, 625, 
	626, 627, 628, 629, 630, 631, 632, 633, 
	634, 635, 636, 637, 638, 639, 640, 641, 
	642, 643, 644, 645, 646, 647, 648, 649, 
	650, 651, 652, 653, 654, 655, 656, 657, 
	658, 659, 660, 661, 662, 663, 664, 665, 
	666, 667, 669, 670, 671, 672, 673, 674, 
	675, 676, 677, 678, 679, 680, 681, 682, 
	684, 685, 686, 687, 688, 689, 690, 691, 
	692, 693, 694, 695, 696, 697, 698, 699, 
	700, 702, 735, 744, 703, 704, 705, 714, 
	706, 707, 708, 709, 710, 711, 712, 713, 
	715, 716, 717, 718, 719, 720, 721, 722, 
	723, 724, 725, 726, 727, 728, 729, 730, 
	731, 732, 733, 734, 736, 737, 738, 741, 
	739, 740, 742, 743, 745, 746, 747, 748, 
	749, 750, 751, 752, 753, 754, 755, 756, 
	757, 758, 759, 760, 761, 762, 763, 764, 
	766, 767, 768, 769, 770, 771, 772, 773, 
	774, 775, 776, 777, 778, 28, 780, 1058, 
	1312, 781, 782, 783, 792, 784, 785, 786, 
	787, 788, 789, 790, 791, 793, 794, 795, 
	796, 797, 798, 799, 800, 801, 802, 803, 
	804, 805, 806, 807, 808, 809, 810, 811, 
	812, 813, 814, 815, 816, 815, 816, 817, 
	816, 28, 1044, 840, 818, 968, 819, 841, 
	914, 932, 820, 821, 822, 823, 824, 825, 
	826, 827, 828, 829, 830, 831, 832, 833, 
	834, 835, 836, 837, 838, 839, 840, 185, 
	842, 843, 844, 845, 846, 847, 848, 849, 
	850, 851, 852, 853, 899, 854, 855, 856, 
	857, 858, 859, 860, 861, 862, 863, 864, 
	865, 866, 867, 868, 869, 870, 871, 872, 
	873, 874, 875, 876, 877, 878, 879, 880, 
	881, 882, 883, 884, 885, 886, 887, 888, 
	889, 890, 891, 892, 893, 894, 895, 896, 
	897, 898, 900, 901, 902, 903, 904, 905, 
	906, 907, 908, 909, 910, 911, 912, 913, 
	915, 916, 917, 918, 919, 920, 921, 922, 
	923, 924, 925, 926, 927, 928, 929, 930, 
	931, 933, 934, 935, 936, 937, 938, 939, 
	940, 941, 942, 943, 944, 945, 946, 947, 
	948, 949, 950, 951, 952, 953, 954, 955, 
	956, 957, 958, 959, 960, 961, 962, 963, 
	964, 965, 966, 967, 969, 981, 1002, 970, 
	971, 972, 973, 974, 975, 976, 977, 978, 
	979, 980, 982, 983, 984, 987, 999, 985, 
	986, 988, 989, 990, 991, 992, 993, 994, 
	995, 996, 997, 998, 1000, 1001, 1003, 1004, 
	1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 
	1013, 1014, 1035, 1015, 1016, 1017, 1018, 1019, 
	1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 
	1028, 1029, 1030, 1031, 1032, 1033, 1034, 1036, 
	1037, 1038, 1039, 1040, 1041, 1042, 1043, 1045, 
	1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 
	1054, 1055, 1056, 1057, 28, 1059, 1060, 1061, 
	1064, 1309, 1062, 1063, 1065, 1066, 1067, 1068, 
	1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 
	1077, 1078, 1079, 1078, 1079, 1080, 1079, 28, 
	1295, 1103, 1081, 1231, 1082, 1104, 1177, 1195, 
	1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 
	1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 
	1099, 1100, 1101, 1102, 1103, 185, 1105, 1106, 
	1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 
	1115, 1116, 1162, 1117, 1118, 1119, 1120, 1121, 
	1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 
	1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 
	1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 
	1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 
	1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 
	1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 
	1171, 1172, 1173, 1174, 1175, 1176, 1178, 1179, 
	1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 
	1188, 1189, 1190, 1191, 1192, 1193, 1194, 1196, 
	1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 
	1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 
	1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 
	1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 
	1229, 1230, 1232, 1244, 1253, 1233, 1234, 1235, 
	1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 
	1245, 1246, 1247, 1250, 1248, 1249, 1251, 1252, 
	1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 
	1262, 1263, 1264, 1265, 1286, 1266, 1267, 1268, 
	1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 
	1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 
	1285, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 
	1294, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 
	1303, 1304, 1305, 1306, 1307, 1308, 28, 1310, 
	1311, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 
	1320, 1321, 1322, 1323, 1324, 1345, 1325, 1326, 
	1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 
	1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 
	1343, 1344, 1346, 1347, 1348, 1349, 1350, 1351, 
	1352, 1353, 1355, 0
];

var _lexer_trans_actions = [
	43, 29, 0, 54, 3, 1, 0, 29, 
	1, 35, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	57, 149, 126, 0, 110, 23, 0, 0, 
	7, 139, 48, 0, 102, 9, 5, 45, 
	134, 45, 0, 33, 122, 33, 33, 0, 
	11, 106, 0, 0, 114, 25, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 27, 118, 27, 
	51, 0, 0, 0, 37, 37, 54, 37, 
	87, 0, 0, 39, 0, 96, 0, 93, 
	90, 41, 96, 90, 99, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	57, 144, 0, 54, 84, 0, 69, 33, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 13, 
	63, 31, 130, 60, 57, 31, 63, 57, 
	66, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 13, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 57, 144, 
	0, 54, 84, 0, 81, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 21, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 57, 144, 0, 54, 
	84, 0, 78, 33, 84, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 19, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 19, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 57, 144, 0, 54, 84, 
	0, 75, 33, 84, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 17, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 17, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 57, 144, 0, 54, 84, 0, 72, 
	33, 84, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 15, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 15, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0
];

var _lexer_eof_actions = [
	0, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43
];

var lexer_start = 1;
var lexer_first_final = 1356;
var lexer_error = 0;

var lexer_en_main = 1;


/* line 129 "ragel/i18n/th.js.rl" */

/* line 130 "ragel/i18n/th.js.rl" */

/* line 131 "ragel/i18n/th.js.rl" */

/* line 132 "ragel/i18n/th.js.rl" */

var Lexer = function(listener) {
  // Check that listener has the required functions
  var events = ['comment', 'tag', 'feature', 'background', 'scenario', 'scenario_outline', 'examples', 'step', 'doc_string', 'row', 'eof'];
  for(var i=0, len=events.length; i<len; i++) {
    var event = events[i];
    if(typeof listener[event] != 'function') {
      throw new Error("Error. No " + event + " function exists on " + JSON.stringify(listener));
    }
  }
  this.listener = listener;
};

Lexer.prototype.scan = function(data) {
  var ending = "\n%_FEATURE_END_%";
  if(typeof data == 'string') {
    data = this.stringToBytes(data + ending);
  } else if(typeof Buffer != 'undefined' && Buffer.isBuffer(data)) {
    // Node.js
    var buf = new Buffer(data.length + ending.length);
    data.copy(buf, 0, 0);
    new Buffer(ending).copy(buf, data.length, 0);
    data = buf;
  }
  var eof = pe = data.length;
  var p = 0;

  this.line_number = 1;
  this.last_newline = 0;
  var signedCharValue=function(v){return v > 127 ? v-256 : v; };

  
/* line 2117 "js/lib/gherkin/lexer/th.js" */
{
	  this.cs = lexer_start;
} /* JSCodeGen::writeInit */

/* line 164 "ragel/i18n/th.js.rl" */
  
/* line 2124 "js/lib/gherkin/lexer/th.js" */
{
	var _klen, _trans, _keys, _ps, _widec, _acts, _nacts;
	var _goto_level, _resume, _eof_trans, _again, _test_eof;
	var _out;
	_klen = _trans = _keys = _acts = _nacts = null;
	_goto_level = 0;
	_resume = 10;
	_eof_trans = 15;
	_again = 20;
	_test_eof = 30;
	_out = 40;
	while (true) {
	_trigger_goto = false;
	if (_goto_level <= 0) {
	if (p == pe) {
		_goto_level = _test_eof;
		continue;
	}
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	}
	if (_goto_level <= _resume) {
	_keys = _lexer_key_offsets[ this.cs];
	_trans = _lexer_index_offsets[ this.cs];
	_klen = _lexer_single_lengths[ this.cs];
	_break_match = false;
	
	do {
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + _klen - 1;

	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + ( (_upper - _lower) >> 1 );

	        if (( signedCharValue(data[p])) < _lexer_trans_keys[_mid]) {
	           _upper = _mid - 1;
	        } else if (( signedCharValue(data[p])) > _lexer_trans_keys[_mid]) {
	           _lower = _mid + 1;
	        } else {
	           _trans += (_mid - _keys);
	           _break_match = true;
	           break;
	        };
	     } /* while */
	     if (_break_match) { break; }
	     _keys += _klen;
	     _trans += _klen;
	  }
	  _klen = _lexer_range_lengths[ this.cs];
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + (_klen << 1) - 2;
	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + (((_upper-_lower) >> 1) & ~1);
	        if (( signedCharValue(data[p])) < _lexer_trans_keys[_mid]) {
	          _upper = _mid - 2;
	         } else if (( signedCharValue(data[p])) > _lexer_trans_keys[_mid+1]) {
	          _lower = _mid + 2;
	        } else {
	          _trans += ((_mid - _keys) >> 1);
	          _break_match = true;
	          break;
	        }
	     } /* while */
	     if (_break_match) { break; }
	     _trans += _klen
	  }
	} while (false);
	_trans = _lexer_indicies[_trans];
	 this.cs = _lexer_trans_targs[_trans];
	if (_lexer_trans_actions[_trans] != 0) {
		_acts = _lexer_trans_actions[_trans];
		_nacts = _lexer_actions[_acts];
		_acts += 1;
		while (_nacts > 0) {
			_nacts -= 1;
			_acts += 1;
			switch (_lexer_actions[_acts - 1]) {
case 0:
/* line 6 "ragel/i18n/th.js.rl" */

    this.content_start = p;
    this.current_line = this.line_number;
    this.start_col = p - this.last_newline - (this.keyword+':').length;
  		break;
case 1:
/* line 12 "ragel/i18n/th.js.rl" */

    this.current_line = this.line_number;
    this.start_col = p - this.last_newline;
  		break;
case 2:
/* line 17 "ragel/i18n/th.js.rl" */

    this.content_start = p;
  		break;
case 3:
/* line 21 "ragel/i18n/th.js.rl" */

    this.docstring_content_type_start = p;
  		break;
case 4:
/* line 25 "ragel/i18n/th.js.rl" */

    this.docstring_content_type_end = p;
  		break;
case 5:
/* line 29 "ragel/i18n/th.js.rl" */

    var con = this.unindent(
      this.start_col, 
      this.bytesToString(data.slice(this.content_start, this.next_keyword_start-1)).replace(/(\r?\n)?([\t ])*$/, '').replace(/\\\"\\\"\\\"/mg, '"""')
    );
    var con_type = this.bytesToString(data.slice(this.docstring_content_type_start, this.docstring_content_type_end)).trim();
    this.listener.doc_string(con_type, con, this.current_line); 
  		break;
case 6:
/* line 38 "ragel/i18n/th.js.rl" */

    p = this.store_keyword_content('feature', data, p, eof);
  		break;
case 7:
/* line 42 "ragel/i18n/th.js.rl" */

    p = this.store_keyword_content('background', data, p, eof);
  		break;
case 8:
/* line 46 "ragel/i18n/th.js.rl" */

    p = this.store_keyword_content('scenario', data, p, eof);
  		break;
case 9:
/* line 50 "ragel/i18n/th.js.rl" */

    p = this.store_keyword_content('scenario_outline', data, p, eof);
  		break;
case 10:
/* line 54 "ragel/i18n/th.js.rl" */

    p = this.store_keyword_content('examples', data, p, eof);
  		break;
case 11:
/* line 58 "ragel/i18n/th.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.step(this.keyword, con, this.current_line);
  		break;
case 12:
/* line 63 "ragel/i18n/th.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.comment(con, this.line_number);
    this.keyword_start = null;
  		break;
case 13:
/* line 69 "ragel/i18n/th.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.tag(con, this.line_number);
    this.keyword_start = null;
  		break;
case 14:
/* line 75 "ragel/i18n/th.js.rl" */

    this.line_number++;
  		break;
case 15:
/* line 79 "ragel/i18n/th.js.rl" */

    this.last_newline = p + 1;
  		break;
case 16:
/* line 83 "ragel/i18n/th.js.rl" */

    this.keyword_start = this.keyword_start || p;
  		break;
case 17:
/* line 87 "ragel/i18n/th.js.rl" */

    this.keyword = this.bytesToString(data.slice(this.keyword_start, p)).replace(/:$/, '');
    this.keyword_start = null;
  		break;
case 18:
/* line 92 "ragel/i18n/th.js.rl" */

    this.next_keyword_start = p;
  		break;
case 19:
/* line 96 "ragel/i18n/th.js.rl" */

    p = p - 1;
    current_row = [];
    this.current_line = this.line_number;
  		break;
case 20:
/* line 102 "ragel/i18n/th.js.rl" */

    this.content_start = p;
  		break;
case 21:
/* line 106 "ragel/i18n/th.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    current_row.push(con.replace(/\\\|/, "|").replace(/\\n/, "\n").replace(/\\\\/, "\\"));
  		break;
case 22:
/* line 111 "ragel/i18n/th.js.rl" */

    this.listener.row(current_row, this.current_line);
  		break;
case 23:
/* line 115 "ragel/i18n/th.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw new Error("Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.");
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 2351 "js/lib/gherkin/lexer/th.js" */
			} /* action switch */
		}
	}
	if (_trigger_goto) {
		continue;
	}
	}
	if (_goto_level <= _again) {
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	p += 1;
	if (p != pe) {
		_goto_level = _resume;
		continue;
	}
	}
	if (_goto_level <= _test_eof) {
	if (p == eof) {
	__acts = _lexer_eof_actions[ this.cs];
	__nacts =  _lexer_actions[__acts];
	__acts += 1;
	while (__nacts > 0) {
		__nacts -= 1;
		__acts += 1;
		switch (_lexer_actions[__acts - 1]) {
case 23:
/* line 115 "ragel/i18n/th.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw new Error("Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.");
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 2390 "js/lib/gherkin/lexer/th.js" */
		} /* eof action switch */
	}
	if (_trigger_goto) {
		continue;
	}
}
	}
	if (_goto_level <= _out) {
		break;
	}
	}
	}

/* line 165 "ragel/i18n/th.js.rl" */
};


/*
 * Decode utf-8 byte sequence to string.
 */
var decodeUtf8 = function(bytes) {
  var result = "";
  var i = 0;
  var wc;
  var c;

  while (i < bytes.length) {
    /* parse as UTF-8 lead byte */
    wc = bytes[i++];
    if (wc < 0x80) {
      count = 0;
    } else if (wc < 0xC2 || wc >= 0xF8) {
      throw new Error("input is not a valid UTF-8 lead octet");
    } else if (wc < 0xE0) {
      count = 1;
      wc = (wc & 0x1F) << 6;
    } else if (wc < 0xF0) {
      count = 2;
      wc = (wc & 0x0F) << 12;
    } else /* wc < 0xF8 */ {
      count = 3;
      wc = (wc & 0x07) << 18;
    }

    /* parse trail bytes, if any */
    while (count) {
      if (!(i < bytes.length)) {
        throw new Error("short read");
      }
      if ((c = bytes[i++] ^ 0x80) > 0x3F) {
        throw new Error("input is not a valid UTF-8 trail octet");
      }
      wc |= c << (6 * --count);
      if (wc < (1 << (5 * count + 6))) {
        throw new Error("invalid non-minimal encoded input");
      }
    }

    /* handle conversion to UTF-16 if needed */
    if (wc > 0xFFFF) {
      wc -= 0x10000;
      result += String.fromCharCode(0xD800 + (wc >> 10));
      wc = 0xDC00 + (wc & 0x3FF);
    }
    result += String.fromCharCode(wc);
  }

  return result;
};

/*
 * Encode string to an array of bytes using utf8 encoding.
 *
 * Javascript internally stores character data as utf16 (like java).
 * String.charCodeAt() does *not* produce unicode points, but simply
 * reflects this internal representation. Thus, it is necessary
 * to first decode the utf-16 representation before encoding to
 * utf-8.
 */
var encodeUtf8 = function(string) {
  var bytes = [];
  var i = 0;
  var j = 0;
  var wc;

  while (i < string.length) {
    wc = string.charCodeAt(i++);
    if (wc >= 0xD800 && wc <= 0xDBFF && i < string.length && string.charCodeAt(i) >= 0xDC00 && string.charCodeAt(i) <= 0xDFFF) {
      /* decode UTF-16 */
      wc = 0x10000 + ((wc & 0x3FF) << 10) + (string.charCodeAt(i++) & 0x3FF);
    }

    /* emit lead byte */
    if (wc < 0x80) {
      bytes[j++] = wc;
      count = 0;
    } else if (wc < 0x800) {
      bytes[j++] = 0xC0 | (wc >> 6);
      count = 1;
    } else if (wc < 0x10000) {
      bytes[j++] = 0xE0 | (wc >> 12);
      count = 2;
    } else {
      /* SMP: 21-bit Unicode */
      bytes[j++] = 0xF0 | (wc >> 18);
      count = 3;
    }

    /* emit trail bytes, if any */
    while (count) {
      bytes[j++] = 0x80 | ((wc >> (6 * --count)) & 0x3F);
    }
  }

  return bytes;

};

Lexer.prototype.bytesToString = function(bytes) {
  if(typeof bytes.write == 'function') {
    // Node.js
    return bytes.toString('utf-8');
  }
  return decodeUtf8(bytes);
};

Lexer.prototype.stringToBytes = function(string) {
  return encodeUtf8(string);
};

Lexer.prototype.unindent = function(startcol, text) {
  startcol = startcol || 0;
  return text.replace(new RegExp('^[\t ]{0,' + startcol + '}', 'gm'), ''); 
};

Lexer.prototype.store_keyword_content = function(event, data, p, eof) {
  var end_point = (!this.next_keyword_start || (p == eof)) ? p : this.next_keyword_start;
  var content = this.unindent(this.start_col + 2, this.bytesToString(data.slice(this.content_start, end_point))).replace(/\s+$/,"");
  var content_lines = content.split("\n")
  var name = content_lines.shift() || "";
  name = name.trim();
  var description = content_lines.join("\n");
  this.listener[event](this.keyword, name, description, this.current_line);
  var nks = this.next_keyword_start;
  this.next_keyword_start = null;
  return nks ? nks - 1 : p;
};

Lexer.prototype.current_line_content = function(data, p) {
  var rest = Array.prototype.slice.call(data,this.last_newline, -1);
  var end = rest.indexOf(10) || -1;
  return this.bytesToString(rest.slice(0, end)).trim();
};

// Node.js export
if(typeof module !== 'undefined') {
  module.exports = Lexer;
}
// Require.js export
if (typeof define !== 'undefined') {
  if(define.amd) {
    define('gherkin/lexer/th', [], function() {
      return Lexer;
    });
  } else {
    define('gherkin/lexer/th', function(require, exports, module) {
      exports.Lexer = Lexer;
    });
  }
}

})();

}).call(this,require("buffer").Buffer)

},{"buffer":69}],233:[function(require,module,exports){
(function (Buffer){

/* line 1 "ragel/i18n/tl.js.rl" */
;(function() {


/* line 126 "ragel/i18n/tl.js.rl" */



/* line 11 "js/lib/gherkin/lexer/tl.js" */
var _lexer_actions = [
	0, 1, 0, 1, 1, 1, 2, 1, 
	3, 1, 4, 1, 5, 1, 6, 1, 
	7, 1, 8, 1, 9, 1, 10, 1, 
	11, 1, 12, 1, 13, 1, 16, 1, 
	17, 1, 18, 1, 19, 1, 20, 1, 
	21, 1, 22, 1, 23, 2, 2, 18, 
	2, 3, 4, 2, 13, 0, 2, 14, 
	15, 2, 17, 0, 2, 17, 1, 2, 
	17, 16, 2, 17, 19, 2, 18, 6, 
	2, 18, 7, 2, 18, 8, 2, 18, 
	9, 2, 18, 10, 2, 18, 16, 2, 
	20, 21, 2, 22, 0, 2, 22, 1, 
	2, 22, 16, 2, 22, 19, 3, 4, 
	14, 15, 3, 5, 14, 15, 3, 11, 
	14, 15, 3, 12, 14, 15, 3, 13, 
	14, 15, 3, 14, 15, 18, 3, 17, 
	0, 11, 3, 17, 14, 15, 4, 2, 
	14, 15, 18, 4, 3, 4, 14, 15, 
	4, 17, 0, 14, 15, 5, 17, 0, 
	11, 14, 15
];

var _lexer_key_offsets = [
	0, 0, 12, 13, 22, 23, 24, 25, 
	26, 27, 28, 29, 30, 31, 32, 33, 
	34, 35, 36, 37, 38, 39, 40, 41, 
	43, 45, 56, 57, 58, 60, 62, 67, 
	72, 77, 82, 86, 90, 92, 93, 94, 
	95, 96, 97, 98, 99, 100, 101, 102, 
	103, 104, 105, 106, 107, 112, 119, 124, 
	128, 134, 137, 139, 145, 156, 157, 158, 
	159, 160, 161, 162, 163, 164, 165, 166, 
	167, 168, 169, 170, 171, 172, 173, 174, 
	175, 176, 177, 178, 179, 180, 181, 182, 
	183, 184, 185, 186, 187, 188, 189, 190, 
	191, 192, 193, 194, 195, 196, 197, 198, 
	199, 200, 201, 202, 203, 204, 205, 206, 
	207, 208, 209, 210, 211, 212, 213, 214, 
	221, 223, 225, 227, 229, 231, 233, 235, 
	237, 239, 241, 243, 245, 247, 249, 251, 
	262, 263, 264, 266, 267, 268, 269, 270, 
	271, 272, 273, 274, 275, 284, 286, 294, 
	296, 298, 300, 302, 304, 306, 308, 310, 
	312, 314, 316, 318, 320, 322, 324, 326, 
	328, 330, 332, 334, 336, 338, 340, 342, 
	344, 346, 348, 350, 352, 354, 356, 358, 
	360, 362, 364, 366, 368, 370, 372, 374, 
	376, 378, 380, 382, 384, 386, 388, 390, 
	392, 394, 396, 398, 400, 402, 404, 406, 
	408, 410, 412, 414, 416, 418, 420, 422, 
	424, 426, 428, 430, 432, 434, 436, 438, 
	440, 442, 444, 446, 448, 450, 452, 454, 
	456, 458, 460, 462, 464, 466, 468, 470, 
	472, 474, 476, 478, 480, 482, 484, 486, 
	488, 490, 492, 494, 496, 498, 500, 502, 
	504, 506, 508, 510, 512, 514, 516, 518, 
	520, 522, 524, 526, 528, 530, 532, 534, 
	536, 538, 540, 542, 544, 546, 548, 550, 
	552, 554, 556, 558, 560, 562, 564, 566, 
	568, 570, 572, 574, 576, 578, 580, 582, 
	584, 586, 588, 590, 592, 593, 594, 595, 
	596, 597, 598, 599, 600, 601, 602, 603, 
	604, 605, 606, 607, 608, 609, 610, 611, 
	612, 613, 621, 623, 629, 631, 633, 635, 
	637, 639, 641, 643, 645, 647, 649, 651, 
	653, 655, 657, 659, 661, 663, 665, 667, 
	669, 671, 673, 675, 677, 679, 681, 683, 
	685, 687, 689, 691, 693, 695, 697, 699, 
	701, 703, 705, 707, 709, 711, 713, 715, 
	717, 719, 721, 723, 725, 727, 729, 731, 
	733, 735, 737, 739, 741, 743, 745, 747, 
	749, 751, 753, 755, 757, 759, 761, 763, 
	765, 767, 769, 771, 773, 775, 777, 779, 
	781, 783, 785, 787, 789, 791, 793, 795, 
	797, 799, 801, 803, 805, 807, 809, 810, 
	811, 812, 813, 814, 815, 816, 817, 818, 
	819, 820, 821, 822, 823, 824, 825, 826, 
	827, 828, 829, 830, 831, 832, 833, 834, 
	835, 836, 837, 838, 839, 840, 841, 842, 
	843, 844, 845, 846, 847, 848, 849, 850, 
	851, 852, 853, 854, 855, 856, 857, 866, 
	868, 876, 878, 880, 882, 884, 886, 888, 
	890, 892, 894, 896, 898, 900, 902, 904, 
	906, 908, 910, 912, 914, 916, 918, 920, 
	922, 924, 926, 928, 930, 932, 934, 936, 
	938, 940, 942, 944, 946, 948, 950, 952, 
	954, 956, 958, 960, 962, 964, 966, 968, 
	970, 972, 974, 976, 978, 980, 982, 984, 
	986, 989, 991, 993, 995, 997, 999, 1001, 
	1003, 1005, 1007, 1009, 1011, 1013, 1015, 1017, 
	1019, 1021, 1023, 1025, 1027, 1029, 1031, 1033, 
	1035, 1037, 1039, 1041, 1043, 1045, 1047, 1049, 
	1051, 1053, 1055, 1057, 1059, 1061, 1063, 1065, 
	1067, 1069, 1071, 1073, 1075, 1077, 1079, 1081, 
	1083, 1085, 1087, 1089, 1091, 1093, 1095, 1097, 
	1099, 1101, 1103, 1105, 1107, 1109, 1111, 1113, 
	1115, 1117, 1119, 1121, 1123, 1125, 1127, 1129, 
	1131, 1133, 1135, 1137, 1139, 1141, 1143, 1145, 
	1147, 1149, 1151, 1153, 1155, 1157, 1159, 1161, 
	1163, 1165, 1167, 1169, 1171, 1173, 1175, 1177, 
	1179, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 
	1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 
	1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 
	1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 
	1212, 1213, 1214, 1215, 1216, 1217, 1226, 1228, 
	1237, 1239, 1241, 1243, 1245, 1247, 1249, 1251, 
	1253, 1255, 1257, 1259, 1261, 1263, 1265, 1267, 
	1269, 1271, 1273, 1275, 1277, 1279, 1281, 1283, 
	1285, 1287, 1289, 1291, 1293, 1295, 1297, 1299, 
	1301, 1303, 1305, 1307, 1309, 1311, 1313, 1315, 
	1317, 1319, 1321, 1323, 1325, 1327, 1329, 1331, 
	1333, 1335, 1337, 1339, 1341, 1343, 1345, 1347, 
	1350, 1352, 1354, 1356, 1358, 1360, 1362, 1364, 
	1366, 1368, 1370, 1372, 1374, 1376, 1378, 1380, 
	1382, 1384, 1386, 1388, 1390, 1392, 1394, 1396, 
	1398, 1400, 1402, 1404, 1406, 1408, 1410, 1412, 
	1414, 1416, 1418, 1420, 1422, 1424, 1426, 1428, 
	1430, 1432, 1434, 1436, 1438, 1440, 1442, 1444, 
	1446, 1448, 1450, 1452, 1454, 1456, 1458, 1460, 
	1462, 1464, 1466, 1468, 1470, 1472, 1474, 1476, 
	1478, 1480, 1482, 1484, 1486, 1488, 1490, 1492, 
	1494, 1496, 1498, 1500, 1502, 1504, 1506, 1508, 
	1510, 1512, 1514, 1516, 1518, 1520, 1522, 1524, 
	1526, 1528, 1530, 1532, 1534, 1536, 1538, 1540, 
	1542, 1544, 1546, 1548, 1550, 1552, 1554, 1556, 
	1558, 1560, 1562, 1564, 1566, 1568, 1570, 1572, 
	1573, 1574
];

var _lexer_trans_keys = [
	-32, 10, 32, 34, 35, 37, 42, 64, 
	124, 239, 9, 13, -80, -123, -120, -119, 
	-107, -105, -102, -88, -82, -72, -32, -80, 
	-86, -32, -79, -115, -32, -80, -86, -32, 
	-79, -127, -32, -80, -95, -32, -79, -127, 
	32, 10, 13, 10, 13, -32, 10, 32, 
	34, 35, 37, 42, 64, 124, 9, 13, 
	34, 34, 10, 13, 10, 13, 10, 32, 
	34, 9, 13, 10, 32, 34, 9, 13, 
	10, 32, 34, 9, 13, 10, 32, 34, 
	9, 13, 10, 32, 9, 13, 10, 32, 
	9, 13, 10, 13, 10, 95, 70, 69, 
	65, 84, 85, 82, 69, 95, 69, 78, 
	68, 95, 37, 13, 32, 64, 9, 10, 
	9, 10, 13, 32, 64, 11, 12, 10, 
	32, 64, 9, 13, 32, 124, 9, 13, 
	10, 32, 92, 124, 9, 13, 10, 92, 
	124, 10, 92, 10, 32, 92, 124, 9, 
	13, -32, 10, 32, 34, 35, 37, 42, 
	64, 124, 9, 13, 32, -32, -80, -86, 
	-32, -80, -80, -32, -80, -65, -32, -80, 
	-72, -32, -79, -115, -32, -80, -91, -32, 
	-80, -65, -32, -80, -92, -32, -80, -65, 
	-32, -80, -78, -32, -79, -117, -32, -80, 
	-90, -32, -80, -66, -32, -80, -71, -32, 
	-80, -80, -32, -80, -93, -32, -80, -78, 
	-32, -79, -127, 58, 10, 10, -32, 10, 
	32, 35, 124, 9, 13, -80, 10, -105, 
	10, -32, 10, -79, 10, -127, 10, -32, 
	10, -80, 10, -93, 10, -32, 10, -80, 
	10, -82, 10, -32, 10, -79, 10, -127, 
	10, 10, 58, -32, 10, 32, 34, 35, 
	37, 42, 64, 124, 9, 13, -32, -80, 
	-91, -66, -32, -80, -88, -32, -80, -126, 
	58, 10, 10, -32, 10, 32, 35, 37, 
	42, 64, 9, 13, -80, 10, -123, -120, 
	-107, -105, -102, -82, -72, 10, -32, 10, 
	-80, 10, -86, 10, -32, 10, -79, 10, 
	-115, 10, -32, 10, -80, 10, -86, 10, 
	-32, 10, -79, 10, -127, 10, -32, 10, 
	-80, 10, -95, 10, -32, 10, -79, 10, 
	-127, 10, 10, 32, 10, 32, -32, 10, 
	-80, 10, -86, 10, -32, 10, -80, 10, 
	-80, 10, -32, 10, -80, 10, -65, 10, 
	-32, 10, -80, 10, -72, 10, -32, 10, 
	-79, 10, -115, 10, -32, 10, -80, 10, 
	-91, 10, -32, 10, -80, 10, -65, 10, 
	-32, 10, -80, 10, -92, 10, -32, 10, 
	-80, 10, -65, 10, -32, 10, -80, 10, 
	-78, 10, -32, 10, -79, 10, -117, 10, 
	-32, 10, -80, 10, -66, 10, -32, 10, 
	-80, 10, -88, 10, -32, 10, -80, 10, 
	-65, 10, -32, 10, -79, 10, -127, 10, 
	-32, 10, -80, 10, -93, 10, -32, 10, 
	-80, 10, -82, 10, -32, 10, -79, 10, 
	-127, 10, 10, 58, -32, 10, -79, 10, 
	-122, 10, -32, 10, -80, 10, -86, 10, 
	-32, 10, -79, 10, -115, 10, -32, 10, 
	-80, 10, -86, 10, -32, 10, -80, 10, 
	-84, 10, -32, 10, -80, 10, -95, 10, 
	-32, 10, -80, 10, -65, 10, -32, 10, 
	-80, 10, -88, 10, -32, 10, -80, 10, 
	-90, 10, -32, 10, -80, 10, -80, 10, 
	-32, 10, -80, 10, -65, 10, -32, 10, 
	-80, 10, -81, 10, -32, 10, -80, 10, 
	-88, 10, -32, 10, -79, 10, -115, 10, 
	-32, 10, -80, 10, -88, 10, -32, 10, 
	-80, 10, -65, 10, -32, 10, -80, 10, 
	-75, 10, -32, 10, -79, 10, -121, 10, 
	-32, 10, -80, 10, -74, 10, -32, 10, 
	-80, 10, -126, 10, 10, 95, 10, 70, 
	10, 69, 10, 65, 10, 84, 10, 85, 
	10, 82, 10, 69, 10, 95, 10, 69, 
	10, 78, 10, 68, 10, 95, 10, 37, 
	-32, -80, -88, -32, -80, -65, -32, -79, 
	-127, -32, -80, -93, -32, -80, -82, -32, 
	-79, -127, 58, 10, 10, -32, 10, 32, 
	35, 37, 64, 9, 13, -80, 10, -119, 
	-107, -105, -88, -72, 10, -32, 10, -80, 
	10, -90, 10, -32, 10, -80, 10, -66, 
	10, -32, 10, -80, 10, -71, 10, -32, 
	10, -80, 10, -80, 10, -32, 10, -80, 
	10, -93, 10, -32, 10, -80, 10, -78, 
	10, -32, 10, -79, 10, -127, 10, 10, 
	58, -32, 10, -80, 10, -91, 10, -32, 
	10, -80, 10, -88, 10, -32, 10, -80, 
	10, -126, 10, -32, 10, -79, 10, -127, 
	10, -32, 10, -80, 10, -93, 10, -32, 
	10, -80, 10, -82, 10, -32, 10, -79, 
	10, -121, 10, -32, 10, -80, 10, -86, 
	10, -32, 10, -80, 10, -91, 10, -32, 
	10, -79, 10, -115, 10, -32, 10, -80, 
	10, -81, 10, -32, 10, -80, 10, -88, 
	10, -32, 10, -79, 10, -115, 10, -32, 
	10, -80, 10, -88, 10, -32, 10, -80, 
	10, -65, 10, -32, 10, -80, 10, -75, 
	10, -32, 10, -79, 10, -121, 10, -32, 
	10, -80, 10, -74, 10, 10, 95, 10, 
	70, 10, 69, 10, 65, 10, 84, 10, 
	85, 10, 82, 10, 69, 10, 95, 10, 
	69, 10, 78, 10, 68, 10, 95, 10, 
	37, -32, -79, -122, -32, -80, -86, -32, 
	-79, -115, -32, -80, -86, -32, -80, -84, 
	-32, -80, -95, -32, -80, -65, -32, -80, 
	-88, -32, -80, -90, -32, -79, -121, -32, 
	-80, -86, -32, -80, -91, -32, -79, -115, 
	-32, -80, -81, -32, -80, -126, 58, 10, 
	10, -32, 10, 32, 35, 37, 42, 64, 
	9, 13, -80, 10, -123, -120, -107, -105, 
	-102, -82, -72, 10, -32, 10, -80, 10, 
	-86, 10, -32, 10, -79, 10, -115, 10, 
	-32, 10, -80, 10, -86, 10, -32, 10, 
	-79, 10, -127, 10, -32, 10, -80, 10, 
	-95, 10, -32, 10, -79, 10, -127, 10, 
	10, 32, 10, 32, -32, 10, -80, 10, 
	-86, 10, -32, 10, -80, 10, -80, 10, 
	-32, 10, -80, 10, -65, 10, -32, 10, 
	-80, 10, -72, 10, -32, 10, -79, 10, 
	-115, 10, -32, 10, -80, 10, -91, 10, 
	-32, 10, -80, 10, -65, 10, -32, 10, 
	-80, 10, -92, 10, -32, 10, -80, 10, 
	-65, 10, -32, 10, -80, 10, -78, 10, 
	-32, 10, -79, 10, -117, 10, -32, 10, 
	-80, 10, -91, -66, 10, -32, 10, -80, 
	10, -88, 10, -32, 10, -80, 10, -126, 
	10, 10, 58, -32, 10, -80, 10, -88, 
	10, -32, 10, -80, 10, -65, 10, -32, 
	10, -79, 10, -127, 10, -32, 10, -80, 
	10, -93, 10, -32, 10, -80, 10, -82, 
	10, -32, 10, -79, 10, -127, 10, -32, 
	10, -79, 10, -122, 10, -32, 10, -80, 
	10, -86, 10, -32, 10, -79, 10, -115, 
	10, -32, 10, -80, 10, -86, 10, -32, 
	10, -80, 10, -84, 10, -32, 10, -80, 
	10, -95, 10, -32, 10, -80, 10, -65, 
	10, -32, 10, -80, 10, -88, 10, -32, 
	10, -80, 10, -90, 10, -32, 10, -80, 
	10, -80, 10, -32, 10, -80, 10, -65, 
	10, -32, 10, -80, 10, -81, 10, -32, 
	10, -80, 10, -88, 10, -32, 10, -79, 
	10, -115, 10, -32, 10, -80, 10, -88, 
	10, -32, 10, -80, 10, -65, 10, -32, 
	10, -80, 10, -75, 10, -32, 10, -79, 
	10, -121, 10, -32, 10, -80, 10, -74, 
	10, 10, 95, 10, 70, 10, 69, 10, 
	65, 10, 84, 10, 85, 10, 82, 10, 
	69, 10, 95, 10, 69, 10, 78, 10, 
	68, 10, 95, 10, 37, -32, -80, -80, 
	-32, -80, -65, -32, -80, -81, -32, -80, 
	-88, -32, -79, -115, -32, -80, -88, -32, 
	-80, -65, -32, -80, -75, -32, -79, -121, 
	-32, -80, -74, -32, -80, -126, 58, 10, 
	10, -32, 10, 32, 35, 37, 42, 64, 
	9, 13, -80, 10, -123, -120, -107, -105, 
	-102, -88, -82, -72, 10, -32, 10, -80, 
	10, -86, 10, -32, 10, -79, 10, -115, 
	10, -32, 10, -80, 10, -86, 10, -32, 
	10, -79, 10, -127, 10, -32, 10, -80, 
	10, -95, 10, -32, 10, -79, 10, -127, 
	10, 10, 32, 10, 32, -32, 10, -80, 
	10, -86, 10, -32, 10, -80, 10, -80, 
	10, -32, 10, -80, 10, -65, 10, -32, 
	10, -80, 10, -72, 10, -32, 10, -79, 
	10, -115, 10, -32, 10, -80, 10, -91, 
	10, -32, 10, -80, 10, -65, 10, -32, 
	10, -80, 10, -92, 10, -32, 10, -80, 
	10, -65, 10, -32, 10, -80, 10, -78, 
	10, -32, 10, -79, 10, -117, 10, -32, 
	10, -80, 10, -91, -66, 10, -32, 10, 
	-80, 10, -88, 10, -32, 10, -80, 10, 
	-126, 10, 10, 58, -32, 10, -80, 10, 
	-88, 10, -32, 10, -80, 10, -65, 10, 
	-32, 10, -79, 10, -127, 10, -32, 10, 
	-80, 10, -93, 10, -32, 10, -80, 10, 
	-82, 10, -32, 10, -79, 10, -127, 10, 
	-32, 10, -79, 10, -122, 10, -32, 10, 
	-80, 10, -86, 10, -32, 10, -79, 10, 
	-115, 10, -32, 10, -80, 10, -86, 10, 
	-32, 10, -80, 10, -84, 10, -32, 10, 
	-80, 10, -95, 10, -32, 10, -80, 10, 
	-65, 10, -32, 10, -80, 10, -88, 10, 
	-32, 10, -80, 10, -90, 10, -32, 10, 
	-79, 10, -121, 10, -32, 10, -80, 10, 
	-86, 10, -32, 10, -80, 10, -91, 10, 
	-32, 10, -79, 10, -115, 10, -32, 10, 
	-80, 10, -81, 10, -32, 10, -80, 10, 
	-80, 10, -32, 10, -80, 10, -65, 10, 
	-32, 10, -80, 10, -81, 10, -32, 10, 
	-80, 10, -88, 10, -32, 10, -79, 10, 
	-115, 10, -32, 10, -80, 10, -88, 10, 
	-32, 10, -80, 10, -65, 10, -32, 10, 
	-80, 10, -75, 10, -32, 10, -79, 10, 
	-121, 10, -32, 10, -80, 10, -74, 10, 
	10, 95, 10, 70, 10, 69, 10, 65, 
	10, 84, 10, 85, 10, 82, 10, 69, 
	10, 95, 10, 69, 10, 78, 10, 68, 
	10, 95, 10, 37, 187, 191, 0
];

var _lexer_single_lengths = [
	0, 10, 1, 9, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 2, 
	2, 9, 1, 1, 2, 2, 3, 3, 
	3, 3, 2, 2, 2, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 3, 5, 3, 2, 
	4, 3, 2, 4, 9, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 5, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 9, 
	1, 1, 2, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 7, 2, 8, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 6, 2, 6, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 7, 2, 
	8, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	3, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 7, 2, 9, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 3, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 1, 
	1, 0
];

var _lexer_range_lengths = [
	0, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 0, 0, 0, 0, 1, 1, 
	1, 1, 1, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 1, 1, 1, 
	1, 0, 0, 1, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0
];

var _lexer_index_offsets = [
	0, 0, 12, 14, 24, 26, 28, 30, 
	32, 34, 36, 38, 40, 42, 44, 46, 
	48, 50, 52, 54, 56, 58, 60, 62, 
	65, 68, 79, 81, 83, 86, 89, 94, 
	99, 104, 109, 113, 117, 120, 122, 124, 
	126, 128, 130, 132, 134, 136, 138, 140, 
	142, 144, 146, 148, 150, 155, 162, 167, 
	171, 177, 181, 184, 190, 201, 203, 205, 
	207, 209, 211, 213, 215, 217, 219, 221, 
	223, 225, 227, 229, 231, 233, 235, 237, 
	239, 241, 243, 245, 247, 249, 251, 253, 
	255, 257, 259, 261, 263, 265, 267, 269, 
	271, 273, 275, 277, 279, 281, 283, 285, 
	287, 289, 291, 293, 295, 297, 299, 301, 
	303, 305, 307, 309, 311, 313, 315, 317, 
	324, 327, 330, 333, 336, 339, 342, 345, 
	348, 351, 354, 357, 360, 363, 366, 369, 
	380, 382, 384, 387, 389, 391, 393, 395, 
	397, 399, 401, 403, 405, 414, 417, 426, 
	429, 432, 435, 438, 441, 444, 447, 450, 
	453, 456, 459, 462, 465, 468, 471, 474, 
	477, 480, 483, 486, 489, 492, 495, 498, 
	501, 504, 507, 510, 513, 516, 519, 522, 
	525, 528, 531, 534, 537, 540, 543, 546, 
	549, 552, 555, 558, 561, 564, 567, 570, 
	573, 576, 579, 582, 585, 588, 591, 594, 
	597, 600, 603, 606, 609, 612, 615, 618, 
	621, 624, 627, 630, 633, 636, 639, 642, 
	645, 648, 651, 654, 657, 660, 663, 666, 
	669, 672, 675, 678, 681, 684, 687, 690, 
	693, 696, 699, 702, 705, 708, 711, 714, 
	717, 720, 723, 726, 729, 732, 735, 738, 
	741, 744, 747, 750, 753, 756, 759, 762, 
	765, 768, 771, 774, 777, 780, 783, 786, 
	789, 792, 795, 798, 801, 804, 807, 810, 
	813, 816, 819, 822, 825, 828, 831, 834, 
	837, 840, 843, 846, 849, 852, 855, 858, 
	861, 864, 867, 870, 873, 875, 877, 879, 
	881, 883, 885, 887, 889, 891, 893, 895, 
	897, 899, 901, 903, 905, 907, 909, 911, 
	913, 915, 923, 926, 933, 936, 939, 942, 
	945, 948, 951, 954, 957, 960, 963, 966, 
	969, 972, 975, 978, 981, 984, 987, 990, 
	993, 996, 999, 1002, 1005, 1008, 1011, 1014, 
	1017, 1020, 1023, 1026, 1029, 1032, 1035, 1038, 
	1041, 1044, 1047, 1050, 1053, 1056, 1059, 1062, 
	1065, 1068, 1071, 1074, 1077, 1080, 1083, 1086, 
	1089, 1092, 1095, 1098, 1101, 1104, 1107, 1110, 
	1113, 1116, 1119, 1122, 1125, 1128, 1131, 1134, 
	1137, 1140, 1143, 1146, 1149, 1152, 1155, 1158, 
	1161, 1164, 1167, 1170, 1173, 1176, 1179, 1182, 
	1185, 1188, 1191, 1194, 1197, 1200, 1203, 1205, 
	1207, 1209, 1211, 1213, 1215, 1217, 1219, 1221, 
	1223, 1225, 1227, 1229, 1231, 1233, 1235, 1237, 
	1239, 1241, 1243, 1245, 1247, 1249, 1251, 1253, 
	1255, 1257, 1259, 1261, 1263, 1265, 1267, 1269, 
	1271, 1273, 1275, 1277, 1279, 1281, 1283, 1285, 
	1287, 1289, 1291, 1293, 1295, 1297, 1299, 1308, 
	1311, 1320, 1323, 1326, 1329, 1332, 1335, 1338, 
	1341, 1344, 1347, 1350, 1353, 1356, 1359, 1362, 
	1365, 1368, 1371, 1374, 1377, 1380, 1383, 1386, 
	1389, 1392, 1395, 1398, 1401, 1404, 1407, 1410, 
	1413, 1416, 1419, 1422, 1425, 1428, 1431, 1434, 
	1437, 1440, 1443, 1446, 1449, 1452, 1455, 1458, 
	1461, 1464, 1467, 1470, 1473, 1476, 1479, 1482, 
	1485, 1489, 1492, 1495, 1498, 1501, 1504, 1507, 
	1510, 1513, 1516, 1519, 1522, 1525, 1528, 1531, 
	1534, 1537, 1540, 1543, 1546, 1549, 1552, 1555, 
	1558, 1561, 1564, 1567, 1570, 1573, 1576, 1579, 
	1582, 1585, 1588, 1591, 1594, 1597, 1600, 1603, 
	1606, 1609, 1612, 1615, 1618, 1621, 1624, 1627, 
	1630, 1633, 1636, 1639, 1642, 1645, 1648, 1651, 
	1654, 1657, 1660, 1663, 1666, 1669, 1672, 1675, 
	1678, 1681, 1684, 1687, 1690, 1693, 1696, 1699, 
	1702, 1705, 1708, 1711, 1714, 1717, 1720, 1723, 
	1726, 1729, 1732, 1735, 1738, 1741, 1744, 1747, 
	1750, 1753, 1756, 1759, 1762, 1765, 1768, 1771, 
	1774, 1777, 1779, 1781, 1783, 1785, 1787, 1789, 
	1791, 1793, 1795, 1797, 1799, 1801, 1803, 1805, 
	1807, 1809, 1811, 1813, 1815, 1817, 1819, 1821, 
	1823, 1825, 1827, 1829, 1831, 1833, 1835, 1837, 
	1839, 1841, 1843, 1845, 1847, 1849, 1858, 1861, 
	1871, 1874, 1877, 1880, 1883, 1886, 1889, 1892, 
	1895, 1898, 1901, 1904, 1907, 1910, 1913, 1916, 
	1919, 1922, 1925, 1928, 1931, 1934, 1937, 1940, 
	1943, 1946, 1949, 1952, 1955, 1958, 1961, 1964, 
	1967, 1970, 1973, 1976, 1979, 1982, 1985, 1988, 
	1991, 1994, 1997, 2000, 2003, 2006, 2009, 2012, 
	2015, 2018, 2021, 2024, 2027, 2030, 2033, 2036, 
	2040, 2043, 2046, 2049, 2052, 2055, 2058, 2061, 
	2064, 2067, 2070, 2073, 2076, 2079, 2082, 2085, 
	2088, 2091, 2094, 2097, 2100, 2103, 2106, 2109, 
	2112, 2115, 2118, 2121, 2124, 2127, 2130, 2133, 
	2136, 2139, 2142, 2145, 2148, 2151, 2154, 2157, 
	2160, 2163, 2166, 2169, 2172, 2175, 2178, 2181, 
	2184, 2187, 2190, 2193, 2196, 2199, 2202, 2205, 
	2208, 2211, 2214, 2217, 2220, 2223, 2226, 2229, 
	2232, 2235, 2238, 2241, 2244, 2247, 2250, 2253, 
	2256, 2259, 2262, 2265, 2268, 2271, 2274, 2277, 
	2280, 2283, 2286, 2289, 2292, 2295, 2298, 2301, 
	2304, 2307, 2310, 2313, 2316, 2319, 2322, 2325, 
	2328, 2331, 2334, 2337, 2340, 2343, 2346, 2349, 
	2352, 2355, 2358, 2361, 2364, 2367, 2370, 2373, 
	2375, 2377
];

var _lexer_indicies = [
	1, 3, 2, 4, 5, 6, 7, 8, 
	9, 10, 2, 0, 11, 0, 12, 13, 
	14, 15, 16, 17, 18, 19, 20, 0, 
	21, 0, 22, 0, 23, 0, 24, 0, 
	25, 0, 26, 0, 27, 0, 28, 0, 
	29, 0, 30, 0, 31, 0, 32, 0, 
	33, 0, 34, 0, 35, 0, 36, 0, 
	37, 0, 38, 0, 39, 0, 41, 42, 
	40, 44, 45, 43, 1, 3, 2, 4, 
	5, 6, 7, 8, 9, 2, 0, 46, 
	0, 47, 0, 49, 50, 48, 52, 53, 
	51, 56, 55, 57, 55, 54, 60, 59, 
	61, 59, 58, 60, 59, 62, 59, 58, 
	60, 59, 63, 59, 58, 65, 64, 64, 
	0, 3, 66, 66, 0, 68, 69, 67, 
	3, 0, 70, 0, 71, 0, 72, 0, 
	73, 0, 74, 0, 75, 0, 76, 0, 
	77, 0, 78, 0, 79, 0, 80, 0, 
	81, 0, 82, 0, 83, 0, 0, 0, 
	0, 0, 84, 85, 86, 85, 85, 88, 
	87, 84, 3, 89, 8, 89, 0, 90, 
	91, 90, 0, 94, 93, 95, 96, 93, 
	92, 0, 98, 99, 97, 0, 98, 97, 
	94, 100, 98, 99, 100, 97, 101, 94, 
	102, 103, 104, 105, 106, 107, 108, 102, 
	0, 109, 0, 110, 0, 111, 0, 112, 
	0, 113, 0, 114, 0, 115, 0, 116, 
	0, 117, 0, 118, 0, 119, 0, 120, 
	0, 121, 0, 122, 0, 123, 0, 124, 
	0, 125, 0, 126, 0, 127, 0, 128, 
	0, 129, 0, 130, 0, 131, 0, 132, 
	0, 133, 0, 134, 0, 135, 0, 136, 
	0, 137, 0, 138, 0, 139, 0, 140, 
	0, 141, 0, 38, 0, 142, 0, 143, 
	0, 144, 0, 145, 0, 146, 0, 147, 
	0, 148, 0, 149, 0, 150, 0, 151, 
	0, 152, 0, 153, 0, 154, 0, 155, 
	0, 156, 0, 157, 0, 158, 0, 159, 
	0, 160, 0, 161, 0, 162, 0, 163, 
	0, 165, 164, 167, 166, 168, 167, 169, 
	170, 170, 169, 166, 171, 167, 166, 172, 
	167, 166, 173, 167, 166, 174, 167, 166, 
	175, 167, 166, 176, 167, 166, 177, 167, 
	166, 178, 167, 166, 179, 167, 166, 180, 
	167, 166, 181, 167, 166, 182, 167, 166, 
	183, 167, 166, 184, 167, 166, 167, 185, 
	166, 186, 188, 187, 189, 190, 191, 192, 
	193, 194, 187, 0, 195, 0, 196, 0, 
	197, 198, 0, 199, 0, 200, 0, 201, 
	0, 202, 0, 203, 0, 204, 0, 205, 
	0, 207, 206, 209, 208, 210, 209, 211, 
	212, 213, 214, 212, 211, 208, 215, 209, 
	208, 216, 217, 218, 219, 220, 221, 222, 
	209, 208, 223, 209, 208, 224, 209, 208, 
	225, 209, 208, 226, 209, 208, 227, 209, 
	208, 228, 209, 208, 229, 209, 208, 230, 
	209, 208, 231, 209, 208, 232, 209, 208, 
	233, 209, 208, 234, 209, 208, 235, 209, 
	208, 236, 209, 208, 237, 209, 208, 238, 
	209, 208, 239, 209, 208, 240, 209, 208, 
	209, 241, 208, 209, 242, 208, 243, 209, 
	208, 244, 209, 208, 245, 209, 208, 246, 
	209, 208, 247, 209, 208, 248, 209, 208, 
	249, 209, 208, 250, 209, 208, 251, 209, 
	208, 252, 209, 208, 253, 209, 208, 254, 
	209, 208, 255, 209, 208, 256, 209, 208, 
	257, 209, 208, 258, 209, 208, 259, 209, 
	208, 260, 209, 208, 261, 209, 208, 262, 
	209, 208, 263, 209, 208, 264, 209, 208, 
	265, 209, 208, 266, 209, 208, 267, 209, 
	208, 268, 209, 208, 269, 209, 208, 270, 
	209, 208, 271, 209, 208, 272, 209, 208, 
	273, 209, 208, 274, 209, 208, 240, 209, 
	208, 275, 209, 208, 276, 209, 208, 277, 
	209, 208, 278, 209, 208, 279, 209, 208, 
	280, 209, 208, 281, 209, 208, 282, 209, 
	208, 240, 209, 208, 283, 209, 208, 284, 
	209, 208, 285, 209, 208, 286, 209, 208, 
	287, 209, 208, 288, 209, 208, 289, 209, 
	208, 290, 209, 208, 291, 209, 208, 292, 
	209, 208, 293, 209, 208, 294, 209, 208, 
	209, 241, 208, 295, 209, 208, 296, 209, 
	208, 297, 209, 208, 298, 209, 208, 299, 
	209, 208, 300, 209, 208, 301, 209, 208, 
	302, 209, 208, 303, 209, 208, 304, 209, 
	208, 305, 209, 208, 306, 209, 208, 307, 
	209, 208, 308, 209, 208, 309, 209, 208, 
	310, 209, 208, 311, 209, 208, 312, 209, 
	208, 313, 209, 208, 314, 209, 208, 315, 
	209, 208, 316, 209, 208, 317, 209, 208, 
	318, 209, 208, 319, 209, 208, 320, 209, 
	208, 280, 209, 208, 321, 209, 208, 322, 
	209, 208, 323, 209, 208, 324, 209, 208, 
	325, 209, 208, 326, 209, 208, 327, 209, 
	208, 328, 209, 208, 237, 209, 208, 329, 
	209, 208, 330, 209, 208, 331, 209, 208, 
	332, 209, 208, 333, 209, 208, 334, 209, 
	208, 335, 209, 208, 336, 209, 208, 337, 
	209, 208, 338, 209, 208, 339, 209, 208, 
	340, 209, 208, 341, 209, 208, 342, 209, 
	208, 343, 209, 208, 344, 209, 208, 345, 
	209, 208, 346, 209, 208, 347, 209, 208, 
	348, 209, 208, 349, 209, 208, 350, 209, 
	208, 351, 209, 208, 294, 209, 208, 209, 
	352, 208, 209, 353, 208, 209, 354, 208, 
	209, 355, 208, 209, 356, 208, 209, 357, 
	208, 209, 358, 208, 209, 359, 208, 209, 
	360, 208, 209, 361, 208, 209, 362, 208, 
	209, 363, 208, 209, 364, 208, 209, 365, 
	208, 366, 0, 367, 0, 368, 0, 369, 
	0, 370, 0, 38, 0, 371, 0, 372, 
	0, 373, 0, 374, 0, 375, 0, 376, 
	0, 377, 0, 378, 0, 379, 0, 380, 
	0, 381, 0, 382, 0, 383, 0, 385, 
	384, 387, 386, 388, 387, 389, 390, 391, 
	390, 389, 386, 392, 387, 386, 393, 394, 
	395, 396, 397, 387, 386, 398, 387, 386, 
	399, 387, 386, 400, 387, 386, 401, 387, 
	386, 402, 387, 386, 403, 387, 386, 404, 
	387, 386, 405, 387, 386, 406, 387, 386, 
	407, 387, 386, 408, 387, 386, 409, 387, 
	386, 410, 387, 386, 411, 387, 386, 412, 
	387, 386, 413, 387, 386, 414, 387, 386, 
	415, 387, 386, 416, 387, 386, 417, 387, 
	386, 418, 387, 386, 387, 419, 386, 420, 
	387, 386, 421, 387, 386, 422, 387, 386, 
	423, 387, 386, 424, 387, 386, 425, 387, 
	386, 426, 387, 386, 427, 387, 386, 418, 
	387, 386, 428, 387, 386, 429, 387, 386, 
	430, 387, 386, 431, 387, 386, 432, 387, 
	386, 433, 387, 386, 434, 387, 386, 435, 
	387, 386, 415, 387, 386, 436, 387, 386, 
	437, 387, 386, 438, 387, 386, 439, 387, 
	386, 440, 387, 386, 441, 387, 386, 442, 
	387, 386, 443, 387, 386, 444, 387, 386, 
	445, 387, 386, 446, 387, 386, 447, 387, 
	386, 448, 387, 386, 449, 387, 386, 425, 
	387, 386, 450, 387, 386, 451, 387, 386, 
	452, 387, 386, 453, 387, 386, 454, 387, 
	386, 455, 387, 386, 456, 387, 386, 457, 
	387, 386, 458, 387, 386, 459, 387, 386, 
	460, 387, 386, 461, 387, 386, 462, 387, 
	386, 463, 387, 386, 464, 387, 386, 465, 
	387, 386, 466, 387, 386, 467, 387, 386, 
	468, 387, 386, 469, 387, 386, 425, 387, 
	386, 387, 470, 386, 387, 471, 386, 387, 
	472, 386, 387, 473, 386, 387, 474, 386, 
	387, 475, 386, 387, 476, 386, 387, 477, 
	386, 387, 478, 386, 387, 479, 386, 387, 
	480, 386, 387, 481, 386, 387, 482, 386, 
	387, 483, 386, 484, 0, 485, 0, 486, 
	0, 487, 0, 488, 0, 489, 0, 490, 
	0, 491, 0, 492, 0, 493, 0, 494, 
	0, 495, 0, 496, 0, 497, 0, 498, 
	0, 499, 0, 500, 0, 501, 0, 502, 
	0, 503, 0, 504, 0, 505, 0, 506, 
	0, 507, 0, 508, 0, 509, 0, 368, 
	0, 510, 0, 511, 0, 512, 0, 513, 
	0, 514, 0, 515, 0, 516, 0, 517, 
	0, 518, 0, 519, 0, 520, 0, 521, 
	0, 522, 0, 523, 0, 524, 0, 525, 
	0, 526, 0, 527, 0, 528, 0, 530, 
	529, 532, 531, 533, 532, 534, 535, 536, 
	537, 535, 534, 531, 538, 532, 531, 539, 
	540, 541, 542, 543, 544, 545, 532, 531, 
	546, 532, 531, 547, 532, 531, 548, 532, 
	531, 549, 532, 531, 550, 532, 531, 551, 
	532, 531, 552, 532, 531, 553, 532, 531, 
	554, 532, 531, 555, 532, 531, 556, 532, 
	531, 557, 532, 531, 558, 532, 531, 559, 
	532, 531, 560, 532, 531, 561, 532, 531, 
	562, 532, 531, 563, 532, 531, 532, 564, 
	531, 532, 565, 531, 566, 532, 531, 567, 
	532, 531, 568, 532, 531, 569, 532, 531, 
	570, 532, 531, 571, 532, 531, 572, 532, 
	531, 573, 532, 531, 574, 532, 531, 575, 
	532, 531, 576, 532, 531, 577, 532, 531, 
	578, 532, 531, 579, 532, 531, 580, 532, 
	531, 581, 532, 531, 582, 532, 531, 583, 
	532, 531, 584, 532, 531, 585, 532, 531, 
	586, 532, 531, 587, 532, 531, 588, 532, 
	531, 589, 532, 531, 590, 532, 531, 591, 
	532, 531, 592, 532, 531, 593, 532, 531, 
	594, 532, 531, 595, 532, 531, 596, 532, 
	531, 597, 532, 531, 563, 532, 531, 598, 
	532, 531, 599, 532, 531, 600, 601, 532, 
	531, 602, 532, 531, 603, 532, 531, 604, 
	532, 531, 605, 532, 531, 606, 532, 531, 
	607, 532, 531, 532, 564, 531, 608, 532, 
	531, 609, 532, 531, 610, 532, 531, 611, 
	532, 531, 612, 532, 531, 563, 532, 531, 
	613, 532, 531, 614, 532, 531, 615, 532, 
	531, 616, 532, 531, 617, 532, 531, 618, 
	532, 531, 619, 532, 531, 620, 532, 531, 
	621, 532, 531, 622, 532, 531, 623, 532, 
	531, 607, 532, 531, 624, 532, 531, 625, 
	532, 531, 626, 532, 531, 627, 532, 531, 
	628, 532, 531, 629, 532, 531, 630, 532, 
	531, 631, 532, 531, 632, 532, 531, 633, 
	532, 531, 634, 532, 531, 635, 532, 531, 
	636, 532, 531, 637, 532, 531, 638, 532, 
	531, 639, 532, 531, 640, 532, 531, 641, 
	532, 531, 642, 532, 531, 643, 532, 531, 
	644, 532, 531, 645, 532, 531, 646, 532, 
	531, 647, 532, 531, 648, 532, 531, 649, 
	532, 531, 610, 532, 531, 650, 532, 531, 
	651, 532, 531, 652, 532, 531, 653, 532, 
	531, 654, 532, 531, 655, 532, 531, 656, 
	532, 531, 657, 532, 531, 560, 532, 531, 
	658, 532, 531, 659, 532, 531, 660, 532, 
	531, 661, 532, 531, 662, 532, 531, 663, 
	532, 531, 664, 532, 531, 665, 532, 531, 
	666, 532, 531, 667, 532, 531, 668, 532, 
	531, 669, 532, 531, 670, 532, 531, 671, 
	532, 531, 672, 532, 531, 673, 532, 531, 
	674, 532, 531, 675, 532, 531, 676, 532, 
	531, 677, 532, 531, 604, 532, 531, 532, 
	678, 531, 532, 679, 531, 532, 680, 531, 
	532, 681, 531, 532, 682, 531, 532, 683, 
	531, 532, 684, 531, 532, 685, 531, 532, 
	686, 531, 532, 687, 531, 532, 688, 531, 
	532, 689, 531, 532, 690, 531, 532, 691, 
	531, 692, 0, 693, 0, 694, 0, 695, 
	0, 696, 0, 697, 0, 698, 0, 699, 
	0, 35, 0, 700, 0, 701, 0, 702, 
	0, 703, 0, 704, 0, 705, 0, 706, 
	0, 707, 0, 708, 0, 709, 0, 710, 
	0, 711, 0, 712, 0, 713, 0, 714, 
	0, 715, 0, 716, 0, 717, 0, 718, 
	0, 719, 0, 720, 0, 721, 0, 722, 
	0, 723, 0, 724, 0, 726, 725, 728, 
	727, 729, 728, 730, 731, 732, 733, 731, 
	730, 727, 734, 728, 727, 735, 736, 737, 
	738, 739, 740, 741, 742, 728, 727, 743, 
	728, 727, 744, 728, 727, 745, 728, 727, 
	746, 728, 727, 747, 728, 727, 748, 728, 
	727, 749, 728, 727, 750, 728, 727, 751, 
	728, 727, 752, 728, 727, 753, 728, 727, 
	754, 728, 727, 755, 728, 727, 756, 728, 
	727, 757, 728, 727, 758, 728, 727, 759, 
	728, 727, 760, 728, 727, 728, 761, 727, 
	728, 762, 727, 763, 728, 727, 764, 728, 
	727, 765, 728, 727, 766, 728, 727, 767, 
	728, 727, 768, 728, 727, 769, 728, 727, 
	770, 728, 727, 771, 728, 727, 772, 728, 
	727, 773, 728, 727, 774, 728, 727, 775, 
	728, 727, 776, 728, 727, 777, 728, 727, 
	778, 728, 727, 779, 728, 727, 780, 728, 
	727, 781, 728, 727, 782, 728, 727, 783, 
	728, 727, 784, 728, 727, 785, 728, 727, 
	786, 728, 727, 787, 728, 727, 788, 728, 
	727, 789, 728, 727, 790, 728, 727, 791, 
	728, 727, 792, 728, 727, 793, 728, 727, 
	794, 728, 727, 760, 728, 727, 795, 728, 
	727, 796, 728, 727, 797, 798, 728, 727, 
	799, 728, 727, 800, 728, 727, 801, 728, 
	727, 802, 728, 727, 803, 728, 727, 804, 
	728, 727, 728, 761, 727, 805, 728, 727, 
	806, 728, 727, 807, 728, 727, 808, 728, 
	727, 809, 728, 727, 760, 728, 727, 810, 
	728, 727, 811, 728, 727, 812, 728, 727, 
	813, 728, 727, 814, 728, 727, 815, 728, 
	727, 816, 728, 727, 817, 728, 727, 818, 
	728, 727, 819, 728, 727, 820, 728, 727, 
	804, 728, 727, 821, 728, 727, 822, 728, 
	727, 823, 728, 727, 824, 728, 727, 825, 
	728, 727, 826, 728, 727, 827, 728, 727, 
	828, 728, 727, 829, 728, 727, 830, 728, 
	727, 831, 728, 727, 832, 728, 727, 833, 
	728, 727, 834, 728, 727, 835, 728, 727, 
	836, 728, 727, 837, 728, 727, 838, 728, 
	727, 839, 728, 727, 840, 728, 727, 841, 
	728, 727, 842, 728, 727, 843, 728, 727, 
	844, 728, 727, 845, 728, 727, 846, 728, 
	727, 807, 728, 727, 847, 728, 727, 848, 
	728, 727, 849, 728, 727, 850, 728, 727, 
	851, 728, 727, 852, 728, 727, 853, 728, 
	727, 854, 728, 727, 855, 728, 727, 856, 
	728, 727, 857, 728, 727, 858, 728, 727, 
	859, 728, 727, 860, 728, 727, 801, 728, 
	727, 861, 728, 727, 862, 728, 727, 863, 
	728, 727, 864, 728, 727, 865, 728, 727, 
	866, 728, 727, 867, 728, 727, 868, 728, 
	727, 757, 728, 727, 869, 728, 727, 870, 
	728, 727, 871, 728, 727, 872, 728, 727, 
	873, 728, 727, 874, 728, 727, 875, 728, 
	727, 876, 728, 727, 877, 728, 727, 878, 
	728, 727, 879, 728, 727, 880, 728, 727, 
	881, 728, 727, 882, 728, 727, 883, 728, 
	727, 884, 728, 727, 885, 728, 727, 886, 
	728, 727, 887, 728, 727, 888, 728, 727, 
	801, 728, 727, 728, 889, 727, 728, 890, 
	727, 728, 891, 727, 728, 892, 727, 728, 
	893, 727, 728, 894, 727, 728, 895, 727, 
	728, 896, 727, 728, 897, 727, 728, 898, 
	727, 728, 899, 727, 728, 900, 727, 728, 
	901, 727, 728, 902, 727, 903, 0, 2, 
	0, 904, 0
];

var _lexer_trans_targs = [
	0, 2, 25, 25, 26, 36, 38, 22, 
	52, 55, 823, 3, 4, 61, 95, 136, 
	306, 414, 441, 617, 626, 5, 6, 7, 
	8, 9, 10, 11, 12, 13, 14, 15, 
	16, 17, 18, 19, 20, 21, 22, 23, 
	24, 25, 37, 24, 25, 37, 27, 28, 
	29, 30, 29, 29, 30, 29, 31, 31, 
	31, 32, 31, 31, 31, 32, 33, 34, 
	35, 25, 35, 36, 25, 37, 39, 40, 
	41, 42, 43, 44, 45, 46, 47, 48, 
	49, 50, 51, 825, 53, 54, 25, 53, 
	52, 54, 55, 56, 57, 59, 60, 58, 
	56, 57, 58, 56, 59, 2, 60, 26, 
	36, 38, 22, 52, 55, 62, 63, 64, 
	65, 66, 67, 68, 69, 70, 71, 72, 
	73, 74, 75, 76, 77, 78, 79, 80, 
	81, 82, 83, 84, 85, 86, 87, 88, 
	89, 90, 91, 92, 93, 94, 96, 97, 
	98, 99, 100, 101, 102, 103, 104, 105, 
	106, 107, 108, 109, 110, 111, 112, 113, 
	114, 115, 116, 117, 118, 119, 118, 119, 
	120, 119, 25, 121, 122, 123, 124, 125, 
	126, 127, 128, 129, 130, 131, 132, 133, 
	134, 135, 2, 25, 25, 26, 36, 38, 
	22, 52, 55, 137, 138, 139, 300, 140, 
	141, 142, 143, 144, 145, 146, 147, 148, 
	147, 148, 149, 148, 25, 286, 169, 150, 
	151, 170, 204, 213, 226, 253, 262, 152, 
	153, 154, 155, 156, 157, 158, 159, 160, 
	161, 162, 163, 164, 165, 166, 167, 168, 
	169, 135, 171, 172, 173, 174, 175, 176, 
	177, 178, 179, 180, 181, 182, 183, 184, 
	185, 186, 187, 188, 189, 190, 191, 192, 
	193, 194, 195, 196, 197, 198, 199, 200, 
	201, 202, 203, 205, 206, 207, 208, 209, 
	210, 211, 212, 214, 215, 216, 217, 218, 
	219, 220, 221, 222, 223, 224, 225, 227, 
	228, 229, 230, 231, 232, 233, 234, 235, 
	236, 237, 238, 239, 240, 241, 242, 243, 
	244, 245, 246, 247, 248, 249, 250, 251, 
	252, 254, 255, 256, 257, 258, 259, 260, 
	261, 263, 264, 265, 266, 267, 268, 269, 
	270, 271, 272, 273, 274, 275, 276, 277, 
	278, 279, 280, 281, 282, 283, 284, 285, 
	287, 288, 289, 290, 291, 292, 293, 294, 
	295, 296, 297, 298, 299, 25, 301, 302, 
	303, 304, 305, 307, 308, 309, 310, 311, 
	312, 313, 314, 315, 316, 317, 318, 319, 
	320, 321, 320, 321, 322, 321, 25, 400, 
	323, 324, 346, 355, 364, 379, 325, 326, 
	327, 328, 329, 330, 331, 332, 333, 334, 
	335, 336, 337, 338, 339, 340, 341, 342, 
	343, 344, 345, 135, 347, 348, 349, 350, 
	351, 352, 353, 354, 356, 357, 358, 359, 
	360, 361, 362, 363, 365, 366, 367, 368, 
	369, 370, 371, 372, 373, 374, 375, 376, 
	377, 378, 380, 381, 382, 383, 384, 385, 
	386, 387, 388, 389, 390, 391, 392, 393, 
	394, 395, 396, 397, 398, 399, 401, 402, 
	403, 404, 405, 406, 407, 408, 409, 410, 
	411, 412, 413, 25, 415, 416, 417, 418, 
	419, 420, 421, 422, 423, 424, 425, 426, 
	427, 428, 429, 430, 431, 432, 433, 434, 
	435, 436, 437, 438, 439, 440, 442, 443, 
	444, 445, 446, 447, 448, 449, 450, 451, 
	452, 453, 454, 455, 456, 457, 458, 459, 
	460, 461, 462, 461, 462, 463, 462, 25, 
	603, 483, 464, 465, 484, 518, 534, 546, 
	573, 582, 466, 467, 468, 469, 470, 471, 
	472, 473, 474, 475, 476, 477, 478, 479, 
	480, 481, 482, 483, 135, 485, 486, 487, 
	488, 489, 490, 491, 492, 493, 494, 495, 
	496, 497, 498, 499, 500, 501, 502, 503, 
	504, 505, 506, 507, 508, 509, 510, 511, 
	512, 513, 514, 515, 516, 517, 519, 520, 
	521, 528, 522, 523, 524, 525, 526, 527, 
	529, 530, 531, 532, 533, 535, 536, 537, 
	538, 539, 540, 541, 542, 543, 544, 545, 
	547, 548, 549, 550, 551, 552, 553, 554, 
	555, 556, 557, 558, 559, 560, 561, 562, 
	563, 564, 565, 566, 567, 568, 569, 570, 
	571, 572, 574, 575, 576, 577, 578, 579, 
	580, 581, 583, 584, 585, 586, 587, 588, 
	589, 590, 591, 592, 593, 594, 595, 596, 
	597, 598, 599, 600, 601, 602, 604, 605, 
	606, 607, 608, 609, 610, 611, 612, 613, 
	614, 615, 616, 25, 618, 619, 620, 621, 
	622, 623, 624, 625, 627, 628, 629, 630, 
	631, 632, 633, 634, 635, 636, 637, 638, 
	639, 640, 641, 642, 643, 644, 645, 646, 
	647, 648, 649, 650, 651, 652, 653, 652, 
	653, 654, 653, 25, 809, 674, 655, 656, 
	675, 709, 725, 737, 764, 779, 788, 657, 
	658, 659, 660, 661, 662, 663, 664, 665, 
	666, 667, 668, 669, 670, 671, 672, 673, 
	674, 135, 676, 677, 678, 679, 680, 681, 
	682, 683, 684, 685, 686, 687, 688, 689, 
	690, 691, 692, 693, 694, 695, 696, 697, 
	698, 699, 700, 701, 702, 703, 704, 705, 
	706, 707, 708, 710, 711, 712, 719, 713, 
	714, 715, 716, 717, 718, 720, 721, 722, 
	723, 724, 726, 727, 728, 729, 730, 731, 
	732, 733, 734, 735, 736, 738, 739, 740, 
	741, 742, 743, 744, 745, 746, 747, 748, 
	749, 750, 751, 752, 753, 754, 755, 756, 
	757, 758, 759, 760, 761, 762, 763, 765, 
	766, 767, 768, 769, 770, 771, 772, 773, 
	774, 775, 776, 777, 778, 780, 781, 782, 
	783, 784, 785, 786, 787, 789, 790, 791, 
	792, 793, 794, 795, 796, 797, 798, 799, 
	800, 801, 802, 803, 804, 805, 806, 807, 
	808, 810, 811, 812, 813, 814, 815, 816, 
	817, 818, 819, 820, 821, 822, 25, 824, 
	0
];

var _lexer_trans_actions = [
	43, 29, 0, 54, 3, 1, 0, 29, 
	1, 35, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	57, 149, 126, 0, 110, 23, 0, 0, 
	7, 139, 48, 0, 102, 9, 5, 45, 
	134, 45, 0, 33, 122, 33, 33, 0, 
	11, 106, 0, 0, 114, 25, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 27, 118, 27, 
	51, 0, 0, 0, 37, 37, 54, 37, 
	87, 0, 0, 39, 0, 96, 0, 93, 
	90, 41, 96, 90, 99, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 57, 144, 0, 54, 
	84, 0, 81, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 21, 63, 31, 130, 60, 57, 31, 
	63, 57, 66, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 57, 144, 
	0, 54, 84, 0, 78, 33, 84, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 19, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 19, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	57, 144, 0, 54, 84, 0, 69, 33, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 13, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 13, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 57, 144, 0, 54, 84, 0, 72, 
	33, 84, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 15, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 15, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 57, 144, 0, 
	54, 84, 0, 75, 33, 84, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 17, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 17, 0, 
	0
];

var _lexer_eof_actions = [
	0, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43
];

var lexer_start = 1;
var lexer_first_final = 825;
var lexer_error = 0;

var lexer_en_main = 1;


/* line 129 "ragel/i18n/tl.js.rl" */

/* line 130 "ragel/i18n/tl.js.rl" */

/* line 131 "ragel/i18n/tl.js.rl" */

/* line 132 "ragel/i18n/tl.js.rl" */

var Lexer = function(listener) {
  // Check that listener has the required functions
  var events = ['comment', 'tag', 'feature', 'background', 'scenario', 'scenario_outline', 'examples', 'step', 'doc_string', 'row', 'eof'];
  for(var i=0, len=events.length; i<len; i++) {
    var event = events[i];
    if(typeof listener[event] != 'function') {
      throw new Error("Error. No " + event + " function exists on " + JSON.stringify(listener));
    }
  }
  this.listener = listener;
};

Lexer.prototype.scan = function(data) {
  var ending = "\n%_FEATURE_END_%";
  if(typeof data == 'string') {
    data = this.stringToBytes(data + ending);
  } else if(typeof Buffer != 'undefined' && Buffer.isBuffer(data)) {
    // Node.js
    var buf = new Buffer(data.length + ending.length);
    data.copy(buf, 0, 0);
    new Buffer(ending).copy(buf, data.length, 0);
    data = buf;
  }
  var eof = pe = data.length;
  var p = 0;

  this.line_number = 1;
  this.last_newline = 0;
  var signedCharValue=function(v){return v > 127 ? v-256 : v; };

  
/* line 1351 "js/lib/gherkin/lexer/tl.js" */
{
	  this.cs = lexer_start;
} /* JSCodeGen::writeInit */

/* line 164 "ragel/i18n/tl.js.rl" */
  
/* line 1358 "js/lib/gherkin/lexer/tl.js" */
{
	var _klen, _trans, _keys, _ps, _widec, _acts, _nacts;
	var _goto_level, _resume, _eof_trans, _again, _test_eof;
	var _out;
	_klen = _trans = _keys = _acts = _nacts = null;
	_goto_level = 0;
	_resume = 10;
	_eof_trans = 15;
	_again = 20;
	_test_eof = 30;
	_out = 40;
	while (true) {
	_trigger_goto = false;
	if (_goto_level <= 0) {
	if (p == pe) {
		_goto_level = _test_eof;
		continue;
	}
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	}
	if (_goto_level <= _resume) {
	_keys = _lexer_key_offsets[ this.cs];
	_trans = _lexer_index_offsets[ this.cs];
	_klen = _lexer_single_lengths[ this.cs];
	_break_match = false;
	
	do {
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + _klen - 1;

	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + ( (_upper - _lower) >> 1 );

	        if (( signedCharValue(data[p])) < _lexer_trans_keys[_mid]) {
	           _upper = _mid - 1;
	        } else if (( signedCharValue(data[p])) > _lexer_trans_keys[_mid]) {
	           _lower = _mid + 1;
	        } else {
	           _trans += (_mid - _keys);
	           _break_match = true;
	           break;
	        };
	     } /* while */
	     if (_break_match) { break; }
	     _keys += _klen;
	     _trans += _klen;
	  }
	  _klen = _lexer_range_lengths[ this.cs];
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + (_klen << 1) - 2;
	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + (((_upper-_lower) >> 1) & ~1);
	        if (( signedCharValue(data[p])) < _lexer_trans_keys[_mid]) {
	          _upper = _mid - 2;
	         } else if (( signedCharValue(data[p])) > _lexer_trans_keys[_mid+1]) {
	          _lower = _mid + 2;
	        } else {
	          _trans += ((_mid - _keys) >> 1);
	          _break_match = true;
	          break;
	        }
	     } /* while */
	     if (_break_match) { break; }
	     _trans += _klen
	  }
	} while (false);
	_trans = _lexer_indicies[_trans];
	 this.cs = _lexer_trans_targs[_trans];
	if (_lexer_trans_actions[_trans] != 0) {
		_acts = _lexer_trans_actions[_trans];
		_nacts = _lexer_actions[_acts];
		_acts += 1;
		while (_nacts > 0) {
			_nacts -= 1;
			_acts += 1;
			switch (_lexer_actions[_acts - 1]) {
case 0:
/* line 6 "ragel/i18n/tl.js.rl" */

    this.content_start = p;
    this.current_line = this.line_number;
    this.start_col = p - this.last_newline - (this.keyword+':').length;
  		break;
case 1:
/* line 12 "ragel/i18n/tl.js.rl" */

    this.current_line = this.line_number;
    this.start_col = p - this.last_newline;
  		break;
case 2:
/* line 17 "ragel/i18n/tl.js.rl" */

    this.content_start = p;
  		break;
case 3:
/* line 21 "ragel/i18n/tl.js.rl" */

    this.docstring_content_type_start = p;
  		break;
case 4:
/* line 25 "ragel/i18n/tl.js.rl" */

    this.docstring_content_type_end = p;
  		break;
case 5:
/* line 29 "ragel/i18n/tl.js.rl" */

    var con = this.unindent(
      this.start_col, 
      this.bytesToString(data.slice(this.content_start, this.next_keyword_start-1)).replace(/(\r?\n)?([\t ])*$/, '').replace(/\\\"\\\"\\\"/mg, '"""')
    );
    var con_type = this.bytesToString(data.slice(this.docstring_content_type_start, this.docstring_content_type_end)).trim();
    this.listener.doc_string(con_type, con, this.current_line); 
  		break;
case 6:
/* line 38 "ragel/i18n/tl.js.rl" */

    p = this.store_keyword_content('feature', data, p, eof);
  		break;
case 7:
/* line 42 "ragel/i18n/tl.js.rl" */

    p = this.store_keyword_content('background', data, p, eof);
  		break;
case 8:
/* line 46 "ragel/i18n/tl.js.rl" */

    p = this.store_keyword_content('scenario', data, p, eof);
  		break;
case 9:
/* line 50 "ragel/i18n/tl.js.rl" */

    p = this.store_keyword_content('scenario_outline', data, p, eof);
  		break;
case 10:
/* line 54 "ragel/i18n/tl.js.rl" */

    p = this.store_keyword_content('examples', data, p, eof);
  		break;
case 11:
/* line 58 "ragel/i18n/tl.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.step(this.keyword, con, this.current_line);
  		break;
case 12:
/* line 63 "ragel/i18n/tl.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.comment(con, this.line_number);
    this.keyword_start = null;
  		break;
case 13:
/* line 69 "ragel/i18n/tl.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.tag(con, this.line_number);
    this.keyword_start = null;
  		break;
case 14:
/* line 75 "ragel/i18n/tl.js.rl" */

    this.line_number++;
  		break;
case 15:
/* line 79 "ragel/i18n/tl.js.rl" */

    this.last_newline = p + 1;
  		break;
case 16:
/* line 83 "ragel/i18n/tl.js.rl" */

    this.keyword_start = this.keyword_start || p;
  		break;
case 17:
/* line 87 "ragel/i18n/tl.js.rl" */

    this.keyword = this.bytesToString(data.slice(this.keyword_start, p)).replace(/:$/, '');
    this.keyword_start = null;
  		break;
case 18:
/* line 92 "ragel/i18n/tl.js.rl" */

    this.next_keyword_start = p;
  		break;
case 19:
/* line 96 "ragel/i18n/tl.js.rl" */

    p = p - 1;
    current_row = [];
    this.current_line = this.line_number;
  		break;
case 20:
/* line 102 "ragel/i18n/tl.js.rl" */

    this.content_start = p;
  		break;
case 21:
/* line 106 "ragel/i18n/tl.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    current_row.push(con.replace(/\\\|/, "|").replace(/\\n/, "\n").replace(/\\\\/, "\\"));
  		break;
case 22:
/* line 111 "ragel/i18n/tl.js.rl" */

    this.listener.row(current_row, this.current_line);
  		break;
case 23:
/* line 115 "ragel/i18n/tl.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw new Error("Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.");
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 1585 "js/lib/gherkin/lexer/tl.js" */
			} /* action switch */
		}
	}
	if (_trigger_goto) {
		continue;
	}
	}
	if (_goto_level <= _again) {
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	p += 1;
	if (p != pe) {
		_goto_level = _resume;
		continue;
	}
	}
	if (_goto_level <= _test_eof) {
	if (p == eof) {
	__acts = _lexer_eof_actions[ this.cs];
	__nacts =  _lexer_actions[__acts];
	__acts += 1;
	while (__nacts > 0) {
		__nacts -= 1;
		__acts += 1;
		switch (_lexer_actions[__acts - 1]) {
case 23:
/* line 115 "ragel/i18n/tl.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw new Error("Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.");
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 1624 "js/lib/gherkin/lexer/tl.js" */
		} /* eof action switch */
	}
	if (_trigger_goto) {
		continue;
	}
}
	}
	if (_goto_level <= _out) {
		break;
	}
	}
	}

/* line 165 "ragel/i18n/tl.js.rl" */
};


/*
 * Decode utf-8 byte sequence to string.
 */
var decodeUtf8 = function(bytes) {
  var result = "";
  var i = 0;
  var wc;
  var c;

  while (i < bytes.length) {
    /* parse as UTF-8 lead byte */
    wc = bytes[i++];
    if (wc < 0x80) {
      count = 0;
    } else if (wc < 0xC2 || wc >= 0xF8) {
      throw new Error("input is not a valid UTF-8 lead octet");
    } else if (wc < 0xE0) {
      count = 1;
      wc = (wc & 0x1F) << 6;
    } else if (wc < 0xF0) {
      count = 2;
      wc = (wc & 0x0F) << 12;
    } else /* wc < 0xF8 */ {
      count = 3;
      wc = (wc & 0x07) << 18;
    }

    /* parse trail bytes, if any */
    while (count) {
      if (!(i < bytes.length)) {
        throw new Error("short read");
      }
      if ((c = bytes[i++] ^ 0x80) > 0x3F) {
        throw new Error("input is not a valid UTF-8 trail octet");
      }
      wc |= c << (6 * --count);
      if (wc < (1 << (5 * count + 6))) {
        throw new Error("invalid non-minimal encoded input");
      }
    }

    /* handle conversion to UTF-16 if needed */
    if (wc > 0xFFFF) {
      wc -= 0x10000;
      result += String.fromCharCode(0xD800 + (wc >> 10));
      wc = 0xDC00 + (wc & 0x3FF);
    }
    result += String.fromCharCode(wc);
  }

  return result;
};

/*
 * Encode string to an array of bytes using utf8 encoding.
 *
 * Javascript internally stores character data as utf16 (like java).
 * String.charCodeAt() does *not* produce unicode points, but simply
 * reflects this internal representation. Thus, it is necessary
 * to first decode the utf-16 representation before encoding to
 * utf-8.
 */
var encodeUtf8 = function(string) {
  var bytes = [];
  var i = 0;
  var j = 0;
  var wc;

  while (i < string.length) {
    wc = string.charCodeAt(i++);
    if (wc >= 0xD800 && wc <= 0xDBFF && i < string.length && string.charCodeAt(i) >= 0xDC00 && string.charCodeAt(i) <= 0xDFFF) {
      /* decode UTF-16 */
      wc = 0x10000 + ((wc & 0x3FF) << 10) + (string.charCodeAt(i++) & 0x3FF);
    }

    /* emit lead byte */
    if (wc < 0x80) {
      bytes[j++] = wc;
      count = 0;
    } else if (wc < 0x800) {
      bytes[j++] = 0xC0 | (wc >> 6);
      count = 1;
    } else if (wc < 0x10000) {
      bytes[j++] = 0xE0 | (wc >> 12);
      count = 2;
    } else {
      /* SMP: 21-bit Unicode */
      bytes[j++] = 0xF0 | (wc >> 18);
      count = 3;
    }

    /* emit trail bytes, if any */
    while (count) {
      bytes[j++] = 0x80 | ((wc >> (6 * --count)) & 0x3F);
    }
  }

  return bytes;

};

Lexer.prototype.bytesToString = function(bytes) {
  if(typeof bytes.write == 'function') {
    // Node.js
    return bytes.toString('utf-8');
  }
  return decodeUtf8(bytes);
};

Lexer.prototype.stringToBytes = function(string) {
  return encodeUtf8(string);
};

Lexer.prototype.unindent = function(startcol, text) {
  startcol = startcol || 0;
  return text.replace(new RegExp('^[\t ]{0,' + startcol + '}', 'gm'), ''); 
};

Lexer.prototype.store_keyword_content = function(event, data, p, eof) {
  var end_point = (!this.next_keyword_start || (p == eof)) ? p : this.next_keyword_start;
  var content = this.unindent(this.start_col + 2, this.bytesToString(data.slice(this.content_start, end_point))).replace(/\s+$/,"");
  var content_lines = content.split("\n")
  var name = content_lines.shift() || "";
  name = name.trim();
  var description = content_lines.join("\n");
  this.listener[event](this.keyword, name, description, this.current_line);
  var nks = this.next_keyword_start;
  this.next_keyword_start = null;
  return nks ? nks - 1 : p;
};

Lexer.prototype.current_line_content = function(data, p) {
  var rest = Array.prototype.slice.call(data,this.last_newline, -1);
  var end = rest.indexOf(10) || -1;
  return this.bytesToString(rest.slice(0, end)).trim();
};

// Node.js export
if(typeof module !== 'undefined') {
  module.exports = Lexer;
}
// Require.js export
if (typeof define !== 'undefined') {
  if(define.amd) {
    define('gherkin/lexer/tl', [], function() {
      return Lexer;
    });
  } else {
    define('gherkin/lexer/tl', function(require, exports, module) {
      exports.Lexer = Lexer;
    });
  }
}

})();

}).call(this,require("buffer").Buffer)

},{"buffer":69}],234:[function(require,module,exports){
(function (Buffer){

/* line 1 "ragel/i18n/tr.js.rl" */
;(function() {


/* line 126 "ragel/i18n/tr.js.rl" */



/* line 11 "js/lib/gherkin/lexer/tr.js" */
var _lexer_actions = [
	0, 1, 0, 1, 1, 1, 2, 1, 
	3, 1, 4, 1, 5, 1, 6, 1, 
	7, 1, 8, 1, 9, 1, 10, 1, 
	11, 1, 12, 1, 13, 1, 16, 1, 
	17, 1, 18, 1, 19, 1, 20, 1, 
	21, 1, 22, 1, 23, 2, 2, 18, 
	2, 3, 4, 2, 13, 0, 2, 14, 
	15, 2, 17, 0, 2, 17, 1, 2, 
	17, 16, 2, 17, 19, 2, 18, 6, 
	2, 18, 7, 2, 18, 8, 2, 18, 
	9, 2, 18, 10, 2, 18, 16, 2, 
	20, 21, 2, 22, 0, 2, 22, 1, 
	2, 22, 16, 2, 22, 19, 3, 4, 
	14, 15, 3, 5, 14, 15, 3, 11, 
	14, 15, 3, 12, 14, 15, 3, 13, 
	14, 15, 3, 14, 15, 18, 3, 17, 
	0, 11, 3, 17, 14, 15, 4, 2, 
	14, 15, 18, 4, 3, 4, 14, 15, 
	4, 17, 0, 14, 15, 5, 17, 0, 
	11, 14, 15
];

var _lexer_key_offsets = [
	0, 0, 20, 21, 23, 24, 25, 26, 
	27, 28, 29, 30, 31, 32, 39, 41, 
	43, 45, 47, 49, 51, 53, 55, 74, 
	93, 94, 95, 97, 99, 104, 109, 114, 
	119, 123, 127, 129, 130, 131, 132, 133, 
	134, 135, 136, 137, 138, 139, 140, 141, 
	142, 143, 144, 145, 147, 149, 154, 161, 
	166, 167, 168, 169, 170, 171, 172, 173, 
	174, 175, 176, 177, 178, 179, 180, 181, 
	182, 183, 184, 185, 186, 187, 188, 189, 
	190, 191, 192, 193, 194, 195, 211, 213, 
	215, 217, 219, 221, 223, 225, 227, 229, 
	231, 233, 235, 237, 239, 241, 243, 245, 
	247, 249, 251, 253, 255, 257, 259, 261, 
	263, 265, 267, 269, 271, 273, 275, 277, 
	279, 281, 283, 285, 287, 289, 291, 293, 
	295, 297, 299, 301, 303, 305, 307, 309, 
	311, 313, 315, 317, 319, 322, 324, 326, 
	328, 330, 332, 334, 336, 338, 340, 342, 
	343, 344, 345, 346, 347, 348, 349, 350, 
	351, 352, 353, 354, 356, 357, 358, 359, 
	360, 361, 362, 363, 364, 365, 366, 367, 
	368, 384, 386, 388, 390, 392, 394, 396, 
	398, 400, 402, 404, 406, 408, 410, 412, 
	414, 416, 418, 420, 422, 424, 426, 428, 
	430, 432, 434, 436, 438, 440, 442, 444, 
	446, 448, 450, 452, 454, 456, 458, 460, 
	462, 464, 466, 468, 470, 472, 474, 476, 
	478, 480, 482, 484, 486, 488, 490, 492, 
	494, 495, 496, 513, 515, 517, 519, 521, 
	523, 525, 527, 529, 531, 533, 535, 537, 
	539, 541, 543, 545, 547, 549, 551, 553, 
	555, 557, 559, 561, 563, 565, 567, 569, 
	571, 573, 575, 577, 579, 581, 583, 585, 
	587, 589, 591, 593, 595, 597, 599, 601, 
	603, 605, 607, 609, 611, 613, 615, 617, 
	619, 621, 623, 625, 627, 629, 631, 633, 
	635, 638, 640, 642, 644, 646, 648, 650, 
	652, 654, 656, 658, 659, 663, 669, 672, 
	674, 680, 699, 700, 701, 702, 703, 704, 
	705, 706, 707, 717, 719, 722, 724, 726, 
	728, 730, 732, 734, 736, 738, 740, 742, 
	744, 746, 748, 750, 752, 754, 756, 758, 
	760, 762, 764, 766, 768, 770, 772, 774, 
	776, 778, 780, 782, 784, 786, 788, 790, 
	792, 794, 796, 798, 800, 803, 805, 807, 
	809, 811, 813, 815, 817, 819, 821, 822, 
	823
];

var _lexer_trans_keys = [
	-61, 10, 32, 34, 35, 37, 42, 64, 
	65, 68, 69, 70, 71, 79, 83, 86, 
	124, 239, 9, 13, -106, 114, 122, 110, 
	101, 107, 108, 101, 114, 58, 10, 10, 
	-61, 10, 32, 35, 124, 9, 13, -106, 
	10, 10, 122, 10, 101, 10, 108, 10, 
	108, 10, 105, 10, 107, 10, 58, -61, 
	10, 32, 34, 35, 37, 42, 64, 65, 
	68, 69, 70, 71, 79, 83, 86, 124, 
	9, 13, -61, 10, 32, 34, 35, 37, 
	42, 64, 65, 68, 69, 70, 71, 79, 
	83, 86, 124, 9, 13, 34, 34, 10, 
	13, 10, 13, 10, 32, 34, 9, 13, 
	10, 32, 34, 9, 13, 10, 32, 34, 
	9, 13, 10, 32, 34, 9, 13, 10, 
	32, 9, 13, 10, 32, 9, 13, 10, 
	13, 10, 95, 70, 69, 65, 84, 85, 
	82, 69, 95, 69, 78, 68, 95, 37, 
	32, 10, 13, 10, 13, 13, 32, 64, 
	9, 10, 9, 10, 13, 32, 64, 11, 
	12, 10, 32, 64, 9, 13, 109, 97, 
	105, 121, 101, 108, 105, 109, 32, 107, 
	105, -60, -97, 101, 114, 97, 107, 97, 
	116, 101, -61, -89, 109, 105, -59, -97, 
	58, 10, 10, -61, 10, 32, 35, 37, 
	42, 64, 65, 68, 69, 70, 79, 83, 
	86, 9, 13, -106, 10, 10, 122, 10, 
	101, 10, 108, 10, 108, 10, 105, 10, 
	107, 10, 58, 10, 95, 10, 70, 10, 
	69, 10, 65, 10, 84, 10, 85, 10, 
	82, 10, 69, 10, 95, 10, 69, 10, 
	78, 10, 68, 10, 95, 10, 37, 10, 
	32, 10, 109, 10, 97, 10, 105, 10, 
	121, 10, 101, 10, 108, 10, 105, 10, 
	109, 10, 32, 10, 107, 10, 105, -60, 
	10, -97, 10, 10, 101, 10, 114, 10, 
	97, 10, 107, 10, 97, 10, 116, 10, 
	32, 10, 122, 10, 97, 10, 109, 10, 
	97, 10, 110, 10, 101, 10, 110, 10, 
	97, 10, 114, 10, 121, 10, 111, 10, 
	32, 58, 10, 116, 10, 97, 10, 115, 
	10, 108, 10, 97, -60, 10, -97, 10, 
	-60, 10, -79, 10, 10, 101, 32, 122, 
	97, 109, 97, 110, 101, 110, 97, 114, 
	121, 111, 32, 58, 116, 97, 115, 108, 
	97, -60, -97, -60, -79, 58, 10, 10, 
	-61, 10, 32, 35, 37, 42, 64, 65, 
	68, 69, 70, 79, 83, 86, 9, 13, 
	-106, 10, 10, 122, 10, 101, 10, 108, 
	10, 108, 10, 105, 10, 107, 10, 58, 
	10, 95, 10, 70, 10, 69, 10, 65, 
	10, 84, 10, 85, 10, 82, 10, 69, 
	10, 95, 10, 69, 10, 78, 10, 68, 
	10, 95, 10, 37, 10, 32, 10, 109, 
	10, 97, 10, 105, 10, 121, 10, 101, 
	10, 108, 10, 105, 10, 109, 10, 32, 
	10, 107, 10, 105, -60, 10, -97, 10, 
	10, 101, 10, 114, 10, 97, 10, 107, 
	10, 97, 10, 116, 10, 32, 10, 122, 
	10, 97, 10, 109, 10, 97, 10, 110, 
	10, 101, 10, 110, 10, 97, 10, 114, 
	10, 121, 10, 111, 10, 101, 10, 10, 
	-61, 10, 32, 35, 37, 42, 64, 65, 
	68, 69, 70, 71, 79, 83, 86, 9, 
	13, -106, 10, 10, 122, 10, 101, 10, 
	108, 10, 108, 10, 105, 10, 107, 10, 
	58, 10, 95, 10, 70, 10, 69, 10, 
	65, 10, 84, 10, 85, 10, 82, 10, 
	69, 10, 95, 10, 69, 10, 78, 10, 
	68, 10, 95, 10, 37, 10, 32, 10, 
	109, 10, 97, 10, 105, 10, 121, 10, 
	101, 10, 108, 10, 105, 10, 109, 10, 
	32, 10, 107, 10, 105, -60, 10, -97, 
	10, 10, 101, 10, 114, 10, 97, 10, 
	107, 10, 97, 10, 116, 10, 101, -61, 
	10, -89, 10, 10, 109, 10, 105, -59, 
	10, -97, 10, 10, 32, 10, 122, 10, 
	97, 10, 109, 10, 97, 10, 110, 10, 
	101, 10, 110, 10, 97, 10, 114, 10, 
	121, 10, 111, 10, 32, 58, 10, 116, 
	10, 97, 10, 115, 10, 108, 10, 97, 
	-60, 10, -97, 10, -60, 10, -79, 10, 
	10, 101, 101, 32, 124, 9, 13, 10, 
	32, 92, 124, 9, 13, 10, 92, 124, 
	10, 92, 10, 32, 92, 124, 9, 13, 
	-61, 10, 32, 34, 35, 37, 42, 64, 
	65, 68, 69, 70, 71, 79, 83, 86, 
	124, 9, 13, 101, 108, 108, 105, 107, 
	58, 10, 10, -61, 10, 32, 35, 37, 
	64, 71, 83, 9, 13, -106, 10, 10, 
	114, 122, 10, 110, 10, 101, 10, 107, 
	10, 108, 10, 101, 10, 114, 10, 58, 
	10, 101, 10, 108, 10, 108, 10, 105, 
	10, 107, 10, 95, 10, 70, 10, 69, 
	10, 65, 10, 84, 10, 85, 10, 82, 
	10, 69, 10, 95, 10, 69, 10, 78, 
	10, 68, 10, 95, 10, 37, 10, 101, 
	-61, 10, -89, 10, 10, 109, 10, 105, 
	-59, 10, -97, 10, 10, 101, 10, 110, 
	10, 97, 10, 114, 10, 121, 10, 111, 
	10, 32, 58, 10, 116, 10, 97, 10, 
	115, 10, 108, 10, 97, -60, 10, -97, 
	10, -60, 10, -79, 10, 187, 191, 0
];

var _lexer_single_lengths = [
	0, 18, 1, 2, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 5, 2, 2, 
	2, 2, 2, 2, 2, 2, 17, 17, 
	1, 1, 2, 2, 3, 3, 3, 3, 
	2, 2, 2, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 2, 2, 3, 5, 3, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 14, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 3, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 2, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	14, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	1, 1, 15, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	3, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 1, 2, 4, 3, 2, 
	4, 17, 1, 1, 1, 1, 1, 1, 
	1, 1, 8, 2, 3, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 3, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 1, 1, 
	0
];

var _lexer_range_lengths = [
	0, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 1, 
	0, 0, 0, 0, 1, 1, 1, 1, 
	1, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 1, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 1, 0, 0, 
	1, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0
];

var _lexer_index_offsets = [
	0, 0, 20, 22, 25, 27, 29, 31, 
	33, 35, 37, 39, 41, 43, 50, 53, 
	56, 59, 62, 65, 68, 71, 74, 93, 
	112, 114, 116, 119, 122, 127, 132, 137, 
	142, 146, 150, 153, 155, 157, 159, 161, 
	163, 165, 167, 169, 171, 173, 175, 177, 
	179, 181, 183, 185, 188, 191, 196, 203, 
	208, 210, 212, 214, 216, 218, 220, 222, 
	224, 226, 228, 230, 232, 234, 236, 238, 
	240, 242, 244, 246, 248, 250, 252, 254, 
	256, 258, 260, 262, 264, 266, 282, 285, 
	288, 291, 294, 297, 300, 303, 306, 309, 
	312, 315, 318, 321, 324, 327, 330, 333, 
	336, 339, 342, 345, 348, 351, 354, 357, 
	360, 363, 366, 369, 372, 375, 378, 381, 
	384, 387, 390, 393, 396, 399, 402, 405, 
	408, 411, 414, 417, 420, 423, 426, 429, 
	432, 435, 438, 441, 444, 448, 451, 454, 
	457, 460, 463, 466, 469, 472, 475, 478, 
	480, 482, 484, 486, 488, 490, 492, 494, 
	496, 498, 500, 502, 505, 507, 509, 511, 
	513, 515, 517, 519, 521, 523, 525, 527, 
	529, 545, 548, 551, 554, 557, 560, 563, 
	566, 569, 572, 575, 578, 581, 584, 587, 
	590, 593, 596, 599, 602, 605, 608, 611, 
	614, 617, 620, 623, 626, 629, 632, 635, 
	638, 641, 644, 647, 650, 653, 656, 659, 
	662, 665, 668, 671, 674, 677, 680, 683, 
	686, 689, 692, 695, 698, 701, 704, 707, 
	710, 712, 714, 731, 734, 737, 740, 743, 
	746, 749, 752, 755, 758, 761, 764, 767, 
	770, 773, 776, 779, 782, 785, 788, 791, 
	794, 797, 800, 803, 806, 809, 812, 815, 
	818, 821, 824, 827, 830, 833, 836, 839, 
	842, 845, 848, 851, 854, 857, 860, 863, 
	866, 869, 872, 875, 878, 881, 884, 887, 
	890, 893, 896, 899, 902, 905, 908, 911, 
	914, 918, 921, 924, 927, 930, 933, 936, 
	939, 942, 945, 948, 950, 954, 960, 964, 
	967, 973, 992, 994, 996, 998, 1000, 1002, 
	1004, 1006, 1008, 1018, 1021, 1025, 1028, 1031, 
	1034, 1037, 1040, 1043, 1046, 1049, 1052, 1055, 
	1058, 1061, 1064, 1067, 1070, 1073, 1076, 1079, 
	1082, 1085, 1088, 1091, 1094, 1097, 1100, 1103, 
	1106, 1109, 1112, 1115, 1118, 1121, 1124, 1127, 
	1130, 1133, 1136, 1139, 1142, 1146, 1149, 1152, 
	1155, 1158, 1161, 1164, 1167, 1170, 1173, 1175, 
	1177
];

var _lexer_indicies = [
	1, 3, 2, 4, 5, 6, 7, 8, 
	9, 10, 11, 12, 13, 14, 15, 16, 
	17, 18, 2, 0, 19, 0, 20, 21, 
	0, 22, 0, 23, 0, 24, 0, 25, 
	0, 26, 0, 27, 0, 28, 0, 30, 
	29, 32, 31, 33, 32, 34, 35, 35, 
	34, 31, 36, 32, 31, 32, 37, 31, 
	32, 38, 31, 32, 39, 31, 32, 40, 
	31, 32, 41, 31, 32, 42, 31, 32, 
	43, 31, 44, 46, 45, 47, 48, 49, 
	50, 51, 52, 53, 54, 55, 56, 57, 
	58, 59, 60, 45, 0, 1, 3, 2, 
	4, 5, 6, 7, 8, 9, 10, 11, 
	12, 13, 14, 15, 16, 17, 2, 0, 
	61, 0, 62, 0, 64, 65, 63, 67, 
	68, 66, 71, 70, 72, 70, 69, 75, 
	74, 76, 74, 73, 75, 74, 77, 74, 
	73, 75, 74, 78, 74, 73, 80, 79, 
	79, 0, 3, 81, 81, 0, 83, 84, 
	82, 3, 0, 85, 0, 86, 0, 87, 
	0, 88, 0, 89, 0, 90, 0, 91, 
	0, 92, 0, 93, 0, 94, 0, 95, 
	0, 96, 0, 97, 0, 98, 0, 99, 
	0, 101, 102, 100, 104, 105, 103, 0, 
	0, 0, 0, 106, 107, 108, 107, 107, 
	110, 109, 106, 3, 111, 8, 111, 0, 
	112, 0, 113, 0, 114, 0, 115, 0, 
	116, 0, 117, 0, 118, 0, 119, 0, 
	120, 0, 121, 0, 113, 0, 122, 0, 
	123, 0, 124, 0, 119, 0, 125, 0, 
	126, 0, 127, 0, 113, 0, 128, 0, 
	129, 0, 130, 0, 131, 0, 132, 0, 
	133, 0, 134, 0, 135, 0, 137, 136, 
	139, 138, 140, 139, 141, 142, 143, 144, 
	142, 145, 146, 147, 148, 149, 150, 151, 
	141, 138, 152, 139, 138, 139, 153, 138, 
	139, 154, 138, 139, 155, 138, 139, 156, 
	138, 139, 157, 138, 139, 158, 138, 139, 
	159, 138, 139, 160, 138, 139, 161, 138, 
	139, 162, 138, 139, 163, 138, 139, 164, 
	138, 139, 165, 138, 139, 166, 138, 139, 
	167, 138, 139, 168, 138, 139, 169, 138, 
	139, 170, 138, 139, 171, 138, 139, 172, 
	138, 139, 173, 138, 139, 159, 138, 139, 
	174, 138, 139, 175, 138, 139, 176, 138, 
	139, 177, 138, 139, 178, 138, 139, 179, 
	138, 139, 180, 138, 139, 181, 138, 139, 
	182, 138, 139, 183, 138, 139, 175, 138, 
	184, 139, 138, 185, 139, 138, 139, 186, 
	138, 139, 181, 138, 139, 187, 138, 139, 
	188, 138, 139, 189, 138, 139, 175, 138, 
	139, 190, 138, 139, 191, 138, 139, 192, 
	138, 139, 193, 138, 139, 194, 138, 139, 
	175, 138, 139, 195, 138, 139, 196, 138, 
	139, 197, 138, 139, 198, 138, 139, 199, 
	138, 139, 200, 138, 139, 201, 159, 138, 
	139, 202, 138, 139, 203, 138, 139, 204, 
	138, 139, 205, 138, 139, 206, 138, 207, 
	139, 138, 208, 139, 138, 209, 139, 138, 
	158, 139, 138, 139, 175, 138, 210, 0, 
	211, 0, 212, 0, 213, 0, 214, 0, 
	113, 0, 215, 0, 216, 0, 217, 0, 
	218, 0, 219, 0, 220, 0, 221, 222, 
	0, 223, 0, 224, 0, 225, 0, 226, 
	0, 227, 0, 228, 0, 229, 0, 230, 
	0, 231, 0, 232, 0, 234, 233, 236, 
	235, 237, 236, 238, 239, 240, 241, 239, 
	242, 243, 244, 245, 246, 247, 248, 238, 
	235, 249, 236, 235, 236, 250, 235, 236, 
	251, 235, 236, 252, 235, 236, 253, 235, 
	236, 254, 235, 236, 255, 235, 236, 256, 
	235, 236, 257, 235, 236, 258, 235, 236, 
	259, 235, 236, 260, 235, 236, 261, 235, 
	236, 262, 235, 236, 263, 235, 236, 264, 
	235, 236, 265, 235, 236, 266, 235, 236, 
	267, 235, 236, 268, 235, 236, 269, 235, 
	236, 270, 235, 236, 256, 235, 236, 271, 
	235, 236, 272, 235, 236, 273, 235, 236, 
	274, 235, 236, 275, 235, 236, 276, 235, 
	236, 277, 235, 236, 278, 235, 236, 279, 
	235, 236, 280, 235, 236, 272, 235, 281, 
	236, 235, 282, 236, 235, 236, 283, 235, 
	236, 278, 235, 236, 284, 235, 236, 285, 
	235, 236, 286, 235, 236, 272, 235, 236, 
	287, 235, 236, 288, 235, 236, 289, 235, 
	236, 290, 235, 236, 291, 235, 236, 272, 
	235, 236, 292, 235, 236, 293, 235, 236, 
	294, 235, 236, 295, 235, 236, 296, 235, 
	236, 255, 235, 236, 272, 235, 298, 297, 
	300, 299, 301, 300, 302, 303, 304, 305, 
	303, 306, 307, 308, 309, 310, 311, 312, 
	313, 302, 299, 314, 300, 299, 300, 315, 
	299, 300, 316, 299, 300, 317, 299, 300, 
	318, 299, 300, 319, 299, 300, 320, 299, 
	300, 321, 299, 300, 322, 299, 300, 323, 
	299, 300, 324, 299, 300, 325, 299, 300, 
	326, 299, 300, 327, 299, 300, 328, 299, 
	300, 329, 299, 300, 330, 299, 300, 331, 
	299, 300, 332, 299, 300, 333, 299, 300, 
	334, 299, 300, 335, 299, 300, 321, 299, 
	300, 336, 299, 300, 337, 299, 300, 338, 
	299, 300, 339, 299, 300, 340, 299, 300, 
	341, 299, 300, 342, 299, 300, 343, 299, 
	300, 344, 299, 300, 345, 299, 300, 337, 
	299, 346, 300, 299, 347, 300, 299, 300, 
	348, 299, 300, 343, 299, 300, 349, 299, 
	300, 350, 299, 300, 351, 299, 300, 337, 
	299, 300, 352, 299, 353, 300, 299, 354, 
	300, 299, 300, 355, 299, 300, 356, 299, 
	357, 300, 299, 320, 300, 299, 300, 358, 
	299, 300, 359, 299, 300, 360, 299, 300, 
	361, 299, 300, 362, 299, 300, 337, 299, 
	300, 363, 299, 300, 364, 299, 300, 365, 
	299, 300, 366, 299, 300, 367, 299, 300, 
	368, 299, 300, 369, 321, 299, 300, 370, 
	299, 300, 371, 299, 300, 372, 299, 300, 
	373, 299, 300, 374, 299, 375, 300, 299, 
	376, 300, 299, 377, 300, 299, 320, 300, 
	299, 300, 337, 299, 113, 0, 378, 379, 
	378, 0, 382, 381, 383, 384, 381, 380, 
	0, 386, 387, 385, 0, 386, 385, 382, 
	388, 386, 387, 388, 385, 389, 382, 390, 
	391, 392, 393, 394, 395, 396, 397, 398, 
	399, 400, 401, 402, 403, 404, 390, 0, 
	405, 0, 406, 0, 407, 0, 408, 0, 
	409, 0, 410, 0, 412, 411, 414, 413, 
	415, 414, 416, 417, 418, 417, 419, 420, 
	416, 413, 421, 414, 413, 414, 422, 423, 
	413, 414, 424, 413, 414, 425, 413, 414, 
	426, 413, 414, 427, 413, 414, 428, 413, 
	414, 429, 413, 414, 430, 413, 414, 431, 
	413, 414, 432, 413, 414, 433, 413, 414, 
	434, 413, 414, 429, 413, 414, 435, 413, 
	414, 436, 413, 414, 437, 413, 414, 438, 
	413, 414, 439, 413, 414, 440, 413, 414, 
	441, 413, 414, 442, 413, 414, 443, 413, 
	414, 444, 413, 414, 445, 413, 414, 446, 
	413, 414, 447, 413, 414, 448, 413, 414, 
	449, 413, 450, 414, 413, 451, 414, 413, 
	414, 452, 413, 414, 453, 413, 454, 414, 
	413, 429, 414, 413, 414, 455, 413, 414, 
	456, 413, 414, 457, 413, 414, 458, 413, 
	414, 459, 413, 414, 460, 413, 414, 461, 
	430, 413, 414, 462, 413, 414, 463, 413, 
	414, 464, 413, 414, 465, 413, 414, 466, 
	413, 467, 414, 413, 468, 414, 413, 469, 
	414, 413, 429, 414, 413, 470, 0, 2, 
	0, 471, 0
];

var _lexer_trans_targs = [
	0, 2, 23, 23, 24, 34, 36, 50, 
	53, 56, 58, 67, 71, 75, 151, 157, 
	307, 308, 374, 3, 4, 314, 5, 6, 
	7, 8, 9, 10, 11, 12, 13, 12, 
	13, 14, 13, 23, 15, 16, 17, 18, 
	19, 20, 21, 22, 2, 23, 23, 24, 
	34, 36, 50, 53, 56, 58, 67, 71, 
	75, 151, 157, 307, 308, 25, 26, 27, 
	28, 27, 27, 28, 27, 29, 29, 29, 
	30, 29, 29, 29, 30, 31, 32, 33, 
	23, 33, 34, 23, 35, 37, 38, 39, 
	40, 41, 42, 43, 44, 45, 46, 47, 
	48, 49, 376, 51, 52, 23, 35, 52, 
	23, 35, 54, 55, 23, 54, 53, 55, 
	57, 50, 59, 60, 61, 62, 63, 64, 
	65, 66, 68, 69, 70, 72, 73, 74, 
	76, 77, 78, 79, 80, 81, 82, 83, 
	84, 85, 84, 85, 86, 85, 23, 94, 
	108, 109, 111, 120, 124, 128, 134, 150, 
	87, 88, 89, 90, 91, 92, 93, 22, 
	95, 96, 97, 98, 99, 100, 101, 102, 
	103, 104, 105, 106, 107, 23, 110, 108, 
	112, 113, 114, 115, 116, 117, 118, 119, 
	121, 122, 123, 125, 126, 127, 129, 130, 
	131, 132, 133, 135, 136, 137, 138, 139, 
	140, 141, 142, 143, 144, 145, 146, 147, 
	148, 149, 152, 153, 154, 155, 156, 158, 
	159, 160, 161, 162, 163, 164, 232, 165, 
	166, 167, 168, 169, 170, 171, 172, 173, 
	174, 175, 176, 175, 176, 177, 176, 23, 
	185, 199, 200, 202, 211, 215, 219, 225, 
	231, 178, 179, 180, 181, 182, 183, 184, 
	22, 186, 187, 188, 189, 190, 191, 192, 
	193, 194, 195, 196, 197, 198, 23, 201, 
	199, 203, 204, 205, 206, 207, 208, 209, 
	210, 212, 213, 214, 216, 217, 218, 220, 
	221, 222, 223, 224, 226, 227, 228, 229, 
	230, 233, 234, 233, 234, 235, 234, 23, 
	243, 257, 258, 260, 269, 273, 277, 284, 
	290, 306, 236, 237, 238, 239, 240, 241, 
	242, 22, 244, 245, 246, 247, 248, 249, 
	250, 251, 252, 253, 254, 255, 256, 23, 
	259, 257, 261, 262, 263, 264, 265, 266, 
	267, 268, 270, 271, 272, 274, 275, 276, 
	278, 279, 280, 281, 282, 283, 285, 286, 
	287, 288, 289, 291, 292, 293, 294, 295, 
	296, 297, 298, 299, 300, 301, 302, 303, 
	304, 305, 308, 309, 310, 312, 313, 311, 
	309, 310, 311, 309, 312, 2, 313, 24, 
	34, 36, 50, 53, 56, 58, 67, 71, 
	75, 151, 157, 307, 308, 315, 316, 317, 
	318, 319, 320, 321, 322, 321, 322, 323, 
	322, 23, 337, 351, 358, 324, 325, 332, 
	326, 327, 328, 329, 330, 331, 22, 333, 
	334, 335, 336, 338, 339, 340, 341, 342, 
	343, 344, 345, 346, 347, 348, 349, 350, 
	23, 352, 353, 354, 355, 356, 357, 359, 
	360, 361, 362, 363, 364, 365, 366, 367, 
	368, 369, 370, 371, 372, 373, 375, 0
];

var _lexer_trans_actions = [
	43, 29, 0, 54, 3, 1, 0, 29, 
	1, 29, 29, 29, 29, 29, 29, 29, 
	29, 35, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 57, 144, 0, 
	54, 84, 0, 81, 0, 0, 0, 0, 
	0, 0, 0, 21, 63, 31, 130, 60, 
	57, 31, 63, 57, 63, 63, 63, 63, 
	63, 63, 63, 63, 66, 0, 0, 7, 
	139, 48, 0, 102, 9, 5, 45, 134, 
	45, 0, 33, 122, 33, 33, 0, 11, 
	106, 0, 0, 114, 25, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 57, 149, 126, 0, 
	110, 23, 0, 27, 118, 27, 51, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	57, 144, 0, 54, 84, 0, 72, 33, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	0, 0, 0, 0, 0, 0, 0, 15, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 15, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 57, 144, 0, 54, 84, 0, 78, 
	33, 84, 84, 84, 84, 84, 84, 84, 
	84, 0, 0, 0, 0, 0, 0, 0, 
	19, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 19, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 57, 144, 0, 54, 84, 0, 75, 
	33, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 0, 0, 0, 0, 0, 0, 
	0, 17, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 17, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 37, 37, 54, 37, 
	87, 0, 0, 39, 0, 96, 0, 93, 
	90, 41, 96, 90, 96, 96, 96, 96, 
	96, 96, 96, 96, 99, 0, 0, 0, 
	0, 0, 0, 57, 144, 0, 54, 84, 
	0, 69, 33, 84, 84, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 13, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	13, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0
];

var _lexer_eof_actions = [
	0, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43
];

var lexer_start = 1;
var lexer_first_final = 376;
var lexer_error = 0;

var lexer_en_main = 1;


/* line 129 "ragel/i18n/tr.js.rl" */

/* line 130 "ragel/i18n/tr.js.rl" */

/* line 131 "ragel/i18n/tr.js.rl" */

/* line 132 "ragel/i18n/tr.js.rl" */

var Lexer = function(listener) {
  // Check that listener has the required functions
  var events = ['comment', 'tag', 'feature', 'background', 'scenario', 'scenario_outline', 'examples', 'step', 'doc_string', 'row', 'eof'];
  for(var i=0, len=events.length; i<len; i++) {
    var event = events[i];
    if(typeof listener[event] != 'function') {
      throw new Error("Error. No " + event + " function exists on " + JSON.stringify(listener));
    }
  }
  this.listener = listener;
};

Lexer.prototype.scan = function(data) {
  var ending = "\n%_FEATURE_END_%";
  if(typeof data == 'string') {
    data = this.stringToBytes(data + ending);
  } else if(typeof Buffer != 'undefined' && Buffer.isBuffer(data)) {
    // Node.js
    var buf = new Buffer(data.length + ending.length);
    data.copy(buf, 0, 0);
    new Buffer(ending).copy(buf, data.length, 0);
    data = buf;
  }
  var eof = pe = data.length;
  var p = 0;

  this.line_number = 1;
  this.last_newline = 0;
  var signedCharValue=function(v){return v > 127 ? v-256 : v; };

  
/* line 717 "js/lib/gherkin/lexer/tr.js" */
{
	  this.cs = lexer_start;
} /* JSCodeGen::writeInit */

/* line 164 "ragel/i18n/tr.js.rl" */
  
/* line 724 "js/lib/gherkin/lexer/tr.js" */
{
	var _klen, _trans, _keys, _ps, _widec, _acts, _nacts;
	var _goto_level, _resume, _eof_trans, _again, _test_eof;
	var _out;
	_klen = _trans = _keys = _acts = _nacts = null;
	_goto_level = 0;
	_resume = 10;
	_eof_trans = 15;
	_again = 20;
	_test_eof = 30;
	_out = 40;
	while (true) {
	_trigger_goto = false;
	if (_goto_level <= 0) {
	if (p == pe) {
		_goto_level = _test_eof;
		continue;
	}
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	}
	if (_goto_level <= _resume) {
	_keys = _lexer_key_offsets[ this.cs];
	_trans = _lexer_index_offsets[ this.cs];
	_klen = _lexer_single_lengths[ this.cs];
	_break_match = false;
	
	do {
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + _klen - 1;

	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + ( (_upper - _lower) >> 1 );

	        if (( signedCharValue(data[p])) < _lexer_trans_keys[_mid]) {
	           _upper = _mid - 1;
	        } else if (( signedCharValue(data[p])) > _lexer_trans_keys[_mid]) {
	           _lower = _mid + 1;
	        } else {
	           _trans += (_mid - _keys);
	           _break_match = true;
	           break;
	        };
	     } /* while */
	     if (_break_match) { break; }
	     _keys += _klen;
	     _trans += _klen;
	  }
	  _klen = _lexer_range_lengths[ this.cs];
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + (_klen << 1) - 2;
	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + (((_upper-_lower) >> 1) & ~1);
	        if (( signedCharValue(data[p])) < _lexer_trans_keys[_mid]) {
	          _upper = _mid - 2;
	         } else if (( signedCharValue(data[p])) > _lexer_trans_keys[_mid+1]) {
	          _lower = _mid + 2;
	        } else {
	          _trans += ((_mid - _keys) >> 1);
	          _break_match = true;
	          break;
	        }
	     } /* while */
	     if (_break_match) { break; }
	     _trans += _klen
	  }
	} while (false);
	_trans = _lexer_indicies[_trans];
	 this.cs = _lexer_trans_targs[_trans];
	if (_lexer_trans_actions[_trans] != 0) {
		_acts = _lexer_trans_actions[_trans];
		_nacts = _lexer_actions[_acts];
		_acts += 1;
		while (_nacts > 0) {
			_nacts -= 1;
			_acts += 1;
			switch (_lexer_actions[_acts - 1]) {
case 0:
/* line 6 "ragel/i18n/tr.js.rl" */

    this.content_start = p;
    this.current_line = this.line_number;
    this.start_col = p - this.last_newline - (this.keyword+':').length;
  		break;
case 1:
/* line 12 "ragel/i18n/tr.js.rl" */

    this.current_line = this.line_number;
    this.start_col = p - this.last_newline;
  		break;
case 2:
/* line 17 "ragel/i18n/tr.js.rl" */

    this.content_start = p;
  		break;
case 3:
/* line 21 "ragel/i18n/tr.js.rl" */

    this.docstring_content_type_start = p;
  		break;
case 4:
/* line 25 "ragel/i18n/tr.js.rl" */

    this.docstring_content_type_end = p;
  		break;
case 5:
/* line 29 "ragel/i18n/tr.js.rl" */

    var con = this.unindent(
      this.start_col, 
      this.bytesToString(data.slice(this.content_start, this.next_keyword_start-1)).replace(/(\r?\n)?([\t ])*$/, '').replace(/\\\"\\\"\\\"/mg, '"""')
    );
    var con_type = this.bytesToString(data.slice(this.docstring_content_type_start, this.docstring_content_type_end)).trim();
    this.listener.doc_string(con_type, con, this.current_line); 
  		break;
case 6:
/* line 38 "ragel/i18n/tr.js.rl" */

    p = this.store_keyword_content('feature', data, p, eof);
  		break;
case 7:
/* line 42 "ragel/i18n/tr.js.rl" */

    p = this.store_keyword_content('background', data, p, eof);
  		break;
case 8:
/* line 46 "ragel/i18n/tr.js.rl" */

    p = this.store_keyword_content('scenario', data, p, eof);
  		break;
case 9:
/* line 50 "ragel/i18n/tr.js.rl" */

    p = this.store_keyword_content('scenario_outline', data, p, eof);
  		break;
case 10:
/* line 54 "ragel/i18n/tr.js.rl" */

    p = this.store_keyword_content('examples', data, p, eof);
  		break;
case 11:
/* line 58 "ragel/i18n/tr.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.step(this.keyword, con, this.current_line);
  		break;
case 12:
/* line 63 "ragel/i18n/tr.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.comment(con, this.line_number);
    this.keyword_start = null;
  		break;
case 13:
/* line 69 "ragel/i18n/tr.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.tag(con, this.line_number);
    this.keyword_start = null;
  		break;
case 14:
/* line 75 "ragel/i18n/tr.js.rl" */

    this.line_number++;
  		break;
case 15:
/* line 79 "ragel/i18n/tr.js.rl" */

    this.last_newline = p + 1;
  		break;
case 16:
/* line 83 "ragel/i18n/tr.js.rl" */

    this.keyword_start = this.keyword_start || p;
  		break;
case 17:
/* line 87 "ragel/i18n/tr.js.rl" */

    this.keyword = this.bytesToString(data.slice(this.keyword_start, p)).replace(/:$/, '');
    this.keyword_start = null;
  		break;
case 18:
/* line 92 "ragel/i18n/tr.js.rl" */

    this.next_keyword_start = p;
  		break;
case 19:
/* line 96 "ragel/i18n/tr.js.rl" */

    p = p - 1;
    current_row = [];
    this.current_line = this.line_number;
  		break;
case 20:
/* line 102 "ragel/i18n/tr.js.rl" */

    this.content_start = p;
  		break;
case 21:
/* line 106 "ragel/i18n/tr.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    current_row.push(con.replace(/\\\|/, "|").replace(/\\n/, "\n").replace(/\\\\/, "\\"));
  		break;
case 22:
/* line 111 "ragel/i18n/tr.js.rl" */

    this.listener.row(current_row, this.current_line);
  		break;
case 23:
/* line 115 "ragel/i18n/tr.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw new Error("Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.");
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 951 "js/lib/gherkin/lexer/tr.js" */
			} /* action switch */
		}
	}
	if (_trigger_goto) {
		continue;
	}
	}
	if (_goto_level <= _again) {
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	p += 1;
	if (p != pe) {
		_goto_level = _resume;
		continue;
	}
	}
	if (_goto_level <= _test_eof) {
	if (p == eof) {
	__acts = _lexer_eof_actions[ this.cs];
	__nacts =  _lexer_actions[__acts];
	__acts += 1;
	while (__nacts > 0) {
		__nacts -= 1;
		__acts += 1;
		switch (_lexer_actions[__acts - 1]) {
case 23:
/* line 115 "ragel/i18n/tr.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw new Error("Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.");
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 990 "js/lib/gherkin/lexer/tr.js" */
		} /* eof action switch */
	}
	if (_trigger_goto) {
		continue;
	}
}
	}
	if (_goto_level <= _out) {
		break;
	}
	}
	}

/* line 165 "ragel/i18n/tr.js.rl" */
};


/*
 * Decode utf-8 byte sequence to string.
 */
var decodeUtf8 = function(bytes) {
  var result = "";
  var i = 0;
  var wc;
  var c;

  while (i < bytes.length) {
    /* parse as UTF-8 lead byte */
    wc = bytes[i++];
    if (wc < 0x80) {
      count = 0;
    } else if (wc < 0xC2 || wc >= 0xF8) {
      throw new Error("input is not a valid UTF-8 lead octet");
    } else if (wc < 0xE0) {
      count = 1;
      wc = (wc & 0x1F) << 6;
    } else if (wc < 0xF0) {
      count = 2;
      wc = (wc & 0x0F) << 12;
    } else /* wc < 0xF8 */ {
      count = 3;
      wc = (wc & 0x07) << 18;
    }

    /* parse trail bytes, if any */
    while (count) {
      if (!(i < bytes.length)) {
        throw new Error("short read");
      }
      if ((c = bytes[i++] ^ 0x80) > 0x3F) {
        throw new Error("input is not a valid UTF-8 trail octet");
      }
      wc |= c << (6 * --count);
      if (wc < (1 << (5 * count + 6))) {
        throw new Error("invalid non-minimal encoded input");
      }
    }

    /* handle conversion to UTF-16 if needed */
    if (wc > 0xFFFF) {
      wc -= 0x10000;
      result += String.fromCharCode(0xD800 + (wc >> 10));
      wc = 0xDC00 + (wc & 0x3FF);
    }
    result += String.fromCharCode(wc);
  }

  return result;
};

/*
 * Encode string to an array of bytes using utf8 encoding.
 *
 * Javascript internally stores character data as utf16 (like java).
 * String.charCodeAt() does *not* produce unicode points, but simply
 * reflects this internal representation. Thus, it is necessary
 * to first decode the utf-16 representation before encoding to
 * utf-8.
 */
var encodeUtf8 = function(string) {
  var bytes = [];
  var i = 0;
  var j = 0;
  var wc;

  while (i < string.length) {
    wc = string.charCodeAt(i++);
    if (wc >= 0xD800 && wc <= 0xDBFF && i < string.length && string.charCodeAt(i) >= 0xDC00 && string.charCodeAt(i) <= 0xDFFF) {
      /* decode UTF-16 */
      wc = 0x10000 + ((wc & 0x3FF) << 10) + (string.charCodeAt(i++) & 0x3FF);
    }

    /* emit lead byte */
    if (wc < 0x80) {
      bytes[j++] = wc;
      count = 0;
    } else if (wc < 0x800) {
      bytes[j++] = 0xC0 | (wc >> 6);
      count = 1;
    } else if (wc < 0x10000) {
      bytes[j++] = 0xE0 | (wc >> 12);
      count = 2;
    } else {
      /* SMP: 21-bit Unicode */
      bytes[j++] = 0xF0 | (wc >> 18);
      count = 3;
    }

    /* emit trail bytes, if any */
    while (count) {
      bytes[j++] = 0x80 | ((wc >> (6 * --count)) & 0x3F);
    }
  }

  return bytes;

};

Lexer.prototype.bytesToString = function(bytes) {
  if(typeof bytes.write == 'function') {
    // Node.js
    return bytes.toString('utf-8');
  }
  return decodeUtf8(bytes);
};

Lexer.prototype.stringToBytes = function(string) {
  return encodeUtf8(string);
};

Lexer.prototype.unindent = function(startcol, text) {
  startcol = startcol || 0;
  return text.replace(new RegExp('^[\t ]{0,' + startcol + '}', 'gm'), ''); 
};

Lexer.prototype.store_keyword_content = function(event, data, p, eof) {
  var end_point = (!this.next_keyword_start || (p == eof)) ? p : this.next_keyword_start;
  var content = this.unindent(this.start_col + 2, this.bytesToString(data.slice(this.content_start, end_point))).replace(/\s+$/,"");
  var content_lines = content.split("\n")
  var name = content_lines.shift() || "";
  name = name.trim();
  var description = content_lines.join("\n");
  this.listener[event](this.keyword, name, description, this.current_line);
  var nks = this.next_keyword_start;
  this.next_keyword_start = null;
  return nks ? nks - 1 : p;
};

Lexer.prototype.current_line_content = function(data, p) {
  var rest = Array.prototype.slice.call(data,this.last_newline, -1);
  var end = rest.indexOf(10) || -1;
  return this.bytesToString(rest.slice(0, end)).trim();
};

// Node.js export
if(typeof module !== 'undefined') {
  module.exports = Lexer;
}
// Require.js export
if (typeof define !== 'undefined') {
  if(define.amd) {
    define('gherkin/lexer/tr', [], function() {
      return Lexer;
    });
  } else {
    define('gherkin/lexer/tr', function(require, exports, module) {
      exports.Lexer = Lexer;
    });
  }
}

})();

}).call(this,require("buffer").Buffer)

},{"buffer":69}],235:[function(require,module,exports){
(function (Buffer){

/* line 1 "ragel/i18n/tt.js.rl" */
;(function() {


/* line 126 "ragel/i18n/tt.js.rl" */



/* line 11 "js/lib/gherkin/lexer/tt.js" */
var _lexer_actions = [
	0, 1, 0, 1, 1, 1, 2, 1, 
	3, 1, 4, 1, 5, 1, 6, 1, 
	7, 1, 8, 1, 9, 1, 10, 1, 
	11, 1, 12, 1, 13, 1, 16, 1, 
	17, 1, 18, 1, 19, 1, 20, 1, 
	21, 1, 22, 1, 23, 2, 2, 18, 
	2, 3, 4, 2, 13, 0, 2, 14, 
	15, 2, 17, 0, 2, 17, 1, 2, 
	17, 16, 2, 17, 19, 2, 18, 6, 
	2, 18, 7, 2, 18, 8, 2, 18, 
	9, 2, 18, 10, 2, 18, 16, 2, 
	20, 21, 2, 22, 0, 2, 22, 1, 
	2, 22, 16, 2, 22, 19, 3, 4, 
	14, 15, 3, 5, 14, 15, 3, 11, 
	14, 15, 3, 12, 14, 15, 3, 13, 
	14, 15, 3, 14, 15, 18, 3, 17, 
	0, 11, 3, 17, 14, 15, 4, 2, 
	14, 15, 18, 4, 3, 4, 14, 15, 
	4, 17, 0, 14, 15, 5, 17, 0, 
	11, 14, 15
];

var _lexer_key_offsets = [
	0, 0, 14, 20, 21, 22, 23, 25, 
	27, 40, 42, 44, 45, 46, 47, 48, 
	49, 50, 51, 52, 53, 54, 55, 56, 
	57, 58, 59, 60, 61, 62, 63, 64, 
	65, 66, 67, 68, 69, 70, 71, 72, 
	81, 85, 87, 89, 91, 93, 95, 97, 
	99, 101, 103, 116, 117, 118, 121, 122, 
	123, 124, 125, 126, 127, 128, 129, 130, 
	131, 132, 133, 134, 135, 136, 137, 139, 
	141, 146, 151, 156, 161, 165, 169, 171, 
	172, 173, 174, 175, 176, 177, 178, 179, 
	180, 181, 182, 183, 184, 185, 186, 191, 
	198, 203, 207, 213, 216, 218, 224, 237, 
	240, 242, 244, 246, 248, 250, 252, 254, 
	256, 258, 260, 262, 264, 266, 268, 270, 
	272, 274, 276, 278, 280, 282, 284, 286, 
	288, 290, 292, 294, 296, 298, 300, 302, 
	304, 306, 308, 310, 312, 314, 316, 318, 
	320, 322, 324, 327, 329, 331, 333, 335, 
	337, 339, 341, 343, 345, 347, 349, 351, 
	353, 355, 357, 359, 361, 363, 365, 367, 
	369, 371, 373, 376, 378, 380, 382, 384, 
	386, 388, 390, 392, 394, 396, 398, 400, 
	402, 404, 406, 408, 410, 412, 414, 416, 
	418, 420, 422, 424, 426, 428, 430, 432, 
	434, 436, 438, 440, 442, 444, 446, 448, 
	450, 452, 454, 456, 458, 460, 462, 464, 
	465, 466, 467, 468, 469, 470, 471, 472, 
	473, 474, 475, 476, 477, 478, 479, 480, 
	488, 490, 492, 494, 496, 498, 500, 502, 
	504, 506, 508, 510, 512, 514, 516, 518, 
	520, 522, 524, 526, 528, 530, 532, 534, 
	536, 538, 540, 542, 544, 546, 548, 550, 
	552, 554, 556, 558, 560, 562, 564, 566, 
	567, 568, 569, 570, 571, 572, 573, 574, 
	575, 576, 577, 578, 579, 580, 581, 592, 
	598, 600, 602, 604, 606, 608, 610, 612, 
	614, 616, 618, 620, 622, 624, 626, 628, 
	630, 632, 634, 636, 638, 640, 642, 644, 
	646, 648, 650, 652, 654, 656, 658, 660, 
	662, 664, 666, 668, 670, 672, 674, 676, 
	678, 680, 682, 684, 686, 688, 690, 692, 
	694, 696, 698, 700, 702, 704, 706, 709, 
	711, 713, 715, 717, 719, 721, 723, 725, 
	727, 729, 731, 733, 735, 737, 739, 741, 
	743, 745, 747, 749, 751, 753, 756, 758, 
	760, 762, 764, 766, 768, 770, 772, 774, 
	776, 778, 780, 782, 784, 786, 788, 790, 
	792, 794, 796, 798, 800, 802, 804, 806, 
	808, 812, 814, 816, 818, 820, 822, 824, 
	826, 828, 830, 832, 834, 836, 838, 840, 
	842, 844, 846, 848, 850, 852, 854, 856, 
	858, 860, 862, 864, 866, 868, 869, 870, 
	871, 872, 873, 874, 875, 876, 878, 879, 
	880, 881, 882, 883, 884, 885, 886, 887, 
	888, 889, 890, 891, 892, 893, 894, 895, 
	896, 897, 898, 899, 900, 901, 902, 903, 
	904, 905, 906, 907, 908, 909, 910, 911, 
	912, 913, 914, 915, 916, 917, 918, 919, 
	920, 921, 922, 923, 924, 926, 927, 928, 
	929, 930, 931, 932, 933, 934, 935, 936, 
	937, 938, 939, 940, 941, 942, 943, 944, 
	945, 946, 947, 948, 949, 950, 951, 962, 
	968, 970, 972, 974, 976, 978, 980, 982, 
	984, 986, 988, 990, 992, 994, 996, 998, 
	1000, 1002, 1004, 1006, 1008, 1010, 1012, 1014, 
	1016, 1018, 1020, 1022, 1024, 1026, 1028, 1030, 
	1032, 1034, 1036, 1038, 1040, 1042, 1044, 1046, 
	1048, 1050, 1052, 1054, 1056, 1058, 1060, 1062, 
	1064, 1066, 1068, 1070, 1072, 1074, 1076, 1079, 
	1081, 1083, 1085, 1087, 1089, 1091, 1093, 1095, 
	1097, 1099, 1101, 1103, 1105, 1107, 1109, 1111, 
	1113, 1115, 1117, 1119, 1121, 1123, 1125, 1127, 
	1129, 1131, 1135, 1137, 1139, 1141, 1143, 1145, 
	1147, 1149, 1151, 1153, 1155, 1157, 1159, 1161, 
	1163, 1165, 1167, 1169, 1171, 1173, 1175, 1177, 
	1179, 1181, 1183, 1185, 1187, 1189, 1191, 1192, 
	1193, 1204, 1211, 1213, 1215, 1217, 1219, 1221, 
	1223, 1225, 1227, 1229, 1231, 1233, 1235, 1237, 
	1239, 1241, 1243, 1245, 1247, 1249, 1251, 1253, 
	1255, 1257, 1259, 1261, 1263, 1265, 1267, 1269, 
	1271, 1273, 1275, 1277, 1279, 1281, 1283, 1285, 
	1287, 1289, 1291, 1293, 1295, 1297, 1299, 1301, 
	1303, 1305, 1307, 1309, 1311, 1313, 1315, 1317, 
	1319, 1321, 1323, 1325, 1327, 1329, 1331, 1333, 
	1335, 1338, 1340, 1342, 1344, 1346, 1348, 1350, 
	1352, 1354, 1356, 1358, 1360, 1362, 1364, 1366, 
	1368, 1370, 1372, 1374, 1376, 1378, 1380, 1382, 
	1385, 1387, 1389, 1391, 1393, 1395, 1397, 1399, 
	1401, 1403, 1405, 1407, 1409, 1411, 1413, 1415, 
	1417, 1419, 1421, 1423, 1425, 1427, 1429, 1431, 
	1433, 1435, 1437, 1441, 1443, 1445, 1447, 1449, 
	1451, 1453, 1455, 1457, 1459, 1461, 1463, 1465, 
	1467, 1469, 1471, 1473, 1475, 1477, 1479, 1481, 
	1483, 1485, 1487, 1489, 1491, 1493, 1495, 1497, 
	1498, 1499
];

var _lexer_trans_keys = [
	-48, -46, -45, 10, 32, 34, 35, 37, 
	42, 64, 124, 239, 9, 13, -110, -102, 
	-101, -100, -99, -95, -45, -103, 32, 10, 
	13, 10, 13, -48, -46, -45, 10, 32, 
	34, 35, 37, 42, 64, 124, 9, 13, 
	-82, -70, -48, -47, -73, -48, -75, -48, 
	-67, -47, -121, -45, -103, -48, -69, -48, 
	-75, -48, -70, -48, -69, -48, -75, -48, 
	-69, -48, -75, -48, -70, 58, 10, 10, 
	-48, -46, 10, 32, 35, 37, 64, 9, 
	13, -102, -100, -95, 10, -48, 10, -75, 
	10, -47, 10, -128, 10, -48, 10, -75, 
	10, -47, 10, -120, 10, 10, 58, -48, 
	-46, -45, 10, 32, 34, 35, 37, 42, 
	64, 124, 9, 13, -104, -48, -77, -71, 
	-68, -45, -103, -47, -128, -47, -126, -48, 
	-72, -48, -70, -48, -68, -48, -80, 34, 
	34, 10, 13, 10, 13, 10, 32, 34, 
	9, 13, 10, 32, 34, 9, 13, 10, 
	32, 34, 9, 13, 10, 32, 34, 9, 
	13, 10, 32, 9, 13, 10, 32, 9, 
	13, 10, 13, 10, 95, 70, 69, 65, 
	84, 85, 82, 69, 95, 69, 78, 68, 
	95, 37, 13, 32, 64, 9, 10, 9, 
	10, 13, 32, 64, 11, 12, 10, 32, 
	64, 9, 13, 32, 124, 9, 13, 10, 
	32, 92, 124, 9, 13, 10, 92, 124, 
	10, 92, 10, 32, 92, 124, 9, 13, 
	-48, -46, -45, 10, 32, 34, 35, 37, 
	42, 64, 124, 9, 13, -48, -45, 10, 
	-72, 10, -47, 10, -127, 10, -48, 10, 
	-80, 10, -48, 10, -69, 10, -48, 10, 
	-69, 10, -48, 10, -80, 10, -47, 10, 
	-128, 10, -87, 10, -48, 10, -68, 10, 
	-48, 10, -70, 10, -48, 10, -72, 10, 
	-48, 10, -67, 10, -48, 10, -69, 10, 
	-48, 10, -75, 10, -48, 10, -70, 10, 
	-47, 10, -122, 10, -48, 10, -75, 10, 
	-48, 10, -67, 10, -48, 10, -80, 10, 
	-47, 10, -128, 10, -48, 10, -72, 10, 
	-48, 10, -71, 10, -48, 10, 58, -67, 
	10, -47, 10, -117, 10, -46, 10, -93, 
	10, 10, 32, -47, 10, -126, 10, -45, 
	10, -87, 10, -48, 10, -73, 10, -48, 
	10, -75, 10, -48, 10, -69, 10, -48, 
	10, -75, 10, -47, 10, -120, 10, -48, 
	10, -75, 10, -82, 10, -48, -47, 10, 
	-73, 10, -48, 10, -75, 10, -48, 10, 
	-67, 10, -47, 10, -121, 10, -45, 10, 
	-103, 10, -48, 10, -69, 10, -48, 10, 
	-75, 10, -48, 10, -70, 10, -48, 10, 
	-69, 10, -48, 10, -75, 10, -128, 10, 
	-48, 10, -67, 10, -45, 10, -103, 10, 
	-48, 10, -70, 10, -48, 10, -69, 10, 
	-45, 10, -103, 10, 10, 95, 10, 70, 
	10, 69, 10, 65, 10, 84, 10, 85, 
	10, 82, 10, 69, 10, 95, 10, 69, 
	10, 78, 10, 68, 10, 95, 10, 37, 
	-128, -48, -67, -45, -103, -48, -70, -48, 
	-69, -45, -103, -47, -128, 58, 10, 10, 
	-48, -46, 10, 32, 35, 124, 9, 13, 
	-100, 10, -45, 10, -87, 10, -48, 10, 
	-68, 10, -48, 10, -70, 10, -48, 10, 
	-72, 10, -48, 10, -67, 10, -48, 10, 
	-69, 10, -48, 10, -75, 10, -48, 10, 
	-70, 10, 10, 58, -82, 10, -48, 10, 
	-73, 10, -48, 10, -75, 10, -48, 10, 
	-67, 10, -47, 10, -121, 10, -45, 10, 
	-103, 10, -48, 10, -69, 10, -48, 10, 
	-75, 10, -48, 10, -70, 10, -48, 10, 
	-69, 10, -48, 10, -75, 10, -45, -103, 
	-48, -68, -48, -75, -47, -128, -48, -75, 
	-47, -120, 58, 10, 10, -48, -46, -45, 
	10, 32, 35, 37, 42, 64, 9, 13, 
	-110, -101, -100, -99, -95, 10, -45, 10, 
	-103, 10, 10, 32, -45, 10, -103, 10, 
	-48, 10, -70, 10, -48, 10, -72, 10, 
	-48, 10, -67, 10, -45, 10, -87, 10, 
	-48, 10, -68, 10, -48, 10, -70, 10, 
	-48, 10, -72, 10, -48, 10, -67, 10, 
	-48, 10, -69, 10, -48, 10, -75, 10, 
	-48, 10, -70, 10, 10, 58, -45, 10, 
	-103, 10, -47, 10, -126, 10, -48, 10, 
	-72, 10, -46, 10, -105, 10, -45, 10, 
	-103, 10, -48, 10, -76, 10, -47, 10, 
	-122, 10, -48, 10, -75, 10, -48, 10, 
	-67, 10, -48, 10, -80, 10, -47, 10, 
	-128, 10, -48, 10, -72, 10, -48, 10, 
	-71, 10, -48, 10, 58, -67, 10, -47, 
	10, -117, 10, -46, 10, -93, 10, 10, 
	32, -47, 10, -126, 10, -45, 10, -87, 
	10, -48, 10, -73, 10, -48, 10, -75, 
	10, -48, 10, -69, 10, -48, 10, -75, 
	10, -47, 10, -120, 10, -48, 10, -75, 
	10, -82, -70, 10, -48, 10, -73, 10, 
	-48, 10, -75, 10, -48, 10, -67, 10, 
	-47, 10, -121, 10, -45, 10, -103, 10, 
	-48, 10, -69, 10, -48, 10, -75, 10, 
	-48, 10, -70, 10, -48, 10, -69, 10, 
	-48, 10, -75, 10, -45, 10, -103, 10, 
	-48, 10, -68, 10, -104, 10, -48, 10, 
	-77, -71, -68, 10, -45, 10, -103, 10, 
	-47, 10, -128, 10, -47, 10, -126, 10, 
	-48, 10, -72, 10, -48, 10, -70, 10, 
	-48, 10, -68, 10, -48, 10, -80, 10, 
	10, 95, 10, 70, 10, 69, 10, 65, 
	10, 84, 10, 85, 10, 82, 10, 69, 
	10, 95, 10, 69, 10, 78, 10, 68, 
	10, 95, 10, 37, -45, -103, -48, -70, 
	-48, -72, -48, -67, -48, -45, -72, -47, 
	-127, -48, -80, -48, -69, -48, -69, -48, 
	-80, -87, -48, -68, -48, -70, -48, -72, 
	-48, -67, -45, -103, -47, -126, -48, -72, 
	-46, -105, -45, -103, -48, -76, -47, -122, 
	-48, -75, -48, -67, -48, -80, -47, -128, 
	-48, -72, -48, -71, -48, 58, -67, -47, 
	-117, -46, -93, 32, -47, -126, -45, -87, 
	-48, -73, -48, -75, -48, -69, -48, -75, 
	-47, -120, -48, -75, 58, 10, 10, -48, 
	-46, -45, 10, 32, 35, 37, 42, 64, 
	9, 13, -110, -101, -100, -99, -95, 10, 
	-45, 10, -103, 10, 10, 32, -45, 10, 
	-103, 10, -48, 10, -70, 10, -48, 10, 
	-72, 10, -48, 10, -67, 10, -45, 10, 
	-87, 10, -48, 10, -68, 10, -48, 10, 
	-70, 10, -48, 10, -72, 10, -48, 10, 
	-67, 10, -48, 10, -69, 10, -48, 10, 
	-75, 10, -48, 10, -70, 10, 10, 58, 
	-45, 10, -103, 10, -47, 10, -126, 10, 
	-48, 10, -72, 10, -46, 10, -105, 10, 
	-45, 10, -103, 10, -48, 10, -76, 10, 
	-47, 10, -122, 10, -48, 10, -75, 10, 
	-48, 10, -67, 10, -48, 10, -80, 10, 
	-47, 10, -128, 10, -48, 10, -72, 10, 
	-48, 10, -71, 10, -82, -70, 10, -48, 
	10, -73, 10, -48, 10, -75, 10, -48, 
	10, -67, 10, -47, 10, -121, 10, -45, 
	10, -103, 10, -48, 10, -69, 10, -48, 
	10, -75, 10, -48, 10, -70, 10, -48, 
	10, -69, 10, -48, 10, -75, 10, -45, 
	10, -103, 10, -48, 10, -68, 10, -104, 
	10, -48, 10, -77, -71, -68, 10, -45, 
	10, -103, 10, -47, 10, -128, 10, -47, 
	10, -126, 10, -48, 10, -72, 10, -48, 
	10, -70, 10, -48, 10, -68, 10, -48, 
	10, -80, 10, 10, 95, 10, 70, 10, 
	69, 10, 65, 10, 84, 10, 85, 10, 
	82, 10, 69, 10, 95, 10, 69, 10, 
	78, 10, 68, 10, 95, 10, 37, 10, 
	10, -48, -46, -45, 10, 32, 35, 37, 
	42, 64, 9, 13, -110, -102, -101, -100, 
	-99, -95, 10, -45, 10, -103, 10, 10, 
	32, -48, 10, -75, 10, -47, 10, -128, 
	10, -48, 10, -75, 10, -47, 10, -120, 
	10, 10, 58, -45, 10, -103, 10, -48, 
	10, -70, 10, -48, 10, -72, 10, -48, 
	10, -67, 10, -45, 10, -87, 10, -48, 
	10, -68, 10, -48, 10, -70, 10, -48, 
	10, -72, 10, -48, 10, -67, 10, -48, 
	10, -69, 10, -48, 10, -75, 10, -48, 
	10, -70, 10, -45, 10, -103, 10, -47, 
	10, -126, 10, -48, 10, -72, 10, -46, 
	10, -105, 10, -45, 10, -103, 10, -48, 
	10, -76, 10, -47, 10, -122, 10, -48, 
	10, -75, 10, -48, 10, -67, 10, -48, 
	10, -80, 10, -47, 10, -128, 10, -48, 
	10, -72, 10, -48, 10, -71, 10, -48, 
	10, 58, -67, 10, -47, 10, -117, 10, 
	-46, 10, -93, 10, 10, 32, -47, 10, 
	-126, 10, -45, 10, -87, 10, -48, 10, 
	-73, 10, -48, 10, -75, 10, -48, 10, 
	-69, 10, -48, 10, -75, 10, -47, 10, 
	-120, 10, -48, 10, -75, 10, -82, -70, 
	10, -48, 10, -73, 10, -48, 10, -75, 
	10, -48, 10, -67, 10, -47, 10, -121, 
	10, -45, 10, -103, 10, -48, 10, -69, 
	10, -48, 10, -75, 10, -48, 10, -70, 
	10, -48, 10, -69, 10, -48, 10, -75, 
	10, -45, 10, -103, 10, -48, 10, -68, 
	10, -104, 10, -48, 10, -77, -71, -68, 
	10, -45, 10, -103, 10, -47, 10, -128, 
	10, -47, 10, -126, 10, -48, 10, -72, 
	10, -48, 10, -70, 10, -48, 10, -68, 
	10, -48, 10, -80, 10, 10, 95, 10, 
	70, 10, 69, 10, 65, 10, 84, 10, 
	85, 10, 82, 10, 69, 10, 95, 10, 
	69, 10, 78, 10, 68, 10, 95, 10, 
	37, 187, 191, 0
];

var _lexer_single_lengths = [
	0, 12, 6, 1, 1, 1, 2, 2, 
	11, 2, 2, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 7, 
	4, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 11, 1, 1, 3, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 2, 2, 
	3, 3, 3, 3, 2, 2, 2, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 3, 5, 
	3, 2, 4, 3, 2, 4, 11, 3, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 3, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 3, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 6, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 9, 6, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 3, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 3, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	4, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 1, 1, 1, 
	1, 1, 1, 1, 1, 2, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 2, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 9, 6, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 3, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 4, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 1, 1, 
	9, 7, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	3, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 3, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 4, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 1, 
	1, 0
];

var _lexer_range_lengths = [
	0, 1, 0, 0, 0, 0, 0, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 1, 1, 1, 1, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 1, 
	1, 1, 1, 0, 0, 1, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0
];

var _lexer_index_offsets = [
	0, 0, 14, 21, 23, 25, 27, 30, 
	33, 46, 49, 52, 54, 56, 58, 60, 
	62, 64, 66, 68, 70, 72, 74, 76, 
	78, 80, 82, 84, 86, 88, 90, 92, 
	94, 96, 98, 100, 102, 104, 106, 108, 
	117, 122, 125, 128, 131, 134, 137, 140, 
	143, 146, 149, 162, 164, 166, 170, 172, 
	174, 176, 178, 180, 182, 184, 186, 188, 
	190, 192, 194, 196, 198, 200, 202, 205, 
	208, 213, 218, 223, 228, 232, 236, 239, 
	241, 243, 245, 247, 249, 251, 253, 255, 
	257, 259, 261, 263, 265, 267, 269, 274, 
	281, 286, 290, 296, 300, 303, 309, 322, 
	326, 329, 332, 335, 338, 341, 344, 347, 
	350, 353, 356, 359, 362, 365, 368, 371, 
	374, 377, 380, 383, 386, 389, 392, 395, 
	398, 401, 404, 407, 410, 413, 416, 419, 
	422, 425, 428, 431, 434, 437, 440, 443, 
	446, 449, 452, 456, 459, 462, 465, 468, 
	471, 474, 477, 480, 483, 486, 489, 492, 
	495, 498, 501, 504, 507, 510, 513, 516, 
	519, 522, 525, 529, 532, 535, 538, 541, 
	544, 547, 550, 553, 556, 559, 562, 565, 
	568, 571, 574, 577, 580, 583, 586, 589, 
	592, 595, 598, 601, 604, 607, 610, 613, 
	616, 619, 622, 625, 628, 631, 634, 637, 
	640, 643, 646, 649, 652, 655, 658, 661, 
	663, 665, 667, 669, 671, 673, 675, 677, 
	679, 681, 683, 685, 687, 689, 691, 693, 
	701, 704, 707, 710, 713, 716, 719, 722, 
	725, 728, 731, 734, 737, 740, 743, 746, 
	749, 752, 755, 758, 761, 764, 767, 770, 
	773, 776, 779, 782, 785, 788, 791, 794, 
	797, 800, 803, 806, 809, 812, 815, 818, 
	820, 822, 824, 826, 828, 830, 832, 834, 
	836, 838, 840, 842, 844, 846, 848, 859, 
	866, 869, 872, 875, 878, 881, 884, 887, 
	890, 893, 896, 899, 902, 905, 908, 911, 
	914, 917, 920, 923, 926, 929, 932, 935, 
	938, 941, 944, 947, 950, 953, 956, 959, 
	962, 965, 968, 971, 974, 977, 980, 983, 
	986, 989, 992, 995, 998, 1001, 1004, 1007, 
	1010, 1013, 1016, 1019, 1022, 1025, 1028, 1032, 
	1035, 1038, 1041, 1044, 1047, 1050, 1053, 1056, 
	1059, 1062, 1065, 1068, 1071, 1074, 1077, 1080, 
	1083, 1086, 1089, 1092, 1095, 1098, 1102, 1105, 
	1108, 1111, 1114, 1117, 1120, 1123, 1126, 1129, 
	1132, 1135, 1138, 1141, 1144, 1147, 1150, 1153, 
	1156, 1159, 1162, 1165, 1168, 1171, 1174, 1177, 
	1180, 1185, 1188, 1191, 1194, 1197, 1200, 1203, 
	1206, 1209, 1212, 1215, 1218, 1221, 1224, 1227, 
	1230, 1233, 1236, 1239, 1242, 1245, 1248, 1251, 
	1254, 1257, 1260, 1263, 1266, 1269, 1271, 1273, 
	1275, 1277, 1279, 1281, 1283, 1285, 1288, 1290, 
	1292, 1294, 1296, 1298, 1300, 1302, 1304, 1306, 
	1308, 1310, 1312, 1314, 1316, 1318, 1320, 1322, 
	1324, 1326, 1328, 1330, 1332, 1334, 1336, 1338, 
	1340, 1342, 1344, 1346, 1348, 1350, 1352, 1354, 
	1356, 1358, 1360, 1362, 1364, 1366, 1368, 1370, 
	1372, 1374, 1376, 1378, 1380, 1383, 1385, 1387, 
	1389, 1391, 1393, 1395, 1397, 1399, 1401, 1403, 
	1405, 1407, 1409, 1411, 1413, 1415, 1417, 1419, 
	1421, 1423, 1425, 1427, 1429, 1431, 1433, 1444, 
	1451, 1454, 1457, 1460, 1463, 1466, 1469, 1472, 
	1475, 1478, 1481, 1484, 1487, 1490, 1493, 1496, 
	1499, 1502, 1505, 1508, 1511, 1514, 1517, 1520, 
	1523, 1526, 1529, 1532, 1535, 1538, 1541, 1544, 
	1547, 1550, 1553, 1556, 1559, 1562, 1565, 1568, 
	1571, 1574, 1577, 1580, 1583, 1586, 1589, 1592, 
	1595, 1598, 1601, 1604, 1607, 1610, 1613, 1617, 
	1620, 1623, 1626, 1629, 1632, 1635, 1638, 1641, 
	1644, 1647, 1650, 1653, 1656, 1659, 1662, 1665, 
	1668, 1671, 1674, 1677, 1680, 1683, 1686, 1689, 
	1692, 1695, 1700, 1703, 1706, 1709, 1712, 1715, 
	1718, 1721, 1724, 1727, 1730, 1733, 1736, 1739, 
	1742, 1745, 1748, 1751, 1754, 1757, 1760, 1763, 
	1766, 1769, 1772, 1775, 1778, 1781, 1784, 1786, 
	1788, 1799, 1807, 1810, 1813, 1816, 1819, 1822, 
	1825, 1828, 1831, 1834, 1837, 1840, 1843, 1846, 
	1849, 1852, 1855, 1858, 1861, 1864, 1867, 1870, 
	1873, 1876, 1879, 1882, 1885, 1888, 1891, 1894, 
	1897, 1900, 1903, 1906, 1909, 1912, 1915, 1918, 
	1921, 1924, 1927, 1930, 1933, 1936, 1939, 1942, 
	1945, 1948, 1951, 1954, 1957, 1960, 1963, 1966, 
	1969, 1972, 1975, 1978, 1981, 1984, 1987, 1990, 
	1993, 1997, 2000, 2003, 2006, 2009, 2012, 2015, 
	2018, 2021, 2024, 2027, 2030, 2033, 2036, 2039, 
	2042, 2045, 2048, 2051, 2054, 2057, 2060, 2063, 
	2067, 2070, 2073, 2076, 2079, 2082, 2085, 2088, 
	2091, 2094, 2097, 2100, 2103, 2106, 2109, 2112, 
	2115, 2118, 2121, 2124, 2127, 2130, 2133, 2136, 
	2139, 2142, 2145, 2150, 2153, 2156, 2159, 2162, 
	2165, 2168, 2171, 2174, 2177, 2180, 2183, 2186, 
	2189, 2192, 2195, 2198, 2201, 2204, 2207, 2210, 
	2213, 2216, 2219, 2222, 2225, 2228, 2231, 2234, 
	2236, 2238
];

var _lexer_indicies = [
	1, 2, 3, 5, 4, 6, 7, 8, 
	9, 10, 11, 12, 4, 0, 13, 14, 
	15, 16, 17, 18, 0, 19, 0, 20, 
	0, 21, 0, 23, 24, 22, 26, 27, 
	25, 1, 2, 3, 5, 4, 6, 7, 
	8, 9, 10, 11, 4, 0, 28, 29, 
	0, 30, 31, 0, 32, 0, 33, 0, 
	34, 0, 35, 0, 36, 0, 37, 0, 
	38, 0, 39, 0, 40, 0, 41, 0, 
	42, 0, 43, 0, 44, 0, 45, 0, 
	46, 0, 47, 0, 48, 0, 49, 0, 
	50, 0, 51, 0, 52, 0, 53, 0, 
	54, 0, 55, 0, 56, 0, 57, 0, 
	59, 58, 61, 60, 62, 63, 61, 64, 
	65, 66, 65, 64, 60, 67, 68, 69, 
	61, 60, 70, 61, 60, 71, 61, 60, 
	72, 61, 60, 73, 61, 60, 74, 61, 
	60, 75, 61, 60, 76, 61, 60, 77, 
	61, 60, 61, 78, 60, 79, 80, 81, 
	83, 82, 84, 85, 86, 87, 88, 89, 
	82, 0, 90, 0, 91, 0, 92, 93, 
	94, 0, 95, 0, 96, 0, 97, 0, 
	20, 0, 98, 0, 99, 0, 100, 0, 
	101, 0, 102, 0, 20, 0, 103, 0, 
	104, 0, 105, 0, 20, 0, 106, 0, 
	107, 0, 109, 110, 108, 112, 113, 111, 
	116, 115, 117, 115, 114, 120, 119, 121, 
	119, 118, 120, 119, 122, 119, 118, 120, 
	119, 123, 119, 118, 125, 124, 124, 0, 
	5, 126, 126, 0, 128, 129, 127, 5, 
	0, 130, 0, 131, 0, 132, 0, 133, 
	0, 134, 0, 135, 0, 136, 0, 137, 
	0, 138, 0, 139, 0, 140, 0, 141, 
	0, 142, 0, 143, 0, 0, 0, 0, 
	0, 144, 145, 146, 145, 145, 148, 147, 
	144, 5, 149, 10, 149, 0, 150, 151, 
	150, 0, 154, 153, 155, 156, 153, 152, 
	0, 158, 159, 157, 0, 158, 157, 154, 
	160, 158, 159, 160, 157, 161, 162, 163, 
	154, 164, 165, 166, 167, 168, 169, 170, 
	164, 0, 171, 172, 61, 60, 173, 61, 
	60, 174, 61, 60, 175, 61, 60, 176, 
	61, 60, 177, 61, 60, 178, 61, 60, 
	179, 61, 60, 180, 61, 60, 181, 61, 
	60, 182, 61, 60, 183, 61, 60, 184, 
	61, 60, 77, 61, 60, 185, 61, 60, 
	186, 61, 60, 187, 61, 60, 188, 61, 
	60, 189, 61, 60, 190, 61, 60, 191, 
	61, 60, 192, 61, 60, 193, 61, 60, 
	194, 61, 60, 195, 61, 60, 196, 61, 
	60, 197, 61, 60, 198, 61, 60, 77, 
	61, 60, 199, 61, 60, 200, 61, 60, 
	201, 61, 60, 202, 61, 60, 203, 61, 
	60, 204, 61, 60, 205, 61, 60, 206, 
	61, 60, 207, 61, 60, 208, 61, 60, 
	209, 61, 60, 210, 61, 60, 211, 61, 
	60, 212, 61, 60, 213, 61, 78, 60, 
	214, 61, 60, 215, 61, 60, 216, 61, 
	60, 217, 61, 60, 218, 61, 60, 61, 
	219, 60, 220, 61, 60, 221, 61, 60, 
	222, 61, 60, 223, 61, 60, 224, 61, 
	60, 225, 61, 60, 226, 61, 60, 227, 
	61, 60, 228, 61, 60, 229, 61, 60, 
	230, 61, 60, 231, 61, 60, 232, 61, 
	60, 233, 61, 60, 234, 61, 60, 77, 
	61, 60, 235, 61, 60, 236, 237, 61, 
	60, 238, 61, 60, 239, 61, 60, 240, 
	61, 60, 241, 61, 60, 242, 61, 60, 
	243, 61, 60, 244, 61, 60, 245, 61, 
	60, 246, 61, 60, 247, 61, 60, 248, 
	61, 60, 249, 61, 60, 250, 61, 60, 
	251, 61, 60, 252, 61, 60, 253, 61, 
	60, 254, 61, 60, 255, 61, 60, 193, 
	61, 60, 256, 61, 60, 257, 61, 60, 
	258, 61, 60, 259, 61, 60, 260, 61, 
	60, 261, 61, 60, 262, 61, 60, 263, 
	61, 60, 264, 61, 60, 265, 61, 60, 
	183, 61, 60, 61, 266, 60, 61, 267, 
	60, 61, 268, 60, 61, 269, 60, 61, 
	270, 60, 61, 271, 60, 61, 272, 60, 
	61, 273, 60, 61, 274, 60, 61, 275, 
	60, 61, 276, 60, 61, 277, 60, 61, 
	278, 60, 61, 279, 60, 280, 0, 281, 
	0, 282, 0, 283, 0, 284, 0, 285, 
	0, 286, 0, 287, 0, 288, 0, 289, 
	0, 290, 0, 291, 0, 292, 0, 293, 
	0, 295, 294, 297, 296, 298, 299, 297, 
	300, 301, 301, 300, 296, 302, 297, 296, 
	303, 297, 296, 304, 297, 296, 305, 297, 
	296, 306, 297, 296, 307, 297, 296, 308, 
	297, 296, 309, 297, 296, 310, 297, 296, 
	311, 297, 296, 312, 297, 296, 313, 297, 
	296, 314, 297, 296, 315, 297, 296, 316, 
	297, 296, 317, 297, 296, 318, 297, 296, 
	297, 319, 296, 320, 297, 296, 321, 297, 
	296, 322, 297, 296, 323, 297, 296, 324, 
	297, 296, 325, 297, 296, 326, 297, 296, 
	327, 297, 296, 328, 297, 296, 329, 297, 
	296, 330, 297, 296, 331, 297, 296, 332, 
	297, 296, 333, 297, 296, 334, 297, 296, 
	335, 297, 296, 336, 297, 296, 337, 297, 
	296, 338, 297, 296, 339, 297, 296, 312, 
	297, 296, 340, 0, 341, 0, 342, 0, 
	20, 0, 343, 0, 344, 0, 345, 0, 
	346, 0, 347, 0, 348, 0, 349, 0, 
	350, 0, 351, 0, 353, 352, 355, 354, 
	356, 357, 358, 355, 359, 360, 361, 362, 
	360, 359, 354, 363, 364, 365, 366, 367, 
	355, 354, 368, 355, 354, 369, 355, 354, 
	355, 370, 354, 371, 355, 354, 372, 355, 
	354, 373, 355, 354, 374, 355, 354, 375, 
	355, 354, 376, 355, 354, 377, 355, 354, 
	369, 355, 354, 378, 355, 354, 379, 355, 
	354, 380, 355, 354, 381, 355, 354, 382, 
	355, 354, 383, 355, 354, 384, 355, 354, 
	385, 355, 354, 386, 355, 354, 387, 355, 
	354, 388, 355, 354, 389, 355, 354, 390, 
	355, 354, 391, 355, 354, 392, 355, 354, 
	393, 355, 354, 355, 370, 354, 394, 355, 
	354, 395, 355, 354, 396, 355, 354, 397, 
	355, 354, 398, 355, 354, 399, 355, 354, 
	400, 355, 354, 401, 355, 354, 402, 355, 
	354, 403, 355, 354, 404, 355, 354, 363, 
	355, 354, 405, 355, 354, 406, 355, 354, 
	407, 355, 354, 408, 355, 354, 409, 355, 
	354, 410, 355, 354, 411, 355, 354, 412, 
	355, 354, 413, 355, 354, 414, 355, 354, 
	415, 355, 354, 416, 355, 354, 417, 355, 
	354, 418, 355, 354, 419, 355, 370, 354, 
	420, 355, 354, 421, 355, 354, 422, 355, 
	354, 423, 355, 354, 424, 355, 354, 355, 
	425, 354, 426, 355, 354, 427, 355, 354, 
	428, 355, 354, 429, 355, 354, 430, 355, 
	354, 431, 355, 354, 432, 355, 354, 433, 
	355, 354, 434, 355, 354, 435, 355, 354, 
	436, 355, 354, 437, 355, 354, 438, 355, 
	354, 439, 355, 354, 440, 355, 354, 393, 
	355, 354, 441, 442, 355, 354, 443, 355, 
	354, 444, 355, 354, 445, 355, 354, 446, 
	355, 354, 447, 355, 354, 448, 355, 354, 
	449, 355, 354, 450, 355, 354, 451, 355, 
	354, 452, 355, 354, 453, 355, 354, 454, 
	355, 354, 455, 355, 354, 456, 355, 354, 
	457, 355, 354, 458, 355, 354, 459, 355, 
	354, 460, 355, 354, 461, 355, 354, 387, 
	355, 354, 462, 355, 354, 463, 355, 354, 
	464, 355, 354, 369, 355, 354, 465, 355, 
	354, 466, 355, 354, 467, 468, 469, 355, 
	354, 470, 355, 354, 471, 355, 354, 472, 
	355, 354, 369, 355, 354, 473, 355, 354, 
	474, 355, 354, 475, 355, 354, 476, 355, 
	354, 477, 355, 354, 369, 355, 354, 478, 
	355, 354, 479, 355, 354, 480, 355, 354, 
	369, 355, 354, 355, 481, 354, 355, 482, 
	354, 355, 483, 354, 355, 484, 354, 355, 
	485, 354, 355, 486, 354, 355, 487, 354, 
	355, 488, 354, 355, 489, 354, 355, 490, 
	354, 355, 491, 354, 355, 492, 354, 355, 
	493, 354, 355, 494, 354, 495, 0, 496, 
	0, 497, 0, 498, 0, 499, 0, 500, 
	0, 501, 0, 20, 0, 502, 503, 0, 
	504, 0, 505, 0, 506, 0, 507, 0, 
	508, 0, 509, 0, 510, 0, 511, 0, 
	512, 0, 513, 0, 290, 0, 514, 0, 
	515, 0, 516, 0, 517, 0, 518, 0, 
	519, 0, 520, 0, 521, 0, 50, 0, 
	522, 0, 523, 0, 524, 0, 525, 0, 
	526, 0, 527, 0, 528, 0, 529, 0, 
	530, 0, 531, 0, 532, 0, 13, 0, 
	533, 0, 534, 0, 535, 0, 536, 0, 
	537, 0, 538, 0, 539, 0, 540, 0, 
	541, 0, 542, 0, 543, 0, 544, 0, 
	545, 0, 546, 0, 547, 548, 0, 549, 
	0, 550, 0, 551, 0, 552, 0, 553, 
	0, 554, 0, 555, 0, 556, 0, 557, 
	0, 558, 0, 559, 0, 560, 0, 561, 
	0, 562, 0, 563, 0, 564, 0, 565, 
	0, 566, 0, 567, 0, 568, 0, 569, 
	0, 570, 0, 571, 0, 573, 572, 575, 
	574, 576, 577, 578, 575, 579, 580, 581, 
	582, 580, 579, 574, 583, 584, 585, 586, 
	587, 575, 574, 588, 575, 574, 589, 575, 
	574, 575, 590, 574, 591, 575, 574, 592, 
	575, 574, 593, 575, 574, 594, 575, 574, 
	595, 575, 574, 596, 575, 574, 597, 575, 
	574, 589, 575, 574, 598, 575, 574, 599, 
	575, 574, 600, 575, 574, 601, 575, 574, 
	602, 575, 574, 603, 575, 574, 604, 575, 
	574, 605, 575, 574, 606, 575, 574, 607, 
	575, 574, 608, 575, 574, 609, 575, 574, 
	610, 575, 574, 611, 575, 574, 612, 575, 
	574, 613, 575, 574, 575, 590, 574, 614, 
	575, 574, 615, 575, 574, 616, 575, 574, 
	617, 575, 574, 618, 575, 574, 619, 575, 
	574, 620, 575, 574, 621, 575, 574, 622, 
	575, 574, 623, 575, 574, 624, 575, 574, 
	583, 575, 574, 625, 575, 574, 626, 575, 
	574, 627, 575, 574, 628, 575, 574, 629, 
	575, 574, 630, 575, 574, 631, 575, 574, 
	632, 575, 574, 633, 575, 574, 634, 575, 
	574, 635, 575, 574, 636, 575, 574, 637, 
	575, 574, 613, 575, 574, 638, 639, 575, 
	574, 640, 575, 574, 641, 575, 574, 642, 
	575, 574, 643, 575, 574, 644, 575, 574, 
	645, 575, 574, 646, 575, 574, 647, 575, 
	574, 648, 575, 574, 649, 575, 574, 650, 
	575, 574, 651, 575, 574, 652, 575, 574, 
	653, 575, 574, 654, 575, 574, 655, 575, 
	574, 656, 575, 574, 657, 575, 574, 658, 
	575, 574, 607, 575, 574, 659, 575, 574, 
	660, 575, 574, 661, 575, 574, 589, 575, 
	574, 662, 575, 574, 663, 575, 574, 664, 
	665, 666, 575, 574, 667, 575, 574, 668, 
	575, 574, 669, 575, 574, 589, 575, 574, 
	670, 575, 574, 671, 575, 574, 672, 575, 
	574, 673, 575, 574, 674, 575, 574, 589, 
	575, 574, 675, 575, 574, 676, 575, 574, 
	677, 575, 574, 589, 575, 574, 575, 678, 
	574, 575, 679, 574, 575, 680, 574, 575, 
	681, 574, 575, 682, 574, 575, 683, 574, 
	575, 684, 574, 575, 685, 574, 575, 686, 
	574, 575, 687, 574, 575, 688, 574, 575, 
	689, 574, 575, 690, 574, 575, 691, 574, 
	693, 692, 695, 694, 696, 697, 698, 695, 
	699, 700, 701, 702, 700, 699, 694, 703, 
	704, 705, 706, 707, 708, 695, 694, 709, 
	695, 694, 710, 695, 694, 695, 711, 694, 
	712, 695, 694, 713, 695, 694, 714, 695, 
	694, 715, 695, 694, 716, 695, 694, 717, 
	695, 694, 718, 695, 694, 719, 695, 694, 
	695, 711, 694, 720, 695, 694, 721, 695, 
	694, 722, 695, 694, 723, 695, 694, 724, 
	695, 694, 725, 695, 694, 726, 695, 694, 
	710, 695, 694, 727, 695, 694, 728, 695, 
	694, 729, 695, 694, 730, 695, 694, 731, 
	695, 694, 732, 695, 694, 733, 695, 694, 
	734, 695, 694, 735, 695, 694, 736, 695, 
	694, 737, 695, 694, 738, 695, 694, 739, 
	695, 694, 740, 695, 694, 741, 695, 694, 
	719, 695, 694, 742, 695, 694, 743, 695, 
	694, 744, 695, 694, 745, 695, 694, 746, 
	695, 694, 747, 695, 694, 748, 695, 694, 
	749, 695, 694, 750, 695, 694, 751, 695, 
	694, 752, 695, 694, 703, 695, 694, 753, 
	695, 694, 754, 695, 694, 755, 695, 694, 
	756, 695, 694, 757, 695, 694, 758, 695, 
	694, 759, 695, 694, 760, 695, 694, 761, 
	695, 694, 762, 695, 694, 763, 695, 694, 
	764, 695, 694, 765, 695, 694, 766, 695, 
	694, 767, 695, 711, 694, 768, 695, 694, 
	769, 695, 694, 770, 695, 694, 771, 695, 
	694, 772, 695, 694, 695, 773, 694, 774, 
	695, 694, 775, 695, 694, 776, 695, 694, 
	777, 695, 694, 778, 695, 694, 779, 695, 
	694, 780, 695, 694, 781, 695, 694, 782, 
	695, 694, 783, 695, 694, 784, 695, 694, 
	785, 695, 694, 786, 695, 694, 787, 695, 
	694, 788, 695, 694, 719, 695, 694, 789, 
	790, 695, 694, 791, 695, 694, 792, 695, 
	694, 793, 695, 694, 794, 695, 694, 795, 
	695, 694, 796, 695, 694, 797, 695, 694, 
	798, 695, 694, 799, 695, 694, 800, 695, 
	694, 801, 695, 694, 802, 695, 694, 803, 
	695, 694, 804, 695, 694, 805, 695, 694, 
	806, 695, 694, 807, 695, 694, 808, 695, 
	694, 809, 695, 694, 736, 695, 694, 810, 
	695, 694, 811, 695, 694, 812, 695, 694, 
	710, 695, 694, 813, 695, 694, 814, 695, 
	694, 815, 816, 817, 695, 694, 818, 695, 
	694, 819, 695, 694, 820, 695, 694, 710, 
	695, 694, 821, 695, 694, 822, 695, 694, 
	823, 695, 694, 824, 695, 694, 825, 695, 
	694, 710, 695, 694, 826, 695, 694, 827, 
	695, 694, 828, 695, 694, 710, 695, 694, 
	695, 829, 694, 695, 830, 694, 695, 831, 
	694, 695, 832, 694, 695, 833, 694, 695, 
	834, 694, 695, 835, 694, 695, 836, 694, 
	695, 837, 694, 695, 838, 694, 695, 839, 
	694, 695, 840, 694, 695, 841, 694, 695, 
	842, 694, 843, 0, 4, 0, 844, 0
];

var _lexer_trans_targs = [
	0, 2, 9, 51, 8, 8, 68, 78, 
	80, 5, 94, 97, 759, 3, 275, 421, 
	429, 450, 462, 4, 5, 6, 7, 8, 
	79, 7, 8, 79, 10, 271, 11, 215, 
	12, 13, 14, 15, 16, 17, 18, 19, 
	20, 21, 22, 23, 24, 25, 26, 27, 
	28, 29, 30, 31, 32, 33, 34, 35, 
	36, 37, 38, 39, 38, 39, 40, 169, 
	39, 8, 201, 41, 103, 132, 42, 43, 
	44, 45, 46, 47, 48, 49, 50, 2, 
	9, 51, 8, 8, 68, 78, 80, 5, 
	94, 97, 52, 53, 54, 58, 64, 55, 
	56, 57, 59, 60, 61, 62, 63, 65, 
	66, 67, 69, 70, 71, 72, 71, 71, 
	72, 71, 73, 73, 73, 74, 73, 73, 
	73, 74, 75, 76, 77, 8, 77, 78, 
	8, 79, 81, 82, 83, 84, 85, 86, 
	87, 88, 89, 90, 91, 92, 93, 761, 
	95, 96, 8, 95, 94, 96, 97, 98, 
	99, 101, 102, 100, 98, 99, 100, 98, 
	101, 2, 9, 51, 102, 68, 78, 80, 
	5, 94, 97, 104, 117, 105, 106, 107, 
	108, 109, 110, 111, 112, 113, 114, 115, 
	116, 118, 119, 120, 121, 122, 123, 124, 
	125, 126, 127, 128, 129, 130, 131, 133, 
	134, 135, 136, 137, 138, 139, 140, 141, 
	142, 143, 144, 145, 146, 147, 148, 149, 
	150, 151, 152, 153, 154, 155, 156, 157, 
	158, 159, 160, 161, 162, 163, 164, 165, 
	166, 167, 168, 170, 171, 190, 172, 173, 
	174, 175, 176, 177, 178, 179, 180, 181, 
	182, 183, 184, 185, 186, 187, 188, 189, 
	191, 192, 193, 194, 195, 196, 197, 198, 
	199, 200, 202, 203, 204, 205, 206, 207, 
	208, 209, 210, 211, 212, 213, 214, 8, 
	216, 217, 218, 219, 220, 221, 222, 223, 
	224, 225, 226, 227, 228, 229, 230, 231, 
	230, 231, 232, 250, 231, 8, 233, 234, 
	235, 236, 237, 238, 239, 240, 241, 242, 
	243, 244, 245, 246, 247, 248, 249, 50, 
	251, 252, 253, 254, 255, 256, 257, 258, 
	259, 260, 261, 262, 263, 264, 265, 266, 
	267, 268, 269, 270, 272, 273, 274, 276, 
	277, 278, 279, 280, 281, 282, 283, 284, 
	285, 286, 285, 286, 287, 365, 390, 286, 
	8, 407, 290, 288, 291, 299, 316, 328, 
	289, 290, 50, 292, 293, 294, 295, 296, 
	297, 298, 300, 301, 302, 303, 304, 305, 
	306, 307, 308, 309, 310, 311, 312, 313, 
	314, 315, 317, 318, 319, 320, 321, 322, 
	323, 324, 325, 326, 327, 329, 330, 331, 
	332, 333, 334, 335, 336, 337, 338, 339, 
	340, 341, 342, 343, 344, 345, 346, 347, 
	348, 349, 350, 351, 352, 353, 354, 355, 
	356, 357, 358, 359, 360, 361, 362, 363, 
	364, 366, 386, 367, 368, 369, 370, 371, 
	372, 373, 374, 375, 376, 377, 378, 379, 
	380, 381, 382, 383, 384, 385, 387, 388, 
	389, 391, 392, 393, 397, 403, 394, 395, 
	396, 398, 399, 400, 401, 402, 404, 405, 
	406, 408, 409, 410, 411, 412, 413, 414, 
	415, 416, 417, 418, 419, 420, 8, 422, 
	423, 424, 425, 426, 427, 428, 430, 441, 
	431, 432, 433, 434, 435, 436, 437, 438, 
	439, 440, 442, 443, 444, 445, 446, 447, 
	448, 449, 451, 452, 453, 454, 455, 456, 
	457, 458, 459, 460, 461, 463, 464, 465, 
	466, 467, 468, 469, 470, 471, 472, 473, 
	474, 475, 476, 477, 614, 478, 479, 480, 
	481, 482, 483, 484, 485, 486, 487, 488, 
	489, 490, 491, 492, 493, 494, 495, 496, 
	497, 498, 499, 500, 501, 502, 501, 502, 
	503, 558, 583, 502, 8, 600, 506, 504, 
	507, 515, 532, 544, 505, 506, 50, 508, 
	509, 510, 511, 512, 513, 514, 516, 517, 
	518, 519, 520, 521, 522, 523, 524, 525, 
	526, 527, 528, 529, 530, 531, 533, 534, 
	535, 536, 537, 538, 539, 540, 541, 542, 
	543, 545, 546, 547, 548, 549, 550, 551, 
	552, 553, 554, 555, 556, 557, 559, 579, 
	560, 561, 562, 563, 564, 565, 566, 567, 
	568, 569, 570, 571, 572, 573, 574, 575, 
	576, 577, 578, 580, 581, 582, 584, 585, 
	586, 590, 596, 587, 588, 589, 591, 592, 
	593, 594, 595, 597, 598, 599, 601, 602, 
	603, 604, 605, 606, 607, 608, 609, 610, 
	611, 612, 613, 8, 615, 616, 615, 616, 
	617, 703, 728, 616, 8, 745, 620, 618, 
	621, 630, 638, 654, 666, 619, 620, 50, 
	622, 623, 624, 625, 626, 627, 628, 629, 
	631, 632, 633, 634, 635, 636, 637, 639, 
	640, 641, 642, 643, 644, 645, 646, 647, 
	648, 649, 650, 651, 652, 653, 655, 656, 
	657, 658, 659, 660, 661, 662, 663, 664, 
	665, 667, 668, 669, 670, 671, 672, 673, 
	674, 675, 676, 677, 678, 679, 680, 681, 
	682, 683, 684, 685, 686, 687, 688, 689, 
	690, 691, 692, 693, 694, 695, 696, 697, 
	698, 699, 700, 701, 702, 704, 724, 705, 
	706, 707, 708, 709, 710, 711, 712, 713, 
	714, 715, 716, 717, 718, 719, 720, 721, 
	722, 723, 725, 726, 727, 729, 730, 731, 
	735, 741, 732, 733, 734, 736, 737, 738, 
	739, 740, 742, 743, 744, 746, 747, 748, 
	749, 750, 751, 752, 753, 754, 755, 756, 
	757, 758, 8, 760, 0
];

var _lexer_trans_actions = [
	43, 29, 29, 29, 0, 54, 3, 1, 
	0, 29, 1, 35, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 57, 149, 
	126, 0, 110, 23, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 57, 144, 0, 54, 84, 84, 
	0, 69, 33, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 13, 63, 
	63, 63, 31, 130, 60, 57, 31, 63, 
	57, 66, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 7, 139, 48, 0, 
	102, 9, 5, 45, 134, 45, 0, 33, 
	122, 33, 33, 0, 11, 106, 0, 0, 
	114, 25, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 27, 118, 27, 51, 0, 0, 0, 
	37, 37, 54, 37, 87, 0, 0, 39, 
	0, 96, 96, 96, 0, 93, 90, 41, 
	96, 90, 99, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 13, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 57, 144, 
	0, 54, 84, 84, 0, 81, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 21, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	57, 144, 0, 54, 84, 84, 84, 0, 
	72, 33, 84, 0, 0, 0, 0, 0, 
	0, 0, 15, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 15, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 57, 144, 0, 54, 
	84, 84, 84, 0, 78, 33, 84, 0, 
	0, 0, 0, 0, 0, 0, 19, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 19, 57, 144, 0, 54, 
	84, 84, 84, 0, 75, 33, 84, 0, 
	0, 0, 0, 0, 0, 0, 0, 17, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 17, 0, 0
];

var _lexer_eof_actions = [
	0, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43
];

var lexer_start = 1;
var lexer_first_final = 761;
var lexer_error = 0;

var lexer_en_main = 1;


/* line 129 "ragel/i18n/tt.js.rl" */

/* line 130 "ragel/i18n/tt.js.rl" */

/* line 131 "ragel/i18n/tt.js.rl" */

/* line 132 "ragel/i18n/tt.js.rl" */

var Lexer = function(listener) {
  // Check that listener has the required functions
  var events = ['comment', 'tag', 'feature', 'background', 'scenario', 'scenario_outline', 'examples', 'step', 'doc_string', 'row', 'eof'];
  for(var i=0, len=events.length; i<len; i++) {
    var event = events[i];
    if(typeof listener[event] != 'function') {
      throw new Error("Error. No " + event + " function exists on " + JSON.stringify(listener));
    }
  }
  this.listener = listener;
};

Lexer.prototype.scan = function(data) {
  var ending = "\n%_FEATURE_END_%";
  if(typeof data == 'string') {
    data = this.stringToBytes(data + ending);
  } else if(typeof Buffer != 'undefined' && Buffer.isBuffer(data)) {
    // Node.js
    var buf = new Buffer(data.length + ending.length);
    data.copy(buf, 0, 0);
    new Buffer(ending).copy(buf, data.length, 0);
    data = buf;
  }
  var eof = pe = data.length;
  var p = 0;

  this.line_number = 1;
  this.last_newline = 0;
  var signedCharValue=function(v){return v > 127 ? v-256 : v; };

  
/* line 1268 "js/lib/gherkin/lexer/tt.js" */
{
	  this.cs = lexer_start;
} /* JSCodeGen::writeInit */

/* line 164 "ragel/i18n/tt.js.rl" */
  
/* line 1275 "js/lib/gherkin/lexer/tt.js" */
{
	var _klen, _trans, _keys, _ps, _widec, _acts, _nacts;
	var _goto_level, _resume, _eof_trans, _again, _test_eof;
	var _out;
	_klen = _trans = _keys = _acts = _nacts = null;
	_goto_level = 0;
	_resume = 10;
	_eof_trans = 15;
	_again = 20;
	_test_eof = 30;
	_out = 40;
	while (true) {
	_trigger_goto = false;
	if (_goto_level <= 0) {
	if (p == pe) {
		_goto_level = _test_eof;
		continue;
	}
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	}
	if (_goto_level <= _resume) {
	_keys = _lexer_key_offsets[ this.cs];
	_trans = _lexer_index_offsets[ this.cs];
	_klen = _lexer_single_lengths[ this.cs];
	_break_match = false;
	
	do {
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + _klen - 1;

	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + ( (_upper - _lower) >> 1 );

	        if (( signedCharValue(data[p])) < _lexer_trans_keys[_mid]) {
	           _upper = _mid - 1;
	        } else if (( signedCharValue(data[p])) > _lexer_trans_keys[_mid]) {
	           _lower = _mid + 1;
	        } else {
	           _trans += (_mid - _keys);
	           _break_match = true;
	           break;
	        };
	     } /* while */
	     if (_break_match) { break; }
	     _keys += _klen;
	     _trans += _klen;
	  }
	  _klen = _lexer_range_lengths[ this.cs];
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + (_klen << 1) - 2;
	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + (((_upper-_lower) >> 1) & ~1);
	        if (( signedCharValue(data[p])) < _lexer_trans_keys[_mid]) {
	          _upper = _mid - 2;
	         } else if (( signedCharValue(data[p])) > _lexer_trans_keys[_mid+1]) {
	          _lower = _mid + 2;
	        } else {
	          _trans += ((_mid - _keys) >> 1);
	          _break_match = true;
	          break;
	        }
	     } /* while */
	     if (_break_match) { break; }
	     _trans += _klen
	  }
	} while (false);
	_trans = _lexer_indicies[_trans];
	 this.cs = _lexer_trans_targs[_trans];
	if (_lexer_trans_actions[_trans] != 0) {
		_acts = _lexer_trans_actions[_trans];
		_nacts = _lexer_actions[_acts];
		_acts += 1;
		while (_nacts > 0) {
			_nacts -= 1;
			_acts += 1;
			switch (_lexer_actions[_acts - 1]) {
case 0:
/* line 6 "ragel/i18n/tt.js.rl" */

    this.content_start = p;
    this.current_line = this.line_number;
    this.start_col = p - this.last_newline - (this.keyword+':').length;
  		break;
case 1:
/* line 12 "ragel/i18n/tt.js.rl" */

    this.current_line = this.line_number;
    this.start_col = p - this.last_newline;
  		break;
case 2:
/* line 17 "ragel/i18n/tt.js.rl" */

    this.content_start = p;
  		break;
case 3:
/* line 21 "ragel/i18n/tt.js.rl" */

    this.docstring_content_type_start = p;
  		break;
case 4:
/* line 25 "ragel/i18n/tt.js.rl" */

    this.docstring_content_type_end = p;
  		break;
case 5:
/* line 29 "ragel/i18n/tt.js.rl" */

    var con = this.unindent(
      this.start_col, 
      this.bytesToString(data.slice(this.content_start, this.next_keyword_start-1)).replace(/(\r?\n)?([\t ])*$/, '').replace(/\\\"\\\"\\\"/mg, '"""')
    );
    var con_type = this.bytesToString(data.slice(this.docstring_content_type_start, this.docstring_content_type_end)).trim();
    this.listener.doc_string(con_type, con, this.current_line); 
  		break;
case 6:
/* line 38 "ragel/i18n/tt.js.rl" */

    p = this.store_keyword_content('feature', data, p, eof);
  		break;
case 7:
/* line 42 "ragel/i18n/tt.js.rl" */

    p = this.store_keyword_content('background', data, p, eof);
  		break;
case 8:
/* line 46 "ragel/i18n/tt.js.rl" */

    p = this.store_keyword_content('scenario', data, p, eof);
  		break;
case 9:
/* line 50 "ragel/i18n/tt.js.rl" */

    p = this.store_keyword_content('scenario_outline', data, p, eof);
  		break;
case 10:
/* line 54 "ragel/i18n/tt.js.rl" */

    p = this.store_keyword_content('examples', data, p, eof);
  		break;
case 11:
/* line 58 "ragel/i18n/tt.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.step(this.keyword, con, this.current_line);
  		break;
case 12:
/* line 63 "ragel/i18n/tt.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.comment(con, this.line_number);
    this.keyword_start = null;
  		break;
case 13:
/* line 69 "ragel/i18n/tt.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.tag(con, this.line_number);
    this.keyword_start = null;
  		break;
case 14:
/* line 75 "ragel/i18n/tt.js.rl" */

    this.line_number++;
  		break;
case 15:
/* line 79 "ragel/i18n/tt.js.rl" */

    this.last_newline = p + 1;
  		break;
case 16:
/* line 83 "ragel/i18n/tt.js.rl" */

    this.keyword_start = this.keyword_start || p;
  		break;
case 17:
/* line 87 "ragel/i18n/tt.js.rl" */

    this.keyword = this.bytesToString(data.slice(this.keyword_start, p)).replace(/:$/, '');
    this.keyword_start = null;
  		break;
case 18:
/* line 92 "ragel/i18n/tt.js.rl" */

    this.next_keyword_start = p;
  		break;
case 19:
/* line 96 "ragel/i18n/tt.js.rl" */

    p = p - 1;
    current_row = [];
    this.current_line = this.line_number;
  		break;
case 20:
/* line 102 "ragel/i18n/tt.js.rl" */

    this.content_start = p;
  		break;
case 21:
/* line 106 "ragel/i18n/tt.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    current_row.push(con.replace(/\\\|/, "|").replace(/\\n/, "\n").replace(/\\\\/, "\\"));
  		break;
case 22:
/* line 111 "ragel/i18n/tt.js.rl" */

    this.listener.row(current_row, this.current_line);
  		break;
case 23:
/* line 115 "ragel/i18n/tt.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw new Error("Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.");
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 1502 "js/lib/gherkin/lexer/tt.js" */
			} /* action switch */
		}
	}
	if (_trigger_goto) {
		continue;
	}
	}
	if (_goto_level <= _again) {
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	p += 1;
	if (p != pe) {
		_goto_level = _resume;
		continue;
	}
	}
	if (_goto_level <= _test_eof) {
	if (p == eof) {
	__acts = _lexer_eof_actions[ this.cs];
	__nacts =  _lexer_actions[__acts];
	__acts += 1;
	while (__nacts > 0) {
		__nacts -= 1;
		__acts += 1;
		switch (_lexer_actions[__acts - 1]) {
case 23:
/* line 115 "ragel/i18n/tt.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw new Error("Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.");
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 1541 "js/lib/gherkin/lexer/tt.js" */
		} /* eof action switch */
	}
	if (_trigger_goto) {
		continue;
	}
}
	}
	if (_goto_level <= _out) {
		break;
	}
	}
	}

/* line 165 "ragel/i18n/tt.js.rl" */
};


/*
 * Decode utf-8 byte sequence to string.
 */
var decodeUtf8 = function(bytes) {
  var result = "";
  var i = 0;
  var wc;
  var c;

  while (i < bytes.length) {
    /* parse as UTF-8 lead byte */
    wc = bytes[i++];
    if (wc < 0x80) {
      count = 0;
    } else if (wc < 0xC2 || wc >= 0xF8) {
      throw new Error("input is not a valid UTF-8 lead octet");
    } else if (wc < 0xE0) {
      count = 1;
      wc = (wc & 0x1F) << 6;
    } else if (wc < 0xF0) {
      count = 2;
      wc = (wc & 0x0F) << 12;
    } else /* wc < 0xF8 */ {
      count = 3;
      wc = (wc & 0x07) << 18;
    }

    /* parse trail bytes, if any */
    while (count) {
      if (!(i < bytes.length)) {
        throw new Error("short read");
      }
      if ((c = bytes[i++] ^ 0x80) > 0x3F) {
        throw new Error("input is not a valid UTF-8 trail octet");
      }
      wc |= c << (6 * --count);
      if (wc < (1 << (5 * count + 6))) {
        throw new Error("invalid non-minimal encoded input");
      }
    }

    /* handle conversion to UTF-16 if needed */
    if (wc > 0xFFFF) {
      wc -= 0x10000;
      result += String.fromCharCode(0xD800 + (wc >> 10));
      wc = 0xDC00 + (wc & 0x3FF);
    }
    result += String.fromCharCode(wc);
  }

  return result;
};

/*
 * Encode string to an array of bytes using utf8 encoding.
 *
 * Javascript internally stores character data as utf16 (like java).
 * String.charCodeAt() does *not* produce unicode points, but simply
 * reflects this internal representation. Thus, it is necessary
 * to first decode the utf-16 representation before encoding to
 * utf-8.
 */
var encodeUtf8 = function(string) {
  var bytes = [];
  var i = 0;
  var j = 0;
  var wc;

  while (i < string.length) {
    wc = string.charCodeAt(i++);
    if (wc >= 0xD800 && wc <= 0xDBFF && i < string.length && string.charCodeAt(i) >= 0xDC00 && string.charCodeAt(i) <= 0xDFFF) {
      /* decode UTF-16 */
      wc = 0x10000 + ((wc & 0x3FF) << 10) + (string.charCodeAt(i++) & 0x3FF);
    }

    /* emit lead byte */
    if (wc < 0x80) {
      bytes[j++] = wc;
      count = 0;
    } else if (wc < 0x800) {
      bytes[j++] = 0xC0 | (wc >> 6);
      count = 1;
    } else if (wc < 0x10000) {
      bytes[j++] = 0xE0 | (wc >> 12);
      count = 2;
    } else {
      /* SMP: 21-bit Unicode */
      bytes[j++] = 0xF0 | (wc >> 18);
      count = 3;
    }

    /* emit trail bytes, if any */
    while (count) {
      bytes[j++] = 0x80 | ((wc >> (6 * --count)) & 0x3F);
    }
  }

  return bytes;

};

Lexer.prototype.bytesToString = function(bytes) {
  if(typeof bytes.write == 'function') {
    // Node.js
    return bytes.toString('utf-8');
  }
  return decodeUtf8(bytes);
};

Lexer.prototype.stringToBytes = function(string) {
  return encodeUtf8(string);
};

Lexer.prototype.unindent = function(startcol, text) {
  startcol = startcol || 0;
  return text.replace(new RegExp('^[\t ]{0,' + startcol + '}', 'gm'), ''); 
};

Lexer.prototype.store_keyword_content = function(event, data, p, eof) {
  var end_point = (!this.next_keyword_start || (p == eof)) ? p : this.next_keyword_start;
  var content = this.unindent(this.start_col + 2, this.bytesToString(data.slice(this.content_start, end_point))).replace(/\s+$/,"");
  var content_lines = content.split("\n")
  var name = content_lines.shift() || "";
  name = name.trim();
  var description = content_lines.join("\n");
  this.listener[event](this.keyword, name, description, this.current_line);
  var nks = this.next_keyword_start;
  this.next_keyword_start = null;
  return nks ? nks - 1 : p;
};

Lexer.prototype.current_line_content = function(data, p) {
  var rest = Array.prototype.slice.call(data,this.last_newline, -1);
  var end = rest.indexOf(10) || -1;
  return this.bytesToString(rest.slice(0, end)).trim();
};

// Node.js export
if(typeof module !== 'undefined') {
  module.exports = Lexer;
}
// Require.js export
if (typeof define !== 'undefined') {
  if(define.amd) {
    define('gherkin/lexer/tt', [], function() {
      return Lexer;
    });
  } else {
    define('gherkin/lexer/tt', function(require, exports, module) {
      exports.Lexer = Lexer;
    });
  }
}

})();

}).call(this,require("buffer").Buffer)

},{"buffer":69}],236:[function(require,module,exports){
(function (Buffer){

/* line 1 "ragel/i18n/uk.js.rl" */
;(function() {


/* line 126 "ragel/i18n/uk.js.rl" */



/* line 11 "js/lib/gherkin/lexer/uk.js" */
var _lexer_actions = [
	0, 1, 0, 1, 1, 1, 2, 1, 
	3, 1, 4, 1, 5, 1, 6, 1, 
	7, 1, 8, 1, 9, 1, 10, 1, 
	11, 1, 12, 1, 13, 1, 16, 1, 
	17, 1, 18, 1, 19, 1, 20, 1, 
	21, 1, 22, 1, 23, 2, 2, 18, 
	2, 3, 4, 2, 13, 0, 2, 14, 
	15, 2, 17, 0, 2, 17, 1, 2, 
	17, 16, 2, 17, 19, 2, 18, 6, 
	2, 18, 7, 2, 18, 8, 2, 18, 
	9, 2, 18, 10, 2, 18, 16, 2, 
	20, 21, 2, 22, 0, 2, 22, 1, 
	2, 22, 16, 2, 22, 19, 3, 4, 
	14, 15, 3, 5, 14, 15, 3, 11, 
	14, 15, 3, 12, 14, 15, 3, 13, 
	14, 15, 3, 14, 15, 18, 3, 17, 
	0, 11, 3, 17, 14, 15, 4, 2, 
	14, 15, 18, 4, 3, 4, 14, 15, 
	4, 17, 0, 14, 15, 5, 17, 0, 
	11, 14, 15
];

var _lexer_key_offsets = [
	0, 0, 12, 22, 23, 25, 27, 38, 
	39, 40, 42, 44, 49, 54, 59, 64, 
	68, 72, 74, 75, 76, 77, 78, 79, 
	80, 81, 82, 83, 84, 85, 86, 87, 
	88, 89, 94, 101, 106, 110, 116, 119, 
	121, 127, 138, 140, 141, 142, 143, 144, 
	145, 146, 147, 148, 149, 150, 151, 152, 
	153, 154, 155, 156, 157, 158, 159, 160, 
	161, 162, 163, 164, 165, 166, 167, 168, 
	169, 170, 171, 172, 173, 175, 176, 177, 
	178, 179, 180, 181, 182, 183, 184, 185, 
	186, 187, 188, 189, 190, 191, 192, 193, 
	194, 195, 204, 215, 217, 228, 231, 233, 
	235, 237, 239, 241, 243, 245, 247, 249, 
	251, 253, 255, 257, 259, 261, 263, 265, 
	267, 269, 271, 273, 275, 277, 279, 281, 
	283, 285, 287, 289, 291, 293, 295, 297, 
	299, 301, 303, 305, 307, 309, 311, 313, 
	315, 317, 319, 321, 323, 325, 327, 329, 
	331, 333, 336, 338, 340, 342, 344, 347, 
	349, 351, 353, 355, 357, 359, 361, 363, 
	365, 367, 369, 371, 373, 375, 377, 379, 
	381, 383, 385, 387, 389, 391, 393, 395, 
	397, 399, 401, 403, 405, 407, 409, 411, 
	413, 415, 417, 419, 421, 423, 425, 427, 
	429, 431, 433, 435, 437, 440, 443, 445, 
	447, 449, 451, 453, 455, 457, 459, 461, 
	463, 465, 467, 469, 471, 473, 475, 477, 
	479, 481, 483, 485, 487, 489, 491, 493, 
	495, 497, 499, 501, 503, 505, 507, 509, 
	511, 513, 515, 517, 518, 519, 520, 521, 
	523, 524, 525, 526, 527, 528, 529, 530, 
	531, 532, 533, 534, 541, 543, 545, 547, 
	549, 551, 553, 555, 557, 559, 561, 563, 
	565, 567, 569, 571, 573, 575, 577, 579, 
	581, 582, 583, 584, 585, 586, 587, 588, 
	589, 590, 591, 592, 593, 595, 596, 597, 
	598, 599, 601, 602, 603, 604, 605, 606, 
	607, 608, 609, 610, 611, 612, 613, 614, 
	615, 616, 617, 618, 619, 620, 621, 622, 
	623, 624, 625, 626, 627, 628, 629, 630, 
	631, 632, 633, 634, 635, 644, 655, 657, 
	660, 662, 664, 666, 668, 670, 672, 674, 
	676, 678, 680, 682, 684, 686, 688, 690, 
	692, 694, 696, 698, 700, 702, 704, 706, 
	708, 710, 712, 714, 716, 718, 720, 722, 
	724, 726, 728, 730, 732, 734, 736, 738, 
	740, 742, 744, 746, 748, 750, 752, 754, 
	756, 758, 760, 762, 765, 767, 769, 771, 
	773, 775, 777, 779, 781, 783, 785, 787, 
	789, 791, 793, 795, 797, 799, 801, 803, 
	806, 809, 811, 813, 815, 817, 819, 821, 
	823, 825, 827, 829, 831, 833, 835, 837, 
	839, 841, 843, 845, 847, 849, 851, 853, 
	855, 857, 859, 861, 863, 865, 867, 869, 
	871, 873, 875, 877, 879, 881, 883, 884, 
	885, 886, 887, 888, 889, 890, 891, 892, 
	893, 894, 895, 896, 897, 898, 907, 918, 
	920, 923, 925, 927, 929, 931, 933, 935, 
	937, 939, 941, 943, 945, 947, 949, 951, 
	953, 955, 957, 959, 961, 963, 965, 967, 
	969, 971, 973, 975, 977, 979, 981, 983, 
	985, 987, 989, 992, 994, 996, 998, 1000, 
	1002, 1004, 1006, 1008, 1010, 1012, 1014, 1016, 
	1018, 1020, 1022, 1024, 1026, 1028, 1030, 1032, 
	1034, 1036, 1038, 1040, 1042, 1044, 1046, 1048, 
	1050, 1052, 1054, 1056, 1058, 1060, 1062, 1065, 
	1067, 1069, 1071, 1073, 1076, 1078, 1080, 1082, 
	1084, 1086, 1088, 1090, 1092, 1094, 1096, 1098, 
	1100, 1102, 1104, 1106, 1108, 1110, 1112, 1114, 
	1116, 1118, 1120, 1122, 1124, 1126, 1128, 1130, 
	1132, 1134, 1136, 1138, 1140, 1142, 1144, 1146, 
	1148, 1150, 1152, 1154, 1156, 1158, 1160, 1162, 
	1164, 1167, 1170, 1172, 1174, 1176, 1178, 1180, 
	1182, 1184, 1186, 1188, 1190, 1192, 1194, 1196, 
	1198, 1200, 1202, 1204, 1206, 1208, 1210, 1212, 
	1214, 1216, 1218, 1220, 1222, 1224, 1226, 1228, 
	1230, 1232, 1234, 1236, 1238, 1240, 1242, 1244, 
	1245, 1247, 1249, 1250, 1251, 1252, 1253, 1254, 
	1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 
	1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 
	1271, 1272, 1273, 1281, 1285, 1288, 1290, 1292, 
	1294, 1296, 1298, 1300, 1302, 1304, 1306, 1308, 
	1310, 1312, 1314, 1316, 1318, 1320, 1322, 1324, 
	1326, 1328, 1330, 1332, 1334, 1336, 1338, 1340, 
	1342, 1344, 1346, 1348, 1350, 1352, 1355, 1357, 
	1359, 1361, 1363, 1365, 1367, 1369, 1371, 1373, 
	1375, 1377, 1379, 1381, 1383, 1385, 1387, 1389, 
	1391, 1393, 1395, 1397, 1399, 1401, 1403, 1405, 
	1407, 1409, 1411, 1413, 1415, 1417, 1419, 1421, 
	1423, 1425, 1427, 1429, 1431, 1433, 1435, 1437, 
	1439, 1441, 1443, 1445, 1447, 1449, 1451, 1453, 
	1455, 1457, 1459, 1461, 1463, 1465, 1467, 1469, 
	1471, 1473, 1475, 1477, 1479, 1481, 1483, 1485, 
	1487, 1489, 1491, 1493, 1495, 1497, 1499, 1501, 
	1503, 1505, 1506, 1507, 1508, 1509
];

var _lexer_trans_keys = [
	-48, 10, 32, 34, 35, 37, 42, 64, 
	124, 239, 9, 13, -122, -112, -108, -102, 
	-99, -97, -95, -94, -92, -81, 32, 10, 
	13, 10, 13, -48, 10, 32, 34, 35, 
	37, 42, 64, 124, 9, 13, 34, 34, 
	10, 13, 10, 13, 10, 32, 34, 9, 
	13, 10, 32, 34, 9, 13, 10, 32, 
	34, 9, 13, 10, 32, 34, 9, 13, 
	10, 32, 9, 13, 10, 32, 9, 13, 
	10, 13, 10, 95, 70, 69, 65, 84, 
	85, 82, 69, 95, 69, 78, 68, 95, 
	37, 13, 32, 64, 9, 10, 9, 10, 
	13, 32, 64, 11, 12, 10, 32, 64, 
	9, 13, 32, 124, 9, 13, 10, 32, 
	92, 124, 9, 13, 10, 92, 124, 10, 
	92, 10, 32, 92, 124, 9, 13, -48, 
	10, 32, 34, 35, 37, 42, 64, 124, 
	9, 13, -48, 32, -69, -48, -75, -47, 
	-126, -48, -80, -48, -70, -48, -66, -48, 
	-74, -48, -80, -48, -67, -48, -66, -48, 
	-66, -48, -69, -48, -72, -48, -75, -47, 
	-123, -48, -80, -48, -71, -48, -47, -75, 
	-47, -128, -48, -75, -48, -76, -47, -125, 
	-48, -68, -48, -66, -48, -78, -48, -80, 
	58, 10, 10, -48, 10, 32, 35, 37, 
	42, 64, 9, 13, -122, -112, -108, -102, 
	-99, -97, -95, -94, -92, -81, 10, 10, 
	32, -48, 10, 32, 34, 35, 37, 42, 
	64, 124, 9, 13, -48, 10, 32, -69, 
	10, -48, 10, -75, 10, -47, 10, -126, 
	10, -48, 10, -80, 10, -48, 10, -70, 
	10, -48, 10, -66, 10, -48, 10, -74, 
	10, -48, 10, -80, 10, -48, 10, -67, 
	10, -48, 10, -66, 10, -48, 10, -66, 
	10, -48, 10, -69, 10, -48, 10, -72, 
	10, -48, 10, -75, 10, -47, 10, -123, 
	10, -48, 10, -80, 10, -48, 10, -71, 
	10, -47, 10, -128, 10, -48, 10, -72, 
	10, -48, 10, -65, 10, -47, 10, -125, 
	10, -47, 10, -127, 10, -47, 10, -126, 
	10, -48, 10, -72, 10, -48, 10, -68, 
	10, -48, 10, -66, 10, 10, 32, 44, 
	10, 32, -47, 10, -119, 10, -47, 10, 
	-126, -122, 10, -47, 10, -128, 10, -47, 
	10, -125, 10, -48, 10, -70, 10, -47, 
	10, -126, 10, -47, 10, -125, 10, -47, 
	10, -128, 10, -48, 10, -80, 10, 10, 
	32, -47, 10, -127, 10, -47, 10, -122, 
	10, -48, 10, -75, 10, -48, 10, -67, 
	10, -48, 10, -80, 10, -47, 10, -128, 
	10, -47, 10, -106, 10, -47, 10, -114, 
	10, 10, 58, -48, 10, -75, 10, -48, 
	10, -67, 10, -48, 10, -80, 10, -47, 
	10, -128, 10, -47, 10, -106, 10, -48, 
	10, -71, 10, -48, 10, -80, -66, 10, 
	-48, 10, 32, -76, 10, -47, 10, -106, 
	10, -47, 10, -125, 10, -48, 10, -67, 
	10, -48, 10, -70, 10, -47, 10, -122, 
	10, -47, 10, -106, 10, -48, 10, -66, 
	10, -48, 10, -67, 10, -48, 10, -80, 
	10, -48, 10, -69, 10, -48, 10, -70, 
	10, 10, 95, 10, 70, 10, 69, 10, 
	65, 10, 84, 10, 85, 10, 82, 10, 
	69, 10, 95, 10, 69, 10, 78, 10, 
	68, 10, 95, 10, 37, -128, -48, -72, 
	-48, -70, -65, -48, -69, -48, -80, -48, 
	-76, -48, -72, 58, 10, 10, -48, 10, 
	32, 35, 124, 9, 13, -92, 10, -47, 
	10, -125, 10, -48, 10, -67, 10, -48, 
	10, -70, 10, -47, 10, -122, 10, -47, 
	10, -106, 10, -48, 10, -66, 10, -48, 
	10, -67, 10, -48, 10, -80, 10, -48, 
	10, -69, 10, 10, 58, -47, -125, -47, 
	-127, -47, -126, -48, -72, -48, -68, -48, 
	-66, 32, 44, 32, -47, -119, -47, -126, 
	-122, -47, -128, -47, -125, -48, -70, -47, 
	-126, -47, -125, -47, -128, -48, -80, 32, 
	-47, -127, -47, -122, -48, -75, -48, -67, 
	-48, -80, -47, -128, -47, -106, -47, -114, 
	58, 10, 10, -48, 10, 32, 35, 37, 
	42, 64, 9, 13, -122, -112, -108, -102, 
	-99, -97, -95, -94, -92, -81, 10, 10, 
	32, -48, 10, 32, -69, 10, -48, 10, 
	-75, 10, -47, 10, -126, 10, -48, 10, 
	-80, 10, -48, 10, -70, 10, -48, 10, 
	-66, 10, -48, 10, -74, 10, -48, 10, 
	-80, 10, -48, 10, -67, 10, -48, 10, 
	-66, 10, -48, 10, -66, 10, -48, 10, 
	-69, 10, -48, 10, -72, 10, -48, 10, 
	-75, 10, -47, 10, -123, 10, -48, 10, 
	-80, 10, -48, 10, -71, 10, -47, 10, 
	-128, 10, -48, 10, -72, 10, -48, 10, 
	-65, 10, -47, 10, -125, 10, -47, 10, 
	-127, 10, -47, 10, -126, 10, -48, 10, 
	-72, 10, -48, 10, -68, 10, -48, 10, 
	-66, 10, 10, 32, 44, 10, 32, -47, 
	10, -119, 10, -47, 10, -122, 10, -48, 
	10, -75, 10, -48, 10, -67, 10, -48, 
	10, -80, 10, -47, 10, -128, 10, -47, 
	10, -106, 10, -48, 10, -71, 10, 10, 
	58, -48, 10, -80, -66, 10, -48, 10, 
	32, -76, 10, -47, 10, -106, 10, -47, 
	10, -125, 10, -48, 10, -67, 10, -48, 
	10, -70, 10, -47, 10, -122, 10, -47, 
	10, -106, 10, -48, 10, -66, 10, -48, 
	10, -67, 10, -48, 10, -80, 10, -48, 
	10, -69, 10, -48, 10, -70, 10, 10, 
	95, 10, 70, 10, 69, 10, 65, 10, 
	84, 10, 85, 10, 82, 10, 69, 10, 
	95, 10, 69, 10, 78, 10, 68, 10, 
	95, 10, 37, -48, -75, -48, -67, -48, 
	-80, -47, -128, -47, -106, -48, -71, 58, 
	10, 10, -48, 10, 32, 35, 37, 42, 
	64, 9, 13, -122, -112, -108, -102, -99, 
	-97, -95, -94, -92, -81, 10, 10, 32, 
	-48, 10, 32, -69, 10, -48, 10, -75, 
	10, -47, 10, -126, 10, -48, 10, -80, 
	10, -48, 10, -70, 10, -48, 10, -66, 
	10, -48, 10, -74, 10, -48, 10, -80, 
	10, -48, 10, -67, 10, -48, 10, -66, 
	10, -48, 10, -66, 10, -48, 10, -69, 
	10, -48, 10, -72, 10, -48, 10, -75, 
	10, -47, 10, -123, 10, -48, 10, -80, 
	10, -48, 10, -71, 10, -48, -47, 10, 
	-75, 10, -47, 10, -128, 10, -48, 10, 
	-75, 10, -48, 10, -76, 10, -47, 10, 
	-125, 10, -48, 10, -68, 10, -48, 10, 
	-66, 10, -48, 10, -78, 10, -48, 10, 
	-80, 10, 10, 58, -128, 10, -48, 10, 
	-72, 10, -48, 10, -65, 10, -47, 10, 
	-125, 10, -47, 10, -127, 10, -47, 10, 
	-126, 10, -48, 10, -72, 10, -48, 10, 
	-68, 10, -48, 10, -66, 10, 10, 32, 
	44, 10, 32, -47, 10, -119, 10, -47, 
	10, -126, -122, 10, -47, 10, -128, 10, 
	-47, 10, -125, 10, -48, 10, -70, 10, 
	-47, 10, -126, 10, -47, 10, -125, 10, 
	-47, 10, -128, 10, -48, 10, -80, 10, 
	10, 32, -47, 10, -127, 10, -47, 10, 
	-122, 10, -48, 10, -75, 10, -48, 10, 
	-67, 10, -48, 10, -80, 10, -47, 10, 
	-128, 10, -47, 10, -106, 10, -47, 10, 
	-114, 10, -48, 10, -75, 10, -48, 10, 
	-67, 10, -48, 10, -80, 10, -47, 10, 
	-128, 10, -47, 10, -106, 10, -48, 10, 
	-71, 10, -48, 10, -80, -66, 10, -48, 
	10, 32, -76, 10, -47, 10, -106, 10, 
	-47, 10, -125, 10, -48, 10, -67, 10, 
	-48, 10, -70, 10, -47, 10, -122, 10, 
	-47, 10, -106, 10, -48, 10, -66, 10, 
	-48, 10, -67, 10, -48, 10, -80, 10, 
	-48, 10, -69, 10, -48, 10, -70, 10, 
	10, 95, 10, 70, 10, 69, 10, 65, 
	10, 84, 10, 85, 10, 82, 10, 69, 
	10, 95, 10, 69, 10, 78, 10, 68, 
	10, 95, 10, 37, -48, -80, -66, -48, 
	32, -76, -47, -106, -47, -125, -48, -67, 
	-48, -70, -47, -122, -47, -106, -48, -66, 
	-48, -67, -48, -80, -48, -69, 58, 10, 
	10, -48, 10, 32, 35, 37, 64, 9, 
	13, -97, -95, -92, 10, -48, -47, 10, 
	-75, 10, -47, 10, -128, 10, -48, 10, 
	-75, 10, -48, 10, -76, 10, -47, 10, 
	-125, 10, -48, 10, -68, 10, -48, 10, 
	-66, 10, -48, 10, -78, 10, -48, 10, 
	-80, 10, 10, 58, -128, 10, -48, 10, 
	-72, 10, -48, 10, -70, 10, -48, 10, 
	-69, 10, -48, 10, -80, 10, -48, 10, 
	-76, 10, -48, 10, -72, 10, -47, 10, 
	-126, -122, 10, -47, 10, -128, 10, -47, 
	10, -125, 10, -48, 10, -70, 10, -47, 
	10, -126, 10, -47, 10, -125, 10, -47, 
	10, -128, 10, -48, 10, -80, 10, 10, 
	32, -47, 10, -127, 10, -47, 10, -122, 
	10, -48, 10, -75, 10, -48, 10, -67, 
	10, -48, 10, -80, 10, -47, 10, -128, 
	10, -47, 10, -106, 10, -47, 10, -114, 
	10, -48, 10, -75, 10, -48, 10, -67, 
	10, -48, 10, -80, 10, -47, 10, -128, 
	10, -47, 10, -106, 10, -48, 10, -71, 
	10, -47, 10, -125, 10, -48, 10, -67, 
	10, -48, 10, -70, 10, -47, 10, -122, 
	10, -47, 10, -106, 10, -48, 10, -66, 
	10, -48, 10, -67, 10, -48, 10, -80, 
	10, -48, 10, -69, 10, 10, 95, 10, 
	70, 10, 69, 10, 65, 10, 84, 10, 
	85, 10, 82, 10, 69, 10, 95, 10, 
	69, 10, 78, 10, 68, 10, 95, 10, 
	37, -48, -70, 187, 191, 0
];

var _lexer_single_lengths = [
	0, 10, 10, 1, 2, 2, 9, 1, 
	1, 2, 2, 3, 3, 3, 3, 2, 
	2, 2, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 3, 5, 3, 2, 4, 3, 2, 
	4, 9, 2, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 2, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 7, 11, 2, 9, 3, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 3, 2, 2, 2, 2, 3, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 3, 3, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 1, 1, 1, 1, 2, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 5, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 2, 1, 1, 1, 
	1, 2, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 7, 11, 2, 3, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 3, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 3, 
	3, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 7, 11, 2, 
	3, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 3, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 3, 2, 
	2, 2, 2, 3, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	3, 3, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 1, 
	2, 2, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 6, 4, 3, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 3, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 1, 1, 1, 1, 0
];

var _lexer_range_lengths = [
	0, 1, 0, 0, 0, 0, 1, 0, 
	0, 0, 0, 1, 1, 1, 1, 1, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 1, 1, 1, 1, 0, 0, 
	1, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 0, 0, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0
];

var _lexer_index_offsets = [
	0, 0, 12, 23, 25, 28, 31, 42, 
	44, 46, 49, 52, 57, 62, 67, 72, 
	76, 80, 83, 85, 87, 89, 91, 93, 
	95, 97, 99, 101, 103, 105, 107, 109, 
	111, 113, 118, 125, 130, 134, 140, 144, 
	147, 153, 164, 167, 169, 171, 173, 175, 
	177, 179, 181, 183, 185, 187, 189, 191, 
	193, 195, 197, 199, 201, 203, 205, 207, 
	209, 211, 213, 215, 217, 219, 221, 223, 
	225, 227, 229, 231, 233, 236, 238, 240, 
	242, 244, 246, 248, 250, 252, 254, 256, 
	258, 260, 262, 264, 266, 268, 270, 272, 
	274, 276, 285, 297, 300, 311, 315, 318, 
	321, 324, 327, 330, 333, 336, 339, 342, 
	345, 348, 351, 354, 357, 360, 363, 366, 
	369, 372, 375, 378, 381, 384, 387, 390, 
	393, 396, 399, 402, 405, 408, 411, 414, 
	417, 420, 423, 426, 429, 432, 435, 438, 
	441, 444, 447, 450, 453, 456, 459, 462, 
	465, 468, 472, 475, 478, 481, 484, 488, 
	491, 494, 497, 500, 503, 506, 509, 512, 
	515, 518, 521, 524, 527, 530, 533, 536, 
	539, 542, 545, 548, 551, 554, 557, 560, 
	563, 566, 569, 572, 575, 578, 581, 584, 
	587, 590, 593, 596, 599, 602, 605, 608, 
	611, 614, 617, 620, 623, 627, 631, 634, 
	637, 640, 643, 646, 649, 652, 655, 658, 
	661, 664, 667, 670, 673, 676, 679, 682, 
	685, 688, 691, 694, 697, 700, 703, 706, 
	709, 712, 715, 718, 721, 724, 727, 730, 
	733, 736, 739, 742, 744, 746, 748, 750, 
	753, 755, 757, 759, 761, 763, 765, 767, 
	769, 771, 773, 775, 782, 785, 788, 791, 
	794, 797, 800, 803, 806, 809, 812, 815, 
	818, 821, 824, 827, 830, 833, 836, 839, 
	842, 844, 846, 848, 850, 852, 854, 856, 
	858, 860, 862, 864, 866, 869, 871, 873, 
	875, 877, 880, 882, 884, 886, 888, 890, 
	892, 894, 896, 898, 900, 902, 904, 906, 
	908, 910, 912, 914, 916, 918, 920, 922, 
	924, 926, 928, 930, 932, 934, 936, 938, 
	940, 942, 944, 946, 948, 957, 969, 972, 
	976, 979, 982, 985, 988, 991, 994, 997, 
	1000, 1003, 1006, 1009, 1012, 1015, 1018, 1021, 
	1024, 1027, 1030, 1033, 1036, 1039, 1042, 1045, 
	1048, 1051, 1054, 1057, 1060, 1063, 1066, 1069, 
	1072, 1075, 1078, 1081, 1084, 1087, 1090, 1093, 
	1096, 1099, 1102, 1105, 1108, 1111, 1114, 1117, 
	1120, 1123, 1126, 1129, 1133, 1136, 1139, 1142, 
	1145, 1148, 1151, 1154, 1157, 1160, 1163, 1166, 
	1169, 1172, 1175, 1178, 1181, 1184, 1187, 1190, 
	1194, 1198, 1201, 1204, 1207, 1210, 1213, 1216, 
	1219, 1222, 1225, 1228, 1231, 1234, 1237, 1240, 
	1243, 1246, 1249, 1252, 1255, 1258, 1261, 1264, 
	1267, 1270, 1273, 1276, 1279, 1282, 1285, 1288, 
	1291, 1294, 1297, 1300, 1303, 1306, 1309, 1311, 
	1313, 1315, 1317, 1319, 1321, 1323, 1325, 1327, 
	1329, 1331, 1333, 1335, 1337, 1339, 1348, 1360, 
	1363, 1367, 1370, 1373, 1376, 1379, 1382, 1385, 
	1388, 1391, 1394, 1397, 1400, 1403, 1406, 1409, 
	1412, 1415, 1418, 1421, 1424, 1427, 1430, 1433, 
	1436, 1439, 1442, 1445, 1448, 1451, 1454, 1457, 
	1460, 1463, 1466, 1470, 1473, 1476, 1479, 1482, 
	1485, 1488, 1491, 1494, 1497, 1500, 1503, 1506, 
	1509, 1512, 1515, 1518, 1521, 1524, 1527, 1530, 
	1533, 1536, 1539, 1542, 1545, 1548, 1551, 1554, 
	1557, 1560, 1563, 1566, 1569, 1572, 1575, 1579, 
	1582, 1585, 1588, 1591, 1595, 1598, 1601, 1604, 
	1607, 1610, 1613, 1616, 1619, 1622, 1625, 1628, 
	1631, 1634, 1637, 1640, 1643, 1646, 1649, 1652, 
	1655, 1658, 1661, 1664, 1667, 1670, 1673, 1676, 
	1679, 1682, 1685, 1688, 1691, 1694, 1697, 1700, 
	1703, 1706, 1709, 1712, 1715, 1718, 1721, 1724, 
	1727, 1731, 1735, 1738, 1741, 1744, 1747, 1750, 
	1753, 1756, 1759, 1762, 1765, 1768, 1771, 1774, 
	1777, 1780, 1783, 1786, 1789, 1792, 1795, 1798, 
	1801, 1804, 1807, 1810, 1813, 1816, 1819, 1822, 
	1825, 1828, 1831, 1834, 1837, 1840, 1843, 1846, 
	1848, 1851, 1854, 1856, 1858, 1860, 1862, 1864, 
	1866, 1868, 1870, 1872, 1874, 1876, 1878, 1880, 
	1882, 1884, 1886, 1888, 1890, 1892, 1894, 1896, 
	1898, 1900, 1902, 1910, 1915, 1919, 1922, 1925, 
	1928, 1931, 1934, 1937, 1940, 1943, 1946, 1949, 
	1952, 1955, 1958, 1961, 1964, 1967, 1970, 1973, 
	1976, 1979, 1982, 1985, 1988, 1991, 1994, 1997, 
	2000, 2003, 2006, 2009, 2012, 2015, 2019, 2022, 
	2025, 2028, 2031, 2034, 2037, 2040, 2043, 2046, 
	2049, 2052, 2055, 2058, 2061, 2064, 2067, 2070, 
	2073, 2076, 2079, 2082, 2085, 2088, 2091, 2094, 
	2097, 2100, 2103, 2106, 2109, 2112, 2115, 2118, 
	2121, 2124, 2127, 2130, 2133, 2136, 2139, 2142, 
	2145, 2148, 2151, 2154, 2157, 2160, 2163, 2166, 
	2169, 2172, 2175, 2178, 2181, 2184, 2187, 2190, 
	2193, 2196, 2199, 2202, 2205, 2208, 2211, 2214, 
	2217, 2220, 2223, 2226, 2229, 2232, 2235, 2238, 
	2241, 2244, 2246, 2248, 2250, 2252
];

var _lexer_indicies = [
	1, 3, 2, 4, 5, 6, 7, 8, 
	9, 10, 2, 0, 11, 12, 13, 14, 
	15, 16, 17, 18, 19, 20, 0, 21, 
	0, 23, 24, 22, 26, 27, 25, 1, 
	3, 2, 4, 5, 6, 7, 8, 9, 
	2, 0, 28, 0, 29, 0, 31, 32, 
	30, 34, 35, 33, 38, 37, 39, 37, 
	36, 42, 41, 43, 41, 40, 42, 41, 
	44, 41, 40, 42, 41, 45, 41, 40, 
	47, 46, 46, 0, 3, 48, 48, 0, 
	50, 51, 49, 3, 0, 52, 0, 53, 
	0, 54, 0, 55, 0, 56, 0, 57, 
	0, 58, 0, 59, 0, 60, 0, 61, 
	0, 62, 0, 63, 0, 64, 0, 65, 
	0, 0, 0, 0, 0, 66, 67, 68, 
	67, 67, 70, 69, 66, 3, 71, 8, 
	71, 0, 72, 73, 72, 0, 76, 75, 
	77, 78, 75, 74, 0, 80, 81, 79, 
	0, 80, 79, 76, 82, 80, 81, 82, 
	79, 83, 76, 84, 85, 86, 87, 88, 
	89, 90, 84, 0, 91, 92, 0, 93, 
	0, 94, 0, 11, 0, 95, 0, 96, 
	0, 97, 0, 98, 0, 99, 0, 100, 
	0, 101, 0, 102, 0, 103, 0, 11, 
	0, 104, 0, 105, 0, 106, 0, 107, 
	0, 108, 0, 11, 0, 109, 0, 110, 
	0, 111, 0, 112, 0, 113, 0, 11, 
	0, 114, 0, 115, 0, 116, 0, 117, 
	0, 118, 0, 119, 0, 120, 0, 11, 
	0, 121, 122, 0, 123, 0, 124, 0, 
	125, 0, 126, 0, 127, 0, 128, 0, 
	129, 0, 130, 0, 131, 0, 132, 0, 
	133, 0, 134, 0, 135, 0, 136, 0, 
	137, 0, 138, 0, 139, 0, 140, 0, 
	142, 141, 144, 143, 145, 144, 146, 147, 
	148, 149, 147, 146, 143, 150, 151, 152, 
	153, 154, 155, 156, 157, 158, 159, 144, 
	143, 144, 160, 143, 161, 163, 162, 164, 
	165, 166, 167, 168, 169, 162, 0, 170, 
	144, 171, 143, 172, 144, 143, 173, 144, 
	143, 150, 144, 143, 174, 144, 143, 175, 
	144, 143, 176, 144, 143, 177, 144, 143, 
	178, 144, 143, 179, 144, 143, 180, 144, 
	143, 181, 144, 143, 182, 144, 143, 150, 
	144, 143, 183, 144, 143, 184, 144, 143, 
	185, 144, 143, 186, 144, 143, 187, 144, 
	143, 150, 144, 143, 188, 144, 143, 189, 
	144, 143, 190, 144, 143, 191, 144, 143, 
	192, 144, 143, 150, 144, 143, 193, 144, 
	143, 194, 144, 143, 195, 144, 143, 196, 
	144, 143, 197, 144, 143, 198, 144, 143, 
	199, 144, 143, 150, 144, 143, 200, 144, 
	143, 201, 144, 143, 202, 144, 143, 203, 
	144, 143, 204, 144, 143, 205, 144, 143, 
	206, 144, 143, 207, 144, 143, 208, 144, 
	143, 209, 144, 143, 210, 144, 143, 211, 
	144, 143, 212, 144, 143, 213, 144, 143, 
	214, 144, 143, 215, 144, 143, 216, 144, 
	143, 217, 144, 143, 144, 160, 218, 143, 
	144, 219, 143, 220, 144, 143, 186, 144, 
	143, 221, 144, 143, 222, 223, 144, 143, 
	224, 144, 143, 225, 144, 143, 226, 144, 
	143, 227, 144, 143, 228, 144, 143, 229, 
	144, 143, 230, 144, 143, 231, 144, 143, 
	232, 144, 143, 233, 144, 143, 234, 144, 
	143, 235, 144, 143, 236, 144, 143, 237, 
	144, 143, 144, 238, 143, 239, 144, 143, 
	240, 144, 143, 241, 144, 143, 242, 144, 
	143, 243, 144, 143, 244, 144, 143, 245, 
	144, 143, 246, 144, 143, 247, 144, 143, 
	248, 144, 143, 249, 144, 143, 250, 144, 
	143, 251, 144, 143, 252, 144, 143, 253, 
	144, 143, 254, 144, 143, 144, 160, 143, 
	255, 144, 143, 256, 144, 143, 257, 144, 
	143, 258, 144, 143, 259, 144, 143, 260, 
	144, 143, 261, 144, 143, 262, 144, 143, 
	263, 144, 143, 264, 144, 143, 265, 144, 
	143, 254, 144, 143, 266, 144, 143, 150, 
	267, 144, 143, 268, 144, 160, 143, 269, 
	144, 143, 270, 144, 143, 150, 144, 143, 
	271, 144, 143, 272, 144, 143, 273, 144, 
	143, 274, 144, 143, 275, 144, 143, 276, 
	144, 143, 277, 144, 143, 278, 144, 143, 
	279, 144, 143, 280, 144, 143, 281, 144, 
	143, 282, 144, 143, 283, 144, 143, 284, 
	144, 143, 285, 144, 143, 286, 144, 143, 
	287, 144, 143, 254, 144, 143, 288, 144, 
	143, 219, 144, 143, 144, 289, 143, 144, 
	290, 143, 144, 291, 143, 144, 292, 143, 
	144, 293, 143, 144, 294, 143, 144, 295, 
	143, 144, 296, 143, 144, 297, 143, 144, 
	298, 143, 144, 299, 143, 144, 300, 143, 
	144, 301, 143, 144, 302, 143, 303, 0, 
	304, 0, 305, 0, 306, 0, 307, 308, 
	0, 309, 0, 310, 0, 311, 0, 312, 
	0, 313, 0, 314, 0, 315, 0, 316, 
	0, 317, 0, 319, 318, 321, 320, 322, 
	321, 323, 324, 324, 323, 320, 325, 321, 
	320, 326, 321, 320, 327, 321, 320, 328, 
	321, 320, 329, 321, 320, 330, 321, 320, 
	331, 321, 320, 332, 321, 320, 333, 321, 
	320, 334, 321, 320, 335, 321, 320, 336, 
	321, 320, 337, 321, 320, 338, 321, 320, 
	339, 321, 320, 340, 321, 320, 341, 321, 
	320, 342, 321, 320, 343, 321, 320, 321, 
	344, 320, 345, 0, 346, 0, 347, 0, 
	348, 0, 349, 0, 350, 0, 351, 0, 
	352, 0, 353, 0, 354, 0, 355, 0, 
	356, 0, 21, 357, 0, 358, 0, 359, 
	0, 107, 0, 360, 0, 361, 362, 0, 
	363, 0, 364, 0, 365, 0, 366, 0, 
	367, 0, 368, 0, 369, 0, 370, 0, 
	371, 0, 372, 0, 373, 0, 374, 0, 
	375, 0, 376, 0, 377, 0, 378, 0, 
	379, 0, 380, 0, 381, 0, 382, 0, 
	383, 0, 384, 0, 385, 0, 386, 0, 
	387, 0, 388, 0, 389, 0, 390, 0, 
	391, 0, 392, 0, 393, 0, 394, 0, 
	396, 395, 398, 397, 399, 398, 400, 401, 
	402, 403, 401, 400, 397, 404, 405, 406, 
	407, 408, 409, 410, 411, 412, 413, 398, 
	397, 398, 414, 397, 415, 398, 416, 397, 
	417, 398, 397, 418, 398, 397, 404, 398, 
	397, 419, 398, 397, 420, 398, 397, 421, 
	398, 397, 422, 398, 397, 423, 398, 397, 
	424, 398, 397, 425, 398, 397, 426, 398, 
	397, 427, 398, 397, 404, 398, 397, 428, 
	398, 397, 429, 398, 397, 430, 398, 397, 
	431, 398, 397, 432, 398, 397, 404, 398, 
	397, 433, 398, 397, 434, 398, 397, 435, 
	398, 397, 436, 398, 397, 437, 398, 397, 
	404, 398, 397, 438, 398, 397, 439, 398, 
	397, 440, 398, 397, 441, 398, 397, 442, 
	398, 397, 443, 398, 397, 444, 398, 397, 
	404, 398, 397, 445, 398, 397, 446, 398, 
	397, 447, 398, 397, 448, 398, 397, 449, 
	398, 397, 450, 398, 397, 451, 398, 397, 
	452, 398, 397, 453, 398, 397, 454, 398, 
	397, 455, 398, 397, 456, 398, 397, 457, 
	398, 397, 458, 398, 397, 459, 398, 397, 
	460, 398, 397, 461, 398, 397, 462, 398, 
	397, 398, 414, 463, 397, 398, 464, 397, 
	465, 398, 397, 431, 398, 397, 466, 398, 
	397, 467, 398, 397, 468, 398, 397, 469, 
	398, 397, 470, 398, 397, 471, 398, 397, 
	472, 398, 397, 473, 398, 397, 474, 398, 
	397, 475, 398, 397, 476, 398, 397, 477, 
	398, 397, 478, 398, 397, 479, 398, 397, 
	398, 414, 397, 480, 398, 397, 404, 481, 
	398, 397, 482, 398, 414, 397, 483, 398, 
	397, 484, 398, 397, 404, 398, 397, 485, 
	398, 397, 486, 398, 397, 487, 398, 397, 
	488, 398, 397, 489, 398, 397, 490, 398, 
	397, 491, 398, 397, 492, 398, 397, 493, 
	398, 397, 494, 398, 397, 495, 398, 397, 
	496, 398, 397, 497, 398, 397, 498, 398, 
	397, 499, 398, 397, 500, 398, 397, 501, 
	398, 397, 479, 398, 397, 502, 398, 397, 
	464, 398, 397, 398, 503, 397, 398, 504, 
	397, 398, 505, 397, 398, 506, 397, 398, 
	507, 397, 398, 508, 397, 398, 509, 397, 
	398, 510, 397, 398, 511, 397, 398, 512, 
	397, 398, 513, 397, 398, 514, 397, 398, 
	515, 397, 398, 516, 397, 517, 0, 518, 
	0, 519, 0, 520, 0, 521, 0, 522, 
	0, 523, 0, 524, 0, 525, 0, 526, 
	0, 527, 0, 528, 0, 529, 0, 531, 
	530, 533, 532, 534, 533, 535, 536, 537, 
	538, 536, 535, 532, 539, 540, 541, 542, 
	543, 544, 545, 546, 547, 548, 533, 532, 
	533, 549, 532, 550, 533, 551, 532, 552, 
	533, 532, 553, 533, 532, 539, 533, 532, 
	554, 533, 532, 555, 533, 532, 556, 533, 
	532, 557, 533, 532, 558, 533, 532, 559, 
	533, 532, 560, 533, 532, 561, 533, 532, 
	562, 533, 532, 539, 533, 532, 563, 533, 
	532, 564, 533, 532, 565, 533, 532, 566, 
	533, 532, 567, 533, 532, 539, 533, 532, 
	568, 533, 532, 569, 533, 532, 570, 533, 
	532, 571, 533, 532, 572, 533, 532, 539, 
	533, 532, 573, 533, 532, 574, 533, 532, 
	575, 533, 532, 576, 533, 532, 577, 533, 
	532, 578, 533, 532, 579, 533, 532, 539, 
	533, 532, 580, 581, 533, 532, 582, 533, 
	532, 583, 533, 532, 584, 533, 532, 585, 
	533, 532, 586, 533, 532, 587, 533, 532, 
	588, 533, 532, 589, 533, 532, 590, 533, 
	532, 591, 533, 532, 592, 533, 532, 593, 
	533, 532, 594, 533, 532, 595, 533, 532, 
	596, 533, 532, 597, 533, 532, 598, 533, 
	532, 533, 549, 532, 599, 533, 532, 600, 
	533, 532, 601, 533, 532, 602, 533, 532, 
	603, 533, 532, 604, 533, 532, 605, 533, 
	532, 606, 533, 532, 607, 533, 532, 608, 
	533, 532, 609, 533, 532, 610, 533, 532, 
	611, 533, 532, 612, 533, 532, 613, 533, 
	532, 614, 533, 532, 615, 533, 532, 533, 
	549, 616, 532, 533, 617, 532, 618, 533, 
	532, 566, 533, 532, 619, 533, 532, 620, 
	621, 533, 532, 622, 533, 532, 623, 533, 
	532, 624, 533, 532, 625, 533, 532, 626, 
	533, 532, 627, 533, 532, 628, 533, 532, 
	629, 533, 532, 630, 533, 532, 631, 533, 
	532, 632, 533, 532, 633, 533, 532, 634, 
	533, 532, 635, 533, 532, 533, 636, 532, 
	637, 533, 532, 638, 533, 532, 639, 533, 
	532, 640, 533, 532, 641, 533, 532, 642, 
	533, 532, 643, 533, 532, 644, 533, 532, 
	645, 533, 532, 646, 533, 532, 647, 533, 
	532, 648, 533, 532, 649, 533, 532, 650, 
	533, 532, 651, 533, 532, 598, 533, 532, 
	652, 533, 532, 653, 533, 532, 654, 533, 
	532, 655, 533, 532, 656, 533, 532, 657, 
	533, 532, 658, 533, 532, 659, 533, 532, 
	660, 533, 532, 661, 533, 532, 662, 533, 
	532, 598, 533, 532, 663, 533, 532, 539, 
	664, 533, 532, 665, 533, 549, 532, 666, 
	533, 532, 667, 533, 532, 539, 533, 532, 
	668, 533, 532, 669, 533, 532, 670, 533, 
	532, 671, 533, 532, 672, 533, 532, 673, 
	533, 532, 674, 533, 532, 675, 533, 532, 
	676, 533, 532, 677, 533, 532, 678, 533, 
	532, 679, 533, 532, 680, 533, 532, 681, 
	533, 532, 682, 533, 532, 683, 533, 532, 
	684, 533, 532, 598, 533, 532, 685, 533, 
	532, 617, 533, 532, 533, 686, 532, 533, 
	687, 532, 533, 688, 532, 533, 689, 532, 
	533, 690, 532, 533, 691, 532, 533, 692, 
	532, 533, 693, 532, 533, 694, 532, 533, 
	695, 532, 533, 696, 532, 533, 697, 532, 
	533, 698, 532, 533, 699, 532, 700, 0, 
	11, 701, 0, 702, 21, 0, 703, 0, 
	704, 0, 11, 0, 705, 0, 706, 0, 
	707, 0, 708, 0, 709, 0, 710, 0, 
	711, 0, 712, 0, 713, 0, 714, 0, 
	715, 0, 716, 0, 717, 0, 718, 0, 
	719, 0, 720, 0, 721, 0, 722, 0, 
	723, 0, 725, 724, 727, 726, 728, 727, 
	729, 730, 731, 730, 729, 726, 732, 733, 
	734, 727, 726, 735, 736, 727, 726, 737, 
	727, 726, 738, 727, 726, 739, 727, 726, 
	740, 727, 726, 741, 727, 726, 742, 727, 
	726, 743, 727, 726, 744, 727, 726, 745, 
	727, 726, 746, 727, 726, 747, 727, 726, 
	748, 727, 726, 749, 727, 726, 750, 727, 
	726, 751, 727, 726, 752, 727, 726, 753, 
	727, 726, 727, 754, 726, 755, 727, 726, 
	756, 727, 726, 757, 727, 726, 758, 727, 
	726, 759, 727, 726, 760, 727, 726, 761, 
	727, 726, 762, 727, 726, 763, 727, 726, 
	764, 727, 726, 765, 727, 726, 766, 727, 
	726, 753, 727, 726, 767, 727, 726, 768, 
	769, 727, 726, 770, 727, 726, 771, 727, 
	726, 772, 727, 726, 773, 727, 726, 774, 
	727, 726, 775, 727, 726, 776, 727, 726, 
	777, 727, 726, 778, 727, 726, 779, 727, 
	726, 780, 727, 726, 781, 727, 726, 782, 
	727, 726, 783, 727, 726, 727, 784, 726, 
	785, 727, 726, 786, 727, 726, 787, 727, 
	726, 788, 727, 726, 789, 727, 726, 790, 
	727, 726, 791, 727, 726, 792, 727, 726, 
	793, 727, 726, 794, 727, 726, 795, 727, 
	726, 796, 727, 726, 797, 727, 726, 798, 
	727, 726, 799, 727, 726, 753, 727, 726, 
	800, 727, 726, 801, 727, 726, 802, 727, 
	726, 803, 727, 726, 804, 727, 726, 805, 
	727, 726, 806, 727, 726, 807, 727, 726, 
	808, 727, 726, 809, 727, 726, 810, 727, 
	726, 753, 727, 726, 811, 727, 726, 812, 
	727, 726, 813, 727, 726, 814, 727, 726, 
	815, 727, 726, 816, 727, 726, 817, 727, 
	726, 818, 727, 726, 819, 727, 726, 820, 
	727, 726, 821, 727, 726, 822, 727, 726, 
	823, 727, 726, 824, 727, 726, 825, 727, 
	726, 826, 727, 726, 827, 727, 726, 753, 
	727, 726, 727, 828, 726, 727, 829, 726, 
	727, 830, 726, 727, 831, 726, 727, 832, 
	726, 727, 833, 726, 727, 834, 726, 727, 
	835, 726, 727, 836, 726, 727, 837, 726, 
	727, 838, 726, 727, 839, 726, 727, 840, 
	726, 727, 841, 726, 842, 0, 358, 0, 
	843, 0, 2, 0, 844, 0
];

var _lexer_trans_targs = [
	0, 2, 6, 6, 7, 17, 19, 3, 
	33, 36, 763, 3, 42, 56, 62, 68, 
	76, 296, 623, 629, 761, 4, 5, 6, 
	18, 5, 6, 18, 8, 9, 10, 11, 
	10, 10, 11, 10, 12, 12, 12, 13, 
	12, 12, 12, 13, 14, 15, 16, 6, 
	16, 17, 6, 18, 20, 21, 22, 23, 
	24, 25, 26, 27, 28, 29, 30, 31, 
	32, 765, 34, 35, 6, 34, 33, 35, 
	36, 37, 38, 40, 41, 39, 37, 38, 
	39, 37, 40, 2, 41, 7, 17, 19, 
	3, 33, 36, 43, 46, 44, 45, 47, 
	48, 49, 50, 51, 52, 53, 54, 55, 
	57, 58, 59, 60, 61, 63, 64, 65, 
	66, 67, 69, 70, 71, 72, 73, 74, 
	75, 77, 243, 78, 79, 80, 81, 82, 
	83, 84, 85, 86, 87, 88, 89, 90, 
	91, 92, 93, 94, 95, 96, 97, 96, 
	97, 98, 97, 6, 229, 99, 99, 101, 
	115, 121, 127, 135, 157, 203, 209, 227, 
	100, 2, 6, 6, 7, 17, 19, 3, 
	33, 36, 102, 105, 103, 104, 106, 107, 
	108, 109, 110, 111, 112, 113, 114, 116, 
	117, 118, 119, 120, 122, 123, 124, 125, 
	126, 128, 129, 130, 131, 132, 133, 134, 
	136, 137, 138, 139, 140, 141, 142, 143, 
	144, 145, 146, 147, 148, 149, 150, 151, 
	152, 153, 154, 155, 156, 158, 159, 191, 
	160, 161, 162, 163, 164, 165, 166, 167, 
	168, 169, 170, 171, 172, 173, 174, 175, 
	176, 177, 178, 179, 180, 181, 182, 183, 
	184, 185, 186, 187, 188, 189, 190, 192, 
	193, 194, 195, 196, 197, 198, 199, 200, 
	201, 202, 204, 205, 206, 207, 208, 210, 
	211, 212, 213, 214, 215, 216, 217, 218, 
	219, 220, 221, 222, 223, 224, 225, 226, 
	228, 230, 231, 232, 233, 234, 235, 236, 
	237, 238, 239, 240, 241, 242, 6, 244, 
	245, 246, 247, 248, 280, 249, 250, 251, 
	252, 253, 254, 255, 256, 257, 258, 259, 
	258, 259, 260, 259, 6, 261, 262, 263, 
	264, 265, 266, 267, 268, 269, 270, 271, 
	272, 273, 274, 275, 276, 277, 278, 279, 
	100, 281, 282, 283, 284, 285, 286, 287, 
	288, 289, 290, 291, 292, 293, 294, 295, 
	297, 298, 446, 299, 300, 301, 302, 303, 
	304, 305, 306, 307, 308, 309, 310, 311, 
	312, 313, 314, 315, 316, 317, 318, 319, 
	320, 321, 322, 323, 324, 325, 326, 327, 
	328, 329, 330, 331, 332, 331, 332, 333, 
	332, 6, 432, 334, 334, 335, 349, 355, 
	361, 369, 391, 406, 412, 430, 100, 336, 
	339, 337, 338, 340, 341, 342, 343, 344, 
	345, 346, 347, 348, 350, 351, 352, 353, 
	354, 356, 357, 358, 359, 360, 362, 363, 
	364, 365, 366, 367, 368, 370, 371, 372, 
	373, 374, 375, 376, 377, 378, 379, 380, 
	381, 382, 383, 384, 385, 386, 387, 388, 
	389, 390, 392, 393, 394, 395, 396, 397, 
	398, 399, 400, 401, 402, 403, 404, 405, 
	407, 408, 409, 410, 411, 413, 414, 415, 
	416, 417, 418, 419, 420, 421, 422, 423, 
	424, 425, 426, 427, 428, 429, 431, 433, 
	434, 435, 436, 437, 438, 439, 440, 441, 
	442, 443, 444, 445, 6, 447, 448, 449, 
	450, 451, 452, 453, 454, 455, 456, 457, 
	458, 459, 460, 461, 460, 461, 462, 461, 
	6, 609, 463, 463, 464, 478, 484, 490, 
	498, 538, 583, 589, 607, 100, 465, 468, 
	466, 467, 469, 470, 471, 472, 473, 474, 
	475, 476, 477, 479, 480, 481, 482, 483, 
	485, 486, 487, 488, 489, 491, 492, 493, 
	494, 495, 496, 497, 499, 517, 500, 501, 
	502, 503, 504, 505, 506, 507, 508, 509, 
	510, 511, 512, 513, 514, 515, 516, 518, 
	519, 520, 521, 522, 523, 524, 525, 526, 
	527, 528, 529, 530, 531, 532, 533, 534, 
	535, 536, 537, 539, 540, 571, 541, 542, 
	543, 544, 545, 546, 547, 548, 549, 550, 
	551, 552, 553, 554, 555, 556, 557, 558, 
	559, 560, 561, 562, 563, 564, 565, 566, 
	567, 568, 569, 570, 572, 573, 574, 575, 
	576, 577, 578, 579, 580, 581, 582, 584, 
	585, 586, 587, 588, 590, 591, 592, 593, 
	594, 595, 596, 597, 598, 599, 600, 601, 
	602, 603, 604, 605, 606, 608, 610, 611, 
	612, 613, 614, 615, 616, 617, 618, 619, 
	620, 621, 622, 6, 624, 625, 626, 627, 
	628, 630, 631, 632, 633, 634, 635, 636, 
	637, 638, 639, 640, 641, 642, 643, 644, 
	645, 646, 647, 648, 649, 650, 649, 650, 
	651, 650, 6, 747, 652, 684, 729, 653, 
	671, 654, 655, 656, 657, 658, 659, 660, 
	661, 662, 663, 664, 665, 666, 667, 668, 
	669, 670, 100, 672, 673, 674, 675, 676, 
	677, 678, 679, 680, 681, 682, 683, 685, 
	686, 717, 687, 688, 689, 690, 691, 692, 
	693, 694, 695, 696, 697, 698, 699, 700, 
	701, 702, 703, 704, 705, 706, 707, 708, 
	709, 710, 711, 712, 713, 714, 715, 716, 
	718, 719, 720, 721, 722, 723, 724, 725, 
	726, 727, 728, 730, 731, 732, 733, 734, 
	735, 736, 737, 738, 739, 740, 741, 742, 
	743, 744, 745, 746, 748, 749, 750, 751, 
	752, 753, 754, 755, 756, 757, 758, 759, 
	760, 6, 762, 764, 0
];

var _lexer_trans_actions = [
	43, 29, 0, 54, 3, 1, 0, 29, 
	1, 35, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 57, 149, 
	126, 0, 110, 23, 0, 0, 7, 139, 
	48, 0, 102, 9, 5, 45, 134, 45, 
	0, 33, 122, 33, 33, 0, 11, 106, 
	0, 0, 114, 25, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 27, 118, 27, 51, 0, 
	0, 0, 37, 37, 54, 37, 87, 0, 
	0, 39, 0, 96, 0, 93, 90, 41, 
	96, 90, 99, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 57, 144, 0, 
	54, 84, 0, 72, 33, 84, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	15, 63, 31, 130, 60, 57, 31, 63, 
	57, 66, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 15, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 57, 144, 
	0, 54, 84, 0, 81, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	21, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 57, 144, 0, 54, 84, 
	0, 78, 33, 84, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 19, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 19, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 57, 144, 0, 54, 84, 0, 
	75, 33, 84, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 17, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 17, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 57, 144, 0, 54, 
	84, 0, 69, 33, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 13, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 13, 0, 0, 0
];

var _lexer_eof_actions = [
	0, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43
];

var lexer_start = 1;
var lexer_first_final = 765;
var lexer_error = 0;

var lexer_en_main = 1;


/* line 129 "ragel/i18n/uk.js.rl" */

/* line 130 "ragel/i18n/uk.js.rl" */

/* line 131 "ragel/i18n/uk.js.rl" */

/* line 132 "ragel/i18n/uk.js.rl" */

var Lexer = function(listener) {
  // Check that listener has the required functions
  var events = ['comment', 'tag', 'feature', 'background', 'scenario', 'scenario_outline', 'examples', 'step', 'doc_string', 'row', 'eof'];
  for(var i=0, len=events.length; i<len; i++) {
    var event = events[i];
    if(typeof listener[event] != 'function') {
      throw new Error("Error. No " + event + " function exists on " + JSON.stringify(listener));
    }
  }
  this.listener = listener;
};

Lexer.prototype.scan = function(data) {
  var ending = "\n%_FEATURE_END_%";
  if(typeof data == 'string') {
    data = this.stringToBytes(data + ending);
  } else if(typeof Buffer != 'undefined' && Buffer.isBuffer(data)) {
    // Node.js
    var buf = new Buffer(data.length + ending.length);
    data.copy(buf, 0, 0);
    new Buffer(ending).copy(buf, data.length, 0);
    data = buf;
  }
  var eof = pe = data.length;
  var p = 0;

  this.line_number = 1;
  this.last_newline = 0;
  var signedCharValue=function(v){return v > 127 ? v-256 : v; };

  
/* line 1271 "js/lib/gherkin/lexer/uk.js" */
{
	  this.cs = lexer_start;
} /* JSCodeGen::writeInit */

/* line 164 "ragel/i18n/uk.js.rl" */
  
/* line 1278 "js/lib/gherkin/lexer/uk.js" */
{
	var _klen, _trans, _keys, _ps, _widec, _acts, _nacts;
	var _goto_level, _resume, _eof_trans, _again, _test_eof;
	var _out;
	_klen = _trans = _keys = _acts = _nacts = null;
	_goto_level = 0;
	_resume = 10;
	_eof_trans = 15;
	_again = 20;
	_test_eof = 30;
	_out = 40;
	while (true) {
	_trigger_goto = false;
	if (_goto_level <= 0) {
	if (p == pe) {
		_goto_level = _test_eof;
		continue;
	}
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	}
	if (_goto_level <= _resume) {
	_keys = _lexer_key_offsets[ this.cs];
	_trans = _lexer_index_offsets[ this.cs];
	_klen = _lexer_single_lengths[ this.cs];
	_break_match = false;
	
	do {
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + _klen - 1;

	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + ( (_upper - _lower) >> 1 );

	        if (( signedCharValue(data[p])) < _lexer_trans_keys[_mid]) {
	           _upper = _mid - 1;
	        } else if (( signedCharValue(data[p])) > _lexer_trans_keys[_mid]) {
	           _lower = _mid + 1;
	        } else {
	           _trans += (_mid - _keys);
	           _break_match = true;
	           break;
	        };
	     } /* while */
	     if (_break_match) { break; }
	     _keys += _klen;
	     _trans += _klen;
	  }
	  _klen = _lexer_range_lengths[ this.cs];
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + (_klen << 1) - 2;
	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + (((_upper-_lower) >> 1) & ~1);
	        if (( signedCharValue(data[p])) < _lexer_trans_keys[_mid]) {
	          _upper = _mid - 2;
	         } else if (( signedCharValue(data[p])) > _lexer_trans_keys[_mid+1]) {
	          _lower = _mid + 2;
	        } else {
	          _trans += ((_mid - _keys) >> 1);
	          _break_match = true;
	          break;
	        }
	     } /* while */
	     if (_break_match) { break; }
	     _trans += _klen
	  }
	} while (false);
	_trans = _lexer_indicies[_trans];
	 this.cs = _lexer_trans_targs[_trans];
	if (_lexer_trans_actions[_trans] != 0) {
		_acts = _lexer_trans_actions[_trans];
		_nacts = _lexer_actions[_acts];
		_acts += 1;
		while (_nacts > 0) {
			_nacts -= 1;
			_acts += 1;
			switch (_lexer_actions[_acts - 1]) {
case 0:
/* line 6 "ragel/i18n/uk.js.rl" */

    this.content_start = p;
    this.current_line = this.line_number;
    this.start_col = p - this.last_newline - (this.keyword+':').length;
  		break;
case 1:
/* line 12 "ragel/i18n/uk.js.rl" */

    this.current_line = this.line_number;
    this.start_col = p - this.last_newline;
  		break;
case 2:
/* line 17 "ragel/i18n/uk.js.rl" */

    this.content_start = p;
  		break;
case 3:
/* line 21 "ragel/i18n/uk.js.rl" */

    this.docstring_content_type_start = p;
  		break;
case 4:
/* line 25 "ragel/i18n/uk.js.rl" */

    this.docstring_content_type_end = p;
  		break;
case 5:
/* line 29 "ragel/i18n/uk.js.rl" */

    var con = this.unindent(
      this.start_col, 
      this.bytesToString(data.slice(this.content_start, this.next_keyword_start-1)).replace(/(\r?\n)?([\t ])*$/, '').replace(/\\\"\\\"\\\"/mg, '"""')
    );
    var con_type = this.bytesToString(data.slice(this.docstring_content_type_start, this.docstring_content_type_end)).trim();
    this.listener.doc_string(con_type, con, this.current_line); 
  		break;
case 6:
/* line 38 "ragel/i18n/uk.js.rl" */

    p = this.store_keyword_content('feature', data, p, eof);
  		break;
case 7:
/* line 42 "ragel/i18n/uk.js.rl" */

    p = this.store_keyword_content('background', data, p, eof);
  		break;
case 8:
/* line 46 "ragel/i18n/uk.js.rl" */

    p = this.store_keyword_content('scenario', data, p, eof);
  		break;
case 9:
/* line 50 "ragel/i18n/uk.js.rl" */

    p = this.store_keyword_content('scenario_outline', data, p, eof);
  		break;
case 10:
/* line 54 "ragel/i18n/uk.js.rl" */

    p = this.store_keyword_content('examples', data, p, eof);
  		break;
case 11:
/* line 58 "ragel/i18n/uk.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.step(this.keyword, con, this.current_line);
  		break;
case 12:
/* line 63 "ragel/i18n/uk.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.comment(con, this.line_number);
    this.keyword_start = null;
  		break;
case 13:
/* line 69 "ragel/i18n/uk.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.tag(con, this.line_number);
    this.keyword_start = null;
  		break;
case 14:
/* line 75 "ragel/i18n/uk.js.rl" */

    this.line_number++;
  		break;
case 15:
/* line 79 "ragel/i18n/uk.js.rl" */

    this.last_newline = p + 1;
  		break;
case 16:
/* line 83 "ragel/i18n/uk.js.rl" */

    this.keyword_start = this.keyword_start || p;
  		break;
case 17:
/* line 87 "ragel/i18n/uk.js.rl" */

    this.keyword = this.bytesToString(data.slice(this.keyword_start, p)).replace(/:$/, '');
    this.keyword_start = null;
  		break;
case 18:
/* line 92 "ragel/i18n/uk.js.rl" */

    this.next_keyword_start = p;
  		break;
case 19:
/* line 96 "ragel/i18n/uk.js.rl" */

    p = p - 1;
    current_row = [];
    this.current_line = this.line_number;
  		break;
case 20:
/* line 102 "ragel/i18n/uk.js.rl" */

    this.content_start = p;
  		break;
case 21:
/* line 106 "ragel/i18n/uk.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    current_row.push(con.replace(/\\\|/, "|").replace(/\\n/, "\n").replace(/\\\\/, "\\"));
  		break;
case 22:
/* line 111 "ragel/i18n/uk.js.rl" */

    this.listener.row(current_row, this.current_line);
  		break;
case 23:
/* line 115 "ragel/i18n/uk.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw new Error("Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.");
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 1505 "js/lib/gherkin/lexer/uk.js" */
			} /* action switch */
		}
	}
	if (_trigger_goto) {
		continue;
	}
	}
	if (_goto_level <= _again) {
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	p += 1;
	if (p != pe) {
		_goto_level = _resume;
		continue;
	}
	}
	if (_goto_level <= _test_eof) {
	if (p == eof) {
	__acts = _lexer_eof_actions[ this.cs];
	__nacts =  _lexer_actions[__acts];
	__acts += 1;
	while (__nacts > 0) {
		__nacts -= 1;
		__acts += 1;
		switch (_lexer_actions[__acts - 1]) {
case 23:
/* line 115 "ragel/i18n/uk.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw new Error("Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.");
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 1544 "js/lib/gherkin/lexer/uk.js" */
		} /* eof action switch */
	}
	if (_trigger_goto) {
		continue;
	}
}
	}
	if (_goto_level <= _out) {
		break;
	}
	}
	}

/* line 165 "ragel/i18n/uk.js.rl" */
};


/*
 * Decode utf-8 byte sequence to string.
 */
var decodeUtf8 = function(bytes) {
  var result = "";
  var i = 0;
  var wc;
  var c;

  while (i < bytes.length) {
    /* parse as UTF-8 lead byte */
    wc = bytes[i++];
    if (wc < 0x80) {
      count = 0;
    } else if (wc < 0xC2 || wc >= 0xF8) {
      throw new Error("input is not a valid UTF-8 lead octet");
    } else if (wc < 0xE0) {
      count = 1;
      wc = (wc & 0x1F) << 6;
    } else if (wc < 0xF0) {
      count = 2;
      wc = (wc & 0x0F) << 12;
    } else /* wc < 0xF8 */ {
      count = 3;
      wc = (wc & 0x07) << 18;
    }

    /* parse trail bytes, if any */
    while (count) {
      if (!(i < bytes.length)) {
        throw new Error("short read");
      }
      if ((c = bytes[i++] ^ 0x80) > 0x3F) {
        throw new Error("input is not a valid UTF-8 trail octet");
      }
      wc |= c << (6 * --count);
      if (wc < (1 << (5 * count + 6))) {
        throw new Error("invalid non-minimal encoded input");
      }
    }

    /* handle conversion to UTF-16 if needed */
    if (wc > 0xFFFF) {
      wc -= 0x10000;
      result += String.fromCharCode(0xD800 + (wc >> 10));
      wc = 0xDC00 + (wc & 0x3FF);
    }
    result += String.fromCharCode(wc);
  }

  return result;
};

/*
 * Encode string to an array of bytes using utf8 encoding.
 *
 * Javascript internally stores character data as utf16 (like java).
 * String.charCodeAt() does *not* produce unicode points, but simply
 * reflects this internal representation. Thus, it is necessary
 * to first decode the utf-16 representation before encoding to
 * utf-8.
 */
var encodeUtf8 = function(string) {
  var bytes = [];
  var i = 0;
  var j = 0;
  var wc;

  while (i < string.length) {
    wc = string.charCodeAt(i++);
    if (wc >= 0xD800 && wc <= 0xDBFF && i < string.length && string.charCodeAt(i) >= 0xDC00 && string.charCodeAt(i) <= 0xDFFF) {
      /* decode UTF-16 */
      wc = 0x10000 + ((wc & 0x3FF) << 10) + (string.charCodeAt(i++) & 0x3FF);
    }

    /* emit lead byte */
    if (wc < 0x80) {
      bytes[j++] = wc;
      count = 0;
    } else if (wc < 0x800) {
      bytes[j++] = 0xC0 | (wc >> 6);
      count = 1;
    } else if (wc < 0x10000) {
      bytes[j++] = 0xE0 | (wc >> 12);
      count = 2;
    } else {
      /* SMP: 21-bit Unicode */
      bytes[j++] = 0xF0 | (wc >> 18);
      count = 3;
    }

    /* emit trail bytes, if any */
    while (count) {
      bytes[j++] = 0x80 | ((wc >> (6 * --count)) & 0x3F);
    }
  }

  return bytes;

};

Lexer.prototype.bytesToString = function(bytes) {
  if(typeof bytes.write == 'function') {
    // Node.js
    return bytes.toString('utf-8');
  }
  return decodeUtf8(bytes);
};

Lexer.prototype.stringToBytes = function(string) {
  return encodeUtf8(string);
};

Lexer.prototype.unindent = function(startcol, text) {
  startcol = startcol || 0;
  return text.replace(new RegExp('^[\t ]{0,' + startcol + '}', 'gm'), ''); 
};

Lexer.prototype.store_keyword_content = function(event, data, p, eof) {
  var end_point = (!this.next_keyword_start || (p == eof)) ? p : this.next_keyword_start;
  var content = this.unindent(this.start_col + 2, this.bytesToString(data.slice(this.content_start, end_point))).replace(/\s+$/,"");
  var content_lines = content.split("\n")
  var name = content_lines.shift() || "";
  name = name.trim();
  var description = content_lines.join("\n");
  this.listener[event](this.keyword, name, description, this.current_line);
  var nks = this.next_keyword_start;
  this.next_keyword_start = null;
  return nks ? nks - 1 : p;
};

Lexer.prototype.current_line_content = function(data, p) {
  var rest = Array.prototype.slice.call(data,this.last_newline, -1);
  var end = rest.indexOf(10) || -1;
  return this.bytesToString(rest.slice(0, end)).trim();
};

// Node.js export
if(typeof module !== 'undefined') {
  module.exports = Lexer;
}
// Require.js export
if (typeof define !== 'undefined') {
  if(define.amd) {
    define('gherkin/lexer/uk', [], function() {
      return Lexer;
    });
  } else {
    define('gherkin/lexer/uk', function(require, exports, module) {
      exports.Lexer = Lexer;
    });
  }
}

})();

}).call(this,require("buffer").Buffer)

},{"buffer":69}],237:[function(require,module,exports){
(function (Buffer){

/* line 1 "ragel/i18n/uz.js.rl" */
;(function() {


/* line 126 "ragel/i18n/uz.js.rl" */



/* line 11 "js/lib/gherkin/lexer/uz.js" */
var _lexer_actions = [
	0, 1, 0, 1, 1, 1, 2, 1, 
	3, 1, 4, 1, 5, 1, 6, 1, 
	7, 1, 8, 1, 9, 1, 10, 1, 
	11, 1, 12, 1, 13, 1, 16, 1, 
	17, 1, 18, 1, 19, 1, 20, 1, 
	21, 1, 22, 1, 23, 2, 2, 18, 
	2, 3, 4, 2, 13, 0, 2, 14, 
	15, 2, 17, 0, 2, 17, 1, 2, 
	17, 16, 2, 17, 19, 2, 18, 6, 
	2, 18, 7, 2, 18, 8, 2, 18, 
	9, 2, 18, 10, 2, 18, 16, 2, 
	20, 21, 2, 22, 0, 2, 22, 1, 
	2, 22, 16, 2, 22, 19, 3, 4, 
	14, 15, 3, 5, 14, 15, 3, 11, 
	14, 15, 3, 12, 14, 15, 3, 13, 
	14, 15, 3, 14, 15, 18, 3, 17, 
	0, 11, 3, 17, 14, 15, 4, 2, 
	14, 15, 18, 4, 3, 4, 14, 15, 
	4, 17, 0, 14, 15, 5, 17, 0, 
	11, 14, 15
];

var _lexer_key_offsets = [
	0, 0, 12, 21, 22, 24, 25, 26, 
	27, 28, 29, 31, 33, 44, 45, 46, 
	48, 50, 55, 60, 65, 70, 74, 78, 
	80, 81, 82, 83, 84, 85, 86, 87, 
	88, 89, 90, 91, 92, 93, 94, 95, 
	100, 107, 112, 116, 122, 125, 127, 133, 
	144, 145, 146, 147, 148, 149, 150, 151, 
	152, 153, 154, 155, 156, 157, 158, 159, 
	160, 161, 162, 163, 164, 165, 166, 167, 
	168, 169, 170, 171, 172, 173, 174, 175, 
	176, 177, 178, 179, 180, 181, 182, 183, 
	190, 192, 194, 196, 198, 200, 202, 204, 
	206, 208, 210, 212, 214, 216, 218, 220, 
	222, 224, 226, 228, 230, 241, 242, 243, 
	244, 245, 246, 247, 248, 249, 250, 251, 
	252, 253, 254, 255, 257, 258, 259, 260, 
	261, 262, 263, 264, 265, 266, 267, 268, 
	269, 270, 271, 272, 273, 274, 275, 276, 
	277, 278, 279, 280, 281, 282, 291, 299, 
	301, 304, 306, 308, 310, 312, 314, 316, 
	318, 320, 322, 324, 326, 328, 330, 332, 
	334, 336, 338, 340, 342, 344, 346, 348, 
	350, 352, 354, 356, 358, 360, 362, 364, 
	366, 368, 370, 372, 374, 376, 378, 380, 
	382, 384, 386, 388, 390, 392, 394, 396, 
	398, 400, 402, 404, 406, 408, 410, 412, 
	414, 416, 418, 420, 422, 424, 426, 428, 
	430, 432, 434, 436, 438, 440, 442, 444, 
	446, 448, 450, 452, 454, 456, 458, 460, 
	461, 462, 471, 480, 482, 485, 487, 489, 
	491, 493, 495, 497, 499, 501, 503, 505, 
	507, 509, 511, 513, 515, 517, 519, 521, 
	523, 525, 527, 529, 531, 533, 535, 537, 
	539, 541, 543, 545, 547, 549, 551, 553, 
	555, 557, 559, 561, 563, 565, 567, 570, 
	572, 574, 576, 578, 580, 582, 584, 586, 
	588, 590, 592, 594, 596, 598, 600, 602, 
	604, 606, 608, 610, 612, 614, 616, 618, 
	620, 622, 624, 626, 628, 630, 632, 634, 
	636, 638, 640, 642, 644, 646, 648, 650, 
	652, 654, 656, 658, 660, 662, 664, 666, 
	668, 670, 672, 674, 676, 678, 680, 682, 
	684, 686, 688, 690, 692, 694, 696, 698, 
	700, 702, 704, 705, 706, 707, 708, 709, 
	710, 711, 712, 713, 714, 715, 724, 732, 
	734, 737, 739, 741, 743, 745, 747, 749, 
	751, 753, 755, 757, 759, 761, 763, 765, 
	767, 769, 771, 773, 775, 777, 779, 781, 
	783, 785, 787, 789, 791, 793, 795, 797, 
	799, 801, 803, 805, 807, 809, 811, 813, 
	815, 817, 819, 822, 824, 826, 828, 830, 
	832, 834, 836, 838, 840, 842, 844, 846, 
	848, 850, 852, 854, 856, 858, 860, 862, 
	864, 866, 868, 870, 872, 874, 876, 878, 
	880, 882, 884, 886, 888, 890, 892, 894, 
	896, 898, 900, 902, 904, 906, 908, 910, 
	912, 914, 916, 918, 920, 922, 924, 926, 
	928, 930, 932, 934, 936, 938, 940, 941, 
	942, 943, 944, 945, 946, 947, 948, 949, 
	950, 951, 952, 953, 954, 955, 956, 957, 
	958, 959, 960, 961, 962, 963, 964, 965, 
	973, 978, 980, 982, 984, 986, 988, 990, 
	992, 994, 996, 998, 1000, 1002, 1004, 1006, 
	1008, 1010, 1012, 1014, 1016, 1018, 1020, 1022, 
	1024, 1026, 1028, 1030, 1032, 1034, 1036, 1039, 
	1041, 1043, 1045, 1047, 1049, 1051, 1053, 1055, 
	1057, 1059, 1061, 1063, 1065, 1067, 1069, 1071, 
	1073, 1075, 1077, 1079, 1081, 1083, 1085, 1087, 
	1089, 1091, 1093, 1095, 1097, 1099, 1101, 1103, 
	1105, 1107, 1109, 1111, 1113, 1115, 1117, 1119, 
	1121, 1123, 1125, 1127, 1129, 1131, 1133, 1135, 
	1137, 1139, 1141, 1143, 1145, 1147, 1149, 1151, 
	1153, 1155, 1157, 1159, 1161, 1163, 1164, 1165
];

var _lexer_trans_keys = [
	-48, 10, 32, 34, 35, 37, 42, 64, 
	124, 239, 9, 13, -112, -111, -110, -101, 
	-100, -95, -94, -93, -92, -48, -77, -68, 
	-48, -80, -47, -128, 32, 10, 13, 10, 
	13, -48, 10, 32, 34, 35, 37, 42, 
	64, 124, 9, 13, 34, 34, 10, 13, 
	10, 13, 10, 32, 34, 9, 13, 10, 
	32, 34, 9, 13, 10, 32, 34, 9, 
	13, 10, 32, 34, 9, 13, 10, 32, 
	9, 13, 10, 32, 9, 13, 10, 13, 
	10, 95, 70, 69, 65, 84, 85, 82, 
	69, 95, 69, 78, 68, 95, 37, 13, 
	32, 64, 9, 10, 9, 10, 13, 32, 
	64, 11, 12, 10, 32, 64, 9, 13, 
	32, 124, 9, 13, 10, 32, 92, 124, 
	9, 13, 10, 92, 124, 10, 92, 10, 
	32, 92, 124, 9, 13, -48, 10, 32, 
	34, 35, 37, 42, 64, 124, 9, 13, 
	-48, -68, -48, -66, -48, -72, -47, -128, 
	-48, -66, -48, -70, -48, -80, -48, -75, 
	-48, -70, -48, -72, -48, -67, -48, -72, 
	-47, -127, -48, -66, -48, -69, -48, -69, 
	-48, -80, -47, -128, 58, 10, 10, -48, 
	10, 32, 35, 124, 9, 13, -92, 10, 
	-47, 10, -125, 10, -48, 10, -67, 10, 
	-48, 10, -70, 10, -47, 10, -122, 10, 
	-48, 10, -72, 10, -48, 10, -66, 10, 
	-48, 10, -67, 10, -48, 10, -80, 10, 
	-48, 10, -69, 10, 10, 58, -48, 10, 
	32, 34, 35, 37, 42, 64, 124, 9, 
	13, -47, -122, -48, -75, -48, -67, -48, 
	-80, -47, -128, -48, -72, -48, -71, 32, 
	58, -47, -127, -47, -126, -47, -128, -47, 
	-125, -48, -70, -47, -126, -47, -125, -47, 
	-128, -48, -80, -47, -127, -48, -72, 58, 
	10, 10, -48, 10, 32, 35, 37, 42, 
	64, 9, 13, -112, -111, -110, -101, -95, 
	-93, -92, 10, -48, 10, -77, -68, 10, 
	-48, 10, -80, 10, -47, 10, -128, 10, 
	10, 32, -48, 10, -68, 10, -48, 10, 
	-66, 10, -48, 10, -72, 10, -47, 10, 
	-128, 10, -48, 10, -66, 10, -48, 10, 
	-70, 10, -48, 10, -80, 10, -48, 10, 
	-75, 10, -48, 10, -70, 10, -48, 10, 
	-72, 10, -48, 10, -67, 10, -47, 10, 
	-122, 10, -48, 10, -75, 10, -48, 10, 
	-67, 10, -48, 10, -80, 10, -47, 10, 
	-128, 10, -48, 10, -72, 10, -48, 10, 
	-71, 10, 10, 58, -48, 10, -67, 10, 
	-48, 10, -76, 10, -47, 10, -125, 10, 
	-48, 10, -67, 10, -48, 10, -70, 10, 
	-47, 10, -122, 10, -48, 10, -72, 10, 
	-48, 10, -66, 10, -48, 10, -67, 10, 
	-48, 10, -80, 10, -48, 10, -69, 10, 
	10, 95, 10, 70, 10, 69, 10, 65, 
	10, 84, 10, 85, 10, 82, 10, 69, 
	10, 95, 10, 69, 10, 78, 10, 68, 
	10, 95, 10, 37, 10, 10, -48, 10, 
	32, 35, 37, 42, 64, 9, 13, -112, 
	-111, -110, -101, -95, -94, -93, -92, 10, 
	-48, 10, -77, -68, 10, -48, 10, -80, 
	10, -47, 10, -128, 10, 10, 32, -48, 
	10, -68, 10, -48, 10, -66, 10, -48, 
	10, -72, 10, -47, 10, -128, 10, -48, 
	10, -66, 10, -48, 10, -70, 10, -48, 
	10, -80, 10, -48, 10, -75, 10, -48, 
	10, -70, 10, -48, 10, -72, 10, -48, 
	10, -67, 10, -47, 10, -122, 10, -48, 
	10, -75, 10, -48, 10, -67, 10, -48, 
	10, -80, 10, -47, 10, -128, 10, -48, 
	10, -72, 10, -48, 10, -71, 10, 10, 
	32, 58, -47, 10, -127, 10, -47, 10, 
	-126, 10, -47, 10, -128, 10, -47, 10, 
	-125, 10, -48, 10, -70, 10, -47, 10, 
	-126, 10, -47, 10, -125, 10, -47, 10, 
	-128, 10, -48, 10, -80, 10, -47, 10, 
	-127, 10, -48, 10, -72, 10, 10, 58, 
	-48, 10, -80, 10, -47, 10, -128, 10, 
	-48, 10, -72, 10, -47, 10, -123, 10, 
	-48, 10, -67, 10, -48, 10, -76, 10, 
	-47, 10, -125, 10, -48, 10, -67, 10, 
	-48, 10, -70, 10, -47, 10, -122, 10, 
	-48, 10, -72, 10, -48, 10, -66, 10, 
	-48, 10, -67, 10, -48, 10, -80, 10, 
	-48, 10, -69, 10, 10, 95, 10, 70, 
	10, 69, 10, 65, 10, 84, 10, 85, 
	10, 82, 10, 69, 10, 95, 10, 69, 
	10, 78, 10, 68, 10, 95, 10, 37, 
	-48, -80, -47, -128, -48, -72, -47, -123, 
	58, 10, 10, -48, 10, 32, 35, 37, 
	42, 64, 9, 13, -112, -111, -110, -101, 
	-95, -93, -92, 10, -48, 10, -77, -68, 
	10, -48, 10, -80, 10, -47, 10, -128, 
	10, 10, 32, -48, 10, -68, 10, -48, 
	10, -66, 10, -48, 10, -72, 10, -47, 
	10, -128, 10, -48, 10, -66, 10, -48, 
	10, -70, 10, -48, 10, -80, 10, -48, 
	10, -75, 10, -48, 10, -70, 10, -48, 
	10, -72, 10, -48, 10, -67, 10, -47, 
	10, -122, 10, -48, 10, -75, 10, -48, 
	10, -67, 10, -48, 10, -80, 10, -47, 
	10, -128, 10, -48, 10, -72, 10, -48, 
	10, -71, 10, 10, 32, 58, -47, 10, 
	-127, 10, -47, 10, -126, 10, -47, 10, 
	-128, 10, -47, 10, -125, 10, -48, 10, 
	-70, 10, -47, 10, -126, 10, -47, 10, 
	-125, 10, -47, 10, -128, 10, -48, 10, 
	-80, 10, -47, 10, -127, 10, -48, 10, 
	-72, 10, 10, 58, -48, 10, -67, 10, 
	-48, 10, -76, 10, -47, 10, -125, 10, 
	-48, 10, -67, 10, -48, 10, -70, 10, 
	-47, 10, -122, 10, -48, 10, -72, 10, 
	-48, 10, -66, 10, -48, 10, -67, 10, 
	-48, 10, -80, 10, -48, 10, -69, 10, 
	10, 95, 10, 70, 10, 69, 10, 65, 
	10, 84, 10, 85, 10, 82, 10, 69, 
	10, 95, 10, 69, 10, 78, 10, 68, 
	10, 95, 10, 37, -48, -67, -48, -76, 
	-47, -125, -48, -67, -48, -70, -47, -122, 
	-48, -72, -48, -66, -48, -67, -48, -80, 
	-48, -69, 58, 10, 10, -48, 10, 32, 
	35, 37, 64, 9, 13, -100, -95, -94, 
	-92, 10, -48, 10, -72, 10, -47, 10, 
	-127, 10, -48, 10, -66, 10, -48, 10, 
	-69, 10, -48, 10, -69, 10, -48, 10, 
	-80, 10, -47, 10, -128, 10, 10, 58, 
	-47, 10, -122, 10, -48, 10, -75, 10, 
	-48, 10, -67, 10, -48, 10, -80, 10, 
	-47, 10, -128, 10, -48, 10, -72, 10, 
	-48, 10, -71, 10, 10, 32, 58, -47, 
	10, -127, 10, -47, 10, -126, 10, -47, 
	10, -128, 10, -47, 10, -125, 10, -48, 
	10, -70, 10, -47, 10, -126, 10, -47, 
	10, -125, 10, -47, 10, -128, 10, -48, 
	10, -80, 10, -47, 10, -127, 10, -48, 
	10, -72, 10, -48, 10, -80, 10, -47, 
	10, -128, 10, -48, 10, -72, 10, -47, 
	10, -123, 10, -47, 10, -125, 10, -48, 
	10, -67, 10, -48, 10, -70, 10, -47, 
	10, -122, 10, -48, 10, -72, 10, -48, 
	10, -66, 10, -48, 10, -67, 10, -48, 
	10, -80, 10, -48, 10, -69, 10, 10, 
	95, 10, 70, 10, 69, 10, 65, 10, 
	84, 10, 85, 10, 82, 10, 69, 10, 
	95, 10, 69, 10, 78, 10, 68, 10, 
	95, 10, 37, 187, 191, 0
];

var _lexer_single_lengths = [
	0, 10, 9, 1, 2, 1, 1, 1, 
	1, 1, 2, 2, 9, 1, 1, 2, 
	2, 3, 3, 3, 3, 2, 2, 2, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 3, 
	5, 3, 2, 4, 3, 2, 4, 9, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 5, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 9, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 2, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 7, 8, 2, 
	3, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 1, 
	1, 7, 9, 2, 3, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 3, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 7, 8, 2, 
	3, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 3, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 6, 
	5, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 3, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 1, 1, 0
];

var _lexer_range_lengths = [
	0, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 0, 0, 0, 
	0, 1, 1, 1, 1, 1, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	1, 1, 1, 1, 0, 0, 1, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0
];

var _lexer_index_offsets = [
	0, 0, 12, 22, 24, 27, 29, 31, 
	33, 35, 37, 40, 43, 54, 56, 58, 
	61, 64, 69, 74, 79, 84, 88, 92, 
	95, 97, 99, 101, 103, 105, 107, 109, 
	111, 113, 115, 117, 119, 121, 123, 125, 
	130, 137, 142, 146, 152, 156, 159, 165, 
	176, 178, 180, 182, 184, 186, 188, 190, 
	192, 194, 196, 198, 200, 202, 204, 206, 
	208, 210, 212, 214, 216, 218, 220, 222, 
	224, 226, 228, 230, 232, 234, 236, 238, 
	240, 242, 244, 246, 248, 250, 252, 254, 
	261, 264, 267, 270, 273, 276, 279, 282, 
	285, 288, 291, 294, 297, 300, 303, 306, 
	309, 312, 315, 318, 321, 332, 334, 336, 
	338, 340, 342, 344, 346, 348, 350, 352, 
	354, 356, 358, 360, 363, 365, 367, 369, 
	371, 373, 375, 377, 379, 381, 383, 385, 
	387, 389, 391, 393, 395, 397, 399, 401, 
	403, 405, 407, 409, 411, 413, 422, 431, 
	434, 438, 441, 444, 447, 450, 453, 456, 
	459, 462, 465, 468, 471, 474, 477, 480, 
	483, 486, 489, 492, 495, 498, 501, 504, 
	507, 510, 513, 516, 519, 522, 525, 528, 
	531, 534, 537, 540, 543, 546, 549, 552, 
	555, 558, 561, 564, 567, 570, 573, 576, 
	579, 582, 585, 588, 591, 594, 597, 600, 
	603, 606, 609, 612, 615, 618, 621, 624, 
	627, 630, 633, 636, 639, 642, 645, 648, 
	651, 654, 657, 660, 663, 666, 669, 672, 
	674, 676, 685, 695, 698, 702, 705, 708, 
	711, 714, 717, 720, 723, 726, 729, 732, 
	735, 738, 741, 744, 747, 750, 753, 756, 
	759, 762, 765, 768, 771, 774, 777, 780, 
	783, 786, 789, 792, 795, 798, 801, 804, 
	807, 810, 813, 816, 819, 822, 825, 829, 
	832, 835, 838, 841, 844, 847, 850, 853, 
	856, 859, 862, 865, 868, 871, 874, 877, 
	880, 883, 886, 889, 892, 895, 898, 901, 
	904, 907, 910, 913, 916, 919, 922, 925, 
	928, 931, 934, 937, 940, 943, 946, 949, 
	952, 955, 958, 961, 964, 967, 970, 973, 
	976, 979, 982, 985, 988, 991, 994, 997, 
	1000, 1003, 1006, 1009, 1012, 1015, 1018, 1021, 
	1024, 1027, 1030, 1032, 1034, 1036, 1038, 1040, 
	1042, 1044, 1046, 1048, 1050, 1052, 1061, 1070, 
	1073, 1077, 1080, 1083, 1086, 1089, 1092, 1095, 
	1098, 1101, 1104, 1107, 1110, 1113, 1116, 1119, 
	1122, 1125, 1128, 1131, 1134, 1137, 1140, 1143, 
	1146, 1149, 1152, 1155, 1158, 1161, 1164, 1167, 
	1170, 1173, 1176, 1179, 1182, 1185, 1188, 1191, 
	1194, 1197, 1200, 1204, 1207, 1210, 1213, 1216, 
	1219, 1222, 1225, 1228, 1231, 1234, 1237, 1240, 
	1243, 1246, 1249, 1252, 1255, 1258, 1261, 1264, 
	1267, 1270, 1273, 1276, 1279, 1282, 1285, 1288, 
	1291, 1294, 1297, 1300, 1303, 1306, 1309, 1312, 
	1315, 1318, 1321, 1324, 1327, 1330, 1333, 1336, 
	1339, 1342, 1345, 1348, 1351, 1354, 1357, 1360, 
	1363, 1366, 1369, 1372, 1375, 1378, 1381, 1383, 
	1385, 1387, 1389, 1391, 1393, 1395, 1397, 1399, 
	1401, 1403, 1405, 1407, 1409, 1411, 1413, 1415, 
	1417, 1419, 1421, 1423, 1425, 1427, 1429, 1431, 
	1439, 1445, 1448, 1451, 1454, 1457, 1460, 1463, 
	1466, 1469, 1472, 1475, 1478, 1481, 1484, 1487, 
	1490, 1493, 1496, 1499, 1502, 1505, 1508, 1511, 
	1514, 1517, 1520, 1523, 1526, 1529, 1532, 1536, 
	1539, 1542, 1545, 1548, 1551, 1554, 1557, 1560, 
	1563, 1566, 1569, 1572, 1575, 1578, 1581, 1584, 
	1587, 1590, 1593, 1596, 1599, 1602, 1605, 1608, 
	1611, 1614, 1617, 1620, 1623, 1626, 1629, 1632, 
	1635, 1638, 1641, 1644, 1647, 1650, 1653, 1656, 
	1659, 1662, 1665, 1668, 1671, 1674, 1677, 1680, 
	1683, 1686, 1689, 1692, 1695, 1698, 1701, 1704, 
	1707, 1710, 1713, 1716, 1719, 1722, 1724, 1726
];

var _lexer_indicies = [
	1, 3, 2, 4, 5, 6, 7, 8, 
	9, 10, 2, 0, 11, 12, 13, 14, 
	15, 16, 17, 18, 19, 0, 20, 0, 
	21, 22, 0, 23, 0, 24, 0, 25, 
	0, 26, 0, 27, 0, 29, 30, 28, 
	32, 33, 31, 1, 3, 2, 4, 5, 
	6, 7, 8, 9, 2, 0, 34, 0, 
	35, 0, 37, 38, 36, 40, 41, 39, 
	44, 43, 45, 43, 42, 48, 47, 49, 
	47, 46, 48, 47, 50, 47, 46, 48, 
	47, 51, 47, 46, 53, 52, 52, 0, 
	3, 54, 54, 0, 56, 57, 55, 3, 
	0, 58, 0, 59, 0, 60, 0, 61, 
	0, 62, 0, 63, 0, 64, 0, 65, 
	0, 66, 0, 67, 0, 68, 0, 69, 
	0, 70, 0, 71, 0, 0, 0, 0, 
	0, 72, 73, 74, 73, 73, 76, 75, 
	72, 3, 77, 8, 77, 0, 78, 79, 
	78, 0, 82, 81, 83, 84, 81, 80, 
	0, 86, 87, 85, 0, 86, 85, 82, 
	88, 86, 87, 88, 85, 89, 82, 90, 
	91, 92, 93, 94, 95, 96, 90, 0, 
	97, 0, 98, 0, 99, 0, 26, 0, 
	100, 0, 101, 0, 102, 0, 103, 0, 
	104, 0, 105, 0, 106, 0, 26, 0, 
	107, 0, 26, 0, 108, 0, 109, 0, 
	110, 0, 111, 0, 112, 0, 113, 0, 
	114, 0, 26, 0, 115, 0, 116, 0, 
	117, 0, 118, 0, 119, 0, 120, 0, 
	121, 0, 122, 0, 123, 0, 124, 0, 
	125, 0, 126, 0, 127, 0, 128, 0, 
	129, 0, 131, 130, 133, 132, 134, 133, 
	135, 136, 136, 135, 132, 137, 133, 132, 
	138, 133, 132, 139, 133, 132, 140, 133, 
	132, 141, 133, 132, 142, 133, 132, 143, 
	133, 132, 144, 133, 132, 145, 133, 132, 
	146, 133, 132, 147, 133, 132, 148, 133, 
	132, 149, 133, 132, 150, 133, 132, 151, 
	133, 132, 152, 133, 132, 153, 133, 132, 
	154, 133, 132, 155, 133, 132, 133, 156, 
	132, 157, 159, 158, 160, 161, 162, 163, 
	164, 165, 158, 0, 166, 0, 167, 0, 
	168, 0, 169, 0, 170, 0, 171, 0, 
	172, 0, 173, 0, 174, 0, 175, 0, 
	176, 0, 177, 0, 178, 0, 179, 0, 
	180, 181, 0, 182, 0, 183, 0, 184, 
	0, 185, 0, 186, 0, 187, 0, 188, 
	0, 189, 0, 190, 0, 191, 0, 192, 
	0, 193, 0, 194, 0, 195, 0, 196, 
	0, 197, 0, 198, 0, 199, 0, 200, 
	0, 201, 0, 202, 0, 203, 0, 204, 
	0, 206, 205, 208, 207, 209, 208, 210, 
	211, 212, 213, 211, 210, 207, 214, 215, 
	216, 217, 218, 219, 220, 208, 207, 221, 
	208, 207, 222, 223, 208, 207, 224, 208, 
	207, 225, 208, 207, 226, 208, 207, 227, 
	208, 207, 208, 228, 207, 229, 208, 207, 
	230, 208, 207, 231, 208, 207, 227, 208, 
	207, 232, 208, 207, 233, 208, 207, 234, 
	208, 207, 235, 208, 207, 236, 208, 207, 
	237, 208, 207, 238, 208, 207, 227, 208, 
	207, 239, 208, 207, 227, 208, 207, 240, 
	208, 207, 241, 208, 207, 242, 208, 207, 
	243, 208, 207, 244, 208, 207, 245, 208, 
	207, 246, 208, 207, 227, 208, 207, 247, 
	208, 207, 248, 208, 207, 249, 208, 207, 
	250, 208, 207, 251, 208, 207, 252, 208, 
	207, 253, 208, 207, 254, 208, 207, 255, 
	208, 207, 256, 208, 207, 257, 208, 207, 
	258, 208, 207, 259, 208, 207, 260, 208, 
	207, 208, 228, 207, 261, 208, 207, 262, 
	208, 207, 263, 208, 207, 216, 208, 207, 
	264, 208, 207, 265, 208, 207, 266, 208, 
	207, 267, 208, 207, 268, 208, 207, 269, 
	208, 207, 270, 208, 207, 271, 208, 207, 
	272, 208, 207, 273, 208, 207, 274, 208, 
	207, 275, 208, 207, 276, 208, 207, 277, 
	208, 207, 278, 208, 207, 279, 208, 207, 
	280, 208, 207, 260, 208, 207, 208, 281, 
	207, 208, 282, 207, 208, 283, 207, 208, 
	284, 207, 208, 285, 207, 208, 286, 207, 
	208, 287, 207, 208, 288, 207, 208, 289, 
	207, 208, 290, 207, 208, 291, 207, 208, 
	292, 207, 208, 293, 207, 208, 294, 207, 
	296, 295, 298, 297, 299, 298, 300, 301, 
	302, 303, 301, 300, 297, 304, 305, 306, 
	307, 308, 309, 310, 311, 298, 297, 312, 
	298, 297, 313, 314, 298, 297, 315, 298, 
	297, 316, 298, 297, 317, 298, 297, 318, 
	298, 297, 298, 319, 297, 320, 298, 297, 
	321, 298, 297, 322, 298, 297, 318, 298, 
	297, 323, 298, 297, 324, 298, 297, 325, 
	298, 297, 326, 298, 297, 327, 298, 297, 
	328, 298, 297, 329, 298, 297, 318, 298, 
	297, 330, 298, 297, 318, 298, 297, 331, 
	298, 297, 332, 298, 297, 333, 298, 297, 
	334, 298, 297, 335, 298, 297, 336, 298, 
	297, 337, 298, 297, 318, 298, 297, 338, 
	298, 297, 339, 298, 297, 340, 298, 297, 
	341, 298, 297, 342, 298, 297, 343, 298, 
	297, 344, 298, 297, 345, 298, 297, 346, 
	298, 297, 347, 298, 297, 348, 298, 297, 
	349, 298, 297, 350, 298, 297, 351, 298, 
	297, 298, 352, 319, 297, 353, 298, 297, 
	354, 298, 297, 355, 298, 297, 356, 298, 
	297, 357, 298, 297, 358, 298, 297, 359, 
	298, 297, 360, 298, 297, 361, 298, 297, 
	362, 298, 297, 363, 298, 297, 364, 298, 
	297, 365, 298, 297, 366, 298, 297, 367, 
	298, 297, 368, 298, 297, 369, 298, 297, 
	370, 298, 297, 371, 298, 297, 372, 298, 
	297, 373, 298, 297, 374, 298, 297, 298, 
	319, 297, 375, 298, 297, 376, 298, 297, 
	377, 298, 297, 378, 298, 297, 379, 298, 
	297, 380, 298, 297, 381, 298, 297, 374, 
	298, 297, 382, 298, 297, 383, 298, 297, 
	384, 298, 297, 306, 298, 297, 385, 298, 
	297, 386, 298, 297, 387, 298, 297, 388, 
	298, 297, 389, 298, 297, 390, 298, 297, 
	391, 298, 297, 392, 298, 297, 393, 298, 
	297, 394, 298, 297, 395, 298, 297, 396, 
	298, 297, 397, 298, 297, 398, 298, 297, 
	399, 298, 297, 400, 298, 297, 401, 298, 
	297, 374, 298, 297, 298, 402, 297, 298, 
	403, 297, 298, 404, 297, 298, 405, 297, 
	298, 406, 297, 298, 407, 297, 298, 408, 
	297, 298, 409, 297, 298, 410, 297, 298, 
	411, 297, 298, 412, 297, 298, 413, 297, 
	298, 414, 297, 298, 415, 297, 416, 0, 
	417, 0, 418, 0, 419, 0, 420, 0, 
	421, 0, 422, 0, 423, 0, 424, 0, 
	426, 425, 428, 427, 429, 428, 430, 431, 
	432, 433, 431, 430, 427, 434, 435, 436, 
	437, 438, 439, 440, 428, 427, 441, 428, 
	427, 442, 443, 428, 427, 444, 428, 427, 
	445, 428, 427, 446, 428, 427, 447, 428, 
	427, 428, 448, 427, 449, 428, 427, 450, 
	428, 427, 451, 428, 427, 447, 428, 427, 
	452, 428, 427, 453, 428, 427, 454, 428, 
	427, 455, 428, 427, 456, 428, 427, 457, 
	428, 427, 458, 428, 427, 447, 428, 427, 
	459, 428, 427, 447, 428, 427, 460, 428, 
	427, 461, 428, 427, 462, 428, 427, 463, 
	428, 427, 464, 428, 427, 465, 428, 427, 
	466, 428, 427, 447, 428, 427, 467, 428, 
	427, 468, 428, 427, 469, 428, 427, 470, 
	428, 427, 471, 428, 427, 472, 428, 427, 
	473, 428, 427, 474, 428, 427, 475, 428, 
	427, 476, 428, 427, 477, 428, 427, 478, 
	428, 427, 479, 428, 427, 480, 428, 427, 
	428, 481, 448, 427, 482, 428, 427, 483, 
	428, 427, 484, 428, 427, 485, 428, 427, 
	486, 428, 427, 487, 428, 427, 488, 428, 
	427, 489, 428, 427, 490, 428, 427, 491, 
	428, 427, 492, 428, 427, 493, 428, 427, 
	494, 428, 427, 495, 428, 427, 496, 428, 
	427, 497, 428, 427, 498, 428, 427, 499, 
	428, 427, 500, 428, 427, 501, 428, 427, 
	502, 428, 427, 503, 428, 427, 428, 448, 
	427, 504, 428, 427, 505, 428, 427, 506, 
	428, 427, 436, 428, 427, 507, 428, 427, 
	508, 428, 427, 509, 428, 427, 510, 428, 
	427, 511, 428, 427, 512, 428, 427, 513, 
	428, 427, 514, 428, 427, 515, 428, 427, 
	516, 428, 427, 517, 428, 427, 518, 428, 
	427, 519, 428, 427, 520, 428, 427, 521, 
	428, 427, 522, 428, 427, 523, 428, 427, 
	503, 428, 427, 428, 524, 427, 428, 525, 
	427, 428, 526, 427, 428, 527, 427, 428, 
	528, 427, 428, 529, 427, 428, 530, 427, 
	428, 531, 427, 428, 532, 427, 428, 533, 
	427, 428, 534, 427, 428, 535, 427, 428, 
	536, 427, 428, 537, 427, 538, 0, 539, 
	0, 540, 0, 13, 0, 541, 0, 542, 
	0, 543, 0, 544, 0, 545, 0, 546, 
	0, 547, 0, 548, 0, 549, 0, 550, 
	0, 551, 0, 552, 0, 553, 0, 554, 
	0, 555, 0, 556, 0, 557, 0, 558, 
	0, 559, 0, 561, 560, 563, 562, 564, 
	563, 565, 566, 567, 566, 565, 562, 568, 
	569, 570, 571, 563, 562, 572, 563, 562, 
	573, 563, 562, 574, 563, 562, 575, 563, 
	562, 576, 563, 562, 577, 563, 562, 578, 
	563, 562, 579, 563, 562, 580, 563, 562, 
	581, 563, 562, 582, 563, 562, 583, 563, 
	562, 584, 563, 562, 585, 563, 562, 563, 
	586, 562, 587, 563, 562, 588, 563, 562, 
	589, 563, 562, 590, 563, 562, 591, 563, 
	562, 592, 563, 562, 593, 563, 562, 594, 
	563, 562, 595, 563, 562, 596, 563, 562, 
	597, 563, 562, 598, 563, 562, 599, 563, 
	562, 600, 563, 562, 563, 601, 586, 562, 
	602, 563, 562, 603, 563, 562, 604, 563, 
	562, 605, 563, 562, 606, 563, 562, 607, 
	563, 562, 608, 563, 562, 609, 563, 562, 
	610, 563, 562, 611, 563, 562, 612, 563, 
	562, 613, 563, 562, 614, 563, 562, 615, 
	563, 562, 616, 563, 562, 617, 563, 562, 
	618, 563, 562, 619, 563, 562, 620, 563, 
	562, 621, 563, 562, 622, 563, 562, 585, 
	563, 562, 623, 563, 562, 624, 563, 562, 
	625, 563, 562, 626, 563, 562, 627, 563, 
	562, 628, 563, 562, 629, 563, 562, 585, 
	563, 562, 630, 563, 562, 631, 563, 562, 
	632, 563, 562, 633, 563, 562, 634, 563, 
	562, 635, 563, 562, 636, 563, 562, 637, 
	563, 562, 638, 563, 562, 639, 563, 562, 
	640, 563, 562, 641, 563, 562, 642, 563, 
	562, 643, 563, 562, 644, 563, 562, 645, 
	563, 562, 646, 563, 562, 585, 563, 562, 
	563, 647, 562, 563, 648, 562, 563, 649, 
	562, 563, 650, 562, 563, 651, 562, 563, 
	652, 562, 563, 653, 562, 563, 654, 562, 
	563, 655, 562, 563, 656, 562, 563, 657, 
	562, 563, 658, 562, 563, 659, 562, 563, 
	660, 562, 661, 0, 2, 0, 662, 0
];

var _lexer_trans_targs = [
	0, 2, 12, 12, 13, 23, 25, 9, 
	39, 42, 581, 3, 52, 60, 62, 70, 
	109, 346, 462, 466, 4, 5, 48, 6, 
	7, 8, 9, 10, 11, 12, 24, 11, 
	12, 24, 14, 15, 16, 17, 16, 16, 
	17, 16, 18, 18, 18, 19, 18, 18, 
	18, 19, 20, 21, 22, 12, 22, 23, 
	12, 24, 26, 27, 28, 29, 30, 31, 
	32, 33, 34, 35, 36, 37, 38, 583, 
	40, 41, 12, 40, 39, 41, 42, 43, 
	44, 46, 47, 45, 43, 44, 45, 43, 
	46, 2, 47, 13, 23, 25, 9, 39, 
	42, 49, 50, 51, 53, 54, 55, 56, 
	57, 58, 59, 61, 63, 64, 65, 66, 
	67, 68, 69, 71, 72, 73, 74, 75, 
	76, 77, 78, 79, 80, 81, 82, 83, 
	84, 85, 86, 87, 86, 87, 88, 87, 
	12, 89, 90, 91, 92, 93, 94, 95, 
	96, 97, 98, 99, 100, 101, 102, 103, 
	104, 105, 106, 107, 108, 2, 12, 12, 
	13, 23, 25, 9, 39, 42, 110, 111, 
	112, 113, 114, 115, 116, 117, 118, 119, 
	120, 121, 122, 123, 124, 231, 125, 126, 
	127, 128, 129, 130, 131, 132, 133, 134, 
	135, 136, 137, 138, 139, 140, 141, 142, 
	143, 144, 145, 146, 147, 148, 149, 148, 
	149, 150, 149, 12, 217, 157, 151, 162, 
	170, 172, 180, 195, 199, 152, 153, 158, 
	154, 155, 156, 157, 108, 159, 160, 161, 
	163, 164, 165, 166, 167, 168, 169, 171, 
	173, 174, 175, 176, 177, 178, 179, 181, 
	182, 183, 184, 185, 186, 187, 188, 189, 
	190, 191, 192, 193, 194, 196, 197, 198, 
	200, 201, 202, 203, 204, 205, 206, 207, 
	208, 209, 210, 211, 212, 213, 214, 215, 
	216, 218, 219, 220, 221, 222, 223, 224, 
	225, 226, 227, 228, 229, 230, 12, 232, 
	233, 232, 233, 234, 233, 12, 332, 241, 
	235, 246, 254, 256, 264, 302, 310, 314, 
	236, 237, 242, 238, 239, 240, 241, 108, 
	243, 244, 245, 247, 248, 249, 250, 251, 
	252, 253, 255, 257, 258, 259, 260, 261, 
	262, 263, 265, 266, 267, 268, 269, 270, 
	271, 272, 273, 274, 275, 276, 277, 278, 
	279, 280, 281, 282, 283, 284, 285, 286, 
	287, 288, 289, 290, 291, 292, 293, 294, 
	295, 296, 297, 298, 299, 300, 301, 303, 
	304, 305, 306, 307, 308, 309, 311, 312, 
	313, 315, 316, 317, 318, 319, 320, 321, 
	322, 323, 324, 325, 326, 327, 328, 329, 
	330, 331, 333, 334, 335, 336, 337, 338, 
	339, 340, 341, 342, 343, 344, 345, 12, 
	347, 348, 349, 350, 351, 352, 353, 354, 
	355, 356, 357, 356, 357, 358, 357, 12, 
	448, 365, 359, 370, 378, 380, 388, 426, 
	430, 360, 361, 366, 362, 363, 364, 365, 
	108, 367, 368, 369, 371, 372, 373, 374, 
	375, 376, 377, 379, 381, 382, 383, 384, 
	385, 386, 387, 389, 390, 391, 392, 393, 
	394, 395, 396, 397, 398, 399, 400, 401, 
	402, 403, 404, 405, 406, 407, 408, 409, 
	410, 411, 412, 413, 414, 415, 416, 417, 
	418, 419, 420, 421, 422, 423, 424, 425, 
	427, 428, 429, 431, 432, 433, 434, 435, 
	436, 437, 438, 439, 440, 441, 442, 443, 
	444, 445, 446, 447, 449, 450, 451, 452, 
	453, 454, 455, 456, 457, 458, 459, 460, 
	461, 12, 463, 464, 465, 467, 468, 469, 
	470, 471, 472, 473, 474, 475, 476, 477, 
	478, 479, 480, 481, 482, 483, 484, 485, 
	486, 487, 486, 487, 488, 487, 12, 567, 
	489, 504, 541, 549, 490, 491, 492, 493, 
	494, 495, 496, 497, 498, 499, 500, 501, 
	502, 503, 108, 505, 506, 507, 508, 509, 
	510, 511, 512, 513, 514, 515, 516, 517, 
	518, 519, 520, 521, 522, 523, 524, 525, 
	526, 527, 528, 529, 530, 531, 532, 533, 
	534, 535, 536, 537, 538, 539, 540, 542, 
	543, 544, 545, 546, 547, 548, 550, 551, 
	552, 553, 554, 555, 556, 557, 558, 559, 
	560, 561, 562, 563, 564, 565, 566, 568, 
	569, 570, 571, 572, 573, 574, 575, 576, 
	577, 578, 579, 580, 12, 582, 0
];

var _lexer_trans_actions = [
	43, 29, 0, 54, 3, 1, 0, 29, 
	1, 35, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 57, 149, 126, 0, 
	110, 23, 0, 0, 7, 139, 48, 0, 
	102, 9, 5, 45, 134, 45, 0, 33, 
	122, 33, 33, 0, 11, 106, 0, 0, 
	114, 25, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 27, 118, 27, 51, 0, 0, 0, 
	37, 37, 54, 37, 87, 0, 0, 39, 
	0, 96, 0, 93, 90, 41, 96, 90, 
	99, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 57, 144, 0, 54, 84, 0, 
	81, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 21, 63, 31, 130, 
	60, 57, 31, 63, 57, 66, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 57, 144, 0, 
	54, 84, 0, 78, 33, 84, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 19, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 19, 57, 
	144, 0, 54, 84, 0, 75, 33, 84, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 17, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 17, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 57, 144, 0, 54, 84, 0, 72, 
	33, 84, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	15, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 15, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	57, 144, 0, 54, 84, 0, 69, 33, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 13, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 13, 0, 0
];

var _lexer_eof_actions = [
	0, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43
];

var lexer_start = 1;
var lexer_first_final = 583;
var lexer_error = 0;

var lexer_en_main = 1;


/* line 129 "ragel/i18n/uz.js.rl" */

/* line 130 "ragel/i18n/uz.js.rl" */

/* line 131 "ragel/i18n/uz.js.rl" */

/* line 132 "ragel/i18n/uz.js.rl" */

var Lexer = function(listener) {
  // Check that listener has the required functions
  var events = ['comment', 'tag', 'feature', 'background', 'scenario', 'scenario_outline', 'examples', 'step', 'doc_string', 'row', 'eof'];
  for(var i=0, len=events.length; i<len; i++) {
    var event = events[i];
    if(typeof listener[event] != 'function') {
      throw new Error("Error. No " + event + " function exists on " + JSON.stringify(listener));
    }
  }
  this.listener = listener;
};

Lexer.prototype.scan = function(data) {
  var ending = "\n%_FEATURE_END_%";
  if(typeof data == 'string') {
    data = this.stringToBytes(data + ending);
  } else if(typeof Buffer != 'undefined' && Buffer.isBuffer(data)) {
    // Node.js
    var buf = new Buffer(data.length + ending.length);
    data.copy(buf, 0, 0);
    new Buffer(ending).copy(buf, data.length, 0);
    data = buf;
  }
  var eof = pe = data.length;
  var p = 0;

  this.line_number = 1;
  this.last_newline = 0;
  var signedCharValue=function(v){return v > 127 ? v-256 : v; };

  
/* line 1001 "js/lib/gherkin/lexer/uz.js" */
{
	  this.cs = lexer_start;
} /* JSCodeGen::writeInit */

/* line 164 "ragel/i18n/uz.js.rl" */
  
/* line 1008 "js/lib/gherkin/lexer/uz.js" */
{
	var _klen, _trans, _keys, _ps, _widec, _acts, _nacts;
	var _goto_level, _resume, _eof_trans, _again, _test_eof;
	var _out;
	_klen = _trans = _keys = _acts = _nacts = null;
	_goto_level = 0;
	_resume = 10;
	_eof_trans = 15;
	_again = 20;
	_test_eof = 30;
	_out = 40;
	while (true) {
	_trigger_goto = false;
	if (_goto_level <= 0) {
	if (p == pe) {
		_goto_level = _test_eof;
		continue;
	}
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	}
	if (_goto_level <= _resume) {
	_keys = _lexer_key_offsets[ this.cs];
	_trans = _lexer_index_offsets[ this.cs];
	_klen = _lexer_single_lengths[ this.cs];
	_break_match = false;
	
	do {
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + _klen - 1;

	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + ( (_upper - _lower) >> 1 );

	        if (( signedCharValue(data[p])) < _lexer_trans_keys[_mid]) {
	           _upper = _mid - 1;
	        } else if (( signedCharValue(data[p])) > _lexer_trans_keys[_mid]) {
	           _lower = _mid + 1;
	        } else {
	           _trans += (_mid - _keys);
	           _break_match = true;
	           break;
	        };
	     } /* while */
	     if (_break_match) { break; }
	     _keys += _klen;
	     _trans += _klen;
	  }
	  _klen = _lexer_range_lengths[ this.cs];
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + (_klen << 1) - 2;
	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + (((_upper-_lower) >> 1) & ~1);
	        if (( signedCharValue(data[p])) < _lexer_trans_keys[_mid]) {
	          _upper = _mid - 2;
	         } else if (( signedCharValue(data[p])) > _lexer_trans_keys[_mid+1]) {
	          _lower = _mid + 2;
	        } else {
	          _trans += ((_mid - _keys) >> 1);
	          _break_match = true;
	          break;
	        }
	     } /* while */
	     if (_break_match) { break; }
	     _trans += _klen
	  }
	} while (false);
	_trans = _lexer_indicies[_trans];
	 this.cs = _lexer_trans_targs[_trans];
	if (_lexer_trans_actions[_trans] != 0) {
		_acts = _lexer_trans_actions[_trans];
		_nacts = _lexer_actions[_acts];
		_acts += 1;
		while (_nacts > 0) {
			_nacts -= 1;
			_acts += 1;
			switch (_lexer_actions[_acts - 1]) {
case 0:
/* line 6 "ragel/i18n/uz.js.rl" */

    this.content_start = p;
    this.current_line = this.line_number;
    this.start_col = p - this.last_newline - (this.keyword+':').length;
  		break;
case 1:
/* line 12 "ragel/i18n/uz.js.rl" */

    this.current_line = this.line_number;
    this.start_col = p - this.last_newline;
  		break;
case 2:
/* line 17 "ragel/i18n/uz.js.rl" */

    this.content_start = p;
  		break;
case 3:
/* line 21 "ragel/i18n/uz.js.rl" */

    this.docstring_content_type_start = p;
  		break;
case 4:
/* line 25 "ragel/i18n/uz.js.rl" */

    this.docstring_content_type_end = p;
  		break;
case 5:
/* line 29 "ragel/i18n/uz.js.rl" */

    var con = this.unindent(
      this.start_col, 
      this.bytesToString(data.slice(this.content_start, this.next_keyword_start-1)).replace(/(\r?\n)?([\t ])*$/, '').replace(/\\\"\\\"\\\"/mg, '"""')
    );
    var con_type = this.bytesToString(data.slice(this.docstring_content_type_start, this.docstring_content_type_end)).trim();
    this.listener.doc_string(con_type, con, this.current_line); 
  		break;
case 6:
/* line 38 "ragel/i18n/uz.js.rl" */

    p = this.store_keyword_content('feature', data, p, eof);
  		break;
case 7:
/* line 42 "ragel/i18n/uz.js.rl" */

    p = this.store_keyword_content('background', data, p, eof);
  		break;
case 8:
/* line 46 "ragel/i18n/uz.js.rl" */

    p = this.store_keyword_content('scenario', data, p, eof);
  		break;
case 9:
/* line 50 "ragel/i18n/uz.js.rl" */

    p = this.store_keyword_content('scenario_outline', data, p, eof);
  		break;
case 10:
/* line 54 "ragel/i18n/uz.js.rl" */

    p = this.store_keyword_content('examples', data, p, eof);
  		break;
case 11:
/* line 58 "ragel/i18n/uz.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.step(this.keyword, con, this.current_line);
  		break;
case 12:
/* line 63 "ragel/i18n/uz.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.comment(con, this.line_number);
    this.keyword_start = null;
  		break;
case 13:
/* line 69 "ragel/i18n/uz.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.tag(con, this.line_number);
    this.keyword_start = null;
  		break;
case 14:
/* line 75 "ragel/i18n/uz.js.rl" */

    this.line_number++;
  		break;
case 15:
/* line 79 "ragel/i18n/uz.js.rl" */

    this.last_newline = p + 1;
  		break;
case 16:
/* line 83 "ragel/i18n/uz.js.rl" */

    this.keyword_start = this.keyword_start || p;
  		break;
case 17:
/* line 87 "ragel/i18n/uz.js.rl" */

    this.keyword = this.bytesToString(data.slice(this.keyword_start, p)).replace(/:$/, '');
    this.keyword_start = null;
  		break;
case 18:
/* line 92 "ragel/i18n/uz.js.rl" */

    this.next_keyword_start = p;
  		break;
case 19:
/* line 96 "ragel/i18n/uz.js.rl" */

    p = p - 1;
    current_row = [];
    this.current_line = this.line_number;
  		break;
case 20:
/* line 102 "ragel/i18n/uz.js.rl" */

    this.content_start = p;
  		break;
case 21:
/* line 106 "ragel/i18n/uz.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    current_row.push(con.replace(/\\\|/, "|").replace(/\\n/, "\n").replace(/\\\\/, "\\"));
  		break;
case 22:
/* line 111 "ragel/i18n/uz.js.rl" */

    this.listener.row(current_row, this.current_line);
  		break;
case 23:
/* line 115 "ragel/i18n/uz.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw new Error("Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.");
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 1235 "js/lib/gherkin/lexer/uz.js" */
			} /* action switch */
		}
	}
	if (_trigger_goto) {
		continue;
	}
	}
	if (_goto_level <= _again) {
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	p += 1;
	if (p != pe) {
		_goto_level = _resume;
		continue;
	}
	}
	if (_goto_level <= _test_eof) {
	if (p == eof) {
	__acts = _lexer_eof_actions[ this.cs];
	__nacts =  _lexer_actions[__acts];
	__acts += 1;
	while (__nacts > 0) {
		__nacts -= 1;
		__acts += 1;
		switch (_lexer_actions[__acts - 1]) {
case 23:
/* line 115 "ragel/i18n/uz.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw new Error("Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.");
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 1274 "js/lib/gherkin/lexer/uz.js" */
		} /* eof action switch */
	}
	if (_trigger_goto) {
		continue;
	}
}
	}
	if (_goto_level <= _out) {
		break;
	}
	}
	}

/* line 165 "ragel/i18n/uz.js.rl" */
};


/*
 * Decode utf-8 byte sequence to string.
 */
var decodeUtf8 = function(bytes) {
  var result = "";
  var i = 0;
  var wc;
  var c;

  while (i < bytes.length) {
    /* parse as UTF-8 lead byte */
    wc = bytes[i++];
    if (wc < 0x80) {
      count = 0;
    } else if (wc < 0xC2 || wc >= 0xF8) {
      throw new Error("input is not a valid UTF-8 lead octet");
    } else if (wc < 0xE0) {
      count = 1;
      wc = (wc & 0x1F) << 6;
    } else if (wc < 0xF0) {
      count = 2;
      wc = (wc & 0x0F) << 12;
    } else /* wc < 0xF8 */ {
      count = 3;
      wc = (wc & 0x07) << 18;
    }

    /* parse trail bytes, if any */
    while (count) {
      if (!(i < bytes.length)) {
        throw new Error("short read");
      }
      if ((c = bytes[i++] ^ 0x80) > 0x3F) {
        throw new Error("input is not a valid UTF-8 trail octet");
      }
      wc |= c << (6 * --count);
      if (wc < (1 << (5 * count + 6))) {
        throw new Error("invalid non-minimal encoded input");
      }
    }

    /* handle conversion to UTF-16 if needed */
    if (wc > 0xFFFF) {
      wc -= 0x10000;
      result += String.fromCharCode(0xD800 + (wc >> 10));
      wc = 0xDC00 + (wc & 0x3FF);
    }
    result += String.fromCharCode(wc);
  }

  return result;
};

/*
 * Encode string to an array of bytes using utf8 encoding.
 *
 * Javascript internally stores character data as utf16 (like java).
 * String.charCodeAt() does *not* produce unicode points, but simply
 * reflects this internal representation. Thus, it is necessary
 * to first decode the utf-16 representation before encoding to
 * utf-8.
 */
var encodeUtf8 = function(string) {
  var bytes = [];
  var i = 0;
  var j = 0;
  var wc;

  while (i < string.length) {
    wc = string.charCodeAt(i++);
    if (wc >= 0xD800 && wc <= 0xDBFF && i < string.length && string.charCodeAt(i) >= 0xDC00 && string.charCodeAt(i) <= 0xDFFF) {
      /* decode UTF-16 */
      wc = 0x10000 + ((wc & 0x3FF) << 10) + (string.charCodeAt(i++) & 0x3FF);
    }

    /* emit lead byte */
    if (wc < 0x80) {
      bytes[j++] = wc;
      count = 0;
    } else if (wc < 0x800) {
      bytes[j++] = 0xC0 | (wc >> 6);
      count = 1;
    } else if (wc < 0x10000) {
      bytes[j++] = 0xE0 | (wc >> 12);
      count = 2;
    } else {
      /* SMP: 21-bit Unicode */
      bytes[j++] = 0xF0 | (wc >> 18);
      count = 3;
    }

    /* emit trail bytes, if any */
    while (count) {
      bytes[j++] = 0x80 | ((wc >> (6 * --count)) & 0x3F);
    }
  }

  return bytes;

};

Lexer.prototype.bytesToString = function(bytes) {
  if(typeof bytes.write == 'function') {
    // Node.js
    return bytes.toString('utf-8');
  }
  return decodeUtf8(bytes);
};

Lexer.prototype.stringToBytes = function(string) {
  return encodeUtf8(string);
};

Lexer.prototype.unindent = function(startcol, text) {
  startcol = startcol || 0;
  return text.replace(new RegExp('^[\t ]{0,' + startcol + '}', 'gm'), ''); 
};

Lexer.prototype.store_keyword_content = function(event, data, p, eof) {
  var end_point = (!this.next_keyword_start || (p == eof)) ? p : this.next_keyword_start;
  var content = this.unindent(this.start_col + 2, this.bytesToString(data.slice(this.content_start, end_point))).replace(/\s+$/,"");
  var content_lines = content.split("\n")
  var name = content_lines.shift() || "";
  name = name.trim();
  var description = content_lines.join("\n");
  this.listener[event](this.keyword, name, description, this.current_line);
  var nks = this.next_keyword_start;
  this.next_keyword_start = null;
  return nks ? nks - 1 : p;
};

Lexer.prototype.current_line_content = function(data, p) {
  var rest = Array.prototype.slice.call(data,this.last_newline, -1);
  var end = rest.indexOf(10) || -1;
  return this.bytesToString(rest.slice(0, end)).trim();
};

// Node.js export
if(typeof module !== 'undefined') {
  module.exports = Lexer;
}
// Require.js export
if (typeof define !== 'undefined') {
  if(define.amd) {
    define('gherkin/lexer/uz', [], function() {
      return Lexer;
    });
  } else {
    define('gherkin/lexer/uz', function(require, exports, module) {
      exports.Lexer = Lexer;
    });
  }
}

})();

}).call(this,require("buffer").Buffer)

},{"buffer":69}],238:[function(require,module,exports){
(function (Buffer){

/* line 1 "ragel/i18n/vi.js.rl" */
;(function() {


/* line 126 "ragel/i18n/vi.js.rl" */



/* line 11 "js/lib/gherkin/lexer/vi.js" */
var _lexer_actions = [
	0, 1, 0, 1, 1, 1, 2, 1, 
	3, 1, 4, 1, 5, 1, 6, 1, 
	7, 1, 8, 1, 9, 1, 10, 1, 
	11, 1, 12, 1, 13, 1, 16, 1, 
	17, 1, 18, 1, 19, 1, 20, 1, 
	21, 1, 22, 1, 23, 2, 2, 18, 
	2, 3, 4, 2, 13, 0, 2, 14, 
	15, 2, 17, 0, 2, 17, 1, 2, 
	17, 16, 2, 17, 19, 2, 18, 6, 
	2, 18, 7, 2, 18, 8, 2, 18, 
	9, 2, 18, 10, 2, 18, 16, 2, 
	20, 21, 2, 22, 0, 2, 22, 1, 
	2, 22, 16, 2, 22, 19, 3, 4, 
	14, 15, 3, 5, 14, 15, 3, 11, 
	14, 15, 3, 12, 14, 15, 3, 13, 
	14, 15, 3, 14, 15, 18, 3, 17, 
	0, 11, 3, 17, 14, 15, 4, 2, 
	14, 15, 18, 4, 3, 4, 14, 15, 
	4, 17, 0, 14, 15, 5, 17, 0, 
	11, 14, 15
];

var _lexer_key_offsets = [
	0, 0, 18, 35, 36, 37, 39, 41, 
	46, 51, 56, 61, 65, 69, 71, 72, 
	73, 74, 75, 76, 77, 78, 79, 80, 
	81, 82, 83, 84, 85, 86, 87, 89, 
	91, 96, 103, 108, 110, 111, 112, 113, 
	114, 115, 116, 117, 118, 119, 120, 121, 
	122, 123, 137, 139, 141, 143, 145, 147, 
	149, 151, 153, 155, 157, 159, 161, 163, 
	165, 167, 184, 185, 186, 187, 188, 189, 
	190, 191, 192, 193, 194, 195, 196, 197, 
	198, 199, 206, 208, 210, 212, 214, 216, 
	218, 220, 222, 224, 226, 228, 230, 231, 
	232, 233, 234, 235, 236, 237, 238, 239, 
	240, 241, 242, 243, 257, 259, 261, 263, 
	265, 267, 269, 271, 273, 275, 277, 279, 
	281, 283, 285, 287, 290, 292, 294, 296, 
	298, 300, 302, 304, 306, 308, 310, 312, 
	314, 316, 318, 320, 322, 324, 327, 329, 
	331, 333, 335, 337, 339, 341, 343, 345, 
	347, 350, 352, 354, 356, 359, 361, 363, 
	365, 367, 369, 371, 373, 375, 377, 379, 
	381, 383, 385, 387, 389, 391, 393, 395, 
	398, 401, 403, 405, 407, 409, 411, 413, 
	415, 417, 419, 421, 423, 424, 425, 426, 
	428, 429, 430, 431, 432, 433, 434, 435, 
	436, 437, 438, 439, 440, 441, 442, 456, 
	458, 460, 462, 464, 466, 468, 470, 472, 
	474, 476, 478, 480, 482, 484, 486, 488, 
	490, 492, 494, 496, 498, 500, 503, 505, 
	507, 509, 511, 513, 515, 517, 519, 521, 
	523, 525, 527, 529, 531, 533, 535, 537, 
	540, 543, 545, 547, 549, 551, 553, 555, 
	557, 559, 561, 563, 565, 567, 569, 571, 
	573, 575, 577, 579, 581, 583, 584, 585, 
	586, 587, 588, 589, 590, 591, 592, 593, 
	594, 595, 596, 597, 598, 599, 600, 602, 
	604, 605, 606, 607, 608, 609, 610, 611, 
	612, 613, 614, 615, 616, 617, 618, 619, 
	620, 621, 622, 623, 624, 625, 636, 638, 
	640, 642, 644, 646, 648, 650, 652, 654, 
	656, 658, 660, 662, 664, 666, 668, 670, 
	672, 674, 676, 678, 680, 682, 684, 686, 
	688, 690, 692, 694, 696, 698, 700, 702, 
	704, 706, 708, 711, 713, 715, 717, 719, 
	721, 723, 725, 727, 729, 731, 733, 735, 
	737, 739, 742, 744, 746, 748, 750, 752, 
	754, 756, 758, 760, 762, 764, 766, 768, 
	770, 773, 775, 777, 779, 781, 783, 785, 
	786, 787, 788, 789, 793, 799, 802, 804, 
	810, 827, 829, 831, 833, 835, 837, 839, 
	841, 844, 846, 848, 850, 852, 854, 856, 
	858, 860, 862, 864, 866, 869, 871, 873, 
	875, 878, 880, 882, 884, 886, 888, 890, 
	892, 894, 896, 898, 900, 902, 904, 906, 
	908, 910, 912, 914, 917, 920, 922, 924, 
	926, 928, 930, 932, 934, 936, 938, 940, 
	941, 942, 943, 944, 945, 946
];

var _lexer_trans_keys = [
	10, 32, 34, 35, 37, 42, 64, 66, 
	67, 68, 75, 78, 84, 86, 124, 239, 
	9, 13, 10, 32, 34, 35, 37, 42, 
	64, 66, 67, 68, 75, 78, 84, 86, 
	124, 9, 13, 34, 34, 10, 13, 10, 
	13, 10, 32, 34, 9, 13, 10, 32, 
	34, 9, 13, 10, 32, 34, 9, 13, 
	10, 32, 34, 9, 13, 10, 32, 9, 
	13, 10, 32, 9, 13, 10, 13, 10, 
	95, 70, 69, 65, 84, 85, 82, 69, 
	95, 69, 78, 68, 95, 37, 32, 10, 
	13, 10, 13, 13, 32, 64, 9, 10, 
	9, 10, 13, 32, 64, 11, 12, 10, 
	32, 64, 9, 13, -31, 105, -69, -111, 
	105, 32, 99, -31, -70, -93, 110, 104, 
	58, 10, 10, 10, 32, 35, 37, 42, 
	64, 66, 67, 75, 78, 84, 86, 9, 
	13, 10, 95, 10, 70, 10, 69, 10, 
	65, 10, 84, 10, 85, 10, 82, 10, 
	69, 10, 95, 10, 69, 10, 78, 10, 
	68, 10, 95, 10, 37, 10, 32, 10, 
	32, 34, 35, 37, 42, 64, 66, 67, 
	68, 75, 78, 84, 86, 124, 9, 13, 
	104, 111, -31, -69, -81, 32, 108, 105, 
	-31, -69, -121, 117, 58, 10, 10, 10, 
	32, 35, 84, 124, 9, 13, -61, 10, 
	-83, 10, 10, 110, 10, 104, 10, 32, 
	10, 110, -60, 10, -125, 10, 10, 110, 
	10, 103, 10, 58, -31, 104, -69, -117, 
	99, 104, 32, 98, -31, -70, -93, 110, 
	58, 10, 10, 10, 32, 35, 37, 42, 
	64, 66, 67, 75, 78, 84, 86, 9, 
	13, 10, 95, 10, 70, 10, 69, 10, 
	65, 10, 84, 10, 85, 10, 82, 10, 
	69, 10, 95, 10, 69, 10, 78, 10, 
	68, 10, 95, 10, 37, 10, 32, -31, 
	10, 105, -69, 10, -111, 10, 10, 105, 
	10, 32, 10, 99, -31, 10, -70, 10, 
	-93, 10, 10, 110, 10, 104, 10, 58, 
	-31, 10, -70, 10, -65, 10, 10, 116, 
	10, 104, 10, 111, -31, 10, 104, -69, 
	10, -117, 10, 10, 99, 10, 104, 10, 
	32, 10, 98, -31, 10, -70, 10, -93, 
	10, 10, 110, 10, 105, 117, 10, 110, 
	10, 103, 10, 32, 10, 107, 116, -31, 
	10, -61, 10, -84, 10, 10, 110, 10, 
	104, 10, 32, 10, 104, 10, 117, -31, 
	10, -69, 10, -111, 10, 10, 110, 10, 
	103, 10, 104, -58, 10, -80, 10, 10, 
	110, 10, 103, -61, 10, 104, -84, -83, 
	10, 10, 110, 10, 104, 10, 32, 10, 
	110, -60, 10, -125, 10, -61, 10, -84, 
	10, -61, 10, -96, 10, 105, 117, 110, 
	103, 32, 107, 116, -31, -69, -117, 99, 
	104, 32, 98, -31, -70, -93, 110, 58, 
	10, 10, 10, 32, 35, 37, 42, 64, 
	66, 67, 75, 78, 84, 86, 9, 13, 
	10, 95, 10, 70, 10, 69, 10, 65, 
	10, 84, 10, 85, 10, 82, 10, 69, 
	10, 95, 10, 69, 10, 78, 10, 68, 
	10, 95, 10, 37, 10, 32, 10, 105, 
	-31, 10, -70, 10, -65, 10, 10, 116, 
	10, 104, 10, 111, -31, 10, 104, -69, 
	10, -117, 10, 10, 99, 10, 104, 10, 
	32, 10, 98, -31, 10, -70, 10, -93, 
	10, 10, 110, 10, 58, 10, 105, 10, 
	104, -58, 10, -80, 10, 10, 110, 10, 
	103, -61, 10, 104, -84, -83, 10, 10, 
	110, 10, 104, 10, 32, 10, 104, 10, 
	117, -31, 10, -69, 10, -111, 10, 10, 
	110, 10, 103, 10, 110, 10, 104, 10, 
	32, 10, 110, -60, 10, -125, 10, -61, 
	10, -84, 10, -61, 10, -96, 10, -61, 
	-84, 110, 104, 32, 104, 117, -31, -69, 
	-111, 110, 103, 104, -58, -80, 110, 103, 
	-61, 104, -84, -83, 110, 104, 32, 104, 
	117, -31, -69, -111, 110, 103, 110, 104, 
	32, 110, -60, -125, 110, 103, 58, 10, 
	10, 10, 32, 35, 37, 64, 66, 68, 
	75, 84, 9, 13, 10, 95, 10, 70, 
	10, 69, 10, 65, 10, 84, 10, 85, 
	10, 82, 10, 69, 10, 95, 10, 69, 
	10, 78, 10, 68, 10, 95, 10, 37, 
	-31, 10, -69, 10, -111, 10, 10, 105, 
	10, 32, 10, 99, -31, 10, -70, 10, 
	-93, 10, 10, 110, 10, 104, 10, 58, 
	-31, 10, -69, 10, -81, 10, 10, 32, 
	10, 108, 10, 105, -31, 10, -69, 10, 
	-121, 10, 10, 117, -31, 10, 104, -69, 
	10, -117, 10, 10, 99, 10, 104, 10, 
	32, 10, 98, -31, 10, -70, 10, -93, 
	10, 10, 110, 10, 117, 10, 110, 10, 
	103, 10, 32, 10, 107, 116, -31, 10, 
	-61, 10, -84, 10, 10, 110, 10, 104, 
	10, 32, 10, 104, 10, 117, -31, 10, 
	-69, 10, -111, 10, 10, 110, 10, 103, 
	-61, 10, -84, -83, 10, 10, 110, 10, 
	104, 10, 32, 10, 110, -60, 10, -125, 
	10, -61, -84, -61, -96, 32, 124, 9, 
	13, 10, 32, 92, 124, 9, 13, 10, 
	92, 124, 10, 92, 10, 32, 92, 124, 
	9, 13, 10, 32, 34, 35, 37, 42, 
	64, 66, 67, 68, 75, 78, 84, 86, 
	124, 9, 13, 10, 105, -31, 10, -70, 
	10, -65, 10, 10, 116, 10, 104, 10, 
	111, -31, 10, 104, -69, 10, -117, 10, 
	10, 99, 10, 104, 10, 32, 10, 98, 
	-31, 10, -70, 10, -93, 10, 10, 110, 
	10, 58, 10, 105, 117, 10, 110, 10, 
	103, 10, 32, 10, 107, 116, -31, 10, 
	-61, 10, -84, 10, 10, 110, 10, 104, 
	10, 32, 10, 104, 10, 117, -31, 10, 
	-69, 10, -111, 10, 10, 110, 10, 103, 
	10, 104, -58, 10, -80, 10, 10, 110, 
	10, 103, -61, 10, 104, -84, -83, 10, 
	10, 110, 10, 104, 10, 32, 10, 110, 
	-60, 10, -125, 10, -61, 10, -84, 10, 
	-61, 10, -96, 10, -31, -70, -65, 116, 
	187, 191, 0
];

var _lexer_single_lengths = [
	0, 16, 15, 1, 1, 2, 2, 3, 
	3, 3, 3, 2, 2, 2, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 2, 2, 
	3, 5, 3, 2, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 12, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 15, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 5, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 12, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 3, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 3, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	3, 2, 2, 2, 3, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 3, 
	3, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 1, 1, 1, 2, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 12, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 3, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 3, 
	3, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 2, 2, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 9, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 3, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 3, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	3, 2, 2, 2, 2, 2, 2, 1, 
	1, 1, 1, 2, 4, 3, 2, 4, 
	15, 2, 2, 2, 2, 2, 2, 2, 
	3, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 3, 2, 2, 2, 
	3, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 3, 3, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 1, 
	1, 1, 1, 1, 1, 0
];

var _lexer_range_lengths = [
	0, 1, 1, 0, 0, 0, 0, 1, 
	1, 1, 1, 1, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 1, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 1, 0, 0, 1, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0
];

var _lexer_index_offsets = [
	0, 0, 18, 35, 37, 39, 42, 45, 
	50, 55, 60, 65, 69, 73, 76, 78, 
	80, 82, 84, 86, 88, 90, 92, 94, 
	96, 98, 100, 102, 104, 106, 108, 111, 
	114, 119, 126, 131, 134, 136, 138, 140, 
	142, 144, 146, 148, 150, 152, 154, 156, 
	158, 160, 174, 177, 180, 183, 186, 189, 
	192, 195, 198, 201, 204, 207, 210, 213, 
	216, 219, 236, 238, 240, 242, 244, 246, 
	248, 250, 252, 254, 256, 258, 260, 262, 
	264, 266, 273, 276, 279, 282, 285, 288, 
	291, 294, 297, 300, 303, 306, 309, 311, 
	313, 315, 317, 319, 321, 323, 325, 327, 
	329, 331, 333, 335, 349, 352, 355, 358, 
	361, 364, 367, 370, 373, 376, 379, 382, 
	385, 388, 391, 394, 398, 401, 404, 407, 
	410, 413, 416, 419, 422, 425, 428, 431, 
	434, 437, 440, 443, 446, 449, 453, 456, 
	459, 462, 465, 468, 471, 474, 477, 480, 
	483, 487, 490, 493, 496, 500, 503, 506, 
	509, 512, 515, 518, 521, 524, 527, 530, 
	533, 536, 539, 542, 545, 548, 551, 554, 
	558, 562, 565, 568, 571, 574, 577, 580, 
	583, 586, 589, 592, 595, 597, 599, 601, 
	604, 606, 608, 610, 612, 614, 616, 618, 
	620, 622, 624, 626, 628, 630, 632, 646, 
	649, 652, 655, 658, 661, 664, 667, 670, 
	673, 676, 679, 682, 685, 688, 691, 694, 
	697, 700, 703, 706, 709, 712, 716, 719, 
	722, 725, 728, 731, 734, 737, 740, 743, 
	746, 749, 752, 755, 758, 761, 764, 767, 
	771, 775, 778, 781, 784, 787, 790, 793, 
	796, 799, 802, 805, 808, 811, 814, 817, 
	820, 823, 826, 829, 832, 835, 837, 839, 
	841, 843, 845, 847, 849, 851, 853, 855, 
	857, 859, 861, 863, 865, 867, 869, 872, 
	875, 877, 879, 881, 883, 885, 887, 889, 
	891, 893, 895, 897, 899, 901, 903, 905, 
	907, 909, 911, 913, 915, 917, 928, 931, 
	934, 937, 940, 943, 946, 949, 952, 955, 
	958, 961, 964, 967, 970, 973, 976, 979, 
	982, 985, 988, 991, 994, 997, 1000, 1003, 
	1006, 1009, 1012, 1015, 1018, 1021, 1024, 1027, 
	1030, 1033, 1036, 1040, 1043, 1046, 1049, 1052, 
	1055, 1058, 1061, 1064, 1067, 1070, 1073, 1076, 
	1079, 1082, 1086, 1089, 1092, 1095, 1098, 1101, 
	1104, 1107, 1110, 1113, 1116, 1119, 1122, 1125, 
	1128, 1132, 1135, 1138, 1141, 1144, 1147, 1150, 
	1152, 1154, 1156, 1158, 1162, 1168, 1172, 1175, 
	1181, 1198, 1201, 1204, 1207, 1210, 1213, 1216, 
	1219, 1223, 1226, 1229, 1232, 1235, 1238, 1241, 
	1244, 1247, 1250, 1253, 1256, 1260, 1263, 1266, 
	1269, 1273, 1276, 1279, 1282, 1285, 1288, 1291, 
	1294, 1297, 1300, 1303, 1306, 1309, 1312, 1315, 
	1318, 1321, 1324, 1327, 1331, 1335, 1338, 1341, 
	1344, 1347, 1350, 1353, 1356, 1359, 1362, 1365, 
	1367, 1369, 1371, 1373, 1375, 1377
];

var _lexer_indicies = [
	2, 1, 3, 4, 5, 6, 7, 8, 
	9, 10, 11, 12, 13, 14, 15, 16, 
	1, 0, 2, 1, 3, 4, 5, 6, 
	7, 8, 9, 10, 11, 12, 13, 14, 
	15, 1, 0, 17, 0, 18, 0, 20, 
	21, 19, 23, 24, 22, 27, 26, 28, 
	26, 25, 31, 30, 32, 30, 29, 31, 
	30, 33, 30, 29, 31, 30, 34, 30, 
	29, 36, 35, 35, 0, 2, 37, 37, 
	0, 39, 40, 38, 2, 0, 41, 0, 
	42, 0, 43, 0, 44, 0, 45, 0, 
	46, 0, 47, 0, 48, 0, 49, 0, 
	50, 0, 51, 0, 52, 0, 53, 0, 
	54, 0, 55, 0, 57, 58, 56, 60, 
	61, 59, 0, 0, 0, 0, 62, 63, 
	64, 63, 63, 66, 65, 62, 2, 67, 
	7, 67, 0, 68, 69, 0, 70, 0, 
	71, 0, 72, 0, 73, 0, 74, 0, 
	75, 0, 76, 0, 77, 0, 78, 0, 
	79, 0, 80, 0, 82, 81, 84, 83, 
	84, 85, 86, 87, 88, 86, 89, 90, 
	91, 92, 93, 94, 85, 83, 84, 95, 
	83, 84, 96, 83, 84, 97, 83, 84, 
	98, 83, 84, 99, 83, 84, 100, 83, 
	84, 101, 83, 84, 102, 83, 84, 103, 
	83, 84, 104, 83, 84, 105, 83, 84, 
	106, 83, 84, 107, 83, 84, 108, 83, 
	84, 109, 83, 111, 110, 112, 113, 114, 
	115, 116, 117, 118, 119, 120, 121, 122, 
	123, 124, 110, 0, 125, 0, 126, 0, 
	127, 0, 128, 0, 129, 0, 130, 0, 
	131, 0, 132, 0, 133, 0, 134, 0, 
	135, 0, 136, 0, 137, 0, 139, 138, 
	141, 140, 141, 142, 143, 144, 143, 142, 
	140, 145, 141, 140, 146, 141, 140, 141, 
	147, 140, 141, 148, 140, 141, 149, 140, 
	141, 150, 140, 151, 141, 140, 152, 141, 
	140, 141, 153, 140, 141, 154, 140, 141, 
	155, 140, 156, 157, 0, 158, 0, 159, 
	0, 160, 0, 161, 0, 162, 0, 163, 
	0, 164, 0, 165, 0, 166, 0, 167, 
	0, 168, 0, 170, 169, 172, 171, 172, 
	173, 174, 175, 176, 174, 177, 178, 179, 
	180, 181, 182, 173, 171, 172, 183, 171, 
	172, 184, 171, 172, 185, 171, 172, 186, 
	171, 172, 187, 171, 172, 188, 171, 172, 
	189, 171, 172, 190, 171, 172, 191, 171, 
	172, 192, 171, 172, 193, 171, 172, 194, 
	171, 172, 195, 171, 172, 196, 171, 172, 
	197, 171, 198, 172, 199, 171, 200, 172, 
	171, 201, 172, 171, 172, 202, 171, 172, 
	203, 171, 172, 204, 171, 205, 172, 171, 
	206, 172, 171, 207, 172, 171, 172, 208, 
	171, 172, 209, 171, 172, 197, 171, 210, 
	172, 171, 211, 172, 171, 212, 172, 171, 
	172, 213, 171, 172, 214, 171, 172, 213, 
	171, 215, 172, 216, 171, 217, 172, 171, 
	218, 172, 171, 172, 219, 171, 172, 220, 
	171, 172, 221, 171, 172, 222, 171, 223, 
	172, 171, 224, 172, 171, 225, 172, 171, 
	172, 209, 171, 172, 213, 226, 171, 172, 
	227, 171, 172, 228, 171, 172, 229, 171, 
	172, 230, 231, 171, 215, 172, 171, 232, 
	172, 171, 233, 172, 171, 172, 234, 171, 
	172, 235, 171, 172, 236, 171, 172, 237, 
	171, 172, 238, 171, 239, 172, 171, 240, 
	172, 171, 241, 172, 171, 172, 242, 171, 
	172, 209, 171, 172, 243, 171, 244, 172, 
	171, 245, 172, 171, 172, 246, 171, 172, 
	213, 171, 247, 172, 248, 171, 233, 249, 
	172, 171, 172, 250, 171, 172, 251, 171, 
	172, 252, 171, 172, 253, 171, 254, 172, 
	171, 241, 172, 171, 255, 172, 171, 213, 
	172, 171, 256, 172, 171, 213, 172, 171, 
	126, 257, 0, 258, 0, 259, 0, 260, 
	0, 261, 262, 0, 263, 0, 264, 0, 
	265, 0, 266, 0, 267, 0, 268, 0, 
	269, 0, 270, 0, 271, 0, 272, 0, 
	273, 0, 274, 0, 276, 275, 278, 277, 
	278, 279, 280, 281, 282, 280, 283, 284, 
	285, 286, 287, 288, 279, 277, 278, 289, 
	277, 278, 290, 277, 278, 291, 277, 278, 
	292, 277, 278, 293, 277, 278, 294, 277, 
	278, 295, 277, 278, 296, 277, 278, 297, 
	277, 278, 298, 277, 278, 299, 277, 278, 
	300, 277, 278, 301, 277, 278, 302, 277, 
	278, 303, 277, 278, 304, 277, 305, 278, 
	277, 306, 278, 277, 307, 278, 277, 278, 
	308, 277, 278, 309, 277, 278, 308, 277, 
	310, 278, 311, 277, 312, 278, 277, 313, 
	278, 277, 278, 314, 277, 278, 315, 277, 
	278, 316, 277, 278, 317, 277, 318, 278, 
	277, 319, 278, 277, 320, 278, 277, 278, 
	321, 277, 278, 303, 277, 278, 308, 277, 
	278, 322, 277, 323, 278, 277, 324, 278, 
	277, 278, 325, 277, 278, 308, 277, 326, 
	278, 327, 277, 328, 329, 278, 277, 278, 
	330, 277, 278, 331, 277, 278, 332, 277, 
	278, 333, 277, 278, 334, 277, 335, 278, 
	277, 336, 278, 277, 337, 278, 277, 278, 
	338, 277, 278, 321, 277, 278, 339, 277, 
	278, 340, 277, 278, 341, 277, 278, 342, 
	277, 343, 278, 277, 337, 278, 277, 344, 
	278, 277, 308, 278, 277, 345, 278, 277, 
	308, 278, 277, 346, 0, 347, 0, 348, 
	0, 349, 0, 350, 0, 351, 0, 352, 
	0, 353, 0, 354, 0, 355, 0, 356, 
	0, 273, 0, 357, 0, 358, 0, 359, 
	0, 360, 0, 126, 0, 361, 362, 0, 
	363, 364, 0, 365, 0, 366, 0, 367, 
	0, 368, 0, 369, 0, 370, 0, 371, 
	0, 372, 0, 373, 0, 167, 0, 374, 
	0, 375, 0, 376, 0, 377, 0, 378, 
	0, 379, 0, 380, 0, 381, 0, 382, 
	0, 384, 383, 386, 385, 386, 387, 388, 
	389, 388, 390, 391, 392, 393, 387, 385, 
	386, 394, 385, 386, 395, 385, 386, 396, 
	385, 386, 397, 385, 386, 398, 385, 386, 
	399, 385, 386, 400, 385, 386, 401, 385, 
	386, 402, 385, 386, 403, 385, 386, 404, 
	385, 386, 405, 385, 386, 406, 385, 386, 
	407, 385, 408, 386, 385, 409, 386, 385, 
	410, 386, 385, 386, 411, 385, 386, 412, 
	385, 386, 413, 385, 414, 386, 385, 415, 
	386, 385, 416, 386, 385, 386, 417, 385, 
	386, 418, 385, 386, 419, 385, 420, 386, 
	385, 421, 386, 385, 422, 386, 385, 386, 
	423, 385, 386, 424, 385, 386, 425, 385, 
	426, 386, 385, 427, 386, 385, 428, 386, 
	385, 386, 418, 385, 429, 386, 430, 385, 
	431, 386, 385, 432, 386, 385, 386, 433, 
	385, 386, 434, 385, 386, 435, 385, 386, 
	436, 385, 437, 386, 385, 438, 386, 385, 
	439, 386, 385, 386, 418, 385, 386, 440, 
	385, 386, 441, 385, 386, 442, 385, 386, 
	443, 385, 386, 444, 445, 385, 429, 386, 
	385, 446, 386, 385, 447, 386, 385, 386, 
	448, 385, 386, 449, 385, 386, 450, 385, 
	386, 451, 385, 386, 452, 385, 453, 386, 
	385, 454, 386, 385, 455, 386, 385, 386, 
	456, 385, 386, 418, 385, 457, 386, 385, 
	447, 458, 386, 385, 386, 459, 385, 386, 
	460, 385, 386, 461, 385, 386, 462, 385, 
	463, 386, 385, 455, 386, 385, 464, 0, 
	126, 0, 465, 0, 126, 0, 466, 467, 
	466, 0, 470, 469, 471, 472, 469, 468, 
	0, 474, 475, 473, 0, 474, 473, 470, 
	476, 474, 475, 476, 473, 470, 477, 478, 
	479, 480, 481, 482, 483, 484, 485, 486, 
	487, 488, 489, 490, 477, 0, 84, 491, 
	83, 492, 84, 83, 493, 84, 83, 494, 
	84, 83, 84, 495, 83, 84, 496, 83, 
	84, 495, 83, 497, 84, 498, 83, 499, 
	84, 83, 500, 84, 83, 84, 501, 83, 
	84, 502, 83, 84, 503, 83, 84, 504, 
	83, 505, 84, 83, 506, 84, 83, 507, 
	84, 83, 84, 508, 83, 84, 109, 83, 
	84, 495, 509, 83, 84, 510, 83, 84, 
	511, 83, 84, 512, 83, 84, 513, 514, 
	83, 497, 84, 83, 515, 84, 83, 516, 
	84, 83, 84, 517, 83, 84, 518, 83, 
	84, 519, 83, 84, 520, 83, 84, 521, 
	83, 522, 84, 83, 523, 84, 83, 524, 
	84, 83, 84, 525, 83, 84, 508, 83, 
	84, 526, 83, 527, 84, 83, 528, 84, 
	83, 84, 529, 83, 84, 495, 83, 530, 
	84, 531, 83, 516, 532, 84, 83, 84, 
	533, 83, 84, 534, 83, 84, 535, 83, 
	84, 536, 83, 537, 84, 83, 524, 84, 
	83, 538, 84, 83, 495, 84, 83, 539, 
	84, 83, 495, 84, 83, 540, 0, 541, 
	0, 542, 0, 126, 0, 543, 0, 1, 
	0, 544, 0
];

var _lexer_trans_targs = [
	0, 2, 2, 3, 13, 15, 29, 32, 
	35, 66, 68, 93, 281, 286, 385, 387, 
	451, 4, 5, 6, 7, 6, 6, 7, 
	6, 8, 8, 8, 9, 8, 8, 8, 
	9, 10, 11, 12, 2, 12, 13, 2, 
	14, 16, 17, 18, 19, 20, 21, 22, 
	23, 24, 25, 26, 27, 28, 453, 30, 
	31, 2, 14, 31, 2, 14, 33, 34, 
	2, 33, 32, 34, 36, 447, 37, 38, 
	39, 40, 41, 42, 43, 44, 45, 46, 
	47, 48, 49, 48, 49, 49, 2, 50, 
	64, 393, 398, 400, 430, 435, 445, 51, 
	52, 53, 54, 55, 56, 57, 58, 59, 
	60, 61, 62, 63, 2, 65, 2, 2, 
	3, 13, 15, 29, 32, 35, 66, 68, 
	93, 281, 286, 385, 387, 67, 29, 69, 
	70, 71, 72, 73, 74, 75, 76, 77, 
	78, 79, 80, 81, 80, 81, 81, 2, 
	82, 83, 84, 85, 86, 87, 88, 89, 
	90, 91, 92, 65, 94, 187, 95, 96, 
	97, 98, 99, 100, 101, 102, 103, 104, 
	105, 106, 107, 106, 107, 107, 2, 108, 
	122, 123, 139, 141, 170, 175, 185, 109, 
	110, 111, 112, 113, 114, 115, 116, 117, 
	118, 119, 120, 121, 2, 65, 124, 135, 
	125, 126, 127, 128, 129, 130, 131, 132, 
	133, 134, 136, 137, 138, 122, 140, 142, 
	152, 143, 144, 145, 146, 147, 148, 149, 
	150, 151, 153, 154, 155, 156, 157, 158, 
	159, 160, 161, 162, 163, 164, 165, 166, 
	167, 168, 169, 171, 172, 173, 174, 176, 
	183, 177, 178, 179, 180, 181, 182, 184, 
	186, 188, 189, 190, 191, 192, 269, 193, 
	194, 195, 196, 197, 198, 199, 200, 201, 
	202, 203, 204, 205, 206, 205, 206, 206, 
	2, 207, 221, 222, 227, 229, 242, 247, 
	267, 208, 209, 210, 211, 212, 213, 214, 
	215, 216, 217, 218, 219, 220, 2, 65, 
	223, 224, 225, 226, 221, 228, 230, 241, 
	231, 232, 233, 234, 235, 236, 237, 238, 
	239, 240, 243, 244, 245, 246, 248, 265, 
	249, 259, 250, 251, 252, 253, 254, 255, 
	256, 257, 258, 260, 261, 262, 263, 264, 
	266, 268, 270, 271, 272, 273, 274, 275, 
	276, 277, 278, 279, 280, 282, 283, 284, 
	285, 287, 383, 288, 298, 289, 290, 291, 
	292, 293, 294, 295, 296, 297, 299, 300, 
	301, 302, 303, 304, 305, 306, 307, 308, 
	309, 308, 309, 309, 2, 310, 324, 336, 
	346, 375, 311, 312, 313, 314, 315, 316, 
	317, 318, 319, 320, 321, 322, 323, 2, 
	325, 326, 327, 328, 329, 330, 331, 332, 
	333, 334, 335, 65, 337, 338, 339, 340, 
	341, 342, 343, 344, 345, 347, 357, 348, 
	349, 350, 351, 352, 353, 354, 355, 356, 
	358, 359, 360, 361, 362, 363, 364, 365, 
	366, 367, 368, 369, 370, 371, 372, 373, 
	374, 376, 377, 378, 379, 380, 381, 382, 
	384, 386, 387, 388, 389, 391, 392, 390, 
	388, 389, 390, 388, 391, 392, 3, 13, 
	15, 29, 32, 35, 66, 68, 93, 281, 
	286, 385, 387, 394, 395, 396, 397, 64, 
	399, 401, 412, 402, 403, 404, 405, 406, 
	407, 408, 409, 410, 411, 413, 414, 415, 
	416, 417, 418, 419, 420, 421, 422, 423, 
	424, 425, 426, 427, 428, 429, 431, 432, 
	433, 434, 436, 443, 437, 438, 439, 440, 
	441, 442, 444, 446, 448, 449, 450, 452, 
	0
];

var _lexer_trans_actions = [
	43, 0, 54, 3, 1, 0, 29, 1, 
	29, 29, 29, 29, 29, 29, 29, 35, 
	0, 0, 0, 7, 139, 48, 0, 102, 
	9, 5, 45, 134, 45, 0, 33, 122, 
	33, 33, 0, 11, 106, 0, 0, 114, 
	25, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	57, 149, 126, 0, 110, 23, 0, 27, 
	118, 27, 51, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 57, 144, 0, 54, 0, 72, 33, 
	84, 84, 84, 84, 84, 84, 84, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 15, 15, 31, 130, 
	60, 57, 31, 63, 57, 63, 63, 63, 
	63, 63, 63, 63, 66, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 57, 144, 0, 54, 0, 81, 
	84, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 21, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 57, 144, 0, 54, 0, 75, 33, 
	84, 84, 84, 84, 84, 84, 84, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 17, 17, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 57, 144, 0, 54, 0, 
	78, 33, 84, 84, 84, 84, 84, 84, 
	84, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 19, 19, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 57, 
	144, 0, 54, 0, 69, 33, 84, 84, 
	84, 84, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 13, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 13, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 37, 37, 54, 37, 
	87, 0, 0, 39, 0, 0, 93, 90, 
	41, 96, 90, 96, 96, 96, 96, 96, 
	96, 96, 99, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0
];

var _lexer_eof_actions = [
	0, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43
];

var lexer_start = 1;
var lexer_first_final = 453;
var lexer_error = 0;

var lexer_en_main = 1;


/* line 129 "ragel/i18n/vi.js.rl" */

/* line 130 "ragel/i18n/vi.js.rl" */

/* line 131 "ragel/i18n/vi.js.rl" */

/* line 132 "ragel/i18n/vi.js.rl" */

var Lexer = function(listener) {
  // Check that listener has the required functions
  var events = ['comment', 'tag', 'feature', 'background', 'scenario', 'scenario_outline', 'examples', 'step', 'doc_string', 'row', 'eof'];
  for(var i=0, len=events.length; i<len; i++) {
    var event = events[i];
    if(typeof listener[event] != 'function') {
      throw new Error("Error. No " + event + " function exists on " + JSON.stringify(listener));
    }
  }
  this.listener = listener;
};

Lexer.prototype.scan = function(data) {
  var ending = "\n%_FEATURE_END_%";
  if(typeof data == 'string') {
    data = this.stringToBytes(data + ending);
  } else if(typeof Buffer != 'undefined' && Buffer.isBuffer(data)) {
    // Node.js
    var buf = new Buffer(data.length + ending.length);
    data.copy(buf, 0, 0);
    new Buffer(ending).copy(buf, data.length, 0);
    data = buf;
  }
  var eof = pe = data.length;
  var p = 0;

  this.line_number = 1;
  this.last_newline = 0;
  var signedCharValue=function(v){return v > 127 ? v-256 : v; };

  
/* line 823 "js/lib/gherkin/lexer/vi.js" */
{
	  this.cs = lexer_start;
} /* JSCodeGen::writeInit */

/* line 164 "ragel/i18n/vi.js.rl" */
  
/* line 830 "js/lib/gherkin/lexer/vi.js" */
{
	var _klen, _trans, _keys, _ps, _widec, _acts, _nacts;
	var _goto_level, _resume, _eof_trans, _again, _test_eof;
	var _out;
	_klen = _trans = _keys = _acts = _nacts = null;
	_goto_level = 0;
	_resume = 10;
	_eof_trans = 15;
	_again = 20;
	_test_eof = 30;
	_out = 40;
	while (true) {
	_trigger_goto = false;
	if (_goto_level <= 0) {
	if (p == pe) {
		_goto_level = _test_eof;
		continue;
	}
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	}
	if (_goto_level <= _resume) {
	_keys = _lexer_key_offsets[ this.cs];
	_trans = _lexer_index_offsets[ this.cs];
	_klen = _lexer_single_lengths[ this.cs];
	_break_match = false;
	
	do {
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + _klen - 1;

	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + ( (_upper - _lower) >> 1 );

	        if (( signedCharValue(data[p])) < _lexer_trans_keys[_mid]) {
	           _upper = _mid - 1;
	        } else if (( signedCharValue(data[p])) > _lexer_trans_keys[_mid]) {
	           _lower = _mid + 1;
	        } else {
	           _trans += (_mid - _keys);
	           _break_match = true;
	           break;
	        };
	     } /* while */
	     if (_break_match) { break; }
	     _keys += _klen;
	     _trans += _klen;
	  }
	  _klen = _lexer_range_lengths[ this.cs];
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + (_klen << 1) - 2;
	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + (((_upper-_lower) >> 1) & ~1);
	        if (( signedCharValue(data[p])) < _lexer_trans_keys[_mid]) {
	          _upper = _mid - 2;
	         } else if (( signedCharValue(data[p])) > _lexer_trans_keys[_mid+1]) {
	          _lower = _mid + 2;
	        } else {
	          _trans += ((_mid - _keys) >> 1);
	          _break_match = true;
	          break;
	        }
	     } /* while */
	     if (_break_match) { break; }
	     _trans += _klen
	  }
	} while (false);
	_trans = _lexer_indicies[_trans];
	 this.cs = _lexer_trans_targs[_trans];
	if (_lexer_trans_actions[_trans] != 0) {
		_acts = _lexer_trans_actions[_trans];
		_nacts = _lexer_actions[_acts];
		_acts += 1;
		while (_nacts > 0) {
			_nacts -= 1;
			_acts += 1;
			switch (_lexer_actions[_acts - 1]) {
case 0:
/* line 6 "ragel/i18n/vi.js.rl" */

    this.content_start = p;
    this.current_line = this.line_number;
    this.start_col = p - this.last_newline - (this.keyword+':').length;
  		break;
case 1:
/* line 12 "ragel/i18n/vi.js.rl" */

    this.current_line = this.line_number;
    this.start_col = p - this.last_newline;
  		break;
case 2:
/* line 17 "ragel/i18n/vi.js.rl" */

    this.content_start = p;
  		break;
case 3:
/* line 21 "ragel/i18n/vi.js.rl" */

    this.docstring_content_type_start = p;
  		break;
case 4:
/* line 25 "ragel/i18n/vi.js.rl" */

    this.docstring_content_type_end = p;
  		break;
case 5:
/* line 29 "ragel/i18n/vi.js.rl" */

    var con = this.unindent(
      this.start_col, 
      this.bytesToString(data.slice(this.content_start, this.next_keyword_start-1)).replace(/(\r?\n)?([\t ])*$/, '').replace(/\\\"\\\"\\\"/mg, '"""')
    );
    var con_type = this.bytesToString(data.slice(this.docstring_content_type_start, this.docstring_content_type_end)).trim();
    this.listener.doc_string(con_type, con, this.current_line); 
  		break;
case 6:
/* line 38 "ragel/i18n/vi.js.rl" */

    p = this.store_keyword_content('feature', data, p, eof);
  		break;
case 7:
/* line 42 "ragel/i18n/vi.js.rl" */

    p = this.store_keyword_content('background', data, p, eof);
  		break;
case 8:
/* line 46 "ragel/i18n/vi.js.rl" */

    p = this.store_keyword_content('scenario', data, p, eof);
  		break;
case 9:
/* line 50 "ragel/i18n/vi.js.rl" */

    p = this.store_keyword_content('scenario_outline', data, p, eof);
  		break;
case 10:
/* line 54 "ragel/i18n/vi.js.rl" */

    p = this.store_keyword_content('examples', data, p, eof);
  		break;
case 11:
/* line 58 "ragel/i18n/vi.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.step(this.keyword, con, this.current_line);
  		break;
case 12:
/* line 63 "ragel/i18n/vi.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.comment(con, this.line_number);
    this.keyword_start = null;
  		break;
case 13:
/* line 69 "ragel/i18n/vi.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.tag(con, this.line_number);
    this.keyword_start = null;
  		break;
case 14:
/* line 75 "ragel/i18n/vi.js.rl" */

    this.line_number++;
  		break;
case 15:
/* line 79 "ragel/i18n/vi.js.rl" */

    this.last_newline = p + 1;
  		break;
case 16:
/* line 83 "ragel/i18n/vi.js.rl" */

    this.keyword_start = this.keyword_start || p;
  		break;
case 17:
/* line 87 "ragel/i18n/vi.js.rl" */

    this.keyword = this.bytesToString(data.slice(this.keyword_start, p)).replace(/:$/, '');
    this.keyword_start = null;
  		break;
case 18:
/* line 92 "ragel/i18n/vi.js.rl" */

    this.next_keyword_start = p;
  		break;
case 19:
/* line 96 "ragel/i18n/vi.js.rl" */

    p = p - 1;
    current_row = [];
    this.current_line = this.line_number;
  		break;
case 20:
/* line 102 "ragel/i18n/vi.js.rl" */

    this.content_start = p;
  		break;
case 21:
/* line 106 "ragel/i18n/vi.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    current_row.push(con.replace(/\\\|/, "|").replace(/\\n/, "\n").replace(/\\\\/, "\\"));
  		break;
case 22:
/* line 111 "ragel/i18n/vi.js.rl" */

    this.listener.row(current_row, this.current_line);
  		break;
case 23:
/* line 115 "ragel/i18n/vi.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw new Error("Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.");
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 1057 "js/lib/gherkin/lexer/vi.js" */
			} /* action switch */
		}
	}
	if (_trigger_goto) {
		continue;
	}
	}
	if (_goto_level <= _again) {
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	p += 1;
	if (p != pe) {
		_goto_level = _resume;
		continue;
	}
	}
	if (_goto_level <= _test_eof) {
	if (p == eof) {
	__acts = _lexer_eof_actions[ this.cs];
	__nacts =  _lexer_actions[__acts];
	__acts += 1;
	while (__nacts > 0) {
		__nacts -= 1;
		__acts += 1;
		switch (_lexer_actions[__acts - 1]) {
case 23:
/* line 115 "ragel/i18n/vi.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw new Error("Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.");
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 1096 "js/lib/gherkin/lexer/vi.js" */
		} /* eof action switch */
	}
	if (_trigger_goto) {
		continue;
	}
}
	}
	if (_goto_level <= _out) {
		break;
	}
	}
	}

/* line 165 "ragel/i18n/vi.js.rl" */
};


/*
 * Decode utf-8 byte sequence to string.
 */
var decodeUtf8 = function(bytes) {
  var result = "";
  var i = 0;
  var wc;
  var c;

  while (i < bytes.length) {
    /* parse as UTF-8 lead byte */
    wc = bytes[i++];
    if (wc < 0x80) {
      count = 0;
    } else if (wc < 0xC2 || wc >= 0xF8) {
      throw new Error("input is not a valid UTF-8 lead octet");
    } else if (wc < 0xE0) {
      count = 1;
      wc = (wc & 0x1F) << 6;
    } else if (wc < 0xF0) {
      count = 2;
      wc = (wc & 0x0F) << 12;
    } else /* wc < 0xF8 */ {
      count = 3;
      wc = (wc & 0x07) << 18;
    }

    /* parse trail bytes, if any */
    while (count) {
      if (!(i < bytes.length)) {
        throw new Error("short read");
      }
      if ((c = bytes[i++] ^ 0x80) > 0x3F) {
        throw new Error("input is not a valid UTF-8 trail octet");
      }
      wc |= c << (6 * --count);
      if (wc < (1 << (5 * count + 6))) {
        throw new Error("invalid non-minimal encoded input");
      }
    }

    /* handle conversion to UTF-16 if needed */
    if (wc > 0xFFFF) {
      wc -= 0x10000;
      result += String.fromCharCode(0xD800 + (wc >> 10));
      wc = 0xDC00 + (wc & 0x3FF);
    }
    result += String.fromCharCode(wc);
  }

  return result;
};

/*
 * Encode string to an array of bytes using utf8 encoding.
 *
 * Javascript internally stores character data as utf16 (like java).
 * String.charCodeAt() does *not* produce unicode points, but simply
 * reflects this internal representation. Thus, it is necessary
 * to first decode the utf-16 representation before encoding to
 * utf-8.
 */
var encodeUtf8 = function(string) {
  var bytes = [];
  var i = 0;
  var j = 0;
  var wc;

  while (i < string.length) {
    wc = string.charCodeAt(i++);
    if (wc >= 0xD800 && wc <= 0xDBFF && i < string.length && string.charCodeAt(i) >= 0xDC00 && string.charCodeAt(i) <= 0xDFFF) {
      /* decode UTF-16 */
      wc = 0x10000 + ((wc & 0x3FF) << 10) + (string.charCodeAt(i++) & 0x3FF);
    }

    /* emit lead byte */
    if (wc < 0x80) {
      bytes[j++] = wc;
      count = 0;
    } else if (wc < 0x800) {
      bytes[j++] = 0xC0 | (wc >> 6);
      count = 1;
    } else if (wc < 0x10000) {
      bytes[j++] = 0xE0 | (wc >> 12);
      count = 2;
    } else {
      /* SMP: 21-bit Unicode */
      bytes[j++] = 0xF0 | (wc >> 18);
      count = 3;
    }

    /* emit trail bytes, if any */
    while (count) {
      bytes[j++] = 0x80 | ((wc >> (6 * --count)) & 0x3F);
    }
  }

  return bytes;

};

Lexer.prototype.bytesToString = function(bytes) {
  if(typeof bytes.write == 'function') {
    // Node.js
    return bytes.toString('utf-8');
  }
  return decodeUtf8(bytes);
};

Lexer.prototype.stringToBytes = function(string) {
  return encodeUtf8(string);
};

Lexer.prototype.unindent = function(startcol, text) {
  startcol = startcol || 0;
  return text.replace(new RegExp('^[\t ]{0,' + startcol + '}', 'gm'), ''); 
};

Lexer.prototype.store_keyword_content = function(event, data, p, eof) {
  var end_point = (!this.next_keyword_start || (p == eof)) ? p : this.next_keyword_start;
  var content = this.unindent(this.start_col + 2, this.bytesToString(data.slice(this.content_start, end_point))).replace(/\s+$/,"");
  var content_lines = content.split("\n")
  var name = content_lines.shift() || "";
  name = name.trim();
  var description = content_lines.join("\n");
  this.listener[event](this.keyword, name, description, this.current_line);
  var nks = this.next_keyword_start;
  this.next_keyword_start = null;
  return nks ? nks - 1 : p;
};

Lexer.prototype.current_line_content = function(data, p) {
  var rest = Array.prototype.slice.call(data,this.last_newline, -1);
  var end = rest.indexOf(10) || -1;
  return this.bytesToString(rest.slice(0, end)).trim();
};

// Node.js export
if(typeof module !== 'undefined') {
  module.exports = Lexer;
}
// Require.js export
if (typeof define !== 'undefined') {
  if(define.amd) {
    define('gherkin/lexer/vi', [], function() {
      return Lexer;
    });
  } else {
    define('gherkin/lexer/vi', function(require, exports, module) {
      exports.Lexer = Lexer;
    });
  }
}

})();

}).call(this,require("buffer").Buffer)

},{"buffer":69}],239:[function(require,module,exports){
(function (Buffer){

/* line 1 "ragel/i18n/zh_cn.js.rl" */
;(function() {


/* line 126 "ragel/i18n/zh_cn.js.rl" */



/* line 11 "js/lib/gherkin/lexer/zh_cn.js" */
var _lexer_actions = [
	0, 1, 0, 1, 1, 1, 2, 1, 
	3, 1, 4, 1, 5, 1, 6, 1, 
	7, 1, 8, 1, 9, 1, 10, 1, 
	11, 1, 12, 1, 13, 1, 16, 1, 
	17, 1, 18, 1, 19, 1, 20, 1, 
	21, 1, 22, 1, 23, 2, 2, 18, 
	2, 3, 4, 2, 13, 0, 2, 14, 
	15, 2, 17, 0, 2, 17, 1, 2, 
	17, 16, 2, 17, 19, 2, 18, 6, 
	2, 18, 7, 2, 18, 8, 2, 18, 
	9, 2, 18, 10, 2, 18, 16, 2, 
	20, 21, 2, 22, 0, 2, 22, 1, 
	2, 22, 16, 2, 22, 19, 3, 4, 
	14, 15, 3, 5, 14, 15, 3, 11, 
	14, 15, 3, 12, 14, 15, 3, 13, 
	14, 15, 3, 14, 15, 18, 3, 17, 
	0, 11, 3, 17, 14, 15, 4, 2, 
	14, 15, 18, 4, 3, 4, 14, 15, 
	4, 17, 0, 14, 15, 5, 17, 0, 
	11, 14, 15
];

var _lexer_key_offsets = [
	0, 0, 15, 17, 18, 19, 20, 21, 
	23, 25, 39, 46, 47, 49, 51, 52, 
	53, 54, 55, 56, 57, 58, 59, 61, 
	62, 63, 64, 65, 66, 67, 68, 69, 
	81, 83, 85, 87, 89, 91, 105, 107, 
	108, 109, 110, 111, 112, 113, 114, 115, 
	116, 117, 118, 130, 132, 134, 136, 138, 
	140, 148, 150, 153, 156, 158, 160, 162, 
	164, 166, 168, 170, 172, 175, 177, 179, 
	181, 183, 185, 187, 189, 191, 193, 195, 
	197, 199, 201, 203, 205, 207, 209, 211, 
	213, 215, 217, 219, 221, 223, 225, 227, 
	229, 231, 233, 235, 237, 239, 241, 243, 
	245, 247, 249, 251, 253, 255, 257, 259, 
	261, 263, 265, 266, 267, 268, 269, 270, 
	271, 272, 274, 276, 281, 286, 291, 296, 
	300, 304, 306, 307, 308, 309, 310, 311, 
	312, 313, 314, 315, 316, 317, 318, 319, 
	320, 321, 322, 327, 334, 339, 343, 349, 
	352, 354, 360, 374, 382, 384, 387, 390, 
	392, 394, 396, 398, 400, 402, 404, 406, 
	408, 410, 412, 414, 416, 418, 420, 422, 
	424, 426, 428, 430, 432, 434, 436, 438, 
	440, 442, 444, 446, 448, 450, 452, 454, 
	456, 458, 460, 462, 464, 466, 468, 470, 
	472, 474, 476, 478, 480, 482, 484, 486, 
	487, 488, 500, 502, 504, 506, 508, 510, 
	518, 520, 523, 526, 528, 530, 532, 534, 
	536, 538, 540, 542, 545, 547, 549, 551, 
	553, 555, 557, 559, 561, 563, 565, 567, 
	569, 571, 573, 575, 577, 579, 581, 583, 
	585, 587, 589, 591, 594, 596, 598, 600, 
	602, 604, 606, 608, 610, 612, 614, 616, 
	618, 620, 622, 624, 626, 628, 630, 632, 
	634, 636, 638, 640, 642, 644, 645, 646, 
	647, 648, 649, 650, 651, 661, 663, 665, 
	667, 669, 671, 673, 677, 679, 681, 683, 
	685, 688, 690, 692, 694, 696, 698, 700, 
	702, 704, 706, 708, 710, 712, 714, 716, 
	718, 720, 722, 724, 726, 728, 730, 732, 
	734, 736, 738, 740, 742, 744, 746, 748, 
	750, 752, 753, 754, 755, 756, 757, 758, 
	759, 760, 761, 762, 763, 764, 765, 766, 
	767, 768, 769, 776, 778, 780, 782, 784, 
	786, 788, 789, 790
];

var _lexer_trans_keys = [
	-28, -27, -24, -23, 10, 32, 34, 35, 
	37, 42, 64, 124, 239, 9, 13, -67, 
	-66, -122, -26, -104, -81, 10, 13, 10, 
	13, -28, -27, -24, -23, 10, 32, 34, 
	35, 37, 42, 64, 124, 9, 13, -127, 
	-119, -118, -112, -100, -71, -67, -121, -27, 
	-24, -90, -82, -126, -102, -82, -66, -89, 
	-26, -100, -84, -27, 58, -92, -89, -25, 
	-70, -78, 58, 10, 10, -28, -27, -24, 
	-23, 10, 32, 35, 37, 42, 64, 9, 
	13, -67, 10, -122, 10, -26, 10, -104, 
	10, -81, 10, -28, -27, -24, -23, 10, 
	32, 34, 35, 37, 42, 64, 124, 9, 
	13, -128, -125, -116, -28, -72, -108, -116, 
	-26, -103, -81, 58, 10, 10, -28, -27, 
	-24, -23, 10, 32, 35, 37, 42, 64, 
	9, 13, -67, 10, -122, 10, -26, 10, 
	-104, 10, -81, 10, -127, -119, -118, -112, 
	-100, -71, -67, 10, -121, 10, -27, -24, 
	10, -90, -82, 10, -126, 10, -102, 10, 
	-82, 10, -66, 10, -89, 10, -26, 10, 
	-100, 10, -84, 10, -27, 10, 58, -92, 
	10, -89, 10, -25, 10, -70, 10, -78, 
	10, 10, 58, -97, 10, -24, 10, -125, 
	10, -67, 10, -116, 10, -26, 10, -105, 
	10, -74, 10, -70, 10, -26, 10, -103, 
	10, -81, 10, -74, 10, -28, 10, -72, 
	10, -108, 10, -109, 10, -128, 10, -116, 
	10, -126, 10, -93, 10, -28, 10, -71, 
	10, -120, 10, 10, 95, 10, 70, 10, 
	69, 10, 65, 10, 84, 10, 85, 10, 
	82, 10, 69, 10, 95, 10, 69, 10, 
	78, 10, 68, 10, 95, 10, 37, 10, 
	32, -126, -93, -28, -71, -120, 34, 34, 
	10, 13, 10, 13, 10, 32, 34, 9, 
	13, 10, 32, 34, 9, 13, 10, 32, 
	34, 9, 13, 10, 32, 34, 9, 13, 
	10, 32, 9, 13, 10, 32, 9, 13, 
	10, 13, 10, 95, 70, 69, 65, 84, 
	85, 82, 69, 95, 69, 78, 68, 95, 
	37, 32, 13, 32, 64, 9, 10, 9, 
	10, 13, 32, 64, 11, 12, 10, 32, 
	64, 9, 13, 32, 124, 9, 13, 10, 
	32, 92, 124, 9, 13, 10, 92, 124, 
	10, 92, 10, 32, 92, 124, 9, 13, 
	-28, -27, -24, -23, 10, 32, 34, 35, 
	37, 42, 64, 124, 9, 13, -127, -119, 
	-118, -112, -100, -71, -67, 10, -121, 10, 
	-27, -24, 10, -90, -82, 10, -126, 10, 
	-102, 10, -82, 10, -66, 10, -89, 10, 
	-26, 10, -100, 10, -84, 10, 10, 58, 
	-97, 10, -24, 10, -125, 10, -67, 10, 
	-116, 10, -26, 10, -105, 10, -74, 10, 
	-70, 10, -26, 10, -103, 10, -81, 10, 
	-74, 10, -28, 10, -72, 10, -108, 10, 
	-109, 10, -128, 10, -116, 10, -126, 10, 
	-93, 10, -28, 10, -71, 10, -120, 10, 
	10, 95, 10, 70, 10, 69, 10, 65, 
	10, 84, 10, 85, 10, 82, 10, 69, 
	10, 95, 10, 69, 10, 78, 10, 68, 
	10, 95, 10, 37, 10, 32, 10, 10, 
	-28, -27, -24, -23, 10, 32, 35, 37, 
	42, 64, 9, 13, -67, 10, -122, 10, 
	-26, 10, -104, 10, -81, 10, -127, -119, 
	-118, -112, -100, -71, -67, 10, -121, 10, 
	-27, -24, 10, -90, -82, 10, -126, 10, 
	-102, 10, -82, 10, -66, 10, -89, 10, 
	-26, 10, -100, 10, -84, 10, -27, 10, 
	58, -92, 10, -89, 10, -25, 10, -70, 
	10, -78, 10, 10, 58, -97, 10, -24, 
	10, -125, 10, -67, 10, -116, 10, -26, 
	10, -105, 10, -74, 10, -70, 10, -26, 
	10, -103, 10, -81, 10, -74, 10, -28, 
	10, -72, 10, -108, 10, -109, 10, -128, 
	-125, 10, -116, 10, -116, 10, -26, 10, 
	-103, 10, -81, 10, -126, 10, -93, 10, 
	-28, 10, -71, 10, -120, 10, 10, 95, 
	10, 70, 10, 69, 10, 65, 10, 84, 
	10, 85, 10, 82, 10, 69, 10, 95, 
	10, 69, 10, 78, 10, 68, 10, 95, 
	10, 37, 10, 32, -97, -24, -125, -67, 
	58, 10, 10, -28, -27, -24, 10, 32, 
	35, 37, 64, 9, 13, -66, 10, -117, 
	10, -27, 10, -83, 10, -112, 10, 10, 
	58, -119, -118, -100, 10, -89, 10, -26, 
	10, -100, 10, -84, 10, -27, 10, 58, 
	-92, 10, -89, 10, -25, 10, -70, 10, 
	-78, 10, -97, 10, -24, 10, -125, 10, 
	-67, 10, -70, 10, -26, 10, -103, 10, 
	-81, 10, -125, 10, -116, 10, -26, 10, 
	-103, 10, -81, 10, 10, 95, 10, 70, 
	10, 69, 10, 65, 10, 84, 10, 85, 
	10, 82, 10, 69, 10, 95, 10, 69, 
	10, 78, 10, 68, 10, 95, 10, 37, 
	-116, -26, -105, -74, -70, -26, -103, -81, 
	-74, -109, -117, -27, -83, -112, 58, 10, 
	10, -27, 10, 32, 35, 124, 9, 13, 
	-118, 10, -97, 10, -24, 10, -125, 10, 
	-67, 10, 10, 58, 187, 191, 0
];

var _lexer_single_lengths = [
	0, 13, 2, 1, 1, 1, 1, 2, 
	2, 12, 7, 1, 2, 2, 1, 1, 
	1, 1, 1, 1, 1, 1, 2, 1, 
	1, 1, 1, 1, 1, 1, 1, 10, 
	2, 2, 2, 2, 2, 12, 2, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 10, 2, 2, 2, 2, 2, 
	8, 2, 3, 3, 2, 2, 2, 2, 
	2, 2, 2, 2, 3, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 1, 1, 1, 1, 1, 1, 
	1, 2, 2, 3, 3, 3, 3, 2, 
	2, 2, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 3, 5, 3, 2, 4, 3, 
	2, 4, 12, 8, 2, 3, 3, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 1, 
	1, 10, 2, 2, 2, 2, 2, 8, 
	2, 3, 3, 2, 2, 2, 2, 2, 
	2, 2, 2, 3, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 3, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 1, 1, 1, 
	1, 1, 1, 1, 8, 2, 2, 2, 
	2, 2, 2, 4, 2, 2, 2, 2, 
	3, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 5, 2, 2, 2, 2, 2, 
	2, 1, 1, 0
];

var _lexer_range_lengths = [
	0, 1, 0, 0, 0, 0, 0, 0, 
	0, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	0, 0, 0, 0, 0, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 1, 1, 1, 1, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 1, 1, 1, 1, 0, 
	0, 1, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0
];

var _lexer_index_offsets = [
	0, 0, 15, 18, 20, 22, 24, 26, 
	29, 32, 46, 54, 56, 59, 62, 64, 
	66, 68, 70, 72, 74, 76, 78, 81, 
	83, 85, 87, 89, 91, 93, 95, 97, 
	109, 112, 115, 118, 121, 124, 138, 141, 
	143, 145, 147, 149, 151, 153, 155, 157, 
	159, 161, 163, 175, 178, 181, 184, 187, 
	190, 199, 202, 206, 210, 213, 216, 219, 
	222, 225, 228, 231, 234, 238, 241, 244, 
	247, 250, 253, 256, 259, 262, 265, 268, 
	271, 274, 277, 280, 283, 286, 289, 292, 
	295, 298, 301, 304, 307, 310, 313, 316, 
	319, 322, 325, 328, 331, 334, 337, 340, 
	343, 346, 349, 352, 355, 358, 361, 364, 
	367, 370, 373, 375, 377, 379, 381, 383, 
	385, 387, 390, 393, 398, 403, 408, 413, 
	417, 421, 424, 426, 428, 430, 432, 434, 
	436, 438, 440, 442, 444, 446, 448, 450, 
	452, 454, 456, 461, 468, 473, 477, 483, 
	487, 490, 496, 510, 519, 522, 526, 530, 
	533, 536, 539, 542, 545, 548, 551, 554, 
	557, 560, 563, 566, 569, 572, 575, 578, 
	581, 584, 587, 590, 593, 596, 599, 602, 
	605, 608, 611, 614, 617, 620, 623, 626, 
	629, 632, 635, 638, 641, 644, 647, 650, 
	653, 656, 659, 662, 665, 668, 671, 674, 
	676, 678, 690, 693, 696, 699, 702, 705, 
	714, 717, 721, 725, 728, 731, 734, 737, 
	740, 743, 746, 749, 753, 756, 759, 762, 
	765, 768, 771, 774, 777, 780, 783, 786, 
	789, 792, 795, 798, 801, 804, 807, 810, 
	813, 816, 819, 822, 826, 829, 832, 835, 
	838, 841, 844, 847, 850, 853, 856, 859, 
	862, 865, 868, 871, 874, 877, 880, 883, 
	886, 889, 892, 895, 898, 901, 903, 905, 
	907, 909, 911, 913, 915, 925, 928, 931, 
	934, 937, 940, 943, 948, 951, 954, 957, 
	960, 964, 967, 970, 973, 976, 979, 982, 
	985, 988, 991, 994, 997, 1000, 1003, 1006, 
	1009, 1012, 1015, 1018, 1021, 1024, 1027, 1030, 
	1033, 1036, 1039, 1042, 1045, 1048, 1051, 1054, 
	1057, 1060, 1062, 1064, 1066, 1068, 1070, 1072, 
	1074, 1076, 1078, 1080, 1082, 1084, 1086, 1088, 
	1090, 1092, 1094, 1101, 1104, 1107, 1110, 1113, 
	1116, 1119, 1121, 1123
];

var _lexer_indicies = [
	1, 2, 3, 4, 6, 5, 7, 8, 
	9, 10, 11, 12, 13, 5, 0, 14, 
	15, 0, 16, 0, 17, 0, 18, 0, 
	19, 0, 21, 22, 20, 24, 25, 23, 
	1, 2, 3, 4, 6, 5, 7, 8, 
	9, 10, 11, 12, 5, 0, 26, 27, 
	28, 29, 30, 31, 32, 0, 33, 0, 
	34, 35, 0, 36, 37, 0, 19, 0, 
	19, 0, 38, 0, 19, 0, 39, 0, 
	40, 0, 41, 0, 42, 0, 43, 44, 
	0, 45, 0, 46, 0, 47, 0, 48, 
	0, 49, 0, 50, 0, 52, 51, 54, 
	53, 55, 56, 57, 58, 54, 59, 60, 
	61, 62, 60, 59, 53, 63, 54, 53, 
	64, 54, 53, 65, 54, 53, 66, 54, 
	53, 67, 54, 53, 68, 69, 70, 71, 
	73, 72, 74, 75, 76, 77, 78, 79, 
	72, 0, 80, 81, 0, 82, 0, 83, 
	0, 84, 0, 19, 0, 85, 0, 86, 
	0, 87, 0, 88, 0, 89, 0, 91, 
	90, 93, 92, 94, 95, 96, 97, 93, 
	98, 99, 100, 101, 99, 98, 92, 102, 
	93, 92, 103, 93, 92, 104, 93, 92, 
	105, 93, 92, 106, 93, 92, 107, 108, 
	109, 110, 111, 112, 113, 93, 92, 114, 
	93, 92, 115, 116, 93, 92, 117, 118, 
	93, 92, 106, 93, 92, 106, 93, 92, 
	119, 93, 92, 106, 93, 92, 120, 93, 
	92, 121, 93, 92, 122, 93, 92, 123, 
	93, 92, 124, 93, 106, 92, 125, 93, 
	92, 126, 93, 92, 127, 93, 92, 128, 
	93, 92, 129, 93, 92, 93, 106, 92, 
	130, 93, 92, 131, 93, 92, 132, 93, 
	92, 129, 93, 92, 133, 93, 92, 134, 
	93, 92, 135, 93, 92, 106, 93, 92, 
	136, 93, 92, 137, 93, 92, 138, 93, 
	92, 123, 93, 92, 139, 93, 92, 140, 
	93, 92, 141, 93, 92, 106, 93, 92, 
	106, 93, 92, 142, 93, 92, 139, 93, 
	92, 143, 93, 92, 144, 93, 92, 145, 
	93, 92, 146, 93, 92, 106, 93, 92, 
	93, 147, 92, 93, 148, 92, 93, 149, 
	92, 93, 150, 92, 93, 151, 92, 93, 
	152, 92, 93, 153, 92, 93, 154, 92, 
	93, 155, 92, 93, 156, 92, 93, 157, 
	92, 93, 158, 92, 93, 159, 92, 93, 
	160, 92, 93, 106, 92, 161, 0, 162, 
	0, 163, 0, 164, 0, 19, 0, 165, 
	0, 166, 0, 168, 169, 167, 171, 172, 
	170, 175, 174, 176, 174, 173, 179, 178, 
	180, 178, 177, 179, 178, 181, 178, 177, 
	179, 178, 182, 178, 177, 184, 183, 183, 
	0, 6, 185, 185, 0, 187, 188, 186, 
	6, 0, 189, 0, 190, 0, 191, 0, 
	192, 0, 193, 0, 194, 0, 195, 0, 
	196, 0, 197, 0, 198, 0, 199, 0, 
	200, 0, 201, 0, 202, 0, 19, 0, 
	0, 0, 0, 0, 203, 204, 205, 204, 
	204, 207, 206, 203, 6, 208, 11, 208, 
	0, 209, 210, 209, 0, 213, 212, 214, 
	215, 212, 211, 0, 217, 218, 216, 0, 
	217, 216, 213, 219, 217, 218, 219, 216, 
	220, 221, 222, 223, 213, 224, 225, 226, 
	227, 228, 229, 230, 224, 0, 231, 232, 
	233, 234, 235, 236, 237, 54, 53, 238, 
	54, 53, 239, 240, 54, 53, 241, 242, 
	54, 53, 67, 54, 53, 67, 54, 53, 
	243, 54, 53, 67, 54, 53, 244, 54, 
	53, 245, 54, 53, 246, 54, 53, 247, 
	54, 53, 54, 67, 53, 248, 54, 53, 
	249, 54, 53, 250, 54, 53, 247, 54, 
	53, 251, 54, 53, 252, 54, 53, 253, 
	54, 53, 67, 54, 53, 254, 54, 53, 
	255, 54, 53, 256, 54, 53, 247, 54, 
	53, 257, 54, 53, 258, 54, 53, 259, 
	54, 53, 67, 54, 53, 67, 54, 53, 
	260, 54, 53, 257, 54, 53, 261, 54, 
	53, 262, 54, 53, 263, 54, 53, 264, 
	54, 53, 67, 54, 53, 54, 265, 53, 
	54, 266, 53, 54, 267, 53, 54, 268, 
	53, 54, 269, 53, 54, 270, 53, 54, 
	271, 53, 54, 272, 53, 54, 273, 53, 
	54, 274, 53, 54, 275, 53, 54, 276, 
	53, 54, 277, 53, 54, 278, 53, 54, 
	67, 53, 280, 279, 282, 281, 283, 284, 
	285, 286, 282, 287, 288, 289, 290, 288, 
	287, 281, 291, 282, 281, 292, 282, 281, 
	293, 282, 281, 294, 282, 281, 295, 282, 
	281, 296, 297, 298, 299, 300, 301, 302, 
	282, 281, 303, 282, 281, 304, 305, 282, 
	281, 306, 307, 282, 281, 295, 282, 281, 
	295, 282, 281, 308, 282, 281, 295, 282, 
	281, 309, 282, 281, 310, 282, 281, 311, 
	282, 281, 312, 282, 281, 313, 282, 295, 
	281, 314, 282, 281, 315, 282, 281, 316, 
	282, 281, 317, 282, 281, 318, 282, 281, 
	282, 295, 281, 319, 282, 281, 320, 282, 
	281, 321, 282, 281, 318, 282, 281, 322, 
	282, 281, 323, 282, 281, 324, 282, 281, 
	295, 282, 281, 325, 282, 281, 326, 282, 
	281, 327, 282, 281, 312, 282, 281, 328, 
	282, 281, 329, 282, 281, 330, 282, 281, 
	295, 282, 281, 295, 282, 281, 331, 332, 
	282, 281, 328, 282, 281, 333, 282, 281, 
	334, 282, 281, 335, 282, 281, 318, 282, 
	281, 336, 282, 281, 337, 282, 281, 338, 
	282, 281, 339, 282, 281, 295, 282, 281, 
	282, 340, 281, 282, 341, 281, 282, 342, 
	281, 282, 343, 281, 282, 344, 281, 282, 
	345, 281, 282, 346, 281, 282, 347, 281, 
	282, 348, 281, 282, 349, 281, 282, 350, 
	281, 282, 351, 281, 282, 352, 281, 282, 
	353, 281, 282, 295, 281, 354, 0, 355, 
	0, 356, 0, 357, 0, 358, 0, 360, 
	359, 362, 361, 363, 364, 365, 362, 366, 
	367, 368, 367, 366, 361, 369, 362, 361, 
	370, 362, 361, 371, 362, 361, 372, 362, 
	361, 373, 362, 361, 362, 374, 361, 375, 
	376, 377, 362, 361, 378, 362, 361, 379, 
	362, 361, 380, 362, 361, 381, 362, 361, 
	382, 362, 374, 361, 383, 362, 361, 384, 
	362, 361, 385, 362, 361, 386, 362, 361, 
	373, 362, 361, 387, 362, 361, 388, 362, 
	361, 389, 362, 361, 373, 362, 361, 390, 
	362, 361, 391, 362, 361, 392, 362, 361, 
	381, 362, 361, 393, 362, 361, 394, 362, 
	361, 395, 362, 361, 396, 362, 361, 373, 
	362, 361, 362, 397, 361, 362, 398, 361, 
	362, 399, 361, 362, 400, 361, 362, 401, 
	361, 362, 402, 361, 362, 403, 361, 362, 
	404, 361, 362, 405, 361, 362, 406, 361, 
	362, 407, 361, 362, 408, 361, 362, 409, 
	361, 362, 410, 361, 411, 0, 412, 0, 
	413, 0, 19, 0, 414, 0, 415, 0, 
	416, 0, 42, 0, 82, 0, 19, 0, 
	417, 0, 418, 0, 419, 0, 420, 0, 
	421, 0, 423, 422, 425, 424, 426, 425, 
	427, 428, 428, 427, 424, 429, 425, 424, 
	430, 425, 424, 431, 425, 424, 432, 425, 
	424, 433, 425, 424, 425, 434, 424, 435, 
	0, 5, 0, 436, 0
];

var _lexer_trans_targs = [
	0, 2, 10, 38, 114, 9, 9, 119, 
	129, 131, 145, 146, 149, 353, 3, 339, 
	4, 5, 6, 7, 8, 9, 130, 8, 
	9, 130, 11, 18, 277, 329, 333, 337, 
	338, 12, 13, 16, 14, 15, 17, 19, 
	20, 21, 22, 23, 207, 24, 25, 26, 
	27, 28, 29, 30, 31, 30, 31, 32, 
	155, 185, 187, 31, 9, 192, 206, 33, 
	34, 35, 36, 37, 2, 10, 38, 114, 
	9, 9, 119, 129, 131, 145, 146, 149, 
	39, 43, 40, 41, 42, 44, 45, 46, 
	47, 48, 49, 50, 49, 50, 51, 56, 
	92, 94, 50, 9, 99, 113, 52, 53, 
	54, 55, 37, 57, 64, 75, 79, 83, 
	87, 91, 58, 59, 62, 60, 61, 63, 
	65, 66, 67, 68, 69, 70, 71, 72, 
	73, 74, 76, 77, 78, 80, 81, 82, 
	84, 85, 86, 88, 89, 90, 93, 95, 
	96, 97, 98, 100, 101, 102, 103, 104, 
	105, 106, 107, 108, 109, 110, 111, 112, 
	9, 115, 116, 117, 118, 120, 121, 122, 
	123, 122, 122, 123, 122, 124, 124, 124, 
	125, 124, 124, 124, 125, 126, 127, 128, 
	9, 128, 129, 9, 130, 132, 133, 134, 
	135, 136, 137, 138, 139, 140, 141, 142, 
	143, 144, 355, 147, 148, 9, 147, 146, 
	148, 149, 150, 151, 153, 154, 152, 150, 
	151, 152, 150, 153, 2, 10, 38, 114, 
	154, 119, 129, 131, 145, 146, 149, 156, 
	163, 168, 172, 176, 180, 184, 157, 158, 
	161, 159, 160, 162, 164, 165, 166, 167, 
	169, 170, 171, 173, 174, 175, 177, 178, 
	179, 181, 182, 183, 186, 188, 189, 190, 
	191, 193, 194, 195, 196, 197, 198, 199, 
	200, 201, 202, 203, 204, 205, 9, 208, 
	209, 208, 209, 210, 215, 251, 257, 209, 
	9, 262, 276, 211, 212, 213, 214, 37, 
	216, 223, 234, 238, 242, 246, 250, 217, 
	218, 221, 219, 220, 222, 224, 225, 226, 
	227, 228, 229, 230, 231, 232, 233, 235, 
	236, 237, 239, 240, 241, 243, 244, 245, 
	247, 248, 249, 252, 253, 254, 255, 256, 
	258, 259, 260, 261, 263, 264, 265, 266, 
	267, 268, 269, 270, 271, 272, 273, 274, 
	275, 9, 278, 279, 280, 281, 282, 283, 
	284, 283, 284, 285, 291, 310, 284, 9, 
	315, 286, 287, 288, 289, 290, 37, 292, 
	302, 306, 293, 294, 295, 296, 297, 298, 
	299, 300, 301, 303, 304, 305, 307, 308, 
	309, 311, 312, 313, 314, 316, 317, 318, 
	319, 320, 321, 322, 323, 324, 325, 326, 
	327, 328, 9, 330, 331, 332, 334, 335, 
	336, 340, 341, 342, 343, 344, 345, 346, 
	345, 346, 347, 346, 9, 348, 349, 350, 
	351, 352, 37, 354, 0
];

var _lexer_trans_actions = [
	43, 29, 29, 29, 29, 0, 54, 3, 
	1, 0, 29, 1, 35, 0, 0, 0, 
	0, 0, 0, 0, 57, 149, 126, 0, 
	110, 23, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 57, 144, 0, 54, 84, 
	84, 84, 84, 0, 78, 33, 84, 0, 
	0, 0, 0, 19, 63, 63, 63, 63, 
	31, 130, 60, 57, 31, 63, 57, 66, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 57, 144, 0, 54, 84, 84, 
	84, 84, 0, 72, 33, 84, 0, 0, 
	0, 0, 15, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	15, 0, 0, 0, 0, 0, 0, 7, 
	139, 48, 0, 102, 9, 5, 45, 134, 
	45, 0, 33, 122, 33, 33, 0, 11, 
	106, 0, 0, 114, 25, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 27, 118, 27, 51, 
	0, 0, 0, 37, 37, 54, 37, 87, 
	0, 0, 39, 0, 96, 96, 96, 96, 
	0, 93, 90, 41, 96, 90, 99, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 19, 57, 
	144, 0, 54, 84, 84, 84, 84, 0, 
	75, 33, 84, 0, 0, 0, 0, 17, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 17, 0, 0, 0, 0, 0, 57, 
	144, 0, 54, 84, 84, 84, 0, 69, 
	33, 0, 0, 0, 0, 0, 13, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 13, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 57, 144, 
	0, 54, 84, 0, 81, 0, 0, 0, 
	0, 0, 21, 0, 0
];

var _lexer_eof_actions = [
	0, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43
];

var lexer_start = 1;
var lexer_first_final = 355;
var lexer_error = 0;

var lexer_en_main = 1;


/* line 129 "ragel/i18n/zh_cn.js.rl" */

/* line 130 "ragel/i18n/zh_cn.js.rl" */

/* line 131 "ragel/i18n/zh_cn.js.rl" */

/* line 132 "ragel/i18n/zh_cn.js.rl" */

var Lexer = function(listener) {
  // Check that listener has the required functions
  var events = ['comment', 'tag', 'feature', 'background', 'scenario', 'scenario_outline', 'examples', 'step', 'doc_string', 'row', 'eof'];
  for(var i=0, len=events.length; i<len; i++) {
    var event = events[i];
    if(typeof listener[event] != 'function') {
      throw new Error("Error. No " + event + " function exists on " + JSON.stringify(listener));
    }
  }
  this.listener = listener;
};

Lexer.prototype.scan = function(data) {
  var ending = "\n%_FEATURE_END_%";
  if(typeof data == 'string') {
    data = this.stringToBytes(data + ending);
  } else if(typeof Buffer != 'undefined' && Buffer.isBuffer(data)) {
    // Node.js
    var buf = new Buffer(data.length + ending.length);
    data.copy(buf, 0, 0);
    new Buffer(ending).copy(buf, data.length, 0);
    data = buf;
  }
  var eof = pe = data.length;
  var p = 0;

  this.line_number = 1;
  this.last_newline = 0;
  var signedCharValue=function(v){return v > 127 ? v-256 : v; };

  
/* line 683 "js/lib/gherkin/lexer/zh_cn.js" */
{
	  this.cs = lexer_start;
} /* JSCodeGen::writeInit */

/* line 164 "ragel/i18n/zh_cn.js.rl" */
  
/* line 690 "js/lib/gherkin/lexer/zh_cn.js" */
{
	var _klen, _trans, _keys, _ps, _widec, _acts, _nacts;
	var _goto_level, _resume, _eof_trans, _again, _test_eof;
	var _out;
	_klen = _trans = _keys = _acts = _nacts = null;
	_goto_level = 0;
	_resume = 10;
	_eof_trans = 15;
	_again = 20;
	_test_eof = 30;
	_out = 40;
	while (true) {
	_trigger_goto = false;
	if (_goto_level <= 0) {
	if (p == pe) {
		_goto_level = _test_eof;
		continue;
	}
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	}
	if (_goto_level <= _resume) {
	_keys = _lexer_key_offsets[ this.cs];
	_trans = _lexer_index_offsets[ this.cs];
	_klen = _lexer_single_lengths[ this.cs];
	_break_match = false;
	
	do {
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + _klen - 1;

	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + ( (_upper - _lower) >> 1 );

	        if (( signedCharValue(data[p])) < _lexer_trans_keys[_mid]) {
	           _upper = _mid - 1;
	        } else if (( signedCharValue(data[p])) > _lexer_trans_keys[_mid]) {
	           _lower = _mid + 1;
	        } else {
	           _trans += (_mid - _keys);
	           _break_match = true;
	           break;
	        };
	     } /* while */
	     if (_break_match) { break; }
	     _keys += _klen;
	     _trans += _klen;
	  }
	  _klen = _lexer_range_lengths[ this.cs];
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + (_klen << 1) - 2;
	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + (((_upper-_lower) >> 1) & ~1);
	        if (( signedCharValue(data[p])) < _lexer_trans_keys[_mid]) {
	          _upper = _mid - 2;
	         } else if (( signedCharValue(data[p])) > _lexer_trans_keys[_mid+1]) {
	          _lower = _mid + 2;
	        } else {
	          _trans += ((_mid - _keys) >> 1);
	          _break_match = true;
	          break;
	        }
	     } /* while */
	     if (_break_match) { break; }
	     _trans += _klen
	  }
	} while (false);
	_trans = _lexer_indicies[_trans];
	 this.cs = _lexer_trans_targs[_trans];
	if (_lexer_trans_actions[_trans] != 0) {
		_acts = _lexer_trans_actions[_trans];
		_nacts = _lexer_actions[_acts];
		_acts += 1;
		while (_nacts > 0) {
			_nacts -= 1;
			_acts += 1;
			switch (_lexer_actions[_acts - 1]) {
case 0:
/* line 6 "ragel/i18n/zh_cn.js.rl" */

    this.content_start = p;
    this.current_line = this.line_number;
    this.start_col = p - this.last_newline - (this.keyword+':').length;
  		break;
case 1:
/* line 12 "ragel/i18n/zh_cn.js.rl" */

    this.current_line = this.line_number;
    this.start_col = p - this.last_newline;
  		break;
case 2:
/* line 17 "ragel/i18n/zh_cn.js.rl" */

    this.content_start = p;
  		break;
case 3:
/* line 21 "ragel/i18n/zh_cn.js.rl" */

    this.docstring_content_type_start = p;
  		break;
case 4:
/* line 25 "ragel/i18n/zh_cn.js.rl" */

    this.docstring_content_type_end = p;
  		break;
case 5:
/* line 29 "ragel/i18n/zh_cn.js.rl" */

    var con = this.unindent(
      this.start_col, 
      this.bytesToString(data.slice(this.content_start, this.next_keyword_start-1)).replace(/(\r?\n)?([\t ])*$/, '').replace(/\\\"\\\"\\\"/mg, '"""')
    );
    var con_type = this.bytesToString(data.slice(this.docstring_content_type_start, this.docstring_content_type_end)).trim();
    this.listener.doc_string(con_type, con, this.current_line); 
  		break;
case 6:
/* line 38 "ragel/i18n/zh_cn.js.rl" */

    p = this.store_keyword_content('feature', data, p, eof);
  		break;
case 7:
/* line 42 "ragel/i18n/zh_cn.js.rl" */

    p = this.store_keyword_content('background', data, p, eof);
  		break;
case 8:
/* line 46 "ragel/i18n/zh_cn.js.rl" */

    p = this.store_keyword_content('scenario', data, p, eof);
  		break;
case 9:
/* line 50 "ragel/i18n/zh_cn.js.rl" */

    p = this.store_keyword_content('scenario_outline', data, p, eof);
  		break;
case 10:
/* line 54 "ragel/i18n/zh_cn.js.rl" */

    p = this.store_keyword_content('examples', data, p, eof);
  		break;
case 11:
/* line 58 "ragel/i18n/zh_cn.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.step(this.keyword, con, this.current_line);
  		break;
case 12:
/* line 63 "ragel/i18n/zh_cn.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.comment(con, this.line_number);
    this.keyword_start = null;
  		break;
case 13:
/* line 69 "ragel/i18n/zh_cn.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.tag(con, this.line_number);
    this.keyword_start = null;
  		break;
case 14:
/* line 75 "ragel/i18n/zh_cn.js.rl" */

    this.line_number++;
  		break;
case 15:
/* line 79 "ragel/i18n/zh_cn.js.rl" */

    this.last_newline = p + 1;
  		break;
case 16:
/* line 83 "ragel/i18n/zh_cn.js.rl" */

    this.keyword_start = this.keyword_start || p;
  		break;
case 17:
/* line 87 "ragel/i18n/zh_cn.js.rl" */

    this.keyword = this.bytesToString(data.slice(this.keyword_start, p)).replace(/:$/, '');
    this.keyword_start = null;
  		break;
case 18:
/* line 92 "ragel/i18n/zh_cn.js.rl" */

    this.next_keyword_start = p;
  		break;
case 19:
/* line 96 "ragel/i18n/zh_cn.js.rl" */

    p = p - 1;
    current_row = [];
    this.current_line = this.line_number;
  		break;
case 20:
/* line 102 "ragel/i18n/zh_cn.js.rl" */

    this.content_start = p;
  		break;
case 21:
/* line 106 "ragel/i18n/zh_cn.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    current_row.push(con.replace(/\\\|/, "|").replace(/\\n/, "\n").replace(/\\\\/, "\\"));
  		break;
case 22:
/* line 111 "ragel/i18n/zh_cn.js.rl" */

    this.listener.row(current_row, this.current_line);
  		break;
case 23:
/* line 115 "ragel/i18n/zh_cn.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw new Error("Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.");
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 917 "js/lib/gherkin/lexer/zh_cn.js" */
			} /* action switch */
		}
	}
	if (_trigger_goto) {
		continue;
	}
	}
	if (_goto_level <= _again) {
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	p += 1;
	if (p != pe) {
		_goto_level = _resume;
		continue;
	}
	}
	if (_goto_level <= _test_eof) {
	if (p == eof) {
	__acts = _lexer_eof_actions[ this.cs];
	__nacts =  _lexer_actions[__acts];
	__acts += 1;
	while (__nacts > 0) {
		__nacts -= 1;
		__acts += 1;
		switch (_lexer_actions[__acts - 1]) {
case 23:
/* line 115 "ragel/i18n/zh_cn.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw new Error("Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.");
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 956 "js/lib/gherkin/lexer/zh_cn.js" */
		} /* eof action switch */
	}
	if (_trigger_goto) {
		continue;
	}
}
	}
	if (_goto_level <= _out) {
		break;
	}
	}
	}

/* line 165 "ragel/i18n/zh_cn.js.rl" */
};


/*
 * Decode utf-8 byte sequence to string.
 */
var decodeUtf8 = function(bytes) {
  var result = "";
  var i = 0;
  var wc;
  var c;

  while (i < bytes.length) {
    /* parse as UTF-8 lead byte */
    wc = bytes[i++];
    if (wc < 0x80) {
      count = 0;
    } else if (wc < 0xC2 || wc >= 0xF8) {
      throw new Error("input is not a valid UTF-8 lead octet");
    } else if (wc < 0xE0) {
      count = 1;
      wc = (wc & 0x1F) << 6;
    } else if (wc < 0xF0) {
      count = 2;
      wc = (wc & 0x0F) << 12;
    } else /* wc < 0xF8 */ {
      count = 3;
      wc = (wc & 0x07) << 18;
    }

    /* parse trail bytes, if any */
    while (count) {
      if (!(i < bytes.length)) {
        throw new Error("short read");
      }
      if ((c = bytes[i++] ^ 0x80) > 0x3F) {
        throw new Error("input is not a valid UTF-8 trail octet");
      }
      wc |= c << (6 * --count);
      if (wc < (1 << (5 * count + 6))) {
        throw new Error("invalid non-minimal encoded input");
      }
    }

    /* handle conversion to UTF-16 if needed */
    if (wc > 0xFFFF) {
      wc -= 0x10000;
      result += String.fromCharCode(0xD800 + (wc >> 10));
      wc = 0xDC00 + (wc & 0x3FF);
    }
    result += String.fromCharCode(wc);
  }

  return result;
};

/*
 * Encode string to an array of bytes using utf8 encoding.
 *
 * Javascript internally stores character data as utf16 (like java).
 * String.charCodeAt() does *not* produce unicode points, but simply
 * reflects this internal representation. Thus, it is necessary
 * to first decode the utf-16 representation before encoding to
 * utf-8.
 */
var encodeUtf8 = function(string) {
  var bytes = [];
  var i = 0;
  var j = 0;
  var wc;

  while (i < string.length) {
    wc = string.charCodeAt(i++);
    if (wc >= 0xD800 && wc <= 0xDBFF && i < string.length && string.charCodeAt(i) >= 0xDC00 && string.charCodeAt(i) <= 0xDFFF) {
      /* decode UTF-16 */
      wc = 0x10000 + ((wc & 0x3FF) << 10) + (string.charCodeAt(i++) & 0x3FF);
    }

    /* emit lead byte */
    if (wc < 0x80) {
      bytes[j++] = wc;
      count = 0;
    } else if (wc < 0x800) {
      bytes[j++] = 0xC0 | (wc >> 6);
      count = 1;
    } else if (wc < 0x10000) {
      bytes[j++] = 0xE0 | (wc >> 12);
      count = 2;
    } else {
      /* SMP: 21-bit Unicode */
      bytes[j++] = 0xF0 | (wc >> 18);
      count = 3;
    }

    /* emit trail bytes, if any */
    while (count) {
      bytes[j++] = 0x80 | ((wc >> (6 * --count)) & 0x3F);
    }
  }

  return bytes;

};

Lexer.prototype.bytesToString = function(bytes) {
  if(typeof bytes.write == 'function') {
    // Node.js
    return bytes.toString('utf-8');
  }
  return decodeUtf8(bytes);
};

Lexer.prototype.stringToBytes = function(string) {
  return encodeUtf8(string);
};

Lexer.prototype.unindent = function(startcol, text) {
  startcol = startcol || 0;
  return text.replace(new RegExp('^[\t ]{0,' + startcol + '}', 'gm'), ''); 
};

Lexer.prototype.store_keyword_content = function(event, data, p, eof) {
  var end_point = (!this.next_keyword_start || (p == eof)) ? p : this.next_keyword_start;
  var content = this.unindent(this.start_col + 2, this.bytesToString(data.slice(this.content_start, end_point))).replace(/\s+$/,"");
  var content_lines = content.split("\n")
  var name = content_lines.shift() || "";
  name = name.trim();
  var description = content_lines.join("\n");
  this.listener[event](this.keyword, name, description, this.current_line);
  var nks = this.next_keyword_start;
  this.next_keyword_start = null;
  return nks ? nks - 1 : p;
};

Lexer.prototype.current_line_content = function(data, p) {
  var rest = Array.prototype.slice.call(data,this.last_newline, -1);
  var end = rest.indexOf(10) || -1;
  return this.bytesToString(rest.slice(0, end)).trim();
};

// Node.js export
if(typeof module !== 'undefined') {
  module.exports = Lexer;
}
// Require.js export
if (typeof define !== 'undefined') {
  if(define.amd) {
    define('gherkin/lexer/zh_cn', [], function() {
      return Lexer;
    });
  } else {
    define('gherkin/lexer/zh_cn', function(require, exports, module) {
      exports.Lexer = Lexer;
    });
  }
}

})();

}).call(this,require("buffer").Buffer)

},{"buffer":69}],240:[function(require,module,exports){
(function (Buffer){

/* line 1 "ragel/i18n/zh_tw.js.rl" */
;(function() {


/* line 126 "ragel/i18n/zh_tw.js.rl" */



/* line 11 "js/lib/gherkin/lexer/zh_tw.js" */
var _lexer_actions = [
	0, 1, 0, 1, 1, 1, 2, 1, 
	3, 1, 4, 1, 5, 1, 6, 1, 
	7, 1, 8, 1, 9, 1, 10, 1, 
	11, 1, 12, 1, 13, 1, 16, 1, 
	17, 1, 18, 1, 19, 1, 20, 1, 
	21, 1, 22, 1, 23, 2, 2, 18, 
	2, 3, 4, 2, 13, 0, 2, 14, 
	15, 2, 17, 0, 2, 17, 1, 2, 
	17, 16, 2, 17, 19, 2, 18, 6, 
	2, 18, 7, 2, 18, 8, 2, 18, 
	9, 2, 18, 10, 2, 18, 16, 2, 
	20, 21, 2, 22, 0, 2, 22, 1, 
	2, 22, 16, 2, 22, 19, 3, 4, 
	14, 15, 3, 5, 14, 15, 3, 11, 
	14, 15, 3, 12, 14, 15, 3, 13, 
	14, 15, 3, 14, 15, 18, 3, 17, 
	0, 11, 3, 17, 14, 15, 4, 2, 
	14, 15, 18, 4, 3, 4, 14, 15, 
	4, 17, 0, 14, 15, 5, 17, 0, 
	11, 14, 15
];

var _lexer_key_offsets = [
	0, 0, 16, 19, 20, 21, 22, 23, 
	25, 27, 42, 46, 47, 49, 51, 52, 
	53, 54, 55, 57, 58, 59, 60, 62, 
	63, 64, 65, 66, 67, 68, 69, 70, 
	83, 86, 88, 90, 92, 94, 109, 110, 
	111, 113, 114, 115, 116, 117, 118, 119, 
	120, 121, 134, 137, 139, 141, 143, 145, 
	147, 149, 151, 153, 158, 160, 163, 166, 
	168, 170, 172, 174, 177, 179, 181, 183, 
	186, 188, 190, 192, 194, 196, 198, 200, 
	202, 204, 206, 208, 210, 212, 214, 216, 
	218, 220, 222, 224, 226, 228, 230, 232, 
	234, 236, 238, 240, 242, 244, 246, 248, 
	250, 252, 254, 256, 258, 260, 262, 264, 
	266, 267, 268, 269, 270, 271, 272, 273, 
	275, 277, 282, 287, 292, 297, 301, 305, 
	307, 308, 309, 310, 311, 312, 313, 314, 
	315, 316, 317, 318, 319, 320, 321, 322, 
	323, 328, 335, 340, 344, 350, 353, 355, 
	361, 376, 378, 380, 382, 384, 389, 391, 
	394, 397, 399, 401, 403, 405, 408, 410, 
	412, 414, 416, 418, 420, 422, 424, 426, 
	428, 430, 432, 434, 436, 438, 440, 442, 
	444, 446, 448, 450, 452, 454, 456, 458, 
	460, 462, 464, 466, 468, 470, 472, 474, 
	476, 478, 480, 482, 484, 485, 486, 499, 
	502, 504, 506, 508, 510, 512, 514, 516, 
	518, 523, 525, 528, 531, 533, 535, 537, 
	539, 542, 544, 546, 548, 551, 553, 555, 
	557, 559, 561, 563, 565, 567, 569, 571, 
	573, 575, 577, 579, 581, 583, 585, 587, 
	590, 592, 594, 596, 598, 600, 602, 604, 
	606, 608, 610, 612, 614, 616, 618, 620, 
	622, 624, 626, 628, 630, 632, 634, 636, 
	638, 640, 641, 642, 643, 644, 645, 646, 
	656, 658, 660, 662, 664, 666, 668, 671, 
	674, 676, 678, 680, 683, 685, 687, 689, 
	691, 693, 695, 697, 699, 701, 703, 705, 
	707, 709, 711, 713, 715, 717, 719, 721, 
	723, 725, 727, 729, 731, 733, 735, 737, 
	739, 741, 743, 745, 746, 747, 748, 749, 
	750, 751, 752, 753, 754, 755, 756, 757, 
	758, 759, 760, 761, 762, 763, 770, 772, 
	774, 776, 778, 780, 782, 783, 784
];

var _lexer_trans_keys = [
	-28, -27, -25, -24, -23, 10, 32, 34, 
	35, 37, 42, 64, 124, 239, 9, 13, 
	-72, -67, -66, -90, -28, -72, -108, 10, 
	13, 10, 13, -28, -27, -25, -24, -23, 
	10, 32, 34, 35, 37, 42, 64, 124, 
	9, 13, -127, -118, -112, -96, -121, -27, 
	-24, -90, -82, -126, -102, -88, -83, -121, 
	-97, -26, -100, -84, -27, 58, -92, -89, 
	-25, -74, -79, 58, 10, 10, -28, -27, 
	-25, -24, -23, 10, 32, 35, 37, 42, 
	64, 9, 13, -72, -67, 10, -90, 10, 
	-28, 10, -72, 10, -108, 10, -28, -27, 
	-25, -24, -23, 10, 32, 34, 35, 37, 
	42, 64, 124, 9, 13, -107, -74, -128, 
	-125, -116, -116, -26, -103, -81, 58, 10, 
	10, -28, -27, -25, -24, -23, 10, 32, 
	35, 37, 42, 64, 9, 13, -72, -67, 
	10, -90, 10, -28, 10, -72, 10, -108, 
	10, -122, 10, -26, 10, -104, 10, -81, 
	10, -127, -118, -112, -96, 10, -121, 10, 
	-27, -24, 10, -90, -82, 10, -126, 10, 
	-102, 10, -88, 10, -83, 10, -121, -97, 
	10, -26, 10, -100, 10, -84, 10, -27, 
	10, 58, -92, 10, -89, 10, -25, 10, 
	-74, 10, -79, 10, 10, 58, -24, 10, 
	-125, 10, -67, 10, -116, 10, -26, 10, 
	-103, 10, -76, 10, -26, 10, -103, 10, 
	-81, 10, -107, 10, -74, 10, -128, 10, 
	-116, 10, -126, 10, -93, 10, -23, 10, 
	-70, 10, -68, 10, 10, 95, 10, 70, 
	10, 69, 10, 65, 10, 84, 10, 85, 
	10, 82, 10, 69, 10, 95, 10, 69, 
	10, 78, 10, 68, 10, 95, 10, 37, 
	10, 32, -126, -93, -23, -70, -68, 34, 
	34, 10, 13, 10, 13, 10, 32, 34, 
	9, 13, 10, 32, 34, 9, 13, 10, 
	32, 34, 9, 13, 10, 32, 34, 9, 
	13, 10, 32, 9, 13, 10, 32, 9, 
	13, 10, 13, 10, 95, 70, 69, 65, 
	84, 85, 82, 69, 95, 69, 78, 68, 
	95, 37, 32, 13, 32, 64, 9, 10, 
	9, 10, 13, 32, 64, 11, 12, 10, 
	32, 64, 9, 13, 32, 124, 9, 13, 
	10, 32, 92, 124, 9, 13, 10, 92, 
	124, 10, 92, 10, 32, 92, 124, 9, 
	13, -28, -27, -25, -24, -23, 10, 32, 
	34, 35, 37, 42, 64, 124, 9, 13, 
	-122, 10, -26, 10, -104, 10, -81, 10, 
	-127, -118, -112, -96, 10, -121, 10, -27, 
	-24, 10, -90, -82, 10, -126, 10, -102, 
	10, -88, 10, -83, 10, -121, -97, 10, 
	-26, 10, -100, 10, -84, 10, 10, 58, 
	-24, 10, -125, 10, -67, 10, -116, 10, 
	-26, 10, -103, 10, -76, 10, -26, 10, 
	-103, 10, -81, 10, -107, 10, -74, 10, 
	-128, 10, -116, 10, -126, 10, -93, 10, 
	-23, 10, -70, 10, -68, 10, 10, 95, 
	10, 70, 10, 69, 10, 65, 10, 84, 
	10, 85, 10, 82, 10, 69, 10, 95, 
	10, 69, 10, 78, 10, 68, 10, 95, 
	10, 37, 10, 32, 10, 10, -28, -27, 
	-25, -24, -23, 10, 32, 35, 37, 42, 
	64, 9, 13, -72, -67, 10, -90, 10, 
	-28, 10, -72, 10, -108, 10, -122, 10, 
	-26, 10, -104, 10, -81, 10, -127, -118, 
	-112, -96, 10, -121, 10, -27, -24, 10, 
	-90, -82, 10, -126, 10, -102, 10, -88, 
	10, -83, 10, -121, -97, 10, -26, 10, 
	-100, 10, -84, 10, -27, 10, 58, -92, 
	10, -89, 10, -25, 10, -74, 10, -79, 
	10, 10, 58, -24, 10, -125, 10, -67, 
	10, -116, 10, -26, 10, -103, 10, -76, 
	10, -26, 10, -103, 10, -81, 10, -107, 
	10, -74, 10, -128, -125, 10, -116, 10, 
	-116, 10, -26, 10, -103, 10, -81, 10, 
	-126, 10, -93, 10, -23, 10, -70, 10, 
	-68, 10, 10, 95, 10, 70, 10, 69, 
	10, 65, 10, 84, 10, 85, 10, 82, 
	10, 69, 10, 95, 10, 69, 10, 78, 
	10, 68, 10, 95, 10, 37, 10, 32, 
	-24, -125, -67, 58, 10, 10, -28, -27, 
	-24, 10, 32, 35, 37, 64, 9, 13, 
	-66, 10, -117, 10, -27, 10, -83, 10, 
	-112, 10, 10, 58, -118, -96, 10, -121, 
	-97, 10, -26, 10, -100, 10, -84, 10, 
	-27, 10, 58, -92, 10, -89, 10, -25, 
	10, -74, 10, -79, 10, -24, 10, -125, 
	10, -67, 10, -76, 10, -26, 10, -103, 
	10, -81, 10, -125, 10, -116, 10, -26, 
	10, -103, 10, -81, 10, 10, 95, 10, 
	70, 10, 69, 10, 65, 10, 84, 10, 
	85, 10, 82, 10, 69, 10, 95, 10, 
	69, 10, 78, 10, 68, 10, 95, 10, 
	37, -116, -26, -103, -76, -26, -103, -81, 
	-122, -26, -104, -81, -117, -27, -83, -112, 
	58, 10, 10, -27, 10, 32, 35, 124, 
	9, 13, -118, 10, -97, 10, -24, 10, 
	-125, 10, -67, 10, 10, 58, 187, 191, 
	0
];

var _lexer_single_lengths = [
	0, 14, 3, 1, 1, 1, 1, 2, 
	2, 13, 4, 1, 2, 2, 1, 1, 
	1, 1, 2, 1, 1, 1, 2, 1, 
	1, 1, 1, 1, 1, 1, 1, 11, 
	3, 2, 2, 2, 2, 13, 1, 1, 
	2, 1, 1, 1, 1, 1, 1, 1, 
	1, 11, 3, 2, 2, 2, 2, 2, 
	2, 2, 2, 5, 2, 3, 3, 2, 
	2, 2, 2, 3, 2, 2, 2, 3, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	1, 1, 1, 1, 1, 1, 1, 2, 
	2, 3, 3, 3, 3, 2, 2, 2, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	3, 5, 3, 2, 4, 3, 2, 4, 
	13, 2, 2, 2, 2, 5, 2, 3, 
	3, 2, 2, 2, 2, 3, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 1, 1, 11, 3, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	5, 2, 3, 3, 2, 2, 2, 2, 
	3, 2, 2, 2, 3, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 3, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 1, 1, 1, 1, 1, 1, 8, 
	2, 2, 2, 2, 2, 2, 3, 3, 
	2, 2, 2, 3, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 5, 2, 2, 
	2, 2, 2, 2, 1, 1, 0
];

var _lexer_range_lengths = [
	0, 1, 0, 0, 0, 0, 0, 0, 
	0, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	0, 0, 0, 0, 0, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 1, 1, 1, 1, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 1, 1, 1, 1, 0, 0, 1, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0
];

var _lexer_index_offsets = [
	0, 0, 16, 20, 22, 24, 26, 28, 
	31, 34, 49, 54, 56, 59, 62, 64, 
	66, 68, 70, 73, 75, 77, 79, 82, 
	84, 86, 88, 90, 92, 94, 96, 98, 
	111, 115, 118, 121, 124, 127, 142, 144, 
	146, 149, 151, 153, 155, 157, 159, 161, 
	163, 165, 178, 182, 185, 188, 191, 194, 
	197, 200, 203, 206, 212, 215, 219, 223, 
	226, 229, 232, 235, 239, 242, 245, 248, 
	252, 255, 258, 261, 264, 267, 270, 273, 
	276, 279, 282, 285, 288, 291, 294, 297, 
	300, 303, 306, 309, 312, 315, 318, 321, 
	324, 327, 330, 333, 336, 339, 342, 345, 
	348, 351, 354, 357, 360, 363, 366, 369, 
	372, 374, 376, 378, 380, 382, 384, 386, 
	389, 392, 397, 402, 407, 412, 416, 420, 
	423, 425, 427, 429, 431, 433, 435, 437, 
	439, 441, 443, 445, 447, 449, 451, 453, 
	455, 460, 467, 472, 476, 482, 486, 489, 
	495, 510, 513, 516, 519, 522, 528, 531, 
	535, 539, 542, 545, 548, 551, 555, 558, 
	561, 564, 567, 570, 573, 576, 579, 582, 
	585, 588, 591, 594, 597, 600, 603, 606, 
	609, 612, 615, 618, 621, 624, 627, 630, 
	633, 636, 639, 642, 645, 648, 651, 654, 
	657, 660, 663, 666, 669, 671, 673, 686, 
	690, 693, 696, 699, 702, 705, 708, 711, 
	714, 720, 723, 727, 731, 734, 737, 740, 
	743, 747, 750, 753, 756, 760, 763, 766, 
	769, 772, 775, 778, 781, 784, 787, 790, 
	793, 796, 799, 802, 805, 808, 811, 814, 
	818, 821, 824, 827, 830, 833, 836, 839, 
	842, 845, 848, 851, 854, 857, 860, 863, 
	866, 869, 872, 875, 878, 881, 884, 887, 
	890, 893, 895, 897, 899, 901, 903, 905, 
	915, 918, 921, 924, 927, 930, 933, 937, 
	941, 944, 947, 950, 954, 957, 960, 963, 
	966, 969, 972, 975, 978, 981, 984, 987, 
	990, 993, 996, 999, 1002, 1005, 1008, 1011, 
	1014, 1017, 1020, 1023, 1026, 1029, 1032, 1035, 
	1038, 1041, 1044, 1047, 1049, 1051, 1053, 1055, 
	1057, 1059, 1061, 1063, 1065, 1067, 1069, 1071, 
	1073, 1075, 1077, 1079, 1081, 1083, 1090, 1093, 
	1096, 1099, 1102, 1105, 1108, 1110, 1112
];

var _lexer_indicies = [
	1, 2, 3, 4, 5, 7, 6, 8, 
	9, 10, 11, 12, 13, 14, 6, 0, 
	15, 16, 17, 0, 18, 0, 19, 0, 
	20, 0, 21, 0, 23, 24, 22, 26, 
	27, 25, 1, 2, 3, 4, 5, 7, 
	6, 8, 9, 10, 11, 12, 13, 6, 
	0, 28, 29, 30, 31, 0, 32, 0, 
	33, 34, 0, 35, 36, 0, 21, 0, 
	21, 0, 37, 0, 21, 0, 38, 39, 
	0, 40, 0, 41, 0, 42, 0, 43, 
	44, 0, 45, 0, 46, 0, 47, 0, 
	48, 0, 49, 0, 50, 0, 52, 51, 
	54, 53, 55, 56, 57, 58, 59, 54, 
	60, 61, 62, 63, 61, 60, 53, 64, 
	65, 54, 53, 66, 54, 53, 67, 54, 
	53, 68, 54, 53, 69, 54, 53, 70, 
	71, 72, 73, 74, 76, 75, 77, 78, 
	79, 80, 81, 82, 75, 0, 83, 0, 
	21, 0, 84, 85, 0, 18, 0, 86, 
	0, 87, 0, 88, 0, 89, 0, 90, 
	0, 92, 91, 94, 93, 95, 96, 97, 
	98, 99, 94, 100, 101, 102, 103, 101, 
	100, 93, 104, 105, 94, 93, 106, 94, 
	93, 107, 94, 93, 108, 94, 93, 109, 
	94, 93, 110, 94, 93, 111, 94, 93, 
	112, 94, 93, 109, 94, 93, 113, 114, 
	115, 116, 94, 93, 117, 94, 93, 118, 
	119, 94, 93, 120, 121, 94, 93, 109, 
	94, 93, 109, 94, 93, 122, 94, 93, 
	109, 94, 93, 123, 124, 94, 93, 125, 
	94, 93, 126, 94, 93, 127, 94, 93, 
	128, 94, 109, 93, 129, 94, 93, 130, 
	94, 93, 131, 94, 93, 132, 94, 93, 
	133, 94, 93, 94, 109, 93, 134, 94, 
	93, 135, 94, 93, 133, 94, 93, 136, 
	94, 93, 137, 94, 93, 120, 94, 93, 
	138, 94, 93, 139, 94, 93, 140, 94, 
	93, 127, 94, 93, 141, 94, 93, 109, 
	94, 93, 142, 94, 93, 106, 94, 93, 
	143, 94, 93, 144, 94, 93, 145, 94, 
	93, 146, 94, 93, 109, 94, 93, 94, 
	147, 93, 94, 148, 93, 94, 149, 93, 
	94, 150, 93, 94, 151, 93, 94, 152, 
	93, 94, 153, 93, 94, 154, 93, 94, 
	155, 93, 94, 156, 93, 94, 157, 93, 
	94, 158, 93, 94, 159, 93, 94, 160, 
	93, 94, 109, 93, 161, 0, 162, 0, 
	163, 0, 164, 0, 21, 0, 165, 0, 
	166, 0, 168, 169, 167, 171, 172, 170, 
	175, 174, 176, 174, 173, 179, 178, 180, 
	178, 177, 179, 178, 181, 178, 177, 179, 
	178, 182, 178, 177, 184, 183, 183, 0, 
	7, 185, 185, 0, 187, 188, 186, 7, 
	0, 189, 0, 190, 0, 191, 0, 192, 
	0, 193, 0, 194, 0, 195, 0, 196, 
	0, 197, 0, 198, 0, 199, 0, 200, 
	0, 201, 0, 202, 0, 21, 0, 0, 
	0, 0, 0, 203, 204, 205, 204, 204, 
	207, 206, 203, 7, 208, 12, 208, 0, 
	209, 210, 209, 0, 213, 212, 214, 215, 
	212, 211, 0, 217, 218, 216, 0, 217, 
	216, 213, 219, 217, 218, 219, 216, 220, 
	221, 222, 223, 224, 213, 225, 226, 227, 
	228, 229, 230, 231, 225, 0, 232, 54, 
	53, 233, 54, 53, 234, 54, 53, 69, 
	54, 53, 235, 236, 237, 238, 54, 53, 
	239, 54, 53, 240, 241, 54, 53, 242, 
	243, 54, 53, 69, 54, 53, 69, 54, 
	53, 244, 54, 53, 69, 54, 53, 245, 
	246, 54, 53, 247, 54, 53, 248, 54, 
	53, 249, 54, 53, 54, 69, 53, 250, 
	54, 53, 251, 54, 53, 249, 54, 53, 
	252, 54, 53, 253, 54, 53, 242, 54, 
	53, 254, 54, 53, 255, 54, 53, 256, 
	54, 53, 249, 54, 53, 257, 54, 53, 
	69, 54, 53, 258, 54, 53, 66, 54, 
	53, 259, 54, 53, 260, 54, 53, 261, 
	54, 53, 262, 54, 53, 69, 54, 53, 
	54, 263, 53, 54, 264, 53, 54, 265, 
	53, 54, 266, 53, 54, 267, 53, 54, 
	268, 53, 54, 269, 53, 54, 270, 53, 
	54, 271, 53, 54, 272, 53, 54, 273, 
	53, 54, 274, 53, 54, 275, 53, 54, 
	276, 53, 54, 69, 53, 278, 277, 280, 
	279, 281, 282, 283, 284, 285, 280, 286, 
	287, 288, 289, 287, 286, 279, 290, 291, 
	280, 279, 292, 280, 279, 293, 280, 279, 
	294, 280, 279, 295, 280, 279, 296, 280, 
	279, 297, 280, 279, 298, 280, 279, 295, 
	280, 279, 299, 300, 301, 302, 280, 279, 
	303, 280, 279, 304, 305, 280, 279, 306, 
	307, 280, 279, 295, 280, 279, 295, 280, 
	279, 308, 280, 279, 295, 280, 279, 309, 
	310, 280, 279, 311, 280, 279, 312, 280, 
	279, 313, 280, 279, 314, 280, 295, 279, 
	315, 280, 279, 316, 280, 279, 317, 280, 
	279, 318, 280, 279, 319, 280, 279, 280, 
	295, 279, 320, 280, 279, 321, 280, 279, 
	319, 280, 279, 322, 280, 279, 323, 280, 
	279, 306, 280, 279, 324, 280, 279, 325, 
	280, 279, 326, 280, 279, 313, 280, 279, 
	327, 280, 279, 295, 280, 279, 328, 329, 
	280, 279, 292, 280, 279, 330, 280, 279, 
	331, 280, 279, 332, 280, 279, 319, 280, 
	279, 333, 280, 279, 334, 280, 279, 335, 
	280, 279, 336, 280, 279, 295, 280, 279, 
	280, 337, 279, 280, 338, 279, 280, 339, 
	279, 280, 340, 279, 280, 341, 279, 280, 
	342, 279, 280, 343, 279, 280, 344, 279, 
	280, 345, 279, 280, 346, 279, 280, 347, 
	279, 280, 348, 279, 280, 349, 279, 280, 
	350, 279, 280, 295, 279, 351, 0, 352, 
	0, 353, 0, 354, 0, 356, 355, 358, 
	357, 359, 360, 361, 358, 362, 363, 364, 
	363, 362, 357, 365, 358, 357, 366, 358, 
	357, 367, 358, 357, 368, 358, 357, 369, 
	358, 357, 358, 370, 357, 371, 372, 358, 
	357, 373, 374, 358, 357, 375, 358, 357, 
	376, 358, 357, 377, 358, 357, 378, 358, 
	370, 357, 379, 358, 357, 380, 358, 357, 
	381, 358, 357, 382, 358, 357, 369, 358, 
	357, 383, 358, 357, 384, 358, 357, 369, 
	358, 357, 385, 358, 357, 386, 358, 357, 
	387, 358, 357, 377, 358, 357, 388, 358, 
	357, 389, 358, 357, 390, 358, 357, 391, 
	358, 357, 369, 358, 357, 358, 392, 357, 
	358, 393, 357, 358, 394, 357, 358, 395, 
	357, 358, 396, 357, 358, 397, 357, 358, 
	398, 357, 358, 399, 357, 358, 400, 357, 
	358, 401, 357, 358, 402, 357, 358, 403, 
	357, 358, 404, 357, 358, 405, 357, 406, 
	0, 407, 0, 35, 0, 408, 0, 409, 
	0, 410, 0, 42, 0, 411, 0, 412, 
	0, 413, 0, 21, 0, 414, 0, 415, 
	0, 416, 0, 417, 0, 418, 0, 420, 
	419, 422, 421, 423, 422, 424, 425, 425, 
	424, 421, 426, 422, 421, 427, 422, 421, 
	428, 422, 421, 429, 422, 421, 430, 422, 
	421, 422, 431, 421, 432, 0, 6, 0, 
	433, 0
];

var _lexer_trans_targs = [
	0, 2, 10, 38, 40, 112, 9, 9, 
	117, 127, 129, 143, 144, 147, 348, 3, 
	330, 334, 4, 5, 6, 7, 8, 9, 
	128, 8, 9, 128, 11, 18, 323, 326, 
	12, 13, 16, 14, 15, 17, 19, 273, 
	20, 21, 22, 23, 204, 24, 25, 26, 
	27, 28, 29, 30, 31, 30, 31, 32, 
	157, 180, 182, 184, 31, 9, 189, 203, 
	33, 153, 34, 35, 36, 37, 2, 10, 
	38, 40, 112, 9, 9, 117, 127, 129, 
	143, 144, 147, 39, 41, 42, 43, 44, 
	45, 46, 47, 48, 49, 48, 49, 50, 
	59, 88, 90, 92, 49, 9, 97, 111, 
	51, 55, 52, 53, 54, 37, 56, 57, 
	58, 60, 67, 81, 84, 61, 62, 65, 
	63, 64, 66, 68, 78, 69, 70, 71, 
	72, 73, 74, 75, 76, 77, 79, 80, 
	82, 83, 85, 86, 87, 89, 91, 93, 
	94, 95, 96, 98, 99, 100, 101, 102, 
	103, 104, 105, 106, 107, 108, 109, 110, 
	9, 113, 114, 115, 116, 118, 119, 120, 
	121, 120, 120, 121, 120, 122, 122, 122, 
	123, 122, 122, 122, 123, 124, 125, 126, 
	9, 126, 127, 9, 128, 130, 131, 132, 
	133, 134, 135, 136, 137, 138, 139, 140, 
	141, 142, 350, 145, 146, 9, 145, 144, 
	146, 147, 148, 149, 151, 152, 150, 148, 
	149, 150, 148, 151, 2, 10, 38, 40, 
	112, 152, 117, 127, 129, 143, 144, 147, 
	154, 155, 156, 158, 165, 173, 176, 159, 
	160, 163, 161, 162, 164, 166, 170, 167, 
	168, 169, 171, 172, 174, 175, 177, 178, 
	179, 181, 183, 185, 186, 187, 188, 190, 
	191, 192, 193, 194, 195, 196, 197, 198, 
	199, 200, 201, 202, 9, 205, 206, 205, 
	206, 207, 216, 245, 247, 253, 206, 9, 
	258, 272, 208, 212, 209, 210, 211, 37, 
	213, 214, 215, 217, 224, 238, 241, 218, 
	219, 222, 220, 221, 223, 225, 235, 226, 
	227, 228, 229, 230, 231, 232, 233, 234, 
	236, 237, 239, 240, 242, 243, 244, 246, 
	248, 249, 250, 251, 252, 254, 255, 256, 
	257, 259, 260, 261, 262, 263, 264, 265, 
	266, 267, 268, 269, 270, 271, 9, 274, 
	275, 276, 277, 278, 279, 278, 279, 280, 
	286, 304, 279, 9, 309, 281, 282, 283, 
	284, 285, 37, 287, 300, 288, 297, 289, 
	290, 291, 292, 293, 294, 295, 296, 298, 
	299, 301, 302, 303, 305, 306, 307, 308, 
	310, 311, 312, 313, 314, 315, 316, 317, 
	318, 319, 320, 321, 322, 9, 324, 325, 
	327, 328, 329, 331, 332, 333, 335, 336, 
	337, 338, 339, 340, 341, 340, 341, 342, 
	341, 9, 343, 344, 345, 346, 347, 37, 
	349, 0
];

var _lexer_trans_actions = [
	43, 29, 29, 29, 29, 29, 0, 54, 
	3, 1, 0, 29, 1, 35, 0, 0, 
	0, 0, 0, 0, 0, 0, 57, 149, 
	126, 0, 110, 23, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 57, 144, 0, 54, 84, 
	84, 84, 84, 84, 0, 78, 33, 84, 
	0, 0, 0, 0, 0, 19, 63, 63, 
	63, 63, 63, 31, 130, 60, 57, 31, 
	63, 57, 66, 0, 0, 0, 0, 0, 
	0, 0, 0, 57, 144, 0, 54, 84, 
	84, 84, 84, 84, 0, 72, 33, 84, 
	0, 0, 0, 0, 0, 15, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	15, 0, 0, 0, 0, 0, 0, 7, 
	139, 48, 0, 102, 9, 5, 45, 134, 
	45, 0, 33, 122, 33, 33, 0, 11, 
	106, 0, 0, 114, 25, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 27, 118, 27, 51, 
	0, 0, 0, 37, 37, 54, 37, 87, 
	0, 0, 39, 0, 96, 96, 96, 96, 
	96, 0, 93, 90, 41, 96, 90, 99, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 19, 57, 144, 0, 
	54, 84, 84, 84, 84, 84, 0, 75, 
	33, 84, 0, 0, 0, 0, 0, 17, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 17, 0, 
	0, 0, 0, 57, 144, 0, 54, 84, 
	84, 84, 0, 69, 33, 0, 0, 0, 
	0, 0, 13, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 13, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 57, 144, 0, 54, 84, 
	0, 81, 0, 0, 0, 0, 0, 21, 
	0, 0
];

var _lexer_eof_actions = [
	0, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43
];

var lexer_start = 1;
var lexer_first_final = 350;
var lexer_error = 0;

var lexer_en_main = 1;


/* line 129 "ragel/i18n/zh_tw.js.rl" */

/* line 130 "ragel/i18n/zh_tw.js.rl" */

/* line 131 "ragel/i18n/zh_tw.js.rl" */

/* line 132 "ragel/i18n/zh_tw.js.rl" */

var Lexer = function(listener) {
  // Check that listener has the required functions
  var events = ['comment', 'tag', 'feature', 'background', 'scenario', 'scenario_outline', 'examples', 'step', 'doc_string', 'row', 'eof'];
  for(var i=0, len=events.length; i<len; i++) {
    var event = events[i];
    if(typeof listener[event] != 'function') {
      throw new Error("Error. No " + event + " function exists on " + JSON.stringify(listener));
    }
  }
  this.listener = listener;
};

Lexer.prototype.scan = function(data) {
  var ending = "\n%_FEATURE_END_%";
  if(typeof data == 'string') {
    data = this.stringToBytes(data + ending);
  } else if(typeof Buffer != 'undefined' && Buffer.isBuffer(data)) {
    // Node.js
    var buf = new Buffer(data.length + ending.length);
    data.copy(buf, 0, 0);
    new Buffer(ending).copy(buf, data.length, 0);
    data = buf;
  }
  var eof = pe = data.length;
  var p = 0;

  this.line_number = 1;
  this.last_newline = 0;
  var signedCharValue=function(v){return v > 127 ? v-256 : v; };

  
/* line 677 "js/lib/gherkin/lexer/zh_tw.js" */
{
	  this.cs = lexer_start;
} /* JSCodeGen::writeInit */

/* line 164 "ragel/i18n/zh_tw.js.rl" */
  
/* line 684 "js/lib/gherkin/lexer/zh_tw.js" */
{
	var _klen, _trans, _keys, _ps, _widec, _acts, _nacts;
	var _goto_level, _resume, _eof_trans, _again, _test_eof;
	var _out;
	_klen = _trans = _keys = _acts = _nacts = null;
	_goto_level = 0;
	_resume = 10;
	_eof_trans = 15;
	_again = 20;
	_test_eof = 30;
	_out = 40;
	while (true) {
	_trigger_goto = false;
	if (_goto_level <= 0) {
	if (p == pe) {
		_goto_level = _test_eof;
		continue;
	}
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	}
	if (_goto_level <= _resume) {
	_keys = _lexer_key_offsets[ this.cs];
	_trans = _lexer_index_offsets[ this.cs];
	_klen = _lexer_single_lengths[ this.cs];
	_break_match = false;
	
	do {
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + _klen - 1;

	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + ( (_upper - _lower) >> 1 );

	        if (( signedCharValue(data[p])) < _lexer_trans_keys[_mid]) {
	           _upper = _mid - 1;
	        } else if (( signedCharValue(data[p])) > _lexer_trans_keys[_mid]) {
	           _lower = _mid + 1;
	        } else {
	           _trans += (_mid - _keys);
	           _break_match = true;
	           break;
	        };
	     } /* while */
	     if (_break_match) { break; }
	     _keys += _klen;
	     _trans += _klen;
	  }
	  _klen = _lexer_range_lengths[ this.cs];
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + (_klen << 1) - 2;
	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + (((_upper-_lower) >> 1) & ~1);
	        if (( signedCharValue(data[p])) < _lexer_trans_keys[_mid]) {
	          _upper = _mid - 2;
	         } else if (( signedCharValue(data[p])) > _lexer_trans_keys[_mid+1]) {
	          _lower = _mid + 2;
	        } else {
	          _trans += ((_mid - _keys) >> 1);
	          _break_match = true;
	          break;
	        }
	     } /* while */
	     if (_break_match) { break; }
	     _trans += _klen
	  }
	} while (false);
	_trans = _lexer_indicies[_trans];
	 this.cs = _lexer_trans_targs[_trans];
	if (_lexer_trans_actions[_trans] != 0) {
		_acts = _lexer_trans_actions[_trans];
		_nacts = _lexer_actions[_acts];
		_acts += 1;
		while (_nacts > 0) {
			_nacts -= 1;
			_acts += 1;
			switch (_lexer_actions[_acts - 1]) {
case 0:
/* line 6 "ragel/i18n/zh_tw.js.rl" */

    this.content_start = p;
    this.current_line = this.line_number;
    this.start_col = p - this.last_newline - (this.keyword+':').length;
  		break;
case 1:
/* line 12 "ragel/i18n/zh_tw.js.rl" */

    this.current_line = this.line_number;
    this.start_col = p - this.last_newline;
  		break;
case 2:
/* line 17 "ragel/i18n/zh_tw.js.rl" */

    this.content_start = p;
  		break;
case 3:
/* line 21 "ragel/i18n/zh_tw.js.rl" */

    this.docstring_content_type_start = p;
  		break;
case 4:
/* line 25 "ragel/i18n/zh_tw.js.rl" */

    this.docstring_content_type_end = p;
  		break;
case 5:
/* line 29 "ragel/i18n/zh_tw.js.rl" */

    var con = this.unindent(
      this.start_col, 
      this.bytesToString(data.slice(this.content_start, this.next_keyword_start-1)).replace(/(\r?\n)?([\t ])*$/, '').replace(/\\\"\\\"\\\"/mg, '"""')
    );
    var con_type = this.bytesToString(data.slice(this.docstring_content_type_start, this.docstring_content_type_end)).trim();
    this.listener.doc_string(con_type, con, this.current_line); 
  		break;
case 6:
/* line 38 "ragel/i18n/zh_tw.js.rl" */

    p = this.store_keyword_content('feature', data, p, eof);
  		break;
case 7:
/* line 42 "ragel/i18n/zh_tw.js.rl" */

    p = this.store_keyword_content('background', data, p, eof);
  		break;
case 8:
/* line 46 "ragel/i18n/zh_tw.js.rl" */

    p = this.store_keyword_content('scenario', data, p, eof);
  		break;
case 9:
/* line 50 "ragel/i18n/zh_tw.js.rl" */

    p = this.store_keyword_content('scenario_outline', data, p, eof);
  		break;
case 10:
/* line 54 "ragel/i18n/zh_tw.js.rl" */

    p = this.store_keyword_content('examples', data, p, eof);
  		break;
case 11:
/* line 58 "ragel/i18n/zh_tw.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.step(this.keyword, con, this.current_line);
  		break;
case 12:
/* line 63 "ragel/i18n/zh_tw.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.comment(con, this.line_number);
    this.keyword_start = null;
  		break;
case 13:
/* line 69 "ragel/i18n/zh_tw.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.tag(con, this.line_number);
    this.keyword_start = null;
  		break;
case 14:
/* line 75 "ragel/i18n/zh_tw.js.rl" */

    this.line_number++;
  		break;
case 15:
/* line 79 "ragel/i18n/zh_tw.js.rl" */

    this.last_newline = p + 1;
  		break;
case 16:
/* line 83 "ragel/i18n/zh_tw.js.rl" */

    this.keyword_start = this.keyword_start || p;
  		break;
case 17:
/* line 87 "ragel/i18n/zh_tw.js.rl" */

    this.keyword = this.bytesToString(data.slice(this.keyword_start, p)).replace(/:$/, '');
    this.keyword_start = null;
  		break;
case 18:
/* line 92 "ragel/i18n/zh_tw.js.rl" */

    this.next_keyword_start = p;
  		break;
case 19:
/* line 96 "ragel/i18n/zh_tw.js.rl" */

    p = p - 1;
    current_row = [];
    this.current_line = this.line_number;
  		break;
case 20:
/* line 102 "ragel/i18n/zh_tw.js.rl" */

    this.content_start = p;
  		break;
case 21:
/* line 106 "ragel/i18n/zh_tw.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    current_row.push(con.replace(/\\\|/, "|").replace(/\\n/, "\n").replace(/\\\\/, "\\"));
  		break;
case 22:
/* line 111 "ragel/i18n/zh_tw.js.rl" */

    this.listener.row(current_row, this.current_line);
  		break;
case 23:
/* line 115 "ragel/i18n/zh_tw.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw new Error("Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.");
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 911 "js/lib/gherkin/lexer/zh_tw.js" */
			} /* action switch */
		}
	}
	if (_trigger_goto) {
		continue;
	}
	}
	if (_goto_level <= _again) {
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	p += 1;
	if (p != pe) {
		_goto_level = _resume;
		continue;
	}
	}
	if (_goto_level <= _test_eof) {
	if (p == eof) {
	__acts = _lexer_eof_actions[ this.cs];
	__nacts =  _lexer_actions[__acts];
	__acts += 1;
	while (__nacts > 0) {
		__nacts -= 1;
		__acts += 1;
		switch (_lexer_actions[__acts - 1]) {
case 23:
/* line 115 "ragel/i18n/zh_tw.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw new Error("Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.");
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 950 "js/lib/gherkin/lexer/zh_tw.js" */
		} /* eof action switch */
	}
	if (_trigger_goto) {
		continue;
	}
}
	}
	if (_goto_level <= _out) {
		break;
	}
	}
	}

/* line 165 "ragel/i18n/zh_tw.js.rl" */
};


/*
 * Decode utf-8 byte sequence to string.
 */
var decodeUtf8 = function(bytes) {
  var result = "";
  var i = 0;
  var wc;
  var c;

  while (i < bytes.length) {
    /* parse as UTF-8 lead byte */
    wc = bytes[i++];
    if (wc < 0x80) {
      count = 0;
    } else if (wc < 0xC2 || wc >= 0xF8) {
      throw new Error("input is not a valid UTF-8 lead octet");
    } else if (wc < 0xE0) {
      count = 1;
      wc = (wc & 0x1F) << 6;
    } else if (wc < 0xF0) {
      count = 2;
      wc = (wc & 0x0F) << 12;
    } else /* wc < 0xF8 */ {
      count = 3;
      wc = (wc & 0x07) << 18;
    }

    /* parse trail bytes, if any */
    while (count) {
      if (!(i < bytes.length)) {
        throw new Error("short read");
      }
      if ((c = bytes[i++] ^ 0x80) > 0x3F) {
        throw new Error("input is not a valid UTF-8 trail octet");
      }
      wc |= c << (6 * --count);
      if (wc < (1 << (5 * count + 6))) {
        throw new Error("invalid non-minimal encoded input");
      }
    }

    /* handle conversion to UTF-16 if needed */
    if (wc > 0xFFFF) {
      wc -= 0x10000;
      result += String.fromCharCode(0xD800 + (wc >> 10));
      wc = 0xDC00 + (wc & 0x3FF);
    }
    result += String.fromCharCode(wc);
  }

  return result;
};

/*
 * Encode string to an array of bytes using utf8 encoding.
 *
 * Javascript internally stores character data as utf16 (like java).
 * String.charCodeAt() does *not* produce unicode points, but simply
 * reflects this internal representation. Thus, it is necessary
 * to first decode the utf-16 representation before encoding to
 * utf-8.
 */
var encodeUtf8 = function(string) {
  var bytes = [];
  var i = 0;
  var j = 0;
  var wc;

  while (i < string.length) {
    wc = string.charCodeAt(i++);
    if (wc >= 0xD800 && wc <= 0xDBFF && i < string.length && string.charCodeAt(i) >= 0xDC00 && string.charCodeAt(i) <= 0xDFFF) {
      /* decode UTF-16 */
      wc = 0x10000 + ((wc & 0x3FF) << 10) + (string.charCodeAt(i++) & 0x3FF);
    }

    /* emit lead byte */
    if (wc < 0x80) {
      bytes[j++] = wc;
      count = 0;
    } else if (wc < 0x800) {
      bytes[j++] = 0xC0 | (wc >> 6);
      count = 1;
    } else if (wc < 0x10000) {
      bytes[j++] = 0xE0 | (wc >> 12);
      count = 2;
    } else {
      /* SMP: 21-bit Unicode */
      bytes[j++] = 0xF0 | (wc >> 18);
      count = 3;
    }

    /* emit trail bytes, if any */
    while (count) {
      bytes[j++] = 0x80 | ((wc >> (6 * --count)) & 0x3F);
    }
  }

  return bytes;

};

Lexer.prototype.bytesToString = function(bytes) {
  if(typeof bytes.write == 'function') {
    // Node.js
    return bytes.toString('utf-8');
  }
  return decodeUtf8(bytes);
};

Lexer.prototype.stringToBytes = function(string) {
  return encodeUtf8(string);
};

Lexer.prototype.unindent = function(startcol, text) {
  startcol = startcol || 0;
  return text.replace(new RegExp('^[\t ]{0,' + startcol + '}', 'gm'), ''); 
};

Lexer.prototype.store_keyword_content = function(event, data, p, eof) {
  var end_point = (!this.next_keyword_start || (p == eof)) ? p : this.next_keyword_start;
  var content = this.unindent(this.start_col + 2, this.bytesToString(data.slice(this.content_start, end_point))).replace(/\s+$/,"");
  var content_lines = content.split("\n")
  var name = content_lines.shift() || "";
  name = name.trim();
  var description = content_lines.join("\n");
  this.listener[event](this.keyword, name, description, this.current_line);
  var nks = this.next_keyword_start;
  this.next_keyword_start = null;
  return nks ? nks - 1 : p;
};

Lexer.prototype.current_line_content = function(data, p) {
  var rest = Array.prototype.slice.call(data,this.last_newline, -1);
  var end = rest.indexOf(10) || -1;
  return this.bytesToString(rest.slice(0, end)).trim();
};

// Node.js export
if(typeof module !== 'undefined') {
  module.exports = Lexer;
}
// Require.js export
if (typeof define !== 'undefined') {
  if(define.amd) {
    define('gherkin/lexer/zh_tw', [], function() {
      return Lexer;
    });
  } else {
    define('gherkin/lexer/zh_tw', function(require, exports, module) {
      exports.Lexer = Lexer;
    });
  }
}

})();

}).call(this,require("buffer").Buffer)

},{"buffer":69}],241:[function(require,module,exports){
module.exports = require('./lodash.js');
},{"./lodash.js":242}],242:[function(require,module,exports){
(function (global){
/**
 * @license
 * lodash 4.0.0 (Custom Build) <https://lodash.com/>
 * Build: `lodash -d -o ./lodash.js`
 * Copyright 2012-2016 The Dojo Foundation <http://dojofoundation.org/>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright 2009-2016 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 * Available under MIT license <https://lodash.com/license>
 */
;(function() {

  /** Used as a safe reference for `undefined` in pre-ES5 environments. */
  var undefined;

  /** Used as the semantic version number. */
  var VERSION = '4.0.0';

  /** Used to compose bitmasks for wrapper metadata. */
  var BIND_FLAG = 1,
      BIND_KEY_FLAG = 2,
      CURRY_BOUND_FLAG = 4,
      CURRY_FLAG = 8,
      CURRY_RIGHT_FLAG = 16,
      PARTIAL_FLAG = 32,
      PARTIAL_RIGHT_FLAG = 64,
      ARY_FLAG = 128,
      REARG_FLAG = 256,
      FLIP_FLAG = 512;

  /** Used to compose bitmasks for comparison styles. */
  var UNORDERED_COMPARE_FLAG = 1,
      PARTIAL_COMPARE_FLAG = 2;

  /** Used as default options for `_.truncate`. */
  var DEFAULT_TRUNC_LENGTH = 30,
      DEFAULT_TRUNC_OMISSION = '...';

  /** Used to detect hot functions by number of calls within a span of milliseconds. */
  var HOT_COUNT = 150,
      HOT_SPAN = 16;

  /** Used as the size to enable large array optimizations. */
  var LARGE_ARRAY_SIZE = 200;

  /** Used to indicate the type of lazy iteratees. */
  var LAZY_FILTER_FLAG = 1,
      LAZY_MAP_FLAG = 2,
      LAZY_WHILE_FLAG = 3;

  /** Used as the `TypeError` message for "Functions" methods. */
  var FUNC_ERROR_TEXT = 'Expected a function';

  /** Used to stand-in for `undefined` hash values. */
  var HASH_UNDEFINED = '__lodash_hash_undefined__';

  /** Used as references for various `Number` constants. */
  var INFINITY = 1 / 0,
      MAX_SAFE_INTEGER = 9007199254740991,
      MAX_INTEGER = 1.7976931348623157e+308,
      NAN = 0 / 0;

  /** Used as references for the maximum length and index of an array. */
  var MAX_ARRAY_LENGTH = 4294967295,
      MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1,
      HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;

  /** Used as the internal argument placeholder. */
  var PLACEHOLDER = '__lodash_placeholder__';

  /** `Object#toString` result references. */
  var argsTag = '[object Arguments]',
      arrayTag = '[object Array]',
      boolTag = '[object Boolean]',
      dateTag = '[object Date]',
      errorTag = '[object Error]',
      funcTag = '[object Function]',
      genTag = '[object GeneratorFunction]',
      mapTag = '[object Map]',
      numberTag = '[object Number]',
      objectTag = '[object Object]',
      regexpTag = '[object RegExp]',
      setTag = '[object Set]',
      stringTag = '[object String]',
      symbolTag = '[object Symbol]',
      weakMapTag = '[object WeakMap]';

  var arrayBufferTag = '[object ArrayBuffer]',
      float32Tag = '[object Float32Array]',
      float64Tag = '[object Float64Array]',
      int8Tag = '[object Int8Array]',
      int16Tag = '[object Int16Array]',
      int32Tag = '[object Int32Array]',
      uint8Tag = '[object Uint8Array]',
      uint8ClampedTag = '[object Uint8ClampedArray]',
      uint16Tag = '[object Uint16Array]',
      uint32Tag = '[object Uint32Array]';

  /** Used to match empty string literals in compiled template source. */
  var reEmptyStringLeading = /\b__p \+= '';/g,
      reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
      reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;

  /** Used to match HTML entities and HTML characters. */
  var reEscapedHtml = /&(?:amp|lt|gt|quot|#39|#96);/g,
      reUnescapedHtml = /[&<>"'`]/g,
      reHasEscapedHtml = RegExp(reEscapedHtml.source),
      reHasUnescapedHtml = RegExp(reUnescapedHtml.source);

  /** Used to match template delimiters. */
  var reEscape = /<%-([\s\S]+?)%>/g,
      reEvaluate = /<%([\s\S]+?)%>/g,
      reInterpolate = /<%=([\s\S]+?)%>/g;

  /** Used to match property names within property paths. */
  var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
      reIsPlainProp = /^\w*$/,
      rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]/g;

  /** Used to match `RegExp` [syntax characters](http://ecma-international.org/ecma-262/6.0/#sec-patterns). */
  var reRegExpChar = /[\\^$.*+?()[\]{}|]/g,
      reHasRegExpChar = RegExp(reRegExpChar.source);

  /** Used to match leading and trailing whitespace. */
  var reTrim = /^\s+|\s+$/g,
      reTrimStart = /^\s+/,
      reTrimEnd = /\s+$/;

  /** Used to match backslashes in property paths. */
  var reEscapeChar = /\\(\\)?/g;

  /** Used to match [ES template delimiters](http://ecma-international.org/ecma-262/6.0/#sec-template-literal-lexical-components). */
  var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;

  /** Used to match `RegExp` flags from their coerced string values. */
  var reFlags = /\w*$/;

  /** Used to detect hexadecimal string values. */
  var reHasHexPrefix = /^0x/i;

  /** Used to detect bad signed hexadecimal string values. */
  var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

  /** Used to detect binary string values. */
  var reIsBinary = /^0b[01]+$/i;

  /** Used to detect host constructors (Safari > 5). */
  var reIsHostCtor = /^\[object .+?Constructor\]$/;

  /** Used to detect octal string values. */
  var reIsOctal = /^0o[0-7]+$/i;

  /** Used to detect unsigned integer values. */
  var reIsUint = /^(?:0|[1-9]\d*)$/;

  /** Used to match latin-1 supplementary letters (excluding mathematical operators). */
  var reLatin1 = /[\xc0-\xd6\xd8-\xde\xdf-\xf6\xf8-\xff]/g;

  /** Used to ensure capturing order of template delimiters. */
  var reNoMatch = /($^)/;

  /** Used to match unescaped characters in compiled string literals. */
  var reUnescapedString = /['\n\r\u2028\u2029\\]/g;

  /** Used to compose unicode character classes. */
  var rsAstralRange = '\\ud800-\\udfff',
      rsComboRange = '\\u0300-\\u036f\\ufe20-\\ufe23',
      rsDingbatRange = '\\u2700-\\u27bf',
      rsLowerRange = 'a-z\\xdf-\\xf6\\xf8-\\xff',
      rsMathOpRange = '\\xac\\xb1\\xd7\\xf7',
      rsNonCharRange = '\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf',
      rsQuoteRange = '\\u2018\\u2019\\u201c\\u201d',
      rsSpaceRange = ' \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000',
      rsUpperRange = 'A-Z\\xc0-\\xd6\\xd8-\\xde',
      rsVarRange = '\\ufe0e\\ufe0f',
      rsBreakRange = rsMathOpRange + rsNonCharRange + rsQuoteRange + rsSpaceRange;

  /** Used to compose unicode capture groups. */
  var rsAstral = '[' + rsAstralRange + ']',
      rsBreak = '[' + rsBreakRange + ']',
      rsCombo = '[' + rsComboRange + ']',
      rsDigits = '\\d+',
      rsDingbat = '[' + rsDingbatRange + ']',
      rsLower = '[' + rsLowerRange + ']',
      rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',
      rsModifier = '(?:\\ud83c[\\udffb-\\udfff])',
      rsNonAstral = '[^' + rsAstralRange + ']',
      rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}',
      rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]',
      rsUpper = '[' + rsUpperRange + ']',
      rsZWJ = '\\u200d';

  /** Used to compose unicode regexes. */
  var rsLowerMisc = '(?:' + rsLower + '|' + rsMisc + ')',
      rsUpperMisc = '(?:' + rsUpper + '|' + rsMisc + ')',
      reOptMod = rsModifier + '?',
      rsOptVar = '[' + rsVarRange + ']?',
      rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
      rsSeq = rsOptVar + reOptMod + rsOptJoin,
      rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq,
      rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';

  /** Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks). */
  var reComboMark = RegExp(rsCombo, 'g');

  /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */
  var reComplexSymbol = RegExp(rsSymbol + rsSeq, 'g');

  /** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */
  var reHasComplexSymbol = RegExp('[' + rsZWJ + rsAstralRange + rsComboRange + rsVarRange + ']');

  /** Used to match non-compound words composed of alphanumeric characters. */
  var reBasicWord = /[a-zA-Z0-9]+/g;

  /** Used to match complex or compound words. */
  var reComplexWord = RegExp([
    rsUpper + '?' + rsLower + '+(?=' + [rsBreak, rsUpper, '$'].join('|') + ')',
    rsUpperMisc + '+(?=' + [rsBreak, rsUpper + rsLowerMisc, '$'].join('|') + ')',
    rsUpper + '?' + rsLowerMisc + '+',
    rsDigits + '(?:' + rsLowerMisc + '+)?',
    rsEmoji
  ].join('|'), 'g');

  /** Used to detect strings that need a more robust regexp to match words. */
  var reHasComplexWord = /[a-z][A-Z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;

  /** Used to assign default `context` object properties. */
  var contextProps = [
    'Array', 'Date', 'Error', 'Float32Array', 'Float64Array', 'Function',
    'Int8Array', 'Int16Array', 'Int32Array', 'Map', 'Math', 'Object',
    'Reflect', 'RegExp', 'Set', 'String', 'Symbol', 'TypeError', 'Uint8Array',
    'Uint8ClampedArray', 'Uint16Array', 'Uint32Array', 'WeakMap', '_',
    'clearTimeout', 'isFinite', 'parseInt', 'setTimeout'
  ];

  /** Used to make template sourceURLs easier to identify. */
  var templateCounter = -1;

  /** Used to identify `toStringTag` values of typed arrays. */
  var typedArrayTags = {};
  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
  typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
  typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
  typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
  typedArrayTags[uint32Tag] = true;
  typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
  typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
  typedArrayTags[dateTag] = typedArrayTags[errorTag] =
  typedArrayTags[funcTag] = typedArrayTags[mapTag] =
  typedArrayTags[numberTag] = typedArrayTags[objectTag] =
  typedArrayTags[regexpTag] = typedArrayTags[setTag] =
  typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;

  /** Used to identify `toStringTag` values supported by `_.clone`. */
  var cloneableTags = {};
  cloneableTags[argsTag] = cloneableTags[arrayTag] =
  cloneableTags[arrayBufferTag] = cloneableTags[boolTag] =
  cloneableTags[dateTag] = cloneableTags[float32Tag] =
  cloneableTags[float64Tag] = cloneableTags[int8Tag] =
  cloneableTags[int16Tag] = cloneableTags[int32Tag] =
  cloneableTags[mapTag] = cloneableTags[numberTag] =
  cloneableTags[objectTag] = cloneableTags[regexpTag] =
  cloneableTags[setTag] = cloneableTags[stringTag] =
  cloneableTags[symbolTag] = cloneableTags[uint8Tag] =
  cloneableTags[uint8ClampedTag] = cloneableTags[uint16Tag] =
  cloneableTags[uint32Tag] = true;
  cloneableTags[errorTag] = cloneableTags[funcTag] =
  cloneableTags[weakMapTag] = false;

  /** Used to map latin-1 supplementary letters to basic latin letters. */
  var deburredLetters = {
    '\xc0': 'A',  '\xc1': 'A', '\xc2': 'A', '\xc3': 'A', '\xc4': 'A', '\xc5': 'A',
    '\xe0': 'a',  '\xe1': 'a', '\xe2': 'a', '\xe3': 'a', '\xe4': 'a', '\xe5': 'a',
    '\xc7': 'C',  '\xe7': 'c',
    '\xd0': 'D',  '\xf0': 'd',
    '\xc8': 'E',  '\xc9': 'E', '\xca': 'E', '\xcb': 'E',
    '\xe8': 'e',  '\xe9': 'e', '\xea': 'e', '\xeb': 'e',
    '\xcC': 'I',  '\xcd': 'I', '\xce': 'I', '\xcf': 'I',
    '\xeC': 'i',  '\xed': 'i', '\xee': 'i', '\xef': 'i',
    '\xd1': 'N',  '\xf1': 'n',
    '\xd2': 'O',  '\xd3': 'O', '\xd4': 'O', '\xd5': 'O', '\xd6': 'O', '\xd8': 'O',
    '\xf2': 'o',  '\xf3': 'o', '\xf4': 'o', '\xf5': 'o', '\xf6': 'o', '\xf8': 'o',
    '\xd9': 'U',  '\xda': 'U', '\xdb': 'U', '\xdc': 'U',
    '\xf9': 'u',  '\xfa': 'u', '\xfb': 'u', '\xfc': 'u',
    '\xdd': 'Y',  '\xfd': 'y', '\xff': 'y',
    '\xc6': 'Ae', '\xe6': 'ae',
    '\xde': 'Th', '\xfe': 'th',
    '\xdf': 'ss'
  };

  /** Used to map characters to HTML entities. */
  var htmlEscapes = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    "'": '&#39;',
    '`': '&#96;'
  };

  /** Used to map HTML entities to characters. */
  var htmlUnescapes = {
    '&amp;': '&',
    '&lt;': '<',
    '&gt;': '>',
    '&quot;': '"',
    '&#39;': "'",
    '&#96;': '`'
  };

  /** Used to determine if values are of the language type `Object`. */
  var objectTypes = {
    'function': true,
    'object': true
  };

  /** Used to escape characters for inclusion in compiled string literals. */
  var stringEscapes = {
    '\\': '\\',
    "'": "'",
    '\n': 'n',
    '\r': 'r',
    '\u2028': 'u2028',
    '\u2029': 'u2029'
  };

  /** Built-in method references without a dependency on `root`. */
  var freeParseFloat = parseFloat,
      freeParseInt = parseInt;

  /** Detect free variable `exports`. */
  var freeExports = (objectTypes[typeof exports] && exports && !exports.nodeType) ? exports : null;

  /** Detect free variable `module`. */
  var freeModule = (objectTypes[typeof module] && module && !module.nodeType) ? module : null;

  /** Detect free variable `global` from Node.js. */
  var freeGlobal = checkGlobal(freeExports && freeModule && typeof global == 'object' && global);

  /** Detect free variable `self`. */
  var freeSelf = checkGlobal(objectTypes[typeof self] && self);

  /** Detect free variable `window`. */
  var freeWindow = checkGlobal(objectTypes[typeof window] && window);

  /** Detect the popular CommonJS extension `module.exports`. */
  var moduleExports = (freeModule && freeModule.exports === freeExports) ? freeExports : null;

  /** Detect `this` as the global object. */
  var thisGlobal = checkGlobal(objectTypes[typeof this] && this);

  /**
   * Used as a reference to the global object.
   *
   * The `this` value is used if it's the global object to avoid Greasemonkey's
   * restricted `window` object, otherwise the `window` object is used.
   */
  var root = freeGlobal || ((freeWindow !== (thisGlobal && thisGlobal.window)) && freeWindow) || freeSelf || thisGlobal || Function('return this')();

  /*--------------------------------------------------------------------------*/

  /**
   * Adds the key-value `pair` to `map`.
   *
   * @private
   * @param {Object} map The map to modify.
   * @param {Array} pair The key-value pair to add.
   * @returns {Object} Returns `map`.
   */
  function addMapEntry(map, pair) {
    map.set(pair[0], pair[1]);
    return map;
  }

  /**
   * Adds `value` to `set`.
   *
   * @private
   * @param {Object} set The set to modify.
   * @param {*} value The value to add.
   * @returns {Object} Returns `set`.
   */
  function addSetEntry(set, value) {
    set.add(value);
    return set;
  }

  /**
   * A faster alternative to `Function#apply`, this function invokes `func`
   * with the `this` binding of `thisArg` and the arguments of `args`.
   *
   * @private
   * @param {Function} func The function to invoke.
   * @param {*} thisArg The `this` binding of `func`.
   * @param {...*} [args] The arguments to invoke `func` with.
   * @returns {*} Returns the result of `func`.
   */
  function apply(func, thisArg, args) {
    var length = args ? args.length : 0;
    switch (length) {
      case 0: return func.call(thisArg);
      case 1: return func.call(thisArg, args[0]);
      case 2: return func.call(thisArg, args[0], args[1]);
      case 3: return func.call(thisArg, args[0], args[1], args[2]);
    }
    return func.apply(thisArg, args);
  }

  /**
   * Creates a new array concatenating `array` with `other`.
   *
   * @private
   * @param {Array} array The first array to concatenate.
   * @param {Array} other The second array to concatenate.
   * @returns {Array} Returns the new concatenated array.
   */
  function arrayConcat(array, other) {
    var index = -1,
        length = array.length,
        othIndex = -1,
        othLength = other.length,
        result = Array(length + othLength);

    while (++index < length) {
      result[index] = array[index];
    }
    while (++othIndex < othLength) {
      result[index++] = other[othIndex];
    }
    return result;
  }

  /**
   * A specialized version of `_.forEach` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns `array`.
   */
  function arrayEach(array, iteratee) {
    var index = -1,
        length = array.length;

    while (++index < length) {
      if (iteratee(array[index], index, array) === false) {
        break;
      }
    }
    return array;
  }

  /**
   * A specialized version of `_.forEachRight` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns `array`.
   */
  function arrayEachRight(array, iteratee) {
    var length = array.length;

    while (length--) {
      if (iteratee(array[length], length, array) === false) {
        break;
      }
    }
    return array;
  }

  /**
   * A specialized version of `_.every` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {boolean} Returns `true` if all elements pass the predicate check, else `false`.
   */
  function arrayEvery(array, predicate) {
    var index = -1,
        length = array.length;

    while (++index < length) {
      if (!predicate(array[index], index, array)) {
        return false;
      }
    }
    return true;
  }

  /**
   * A specialized version of `_.filter` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {Array} Returns the new filtered array.
   */
  function arrayFilter(array, predicate) {
    var index = -1,
        length = array.length,
        resIndex = -1,
        result = [];

    while (++index < length) {
      var value = array[index];
      if (predicate(value, index, array)) {
        result[++resIndex] = value;
      }
    }
    return result;
  }

  /**
   * A specialized version of `_.includes` for arrays without support for
   * specifying an index to search from.
   *
   * @private
   * @param {Array} array The array to search.
   * @param {*} target The value to search for.
   * @returns {boolean} Returns `true` if `target` is found, else `false`.
   */
  function arrayIncludes(array, value) {
    return !!array.length && baseIndexOf(array, value, 0) > -1;
  }

  /**
   * A specialized version of `_.includesWith` for arrays without support for
   * specifying an index to search from.
   *
   * @private
   * @param {Array} array The array to search.
   * @param {*} target The value to search for.
   * @param {Function} comparator The comparator invoked per element.
   * @returns {boolean} Returns `true` if `target` is found, else `false`.
   */
  function arrayIncludesWith(array, value, comparator) {
    var index = -1,
        length = array.length;

    while (++index < length) {
      if (comparator(value, array[index])) {
        return true;
      }
    }
    return false;
  }

  /**
   * A specialized version of `_.map` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the new mapped array.
   */
  function arrayMap(array, iteratee) {
    var index = -1,
        length = array.length,
        result = Array(length);

    while (++index < length) {
      result[index] = iteratee(array[index], index, array);
    }
    return result;
  }

  /**
   * Appends the elements of `values` to `array`.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {Array} values The values to append.
   * @returns {Array} Returns `array`.
   */
  function arrayPush(array, values) {
    var index = -1,
        length = values.length,
        offset = array.length;

    while (++index < length) {
      array[offset + index] = values[index];
    }
    return array;
  }

  /**
   * A specialized version of `_.reduce` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} [accumulator] The initial value.
   * @param {boolean} [initFromArray] Specify using the first element of `array` as the initial value.
   * @returns {*} Returns the accumulated value.
   */
  function arrayReduce(array, iteratee, accumulator, initFromArray) {
    var index = -1,
        length = array.length;

    if (initFromArray && length) {
      accumulator = array[++index];
    }
    while (++index < length) {
      accumulator = iteratee(accumulator, array[index], index, array);
    }
    return accumulator;
  }

  /**
   * A specialized version of `_.reduceRight` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} [accumulator] The initial value.
   * @param {boolean} [initFromArray] Specify using the last element of `array` as the initial value.
   * @returns {*} Returns the accumulated value.
   */
  function arrayReduceRight(array, iteratee, accumulator, initFromArray) {
    var length = array.length;
    if (initFromArray && length) {
      accumulator = array[--length];
    }
    while (length--) {
      accumulator = iteratee(accumulator, array[length], length, array);
    }
    return accumulator;
  }

  /**
   * A specialized version of `_.some` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {boolean} Returns `true` if any element passes the predicate check, else `false`.
   */
  function arraySome(array, predicate) {
    var index = -1,
        length = array.length;

    while (++index < length) {
      if (predicate(array[index], index, array)) {
        return true;
      }
    }
    return false;
  }

  /**
   * The base implementation of methods like `_.max` and `_.min` which accepts a
   * `comparator` to determine the extremum value.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The iteratee invoked per iteration.
   * @param {Function} comparator The comparator used to compare values.
   * @returns {*} Returns the extremum value.
   */
  function baseExtremum(array, iteratee, comparator) {
    var index = -1,
        length = array.length;

    while (++index < length) {
      var value = array[index],
          current = iteratee(value);

      if (current != null && (computed === undefined
            ? current === current
            : comparator(current, computed)
          )) {
        var computed = current,
            result = value;
      }
    }
    return result;
  }

  /**
   * The base implementation of methods like `_.find` and `_.findKey`, without
   * support for iteratee shorthands, which iterates over `collection` using
   * the provided `eachFunc`.
   *
   * @private
   * @param {Array|Object} collection The collection to search.
   * @param {Function} predicate The function invoked per iteration.
   * @param {Function} eachFunc The function to iterate over `collection`.
   * @param {boolean} [retKey] Specify returning the key of the found element instead of the element itself.
   * @returns {*} Returns the found element or its key, else `undefined`.
   */
  function baseFind(collection, predicate, eachFunc, retKey) {
    var result;
    eachFunc(collection, function(value, key, collection) {
      if (predicate(value, key, collection)) {
        result = retKey ? key : value;
        return false;
      }
    });
    return result;
  }

  /**
   * The base implementation of `_.findIndex` and `_.findLastIndex` without
   * support for iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to search.
   * @param {Function} predicate The function invoked per iteration.
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseFindIndex(array, predicate, fromRight) {
    var length = array.length,
        index = fromRight ? length : -1;

    while ((fromRight ? index-- : ++index < length)) {
      if (predicate(array[index], index, array)) {
        return index;
      }
    }
    return -1;
  }

  /**
   * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
   *
   * @private
   * @param {Array} array The array to search.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseIndexOf(array, value, fromIndex) {
    if (value !== value) {
      return indexOfNaN(array, fromIndex);
    }
    var index = fromIndex - 1,
        length = array.length;

    while (++index < length) {
      if (array[index] === value) {
        return index;
      }
    }
    return -1;
  }

  /**
   * The base implementation of `_.reduce` and `_.reduceRight`, without support
   * for iteratee shorthands, which iterates over `collection` using the provided
   * `eachFunc`.
   *
   * @private
   * @param {Array|Object} collection The collection to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} accumulator The initial value.
   * @param {boolean} initFromCollection Specify using the first or last element of `collection` as the initial value.
   * @param {Function} eachFunc The function to iterate over `collection`.
   * @returns {*} Returns the accumulated value.
   */
  function baseReduce(collection, iteratee, accumulator, initFromCollection, eachFunc) {
    eachFunc(collection, function(value, index, collection) {
      accumulator = initFromCollection
        ? (initFromCollection = false, value)
        : iteratee(accumulator, value, index, collection);
    });
    return accumulator;
  }

  /**
   * The base implementation of `_.sortBy` which uses `comparer` to define
   * the sort order of `array` and replaces criteria objects with their
   * corresponding values.
   *
   * @private
   * @param {Array} array The array to sort.
   * @param {Function} comparer The function to define sort order.
   * @returns {Array} Returns `array`.
   */
  function baseSortBy(array, comparer) {
    var length = array.length;

    array.sort(comparer);
    while (length--) {
      array[length] = array[length].value;
    }
    return array;
  }

  /**
   * The base implementation of `_.sum` without support for iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {number} Returns the sum.
   */
  function baseSum(array, iteratee) {
    var result,
        index = -1,
        length = array.length;

    while (++index < length) {
      var current = iteratee(array[index]);
      if (current !== undefined) {
        result = result === undefined ? current : (result + current);
      }
    }
    return result;
  }

  /**
   * The base implementation of `_.times` without support for iteratee shorthands
   * or max array length checks.
   *
   * @private
   * @param {number} n The number of times to invoke `iteratee`.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the array of results.
   */
  function baseTimes(n, iteratee) {
    var index = -1,
        result = Array(n);

    while (++index < n) {
      result[index] = iteratee(index);
    }
    return result;
  }

  /**
   * The base implementation of `_.toPairs` and `_.toPairsIn` which creates an array
   * of key-value pairs for `object` corresponding to the property names of `props`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array} props The property names to get values for.
   * @returns {Object} Returns the new array of key-value pairs.
   */
  function baseToPairs(object, props) {
    return arrayMap(props, function(key) {
      return [key, object[key]];
    });
  }

  /**
   * The base implementation of `_.unary` without support for storing wrapper metadata.
   *
   * @private
   * @param {Function} func The function to cap arguments for.
   * @returns {Function} Returns the new function.
   */
  function baseUnary(func) {
    return function(value) {
      return func(value);
    };
  }

  /**
   * The base implementation of `_.values` and `_.valuesIn` which creates an
   * array of `object` property values corresponding to the property names
   * of `props`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array} props The property names to get values for.
   * @returns {Object} Returns the array of property values.
   */
  function baseValues(object, props) {
    return arrayMap(props, function(key) {
      return object[key];
    });
  }

  /**
   * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol
   * that is not found in the character symbols.
   *
   * @private
   * @param {Array} strSymbols The string symbols to inspect.
   * @param {Array} chrSymbols The character symbols to find.
   * @returns {number} Returns the index of the first unmatched string symbol.
   */
  function charsStartIndex(strSymbols, chrSymbols) {
    var index = -1,
        length = strSymbols.length;

    while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
    return index;
  }

  /**
   * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol
   * that is not found in the character symbols.
   *
   * @private
   * @param {Array} strSymbols The string symbols to inspect.
   * @param {Array} chrSymbols The character symbols to find.
   * @returns {number} Returns the index of the last unmatched string symbol.
   */
  function charsEndIndex(strSymbols, chrSymbols) {
    var index = strSymbols.length;

    while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
    return index;
  }

  /**
   * Checks if `value` is a global object.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {null|Object} Returns `value` if it's a global object, else `null`.
   */
  function checkGlobal(value) {
    return (value && value.Object === Object) ? value : null;
  }

  /**
   * Compares values to sort them in ascending order.
   *
   * @private
   * @param {*} value The value to compare.
   * @param {*} other The other value to compare.
   * @returns {number} Returns the sort order indicator for `value`.
   */
  function compareAscending(value, other) {
    if (value !== other) {
      var valIsNull = value === null,
          valIsUndef = value === undefined,
          valIsReflexive = value === value;

      var othIsNull = other === null,
          othIsUndef = other === undefined,
          othIsReflexive = other === other;

      if ((value > other && !othIsNull) || !valIsReflexive ||
          (valIsNull && !othIsUndef && othIsReflexive) ||
          (valIsUndef && othIsReflexive)) {
        return 1;
      }
      if ((value < other && !valIsNull) || !othIsReflexive ||
          (othIsNull && !valIsUndef && valIsReflexive) ||
          (othIsUndef && valIsReflexive)) {
        return -1;
      }
    }
    return 0;
  }

  /**
   * Used by `_.orderBy` to compare multiple properties of a value to another
   * and stable sort them.
   *
   * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,
   * specify an order of "desc" for descending or "asc" for ascending sort order
   * of corresponding values.
   *
   * @private
   * @param {Object} object The object to compare.
   * @param {Object} other The other object to compare.
   * @param {boolean[]|string[]} orders The order to sort by for each property.
   * @returns {number} Returns the sort order indicator for `object`.
   */
  function compareMultiple(object, other, orders) {
    var index = -1,
        objCriteria = object.criteria,
        othCriteria = other.criteria,
        length = objCriteria.length,
        ordersLength = orders.length;

    while (++index < length) {
      var result = compareAscending(objCriteria[index], othCriteria[index]);
      if (result) {
        if (index >= ordersLength) {
          return result;
        }
        var order = orders[index];
        return result * (order == 'desc' ? -1 : 1);
      }
    }
    // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
    // that causes it, under certain circumstances, to provide the same value for
    // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
    // for more details.
    //
    // This also ensures a stable sort in V8 and other engines.
    // See https://code.google.com/p/v8/issues/detail?id=90 for more details.
    return object.index - other.index;
  }

  /**
   * Used by `_.deburr` to convert latin-1 supplementary letters to basic latin letters.
   *
   * @private
   * @param {string} letter The matched letter to deburr.
   * @returns {string} Returns the deburred letter.
   */
  function deburrLetter(letter) {
    return deburredLetters[letter];
  }

  /**
   * Used by `_.escape` to convert characters to HTML entities.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */
  function escapeHtmlChar(chr) {
    return htmlEscapes[chr];
  }

  /**
   * Used by `_.template` to escape characters for inclusion in compiled string literals.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */
  function escapeStringChar(chr) {
    return '\\' + stringEscapes[chr];
  }

  /**
   * Gets the index at which the first occurrence of `NaN` is found in `array`.
   *
   * @private
   * @param {Array} array The array to search.
   * @param {number} fromIndex The index to search from.
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {number} Returns the index of the matched `NaN`, else `-1`.
   */
  function indexOfNaN(array, fromIndex, fromRight) {
    var length = array.length,
        index = fromIndex + (fromRight ? 0 : -1);

    while ((fromRight ? index-- : ++index < length)) {
      var other = array[index];
      if (other !== other) {
        return index;
      }
    }
    return -1;
  }

  /**
   * Checks if `value` is a host object in IE < 9.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a host object, else `false`.
   */
  function isHostObject(value) {
    // Many host objects are `Object` objects that can coerce to strings
    // despite having improperly defined `toString` methods.
    var result = false;
    if (value != null && typeof value.toString != 'function') {
      try {
        result = !!(value + '');
      } catch (e) {}
    }
    return result;
  }

  /**
   * Checks if `value` is a valid array-like index.
   *
   * @private
   * @param {*} value The value to check.
   * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
   * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
   */
  function isIndex(value, length) {
    value = (typeof value == 'number' || reIsUint.test(value)) ? +value : -1;
    length = length == null ? MAX_SAFE_INTEGER : length;
    return value > -1 && value % 1 == 0 && value < length;
  }

  /**
   * Converts `iterator` to an array.
   *
   * @private
   * @param {Object} iterator The iterator to convert.
   * @returns {Array} Returns the converted array.
   */
  function iteratorToArray(iterator) {
    var data,
        result = [];

    while (!(data = iterator.next()).done) {
      result.push(data.value);
    }
    return result;
  }

  /**
   * Converts `map` to an array.
   *
   * @private
   * @param {Object} map The map to convert.
   * @returns {Array} Returns the converted array.
   */
  function mapToArray(map) {
    var index = -1,
        result = Array(map.size);

    map.forEach(function(value, key) {
      result[++index] = [key, value];
    });
    return result;
  }

  /**
   * Replaces all `placeholder` elements in `array` with an internal placeholder
   * and returns an array of their indexes.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {*} placeholder The placeholder to replace.
   * @returns {Array} Returns the new array of placeholder indexes.
   */
  function replaceHolders(array, placeholder) {
    var index = -1,
        length = array.length,
        resIndex = -1,
        result = [];

    while (++index < length) {
      if (array[index] === placeholder) {
        array[index] = PLACEHOLDER;
        result[++resIndex] = index;
      }
    }
    return result;
  }

  /**
   * Converts `set` to an array.
   *
   * @private
   * @param {Object} set The set to convert.
   * @returns {Array} Returns the converted array.
   */
  function setToArray(set) {
    var index = -1,
        result = Array(set.size);

    set.forEach(function(value) {
      result[++index] = value;
    });
    return result;
  }

  /**
   * Gets the number of symbols in `string`.
   *
   * @param {string} string The string to inspect.
   * @returns {number} Returns the string size.
   */
  function stringSize(string) {
    if (!(string && reHasComplexSymbol.test(string))) {
      return string.length;
    }
    var result = reComplexSymbol.lastIndex = 0;
    while (reComplexSymbol.test(string)) {
      result++;
    }
    return result;
  }

  /**
   * Converts `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function stringToArray(string) {
    return string.match(reComplexSymbol);
  }

  /**
   * Used by `_.unescape` to convert HTML entities to characters.
   *
   * @private
   * @param {string} chr The matched character to unescape.
   * @returns {string} Returns the unescaped character.
   */
  function unescapeHtmlChar(chr) {
    return htmlUnescapes[chr];
  }

  /*--------------------------------------------------------------------------*/

  /**
   * Create a new pristine `lodash` function using the `context` object.
   *
   * @static
   * @memberOf _
   * @category Util
   * @param {Object} [context=root] The context object.
   * @returns {Function} Returns a new `lodash` function.
   * @example
   *
   * _.mixin({ 'foo': _.constant('foo') });
   *
   * var lodash = _.runInContext();
   * lodash.mixin({ 'bar': lodash.constant('bar') });
   *
   * _.isFunction(_.foo);
   * // => true
   * _.isFunction(_.bar);
   * // => false
   *
   * lodash.isFunction(lodash.foo);
   * // => false
   * lodash.isFunction(lodash.bar);
   * // => true
   *
   * // using `context` to mock `Date#getTime` use in `_.now`
   * var mock = _.runInContext({
   *   'Date': function() {
   *     return { 'getTime': getTimeMock };
   *   }
   * });
   *
   * // or creating a suped-up `defer` in Node.js
   * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;
   */
  function runInContext(context) {
    context = context ? _.defaults({}, context, _.pick(root, contextProps)) : root;

    /** Built-in constructor references. */
    var Date = context.Date,
        Error = context.Error,
        Math = context.Math,
        RegExp = context.RegExp,
        TypeError = context.TypeError;

    /** Used for built-in method references. */
    var arrayProto = context.Array.prototype,
        objectProto = context.Object.prototype;

    /** Used to resolve the decompiled source of functions. */
    var funcToString = context.Function.prototype.toString;

    /** Used to check objects for own properties. */
    var hasOwnProperty = objectProto.hasOwnProperty;

    /** Used to generate unique IDs. */
    var idCounter = 0;

    /** Used to infer the `Object` constructor. */
    var objectCtorString = funcToString.call(Object);

    /**
     * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
     * of values.
     */
    var objectToString = objectProto.toString;

    /** Used to restore the original `_` reference in `_.noConflict`. */
    var oldDash = root._;

    /** Used to detect if a method is native. */
    var reIsNative = RegExp('^' +
      funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
      .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
    );

    /** Built-in value references. */
    var _Symbol = context.Symbol,
        Reflect = context.Reflect,
        Uint8Array = context.Uint8Array,
        clearTimeout = context.clearTimeout,
        enumerate = Reflect ? Reflect.enumerate : undefined,
        getPrototypeOf = Object.getPrototypeOf,
        getOwnPropertySymbols = Object.getOwnPropertySymbols,
        iteratorSymbol = typeof (iteratorSymbol = _Symbol && _Symbol.iterator) == 'symbol' ? iteratorSymbol : undefined,
        propertyIsEnumerable = objectProto.propertyIsEnumerable,
        setTimeout = context.setTimeout,
        splice = arrayProto.splice;

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeCeil = Math.ceil,
        nativeFloor = Math.floor,
        nativeIsFinite = context.isFinite,
        nativeJoin = arrayProto.join,
        nativeKeys = Object.keys,
        nativeMax = Math.max,
        nativeMin = Math.min,
        nativeParseInt = context.parseInt,
        nativeRandom = Math.random,
        nativeReverse = arrayProto.reverse;

    /* Built-in method references that are verified to be native. */
    var Map = getNative(context, 'Map'),
        Set = getNative(context, 'Set'),
        WeakMap = getNative(context, 'WeakMap'),
        nativeCreate = getNative(Object, 'create');

    /** Used to store function metadata. */
    var metaMap = WeakMap && new WeakMap;

    /** Used to detect maps and sets. */
    var mapCtorString = Map ? funcToString.call(Map) : '',
        setCtorString = Set ? funcToString.call(Set) : '';

    /** Used to convert symbols to primitives and strings. */
    var symbolProto = _Symbol ? _Symbol.prototype : undefined,
        symbolValueOf = _Symbol ? symbolProto.valueOf : undefined,
        symbolToString = _Symbol ? symbolProto.toString : undefined;

    /** Used to lookup unminified function names. */
    var realNames = {};

    /*------------------------------------------------------------------------*/

    /**
     * Creates a `lodash` object which wraps `value` to enable implicit method
     * chaining. Methods that operate on and return arrays, collections, and
     * functions can be chained together. Methods that retrieve a single value or
     * may return a primitive value will automatically end the chain sequence and
     * return the unwrapped value. Otherwise, the value must be unwrapped with
     * `_#value`.
     *
     * Explicit chaining, which must be unwrapped with `_#value` in all cases,
     * may be enabled using `_.chain`.
     *
     * The execution of chained methods is lazy, that is, it's deferred until
     * `_#value` is implicitly or explicitly called.
     *
     * Lazy evaluation allows several methods to support shortcut fusion. Shortcut
     * fusion is an optimization to merge iteratee calls; this avoids the creation
     * of intermediate arrays and can greatly reduce the number of iteratee executions.
     * Sections of a chain sequence qualify for shortcut fusion if the section is
     * applied to an array of at least two hundred elements and any iteratees
     * accept only one argument. The heuristic for whether a section qualifies
     * for shortcut fusion is subject to change.
     *
     * Chaining is supported in custom builds as long as the `_#value` method is
     * directly or indirectly included in the build.
     *
     * In addition to lodash methods, wrappers have `Array` and `String` methods.
     *
     * The wrapper `Array` methods are:
     * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`
     *
     * The wrapper `String` methods are:
     * `replace` and `split`
     *
     * The wrapper methods that support shortcut fusion are:
     * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,
     * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,
     * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`
     *
     * The chainable wrapper methods are:
     * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`,
     * `at`, `before`, `bind`, `bindAll`, `bindKey`, `chain`, `chunk`, `commit`,
     * `compact`, `concat`, `conforms`,  `constant`, `countBy`, `create`, `curry`,
     * `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`, `difference`,
     * `differenceBy`, `differenceWith`,  `drop`, `dropRight`, `dropRightWhile`,
     * `dropWhile`, `fill`, `filter`, `flatten`, `flattenDeep`, `flip`, `flow`,
     * `flowRight`, `forEach`, `forEachRight`, `forIn`, `forInRight`, `forOwn`,
     * `forOwnRight`, `fromPairs`, `functions`, `functionsIn`, `groupBy`, `initial`,
     * `intersection`, `intersectionBy`, `intersectionWith`, invert`, `invokeMap`,
     * `iteratee`, `keyBy`, `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`,
     * `matches`, `matchesProperty`, `memoize`, `merge`, `mergeWith`, `method`,
     * `methodOf`, `mixin`, `negate`, `nthArg`, `omit`, `omitBy`, `once`, `orderBy`,
     * `over`, `overArgs`, `overEvery`, `overSome`, `partial`, `partialRight`,
     * `partition`, `pick`, `pickBy`, `plant`, `property`, `propertyOf`, `pull`,
     * `pullAll`, `pullAllBy`, `pullAt`, `push`, `range`, `rangeRight`, `rearg`,
     * `reject`, `remove`, `rest`, `reverse`, `sampleSize`, `set`, `setWith`,
     * `shuffle`, `slice`, `sort`, `sortBy`, `splice`, `spread`, `tail`, `take`,
     * `takeRight`, `takeRightWhile`, `takeWhile`, `tap`, `throttle`, `thru`,
     * `toArray`, `toPairs`, `toPairsIn`, `toPath`, `toPlainObject`, `transform`,
     * `unary`, `union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`, `uniqWith`,
     * `unset`, `unshift`, `unzip`, `unzipWith`, `values`, `valuesIn`, `without`,
     * `wrap`, `xor`, `xorBy`, `xorWith`, `zip`, `zipObject`, and `zipWith`
     *
     * The wrapper methods that are **not** chainable by default are:
     * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,
     * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `deburr`, `endsWith`, `eq`,
     * `escape`, `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`,
     * `findLast`, `findLastIndex`, `findLastKey`, `floor`, `get`, `gt`, `gte`,
     * `has`, `hasIn`, `head`, `identity`, `includes`, `indexOf`, `inRange`,
     * `invoke`, `isArguments`, `isArray`, `isArrayLike`, `isArrayLikeObject`,
     * `isBoolean`, `isDate`, `isElement`, `isEmpty`, `isEqual`, `isEqualWith`,
     * `isError`, `isFinite`, `isFunction`, `isInteger`, `isLength`, `isMatch`,
     * `isMatchWith`, `isNaN`, `isNative`, `isNil`, `isNull`, `isNumber`,
     * `isObject`, `isObjectLike`, `isPlainObject`, `isRegExp`, `isSafeInteger`,
     * `isString`, `isUndefined`, `isTypedArray`, `join`, `kebabCase`, `last`,
     * `lastIndexOf`, `lowerCase`, `lowerFirst`, `lt`, `lte`, `max`, `maxBy`,
     * `mean`, `min`, `minBy`, `noConflict`, `noop`, `now`, `pad`, `padEnd`,
     * `padStart`, `parseInt`, `pop`, `random`, `reduce`, `reduceRight`, `repeat`,
     * `result`, `round`, `runInContext`, `sample`, `shift`, `size`, `snakeCase`,
     * `some`, `sortedIndex`, `sortedIndexBy`, `sortedLastIndex`, `sortedLastIndexBy`,
     * `startCase`, `startsWith`, `subtract`, `sum`, sumBy`, `template`, `times`,
     * `toLower`, `toInteger`, `toLength`, `toNumber`, `toSafeInteger`, toString`,
     * `toUpper`, `trim`, `trimEnd`, `trimStart`, `truncate`, `unescape`, `uniqueId`,
     * `upperCase`, `upperFirst`, `value`, and `words`
     *
     * @name _
     * @constructor
     * @category Seq
     * @param {*} value The value to wrap in a `lodash` instance.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var wrapped = _([1, 2, 3]);
     *
     * // returns an unwrapped value
     * wrapped.reduce(_.add);
     * // => 6
     *
     * // returns a wrapped value
     * var squares = wrapped.map(square);
     *
     * _.isArray(squares);
     * // => false
     *
     * _.isArray(squares.value());
     * // => true
     */
    function lodash(value) {
      if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
        if (value instanceof LodashWrapper) {
          return value;
        }
        if (hasOwnProperty.call(value, '__wrapped__')) {
          return wrapperClone(value);
        }
      }
      return new LodashWrapper(value);
    }

    /**
     * The function whose prototype all chaining wrappers inherit from.
     *
     * @private
     */
    function baseLodash() {
      // No operation performed.
    }

    /**
     * The base constructor for creating `lodash` wrapper objects.
     *
     * @private
     * @param {*} value The value to wrap.
     * @param {boolean} [chainAll] Enable chaining for all wrapper methods.
     */
    function LodashWrapper(value, chainAll) {
      this.__wrapped__ = value;
      this.__actions__ = [];
      this.__chain__ = !!chainAll;
      this.__index__ = 0;
      this.__values__ = undefined;
    }

    /**
     * By default, the template delimiters used by lodash are like those in
     * embedded Ruby (ERB). Change the following template settings to use
     * alternative delimiters.
     *
     * @static
     * @memberOf _
     * @type Object
     */
    lodash.templateSettings = {

      /**
       * Used to detect `data` property values to be HTML-escaped.
       *
       * @memberOf _.templateSettings
       * @type RegExp
       */
      'escape': reEscape,

      /**
       * Used to detect code to be evaluated.
       *
       * @memberOf _.templateSettings
       * @type RegExp
       */
      'evaluate': reEvaluate,

      /**
       * Used to detect `data` property values to inject.
       *
       * @memberOf _.templateSettings
       * @type RegExp
       */
      'interpolate': reInterpolate,

      /**
       * Used to reference the data object in the template text.
       *
       * @memberOf _.templateSettings
       * @type string
       */
      'variable': '',

      /**
       * Used to import variables into the compiled template.
       *
       * @memberOf _.templateSettings
       * @type Object
       */
      'imports': {

        /**
         * A reference to the `lodash` function.
         *
         * @memberOf _.templateSettings.imports
         * @type Function
         */
        '_': lodash
      }
    };

    /*------------------------------------------------------------------------*/

    /**
     * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.
     *
     * @private
     * @param {*} value The value to wrap.
     */
    function LazyWrapper(value) {
      this.__wrapped__ = value;
      this.__actions__ = [];
      this.__dir__ = 1;
      this.__filtered__ = false;
      this.__iteratees__ = [];
      this.__takeCount__ = MAX_ARRAY_LENGTH;
      this.__views__ = [];
    }

    /**
     * Creates a clone of the lazy wrapper object.
     *
     * @private
     * @name clone
     * @memberOf LazyWrapper
     * @returns {Object} Returns the cloned `LazyWrapper` object.
     */
    function lazyClone() {
      var result = new LazyWrapper(this.__wrapped__);
      result.__actions__ = copyArray(this.__actions__);
      result.__dir__ = this.__dir__;
      result.__filtered__ = this.__filtered__;
      result.__iteratees__ = copyArray(this.__iteratees__);
      result.__takeCount__ = this.__takeCount__;
      result.__views__ = copyArray(this.__views__);
      return result;
    }

    /**
     * Reverses the direction of lazy iteration.
     *
     * @private
     * @name reverse
     * @memberOf LazyWrapper
     * @returns {Object} Returns the new reversed `LazyWrapper` object.
     */
    function lazyReverse() {
      if (this.__filtered__) {
        var result = new LazyWrapper(this);
        result.__dir__ = -1;
        result.__filtered__ = true;
      } else {
        result = this.clone();
        result.__dir__ *= -1;
      }
      return result;
    }

    /**
     * Extracts the unwrapped value from its lazy wrapper.
     *
     * @private
     * @name value
     * @memberOf LazyWrapper
     * @returns {*} Returns the unwrapped value.
     */
    function lazyValue() {
      var array = this.__wrapped__.value(),
          dir = this.__dir__,
          isArr = isArray(array),
          isRight = dir < 0,
          arrLength = isArr ? array.length : 0,
          view = getView(0, arrLength, this.__views__),
          start = view.start,
          end = view.end,
          length = end - start,
          index = isRight ? end : (start - 1),
          iteratees = this.__iteratees__,
          iterLength = iteratees.length,
          resIndex = 0,
          takeCount = nativeMin(length, this.__takeCount__);

      if (!isArr || arrLength < LARGE_ARRAY_SIZE || (arrLength == length && takeCount == length)) {
        return baseWrapperValue(array, this.__actions__);
      }
      var result = [];

      outer:
      while (length-- && resIndex < takeCount) {
        index += dir;

        var iterIndex = -1,
            value = array[index];

        while (++iterIndex < iterLength) {
          var data = iteratees[iterIndex],
              iteratee = data.iteratee,
              type = data.type,
              computed = iteratee(value);

          if (type == LAZY_MAP_FLAG) {
            value = computed;
          } else if (!computed) {
            if (type == LAZY_FILTER_FLAG) {
              continue outer;
            } else {
              break outer;
            }
          }
        }
        result[resIndex++] = value;
      }
      return result;
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates an hash object.
     *
     * @private
     * @returns {Object} Returns the new hash object.
     */
    function Hash() {}

    /**
     * Removes `key` and its value from the hash.
     *
     * @private
     * @param {Object} hash The hash to modify.
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function hashDelete(hash, key) {
      return hashHas(hash, key) && delete hash[key];
    }

    /**
     * Gets the hash value for `key`.
     *
     * @private
     * @param {Object} hash The hash to query.
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function hashGet(hash, key) {
      if (nativeCreate) {
        var result = hash[key];
        return result === HASH_UNDEFINED ? undefined : result;
      }
      return hasOwnProperty.call(hash, key) ? hash[key] : undefined;
    }

    /**
     * Checks if a hash value for `key` exists.
     *
     * @private
     * @param {Object} hash The hash to query.
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function hashHas(hash, key) {
      return nativeCreate ? hash[key] !== undefined : hasOwnProperty.call(hash, key);
    }

    /**
     * Sets the hash `key` to `value`.
     *
     * @private
     * @param {Object} hash The hash to modify.
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     */
    function hashSet(hash, key, value) {
      hash[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates a map cache object to store key-value pairs.
     *
     * @private
     * @param {Array} [values] The values to cache.
     */
    function MapCache(values) {
      var index = -1,
          length = values ? values.length : 0;

      this.clear();
      while (++index < length) {
        var entry = values[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the map.
     *
     * @private
     * @name clear
     * @memberOf MapCache
     */
    function mapClear() {
      this.__data__ = { 'hash': new Hash, 'map': Map ? new Map : [], 'string': new Hash };
    }

    /**
     * Removes `key` and its value from the map.
     *
     * @private
     * @name delete
     * @memberOf MapCache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function mapDelete(key) {
      var data = this.__data__;
      if (isKeyable(key)) {
        return hashDelete(typeof key == 'string' ? data.string : data.hash, key);
      }
      return Map ? data.map['delete'](key) : assocDelete(data.map, key);
    }

    /**
     * Gets the map value for `key`.
     *
     * @private
     * @name get
     * @memberOf MapCache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function mapGet(key) {
      var data = this.__data__;
      if (isKeyable(key)) {
        return hashGet(typeof key == 'string' ? data.string : data.hash, key);
      }
      return Map ? data.map.get(key) : assocGet(data.map, key);
    }

    /**
     * Checks if a map value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf MapCache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function mapHas(key) {
      var data = this.__data__;
      if (isKeyable(key)) {
        return hashHas(typeof key == 'string' ? data.string : data.hash, key);
      }
      return Map ? data.map.has(key) : assocHas(data.map, key);
    }

    /**
     * Sets the map `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf MapCache
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the map cache object.
     */
    function mapSet(key, value) {
      var data = this.__data__;
      if (isKeyable(key)) {
        hashSet(typeof key == 'string' ? data.string : data.hash, key, value);
      } else if (Map) {
        data.map.set(key, value);
      } else {
        assocSet(data.map, key, value);
      }
      return this;
    }

    /*------------------------------------------------------------------------*/

    /**
     *
     * Creates a set cache object to store unique values.
     *
     * @private
     * @param {Array} [values] The values to cache.
     */
    function SetCache(values) {
      var index = -1,
          length = values ? values.length : 0;

      this.__data__ = new MapCache;
      while (++index < length) {
        this.push(values[index]);
      }
    }

    /**
     * Checks if `value` is in `cache`.
     *
     * @private
     * @param {Object} cache The set cache to search.
     * @param {*} value The value to search for.
     * @returns {number} Returns `true` if `value` is found, else `false`.
     */
    function cacheHas(cache, value) {
      var map = cache.__data__;
      if (isKeyable(value)) {
        var data = map.__data__,
            hash = typeof value == 'string' ? data.string : data.hash;

        return hash[value] === HASH_UNDEFINED;
      }
      return map.has(value);
    }

    /**
     * Adds `value` to the set cache.
     *
     * @private
     * @name push
     * @memberOf SetCache
     * @param {*} value The value to cache.
     */
    function cachePush(value) {
      var map = this.__data__;
      if (isKeyable(value)) {
        var data = map.__data__,
            hash = typeof value == 'string' ? data.string : data.hash;

        hash[value] = HASH_UNDEFINED;
      }
      else {
        map.set(value, HASH_UNDEFINED);
      }
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates a stack cache object to store key-value pairs.
     *
     * @private
     * @param {Array} [values] The values to cache.
     */
    function Stack(values) {
      var index = -1,
          length = values ? values.length : 0;

      this.clear();
      while (++index < length) {
        var entry = values[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the stack.
     *
     * @private
     * @name clear
     * @memberOf Stack
     */
    function stackClear() {
      this.__data__ = { 'array': [], 'map': null };
    }

    /**
     * Removes `key` and its value from the stack.
     *
     * @private
     * @name delete
     * @memberOf Stack
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function stackDelete(key) {
      var data = this.__data__,
          array = data.array;

      return array ? assocDelete(array, key) : data.map['delete'](key);
    }

    /**
     * Gets the stack value for `key`.
     *
     * @private
     * @name get
     * @memberOf Stack
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function stackGet(key) {
      var data = this.__data__,
          array = data.array;

      return array ? assocGet(array, key) : data.map.get(key);
    }

    /**
     * Checks if a stack value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf Stack
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function stackHas(key) {
      var data = this.__data__,
          array = data.array;

      return array ? assocHas(array, key) : data.map.has(key);
    }

    /**
     * Sets the stack `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf Stack
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the stack cache object.
     */
    function stackSet(key, value) {
      var data = this.__data__,
          array = data.array;

      if (array) {
        if (array.length < (LARGE_ARRAY_SIZE - 1)) {
          assocSet(array, key, value);
        } else {
          data.array = null;
          data.map = new MapCache(array);
        }
      }
      var map = data.map;
      if (map) {
        map.set(key, value);
      }
      return this;
    }

    /*------------------------------------------------------------------------*/

    /**
     * Removes `key` and its value from the associative array.
     *
     * @private
     * @param {Array} array The array to query.
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function assocDelete(array, key) {
      var index = assocIndexOf(array, key);
      if (index < 0) {
        return false;
      }
      var lastIndex = array.length - 1;
      if (index == lastIndex) {
        array.pop();
      } else {
        splice.call(array, index, 1);
      }
      return true;
    }

    /**
     * Gets the associative array value for `key`.
     *
     * @private
     * @param {Array} array The array to query.
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function assocGet(array, key) {
      var index = assocIndexOf(array, key);
      return index < 0 ? undefined : array[index][1];
    }

    /**
     * Checks if an associative array value for `key` exists.
     *
     * @private
     * @param {Array} array The array to query.
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function assocHas(array, key) {
      return assocIndexOf(array, key) > -1;
    }

    /**
     * Gets the index at which the first occurrence of `key` is found in `array`
     * of key-value pairs.
     *
     * @private
     * @param {Array} array The array to search.
     * @param {*} key The key to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     */
    function assocIndexOf(array, key) {
      var length = array.length;
      while (length--) {
        if (eq(array[length][0], key)) {
          return length;
        }
      }
      return -1;
    }

    /**
     * Sets the associative array `key` to `value`.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     */
    function assocSet(array, key, value) {
      var index = assocIndexOf(array, key);
      if (index < 0) {
        array.push([key, value]);
      } else {
        array[index][1] = value;
      }
    }

    /*------------------------------------------------------------------------*/

    /**
     * Used by `_.defaults` to customize its `_.assignIn` use.
     *
     * @private
     * @param {*} objValue The destination value.
     * @param {*} srcValue The source value.
     * @param {string} key The key of the property to assign.
     * @param {Object} object The parent object of `objValue`.
     * @returns {*} Returns the value to assign.
     */
    function assignInDefaults(objValue, srcValue, key, object) {
      if (objValue === undefined ||
          (eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key))) {
        return srcValue;
      }
      return objValue;
    }

    /**
     * This function is like `assignValue` except that it doesn't assign `undefined` values.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function assignMergeValue(object, key, value) {
      if ((value !== undefined && !eq(object[key], value)) ||
          (typeof key == 'number' && value === undefined && !(key in object))) {
        object[key] = value;
      }
    }

    /**
     * Assigns `value` to `key` of `object` if the existing value is not equivalent
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function assignValue(object, key, value) {
      var objValue = object[key];
      if ((!eq(objValue, value) ||
            (eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key))) ||
          (value === undefined && !(key in object))) {
        object[key] = value;
      }
    }

    /**
     * The base implementation of `_.assign` without support for multiple sources
     * or `customizer` functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @returns {Object} Returns `object`.
     */
    function baseAssign(object, source) {
      return object && copyObject(source, keys(source), object);
    }

    /**
     * The base implementation of `_.at` without support for individual paths.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {string[]} paths The property paths of elements to pick.
     * @returns {Array} Returns the new array of picked elements.
     */
    function baseAt(object, paths) {
      var index = -1,
          isNil = object == null,
          length = paths.length,
          result = Array(length);

      while (++index < length) {
        result[index] = isNil ? undefined : get(object, paths[index]);
      }
      return result;
    }

    /**
     * The base implementation of `_.clamp` which doesn't coerce arguments to numbers.
     *
     * @private
     * @param {number} number The number to clamp.
     * @param {number} [lower] The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the clamped number.
     */
    function baseClamp(number, lower, upper) {
      if (number === number) {
        if (upper !== undefined) {
          number = number <= upper ? number : upper;
        }
        if (lower !== undefined) {
          number = number >= lower ? number : lower;
        }
      }
      return number;
    }

    /**
     * The base implementation of `_.clone` and `_.cloneDeep` which tracks
     * traversed objects.
     *
     * @private
     * @param {*} value The value to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @param {Function} [customizer] The function to customize cloning.
     * @param {string} [key] The key of `value`.
     * @param {Object} [object] The parent object of `value`.
     * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
     * @returns {*} Returns the cloned value.
     */
    function baseClone(value, isDeep, customizer, key, object, stack) {
      var result;
      if (customizer) {
        result = object ? customizer(value, key, object, stack) : customizer(value);
      }
      if (result !== undefined) {
        return result;
      }
      if (!isObject(value)) {
        return value;
      }
      var isArr = isArray(value);
      if (isArr) {
        result = initCloneArray(value);
        if (!isDeep) {
          return copyArray(value, result);
        }
      } else {
        var tag = getTag(value),
            isFunc = tag == funcTag || tag == genTag;

        if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
          if (isHostObject(value)) {
            return object ? value : {};
          }
          result = initCloneObject(isFunc ? {} : value);
          if (!isDeep) {
            return copySymbols(value, baseAssign(result, value));
          }
        } else {
          return cloneableTags[tag]
            ? initCloneByTag(value, tag, isDeep)
            : (object ? value : {});
        }
      }
      // Check for circular references and return its corresponding clone.
      stack || (stack = new Stack);
      var stacked = stack.get(value);
      if (stacked) {
        return stacked;
      }
      stack.set(value, result);

      // Recursively populate clone (susceptible to call stack limits).
      (isArr ? arrayEach : baseForOwn)(value, function(subValue, key) {
        assignValue(result, key, baseClone(subValue, isDeep, customizer, key, value, stack));
      });
      return isArr ? result : copySymbols(value, result);
    }

    /**
     * The base implementation of `_.conforms` which doesn't clone `source`.
     *
     * @private
     * @param {Object} source The object of property predicates to conform to.
     * @returns {Function} Returns the new function.
     */
    function baseConforms(source) {
      var props = keys(source),
          length = props.length;

      return function(object) {
        if (object == null) {
          return !length;
        }
        var index = length;
        while (index--) {
          var key = props[index],
              predicate = source[key],
              value = object[key];

          if ((value === undefined && !(key in Object(object))) || !predicate(value)) {
            return false;
          }
        }
        return true;
      };
    }

    /**
     * The base implementation of `_.create` without support for assigning
     * properties to the created object.
     *
     * @private
     * @param {Object} prototype The object to inherit from.
     * @returns {Object} Returns the new object.
     */
    var baseCreate = (function() {
      function object() {}
      return function(prototype) {
        if (isObject(prototype)) {
          object.prototype = prototype;
          var result = new object;
          object.prototype = undefined;
        }
        return result || {};
      };
    }());

    /**
     * The base implementation of `_.delay` and `_.defer` which accepts an array
     * of `func` arguments.
     *
     * @private
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @param {Object} args The arguments provide to `func`.
     * @returns {number} Returns the timer id.
     */
    function baseDelay(func, wait, args) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      return setTimeout(function() { func.apply(undefined, args); }, wait);
    }

    /**
     * The base implementation of methods like `_.difference` without support for
     * excluding multiple arrays or iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Array} values The values to exclude.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     */
    function baseDifference(array, values, iteratee, comparator) {
      var index = -1,
          includes = arrayIncludes,
          isCommon = true,
          length = array.length,
          result = [],
          valuesLength = values.length;

      if (!length) {
        return result;
      }
      if (iteratee) {
        values = arrayMap(values, baseUnary(iteratee));
      }
      if (comparator) {
        includes = arrayIncludesWith;
        isCommon = false;
      }
      else if (values.length >= LARGE_ARRAY_SIZE) {
        includes = cacheHas;
        isCommon = false;
        values = new SetCache(values);
      }
      outer:
      while (++index < length) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        if (isCommon && computed === computed) {
          var valuesIndex = valuesLength;
          while (valuesIndex--) {
            if (values[valuesIndex] === computed) {
              continue outer;
            }
          }
          result.push(value);
        }
        else if (!includes(values, computed, comparator)) {
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.forEach` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     */
    var baseEach = createBaseEach(baseForOwn);

    /**
     * The base implementation of `_.forEachRight` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     */
    var baseEachRight = createBaseEach(baseForOwnRight, true);

    /**
     * The base implementation of `_.every` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if all elements pass the predicate check, else `false`
     */
    function baseEvery(collection, predicate) {
      var result = true;
      baseEach(collection, function(value, index, collection) {
        result = !!predicate(value, index, collection);
        return result;
      });
      return result;
    }

    /**
     * The base implementation of `_.fill` without an iteratee call guard.
     *
     * @private
     * @param {Array} array The array to fill.
     * @param {*} value The value to fill `array` with.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns `array`.
     */
    function baseFill(array, value, start, end) {
      var length = array.length;

      start = toInteger(start);
      if (start < 0) {
        start = -start > length ? 0 : (length + start);
      }
      end = (end === undefined || end > length) ? length : toInteger(end);
      if (end < 0) {
        end += length;
      }
      end = start > end ? 0 : toLength(end);
      while (start < end) {
        array[start++] = value;
      }
      return array;
    }

    /**
     * The base implementation of `_.filter` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     */
    function baseFilter(collection, predicate) {
      var result = [];
      baseEach(collection, function(value, index, collection) {
        if (predicate(value, index, collection)) {
          result.push(value);
        }
      });
      return result;
    }

    /**
     * The base implementation of `_.flatten` with support for restricting flattening.
     *
     * @private
     * @param {Array} array The array to flatten.
     * @param {boolean} [isDeep] Specify a deep flatten.
     * @param {boolean} [isStrict] Restrict flattening to arrays-like objects.
     * @param {Array} [result=[]] The initial result value.
     * @returns {Array} Returns the new flattened array.
     */
    function baseFlatten(array, isDeep, isStrict, result) {
      result || (result = []);

      var index = -1,
          length = array.length;

      while (++index < length) {
        var value = array[index];
        if (isArrayLikeObject(value) &&
            (isStrict || isArray(value) || isArguments(value))) {
          if (isDeep) {
            // Recursively flatten arrays (susceptible to call stack limits).
            baseFlatten(value, isDeep, isStrict, result);
          } else {
            arrayPush(result, value);
          }
        } else if (!isStrict) {
          result[result.length] = value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `baseForIn` and `baseForOwn` which iterates
     * over `object` properties returned by `keysFunc` invoking `iteratee` for
     * each property. Iteratee functions may exit iteration early by explicitly
     * returning `false`.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @returns {Object} Returns `object`.
     */
    var baseFor = createBaseFor();

    /**
     * This function is like `baseFor` except that it iterates over properties
     * in the opposite order.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @returns {Object} Returns `object`.
     */
    var baseForRight = createBaseFor(true);

    /**
     * The base implementation of `_.forIn` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */
    function baseForIn(object, iteratee) {
      return object == null ? object : baseFor(object, iteratee, keysIn);
    }

    /**
     * The base implementation of `_.forOwn` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */
    function baseForOwn(object, iteratee) {
      return object && baseFor(object, iteratee, keys);
    }

    /**
     * The base implementation of `_.forOwnRight` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */
    function baseForOwnRight(object, iteratee) {
      return object && baseForRight(object, iteratee, keys);
    }

    /**
     * The base implementation of `_.functions` which creates an array of
     * `object` function property names filtered from those provided.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Array} props The property names to filter.
     * @returns {Array} Returns the new array of filtered property names.
     */
    function baseFunctions(object, props) {
      return arrayFilter(props, function(key) {
        return isFunction(object[key]);
      });
    }

    /**
     * The base implementation of `_.get` without support for default values.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to get.
     * @returns {*} Returns the resolved value.
     */
    function baseGet(object, path) {
      path = isKey(path, object) ? [path + ''] : baseToPath(path);

      var index = 0,
          length = path.length;

      while (object != null && index < length) {
        object = object[path[index++]];
      }
      return (index && index == length) ? object : undefined;
    }

    /**
     * The base implementation of `_.has` without support for deep paths.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} key The key to check.
     * @returns {boolean} Returns `true` if `key` exists, else `false`.
     */
    function baseHas(object, key) {
      // Avoid a bug in IE 10-11 where objects with a [[Prototype]] of `null`,
      // that are composed entirely of index properties, return `false` for
      // `hasOwnProperty` checks of them.
      return hasOwnProperty.call(object, key) ||
        (typeof object == 'object' && key in object && getPrototypeOf(object) === null);
    }

    /**
     * The base implementation of `_.hasIn` without support for deep paths.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} key The key to check.
     * @returns {boolean} Returns `true` if `key` exists, else `false`.
     */
    function baseHasIn(object, key) {
      return key in Object(object);
    }

    /**
     * The base implementation of `_.inRange` which doesn't coerce arguments to numbers.
     *
     * @private
     * @param {number} number The number to check.
     * @param {number} start The start of the range.
     * @param {number} end The end of the range.
     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
     */
    function baseInRange(number, start, end) {
      return number >= nativeMin(start, end) && number < nativeMax(start, end);
    }

    /**
     * The base implementation of methods like `_.intersection`, without support
     * for iteratee shorthands, that accepts an array of arrays to inspect.
     *
     * @private
     * @param {Array} arrays The arrays to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of shared values.
     */
    function baseIntersection(arrays, iteratee, comparator) {
      var includes = comparator ? arrayIncludesWith : arrayIncludes,
          othLength = arrays.length,
          othIndex = othLength,
          caches = Array(othLength),
          result = [];

      while (othIndex--) {
        var array = arrays[othIndex];
        if (othIndex && iteratee) {
          array = arrayMap(array, baseUnary(iteratee));
        }
        caches[othIndex] = !comparator && (iteratee || array.length >= 120)
          ? new SetCache(othIndex && array)
          : undefined;
      }
      array = arrays[0];

      var index = -1,
          length = array.length,
          seen = caches[0];

      outer:
      while (++index < length) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        if (!(seen ? cacheHas(seen, computed) : includes(result, computed, comparator))) {
          var othIndex = othLength;
          while (--othIndex) {
            var cache = caches[othIndex];
            if (!(cache ? cacheHas(cache, computed) : includes(arrays[othIndex], computed, comparator))) {
              continue outer;
            }
          }
          if (seen) {
            seen.push(computed);
          }
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.invoke` without support for individual
     * method arguments.
     *
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the method to invoke.
     * @param {Array} args The arguments to invoke the method with.
     * @returns {*} Returns the result of the invoked method.
     */
    function baseInvoke(object, path, args) {
      if (!isKey(path, object)) {
        path = baseToPath(path);
        object = parent(object, path);
        path = last(path);
      }
      var func = object == null ? object : object[path];
      return func == null ? undefined : apply(func, object, args);
    }

    /**
     * The base implementation of `_.isEqual` which supports partial comparisons
     * and tracks traversed objects.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {Function} [customizer] The function to customize comparisons.
     * @param {boolean} [bitmask] The bitmask of comparison flags.
     *  The bitmask may be composed of the following flags:
     *     1 - Unordered comparison
     *     2 - Partial comparison
     * @param {Object} [stack] Tracks traversed `value` and `other` objects.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     */
    function baseIsEqual(value, other, customizer, bitmask, stack) {
      if (value === other) {
        return true;
      }
      if (value == null || other == null || (!isObject(value) && !isObjectLike(other))) {
        return value !== value && other !== other;
      }
      return baseIsEqualDeep(value, other, baseIsEqual, customizer, bitmask, stack);
    }

    /**
     * A specialized version of `baseIsEqual` for arrays and objects which performs
     * deep comparisons and tracks traversed objects enabling objects with circular
     * references to be compared.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Function} [customizer] The function to customize comparisons.
     * @param {number} [bitmask] The bitmask of comparison flags. See `baseIsEqual` for more details.
     * @param {Object} [stack] Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function baseIsEqualDeep(object, other, equalFunc, customizer, bitmask, stack) {
      var objIsArr = isArray(object),
          othIsArr = isArray(other),
          objTag = arrayTag,
          othTag = arrayTag;

      if (!objIsArr) {
        objTag = getTag(object);
        if (objTag == argsTag) {
          objTag = objectTag;
        } else if (objTag != objectTag) {
          objIsArr = isTypedArray(object);
        }
      }
      if (!othIsArr) {
        othTag = getTag(other);
        if (othTag == argsTag) {
          othTag = objectTag;
        } else if (othTag != objectTag) {
          othIsArr = isTypedArray(other);
        }
      }
      var objIsObj = objTag == objectTag && !isHostObject(object),
          othIsObj = othTag == objectTag && !isHostObject(other),
          isSameTag = objTag == othTag;

      if (isSameTag && !(objIsArr || objIsObj)) {
        return equalByTag(object, other, objTag, equalFunc, customizer, bitmask);
      }
      var isPartial = bitmask & PARTIAL_COMPARE_FLAG;
      if (!isPartial) {
        var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
            othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

        if (objIsWrapped || othIsWrapped) {
          return equalFunc(objIsWrapped ? object.value() : object, othIsWrapped ? other.value() : other, customizer, bitmask, stack);
        }
      }
      if (!isSameTag) {
        return false;
      }
      stack || (stack = new Stack);
      return (objIsArr ? equalArrays : equalObjects)(object, other, equalFunc, customizer, bitmask, stack);
    }

    /**
     * The base implementation of `_.isMatch` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @param {Array} matchData The property names, values, and compare flags to match.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     */
    function baseIsMatch(object, source, matchData, customizer) {
      var index = matchData.length,
          length = index,
          noCustomizer = !customizer;

      if (object == null) {
        return !length;
      }
      object = Object(object);
      while (index--) {
        var data = matchData[index];
        if ((noCustomizer && data[2])
              ? data[1] !== object[data[0]]
              : !(data[0] in object)
            ) {
          return false;
        }
      }
      while (++index < length) {
        data = matchData[index];
        var key = data[0],
            objValue = object[key],
            srcValue = data[1];

        if (noCustomizer && data[2]) {
          if (objValue === undefined && !(key in object)) {
            return false;
          }
        } else {
          var stack = new Stack,
              result = customizer ? customizer(objValue, srcValue, key, object, source, stack) : undefined;

          if (!(result === undefined ? baseIsEqual(srcValue, objValue, customizer, UNORDERED_COMPARE_FLAG | PARTIAL_COMPARE_FLAG, stack) : result)) {
            return false;
          }
        }
      }
      return true;
    }

    /**
     * The base implementation of `_.iteratee`.
     *
     * @private
     * @param {*} [value=_.identity] The value to convert to an iteratee.
     * @returns {Function} Returns the iteratee.
     */
    function baseIteratee(value) {
      var type = typeof value;
      if (type == 'function') {
        return value;
      }
      if (value == null) {
        return identity;
      }
      if (type == 'object') {
        return isArray(value)
          ? baseMatchesProperty(value[0], value[1])
          : baseMatches(value);
      }
      return property(value);
    }

    /**
     * The base implementation of `_.keys` which doesn't skip the constructor
     * property of prototypes or treat sparse arrays as dense.
     *
     * @private
     * @type Function
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function baseKeys(object) {
      return nativeKeys(Object(object));
    }

    /**
     * The base implementation of `_.keysIn` which doesn't skip the constructor
     * property of prototypes or treat sparse arrays as dense.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function baseKeysIn(object) {
      object = object == null ? object : Object(object);

      var result = [];
      for (var key in object) {
        result.push(key);
      }
      return result;
    }

    // Fallback for IE < 9 with es6-shim.
    if (enumerate && !propertyIsEnumerable.call({ 'valueOf': 1 }, 'valueOf')) {
      baseKeysIn = function(object) {
        return iteratorToArray(enumerate(object));
      };
    }

    /**
     * The base implementation of `_.map` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     */
    function baseMap(collection, iteratee) {
      var index = -1,
          result = isArrayLike(collection) ? Array(collection.length) : [];

      baseEach(collection, function(value, key, collection) {
        result[++index] = iteratee(value, key, collection);
      });
      return result;
    }

    /**
     * The base implementation of `_.matches` which doesn't clone `source`.
     *
     * @private
     * @param {Object} source The object of property values to match.
     * @returns {Function} Returns the new function.
     */
    function baseMatches(source) {
      var matchData = getMatchData(source);
      if (matchData.length == 1 && matchData[0][2]) {
        var key = matchData[0][0],
            value = matchData[0][1];

        return function(object) {
          if (object == null) {
            return false;
          }
          return object[key] === value &&
            (value !== undefined || (key in Object(object)));
        };
      }
      return function(object) {
        return object === source || baseIsMatch(object, source, matchData);
      };
    }

    /**
     * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
     *
     * @private
     * @param {string} path The path of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new function.
     */
    function baseMatchesProperty(path, srcValue) {
      return function(object) {
        var objValue = get(object, path);
        return (objValue === undefined && objValue === srcValue)
          ? hasIn(object, path)
          : baseIsEqual(srcValue, objValue, undefined, UNORDERED_COMPARE_FLAG | PARTIAL_COMPARE_FLAG);
      };
    }

    /**
     * The base implementation of `_.merge` without support for multiple sources.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {Function} [customizer] The function to customize merged values.
     * @param {Object} [stack] Tracks traversed source values and their merged counterparts.
     */
    function baseMerge(object, source, customizer, stack) {
      if (object === source) {
        return;
      }
      var props = (isArray(source) || isTypedArray(source)) ? undefined : keysIn(source);
      arrayEach(props || source, function(srcValue, key) {
        if (props) {
          key = srcValue;
          srcValue = source[key];
        }
        if (isObject(srcValue)) {
          stack || (stack = new Stack);
          baseMergeDeep(object, source, key, baseMerge, customizer, stack);
        }
        else {
          var newValue = customizer ? customizer(object[key], srcValue, (key + ''), object, source, stack) : undefined;
          if (newValue === undefined) {
            newValue = srcValue;
          }
          assignMergeValue(object, key, newValue);
        }
      });
    }

    /**
     * A specialized version of `baseMerge` for arrays and objects which performs
     * deep merges and tracks traversed objects enabling objects with circular
     * references to be merged.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {string} key The key of the value to merge.
     * @param {Function} mergeFunc The function to merge values.
     * @param {Function} [customizer] The function to customize assigned values.
     * @param {Object} [stack] Tracks traversed source values and their merged counterparts.
     */
    function baseMergeDeep(object, source, key, mergeFunc, customizer, stack) {
      var objValue = object[key],
          srcValue = source[key],
          stacked = stack.get(srcValue) || stack.get(objValue);

      if (stacked) {
        assignMergeValue(object, key, stacked);
        return;
      }
      var newValue = customizer ? customizer(objValue, srcValue, (key + ''), object, source, stack) : undefined,
          isCommon = newValue === undefined;

      if (isCommon) {
        newValue = srcValue;
        if (isArray(srcValue) || isTypedArray(srcValue)) {
          newValue = isArray(objValue)
            ? objValue
            : ((isArrayLikeObject(objValue)) ? copyArray(objValue) : baseClone(srcValue));
        }
        else if (isPlainObject(srcValue) || isArguments(srcValue)) {
          newValue = isArguments(objValue)
            ? toPlainObject(objValue)
            : (isObject(objValue) ? objValue : baseClone(srcValue));
        }
        else {
          isCommon = isFunction(srcValue);
        }
      }
      stack.set(srcValue, newValue);

      if (isCommon) {
        // Recursively merge objects and arrays (susceptible to call stack limits).
        mergeFunc(newValue, srcValue, customizer, stack);
      }
      assignMergeValue(object, key, newValue);
    }

    /**
     * The base implementation of `_.orderBy` without param guards.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
     * @param {string[]} orders The sort orders of `iteratees`.
     * @returns {Array} Returns the new sorted array.
     */
    function baseOrderBy(collection, iteratees, orders) {
      var index = -1,
          toIteratee = getIteratee();

      iteratees = arrayMap(iteratees.length ? iteratees : Array(1), function(iteratee) {
        return toIteratee(iteratee);
      });

      var result = baseMap(collection, function(value, key, collection) {
        var criteria = arrayMap(iteratees, function(iteratee) {
          return iteratee(value);
        });
        return { 'criteria': criteria, 'index': ++index, 'value': value };
      });

      return baseSortBy(result, function(object, other) {
        return compareMultiple(object, other, orders);
      });
    }

    /**
     * The base implementation of `_.pick` without support for individual
     * property names.
     *
     * @private
     * @param {Object} object The source object.
     * @param {string[]} props The property names to pick.
     * @returns {Object} Returns the new object.
     */
    function basePick(object, props) {
      object = Object(object);
      return arrayReduce(props, function(result, key) {
        if (key in object) {
          result[key] = object[key];
        }
        return result;
      }, {});
    }

    /**
     * The base implementation of  `_.pickBy` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The source object.
     * @param {Function} predicate The function invoked per property.
     * @returns {Object} Returns the new object.
     */
    function basePickBy(object, predicate) {
      var result = {};
      baseForIn(object, function(value, key) {
        if (predicate(value)) {
          result[key] = value;
        }
      });
      return result;
    }

    /**
     * The base implementation of `_.property` without support for deep paths.
     *
     * @private
     * @param {string} key The key of the property to get.
     * @returns {Function} Returns the new function.
     */
    function baseProperty(key) {
      return function(object) {
        return object == null ? undefined : object[key];
      };
    }

    /**
     * A specialized version of `baseProperty` which supports deep paths.
     *
     * @private
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new function.
     */
    function basePropertyDeep(path) {
      return function(object) {
        return baseGet(object, path);
      };
    }

    /**
     * The base implementation of `_.pullAll`.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @returns {Array} Returns `array`.
     */
    function basePullAll(array, values) {
      return basePullAllBy(array, values);
    }

    /**
     * The base implementation of `_.pullAllBy` without support for iteratee
     * shorthands.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @returns {Array} Returns `array`.
     */
    function basePullAllBy(array, values, iteratee) {
      var index = -1,
          length = values.length,
          seen = array;

      if (iteratee) {
        seen = arrayMap(array, function(value) { return iteratee(value); });
      }
      while (++index < length) {
        var fromIndex = 0,
            value = values[index],
            computed = iteratee ? iteratee(value) : value;

        while ((fromIndex = baseIndexOf(seen, computed, fromIndex)) > -1) {
          if (seen !== array) {
            splice.call(seen, fromIndex, 1);
          }
          splice.call(array, fromIndex, 1);
        }
      }
      return array;
    }

    /**
     * The base implementation of `_.pullAt` without support for individual
     * indexes or capturing the removed elements.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {number[]} indexes The indexes of elements to remove.
     * @returns {Array} Returns `array`.
     */
    function basePullAt(array, indexes) {
      var length = array ? indexes.length : 0,
          lastIndex = length - 1;

      while (length--) {
        var index = indexes[length];
        if (lastIndex == length || index != previous) {
          var previous = index;
          if (isIndex(index)) {
            splice.call(array, index, 1);
          }
          else if (!isKey(index, array)) {
            var path = baseToPath(index),
                object = parent(array, path);

            if (object != null) {
              delete object[last(path)];
            }
          }
          else {
            delete array[index];
          }
        }
      }
      return array;
    }

    /**
     * The base implementation of `_.random` without support for returning
     * floating-point numbers.
     *
     * @private
     * @param {number} lower The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the random number.
     */
    function baseRandom(lower, upper) {
      return lower + nativeFloor(nativeRandom() * (upper - lower + 1));
    }

    /**
     * The base implementation of `_.range` and `_.rangeRight` which doesn't
     * coerce arguments to numbers.
     *
     * @private
     * @param {number} start The start of the range.
     * @param {number} end The end of the range.
     * @param {number} step The value to increment or decrement by.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Array} Returns the new array of numbers.
     */
    function baseRange(start, end, step, fromRight) {
      var index = -1,
          length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),
          result = Array(length);

      while (length--) {
        result[fromRight ? length : ++index] = start;
        start += step;
      }
      return result;
    }

    /**
     * The base implementation of `_.set`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @param {Function} [customizer] The function to customize path creation.
     * @returns {Object} Returns `object`.
     */
    function baseSet(object, path, value, customizer) {
      path = isKey(path, object) ? [path + ''] : baseToPath(path);

      var index = -1,
          length = path.length,
          lastIndex = length - 1,
          nested = object;

      while (nested != null && ++index < length) {
        var key = path[index];
        if (isObject(nested)) {
          var newValue = value;
          if (index != lastIndex) {
            var objValue = nested[key];
            newValue = customizer ? customizer(objValue, key, nested) : undefined;
            if (newValue === undefined) {
              newValue = objValue == null ? (isIndex(path[index + 1]) ? [] : {}) : objValue;
            }
          }
          assignValue(nested, key, newValue);
        }
        nested = nested[key];
      }
      return object;
    }

    /**
     * The base implementation of `setData` without support for hot loop detection.
     *
     * @private
     * @param {Function} func The function to associate metadata with.
     * @param {*} data The metadata.
     * @returns {Function} Returns `func`.
     */
    var baseSetData = !metaMap ? identity : function(func, data) {
      metaMap.set(func, data);
      return func;
    };

    /**
     * The base implementation of `_.slice` without an iteratee call guard.
     *
     * @private
     * @param {Array} array The array to slice.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the slice of `array`.
     */
    function baseSlice(array, start, end) {
      var index = -1,
          length = array.length;

      if (start < 0) {
        start = -start > length ? 0 : (length + start);
      }
      end = end > length ? length : end;
      if (end < 0) {
        end += length;
      }
      length = start > end ? 0 : ((end - start) >>> 0);
      start >>>= 0;

      var result = Array(length);
      while (++index < length) {
        result[index] = array[index + start];
      }
      return result;
    }

    /**
     * The base implementation of `_.some` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if any element passes the predicate check, else `false`.
     */
    function baseSome(collection, predicate) {
      var result;

      baseEach(collection, function(value, index, collection) {
        result = predicate(value, index, collection);
        return !result;
      });
      return !!result;
    }

    /**
     * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which
     * performs a binary search of `array` to determine the index at which `value`
     * should be inserted into `array` in order to maintain its sort order.
     *
     * @private
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {boolean} [retHighest] Specify returning the highest qualified index.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     */
    function baseSortedIndex(array, value, retHighest) {
      var low = 0,
          high = array ? array.length : low;

      if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
        while (low < high) {
          var mid = (low + high) >>> 1,
              computed = array[mid];

          if ((retHighest ? (computed <= value) : (computed < value)) && computed !== null) {
            low = mid + 1;
          } else {
            high = mid;
          }
        }
        return high;
      }
      return baseSortedIndexBy(array, value, identity, retHighest);
    }

    /**
     * The base implementation of `_.sortedIndexBy` and `_.sortedLastIndexBy`
     * which invokes `iteratee` for `value` and each element of `array` to compute
     * their sort ranking. The iteratee is invoked with one argument; (value).
     *
     * @private
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} iteratee The iteratee invoked per element.
     * @param {boolean} [retHighest] Specify returning the highest qualified index.
     * @returns {number} Returns the index at which `value` should be inserted into `array`.
     */
    function baseSortedIndexBy(array, value, iteratee, retHighest) {
      value = iteratee(value);

      var low = 0,
          high = array ? array.length : 0,
          valIsNaN = value !== value,
          valIsNull = value === null,
          valIsUndef = value === undefined;

      while (low < high) {
        var mid = nativeFloor((low + high) / 2),
            computed = iteratee(array[mid]),
            isDef = computed !== undefined,
            isReflexive = computed === computed;

        if (valIsNaN) {
          var setLow = isReflexive || retHighest;
        } else if (valIsNull) {
          setLow = isReflexive && isDef && (retHighest || computed != null);
        } else if (valIsUndef) {
          setLow = isReflexive && (retHighest || isDef);
        } else if (computed == null) {
          setLow = false;
        } else {
          setLow = retHighest ? (computed <= value) : (computed < value);
        }
        if (setLow) {
          low = mid + 1;
        } else {
          high = mid;
        }
      }
      return nativeMin(high, MAX_ARRAY_INDEX);
    }

    /**
     * The base implementation of `_.sortedUniq`.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @returns {Array} Returns the new duplicate free array.
     */
    function baseSortedUniq(array) {
      return baseSortedUniqBy(array);
    }

    /**
     * The base implementation of `_.sortedUniqBy` without support for iteratee
     * shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     */
    function baseSortedUniqBy(array, iteratee) {
      var index = 0,
          length = array.length,
          value = array[0],
          computed = iteratee ? iteratee(value) : value,
          seen = computed,
          resIndex = 0,
          result = [value];

      while (++index < length) {
        value = array[index],
        computed = iteratee ? iteratee(value) : value;

        if (!eq(computed, seen)) {
          seen = computed;
          result[++resIndex] = value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.toPath` which only converts `value` to a
     * path if it's not one.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {Array} Returns the property path array.
     */
    function baseToPath(value) {
      return isArray(value) ? value : stringToPath(value);
    }

    /**
     * The base implementation of `_.uniqBy` without support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     */
    function baseUniq(array, iteratee, comparator) {
      var index = -1,
          includes = arrayIncludes,
          length = array.length,
          isCommon = true,
          result = [],
          seen = result;

      if (comparator) {
        isCommon = false;
        includes = arrayIncludesWith;
      }
      else if (length >= LARGE_ARRAY_SIZE) {
        var set = iteratee ? null : createSet(array);
        if (set) {
          return setToArray(set);
        }
        isCommon = false;
        includes = cacheHas;
        seen = new SetCache;
      }
      else {
        seen = iteratee ? [] : result;
      }
      outer:
      while (++index < length) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        if (isCommon && computed === computed) {
          var seenIndex = seen.length;
          while (seenIndex--) {
            if (seen[seenIndex] === computed) {
              continue outer;
            }
          }
          if (iteratee) {
            seen.push(computed);
          }
          result.push(value);
        }
        else if (!includes(seen, computed, comparator)) {
          if (seen !== result) {
            seen.push(computed);
          }
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.unset`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to unset.
     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
     */
    function baseUnset(object, path) {
      path = isKey(path, object) ? [path + ''] : baseToPath(path);
      object = parent(object, path);
      var key = last(path);
      return (object != null && has(object, key)) ? delete object[key] : true;
    }

    /**
     * The base implementation of methods like `_.dropWhile` and `_.takeWhile`
     * without support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to query.
     * @param {Function} predicate The function invoked per iteration.
     * @param {boolean} [isDrop] Specify dropping elements instead of taking them.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Array} Returns the slice of `array`.
     */
    function baseWhile(array, predicate, isDrop, fromRight) {
      var length = array.length,
          index = fromRight ? length : -1;

      while ((fromRight ? index-- : ++index < length) &&
        predicate(array[index], index, array)) {}

      return isDrop
        ? baseSlice(array, (fromRight ? 0 : index), (fromRight ? index + 1 : length))
        : baseSlice(array, (fromRight ? index + 1 : 0), (fromRight ? length : index));
    }

    /**
     * The base implementation of `wrapperValue` which returns the result of
     * performing a sequence of actions on the unwrapped `value`, where each
     * successive action is supplied the return value of the previous.
     *
     * @private
     * @param {*} value The unwrapped value.
     * @param {Array} actions Actions to perform to resolve the unwrapped value.
     * @returns {*} Returns the resolved value.
     */
    function baseWrapperValue(value, actions) {
      var result = value;
      if (result instanceof LazyWrapper) {
        result = result.value();
      }
      return arrayReduce(actions, function(result, action) {
        return action.func.apply(action.thisArg, arrayPush([result], action.args));
      }, result);
    }

    /**
     * The base implementation of methods like `_.xor`, without support for
     * iteratee shorthands, that accepts an array of arrays to inspect.
     *
     * @private
     * @param {Array} arrays The arrays to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of values.
     */
    function baseXor(arrays, iteratee, comparator) {
      var index = -1,
          length = arrays.length;

      while (++index < length) {
        var result = result
          ? arrayPush(
              baseDifference(result, arrays[index], iteratee, comparator),
              baseDifference(arrays[index], result, iteratee, comparator)
            )
          : arrays[index];
      }
      return (result && result.length) ? baseUniq(result, iteratee, comparator) : [];
    }

    /**
     * Creates a clone of `buffer`.
     *
     * @private
     * @param {ArrayBuffer} buffer The array buffer to clone.
     * @returns {ArrayBuffer} Returns the cloned array buffer.
     */
    function cloneBuffer(buffer) {
      var Ctor = buffer.constructor,
          result = new Ctor(buffer.byteLength),
          view = new Uint8Array(result);

      view.set(new Uint8Array(buffer));
      return result;
    }

    /**
     * Creates a clone of `map`.
     *
     * @private
     * @param {Object} map The map to clone.
     * @returns {Object} Returns the cloned map.
     */
    function cloneMap(map) {
      var Ctor = map.constructor;
      return arrayReduce(mapToArray(map), addMapEntry, new Ctor);
    }

    /**
     * Creates a clone of `regexp`.
     *
     * @private
     * @param {Object} regexp The regexp to clone.
     * @returns {Object} Returns the cloned regexp.
     */
    function cloneRegExp(regexp) {
      var Ctor = regexp.constructor,
          result = new Ctor(regexp.source, reFlags.exec(regexp));

      result.lastIndex = regexp.lastIndex;
      return result;
    }

    /**
     * Creates a clone of `set`.
     *
     * @private
     * @param {Object} set The set to clone.
     * @returns {Object} Returns the cloned set.
     */
    function cloneSet(set) {
      var Ctor = set.constructor;
      return arrayReduce(setToArray(set), addSetEntry, new Ctor);
    }

    /**
     * Creates a clone of the `symbol` object.
     *
     * @private
     * @param {Object} symbol The symbol object to clone.
     * @returns {Object} Returns the cloned symbol object.
     */
    function cloneSymbol(symbol) {
      return _Symbol ? Object(symbolValueOf.call(symbol)) : {};
    }

    /**
     * Creates a clone of `typedArray`.
     *
     * @private
     * @param {Object} typedArray The typed array to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned typed array.
     */
    function cloneTypedArray(typedArray, isDeep) {
      var buffer = typedArray.buffer,
          Ctor = typedArray.constructor;

      return new Ctor(isDeep ? cloneBuffer(buffer) : buffer, typedArray.byteOffset, typedArray.length);
    }

    /**
     * Creates an array that is the composition of partially applied arguments,
     * placeholders, and provided arguments into a single array of arguments.
     *
     * @private
     * @param {Array|Object} args The provided arguments.
     * @param {Array} partials The arguments to prepend to those provided.
     * @param {Array} holders The `partials` placeholder indexes.
     * @returns {Array} Returns the new array of composed arguments.
     */
    function composeArgs(args, partials, holders) {
      var holdersLength = holders.length,
          argsIndex = -1,
          argsLength = nativeMax(args.length - holdersLength, 0),
          leftIndex = -1,
          leftLength = partials.length,
          result = Array(leftLength + argsLength);

      while (++leftIndex < leftLength) {
        result[leftIndex] = partials[leftIndex];
      }
      while (++argsIndex < holdersLength) {
        result[holders[argsIndex]] = args[argsIndex];
      }
      while (argsLength--) {
        result[leftIndex++] = args[argsIndex++];
      }
      return result;
    }

    /**
     * This function is like `composeArgs` except that the arguments composition
     * is tailored for `_.partialRight`.
     *
     * @private
     * @param {Array|Object} args The provided arguments.
     * @param {Array} partials The arguments to append to those provided.
     * @param {Array} holders The `partials` placeholder indexes.
     * @returns {Array} Returns the new array of composed arguments.
     */
    function composeArgsRight(args, partials, holders) {
      var holdersIndex = -1,
          holdersLength = holders.length,
          argsIndex = -1,
          argsLength = nativeMax(args.length - holdersLength, 0),
          rightIndex = -1,
          rightLength = partials.length,
          result = Array(argsLength + rightLength);

      while (++argsIndex < argsLength) {
        result[argsIndex] = args[argsIndex];
      }
      var offset = argsIndex;
      while (++rightIndex < rightLength) {
        result[offset + rightIndex] = partials[rightIndex];
      }
      while (++holdersIndex < holdersLength) {
        result[offset + holders[holdersIndex]] = args[argsIndex++];
      }
      return result;
    }

    /**
     * Copies the values of `source` to `array`.
     *
     * @private
     * @param {Array} source The array to copy values from.
     * @param {Array} [array=[]] The array to copy values to.
     * @returns {Array} Returns `array`.
     */
    function copyArray(source, array) {
      var index = -1,
          length = source.length;

      array || (array = Array(length));
      while (++index < length) {
        array[index] = source[index];
      }
      return array;
    }

    /**
     * Copies properties of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy properties from.
     * @param {Array} props The property names to copy.
     * @param {Object} [object={}] The object to copy properties to.
     * @returns {Object} Returns `object`.
     */
    function copyObject(source, props, object) {
      return copyObjectWith(source, props, object);
    }

    /**
     * This function is like `copyObject` except that it accepts a function to
     * customize copied values.
     *
     * @private
     * @param {Object} source The object to copy properties from.
     * @param {Array} props The property names to copy.
     * @param {Object} [object={}] The object to copy properties to.
     * @param {Function} [customizer] The function to customize copied values.
     * @returns {Object} Returns `object`.
     */
    function copyObjectWith(source, props, object, customizer) {
      object || (object = {});

      var index = -1,
          length = props.length;

      while (++index < length) {
        var key = props[index],
            newValue = customizer ? customizer(object[key], source[key], key, object, source) : source[key];

        assignValue(object, key, newValue);
      }
      return object;
    }

    /**
     * Copies own symbol properties of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy symbols from.
     * @param {Object} [object={}] The object to copy symbols to.
     * @returns {Object} Returns `object`.
     */
    function copySymbols(source, object) {
      return copyObject(source, getSymbols(source), object);
    }

    /**
     * Creates a function like `_.groupBy`.
     *
     * @private
     * @param {Function} setter The function to set keys and values of the accumulator object.
     * @param {Function} [initializer] The function to initialize the accumulator object.
     * @returns {Function} Returns the new aggregator function.
     */
    function createAggregator(setter, initializer) {
      return function(collection, iteratee) {
        var result = initializer ? initializer() : {};
        iteratee = getIteratee(iteratee);

        if (isArray(collection)) {
          var index = -1,
              length = collection.length;

          while (++index < length) {
            var value = collection[index];
            setter(result, value, iteratee(value), collection);
          }
        } else {
          baseEach(collection, function(value, key, collection) {
            setter(result, value, iteratee(value), collection);
          });
        }
        return result;
      };
    }

    /**
     * Creates a function like `_.assign`.
     *
     * @private
     * @param {Function} assigner The function to assign values.
     * @returns {Function} Returns the new assigner function.
     */
    function createAssigner(assigner) {
      return rest(function(object, sources) {
        var index = -1,
            length = sources.length,
            customizer = length > 1 ? sources[length - 1] : undefined,
            guard = length > 2 ? sources[2] : undefined;

        customizer = typeof customizer == 'function' ? (length--, customizer) : undefined;
        if (guard && isIterateeCall(sources[0], sources[1], guard)) {
          customizer = length < 3 ? undefined : customizer;
          length = 1;
        }
        object = Object(object);
        while (++index < length) {
          var source = sources[index];
          if (source) {
            assigner(object, source, customizer);
          }
        }
        return object;
      });
    }

    /**
     * Creates a `baseEach` or `baseEachRight` function.
     *
     * @private
     * @param {Function} eachFunc The function to iterate over a collection.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */
    function createBaseEach(eachFunc, fromRight) {
      return function(collection, iteratee) {
        if (collection == null) {
          return collection;
        }
        if (!isArrayLike(collection)) {
          return eachFunc(collection, iteratee);
        }
        var length = collection.length,
            index = fromRight ? length : -1,
            iterable = Object(collection);

        while ((fromRight ? index-- : ++index < length)) {
          if (iteratee(iterable[index], index, iterable) === false) {
            break;
          }
        }
        return collection;
      };
    }

    /**
     * Creates a base function for methods like `_.forIn`.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */
    function createBaseFor(fromRight) {
      return function(object, iteratee, keysFunc) {
        var index = -1,
            iterable = Object(object),
            props = keysFunc(object),
            length = props.length;

        while (length--) {
          var key = props[fromRight ? length : ++index];
          if (iteratee(iterable[key], key, iterable) === false) {
            break;
          }
        }
        return object;
      };
    }

    /**
     * Creates a function that wraps `func` to invoke it with the optional `this`
     * binding of `thisArg`.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask of wrapper flags. See `createWrapper` for more details.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createBaseWrapper(func, bitmask, thisArg) {
      var isBind = bitmask & BIND_FLAG,
          Ctor = createCtorWrapper(func);

      function wrapper() {
        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
        return fn.apply(isBind ? thisArg : this, arguments);
      }
      return wrapper;
    }

    /**
     * Creates a function like `_.lowerFirst`.
     *
     * @private
     * @param {string} methodName The name of the `String` case method to use.
     * @returns {Function} Returns the new function.
     */
    function createCaseFirst(methodName) {
      return function(string) {
        string = toString(string);

        var strSymbols = reHasComplexSymbol.test(string) ? stringToArray(string) : undefined,
            chr = strSymbols ? strSymbols[0] : string.charAt(0),
            trailing = strSymbols ? strSymbols.slice(1).join('') : string.slice(1);

        return chr[methodName]() + trailing;
      };
    }

    /**
     * Creates a function like `_.camelCase`.
     *
     * @private
     * @param {Function} callback The function to combine each word.
     * @returns {Function} Returns the new compounder function.
     */
    function createCompounder(callback) {
      return function(string) {
        return arrayReduce(words(deburr(string)), callback, '');
      };
    }

    /**
     * Creates a function that produces an instance of `Ctor` regardless of
     * whether it was invoked as part of a `new` expression or by `call` or `apply`.
     *
     * @private
     * @param {Function} Ctor The constructor to wrap.
     * @returns {Function} Returns the new wrapped function.
     */
    function createCtorWrapper(Ctor) {
      return function() {
        // Use a `switch` statement to work with class constructors.
        // See http://ecma-international.org/ecma-262/6.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist
        // for more details.
        var args = arguments;
        switch (args.length) {
          case 0: return new Ctor;
          case 1: return new Ctor(args[0]);
          case 2: return new Ctor(args[0], args[1]);
          case 3: return new Ctor(args[0], args[1], args[2]);
          case 4: return new Ctor(args[0], args[1], args[2], args[3]);
          case 5: return new Ctor(args[0], args[1], args[2], args[3], args[4]);
          case 6: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
          case 7: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
        }
        var thisBinding = baseCreate(Ctor.prototype),
            result = Ctor.apply(thisBinding, args);

        // Mimic the constructor's `return` behavior.
        // See https://es5.github.io/#x13.2.2 for more details.
        return isObject(result) ? result : thisBinding;
      };
    }

    /**
     * Creates a function that wraps `func` to enable currying.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask of wrapper flags. See `createWrapper` for more details.
     * @param {number} arity The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createCurryWrapper(func, bitmask, arity) {
      var Ctor = createCtorWrapper(func);

      function wrapper() {
        var length = arguments.length,
            index = length,
            args = Array(length),
            fn = (this && this !== root && this instanceof wrapper) ? Ctor : func,
            placeholder = wrapper.placeholder;

        while (index--) {
          args[index] = arguments[index];
        }
        var holders = (length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder)
          ? []
          : replaceHolders(args, placeholder);

        length -= holders.length;
        return length < arity
          ? createRecurryWrapper(func, bitmask, createHybridWrapper, placeholder, undefined, args, holders, undefined, undefined, arity - length)
          : apply(fn, this, args);
      }
      return wrapper;
    }

    /**
     * Creates a `_.flow` or `_.flowRight` function.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new flow function.
     */
    function createFlow(fromRight) {
      return rest(function(funcs) {
        funcs = baseFlatten(funcs);

        var length = funcs.length,
            index = length,
            prereq = LodashWrapper.prototype.thru;

        if (fromRight) {
          funcs.reverse();
        }
        while (index--) {
          var func = funcs[index];
          if (typeof func != 'function') {
            throw new TypeError(FUNC_ERROR_TEXT);
          }
          if (prereq && !wrapper && getFuncName(func) == 'wrapper') {
            var wrapper = new LodashWrapper([], true);
          }
        }
        index = wrapper ? index : length;
        while (++index < length) {
          func = funcs[index];

          var funcName = getFuncName(func),
              data = funcName == 'wrapper' ? getData(func) : undefined;

          if (data && isLaziable(data[0]) && data[1] == (ARY_FLAG | CURRY_FLAG | PARTIAL_FLAG | REARG_FLAG) && !data[4].length && data[9] == 1) {
            wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
          } else {
            wrapper = (func.length == 1 && isLaziable(func)) ? wrapper[funcName]() : wrapper.thru(func);
          }
        }
        return function() {
          var args = arguments,
              value = args[0];

          if (wrapper && args.length == 1 && isArray(value) && value.length >= LARGE_ARRAY_SIZE) {
            return wrapper.plant(value).value();
          }
          var index = 0,
              result = length ? funcs[index].apply(this, args) : value;

          while (++index < length) {
            result = funcs[index].call(this, result);
          }
          return result;
        };
      });
    }

    /**
     * Creates a function that wraps `func` to invoke it with optional `this`
     * binding of `thisArg`, partial application, and currying.
     *
     * @private
     * @param {Function|string} func The function or method name to wrap.
     * @param {number} bitmask The bitmask of wrapper flags. See `createWrapper` for more details.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to prepend to those provided to the new function.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [partialsRight] The arguments to append to those provided to the new function.
     * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createHybridWrapper(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
      var isAry = bitmask & ARY_FLAG,
          isBind = bitmask & BIND_FLAG,
          isBindKey = bitmask & BIND_KEY_FLAG,
          isCurry = bitmask & CURRY_FLAG,
          isCurryRight = bitmask & CURRY_RIGHT_FLAG,
          isFlip = bitmask & FLIP_FLAG,
          Ctor = isBindKey ? undefined : createCtorWrapper(func);

      function wrapper() {
        var length = arguments.length,
            index = length,
            args = Array(length);

        while (index--) {
          args[index] = arguments[index];
        }
        if (partials) {
          args = composeArgs(args, partials, holders);
        }
        if (partialsRight) {
          args = composeArgsRight(args, partialsRight, holdersRight);
        }
        if (isCurry || isCurryRight) {
          var placeholder = wrapper.placeholder,
              argsHolders = replaceHolders(args, placeholder);

          length -= argsHolders.length;
          if (length < arity) {
            return createRecurryWrapper(func, bitmask, createHybridWrapper, placeholder, thisArg, args, argsHolders, argPos, ary, arity - length);
          }
        }
        var thisBinding = isBind ? thisArg : this,
            fn = isBindKey ? thisBinding[func] : func;

        if (argPos) {
          args = reorder(args, argPos);
        } else if (isFlip && args.length > 1) {
          args.reverse();
        }
        if (isAry && ary < args.length) {
          args.length = ary;
        }
        if (this && this !== root && this instanceof wrapper) {
          fn = Ctor || createCtorWrapper(fn);
        }
        return fn.apply(thisBinding, args);
      }
      return wrapper;
    }

    /**
     * Creates a function like `_.over`.
     *
     * @private
     * @param {Function} arrayFunc The function to iterate over iteratees.
     * @returns {Function} Returns the new invoker function.
     */
    function createOver(arrayFunc) {
      return rest(function(iteratees) {
        iteratees = arrayMap(baseFlatten(iteratees), getIteratee());
        return rest(function(args) {
          var thisArg = this;
          return arrayFunc(iteratees, function(iteratee) {
            return apply(iteratee, thisArg, args);
          });
        });
      });
    }

    /**
     * Creates the padding for `string` based on `length`. The `chars` string
     * is truncated if the number of characters exceeds `length`.
     *
     * @private
     * @param {string} string The string to create padding for.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padding for `string`.
     */
    function createPadding(string, length, chars) {
      length = toInteger(length);

      var strLength = stringSize(string);
      if (!length || strLength >= length) {
        return '';
      }
      var padLength = length - strLength;
      chars = chars === undefined ? ' ' : (chars + '');

      var result = repeat(chars, nativeCeil(padLength / stringSize(chars)));
      return reHasComplexSymbol.test(chars)
        ? stringToArray(result).slice(0, padLength).join('')
        : result.slice(0, padLength);
    }

    /**
     * Creates a function that wraps `func` to invoke it with the optional `this`
     * binding of `thisArg` and the `partials` prepended to those provided to
     * the wrapper.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask of wrapper flags. See `createWrapper` for more details.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {Array} partials The arguments to prepend to those provided to the new function.
     * @returns {Function} Returns the new wrapped function.
     */
    function createPartialWrapper(func, bitmask, thisArg, partials) {
      var isBind = bitmask & BIND_FLAG,
          Ctor = createCtorWrapper(func);

      function wrapper() {
        var argsIndex = -1,
            argsLength = arguments.length,
            leftIndex = -1,
            leftLength = partials.length,
            args = Array(leftLength + argsLength),
            fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;

        while (++leftIndex < leftLength) {
          args[leftIndex] = partials[leftIndex];
        }
        while (argsLength--) {
          args[leftIndex++] = arguments[++argsIndex];
        }
        return apply(fn, isBind ? thisArg : this, args);
      }
      return wrapper;
    }

    /**
     * Creates a `_.range` or `_.rangeRight` function.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new range function.
     */
    function createRange(fromRight) {
      return function(start, end, step) {
        if (step && typeof step != 'number' && isIterateeCall(start, end, step)) {
          end = step = undefined;
        }
        // Ensure the sign of `-0` is preserved.
        start = toNumber(start);
        start = start === start ? start : 0;
        if (end === undefined) {
          end = start;
          start = 0;
        } else {
          end = toNumber(end) || 0;
        }
        step = step === undefined ? (start < end ? 1 : -1) : (toNumber(step) || 0);
        return baseRange(start, end, step, fromRight);
      };
    }

    /**
     * Creates a function that wraps `func` to continue currying.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask of wrapper flags. See `createWrapper` for more details.
     * @param {Function} wrapFunc The function to create the `func` wrapper.
     * @param {*} placeholder The placeholder to replace.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to prepend to those provided to the new function.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createRecurryWrapper(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {
      var isCurry = bitmask & CURRY_FLAG,
          newArgPos = argPos ? copyArray(argPos) : undefined,
          newsHolders = isCurry ? holders : undefined,
          newHoldersRight = isCurry ? undefined : holders,
          newPartials = isCurry ? partials : undefined,
          newPartialsRight = isCurry ? undefined : partials;

      bitmask |= (isCurry ? PARTIAL_FLAG : PARTIAL_RIGHT_FLAG);
      bitmask &= ~(isCurry ? PARTIAL_RIGHT_FLAG : PARTIAL_FLAG);

      if (!(bitmask & CURRY_BOUND_FLAG)) {
        bitmask &= ~(BIND_FLAG | BIND_KEY_FLAG);
      }
      var newData = [func, bitmask, thisArg, newPartials, newsHolders, newPartialsRight, newHoldersRight, newArgPos, ary, arity],
          result = wrapFunc.apply(undefined, newData);

      if (isLaziable(func)) {
        setData(result, newData);
      }
      result.placeholder = placeholder;
      return result;
    }

    /**
     * Creates a function like `_.round`.
     *
     * @private
     * @param {string} methodName The name of the `Math` method to use when rounding.
     * @returns {Function} Returns the new round function.
     */
    function createRound(methodName) {
      var func = Math[methodName];
      return function(number, precision) {
        number = toNumber(number);
        precision = toInteger(precision);
        if (precision) {
          // Shift with exponential notation to avoid floating-point issues.
          // See [MDN](https://mdn.io/round#Examples) for more details.
          var pair = (toString(number) + 'e').split('e'),
              value = func(pair[0] + 'e' + (+pair[1] + precision));

          pair = (toString(value) + 'e').split('e');
          return +(pair[0] + 'e' + (+pair[1] - precision));
        }
        return func(number);
      };
    }

    /**
     * Creates a set of `values`.
     *
     * @private
     * @param {Array} values The values to add to the set.
     * @returns {Object} Returns the new set.
     */
    var createSet = !(Set && new Set([1, 2]).size === 2) ? noop : function(values) {
      return new Set(values);
    };

    /**
     * Creates a function that either curries or invokes `func` with optional
     * `this` binding and partially applied arguments.
     *
     * @private
     * @param {Function|string} func The function or method name to wrap.
     * @param {number} bitmask The bitmask of wrapper flags.
     *  The bitmask may be composed of the following flags:
     *     1 - `_.bind`
     *     2 - `_.bindKey`
     *     4 - `_.curry` or `_.curryRight` of a bound function
     *     8 - `_.curry`
     *    16 - `_.curryRight`
     *    32 - `_.partial`
     *    64 - `_.partialRight`
     *   128 - `_.rearg`
     *   256 - `_.ary`
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to be partially applied.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createWrapper(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
      var isBindKey = bitmask & BIND_KEY_FLAG;
      if (!isBindKey && typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var length = partials ? partials.length : 0;
      if (!length) {
        bitmask &= ~(PARTIAL_FLAG | PARTIAL_RIGHT_FLAG);
        partials = holders = undefined;
      }
      ary = ary === undefined ? ary : nativeMax(toInteger(ary), 0);
      arity = arity === undefined ? arity : toInteger(arity);
      length -= holders ? holders.length : 0;

      if (bitmask & PARTIAL_RIGHT_FLAG) {
        var partialsRight = partials,
            holdersRight = holders;

        partials = holders = undefined;
      }
      var data = isBindKey ? undefined : getData(func),
          newData = [func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity];

      if (data) {
        mergeData(newData, data);
      }
      func = newData[0];
      bitmask = newData[1];
      thisArg = newData[2];
      partials = newData[3];
      holders = newData[4];
      arity = newData[9] = newData[9] == null
        ? (isBindKey ? 0 : func.length)
        : nativeMax(newData[9] - length, 0);

      if (!arity && bitmask & (CURRY_FLAG | CURRY_RIGHT_FLAG)) {
        bitmask &= ~(CURRY_FLAG | CURRY_RIGHT_FLAG);
      }
      if (!bitmask || bitmask == BIND_FLAG) {
        var result = createBaseWrapper(func, bitmask, thisArg);
      } else if (bitmask == CURRY_FLAG || bitmask == CURRY_RIGHT_FLAG) {
        result = createCurryWrapper(func, bitmask, arity);
      } else if ((bitmask == PARTIAL_FLAG || bitmask == (BIND_FLAG | PARTIAL_FLAG)) && !holders.length) {
        result = createPartialWrapper(func, bitmask, thisArg, partials);
      } else {
        result = createHybridWrapper.apply(undefined, newData);
      }
      var setter = data ? baseSetData : setData;
      return setter(result, newData);
    }

    /**
     * A specialized version of `baseIsEqualDeep` for arrays with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Array} array The array to compare.
     * @param {Array} other The other array to compare.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Function} [customizer] The function to customize comparisons.
     * @param {number} [bitmask] The bitmask of comparison flags. See `baseIsEqual` for more details.
     * @param {Object} [stack] Tracks traversed `array` and `other` objects.
     * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
     */
    function equalArrays(array, other, equalFunc, customizer, bitmask, stack) {
      var index = -1,
          isPartial = bitmask & PARTIAL_COMPARE_FLAG,
          isUnordered = bitmask & UNORDERED_COMPARE_FLAG,
          arrLength = array.length,
          othLength = other.length;

      if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
        return false;
      }
      // Assume cyclic values are equal.
      var stacked = stack.get(array);
      if (stacked) {
        return stacked == other;
      }
      var result = true;
      stack.set(array, other);

      // Ignore non-index properties.
      while (++index < arrLength) {
        var arrValue = array[index],
            othValue = other[index];

        if (customizer) {
          var compared = isPartial
            ? customizer(othValue, arrValue, index, other, array, stack)
            : customizer(arrValue, othValue, index, array, other, stack);
        }
        if (compared !== undefined) {
          if (compared) {
            continue;
          }
          result = false;
          break;
        }
        // Recursively compare arrays (susceptible to call stack limits).
        if (isUnordered) {
          if (!arraySome(other, function(othValue) {
                return arrValue === othValue || equalFunc(arrValue, othValue, customizer, bitmask, stack);
              })) {
            result = false;
            break;
          }
        } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, customizer, bitmask, stack))) {
          result = false;
          break;
        }
      }
      stack['delete'](array);
      return result;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for comparing objects of
     * the same `toStringTag`.
     *
     * **Note:** This function only supports comparing values with tags of
     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {string} tag The `toStringTag` of the objects to compare.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Function} [customizer] The function to customize comparisons.
     * @param {number} [bitmask] The bitmask of comparison flags. See `baseIsEqual` for more details.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function equalByTag(object, other, tag, equalFunc, customizer, bitmask) {
      switch (tag) {
        case arrayBufferTag:
          if ((object.byteLength != other.byteLength) ||
              !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
            return false;
          }
          return true;

        case boolTag:
        case dateTag:
          // Coerce dates and booleans to numbers, dates to milliseconds and booleans
          // to `1` or `0` treating invalid dates coerced to `NaN` as not equal.
          return +object == +other;

        case errorTag:
          return object.name == other.name && object.message == other.message;

        case numberTag:
          // Treat `NaN` vs. `NaN` as equal.
          return (object != +object) ? other != +other : object == +other;

        case regexpTag:
        case stringTag:
          // Coerce regexes to strings and treat strings primitives and string
          // objects as equal. See https://es5.github.io/#x15.10.6.4 for more details.
          return object == (other + '');

        case mapTag:
          var convert = mapToArray;

        case setTag:
          var isPartial = bitmask & PARTIAL_COMPARE_FLAG;
          convert || (convert = setToArray);

          // Recursively compare objects (susceptible to call stack limits).
          return (isPartial || object.size == other.size) &&
            equalFunc(convert(object), convert(other), customizer, bitmask | UNORDERED_COMPARE_FLAG);

        case symbolTag:
          return !!_Symbol && (symbolValueOf.call(object) == symbolValueOf.call(other));
      }
      return false;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for objects with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Function} [customizer] The function to customize comparisons.
     * @param {number} [bitmask] The bitmask of comparison flags. See `baseIsEqual` for more details.
     * @param {Object} [stack] Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function equalObjects(object, other, equalFunc, customizer, bitmask, stack) {
      var isPartial = bitmask & PARTIAL_COMPARE_FLAG,
          isUnordered = bitmask & UNORDERED_COMPARE_FLAG,
          objProps = keys(object),
          objLength = objProps.length,
          othProps = keys(other),
          othLength = othProps.length;

      if (objLength != othLength && !isPartial) {
        return false;
      }
      var index = objLength;
      while (index--) {
        var key = objProps[index];
        if (!(isPartial ? key in other : baseHas(other, key)) ||
            !(isUnordered || key == othProps[index])) {
          return false;
        }
      }
      // Assume cyclic values are equal.
      var stacked = stack.get(object);
      if (stacked) {
        return stacked == other;
      }
      var result = true;
      stack.set(object, other);

      var skipCtor = isPartial;
      while (++index < objLength) {
        key = objProps[index];
        var objValue = object[key],
            othValue = other[key];

        if (customizer) {
          var compared = isPartial
            ? customizer(othValue, objValue, key, other, object, stack)
            : customizer(objValue, othValue, key, object, other, stack);
        }
        // Recursively compare objects (susceptible to call stack limits).
        if (!(compared === undefined
              ? (objValue === othValue || equalFunc(objValue, othValue, customizer, bitmask, stack))
              : compared
            )) {
          result = false;
          break;
        }
        skipCtor || (skipCtor = key == 'constructor');
      }
      if (result && !skipCtor) {
        var objCtor = object.constructor,
            othCtor = other.constructor;

        // Non `Object` object instances with different constructors are not equal.
        if (objCtor != othCtor &&
            ('constructor' in object && 'constructor' in other) &&
            !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
              typeof othCtor == 'function' && othCtor instanceof othCtor)) {
          result = false;
        }
      }
      stack['delete'](object);
      return result;
    }

    /**
     * Gets metadata for `func`.
     *
     * @private
     * @param {Function} func The function to query.
     * @returns {*} Returns the metadata for `func`.
     */
    var getData = !metaMap ? noop : function(func) {
      return metaMap.get(func);
    };

    /**
     * Gets the name of `func`.
     *
     * @private
     * @param {Function} func The function to query.
     * @returns {string} Returns the function name.
     */
    function getFuncName(func) {
      var result = (func.name + ''),
          array = realNames[result],
          length = array ? array.length : 0;

      while (length--) {
        var data = array[length],
            otherFunc = data.func;
        if (otherFunc == null || otherFunc == func) {
          return data.name;
        }
      }
      return result;
    }

    /**
     * Gets the appropriate "iteratee" function. If the `_.iteratee` method is
     * customized this function returns the custom method, otherwise it returns
     * `baseIteratee`. If arguments are provided the chosen function is invoked
     * with them and its result is returned.
     *
     * @private
     * @param {*} [value] The value to convert to an iteratee.
     * @param {number} [arity] The arity of the created iteratee.
     * @returns {Function} Returns the chosen function or its result.
     */
    function getIteratee() {
      var result = lodash.iteratee || iteratee;
      result = result === iteratee ? baseIteratee : result;
      return arguments.length ? result(arguments[0], arguments[1]) : result;
    }

    /**
     * Gets the "length" property value of `object`.
     *
     * **Note:** This function is used to avoid a [JIT bug](https://bugs.webkit.org/show_bug.cgi?id=142792)
     * that affects Safari on at least iOS 8.1-8.3 ARM64.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {*} Returns the "length" value.
     */
    var getLength = baseProperty('length');

    /**
     * Gets the property names, values, and compare flags of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the match data of `object`.
     */
    function getMatchData(object) {
      var result = toPairs(object),
          length = result.length;

      while (length--) {
        result[length][2] = isStrictComparable(result[length][1]);
      }
      return result;
    }

    /**
     * Gets the native function at `key` of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {string} key The key of the method to get.
     * @returns {*} Returns the function if it's native, else `undefined`.
     */
    function getNative(object, key) {
      var value = object == null ? undefined : object[key];
      return isNative(value) ? value : undefined;
    }

    /**
     * Creates an array of the own symbol properties of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of symbols.
     */
    var getSymbols = getOwnPropertySymbols || function() {
      return [];
    };

    /**
     * Gets the `toStringTag` of `value`.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the `toStringTag`.
     */
    function getTag(value) {
      return objectToString.call(value);
    }

    // Fallback for IE 11 providing `toStringTag` values for maps and sets.
    if ((Map && getTag(new Map) != mapTag) || (Set && getTag(new Set) != setTag)) {
      getTag = function(value) {
        var result = objectToString.call(value),
            Ctor = result == objectTag ? value.constructor : null,
            ctorString = typeof Ctor == 'function' ? funcToString.call(Ctor) : '';

        if (ctorString) {
          if (ctorString == mapCtorString) {
            return mapTag;
          }
          if (ctorString == setCtorString) {
            return setTag;
          }
        }
        return result;
      };
    }

    /**
     * Gets the view, applying any `transforms` to the `start` and `end` positions.
     *
     * @private
     * @param {number} start The start of the view.
     * @param {number} end The end of the view.
     * @param {Array} transforms The transformations to apply to the view.
     * @returns {Object} Returns an object containing the `start` and `end`
     *  positions of the view.
     */
    function getView(start, end, transforms) {
      var index = -1,
          length = transforms.length;

      while (++index < length) {
        var data = transforms[index],
            size = data.size;

        switch (data.type) {
          case 'drop':      start += size; break;
          case 'dropRight': end -= size; break;
          case 'take':      end = nativeMin(end, start + size); break;
          case 'takeRight': start = nativeMax(start, end - size); break;
        }
      }
      return { 'start': start, 'end': end };
    }

    /**
     * Checks if `path` exists on `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @param {Function} hasFunc The function to check properties.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     */
    function hasPath(object, path, hasFunc) {
      if (object == null) {
        return false;
      }
      var result = hasFunc(object, path);
      if (!result && !isKey(path)) {
        path = baseToPath(path);
        object = parent(object, path);
        if (object != null) {
          path = last(path);
          result = hasFunc(object, path);
        }
      }
      return result || (isLength(object && object.length) && isIndex(path, object.length) &&
        (isArray(object) || isString(object) || isArguments(object)));
    }

    /**
     * Initializes an array clone.
     *
     * @private
     * @param {Array} array The array to clone.
     * @returns {Array} Returns the initialized clone.
     */
    function initCloneArray(array) {
      var length = array.length,
          result = array.constructor(length);

      // Add properties assigned by `RegExp#exec`.
      if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
        result.index = array.index;
        result.input = array.input;
      }
      return result;
    }

    /**
     * Initializes an object clone.
     *
     * @private
     * @param {Object} object The object to clone.
     * @returns {Object} Returns the initialized clone.
     */
    function initCloneObject(object) {
      var Ctor = object.constructor;
      return baseCreate(isFunction(Ctor) ? Ctor.prototype : undefined);
    }

    /**
     * Initializes an object clone based on its `toStringTag`.
     *
     * **Note:** This function only supports cloning values with tags of
     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
     *
     * @private
     * @param {Object} object The object to clone.
     * @param {string} tag The `toStringTag` of the object to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the initialized clone.
     */
    function initCloneByTag(object, tag, isDeep) {
      var Ctor = object.constructor;
      switch (tag) {
        case arrayBufferTag:
          return cloneBuffer(object);

        case boolTag:
        case dateTag:
          return new Ctor(+object);

        case float32Tag: case float64Tag:
        case int8Tag: case int16Tag: case int32Tag:
        case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:
          return cloneTypedArray(object, isDeep);

        case mapTag:
          return cloneMap(object);

        case numberTag:
        case stringTag:
          return new Ctor(object);

        case regexpTag:
          return cloneRegExp(object);

        case setTag:
          return cloneSet(object);

        case symbolTag:
          return cloneSymbol(object);
      }
    }

    /**
     * Creates an array of index keys for `object` values of arrays,
     * `arguments` objects, and strings, otherwise `null` is returned.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array|null} Returns index keys, else `null`.
     */
    function indexKeys(object) {
      var length = object ? object.length : undefined;
      return (isLength(length) && (isArray(object) || isString(object) || isArguments(object)))
        ? baseTimes(length, String)
        : null;
    }

    /**
     * Checks if the provided arguments are from an iteratee call.
     *
     * @private
     * @param {*} value The potential iteratee value argument.
     * @param {*} index The potential iteratee index or key argument.
     * @param {*} object The potential iteratee object argument.
     * @returns {boolean} Returns `true` if the arguments are from an iteratee call, else `false`.
     */
    function isIterateeCall(value, index, object) {
      if (!isObject(object)) {
        return false;
      }
      var type = typeof index;
      if (type == 'number'
          ? (isArrayLike(object) && isIndex(index, object.length))
          : (type == 'string' && index in object)) {
        return eq(object[index], value);
      }
      return false;
    }

    /**
     * Checks if `value` is a property name and not a property path.
     *
     * @private
     * @param {*} value The value to check.
     * @param {Object} [object] The object to query keys on.
     * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
     */
    function isKey(value, object) {
      if (typeof value == 'number') {
        return true;
      }
      return !isArray(value) &&
        (reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
          (object != null && value in Object(object)));
    }

    /**
     * Checks if `value` is suitable for use as unique object key.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
     */
    function isKeyable(value) {
      var type = typeof value;
      return type == 'number' || type == 'boolean' ||
        (type == 'string' && value !== '__proto__') || value == null;
    }

    /**
     * Checks if `func` has a lazy counterpart.
     *
     * @private
     * @param {Function} func The function to check.
     * @returns {boolean} Returns `true` if `func` has a lazy counterpart, else `false`.
     */
    function isLaziable(func) {
      var funcName = getFuncName(func),
          other = lodash[funcName];

      if (typeof other != 'function' || !(funcName in LazyWrapper.prototype)) {
        return false;
      }
      if (func === other) {
        return true;
      }
      var data = getData(other);
      return !!data && func === data[0];
    }

    /**
     * Checks if `value` is likely a prototype object.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
     */
    function isPrototype(value) {
      var Ctor = value && value.constructor,
          proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

      return value === proto;
    }

    /**
     * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` if suitable for strict
     *  equality comparisons, else `false`.
     */
    function isStrictComparable(value) {
      return value === value && !isObject(value);
    }

    /**
     * Merges the function metadata of `source` into `data`.
     *
     * Merging metadata reduces the number of wrappers used to invoke a function.
     * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`
     * may be applied regardless of execution order. Methods like `_.ary` and `_.rearg`
     * modify function arguments, making the order in which they are executed important,
     * preventing the merging of metadata. However, we make an exception for a safe
     * combined case where curried functions have `_.ary` and or `_.rearg` applied.
     *
     * @private
     * @param {Array} data The destination metadata.
     * @param {Array} source The source metadata.
     * @returns {Array} Returns `data`.
     */
    function mergeData(data, source) {
      var bitmask = data[1],
          srcBitmask = source[1],
          newBitmask = bitmask | srcBitmask,
          isCommon = newBitmask < (BIND_FLAG | BIND_KEY_FLAG | ARY_FLAG);

      var isCombo =
        (srcBitmask == ARY_FLAG && (bitmask == CURRY_FLAG)) ||
        (srcBitmask == ARY_FLAG && (bitmask == REARG_FLAG) && (data[7].length <= source[8])) ||
        (srcBitmask == (ARY_FLAG | REARG_FLAG) && (source[7].length <= source[8]) && (bitmask == CURRY_FLAG));

      // Exit early if metadata can't be merged.
      if (!(isCommon || isCombo)) {
        return data;
      }
      // Use source `thisArg` if available.
      if (srcBitmask & BIND_FLAG) {
        data[2] = source[2];
        // Set when currying a bound function.
        newBitmask |= (bitmask & BIND_FLAG) ? 0 : CURRY_BOUND_FLAG;
      }
      // Compose partial arguments.
      var value = source[3];
      if (value) {
        var partials = data[3];
        data[3] = partials ? composeArgs(partials, value, source[4]) : copyArray(value);
        data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : copyArray(source[4]);
      }
      // Compose partial right arguments.
      value = source[5];
      if (value) {
        partials = data[5];
        data[5] = partials ? composeArgsRight(partials, value, source[6]) : copyArray(value);
        data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : copyArray(source[6]);
      }
      // Use source `argPos` if available.
      value = source[7];
      if (value) {
        data[7] = copyArray(value);
      }
      // Use source `ary` if it's smaller.
      if (srcBitmask & ARY_FLAG) {
        data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
      }
      // Use source `arity` if one is not provided.
      if (data[9] == null) {
        data[9] = source[9];
      }
      // Use source `func` and merge bitmasks.
      data[0] = source[0];
      data[1] = newBitmask;

      return data;
    }

    /**
     * Used by `_.defaultsDeep` to customize its `_.merge` use.
     *
     * @private
     * @param {*} objValue The destination value.
     * @param {*} srcValue The source value.
     * @param {string} key The key of the property to merge.
     * @param {Object} object The parent object of `objValue`.
     * @param {Object} source The parent object of `srcValue`.
     * @param {Object} [stack] Tracks traversed source values and their merged counterparts.
     * @returns {*} Returns the value to assign.
     */
    function mergeDefaults(objValue, srcValue, key, object, source, stack) {
      if (isObject(objValue) && isObject(srcValue)) {
        stack.set(srcValue, objValue);
        baseMerge(objValue, srcValue, mergeDefaults, stack);
      }
      return objValue === undefined ? baseClone(srcValue) : objValue;
    }

    /**
     * Gets the parent value at `path` of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array} path The path to get the parent value of.
     * @returns {*} Returns the parent value.
     */
    function parent(object, path) {
      return path.length == 1 ? object : get(object, baseSlice(path, 0, -1));
    }

    /**
     * Reorder `array` according to the specified indexes where the element at
     * the first index is assigned as the first element, the element at
     * the second index is assigned as the second element, and so on.
     *
     * @private
     * @param {Array} array The array to reorder.
     * @param {Array} indexes The arranged array indexes.
     * @returns {Array} Returns `array`.
     */
    function reorder(array, indexes) {
      var arrLength = array.length,
          length = nativeMin(indexes.length, arrLength),
          oldArray = copyArray(array);

      while (length--) {
        var index = indexes[length];
        array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;
      }
      return array;
    }

    /**
     * Sets metadata for `func`.
     *
     * **Note:** If this function becomes hot, i.e. is invoked a lot in a short
     * period of time, it will trip its breaker and transition to an identity function
     * to avoid garbage collection pauses in V8. See [V8 issue 2070](https://code.google.com/p/v8/issues/detail?id=2070)
     * for more details.
     *
     * @private
     * @param {Function} func The function to associate metadata with.
     * @param {*} data The metadata.
     * @returns {Function} Returns `func`.
     */
    var setData = (function() {
      var count = 0,
          lastCalled = 0;

      return function(key, value) {
        var stamp = now(),
            remaining = HOT_SPAN - (stamp - lastCalled);

        lastCalled = stamp;
        if (remaining > 0) {
          if (++count >= HOT_COUNT) {
            return key;
          }
        } else {
          count = 0;
        }
        return baseSetData(key, value);
      };
    }());

    /**
     * Converts `string` to a property path array.
     *
     * @private
     * @param {string} string The string to convert.
     * @returns {Array} Returns the property path array.
     */
    function stringToPath(string) {
      var result = [];
      toString(string).replace(rePropName, function(match, number, quote, string) {
        result.push(quote ? string.replace(reEscapeChar, '$1') : (number || match));
      });
      return result;
    }

    /**
     * Converts `value` to an array-like object if it's not one.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {Array} Returns the array-like object.
     */
    function toArrayLikeObject(value) {
      return isArrayLikeObject(value) ? value : [];
    }

    /**
     * Converts `value` to a function if it's not one.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {Function} Returns the function.
     */
    function toFunction(value) {
      return typeof value == 'function' ? value : identity;
    }

    /**
     * Creates a clone of `wrapper`.
     *
     * @private
     * @param {Object} wrapper The wrapper to clone.
     * @returns {Object} Returns the cloned wrapper.
     */
    function wrapperClone(wrapper) {
      if (wrapper instanceof LazyWrapper) {
        return wrapper.clone();
      }
      var result = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
      result.__actions__ = copyArray(wrapper.__actions__);
      result.__index__  = wrapper.__index__;
      result.__values__ = wrapper.__values__;
      return result;
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates an array of elements split into groups the length of `size`.
     * If `array` can't be split evenly, the final chunk will be the remaining
     * elements.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to process.
     * @param {number} [size=0] The length of each chunk.
     * @returns {Array} Returns the new array containing chunks.
     * @example
     *
     * _.chunk(['a', 'b', 'c', 'd'], 2);
     * // => [['a', 'b'], ['c', 'd']]
     *
     * _.chunk(['a', 'b', 'c', 'd'], 3);
     * // => [['a', 'b', 'c'], ['d']]
     */
    function chunk(array, size) {
      size = nativeMax(toInteger(size), 0);

      var length = array ? array.length : 0;
      if (!length || size < 1) {
        return [];
      }
      var index = 0,
          resIndex = -1,
          result = Array(nativeCeil(length / size));

      while (index < length) {
        result[++resIndex] = baseSlice(array, index, (index += size));
      }
      return result;
    }

    /**
     * Creates an array with all falsey values removed. The values `false`, `null`,
     * `0`, `""`, `undefined`, and `NaN` are falsey.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to compact.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.compact([0, 1, false, 2, '', 3]);
     * // => [1, 2, 3]
     */
    function compact(array) {
      var index = -1,
          length = array ? array.length : 0,
          resIndex = -1,
          result = [];

      while (++index < length) {
        var value = array[index];
        if (value) {
          result[++resIndex] = value;
        }
      }
      return result;
    }

    /**
     * Creates a new array concatenating `array` with any additional arrays
     * and/or values.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to concatenate.
     * @param {...*} [values] The values to concatenate.
     * @returns {Array} Returns the new concatenated array.
     * @example
     *
     * var array = [1];
     * var other = _.concat(array, 2, [3], [[4]]);
     *
     * console.log(other);
     * // => [1, 2, 3, [4]]
     *
     * console.log(array);
     * // => [1]
     */
    var concat = rest(function(array, values) {
      values = baseFlatten(values);
      return arrayConcat(isArray(array) ? array : [Object(array)], values);
    });

    /**
     * Creates an array of unique `array` values not included in the other
     * provided arrays using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.difference([3, 2, 1], [4, 2]);
     * // => [3, 1]
     */
    var difference = rest(function(array, values) {
      return isArrayLikeObject(array)
        ? baseDifference(array, baseFlatten(values, false, true))
        : [];
    });

    /**
     * This method is like `_.difference` except that it accepts `iteratee` which
     * is invoked for each element of `array` and `values` to generate the criterion
     * by which uniqueness is computed. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @param {Function|Object|string} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.differenceBy([3.1, 2.2, 1.3], [4.4, 2.5], Math.floor);
     * // => [3.1, 1.3]
     *
     * // using the `_.property` iteratee shorthand
     * _.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x');
     * // => [{ 'x': 2 }]
     */
    var differenceBy = rest(function(array, values) {
      var iteratee = last(values);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return isArrayLikeObject(array)
        ? baseDifference(array, baseFlatten(values, false, true), getIteratee(iteratee))
        : [];
    });

    /**
     * This method is like `_.difference` except that it accepts `comparator`
     * which is invoked to compare elements of `array` to `values`. The comparator
     * is invoked with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     *
     * _.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);
     * // => [{ 'x': 2, 'y': 1 }]
     */
    var differenceWith = rest(function(array, values) {
      var comparator = last(values);
      if (isArrayLikeObject(comparator)) {
        comparator = undefined;
      }
      return isArrayLikeObject(array)
        ? baseDifference(array, baseFlatten(values, false, true), undefined, comparator)
        : [];
    });

    /**
     * Creates a slice of `array` with `n` elements dropped from the beginning.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to drop.
     * @param- {Object} [guard] Enables use as an iteratee for functions like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.drop([1, 2, 3]);
     * // => [2, 3]
     *
     * _.drop([1, 2, 3], 2);
     * // => [3]
     *
     * _.drop([1, 2, 3], 5);
     * // => []
     *
     * _.drop([1, 2, 3], 0);
     * // => [1, 2, 3]
     */
    function drop(array, n, guard) {
      var length = array ? array.length : 0;
      if (!length) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      return baseSlice(array, n < 0 ? 0 : n, length);
    }

    /**
     * Creates a slice of `array` with `n` elements dropped from the end.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to drop.
     * @param- {Object} [guard] Enables use as an iteratee for functions like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.dropRight([1, 2, 3]);
     * // => [1, 2]
     *
     * _.dropRight([1, 2, 3], 2);
     * // => [1]
     *
     * _.dropRight([1, 2, 3], 5);
     * // => []
     *
     * _.dropRight([1, 2, 3], 0);
     * // => [1, 2, 3]
     */
    function dropRight(array, n, guard) {
      var length = array ? array.length : 0;
      if (!length) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      n = length - n;
      return baseSlice(array, 0, n < 0 ? 0 : n);
    }

    /**
     * Creates a slice of `array` excluding elements dropped from the end.
     * Elements are dropped until `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.dropRightWhile(users, function(o) { return !o.active; });
     * // => objects for ['barney']
     *
     * // using the `_.matches` iteratee shorthand
     * _.dropRightWhile(users, { 'user': 'pebbles', 'active': false });
     * // => objects for ['barney', 'fred']
     *
     * // using the `_.matchesProperty` iteratee shorthand
     * _.dropRightWhile(users, ['active', false]);
     * // => objects for ['barney']
     *
     * // using the `_.property` iteratee shorthand
     * _.dropRightWhile(users, 'active');
     * // => objects for ['barney', 'fred', 'pebbles']
     */
    function dropRightWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3), true, true)
        : [];
    }

    /**
     * Creates a slice of `array` excluding elements dropped from the beginning.
     * Elements are dropped until `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.dropWhile(users, function(o) { return !o.active; });
     * // => objects for ['pebbles']
     *
     * // using the `_.matches` iteratee shorthand
     * _.dropWhile(users, { 'user': 'barney', 'active': false });
     * // => objects for ['fred', 'pebbles']
     *
     * // using the `_.matchesProperty` iteratee shorthand
     * _.dropWhile(users, ['active', false]);
     * // => objects for ['pebbles']
     *
     * // using the `_.property` iteratee shorthand
     * _.dropWhile(users, 'active');
     * // => objects for ['barney', 'fred', 'pebbles']
     */
    function dropWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3), true)
        : [];
    }

    /**
     * Fills elements of `array` with `value` from `start` up to, but not
     * including, `end`.
     *
     * **Note:** This method mutates `array`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to fill.
     * @param {*} value The value to fill `array` with.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _.fill(array, 'a');
     * console.log(array);
     * // => ['a', 'a', 'a']
     *
     * _.fill(Array(3), 2);
     * // => [2, 2, 2]
     *
     * _.fill([4, 6, 8, 10], '*', 1, 3);
     * // => [4, '*', '*', 10]
     */
    function fill(array, value, start, end) {
      var length = array ? array.length : 0;
      if (!length) {
        return [];
      }
      if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {
        start = 0;
        end = length;
      }
      return baseFill(array, value, start, end);
    }

    /**
     * This method is like `_.find` except that it returns the index of the first
     * element `predicate` returns truthy for instead of the element itself.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to search.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.findIndex(users, function(o) { return o.user == 'barney'; });
     * // => 0
     *
     * // using the `_.matches` iteratee shorthand
     * _.findIndex(users, { 'user': 'fred', 'active': false });
     * // => 1
     *
     * // using the `_.matchesProperty` iteratee shorthand
     * _.findIndex(users, ['active', false]);
     * // => 0
     *
     * // using the `_.property` iteratee shorthand
     * _.findIndex(users, 'active');
     * // => 2
     */
    function findIndex(array, predicate) {
      return (array && array.length)
        ? baseFindIndex(array, getIteratee(predicate, 3))
        : -1;
    }

    /**
     * This method is like `_.findIndex` except that it iterates over elements
     * of `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to search.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.findLastIndex(users, function(o) { return o.user == 'pebbles'; });
     * // => 2
     *
     * // using the `_.matches` iteratee shorthand
     * _.findLastIndex(users, { 'user': 'barney', 'active': true });
     * // => 0
     *
     * // using the `_.matchesProperty` iteratee shorthand
     * _.findLastIndex(users, ['active', false]);
     * // => 2
     *
     * // using the `_.property` iteratee shorthand
     * _.findLastIndex(users, 'active');
     * // => 0
     */
    function findLastIndex(array, predicate) {
      return (array && array.length)
        ? baseFindIndex(array, getIteratee(predicate, 3), true)
        : -1;
    }

    /**
     * Creates an array of flattened values by running each element in `array`
     * through `iteratee` and concating its result to the other mapped values.
     * The iteratee is invoked with three arguments: (value, index|key, array).
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to iterate over.
     * @param {Function|Object|string} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new array.
     * @example
     *
     * function duplicate(n) {
     *   return [n, n];
     * }
     *
     * _.flatMap([1, 2], duplicate);
     * // => [1, 1, 2, 2]
     */
    function flatMap(array, iteratee) {
      var length = array ? array.length : 0;
      return length ? baseFlatten(arrayMap(array, getIteratee(iteratee, 3))) : [];
    }

    /**
     * Flattens `array` a single level.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to flatten.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * _.flatten([1, [2, 3, [4]]]);
     * // => [1, 2, 3, [4]]
     */
    function flatten(array) {
      var length = array ? array.length : 0;
      return length ? baseFlatten(array) : [];
    }

    /**
     * This method is like `_.flatten` except that it recursively flattens `array`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to recursively flatten.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * _.flattenDeep([1, [2, 3, [4]]]);
     * // => [1, 2, 3, 4]
     */
    function flattenDeep(array) {
      var length = array ? array.length : 0;
      return length ? baseFlatten(array, true) : [];
    }

    /**
     * The inverse of `_.toPairs`; this method returns an object composed
     * from key-value `pairs`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} pairs The key-value pairs.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.fromPairs([['fred', 30], ['barney', 40]]);
     * // => { 'fred': 30, 'barney': 40 }
     */
    function fromPairs(pairs) {
      var index = -1,
          length = pairs ? pairs.length : 0,
          result = {};

      while (++index < length) {
        var pair = pairs[index];
        baseSet(result, pair[0], pair[1]);
      }
      return result;
    }

    /**
     * Gets the first element of `array`.
     *
     * @static
     * @memberOf _
     * @alias first
     * @category Array
     * @param {Array} array The array to query.
     * @returns {*} Returns the first element of `array`.
     * @example
     *
     * _.head([1, 2, 3]);
     * // => 1
     *
     * _.head([]);
     * // => undefined
     */
    function head(array) {
      return array ? array[0] : undefined;
    }

    /**
     * Gets the index at which the first occurrence of `value` is found in `array`
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
     * for equality comparisons. If `fromIndex` is negative, it's used as the offset
     * from the end of `array`. If `array` is sorted providing `true` for `fromIndex`
     * performs a faster binary search.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to search.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.indexOf([1, 2, 1, 2], 2);
     * // => 1
     *
     * // using `fromIndex`
     * _.indexOf([1, 2, 1, 2], 2, 2);
     * // => 3
     */
    function indexOf(array, value, fromIndex) {
      var length = array ? array.length : 0;
      if (!length) {
        return -1;
      }
      fromIndex = toInteger(fromIndex);
      if (fromIndex < 0) {
        fromIndex = nativeMax(length + fromIndex, 0);
      }
      return baseIndexOf(array, value, fromIndex);
    }

    /**
     * Gets all but the last element of `array`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to query.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.initial([1, 2, 3]);
     * // => [1, 2]
     */
    function initial(array) {
      return dropRight(array, 1);
    }

    /**
     * Creates an array of unique values that are included in all of the provided
     * arrays using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of shared values.
     * @example
     * _.intersection([2, 1], [4, 2], [1, 2]);
     * // => [2]
     */
    var intersection = rest(function(arrays) {
      var mapped = arrayMap(arrays, toArrayLikeObject);
      return (mapped.length && mapped[0] === arrays[0])
        ? baseIntersection(mapped)
        : [];
    });

    /**
     * This method is like `_.intersection` except that it accepts `iteratee`
     * which is invoked for each element of each `arrays` to generate the criterion
     * by which uniqueness is computed. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function|Object|string} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of shared values.
     * @example
     *
     * _.intersectionBy([2.1, 1.2], [4.3, 2.4], Math.floor);
     * // => [2.1]
     *
     * // using the `_.property` iteratee shorthand
     * _.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }]
     */
    var intersectionBy = rest(function(arrays) {
      var iteratee = last(arrays),
          mapped = arrayMap(arrays, toArrayLikeObject);

      if (iteratee === last(mapped)) {
        iteratee = undefined;
      } else {
        mapped.pop();
      }
      return (mapped.length && mapped[0] === arrays[0])
        ? baseIntersection(mapped, getIteratee(iteratee))
        : [];
    });

    /**
     * This method is like `_.intersection` except that it accepts `comparator`
     * which is invoked to compare elements of `arrays`. The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of shared values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.intersectionWith(objects, others, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }]
     */
    var intersectionWith = rest(function(arrays) {
      var comparator = last(arrays),
          mapped = arrayMap(arrays, toArrayLikeObject);

      if (comparator === last(mapped)) {
        comparator = undefined;
      } else {
        mapped.pop();
      }
      return (mapped.length && mapped[0] === arrays[0])
        ? baseIntersection(mapped, undefined, comparator)
        : [];
    });

    /**
     * Converts all elements in `array` into a string separated by `separator`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to convert.
     * @param {string} [separator=','] The element separator.
     * @returns {string} Returns the joined string.
     * @example
     *
     * _.join(['a', 'b', 'c'], '~');
     * // => 'a~b~c'
     */
    function join(array, separator) {
      return array ? nativeJoin.call(array, separator) : '';
    }

    /**
     * Gets the last element of `array`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to query.
     * @returns {*} Returns the last element of `array`.
     * @example
     *
     * _.last([1, 2, 3]);
     * // => 3
     */
    function last(array) {
      var length = array ? array.length : 0;
      return length ? array[length - 1] : undefined;
    }

    /**
     * This method is like `_.indexOf` except that it iterates over elements of
     * `array` from right to left.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to search.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=array.length-1] The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.lastIndexOf([1, 2, 1, 2], 2);
     * // => 3
     *
     * // using `fromIndex`
     * _.lastIndexOf([1, 2, 1, 2], 2, 2);
     * // => 1
     */
    function lastIndexOf(array, value, fromIndex) {
      var length = array ? array.length : 0;
      if (!length) {
        return -1;
      }
      var index = length;
      if (fromIndex !== undefined) {
        index = toInteger(fromIndex);
        index = (index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1)) + 1;
      }
      if (value !== value) {
        return indexOfNaN(array, index, true);
      }
      while (index--) {
        if (array[index] === value) {
          return index;
        }
      }
      return -1;
    }

    /**
     * Removes all provided values from `array` using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * **Note:** Unlike `_.without`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to modify.
     * @param {...*} [values] The values to remove.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3, 1, 2, 3];
     *
     * _.pull(array, 2, 3);
     * console.log(array);
     * // => [1, 1]
     */
    var pull = rest(pullAll);

    /**
     * This method is like `_.pull` except that it accepts an array of values to remove.
     *
     * **Note:** Unlike `_.difference`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3, 1, 2, 3];
     *
     * _.pull(array, [2, 3]);
     * console.log(array);
     * // => [1, 1]
     */
    function pullAll(array, values) {
      return (array && array.length && values && values.length)
        ? basePullAll(array, values)
        : array;
    }

    /**
     * This method is like `_.pullAll` except that it accepts `iteratee` which is
     * invoked for each element of `array` and `values` to to generate the criterion
     * by which uniqueness is computed. The iteratee is invoked with one argument: (value).
     *
     * **Note:** Unlike `_.differenceBy`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function|Object|string} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];
     *
     * _.pullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], 'x');
     * console.log(array);
     * // => [{ 'x': 2 }]
     */
    function pullAllBy(array, values, iteratee) {
      return (array && array.length && values && values.length)
        ? basePullAllBy(array, values, getIteratee(iteratee))
        : array;
    }

    /**
     * Removes elements from `array` corresponding to `indexes` and returns an
     * array of removed elements.
     *
     * **Note:** Unlike `_.at`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to modify.
     * @param {...(number|number[])} [indexes] The indexes of elements to remove,
     *  specified individually or in arrays.
     * @returns {Array} Returns the new array of removed elements.
     * @example
     *
     * var array = [5, 10, 15, 20];
     * var evens = _.pullAt(array, 1, 3);
     *
     * console.log(array);
     * // => [5, 15]
     *
     * console.log(evens);
     * // => [10, 20]
     */
    var pullAt = rest(function(array, indexes) {
      indexes = arrayMap(baseFlatten(indexes), String);

      var result = baseAt(array, indexes);
      basePullAt(array, indexes.sort(compareAscending));
      return result;
    });

    /**
     * Removes all elements from `array` that `predicate` returns truthy for
     * and returns an array of the removed elements. The predicate is invoked with
     * three arguments: (value, index, array).
     *
     * **Note:** Unlike `_.filter`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new array of removed elements.
     * @example
     *
     * var array = [1, 2, 3, 4];
     * var evens = _.remove(array, function(n) {
     *   return n % 2 == 0;
     * });
     *
     * console.log(array);
     * // => [1, 3]
     *
     * console.log(evens);
     * // => [2, 4]
     */
    function remove(array, predicate) {
      var result = [];
      if (!(array && array.length)) {
        return result;
      }
      var index = -1,
          indexes = [],
          length = array.length;

      predicate = getIteratee(predicate, 3);
      while (++index < length) {
        var value = array[index];
        if (predicate(value, index, array)) {
          result.push(value);
          indexes.push(index);
        }
      }
      basePullAt(array, indexes);
      return result;
    }

    /**
     * Reverses `array` so that the first element becomes the last, the second
     * element becomes the second to last, and so on.
     *
     * **Note:** This method mutates `array` and is based on
     * [`Array#reverse`](https://mdn.io/Array/reverse).
     *
     * @memberOf _
     * @category Array
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _.reverse(array);
     * // => [3, 2, 1]
     *
     * console.log(array);
     * // => [3, 2, 1]
     */
    function reverse(array) {
      return array ? nativeReverse.call(array) : array;
    }

    /**
     * Creates a slice of `array` from `start` up to, but not including, `end`.
     *
     * **Note:** This method is used instead of [`Array#slice`](https://mdn.io/Array/slice)
     * to ensure dense arrays are returned.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to slice.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the slice of `array`.
     */
    function slice(array, start, end) {
      var length = array ? array.length : 0;
      if (!length) {
        return [];
      }
      if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {
        start = 0;
        end = length;
      }
      else {
        start = start == null ? 0 : toInteger(start);
        end = end === undefined ? length : toInteger(end);
      }
      return baseSlice(array, start, end);
    }

    /**
     * Uses a binary search to determine the lowest index at which `value` should
     * be inserted into `array` in order to maintain its sort order.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @returns {number} Returns the index at which `value` should be inserted into `array`.
     * @example
     *
     * _.sortedIndex([30, 50], 40);
     * // => 1
     *
     * _.sortedIndex([4, 5], 4);
     * // => 0
     */
    function sortedIndex(array, value) {
      return baseSortedIndex(array, value);
    }

    /**
     * This method is like `_.sortedIndex` except that it accepts `iteratee`
     * which is invoked for `value` and each element of `array` to compute their
     * sort ranking. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function|Object|string} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the index at which `value` should be inserted into `array`.
     * @example
     *
     * var dict = { 'thirty': 30, 'forty': 40, 'fifty': 50 };
     *
     * _.sortedIndexBy(['thirty', 'fifty'], 'forty', _.propertyOf(dict));
     * // => 1
     *
     * // using the `_.property` iteratee shorthand
     * _.sortedIndexBy([{ 'x': 4 }, { 'x': 5 }], { 'x': 4 }, 'x');
     * // => 0
     */
    function sortedIndexBy(array, value, iteratee) {
      return baseSortedIndexBy(array, value, getIteratee(iteratee));
    }

    /**
     * This method is like `_.indexOf` except that it performs a binary
     * search on a sorted `array`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to search.
     * @param {*} value The value to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.sortedIndexOf([1, 1, 2, 2], 2);
     * // => 2
     */
    function sortedIndexOf(array, value) {
      var length = array ? array.length : 0;
      if (length) {
        var index = baseSortedIndex(array, value);
        if (index < length && eq(array[index], value)) {
          return index;
        }
      }
      return -1;
    }

    /**
     * This method is like `_.sortedIndex` except that it returns the highest
     * index at which `value` should be inserted into `array` in order to
     * maintain its sort order.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @returns {number} Returns the index at which `value` should be inserted into `array`.
     * @example
     *
     * _.sortedLastIndex([4, 5], 4);
     * // => 1
     */
    function sortedLastIndex(array, value) {
      return baseSortedIndex(array, value, true);
    }

    /**
     * This method is like `_.sortedLastIndex` except that it accepts `iteratee`
     * which is invoked for `value` and each element of `array` to compute their
     * sort ranking. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function|Object|string} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the index at which `value` should be inserted into `array`.
     * @example
     *
     * // using the `_.property` iteratee shorthand
     * _.sortedLastIndexBy([{ 'x': 4 }, { 'x': 5 }], { 'x': 4 }, 'x');
     * // => 1
     */
    function sortedLastIndexBy(array, value, iteratee) {
      return baseSortedIndexBy(array, value, getIteratee(iteratee), true);
    }

    /**
     * This method is like `_.lastIndexOf` except that it performs a binary
     * search on a sorted `array`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to search.
     * @param {*} value The value to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.sortedLastIndexOf([1, 1, 2, 2], 2);
     * // => 3
     */
    function sortedLastIndexOf(array, value) {
      var length = array ? array.length : 0;
      if (length) {
        var index = baseSortedIndex(array, value, true) - 1;
        if (eq(array[index], value)) {
          return index;
        }
      }
      return -1;
    }

    /**
     * This method is like `_.uniq` except that it's designed and optimized
     * for sorted arrays.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to inspect.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.sortedUniq([1, 1, 2]);
     * // => [1, 2]
     */
    function sortedUniq(array) {
      return (array && array.length)
        ? baseSortedUniq(array)
        : [];
    }

    /**
     * This method is like `_.uniqBy` except that it's designed and optimized
     * for sorted arrays.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.sortedUniqBy([1.1, 1.2, 2.3, 2.4], Math.floor);
     * // => [1.1, 2.2]
     */
    function sortedUniqBy(array, iteratee) {
      return (array && array.length)
        ? baseSortedUniqBy(array, getIteratee(iteratee))
        : [];
    }

    /**
     * Gets all but the first element of `array`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to query.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.tail([1, 2, 3]);
     * // => [2, 3]
     */
    function tail(array) {
      return drop(array, 1);
    }

    /**
     * Creates a slice of `array` with `n` elements taken from the beginning.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to take.
     * @param- {Object} [guard] Enables use as an iteratee for functions like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.take([1, 2, 3]);
     * // => [1]
     *
     * _.take([1, 2, 3], 2);
     * // => [1, 2]
     *
     * _.take([1, 2, 3], 5);
     * // => [1, 2, 3]
     *
     * _.take([1, 2, 3], 0);
     * // => []
     */
    function take(array, n, guard) {
      if (!(array && array.length)) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      return baseSlice(array, 0, n < 0 ? 0 : n);
    }

    /**
     * Creates a slice of `array` with `n` elements taken from the end.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to take.
     * @param- {Object} [guard] Enables use as an iteratee for functions like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.takeRight([1, 2, 3]);
     * // => [3]
     *
     * _.takeRight([1, 2, 3], 2);
     * // => [2, 3]
     *
     * _.takeRight([1, 2, 3], 5);
     * // => [1, 2, 3]
     *
     * _.takeRight([1, 2, 3], 0);
     * // => []
     */
    function takeRight(array, n, guard) {
      var length = array ? array.length : 0;
      if (!length) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      n = length - n;
      return baseSlice(array, n < 0 ? 0 : n, length);
    }

    /**
     * Creates a slice of `array` with elements taken from the end. Elements are
     * taken until `predicate` returns falsey. The predicate is invoked with three
     * arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.takeRightWhile(users, function(o) { return !o.active; });
     * // => objects for ['fred', 'pebbles']
     *
     * // using the `_.matches` iteratee shorthand
     * _.takeRightWhile(users, { 'user': 'pebbles', 'active': false });
     * // => objects for ['pebbles']
     *
     * // using the `_.matchesProperty` iteratee shorthand
     * _.takeRightWhile(users, ['active', false]);
     * // => objects for ['fred', 'pebbles']
     *
     * // using the `_.property` iteratee shorthand
     * _.takeRightWhile(users, 'active');
     * // => []
     */
    function takeRightWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3), false, true)
        : [];
    }

    /**
     * Creates a slice of `array` with elements taken from the beginning. Elements
     * are taken until `predicate` returns falsey. The predicate is invoked with
     * three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false},
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.takeWhile(users, function(o) { return !o.active; });
     * // => objects for ['barney', 'fred']
     *
     * // using the `_.matches` iteratee shorthand
     * _.takeWhile(users, { 'user': 'barney', 'active': false });
     * // => objects for ['barney']
     *
     * // using the `_.matchesProperty` iteratee shorthand
     * _.takeWhile(users, ['active', false]);
     * // => objects for ['barney', 'fred']
     *
     * // using the `_.property` iteratee shorthand
     * _.takeWhile(users, 'active');
     * // => []
     */
    function takeWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3))
        : [];
    }

    /**
     * Creates an array of unique values, in order, from all of the provided arrays
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * _.union([2, 1], [4, 2], [1, 2]);
     * // => [2, 1, 4]
     */
    var union = rest(function(arrays) {
      return baseUniq(baseFlatten(arrays, false, true));
    });

    /**
     * This method is like `_.union` except that it accepts `iteratee` which is
     * invoked for each element of each `arrays` to generate the criterion by which
     * uniqueness is computed. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function|Object|string} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * _.unionBy([2.1, 1.2], [4.3, 2.4], Math.floor);
     * // => [2.1, 1.2, 4.3]
     *
     * // using the `_.property` iteratee shorthand
     * _.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }, { 'x': 2 }]
     */
    var unionBy = rest(function(arrays) {
      var iteratee = last(arrays);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return baseUniq(baseFlatten(arrays, false, true), getIteratee(iteratee));
    });

    /**
     * This method is like `_.union` except that it accepts `comparator` which
     * is invoked to compare elements of `arrays`. The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.unionWith(objects, others, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
     */
    var unionWith = rest(function(arrays) {
      var comparator = last(arrays);
      if (isArrayLikeObject(comparator)) {
        comparator = undefined;
      }
      return baseUniq(baseFlatten(arrays, false, true), undefined, comparator);
    });

    /**
     * Creates a duplicate-free version of an array, using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
     * for equality comparisons, in which only the first occurrence of each element
     * is kept.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to inspect.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.uniq([2, 1, 2]);
     * // => [2, 1]
     */
    function uniq(array) {
      return (array && array.length)
        ? baseUniq(array)
        : [];
    }

    /**
     * This method is like `_.uniq` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * uniqueness is computed. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function|Object|string} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.uniqBy([2.1, 1.2, 2.3], Math.floor);
     * // => [2.1, 1.2]
     *
     * // using the `_.property` iteratee shorthand
     * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }, { 'x': 2 }]
     */
    function uniqBy(array, iteratee) {
      return (array && array.length)
        ? baseUniq(array, getIteratee(iteratee))
        : [];
    }

    /**
     * This method is like `_.uniq` except that it accepts `comparator` which
     * is invoked to compare elements of `array`. The comparator is invoked with
     * two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 },  { 'x': 1, 'y': 2 }];
     *
     * _.uniqWith(objects, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]
     */
    function uniqWith(array, comparator) {
      return (array && array.length)
        ? baseUniq(array, undefined, comparator)
        : [];
    }

    /**
     * This method is like `_.zip` except that it accepts an array of grouped
     * elements and creates an array regrouping the elements to their pre-zip
     * configuration.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array of grouped elements to process.
     * @returns {Array} Returns the new array of regrouped elements.
     * @example
     *
     * var zipped = _.zip(['fred', 'barney'], [30, 40], [true, false]);
     * // => [['fred', 30, true], ['barney', 40, false]]
     *
     * _.unzip(zipped);
     * // => [['fred', 'barney'], [30, 40], [true, false]]
     */
    function unzip(array) {
      if (!(array && array.length)) {
        return [];
      }
      var length = 0;
      array = arrayFilter(array, function(group) {
        if (isArrayLikeObject(group)) {
          length = nativeMax(group.length, length);
          return true;
        }
      });
      return baseTimes(length, function(index) {
        return arrayMap(array, baseProperty(index));
      });
    }

    /**
     * This method is like `_.unzip` except that it accepts `iteratee` to specify
     * how regrouped values should be combined. The iteratee is invoked with the
     * elements of each group: (...group).
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array of grouped elements to process.
     * @param {Function} [iteratee=_.identity] The function to combine regrouped values.
     * @returns {Array} Returns the new array of regrouped elements.
     * @example
     *
     * var zipped = _.zip([1, 2], [10, 20], [100, 200]);
     * // => [[1, 10, 100], [2, 20, 200]]
     *
     * _.unzipWith(zipped, _.add);
     * // => [3, 30, 300]
     */
    function unzipWith(array, iteratee) {
      if (!(array && array.length)) {
        return [];
      }
      var result = unzip(array);
      if (iteratee == null) {
        return result;
      }
      return arrayMap(result, function(group) {
        return apply(iteratee, undefined, group);
      });
    }

    /**
     * Creates an array excluding all provided values using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to filter.
     * @param {...*} [values] The values to exclude.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.without([1, 2, 1, 3], 1, 2);
     * // => [3]
     */
    var without = rest(function(array, values) {
      return isArrayLikeObject(array)
        ? baseDifference(array, values)
        : [];
    });

    /**
     * Creates an array of unique values that is the [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)
     * of the provided arrays.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of values.
     * @example
     *
     * _.xor([2, 1], [4, 2]);
     * // => [1, 4]
     */
    var xor = rest(function(arrays) {
      return baseXor(arrayFilter(arrays, isArrayLikeObject));
    });

    /**
     * This method is like `_.xor` except that it accepts `iteratee` which is
     * invoked for each element of each `arrays` to generate the criterion by which
     * uniqueness is computed. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function|Object|string} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of values.
     * @example
     *
     * _.xorBy([2.1, 1.2], [4.3, 2.4], Math.floor);
     * // => [1.2, 4.3]
     *
     * // using the `_.property` iteratee shorthand
     * _.xorBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 2 }]
     */
    var xorBy = rest(function(arrays) {
      var iteratee = last(arrays);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee));
    });

    /**
     * This method is like `_.xor` except that it accepts `comparator` which is
     * invoked to compare elements of `arrays`. The comparator is invoked with
     * two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.xorWith(objects, others, _.isEqual);
     * // => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
     */
    var xorWith = rest(function(arrays) {
      var comparator = last(arrays);
      if (isArrayLikeObject(comparator)) {
        comparator = undefined;
      }
      return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined, comparator);
    });

    /**
     * Creates an array of grouped elements, the first of which contains the first
     * elements of the given arrays, the second of which contains the second elements
     * of the given arrays, and so on.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {...Array} [arrays] The arrays to process.
     * @returns {Array} Returns the new array of grouped elements.
     * @example
     *
     * _.zip(['fred', 'barney'], [30, 40], [true, false]);
     * // => [['fred', 30, true], ['barney', 40, false]]
     */
    var zip = rest(unzip);

    /**
     * This method is like `_.fromPairs` except that it accepts two arrays,
     * one of property names and one of corresponding values.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} [props=[]] The property names.
     * @param {Array} [values=[]] The property values.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.zipObject(['fred', 'barney'], [30, 40]);
     * // => { 'fred': 30, 'barney': 40 }
     */
    function zipObject(props, values) {
      var index = -1,
          length = props ? props.length : 0,
          valsLength = values ? values.length : 0,
          result = {};

      while (++index < length) {
        baseSet(result, props[index], index < valsLength ? values[index] : undefined);
      }
      return result;
    }

    /**
     * This method is like `_.zip` except that it accepts `iteratee` to specify
     * how grouped values should be combined. The iteratee is invoked with the
     * elements of each group: (...group).
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {...Array} [arrays] The arrays to process.
     * @param {Function} [iteratee=_.identity] The function to combine grouped values.
     * @returns {Array} Returns the new array of grouped elements.
     * @example
     *
     * _.zipWith([1, 2], [10, 20], [100, 200], function(a, b, c) {
     *   return a + b + c;
     * });
     * // => [111, 222]
     */
    var zipWith = rest(function(arrays) {
      var length = arrays.length,
          iteratee = length > 1 ? arrays[length - 1] : undefined;

      iteratee = typeof iteratee == 'function' ? (arrays.pop(), iteratee) : undefined;
      return unzipWith(arrays, iteratee);
    });

    /*------------------------------------------------------------------------*/

    /**
     * Creates a `lodash` object that wraps `value` with explicit method chaining enabled.
     * The result of such method chaining must be unwrapped with `_#value`.
     *
     * @static
     * @memberOf _
     * @category Seq
     * @param {*} value The value to wrap.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36 },
     *   { 'user': 'fred',    'age': 40 },
     *   { 'user': 'pebbles', 'age': 1 }
     * ];
     *
     * var youngest = _
     *   .chain(users)
     *   .sortBy('age')
     *   .map(function(o) {
     *     return o.user + ' is ' + o.age;
     *   })
     *   .head()
     *   .value();
     * // => 'pebbles is 1'
     */
    function chain(value) {
      var result = lodash(value);
      result.__chain__ = true;
      return result;
    }

    /**
     * This method invokes `interceptor` and returns `value`. The interceptor is
     * invoked with one argument; (value). The purpose of this method is to "tap into"
     * a method chain in order to perform operations on intermediate results within
     * the chain.
     *
     * @static
     * @memberOf _
     * @category Seq
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @returns {*} Returns `value`.
     * @example
     *
     * _([1, 2, 3])
     *  .tap(function(array) {
     *    array.pop();
     *  })
     *  .reverse()
     *  .value();
     * // => [2, 1]
     */
    function tap(value, interceptor) {
      interceptor(value);
      return value;
    }

    /**
     * This method is like `_.tap` except that it returns the result of `interceptor`.
     *
     * @static
     * @memberOf _
     * @category Seq
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @returns {*} Returns the result of `interceptor`.
     * @example
     *
     * _('  abc  ')
     *  .chain()
     *  .trim()
     *  .thru(function(value) {
     *    return [value];
     *  })
     *  .value();
     * // => ['abc']
     */
    function thru(value, interceptor) {
      return interceptor(value);
    }

    /**
     * This method is the wrapper version of `_.at`.
     *
     * @name at
     * @memberOf _
     * @category Seq
     * @param {...(string|string[])} [paths] The property paths of elements to pick,
     *  specified individually or in arrays.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
     *
     * _(object).at(['a[0].b.c', 'a[1]']).value();
     * // => [3, 4]
     *
     * _(['a', 'b', 'c']).at(0, 2).value();
     * // => ['a', 'c']
     */
    var wrapperAt = rest(function(paths) {
      paths = baseFlatten(paths);
      var length = paths.length,
          start = length ? paths[0] : 0,
          value = this.__wrapped__,
          interceptor = function(object) { return baseAt(object, paths); };

      if (length > 1 || this.__actions__.length || !(value instanceof LazyWrapper) || !isIndex(start)) {
        return this.thru(interceptor);
      }
      value = value.slice(start, +start + (length ? 1 : 0));
      value.__actions__.push({ 'func': thru, 'args': [interceptor], 'thisArg': undefined });
      return new LodashWrapper(value, this.__chain__).thru(function(array) {
        if (length && !array.length) {
          array.push(undefined);
        }
        return array;
      });
    });

    /**
     * Enables explicit method chaining on the wrapper object.
     *
     * @name chain
     * @memberOf _
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 }
     * ];
     *
     * // without explicit chaining
     * _(users).head();
     * // => { 'user': 'barney', 'age': 36 }
     *
     * // with explicit chaining
     * _(users)
     *   .chain()
     *   .head()
     *   .pick('user')
     *   .value();
     * // => { 'user': 'barney' }
     */
    function wrapperChain() {
      return chain(this);
    }

    /**
     * Executes the chained sequence and returns the wrapped result.
     *
     * @name commit
     * @memberOf _
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var array = [1, 2];
     * var wrapped = _(array).push(3);
     *
     * console.log(array);
     * // => [1, 2]
     *
     * wrapped = wrapped.commit();
     * console.log(array);
     * // => [1, 2, 3]
     *
     * wrapped.last();
     * // => 3
     *
     * console.log(array);
     * // => [1, 2, 3]
     */
    function wrapperCommit() {
      return new LodashWrapper(this.value(), this.__chain__);
    }

    /**
     * This method is the wrapper version of `_.flatMap`.
     *
     * @static
     * @memberOf _
     * @category Seq
     * @param {Function|Object|string} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * function duplicate(n) {
     *   return [n, n];
     * }
     *
     * _([1, 2]).flatMap(duplicate).value();
     * // => [1, 1, 2, 2]
     */
    function wrapperFlatMap(iteratee) {
      return this.map(iteratee).flatten();
    }

    /**
     * Gets the next value on a wrapped object following the
     * [iterator protocol](https://mdn.io/iteration_protocols#iterator).
     *
     * @name next
     * @memberOf _
     * @category Seq
     * @returns {Object} Returns the next iterator value.
     * @example
     *
     * var wrapped = _([1, 2]);
     *
     * wrapped.next();
     * // => { 'done': false, 'value': 1 }
     *
     * wrapped.next();
     * // => { 'done': false, 'value': 2 }
     *
     * wrapped.next();
     * // => { 'done': true, 'value': undefined }
     */
    function wrapperNext() {
      if (this.__values__ === undefined) {
        this.__values__ = toArray(this.value());
      }
      var done = this.__index__ >= this.__values__.length,
          value = done ? undefined : this.__values__[this.__index__++];

      return { 'done': done, 'value': value };
    }

    /**
     * Enables the wrapper to be iterable.
     *
     * @name Symbol.iterator
     * @memberOf _
     * @category Seq
     * @returns {Object} Returns the wrapper object.
     * @example
     *
     * var wrapped = _([1, 2]);
     *
     * wrapped[Symbol.iterator]() === wrapped;
     * // => true
     *
     * Array.from(wrapped);
     * // => [1, 2]
     */
    function wrapperToIterator() {
      return this;
    }

    /**
     * Creates a clone of the chained sequence planting `value` as the wrapped value.
     *
     * @name plant
     * @memberOf _
     * @category Seq
     * @param {*} value The value to plant.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var wrapped = _([1, 2]).map(square);
     * var other = wrapped.plant([3, 4]);
     *
     * other.value();
     * // => [9, 16]
     *
     * wrapped.value();
     * // => [1, 4]
     */
    function wrapperPlant(value) {
      var result,
          parent = this;

      while (parent instanceof baseLodash) {
        var clone = wrapperClone(parent);
        clone.__index__ = 0;
        clone.__values__ = undefined;
        if (result) {
          previous.__wrapped__ = clone;
        } else {
          result = clone;
        }
        var previous = clone;
        parent = parent.__wrapped__;
      }
      previous.__wrapped__ = value;
      return result;
    }

    /**
     * This method is the wrapper version of `_.reverse`.
     *
     * **Note:** This method mutates the wrapped array.
     *
     * @name reverse
     * @memberOf _
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _(array).reverse().value()
     * // => [3, 2, 1]
     *
     * console.log(array);
     * // => [3, 2, 1]
     */
    function wrapperReverse() {
      var value = this.__wrapped__;
      if (value instanceof LazyWrapper) {
        var wrapped = value;
        if (this.__actions__.length) {
          wrapped = new LazyWrapper(this);
        }
        wrapped = wrapped.reverse();
        wrapped.__actions__.push({ 'func': thru, 'args': [reverse], 'thisArg': undefined });
        return new LodashWrapper(wrapped, this.__chain__);
      }
      return this.thru(reverse);
    }

    /**
     * Executes the chained sequence to extract the unwrapped value.
     *
     * @name value
     * @memberOf _
     * @alias run, toJSON, valueOf
     * @category Seq
     * @returns {*} Returns the resolved unwrapped value.
     * @example
     *
     * _([1, 2, 3]).value();
     * // => [1, 2, 3]
     */
    function wrapperValue() {
      return baseWrapperValue(this.__wrapped__, this.__actions__);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` through `iteratee`. The corresponding value
     * of each key is the number of times the key was returned by `iteratee`.
     * The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function|Object|string} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.countBy([6.1, 4.2, 6.3], Math.floor);
     * // => { '4': 1, '6': 2 }
     *
     * _.countBy(['one', 'two', 'three'], 'length');
     * // => { '3': 2, '5': 1 }
     */
    var countBy = createAggregator(function(result, value, key) {
      hasOwnProperty.call(result, key) ? ++result[key] : (result[key] = 1);
    });

    /**
     * Checks if `predicate` returns truthy for **all** elements of `collection`.
     * Iteration is stopped once `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.
     * @param- {Object} [guard] Enables use as an iteratee for functions like `_.map`.
     * @returns {boolean} Returns `true` if all elements pass the predicate check, else `false`.
     * @example
     *
     * _.every([true, 1, null, 'yes'], Boolean);
     * // => false
     *
     * var users = [
     *   { 'user': 'barney', 'active': false },
     *   { 'user': 'fred',   'active': false }
     * ];
     *
     * // using the `_.matches` iteratee shorthand
     * _.every(users, { 'user': 'barney', 'active': false });
     * // => false
     *
     * // using the `_.matchesProperty` iteratee shorthand
     * _.every(users, ['active', false]);
     * // => true
     *
     * // using the `_.property` iteratee shorthand
     * _.every(users, 'active');
     * // => false
     */
    function every(collection, predicate, guard) {
      var func = isArray(collection) ? arrayEvery : baseEvery;
      if (guard && isIterateeCall(collection, predicate, guard)) {
        predicate = undefined;
      }
      return func(collection, getIteratee(predicate, 3));
    }

    /**
     * Iterates over elements of `collection`, returning an array of all elements
     * `predicate` returns truthy for. The predicate is invoked with three arguments:
     * (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * _.filter(users, function(o) { return !o.active; });
     * // => objects for ['fred']
     *
     * // using the `_.matches` iteratee shorthand
     * _.filter(users, { 'age': 36, 'active': true });
     * // => objects for ['barney']
     *
     * // using the `_.matchesProperty` iteratee shorthand
     * _.filter(users, ['active', false]);
     * // => objects for ['fred']
     *
     * // using the `_.property` iteratee shorthand
     * _.filter(users, 'active');
     * // => objects for ['barney']
     */
    function filter(collection, predicate) {
      var func = isArray(collection) ? arrayFilter : baseFilter;
      return func(collection, getIteratee(predicate, 3));
    }

    /**
     * Iterates over elements of `collection`, returning the first element
     * `predicate` returns truthy for. The predicate is invoked with three arguments:
     * (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object} collection The collection to search.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36, 'active': true },
     *   { 'user': 'fred',    'age': 40, 'active': false },
     *   { 'user': 'pebbles', 'age': 1,  'active': true }
     * ];
     *
     * _.find(users, function(o) { return o.age < 40; });
     * // => object for 'barney'
     *
     * // using the `_.matches` iteratee shorthand
     * _.find(users, { 'age': 1, 'active': true });
     * // => object for 'pebbles'
     *
     * // using the `_.matchesProperty` iteratee shorthand
     * _.find(users, ['active', false]);
     * // => object for 'fred'
     *
     * // using the `_.property` iteratee shorthand
     * _.find(users, 'active');
     * // => object for 'barney'
     */
    function find(collection, predicate) {
      predicate = getIteratee(predicate, 3);
      if (isArray(collection)) {
        var index = baseFindIndex(collection, predicate);
        return index > -1 ? collection[index] : undefined;
      }
      return baseFind(collection, predicate, baseEach);
    }

    /**
     * This method is like `_.find` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object} collection The collection to search.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * _.findLast([1, 2, 3, 4], function(n) {
     *   return n % 2 == 1;
     * });
     * // => 3
     */
    function findLast(collection, predicate) {
      predicate = getIteratee(predicate, 3);
      if (isArray(collection)) {
        var index = baseFindIndex(collection, predicate, true);
        return index > -1 ? collection[index] : undefined;
      }
      return baseFind(collection, predicate, baseEachRight);
    }

    /**
     * Iterates over elements of `collection` invoking `iteratee` for each element.
     * The iteratee is invoked with three arguments: (value, index|key, collection).
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * **Note:** As with other "Collections" methods, objects with a "length" property
     * are iterated like arrays. To avoid this behavior use `_.forIn` or `_.forOwn`
     * for object iteration.
     *
     * @static
     * @memberOf _
     * @alias each
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     * @example
     *
     * _([1, 2]).forEach(function(value) {
     *   console.log(value);
     * });
     * // => logs `1` then `2`
     *
     * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {
     *   console.log(key);
     * });
     * // => logs 'a' then 'b' (iteration order is not guaranteed)
     */
    function forEach(collection, iteratee) {
      return (typeof iteratee == 'function' && isArray(collection))
        ? arrayEach(collection, iteratee)
        : baseEach(collection, toFunction(iteratee));
    }

    /**
     * This method is like `_.forEach` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @alias eachRight
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     * @example
     *
     * _.forEachRight([1, 2], function(value) {
     *   console.log(value);
     * });
     * // => logs `2` then `1`
     */
    function forEachRight(collection, iteratee) {
      return (typeof iteratee == 'function' && isArray(collection))
        ? arrayEachRight(collection, iteratee)
        : baseEachRight(collection, toFunction(iteratee));
    }

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` through `iteratee`. The corresponding value
     * of each key is an array of the elements responsible for generating the key.
     * The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function|Object|string} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.groupBy([6.1, 4.2, 6.3], Math.floor);
     * // => { '4': [4.2], '6': [6.1, 6.3] }
     *
     * // using the `_.property` iteratee shorthand
     * _.groupBy(['one', 'two', 'three'], 'length');
     * // => { '3': ['one', 'two'], '5': ['three'] }
     */
    var groupBy = createAggregator(function(result, value, key) {
      if (hasOwnProperty.call(result, key)) {
        result[key].push(value);
      } else {
        result[key] = [value];
      }
    });

    /**
     * Checks if `value` is in `collection`. If `collection` is a string it's checked
     * for a substring of `value`, otherwise [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
     * is used for equality comparisons. If `fromIndex` is negative, it's used as
     * the offset from the end of `collection`.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to search.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=0] The index to search from.
     * @param- {Object} [guard] Enables use as an iteratee for functions like `_.reduce`.
     * @returns {boolean} Returns `true` if `value` is found, else `false`.
     * @example
     *
     * _.includes([1, 2, 3], 1);
     * // => true
     *
     * _.includes([1, 2, 3], 1, 2);
     * // => false
     *
     * _.includes({ 'user': 'fred', 'age': 40 }, 'fred');
     * // => true
     *
     * _.includes('pebbles', 'eb');
     * // => true
     */
    function includes(collection, value, fromIndex, guard) {
      collection = isArrayLike(collection) ? collection : values(collection);
      fromIndex = (fromIndex && !guard) ? toInteger(fromIndex) : 0;

      var length = collection.length;
      if (fromIndex < 0) {
        fromIndex = nativeMax(length + fromIndex, 0);
      }
      return isString(collection)
        ? (fromIndex <= length && collection.indexOf(value, fromIndex) > -1)
        : (!!length && baseIndexOf(collection, value, fromIndex) > -1);
    }

    /**
     * Invokes the method at `path` of each element in `collection`, returning
     * an array of the results of each invoked method. Any additional arguments
     * are provided to each invoked method. If `methodName` is a function it's
     * invoked for, and `this` bound to, each element in `collection`.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Array|Function|string} path The path of the method to invoke or
     *  the function invoked per iteration.
     * @param {...*} [args] The arguments to invoke each method with.
     * @returns {Array} Returns the array of results.
     * @example
     *
     * _.invokeMap([[5, 1, 7], [3, 2, 1]], 'sort');
     * // => [[1, 5, 7], [1, 2, 3]]
     *
     * _.invokeMap([123, 456], String.prototype.split, '');
     * // => [['1', '2', '3'], ['4', '5', '6']]
     */
    var invokeMap = rest(function(collection, path, args) {
      var index = -1,
          isFunc = typeof path == 'function',
          isProp = isKey(path),
          result = isArrayLike(collection) ? Array(collection.length) : [];

      baseEach(collection, function(value) {
        var func = isFunc ? path : ((isProp && value != null) ? value[path] : undefined);
        result[++index] = func ? apply(func, value, args) : baseInvoke(value, path, args);
      });
      return result;
    });

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` through `iteratee`. The corresponding value
     * of each key is the last element responsible for generating the key. The
     * iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function|Object|string} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * var keyData = [
     *   { 'dir': 'left', 'code': 97 },
     *   { 'dir': 'right', 'code': 100 }
     * ];
     *
     * _.keyBy(keyData, 'dir');
     * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
     *
     * _.keyBy(keyData, function(o) {
     *   return String.fromCharCode(o.code);
     * });
     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
     */
    var keyBy = createAggregator(function(result, value, key) {
      result[key] = value;
    });

    /**
     * Creates an array of values by running each element in `collection` through
     * `iteratee`. The iteratee is invoked with three arguments:
     * (value, index|key, collection).
     *
     * Many lodash methods are guarded to work as iteratees for methods like
     * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
     *
     * The guarded methods are:
     * `ary`, `curry`, `curryRight`, `drop`, `dropRight`, `every`, `fill`,
     * `invert`, `parseInt`, `random`, `range`, `rangeRight`, `slice`, `some`,
     * `sortBy`, `take`, `takeRight`, `template`, `trim`, `trimEnd`, `trimStart`,
     * and `words`
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function|Object|string} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * _.map([1, 2], square);
     * // => [3, 6]
     *
     * _.map({ 'a': 1, 'b': 2 }, square);
     * // => [3, 6] (iteration order is not guaranteed)
     *
     * var users = [
     *   { 'user': 'barney' },
     *   { 'user': 'fred' }
     * ];
     *
     * // using the `_.property` iteratee shorthand
     * _.map(users, 'user');
     * // => ['barney', 'fred']
     */
    function map(collection, iteratee) {
      var func = isArray(collection) ? arrayMap : baseMap;
      return func(collection, getIteratee(iteratee, 3));
    }

    /**
     * This method is like `_.sortBy` except that it allows specifying the sort
     * orders of the iteratees to sort by. If `orders` is unspecified, all values
     * are sorted in ascending order. Otherwise, specify an order of "desc" for
     * descending or "asc" for ascending sort order of corresponding values.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function[]|Object[]|string[]} [iteratees=[_.identity]] The iteratees to sort by.
     * @param {string[]} [orders] The sort orders of `iteratees`.
     * @param- {Object} [guard] Enables use as an iteratee for functions like `_.reduce`.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * var users = [
     *   { 'user': 'fred',   'age': 48 },
     *   { 'user': 'barney', 'age': 34 },
     *   { 'user': 'fred',   'age': 42 },
     *   { 'user': 'barney', 'age': 36 }
     * ];
     *
     * // sort by `user` in ascending order and by `age` in descending order
     * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);
     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 42]]
     */
    function orderBy(collection, iteratees, orders, guard) {
      if (collection == null) {
        return [];
      }
      if (!isArray(iteratees)) {
        iteratees = iteratees == null ? [] : [iteratees];
      }
      orders = guard ? undefined : orders;
      if (!isArray(orders)) {
        orders = orders == null ? [] : [orders];
      }
      return baseOrderBy(collection, iteratees, orders);
    }

    /**
     * Creates an array of elements split into two groups, the first of which
     * contains elements `predicate` returns truthy for, while the second of which
     * contains elements `predicate` returns falsey for. The predicate is invoked
     * with three arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the array of grouped elements.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36, 'active': false },
     *   { 'user': 'fred',    'age': 40, 'active': true },
     *   { 'user': 'pebbles', 'age': 1,  'active': false }
     * ];
     *
     * _.partition(users, function(o) { return o.active; });
     * // => objects for [['fred'], ['barney', 'pebbles']]
     *
     * // using the `_.matches` iteratee shorthand
     * _.partition(users, { 'age': 1, 'active': false });
     * // => objects for [['pebbles'], ['barney', 'fred']]
     *
     * // using the `_.matchesProperty` iteratee shorthand
     * _.partition(users, ['active', false]);
     * // => objects for [['barney', 'pebbles'], ['fred']]
     *
     * // using the `_.property` iteratee shorthand
     * _.partition(users, 'active');
     * // => objects for [['fred'], ['barney', 'pebbles']]
     */
    var partition = createAggregator(function(result, value, key) {
      result[key ? 0 : 1].push(value);
    }, function() { return [[], []]; });

    /**
     * Reduces `collection` to a value which is the accumulated result of running
     * each element in `collection` through `iteratee`, where each successive
     * invocation is supplied the return value of the previous. If `accumulator`
     * is not provided the first element of `collection` is used as the initial
     * value. The iteratee is invoked with four arguments:
     * (accumulator, value, index|key, collection).
     *
     * Many lodash methods are guarded to work as iteratees for methods like
     * `_.reduce`, `_.reduceRight`, and `_.transform`.
     *
     * The guarded methods are:
     * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,
     * and `sortBy`
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @returns {*} Returns the accumulated value.
     * @example
     *
     * _.reduce([1, 2], function(sum, n) {
     *   return sum + n;
     * });
     * // => 3
     *
     * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
     *   (result[value] || (result[value] = [])).push(key);
     *   return result;
     * }, {});
     * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)
     */
    function reduce(collection, iteratee, accumulator) {
      var func = isArray(collection) ? arrayReduce : baseReduce,
          initFromCollection = arguments.length < 3;

      return func(collection, getIteratee(iteratee, 4), accumulator, initFromCollection, baseEach);
    }

    /**
     * This method is like `_.reduce` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @returns {*} Returns the accumulated value.
     * @example
     *
     * var array = [[0, 1], [2, 3], [4, 5]];
     *
     * _.reduceRight(array, function(flattened, other) {
     *   return flattened.concat(other);
     * }, []);
     * // => [4, 5, 2, 3, 0, 1]
     */
    function reduceRight(collection, iteratee, accumulator) {
      var func = isArray(collection) ? arrayReduceRight : baseReduce,
          initFromCollection = arguments.length < 3;

      return func(collection, getIteratee(iteratee, 4), accumulator, initFromCollection, baseEachRight);
    }

    /**
     * The opposite of `_.filter`; this method returns the elements of `collection`
     * that `predicate` does **not** return truthy for.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': false },
     *   { 'user': 'fred',   'age': 40, 'active': true }
     * ];
     *
     * _.reject(users, function(o) { return !o.active; });
     * // => objects for ['fred']
     *
     * // using the `_.matches` iteratee shorthand
     * _.reject(users, { 'age': 40, 'active': true });
     * // => objects for ['barney']
     *
     * // using the `_.matchesProperty` iteratee shorthand
     * _.reject(users, ['active', false]);
     * // => objects for ['fred']
     *
     * // using the `_.property` iteratee shorthand
     * _.reject(users, 'active');
     * // => objects for ['barney']
     */
    function reject(collection, predicate) {
      var func = isArray(collection) ? arrayFilter : baseFilter;
      predicate = getIteratee(predicate, 3);
      return func(collection, function(value, index, collection) {
        return !predicate(value, index, collection);
      });
    }

    /**
     * Gets a random element from `collection`.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object} collection The collection to sample.
     * @returns {*} Returns the random element.
     * @example
     *
     * _.sample([1, 2, 3, 4]);
     * // => 2
     */
    function sample(collection) {
      var array = isArrayLike(collection) ? collection : values(collection),
          length = array.length;

      return length > 0 ? array[baseRandom(0, length - 1)] : undefined;
    }

    /**
     * Gets `n` random elements from `collection`.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object} collection The collection to sample.
     * @param {number} [n=0] The number of elements to sample.
     * @returns {Array} Returns the random elements.
     * @example
     *
     * _.sampleSize([1, 2, 3, 4], 2);
     * // => [3, 1]
     */
    function sampleSize(collection, n) {
      var index = -1,
          result = toArray(collection),
          length = result.length,
          lastIndex = length - 1;

      n = baseClamp(toInteger(n), 0, length);
      while (++index < n) {
        var rand = baseRandom(index, lastIndex),
            value = result[rand];

        result[rand] = result[index];
        result[index] = value;
      }
      result.length = n;
      return result;
    }

    /**
     * Creates an array of shuffled values, using a version of the
     * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object} collection The collection to shuffle.
     * @returns {Array} Returns the new shuffled array.
     * @example
     *
     * _.shuffle([1, 2, 3, 4]);
     * // => [4, 1, 3, 2]
     */
    function shuffle(collection) {
      return sampleSize(collection, MAX_ARRAY_LENGTH);
    }

    /**
     * Gets the size of `collection` by returning its length for array-like
     * values or the number of own enumerable properties for objects.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object} collection The collection to inspect.
     * @returns {number} Returns the collection size.
     * @example
     *
     * _.size([1, 2, 3]);
     * // => 3
     *
     * _.size({ 'a': 1, 'b': 2 });
     * // => 2
     *
     * _.size('pebbles');
     * // => 7
     */
    function size(collection) {
      if (collection == null) {
        return 0;
      }
      if (isArrayLike(collection)) {
        var result = collection.length;
        return (result && isString(collection)) ? stringSize(collection) : result;
      }
      return keys(collection).length;
    }

    /**
     * Checks if `predicate` returns truthy for **any** element of `collection`.
     * Iteration is stopped once `predicate` returns truthy. The predicate is
     * invoked with three arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.
     * @param- {Object} [guard] Enables use as an iteratee for functions like `_.map`.
     * @returns {boolean} Returns `true` if any element passes the predicate check, else `false`.
     * @example
     *
     * _.some([null, 0, 'yes', false], Boolean);
     * // => true
     *
     * var users = [
     *   { 'user': 'barney', 'active': true },
     *   { 'user': 'fred',   'active': false }
     * ];
     *
     * // using the `_.matches` iteratee shorthand
     * _.some(users, { 'user': 'barney', 'active': false });
     * // => false
     *
     * // using the `_.matchesProperty` iteratee shorthand
     * _.some(users, ['active', false]);
     * // => true
     *
     * // using the `_.property` iteratee shorthand
     * _.some(users, 'active');
     * // => true
     */
    function some(collection, predicate, guard) {
      var func = isArray(collection) ? arraySome : baseSome;
      if (guard && isIterateeCall(collection, predicate, guard)) {
        predicate = undefined;
      }
      return func(collection, getIteratee(predicate, 3));
    }

    /**
     * Creates an array of elements, sorted in ascending order by the results of
     * running each element in a collection through each iteratee. This method
     * performs a stable sort, that is, it preserves the original sort order of
     * equal elements. The iteratees are invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {...(Function|Function[]|Object|Object[]|string|string[])} [iteratees=[_.identity]]
     *  The iteratees to sort by, specified individually or in arrays.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * var users = [
     *   { 'user': 'fred',   'age': 48 },
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 42 },
     *   { 'user': 'barney', 'age': 34 }
     * ];
     *
     * _.sortBy(users, function(o) { return o.user; });
     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 42]]
     *
     * _.sortBy(users, ['user', 'age']);
     * // => objects for [['barney', 34], ['barney', 36], ['fred', 42], ['fred', 48]]
     *
     * _.sortBy(users, 'user', function(o) {
     *   return Math.floor(o.age / 10);
     * });
     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 42]]
     */
    var sortBy = rest(function(collection, iteratees) {
      if (collection == null) {
        return [];
      }
      var length = iteratees.length;
      if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
        iteratees = [];
      } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
        iteratees.length = 1;
      }
      return baseOrderBy(collection, baseFlatten(iteratees), []);
    });

    /*------------------------------------------------------------------------*/

    /**
     * Gets the timestamp of the number of milliseconds that have elapsed since
     * the Unix epoch (1 January 1970 00:00:00 UTC).
     *
     * @static
     * @memberOf _
     * @type Function
     * @category Date
     * @returns {number} Returns the timestamp.
     * @example
     *
     * _.defer(function(stamp) {
     *   console.log(_.now() - stamp);
     * }, _.now());
     * // => logs the number of milliseconds it took for the deferred function to be invoked
     */
    var now = Date.now;

    /*------------------------------------------------------------------------*/

    /**
     * The opposite of `_.before`; this method creates a function that invokes
     * `func` once it's called `n` or more times.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {number} n The number of calls before `func` is invoked.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var saves = ['profile', 'settings'];
     *
     * var done = _.after(saves.length, function() {
     *   console.log('done saving!');
     * });
     *
     * _.forEach(saves, function(type) {
     *   asyncSave({ 'type': type, 'complete': done });
     * });
     * // => logs 'done saving!' after the two async saves have completed
     */
    function after(n, func) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      n = toInteger(n);
      return function() {
        if (--n < 1) {
          return func.apply(this, arguments);
        }
      };
    }

    /**
     * Creates a function that accepts up to `n` arguments, ignoring any
     * additional arguments.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to cap arguments for.
     * @param {number} [n=func.length] The arity cap.
     * @param- {Object} [guard] Enables use as an iteratee for functions like `_.map`.
     * @returns {Function} Returns the new function.
     * @example
     *
     * _.map(['6', '8', '10'], _.ary(parseInt, 1));
     * // => [6, 8, 10]
     */
    function ary(func, n, guard) {
      n = guard ? undefined : n;
      n = (func && n == null) ? func.length : n;
      return createWrapper(func, ARY_FLAG, undefined, undefined, undefined, undefined, n);
    }

    /**
     * Creates a function that invokes `func`, with the `this` binding and arguments
     * of the created function, while it's called less than `n` times. Subsequent
     * calls to the created function return the result of the last `func` invocation.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {number} n The number of calls at which `func` is no longer invoked.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * jQuery(element).on('click', _.before(5, addContactToList));
     * // => allows adding up to 4 contacts to the list
     */
    function before(n, func) {
      var result;
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      n = toInteger(n);
      return function() {
        if (--n > 0) {
          result = func.apply(this, arguments);
        }
        if (n <= 1) {
          func = undefined;
        }
        return result;
      };
    }

    /**
     * Creates a function that invokes `func` with the `this` binding of `thisArg`
     * and prepends any additional `_.bind` arguments to those provided to the
     * bound function.
     *
     * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,
     * may be used as a placeholder for partially applied arguments.
     *
     * **Note:** Unlike native `Function#bind` this method doesn't set the "length"
     * property of bound functions.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to bind.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * var greet = function(greeting, punctuation) {
     *   return greeting + ' ' + this.user + punctuation;
     * };
     *
     * var object = { 'user': 'fred' };
     *
     * var bound = _.bind(greet, object, 'hi');
     * bound('!');
     * // => 'hi fred!'
     *
     * // using placeholders
     * var bound = _.bind(greet, object, _, '!');
     * bound('hi');
     * // => 'hi fred!'
     */
    var bind = rest(function(func, thisArg, partials) {
      var bitmask = BIND_FLAG;
      if (partials.length) {
        var holders = replaceHolders(partials, bind.placeholder);
        bitmask |= PARTIAL_FLAG;
      }
      return createWrapper(func, bitmask, thisArg, partials, holders);
    });

    /**
     * Creates a function that invokes the method at `object[key]` and prepends
     * any additional `_.bindKey` arguments to those provided to the bound function.
     *
     * This method differs from `_.bind` by allowing bound functions to reference
     * methods that may be redefined or don't yet exist.
     * See [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)
     * for more details.
     *
     * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Object} object The object to invoke the method on.
     * @param {string} key The key of the method.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * var object = {
     *   'user': 'fred',
     *   'greet': function(greeting, punctuation) {
     *     return greeting + ' ' + this.user + punctuation;
     *   }
     * };
     *
     * var bound = _.bindKey(object, 'greet', 'hi');
     * bound('!');
     * // => 'hi fred!'
     *
     * object.greet = function(greeting, punctuation) {
     *   return greeting + 'ya ' + this.user + punctuation;
     * };
     *
     * bound('!');
     * // => 'hiya fred!'
     *
     * // using placeholders
     * var bound = _.bindKey(object, 'greet', _, '!');
     * bound('hi');
     * // => 'hiya fred!'
     */
    var bindKey = rest(function(object, key, partials) {
      var bitmask = BIND_FLAG | BIND_KEY_FLAG;
      if (partials.length) {
        var holders = replaceHolders(partials, bindKey.placeholder);
        bitmask |= PARTIAL_FLAG;
      }
      return createWrapper(key, bitmask, object, partials, holders);
    });

    /**
     * Creates a function that accepts arguments of `func` and either invokes
     * `func` returning its result, if at least `arity` number of arguments have
     * been provided, or returns a function that accepts the remaining `func`
     * arguments, and so on. The arity of `func` may be specified if `func.length`
     * is not sufficient.
     *
     * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,
     * may be used as a placeholder for provided arguments.
     *
     * **Note:** This method doesn't set the "length" property of curried functions.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to curry.
     * @param {number} [arity=func.length] The arity of `func`.
     * @param- {Object} [guard] Enables use as an iteratee for functions like `_.map`.
     * @returns {Function} Returns the new curried function.
     * @example
     *
     * var abc = function(a, b, c) {
     *   return [a, b, c];
     * };
     *
     * var curried = _.curry(abc);
     *
     * curried(1)(2)(3);
     * // => [1, 2, 3]
     *
     * curried(1, 2)(3);
     * // => [1, 2, 3]
     *
     * curried(1, 2, 3);
     * // => [1, 2, 3]
     *
     * // using placeholders
     * curried(1)(_, 3)(2);
     * // => [1, 2, 3]
     */
    function curry(func, arity, guard) {
      arity = guard ? undefined : arity;
      var result = createWrapper(func, CURRY_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
      result.placeholder = curry.placeholder;
      return result;
    }

    /**
     * This method is like `_.curry` except that arguments are applied to `func`
     * in the manner of `_.partialRight` instead of `_.partial`.
     *
     * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for provided arguments.
     *
     * **Note:** This method doesn't set the "length" property of curried functions.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to curry.
     * @param {number} [arity=func.length] The arity of `func`.
     * @param- {Object} [guard] Enables use as an iteratee for functions like `_.map`.
     * @returns {Function} Returns the new curried function.
     * @example
     *
     * var abc = function(a, b, c) {
     *   return [a, b, c];
     * };
     *
     * var curried = _.curryRight(abc);
     *
     * curried(3)(2)(1);
     * // => [1, 2, 3]
     *
     * curried(2, 3)(1);
     * // => [1, 2, 3]
     *
     * curried(1, 2, 3);
     * // => [1, 2, 3]
     *
     * // using placeholders
     * curried(3)(1, _)(2);
     * // => [1, 2, 3]
     */
    function curryRight(func, arity, guard) {
      arity = guard ? undefined : arity;
      var result = createWrapper(func, CURRY_RIGHT_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
      result.placeholder = curryRight.placeholder;
      return result;
    }

    /**
     * Creates a debounced function that delays invoking `func` until after `wait`
     * milliseconds have elapsed since the last time the debounced function was
     * invoked. The debounced function comes with a `cancel` method to cancel
     * delayed `func` invocations and a `flush` method to immediately invoke them.
     * Provide an options object to indicate whether `func` should be invoked on
     * the leading and/or trailing edge of the `wait` timeout. The `func` is invoked
     * with the last arguments provided to the debounced function. Subsequent calls
     * to the debounced function return the result of the last `func` invocation.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is invoked
     * on the trailing edge of the timeout only if the the debounced function is
     * invoked more than once during the `wait` timeout.
     *
     * See [David Corbacho's article](http://drupalmotion.com/article/debounce-and-throttle-visual-explanation)
     * for details over the differences between `_.debounce` and `_.throttle`.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to debounce.
     * @param {number} [wait=0] The number of milliseconds to delay.
     * @param {Object} [options] The options object.
     * @param {boolean} [options.leading=false] Specify invoking on the leading
     *  edge of the timeout.
     * @param {number} [options.maxWait] The maximum time `func` is allowed to be
     *  delayed before it's invoked.
     * @param {boolean} [options.trailing=true] Specify invoking on the trailing
     *  edge of the timeout.
     * @returns {Function} Returns the new debounced function.
     * @example
     *
     * // avoid costly calculations while the window size is in flux
     * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
     *
     * // invoke `sendMail` when clicked, debouncing subsequent calls
     * jQuery(element).on('click', _.debounce(sendMail, 300, {
     *   'leading': true,
     *   'trailing': false
     * }));
     *
     * // ensure `batchLog` is invoked once after 1 second of debounced calls
     * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
     * var source = new EventSource('/stream');
     * jQuery(source).on('message', debounced);
     *
     * // cancel a trailing debounced invocation
     * jQuery(window).on('popstate', debounced.cancel);
     */
    function debounce(func, wait, options) {
      var args,
          maxTimeoutId,
          result,
          stamp,
          thisArg,
          timeoutId,
          trailingCall,
          lastCalled = 0,
          leading = false,
          maxWait = false,
          trailing = true;

      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      wait = toNumber(wait) || 0;
      if (isObject(options)) {
        leading = !!options.leading;
        maxWait = 'maxWait' in options && nativeMax(toNumber(options.maxWait) || 0, wait);
        trailing = 'trailing' in options ? !!options.trailing : trailing;
      }

      function cancel() {
        if (timeoutId) {
          clearTimeout(timeoutId);
        }
        if (maxTimeoutId) {
          clearTimeout(maxTimeoutId);
        }
        lastCalled = 0;
        args = maxTimeoutId = thisArg = timeoutId = trailingCall = undefined;
      }

      function complete(isCalled, id) {
        if (id) {
          clearTimeout(id);
        }
        maxTimeoutId = timeoutId = trailingCall = undefined;
        if (isCalled) {
          lastCalled = now();
          result = func.apply(thisArg, args);
          if (!timeoutId && !maxTimeoutId) {
            args = thisArg = undefined;
          }
        }
      }

      function delayed() {
        var remaining = wait - (now() - stamp);
        if (remaining <= 0 || remaining > wait) {
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }

      function flush() {
        if ((timeoutId && trailingCall) || (maxTimeoutId && trailing)) {
          result = func.apply(thisArg, args);
        }
        cancel();
        return result;
      }

      function maxDelayed() {
        complete(trailing, timeoutId);
      }

      function debounced() {
        args = arguments;
        stamp = now();
        thisArg = this;
        trailingCall = trailing && (timeoutId || !leading);

        if (maxWait === false) {
          var leadingCall = leading && !timeoutId;
        } else {
          if (!maxTimeoutId && !leading) {
            lastCalled = stamp;
          }
          var remaining = maxWait - (stamp - lastCalled),
              isCalled = remaining <= 0 || remaining > maxWait;

          if (isCalled) {
            if (maxTimeoutId) {
              maxTimeoutId = clearTimeout(maxTimeoutId);
            }
            lastCalled = stamp;
            result = func.apply(thisArg, args);
          }
          else if (!maxTimeoutId) {
            maxTimeoutId = setTimeout(maxDelayed, remaining);
          }
        }
        if (isCalled && timeoutId) {
          timeoutId = clearTimeout(timeoutId);
        }
        else if (!timeoutId && wait !== maxWait) {
          timeoutId = setTimeout(delayed, wait);
        }
        if (leadingCall) {
          isCalled = true;
          result = func.apply(thisArg, args);
        }
        if (isCalled && !timeoutId && !maxTimeoutId) {
          args = thisArg = undefined;
        }
        return result;
      }
      debounced.cancel = cancel;
      debounced.flush = flush;
      return debounced;
    }

    /**
     * Defers invoking the `func` until the current call stack has cleared. Any
     * additional arguments are provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to defer.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.defer(function(text) {
     *   console.log(text);
     * }, 'deferred');
     * // logs 'deferred' after one or more milliseconds
     */
    var defer = rest(function(func, args) {
      return baseDelay(func, 1, args);
    });

    /**
     * Invokes `func` after `wait` milliseconds. Any additional arguments are
     * provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.delay(function(text) {
     *   console.log(text);
     * }, 1000, 'later');
     * // => logs 'later' after one second
     */
    var delay = rest(function(func, wait, args) {
      return baseDelay(func, toNumber(wait) || 0, args);
    });

    /**
     * Creates a function that invokes `func` with arguments reversed.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to flip arguments for.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var flipped = _.flip(function() {
     *   return _.toArray(arguments);
     * });
     *
     * flipped('a', 'b', 'c', 'd');
     * // => ['d', 'c', 'b', 'a']
     */
    function flip(func) {
      return createWrapper(func, FLIP_FLAG);
    }

    /**
     * Creates a function that memoizes the result of `func`. If `resolver` is
     * provided it determines the cache key for storing the result based on the
     * arguments provided to the memoized function. By default, the first argument
     * provided to the memoized function is used as the map cache key. The `func`
     * is invoked with the `this` binding of the memoized function.
     *
     * **Note:** The cache is exposed as the `cache` property on the memoized
     * function. Its creation may be customized by replacing the `_.memoize.Cache`
     * constructor with one whose instances implement the [`Map`](http://ecma-international.org/ecma-262/6.0/#sec-properties-of-the-map-prototype-object)
     * method interface of `delete`, `get`, `has`, and `set`.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to have its output memoized.
     * @param {Function} [resolver] The function to resolve the cache key.
     * @returns {Function} Returns the new memoizing function.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     * var other = { 'c': 3, 'd': 4 };
     *
     * var values = _.memoize(_.values);
     * values(object);
     * // => [1, 2]
     *
     * values(other);
     * // => [3, 4]
     *
     * object.a = 2;
     * values(object);
     * // => [1, 2]
     *
     * // modifying the result cache
     * values.cache.set(object, ['a', 'b']);
     * values(object);
     * // => ['a', 'b']
     *
     * // replacing `_.memoize.Cache`
     * _.memoize.Cache = WeakMap;
     */
    function memoize(func, resolver) {
      if (typeof func != 'function' || (resolver && typeof resolver != 'function')) {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var memoized = function() {
        var args = arguments,
            key = resolver ? resolver.apply(this, args) : args[0],
            cache = memoized.cache;

        if (cache.has(key)) {
          return cache.get(key);
        }
        var result = func.apply(this, args);
        memoized.cache = cache.set(key, result);
        return result;
      };
      memoized.cache = new memoize.Cache;
      return memoized;
    }

    /**
     * Creates a function that negates the result of the predicate `func`. The
     * `func` predicate is invoked with the `this` binding and arguments of the
     * created function.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} predicate The predicate to negate.
     * @returns {Function} Returns the new function.
     * @example
     *
     * function isEven(n) {
     *   return n % 2 == 0;
     * }
     *
     * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
     * // => [1, 3, 5]
     */
    function negate(predicate) {
      if (typeof predicate != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      return function() {
        return !predicate.apply(this, arguments);
      };
    }

    /**
     * Creates a function that is restricted to invoking `func` once. Repeat calls
     * to the function return the value of the first invocation. The `func` is
     * invoked with the `this` binding and arguments of the created function.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var initialize = _.once(createApplication);
     * initialize();
     * initialize();
     * // `initialize` invokes `createApplication` once
     */
    function once(func) {
      return before(2, func);
    }

    /**
     * Creates a function that invokes `func` with arguments transformed by
     * corresponding `transforms`.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to wrap.
     * @param {...(Function|Function[])} [transforms] The functions to transform
     * arguments, specified individually or in arrays.
     * @returns {Function} Returns the new function.
     * @example
     *
     * function doubled(n) {
     *   return n * 2;
     * }
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var func = _.overArgs(function(x, y) {
     *   return [x, y];
     * }, square, doubled);
     *
     * func(9, 3);
     * // => [81, 6]
     *
     * func(10, 5);
     * // => [100, 10]
     */
    var overArgs = rest(function(func, transforms) {
      transforms = arrayMap(baseFlatten(transforms), getIteratee());

      var funcsLength = transforms.length;
      return rest(function(args) {
        var index = -1,
            length = nativeMin(args.length, funcsLength);

        while (++index < length) {
          args[index] = transforms[index].call(this, args[index]);
        }
        return apply(func, this, args);
      });
    });

    /**
     * Creates a function that invokes `func` with `partial` arguments prepended
     * to those provided to the new function. This method is like `_.bind` except
     * it does **not** alter the `this` binding.
     *
     * The `_.partial.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * **Note:** This method doesn't set the "length" property of partially
     * applied functions.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * var greet = function(greeting, name) {
     *   return greeting + ' ' + name;
     * };
     *
     * var sayHelloTo = _.partial(greet, 'hello');
     * sayHelloTo('fred');
     * // => 'hello fred'
     *
     * // using placeholders
     * var greetFred = _.partial(greet, _, 'fred');
     * greetFred('hi');
     * // => 'hi fred'
     */
    var partial = rest(function(func, partials) {
      var holders = replaceHolders(partials, partial.placeholder);
      return createWrapper(func, PARTIAL_FLAG, undefined, partials, holders);
    });

    /**
     * This method is like `_.partial` except that partially applied arguments
     * are appended to those provided to the new function.
     *
     * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * **Note:** This method doesn't set the "length" property of partially
     * applied functions.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * var greet = function(greeting, name) {
     *   return greeting + ' ' + name;
     * };
     *
     * var greetFred = _.partialRight(greet, 'fred');
     * greetFred('hi');
     * // => 'hi fred'
     *
     * // using placeholders
     * var sayHelloTo = _.partialRight(greet, 'hello', _);
     * sayHelloTo('fred');
     * // => 'hello fred'
     */
    var partialRight = rest(function(func, partials) {
      var holders = replaceHolders(partials, partialRight.placeholder);
      return createWrapper(func, PARTIAL_RIGHT_FLAG, undefined, partials, holders);
    });

    /**
     * Creates a function that invokes `func` with arguments arranged according
     * to the specified indexes where the argument value at the first index is
     * provided as the first argument, the argument value at the second index is
     * provided as the second argument, and so on.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to rearrange arguments for.
     * @param {...(number|number[])} indexes The arranged argument indexes,
     *  specified individually or in arrays.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var rearged = _.rearg(function(a, b, c) {
     *   return [a, b, c];
     * }, 2, 0, 1);
     *
     * rearged('b', 'c', 'a')
     * // => ['a', 'b', 'c']
     */
    var rearg = rest(function(func, indexes) {
      return createWrapper(func, REARG_FLAG, undefined, undefined, undefined, baseFlatten(indexes));
    });

    /**
     * Creates a function that invokes `func` with the `this` binding of the
     * created function and arguments from `start` and beyond provided as an array.
     *
     * **Note:** This method is based on the [rest parameter](https://mdn.io/rest_parameters).
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var say = _.rest(function(what, names) {
     *   return what + ' ' + _.initial(names).join(', ') +
     *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
     * });
     *
     * say('hello', 'fred', 'barney', 'pebbles');
     * // => 'hello fred, barney, & pebbles'
     */
    function rest(func, start) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      start = nativeMax(start === undefined ? (func.length - 1) : toInteger(start), 0);
      return function() {
        var args = arguments,
            index = -1,
            length = nativeMax(args.length - start, 0),
            array = Array(length);

        while (++index < length) {
          array[index] = args[start + index];
        }
        switch (start) {
          case 0: return func.call(this, array);
          case 1: return func.call(this, args[0], array);
          case 2: return func.call(this, args[0], args[1], array);
        }
        var otherArgs = Array(start + 1);
        index = -1;
        while (++index < start) {
          otherArgs[index] = args[index];
        }
        otherArgs[start] = array;
        return apply(func, this, otherArgs);
      };
    }

    /**
     * Creates a function that invokes `func` with the `this` binding of the created
     * function and an array of arguments much like [`Function#apply`](https://es5.github.io/#x15.3.4.3).
     *
     * **Note:** This method is based on the [spread operator](https://mdn.io/spread_operator).
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to spread arguments over.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var say = _.spread(function(who, what) {
     *   return who + ' says ' + what;
     * });
     *
     * say(['fred', 'hello']);
     * // => 'fred says hello'
     *
     * // with a Promise
     * var numbers = Promise.all([
     *   Promise.resolve(40),
     *   Promise.resolve(36)
     * ]);
     *
     * numbers.then(_.spread(function(x, y) {
     *   return x + y;
     * }));
     * // => a Promise of 76
     */
    function spread(func) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      return function(array) {
        return apply(func, this, array);
      };
    }

    /**
     * Creates a throttled function that only invokes `func` at most once per
     * every `wait` milliseconds. The throttled function comes with a `cancel`
     * method to cancel delayed `func` invocations and a `flush` method to
     * immediately invoke them. Provide an options object to indicate whether
     * `func` should be invoked on the leading and/or trailing edge of the `wait`
     * timeout. The `func` is invoked with the last arguments provided to the
     * throttled function. Subsequent calls to the throttled function return the
     * result of the last `func` invocation.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is invoked
     * on the trailing edge of the timeout only if the the throttled function is
     * invoked more than once during the `wait` timeout.
     *
     * See [David Corbacho's article](http://drupalmotion.com/article/debounce-and-throttle-visual-explanation)
     * for details over the differences between `_.throttle` and `_.debounce`.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to throttle.
     * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
     * @param {Object} [options] The options object.
     * @param {boolean} [options.leading=true] Specify invoking on the leading
     *  edge of the timeout.
     * @param {boolean} [options.trailing=true] Specify invoking on the trailing
     *  edge of the timeout.
     * @returns {Function} Returns the new throttled function.
     * @example
     *
     * // avoid excessively updating the position while scrolling
     * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
     *
     * // invoke `renewToken` when the click event is fired, but not more than once every 5 minutes
     * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
     * jQuery(element).on('click', throttled);
     *
     * // cancel a trailing throttled invocation
     * jQuery(window).on('popstate', throttled.cancel);
     */
    function throttle(func, wait, options) {
      var leading = true,
          trailing = true;

      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      if (isObject(options)) {
        leading = 'leading' in options ? !!options.leading : leading;
        trailing = 'trailing' in options ? !!options.trailing : trailing;
      }
      return debounce(func, wait, { 'leading': leading, 'maxWait': wait, 'trailing': trailing });
    }

    /**
     * Creates a function that accepts up to one argument, ignoring any
     * additional arguments.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to cap arguments for.
     * @returns {Function} Returns the new function.
     * @example
     *
     * _.map(['6', '8', '10'], _.unary(parseInt));
     * // => [6, 8, 10]
     */
    function unary(func) {
      return ary(func, 1);
    }

    /**
     * Creates a function that provides `value` to the wrapper function as its
     * first argument. Any additional arguments provided to the function are
     * appended to those provided to the wrapper function. The wrapper is invoked
     * with the `this` binding of the created function.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {*} value The value to wrap.
     * @param {Function} wrapper The wrapper function.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var p = _.wrap(_.escape, function(func, text) {
     *   return '<p>' + func(text) + '</p>';
     * });
     *
     * p('fred, barney, & pebbles');
     * // => '<p>fred, barney, &amp; pebbles</p>'
     */
    function wrap(value, wrapper) {
      wrapper = wrapper == null ? identity : wrapper;
      return partial(wrapper, value);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates a shallow clone of `value`.
     *
     * **Note:** This method is loosely based on the
     * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)
     * and supports cloning arrays, array buffers, booleans, date objects, maps,
     * numbers, `Object` objects, regexes, sets, strings, symbols, and typed
     * arrays. The own enumerable properties of `arguments` objects are cloned
     * as plain objects. An empty object is returned for uncloneable values such
     * as error objects, functions, DOM nodes, and WeakMaps.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to clone.
     * @returns {*} Returns the cloned value.
     * @example
     *
     * var objects = [{ 'a': 1 }, { 'b': 2 }];
     *
     * var shallow = _.clone(objects);
     * console.log(shallow[0] === objects[0]);
     * // => true
     */
    function clone(value) {
      return baseClone(value);
    }

    /**
     * This method is like `_.clone` except that it accepts `customizer` which
     * is invoked to produce the cloned value. If `customizer` returns `undefined`
     * cloning is handled by the method instead. The `customizer` is invoked with
     * up to five arguments; (value [, index|key, object, stack]).
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to clone.
     * @param {Function} [customizer] The function to customize cloning.
     * @returns {*} Returns the cloned value.
     * @example
     *
     * function customizer(value) {
     *   if (_.isElement(value)) {
     *     return value.cloneNode(false);
     *   }
     * }
     *
     * var el = _.clone(document.body, customizer);
     *
     * console.log(el === document.body);
     * // => false
     * console.log(el.nodeName);
     * // => 'BODY'
     * console.log(el.childNodes.length);
     * // => 0
     */
    function cloneWith(value, customizer) {
      return baseClone(value, false, customizer);
    }

    /**
     * This method is like `_.clone` except that it recursively clones `value`.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to recursively clone.
     * @returns {*} Returns the deep cloned value.
     * @example
     *
     * var objects = [{ 'a': 1 }, { 'b': 2 }];
     *
     * var deep = _.cloneDeep(objects);
     * console.log(deep[0] === objects[0]);
     * // => false
     */
    function cloneDeep(value) {
      return baseClone(value, true);
    }

    /**
     * This method is like `_.cloneWith` except that it recursively clones `value`.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to recursively clone.
     * @param {Function} [customizer] The function to customize cloning.
     * @returns {*} Returns the deep cloned value.
     * @example
     *
     * function customizer(value) {
     *   if (_.isElement(value)) {
     *     return value.cloneNode(true);
     *   }
     * }
     *
     * var el = _.cloneDeep(document.body, customizer);
     *
     * console.log(el === document.body);
     * // => false
     * console.log(el.nodeName);
     * // => 'BODY'
     * console.log(el.childNodes.length);
     * // => 20
     */
    function cloneDeepWith(value, customizer) {
      return baseClone(value, true, customizer);
    }

    /**
     * Performs a [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
     * comparison between two values to determine if they are equivalent.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'user': 'fred' };
     * var other = { 'user': 'fred' };
     *
     * _.eq(object, object);
     * // => true
     *
     * _.eq(object, other);
     * // => false
     *
     * _.eq('a', 'a');
     * // => true
     *
     * _.eq('a', Object('a'));
     * // => false
     *
     * _.eq(NaN, NaN);
     * // => true
     */
    function eq(value, other) {
      return value === other || (value !== value && other !== other);
    }

    /**
     * Checks if `value` is greater than `other`.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than `other`, else `false`.
     * @example
     *
     * _.gt(3, 1);
     * // => true
     *
     * _.gt(3, 3);
     * // => false
     *
     * _.gt(1, 3);
     * // => false
     */
    function gt(value, other) {
      return value > other;
    }

    /**
     * Checks if `value` is greater than or equal to `other`.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than or equal to `other`, else `false`.
     * @example
     *
     * _.gte(3, 1);
     * // => true
     *
     * _.gte(3, 3);
     * // => true
     *
     * _.gte(1, 3);
     * // => false
     */
    function gte(value, other) {
      return value >= other;
    }

    /**
     * Checks if `value` is likely an `arguments` object.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isArguments(function() { return arguments; }());
     * // => true
     *
     * _.isArguments([1, 2, 3]);
     * // => false
     */
    function isArguments(value) {
      // Safari 8.1 incorrectly makes `arguments.callee` enumerable in strict mode.
      return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') &&
        (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);
    }

    /**
     * Checks if `value` is classified as an `Array` object.
     *
     * @static
     * @memberOf _
     * @type Function
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isArray([1, 2, 3]);
     * // => true
     *
     * _.isArray(document.body.children);
     * // => false
     *
     * _.isArray('abc');
     * // => false
     *
     * _.isArray(_.noop);
     * // => false
     */
    var isArray = Array.isArray;

    /**
     * Checks if `value` is array-like. A value is considered array-like if it's
     * not a function and has a `value.length` that's an integer greater than or
     * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
     *
     * @static
     * @memberOf _
     * @type Function
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
     * @example
     *
     * _.isArrayLike([1, 2, 3]);
     * // => true
     *
     * _.isArrayLike(document.body.children);
     * // => true
     *
     * _.isArrayLike('abc');
     * // => true
     *
     * _.isArrayLike(_.noop);
     * // => false
     */
    function isArrayLike(value) {
      return value != null &&
        !(typeof value == 'function' && isFunction(value)) && isLength(getLength(value));
    }

    /**
     * This method is like `_.isArrayLike` except that it also checks if `value`
     * is an object.
     *
     * @static
     * @memberOf _
     * @type Function
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array-like object, else `false`.
     * @example
     *
     * _.isArrayLikeObject([1, 2, 3]);
     * // => true
     *
     * _.isArrayLikeObject(document.body.children);
     * // => true
     *
     * _.isArrayLikeObject('abc');
     * // => false
     *
     * _.isArrayLikeObject(_.noop);
     * // => false
     */
    function isArrayLikeObject(value) {
      return isObjectLike(value) && isArrayLike(value);
    }

    /**
     * Checks if `value` is classified as a boolean primitive or object.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isBoolean(false);
     * // => true
     *
     * _.isBoolean(null);
     * // => false
     */
    function isBoolean(value) {
      return value === true || value === false ||
        (isObjectLike(value) && objectToString.call(value) == boolTag);
    }

    /**
     * Checks if `value` is classified as a `Date` object.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isDate(new Date);
     * // => true
     *
     * _.isDate('Mon April 23 2012');
     * // => false
     */
    function isDate(value) {
      return isObjectLike(value) && objectToString.call(value) == dateTag;
    }

    /**
     * Checks if `value` is likely a DOM element.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.
     * @example
     *
     * _.isElement(document.body);
     * // => true
     *
     * _.isElement('<body>');
     * // => false
     */
    function isElement(value) {
      return !!value && value.nodeType === 1 && isObjectLike(value) && !isPlainObject(value);
    }

    /**
     * Checks if `value` is empty. A value is considered empty unless it's an
     * `arguments` object, array, string, or jQuery-like collection with a length
     * greater than `0` or an object with own enumerable properties.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {Array|Object|string} value The value to inspect.
     * @returns {boolean} Returns `true` if `value` is empty, else `false`.
     * @example
     *
     * _.isEmpty(null);
     * // => true
     *
     * _.isEmpty(true);
     * // => true
     *
     * _.isEmpty(1);
     * // => true
     *
     * _.isEmpty([1, 2, 3]);
     * // => false
     *
     * _.isEmpty({ 'a': 1 });
     * // => false
     */
    function isEmpty(value) {
      return (!isObjectLike(value) || isFunction(value.splice))
        ? !size(value)
        : !keys(value).length;
    }

    /**
     * Performs a deep comparison between two values to determine if they are
     * equivalent.
     *
     * **Note:** This method supports comparing arrays, array buffers, booleans,
     * date objects, error objects, maps, numbers, `Object` objects, regexes,
     * sets, strings, symbols, and typed arrays. `Object` objects are compared
     * by their own, not inherited, enumerable properties. Functions and DOM
     * nodes are **not** supported.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'user': 'fred' };
     * var other = { 'user': 'fred' };
     *
     * _.isEqual(object, other);
     * // => true
     *
     * object === other;
     * // => false
     */
    function isEqual(value, other) {
      return baseIsEqual(value, other);
    }

    /**
     * This method is like `_.isEqual` except that it accepts `customizer` which is
     * invoked to compare values. If `customizer` returns `undefined` comparisons are
     * handled by the method instead. The `customizer` is invoked with up to seven arguments:
     * (objValue, othValue [, index|key, object, other, stack]).
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * function isGreeting(value) {
     *   return /^h(?:i|ello)$/.test(value);
     * }
     *
     * function customizer(objValue, othValue) {
     *   if (isGreeting(objValue) && isGreeting(othValue)) {
     *     return true;
     *   }
     * }
     *
     * var array = ['hello', 'goodbye'];
     * var other = ['hi', 'goodbye'];
     *
     * _.isEqualWith(array, other, customizer);
     * // => true
     */
    function isEqualWith(value, other, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      var result = customizer ? customizer(value, other) : undefined;
      return result === undefined ? baseIsEqual(value, other, customizer) : !!result;
    }

    /**
     * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
     * `SyntaxError`, `TypeError`, or `URIError` object.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an error object, else `false`.
     * @example
     *
     * _.isError(new Error);
     * // => true
     *
     * _.isError(Error);
     * // => false
     */
    function isError(value) {
      return isObjectLike(value) &&
        typeof value.message == 'string' && objectToString.call(value) == errorTag;
    }

    /**
     * Checks if `value` is a finite primitive number.
     *
     * **Note:** This method is based on [`Number.isFinite`](https://mdn.io/Number/isFinite).
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.
     * @example
     *
     * _.isFinite(3);
     * // => true
     *
     * _.isFinite(Number.MAX_VALUE);
     * // => true
     *
     * _.isFinite(3.14);
     * // => true
     *
     * _.isFinite(Infinity);
     * // => false
     */
    function isFinite(value) {
      return typeof value == 'number' && nativeIsFinite(value);
    }

    /**
     * Checks if `value` is classified as a `Function` object.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isFunction(_);
     * // => true
     *
     * _.isFunction(/abc/);
     * // => false
     */
    function isFunction(value) {
      // The use of `Object#toString` avoids issues with the `typeof` operator
      // in Safari 8 which returns 'object' for typed array constructors, and
      // PhantomJS 1.9 which returns 'function' for `NodeList` instances.
      var tag = isObject(value) ? objectToString.call(value) : '';
      return tag == funcTag || tag == genTag;
    }

    /**
     * Checks if `value` is an integer.
     *
     * **Note:** This method is based on [`Number.isInteger`](https://mdn.io/Number/isInteger).
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an integer, else `false`.
     * @example
     *
     * _.isInteger(3);
     * // => true
     *
     * _.isInteger(Number.MIN_VALUE);
     * // => false
     *
     * _.isInteger(Infinity);
     * // => false
     *
     * _.isInteger('3');
     * // => false
     */
    function isInteger(value) {
      return typeof value == 'number' && value == toInteger(value);
    }

    /**
     * Checks if `value` is a valid array-like length.
     *
     * **Note:** This function is loosely based on [`ToLength`](http://ecma-international.org/ecma-262/6.0/#sec-tolength).
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
     * @example
     *
     * _.isLength(3);
     * // => true
     *
     * _.isLength(Number.MIN_VALUE);
     * // => false
     *
     * _.isLength(Infinity);
     * // => false
     *
     * _.isLength('3');
     * // => false
     */
    function isLength(value) {
      return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
    }

    /**
     * Checks if `value` is the [language type](https://es5.github.io/#x8) of `Object`.
     * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an object, else `false`.
     * @example
     *
     * _.isObject({});
     * // => true
     *
     * _.isObject([1, 2, 3]);
     * // => true
     *
     * _.isObject(_.noop);
     * // => true
     *
     * _.isObject(null);
     * // => false
     */
    function isObject(value) {
      // Avoid a V8 JIT bug in Chrome 19-20.
      // See https://code.google.com/p/v8/issues/detail?id=2291 for more details.
      var type = typeof value;
      return !!value && (type == 'object' || type == 'function');
    }

    /**
     * Checks if `value` is object-like. A value is object-like if it's not `null`
     * and has a `typeof` result of "object".
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
     * @example
     *
     * _.isObjectLike({});
     * // => true
     *
     * _.isObjectLike([1, 2, 3]);
     * // => true
     *
     * _.isObjectLike(_.noop);
     * // => false
     *
     * _.isObjectLike(null);
     * // => false
     */
    function isObjectLike(value) {
      return !!value && typeof value == 'object';
    }

    /**
     * Performs a deep comparison between `object` and `source` to determine if
     * `object` contains equivalent property values.
     *
     * **Note:** This method supports comparing the same values as `_.isEqual`.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     * @example
     *
     * var object = { 'user': 'fred', 'age': 40 };
     *
     * _.isMatch(object, { 'age': 40 });
     * // => true
     *
     * _.isMatch(object, { 'age': 36 });
     * // => false
     */
    function isMatch(object, source) {
      return object === source || baseIsMatch(object, source, getMatchData(source));
    }

    /**
     * This method is like `_.isMatch` except that it accepts `customizer` which
     * is invoked to compare values. If `customizer` returns `undefined` comparisons
     * are handled by the method instead. The `customizer` is invoked with three
     * arguments: (objValue, srcValue, index|key, object, source).
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     * @example
     *
     * function isGreeting(value) {
     *   return /^h(?:i|ello)$/.test(value);
     * }
     *
     * function customizer(objValue, srcValue) {
     *   if (isGreeting(objValue) && isGreeting(srcValue)) {
     *     return true;
     *   }
     * }
     *
     * var object = { 'greeting': 'hello' };
     * var source = { 'greeting': 'hi' };
     *
     * _.isMatchWith(object, source, customizer);
     * // => true
     */
    function isMatchWith(object, source, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return baseIsMatch(object, source, getMatchData(source), customizer);
    }

    /**
     * Checks if `value` is `NaN`.
     *
     * **Note:** This method is not the same as [`isNaN`](https://es5.github.io/#x15.1.2.4)
     * which returns `true` for `undefined` and other non-numeric values.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
     * @example
     *
     * _.isNaN(NaN);
     * // => true
     *
     * _.isNaN(new Number(NaN));
     * // => true
     *
     * isNaN(undefined);
     * // => true
     *
     * _.isNaN(undefined);
     * // => false
     */
    function isNaN(value) {
      // An `NaN` primitive is the only value that is not equal to itself.
      // Perform the `toStringTag` check first to avoid errors with some ActiveX objects in IE.
      return isNumber(value) && value != +value;
    }

    /**
     * Checks if `value` is a native function.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a native function, else `false`.
     * @example
     *
     * _.isNative(Array.prototype.push);
     * // => true
     *
     * _.isNative(_);
     * // => false
     */
    function isNative(value) {
      if (value == null) {
        return false;
      }
      if (isFunction(value)) {
        return reIsNative.test(funcToString.call(value));
      }
      return isObjectLike(value) &&
        (isHostObject(value) ? reIsNative : reIsHostCtor).test(value);
    }

    /**
     * Checks if `value` is `null`.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
     * @example
     *
     * _.isNull(null);
     * // => true
     *
     * _.isNull(void 0);
     * // => false
     */
    function isNull(value) {
      return value === null;
    }

    /**
     * Checks if `value` is `null` or `undefined`.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is nullish, else `false`.
     * @example
     *
     * _.isNil(null);
     * // => true
     *
     * _.isNil(void 0);
     * // => true
     *
     * _.isNil(NaN);
     * // => false
     */
    function isNil(value) {
      return value == null;
    }

    /**
     * Checks if `value` is classified as a `Number` primitive or object.
     *
     * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are classified
     * as numbers, use the `_.isFinite` method.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isNumber(3);
     * // => true
     *
     * _.isNumber(Number.MIN_VALUE);
     * // => true
     *
     * _.isNumber(Infinity);
     * // => true
     *
     * _.isNumber('3');
     * // => false
     */
    function isNumber(value) {
      return typeof value == 'number' ||
        (isObjectLike(value) && objectToString.call(value) == numberTag);
    }

    /**
     * Checks if `value` is a plain object, that is, an object created by the
     * `Object` constructor or one with a `[[Prototype]]` of `null`.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * _.isPlainObject(new Foo);
     * // => false
     *
     * _.isPlainObject([1, 2, 3]);
     * // => false
     *
     * _.isPlainObject({ 'x': 0, 'y': 0 });
     * // => true
     *
     * _.isPlainObject(Object.create(null));
     * // => true
     */
    function isPlainObject(value) {
      if (!isObjectLike(value) || objectToString.call(value) != objectTag || isHostObject(value)) {
        return false;
      }
      var proto = objectProto;
      if (typeof value.constructor == 'function') {
        proto = getPrototypeOf(value);
      }
      if (proto === null) {
        return true;
      }
      var Ctor = proto.constructor;
      return (typeof Ctor == 'function' &&
        Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString);
    }

    /**
     * Checks if `value` is classified as a `RegExp` object.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isRegExp(/abc/);
     * // => true
     *
     * _.isRegExp('/abc/');
     * // => false
     */
    function isRegExp(value) {
      return isObject(value) && objectToString.call(value) == regexpTag;
    }

    /**
     * Checks if `value` is a safe integer. An integer is safe if it's an IEEE-754
     * double precision number which isn't the result of a rounded unsafe integer.
     *
     * **Note:** This method is based on [`Number.isSafeInteger`](https://mdn.io/Number/isSafeInteger).
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a safe integer, else `false`.
     * @example
     *
     * _.isSafeInteger(3);
     * // => true
     *
     * _.isSafeInteger(Number.MIN_VALUE);
     * // => false
     *
     * _.isSafeInteger(Infinity);
     * // => false
     *
     * _.isSafeInteger('3');
     * // => false
     */
    function isSafeInteger(value) {
      return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;
    }

    /**
     * Checks if `value` is classified as a `String` primitive or object.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isString('abc');
     * // => true
     *
     * _.isString(1);
     * // => false
     */
    function isString(value) {
      return typeof value == 'string' ||
        (!isArray(value) && isObjectLike(value) && objectToString.call(value) == stringTag);
    }

    /**
     * Checks if `value` is classified as a `Symbol` primitive or object.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isSymbol(Symbol.iterator);
     * // => true
     *
     * _.isSymbol('abc');
     * // => false
     */
    function isSymbol(value) {
      return typeof value == 'symbol' ||
        (isObjectLike(value) && objectToString.call(value) == symbolTag);
    }

    /**
     * Checks if `value` is classified as a typed array.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isTypedArray(new Uint8Array);
     * // => true
     *
     * _.isTypedArray([]);
     * // => false
     */
    function isTypedArray(value) {
      return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[objectToString.call(value)];
    }

    /**
     * Checks if `value` is `undefined`.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
     * @example
     *
     * _.isUndefined(void 0);
     * // => true
     *
     * _.isUndefined(null);
     * // => false
     */
    function isUndefined(value) {
      return value === undefined;
    }

    /**
     * Checks if `value` is less than `other`.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than `other`, else `false`.
     * @example
     *
     * _.lt(1, 3);
     * // => true
     *
     * _.lt(3, 3);
     * // => false
     *
     * _.lt(3, 1);
     * // => false
     */
    function lt(value, other) {
      return value < other;
    }

    /**
     * Checks if `value` is less than or equal to `other`.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than or equal to `other`, else `false`.
     * @example
     *
     * _.lte(1, 3);
     * // => true
     *
     * _.lte(3, 3);
     * // => true
     *
     * _.lte(3, 1);
     * // => false
     */
    function lte(value, other) {
      return value <= other;
    }

    /**
     * Converts `value` to an array.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {Array} Returns the converted array.
     * @example
     *
     * _.toArray({ 'a': 1, 'b': 2 });
     * // => [1, 2]
     *
     * _.toArray('abc');
     * // => ['a', 'b', 'c']
     *
     * _.toArray(1);
     * // => []
     *
     * _.toArray(null);
     * // => []
     */
    function toArray(value) {
      if (!value) {
        return [];
      }
      if (isArrayLike(value)) {
        return isString(value) ? stringToArray(value) : copyArray(value);
      }
      if (iteratorSymbol && value[iteratorSymbol]) {
        return iteratorToArray(value[iteratorSymbol]());
      }
      var tag = getTag(value),
          func = tag == mapTag ? mapToArray : (tag == setTag ? setToArray : values);

      return func(value);
    }

    /**
     * Converts `value` to an integer.
     *
     * **Note:** This function is loosely based on [`ToInteger`](http://www.ecma-international.org/ecma-262/6.0/#sec-tointeger).
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toInteger(3);
     * // => 3
     *
     * _.toInteger(Number.MIN_VALUE);
     * // => 0
     *
     * _.toInteger(Infinity);
     * // => 1.7976931348623157e+308
     *
     * _.toInteger('3');
     * // => 3
     */
    function toInteger(value) {
      if (!value) {
        return value === 0 ? value : 0;
      }
      value = toNumber(value);
      if (value === INFINITY || value === -INFINITY) {
        var sign = (value < 0 ? -1 : 1);
        return sign * MAX_INTEGER;
      }
      var remainder = value % 1;
      return value === value ? (remainder ? value - remainder : value) : 0;
    }

    /**
     * Converts `value` to an integer suitable for use as the length of an
     * array-like object.
     *
     * **Note:** This method is based on [`ToLength`](http://ecma-international.org/ecma-262/6.0/#sec-tolength).
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to convert.
     * @return {number} Returns the converted integer.
     * @example
     *
     * _.toLength(3);
     * // => 3
     *
     * _.toLength(Number.MIN_VALUE);
     * // => 0
     *
     * _.toLength(Infinity);
     * // => 4294967295
     *
     * _.toLength('3');
     * // => 3
     */
    function toLength(value) {
      return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;
    }

    /**
     * Converts `value` to a number.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to process.
     * @returns {number} Returns the number.
     * @example
     *
     * _.toNumber(3);
     * // => 3
     *
     * _.toNumber(Number.MIN_VALUE);
     * // => 5e-324
     *
     * _.toNumber(Infinity);
     * // => Infinity
     *
     * _.toNumber('3');
     * // => 3
     */
    function toNumber(value) {
      if (isObject(value)) {
        var other = isFunction(value.valueOf) ? value.valueOf() : value;
        value = isObject(other) ? (other + '') : other;
      }
      if (typeof value != 'string') {
        return value === 0 ? value : +value;
      }
      value = value.replace(reTrim, '');
      var isBinary = reIsBinary.test(value);
      return (isBinary || reIsOctal.test(value))
        ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
        : (reIsBadHex.test(value) ? NAN : +value);
    }

    /**
     * Converts `value` to a plain object flattening inherited enumerable
     * properties of `value` to own properties of the plain object.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {Object} Returns the converted plain object.
     * @example
     *
     * function Foo() {
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.assign({ 'a': 1 }, new Foo);
     * // => { 'a': 1, 'b': 2 }
     *
     * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
     * // => { 'a': 1, 'b': 2, 'c': 3 }
     */
    function toPlainObject(value) {
      return copyObject(value, keysIn(value));
    }

    /**
     * Converts `value` to a safe integer. A safe integer can be compared and
     * represented correctly.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toSafeInteger(3);
     * // => 3
     *
     * _.toSafeInteger(Number.MIN_VALUE);
     * // => 0
     *
     * _.toSafeInteger(Infinity);
     * // => 9007199254740991
     *
     * _.toSafeInteger('3');
     * // => 3
     */
    function toSafeInteger(value) {
      return baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER);
    }

    /**
     * Converts `value` to a string if it's not one. An empty string is returned
     * for `null` and `undefined` values. The sign of `-0` is preserved.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to process.
     * @returns {string} Returns the string.
     * @example
     *
     * _.toString(null);
     * // => ''
     *
     * _.toString(-0);
     * // => '-0'
     *
     * _.toString([1, 2, 3]);
     * // => '1,2,3'
     */
    function toString(value) {
      // Exit early for strings to avoid a performance hit in some environments.
      if (typeof value == 'string') {
        return value;
      }
      if (value == null) {
        return '';
      }
      if (isSymbol(value)) {
        return _Symbol ? symbolToString.call(value) : '';
      }
      var result = (value + '');
      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
    }

    /*------------------------------------------------------------------------*/

    /**
     * Assigns own enumerable properties of source objects to the destination
     * object. Source objects are applied from left to right. Subsequent sources
     * overwrite property assignments of previous sources.
     *
     * **Note:** This method mutates `object` and is loosely based on
     * [`Object.assign`](https://mdn.io/Object/assign).
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @example
     *
     * function Foo() {
     *   this.c = 3;
     * }
     *
     * function Bar() {
     *   this.e = 5;
     * }
     *
     * Foo.prototype.d = 4;
     * Bar.prototype.f = 6;
     *
     * _.assign({ 'a': 1 }, new Foo, new Bar);
     * // => { 'a': 1, 'c': 3, 'e': 5 }
     */
    var assign = createAssigner(function(object, source) {
      copyObject(source, keys(source), object);
    });

    /**
     * This method is like `_.assign` except that it iterates over own and
     * inherited source properties.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @alias extend
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @example
     *
     * function Foo() {
     *   this.b = 2;
     * }
     *
     * function Bar() {
     *   this.d = 4;
     * }
     *
     * Foo.prototype.c = 3;
     * Bar.prototype.e = 5;
     *
     * _.assignIn({ 'a': 1 }, new Foo, new Bar);
     * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5 }
     */
    var assignIn = createAssigner(function(object, source) {
      copyObject(source, keysIn(source), object);
    });

    /**
     * This method is like `_.assignIn` except that it accepts `customizer` which
     * is invoked to produce the assigned values. If `customizer` returns `undefined`
     * assignment is handled by the method instead. The `customizer` is invoked
     * with five arguments: (objValue, srcValue, key, object, source).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @alias extendWith
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   return _.isUndefined(objValue) ? srcValue : objValue;
     * }
     *
     * var defaults = _.partialRight(_.assignInWith, customizer);
     *
     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */
    var assignInWith = createAssigner(function(object, source, customizer) {
      copyObjectWith(source, keysIn(source), object, customizer);
    });

    /**
     * This method is like `_.assign` except that it accepts `customizer` which
     * is invoked to produce the assigned values. If `customizer` returns `undefined`
     * assignment is handled by the method instead. The `customizer` is invoked
     * with five arguments: (objValue, srcValue, key, object, source).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   return _.isUndefined(objValue) ? srcValue : objValue;
     * }
     *
     * var defaults = _.partialRight(_.assignWith, customizer);
     *
     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */
    var assignWith = createAssigner(function(object, source, customizer) {
      copyObjectWith(source, keys(source), object, customizer);
    });

    /**
     * Creates an array of values corresponding to `paths` of `object`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {...(string|string[])} [paths] The property paths of elements to pick,
     *  specified individually or in arrays.
     * @returns {Array} Returns the new array of picked elements.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
     *
     * _.at(object, ['a[0].b.c', 'a[1]']);
     * // => [3, 4]
     *
     * _.at(['a', 'b', 'c'], 0, 2);
     * // => ['a', 'c']
     */
    var at = rest(function(object, paths) {
      return baseAt(object, baseFlatten(paths));
    });

    /**
     * Creates an object that inherits from the `prototype` object. If a `properties`
     * object is provided its own enumerable properties are assigned to the created object.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} prototype The object to inherit from.
     * @param {Object} [properties] The properties to assign to the object.
     * @returns {Object} Returns the new object.
     * @example
     *
     * function Shape() {
     *   this.x = 0;
     *   this.y = 0;
     * }
     *
     * function Circle() {
     *   Shape.call(this);
     * }
     *
     * Circle.prototype = _.create(Shape.prototype, {
     *   'constructor': Circle
     * });
     *
     * var circle = new Circle;
     * circle instanceof Circle;
     * // => true
     *
     * circle instanceof Shape;
     * // => true
     */
    function create(prototype, properties) {
      var result = baseCreate(prototype);
      return properties ? baseAssign(result, properties) : result;
    }

    /**
     * Assigns own and inherited enumerable properties of source objects to the
     * destination object for all destination properties that resolve to `undefined`.
     * Source objects are applied from left to right. Once a property is set,
     * additional values of the same property are ignored.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @example
     *
     * _.defaults({ 'user': 'barney' }, { 'age': 36 }, { 'user': 'fred' });
     * // => { 'user': 'barney', 'age': 36 }
     */
    var defaults = rest(function(args) {
      args.push(undefined, assignInDefaults);
      return apply(assignInWith, undefined, args);
    });

    /**
     * This method is like `_.defaults` except that it recursively assigns
     * default properties.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @example
     *
     * _.defaultsDeep({ 'user': { 'name': 'barney' } }, { 'user': { 'name': 'fred', 'age': 36 } });
     * // => { 'user': { 'name': 'barney', 'age': 36 } }
     *
     */
    var defaultsDeep = rest(function(args) {
      args.push(undefined, mergeDefaults);
      return apply(mergeWith, undefined, args);
    });

    /**
     * This method is like `_.find` except that it returns the key of the first
     * element `predicate` returns truthy for instead of the element itself.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to search.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.
     * @returns {string|undefined} Returns the key of the matched element, else `undefined`.
     * @example
     *
     * var users = {
     *   'barney':  { 'age': 36, 'active': true },
     *   'fred':    { 'age': 40, 'active': false },
     *   'pebbles': { 'age': 1,  'active': true }
     * };
     *
     * _.findKey(users, function(o) { return o.age < 40; });
     * // => 'barney' (iteration order is not guaranteed)
     *
     * // using the `_.matches` iteratee shorthand
     * _.findKey(users, { 'age': 1, 'active': true });
     * // => 'pebbles'
     *
     * // using the `_.matchesProperty` iteratee shorthand
     * _.findKey(users, ['active', false]);
     * // => 'fred'
     *
     * // using the `_.property` iteratee shorthand
     * _.findKey(users, 'active');
     * // => 'barney'
     */
    function findKey(object, predicate) {
      return baseFind(object, getIteratee(predicate, 3), baseForOwn, true);
    }

    /**
     * This method is like `_.findKey` except that it iterates over elements of
     * a collection in the opposite order.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to search.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.
     * @returns {string|undefined} Returns the key of the matched element, else `undefined`.
     * @example
     *
     * var users = {
     *   'barney':  { 'age': 36, 'active': true },
     *   'fred':    { 'age': 40, 'active': false },
     *   'pebbles': { 'age': 1,  'active': true }
     * };
     *
     * _.findLastKey(users, function(o) { return o.age < 40; });
     * // => returns 'pebbles' assuming `_.findKey` returns 'barney'
     *
     * // using the `_.matches` iteratee shorthand
     * _.findLastKey(users, { 'age': 36, 'active': true });
     * // => 'barney'
     *
     * // using the `_.matchesProperty` iteratee shorthand
     * _.findLastKey(users, ['active', false]);
     * // => 'fred'
     *
     * // using the `_.property` iteratee shorthand
     * _.findLastKey(users, 'active');
     * // => 'pebbles'
     */
    function findLastKey(object, predicate) {
      return baseFind(object, getIteratee(predicate, 3), baseForOwnRight, true);
    }

    /**
     * Iterates over own and inherited enumerable properties of an object invoking
     * `iteratee` for each property. The iteratee is invoked with three arguments:
     * (value, key, object). Iteratee functions may exit iteration early by explicitly
     * returning `false`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forIn(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => logs 'a', 'b', then 'c' (iteration order is not guaranteed)
     */
    function forIn(object, iteratee) {
      return object == null ? object : baseFor(object, toFunction(iteratee), keysIn);
    }

    /**
     * This method is like `_.forIn` except that it iterates over properties of
     * `object` in the opposite order.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forInRight(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => logs 'c', 'b', then 'a' assuming `_.forIn` logs 'a', 'b', then 'c'
     */
    function forInRight(object, iteratee) {
      return object == null ? object : baseForRight(object, toFunction(iteratee), keysIn);
    }

    /**
     * Iterates over own enumerable properties of an object invoking `iteratee`
     * for each property. The iteratee is invoked with three arguments:
     * (value, key, object). Iteratee functions may exit iteration early by
     * explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forOwn(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => logs 'a' then 'b' (iteration order is not guaranteed)
     */
    function forOwn(object, iteratee) {
      return object && baseForOwn(object, toFunction(iteratee));
    }

    /**
     * This method is like `_.forOwn` except that it iterates over properties of
     * `object` in the opposite order.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forOwnRight(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => logs 'b' then 'a' assuming `_.forOwn` logs 'a' then 'b'
     */
    function forOwnRight(object, iteratee) {
      return object && baseForOwnRight(object, toFunction(iteratee));
    }

    /**
     * Creates an array of function property names from own enumerable properties
     * of `object`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns the new array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = _.constant('a');
     *   this.b = _.constant('b');
     * }
     *
     * Foo.prototype.c = _.constant('c');
     *
     * _.functions(new Foo);
     * // => ['a', 'b']
     */
    function functions(object) {
      return object == null ? [] : baseFunctions(object, keys(object));
    }

    /**
     * Creates an array of function property names from own and inherited
     * enumerable properties of `object`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns the new array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = _.constant('a');
     *   this.b = _.constant('b');
     * }
     *
     * Foo.prototype.c = _.constant('c');
     *
     * _.functionsIn(new Foo);
     * // => ['a', 'b', 'c']
     */
    function functionsIn(object) {
      return object == null ? [] : baseFunctions(object, keysIn(object));
    }

    /**
     * Gets the value at `path` of `object`. If the resolved value is
     * `undefined` the `defaultValue` is used in its place.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to get.
     * @param {*} [defaultValue] The value returned if the resolved value is `undefined`.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.get(object, 'a[0].b.c');
     * // => 3
     *
     * _.get(object, ['a', '0', 'b', 'c']);
     * // => 3
     *
     * _.get(object, 'a.b.c', 'default');
     * // => 'default'
     */
    function get(object, path, defaultValue) {
      var result = object == null ? undefined : baseGet(object, path);
      return result === undefined ? defaultValue : result;
    }

    /**
     * Checks if `path` is a direct property of `object`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     * @example
     *
     * var object = { 'a': { 'b': { 'c': 3 } } };
     * var other = _.create({ 'a': _.create({ 'b': _.create({ 'c': 3 }) }) });
     *
     * _.has(object, 'a');
     * // => true
     *
     * _.has(object, 'a.b.c');
     * // => true
     *
     * _.has(object, ['a', 'b', 'c']);
     * // => true
     *
     * _.has(other, 'a');
     * // => false
     */
    function has(object, path) {
      return hasPath(object, path, baseHas);
    }

    /**
     * Checks if `path` is a direct or inherited property of `object`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     * @example
     *
     * var object = _.create({ 'a': _.create({ 'b': _.create({ 'c': 3 }) }) });
     *
     * _.hasIn(object, 'a');
     * // => true
     *
     * _.hasIn(object, 'a.b.c');
     * // => true
     *
     * _.hasIn(object, ['a', 'b', 'c']);
     * // => true
     *
     * _.hasIn(object, 'b');
     * // => false
     */
    function hasIn(object, path) {
      return hasPath(object, path, baseHasIn);
    }

    /**
     * Creates an object composed of the inverted keys and values of `object`.
     * If `object` contains duplicate values, subsequent values overwrite property
     * assignments of previous values unless `multiVal` is `true`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to invert.
     * @param {boolean} [multiVal] Allow multiple values per key.
     * @param- {Object} [guard] Enables use as an iteratee for functions like `_.map`.
     * @returns {Object} Returns the new inverted object.
     * @example
     *
     * var object = { 'a': 1, 'b': 2, 'c': 1 };
     *
     * _.invert(object);
     * // => { '1': 'c', '2': 'b' }
     *
     * // with `multiVal`
     * _.invert(object, true);
     * // => { '1': ['a', 'c'], '2': ['b'] }
     */
    function invert(object, multiVal, guard) {
      return arrayReduce(keys(object), function(result, key) {
        var value = object[key];
        if (multiVal && !guard) {
          if (hasOwnProperty.call(result, value)) {
            result[value].push(key);
          } else {
            result[value] = [key];
          }
        }
        else {
          result[value] = key;
        }
        return result;
      }, {});
    }

    /**
     * Invokes the method at `path` of `object`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the method to invoke.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {*} Returns the result of the invoked method.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': [1, 2, 3, 4] } }] };
     *
     * _.invoke(object, 'a[0].b.c.slice', 1, 3);
     * // => [2, 3]
     */
    var invoke = rest(baseInvoke);

    /**
     * Creates an array of the own enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects. See the
     * [ES spec](http://ecma-international.org/ecma-262/6.0/#sec-object.keys)
     * for more details.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keys(new Foo);
     * // => ['a', 'b'] (iteration order is not guaranteed)
     *
     * _.keys('hi');
     * // => ['0', '1']
     */
    function keys(object) {
      var isProto = isPrototype(object);
      if (!(isProto || isArrayLike(object))) {
        return baseKeys(object);
      }
      var indexes = indexKeys(object),
          skipIndexes = !!indexes,
          result = indexes || [],
          length = result.length;

      for (var key in object) {
        if (baseHas(object, key) &&
            !(skipIndexes && (key == 'length' || isIndex(key, length))) &&
            !(isProto && key == 'constructor')) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * Creates an array of the own and inherited enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keysIn(new Foo);
     * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
     */
    function keysIn(object) {
      var index = -1,
          isProto = isPrototype(object),
          props = baseKeysIn(object),
          propsLength = props.length,
          indexes = indexKeys(object),
          skipIndexes = !!indexes,
          result = indexes || [],
          length = result.length;

      while (++index < propsLength) {
        var key = props[index];
        if (!(skipIndexes && (key == 'length' || isIndex(key, length))) &&
            !(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * The opposite of `_.mapValues`; this method creates an object with the
     * same values as `object` and keys generated by running each own enumerable
     * property of `object` through `iteratee`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function|Object|string} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns the new mapped object.
     * @example
     *
     * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {
     *   return key + value;
     * });
     * // => { 'a1': 1, 'b2': 2 }
     */
    function mapKeys(object, iteratee) {
      var result = {};
      iteratee = getIteratee(iteratee, 3);

      baseForOwn(object, function(value, key, object) {
        result[iteratee(value, key, object)] = value;
      });
      return result;
    }

    /**
     * Creates an object with the same keys as `object` and values generated by
     * running each own enumerable property of `object` through `iteratee`. The
     * iteratee function is invoked with three arguments: (value, key, object).
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function|Object|string} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns the new mapped object.
     * @example
     *
     * var users = {
     *   'fred':    { 'user': 'fred',    'age': 40 },
     *   'pebbles': { 'user': 'pebbles', 'age': 1 }
     * };
     *
     * _.mapValues(users, function(o) { return o.age; });
     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
     *
     * // using the `_.property` iteratee shorthand
     * _.mapValues(users, 'age');
     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
     */
    function mapValues(object, iteratee) {
      var result = {};
      iteratee = getIteratee(iteratee, 3);

      baseForOwn(object, function(value, key, object) {
        result[key] = iteratee(value, key, object);
      });
      return result;
    }

    /**
     * Recursively merges own and inherited enumerable properties of source
     * objects into the destination object, skipping source properties that resolve
     * to `undefined`. Array and plain object properties are merged recursively.
     * Other objects and value types are overridden by assignment. Source objects
     * are applied from left to right. Subsequent sources overwrite property
     * assignments of previous sources.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var users = {
     *   'data': [{ 'user': 'barney' }, { 'user': 'fred' }]
     * };
     *
     * var ages = {
     *   'data': [{ 'age': 36 }, { 'age': 40 }]
     * };
     *
     * _.merge(users, ages);
     * // => { 'data': [{ 'user': 'barney', 'age': 36 }, { 'user': 'fred', 'age': 40 }] }
     */
    var merge = createAssigner(function(object, source) {
      baseMerge(object, source);
    });

    /**
     * This method is like `_.merge` except that it accepts `customizer` which
     * is invoked to produce the merged values of the destination and source
     * properties. If `customizer` returns `undefined` merging is handled by the
     * method instead. The `customizer` is invoked with seven arguments:
     * (objValue, srcValue, key, object, source, stack).
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} customizer The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   if (_.isArray(objValue)) {
     *     return objValue.concat(srcValue);
     *   }
     * }
     *
     * var object = {
     *   'fruits': ['apple'],
     *   'vegetables': ['beet']
     * };
     *
     * var other = {
     *   'fruits': ['banana'],
     *   'vegetables': ['carrot']
     * };
     *
     * _.mergeWith(object, other, customizer);
     * // => { 'fruits': ['apple', 'banana'], 'vegetables': ['beet', 'carrot'] }
     */
    var mergeWith = createAssigner(function(object, source, customizer) {
      baseMerge(object, source, customizer);
    });

    /**
     * The opposite of `_.pick`; this method creates an object composed of the
     * own and inherited enumerable properties of `object` that are not omitted.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The source object.
     * @param {...(string|string[])} [props] The property names to omit, specified
     *  individually or in arrays..
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.omit(object, ['a', 'c']);
     * // => { 'b': '2' }
     */
    var omit = rest(function(object, props) {
      if (object == null) {
        return {};
      }
      props = arrayMap(baseFlatten(props), String);
      return basePick(object, baseDifference(keysIn(object), props));
    });

    /**
     * The opposite of `_.pickBy`; this method creates an object composed of the
     * own and inherited enumerable properties of `object` that `predicate`
     * doesn't return truthy for.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The source object.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked per property.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.omitBy(object, _.isNumber);
     * // => { 'b': '2' }
     */
    function omitBy(object, predicate) {
      predicate = getIteratee(predicate);
      return basePickBy(object, function(value) {
        return !predicate(value);
      });
    }

    /**
     * Creates an object composed of the picked `object` properties.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The source object.
     * @param {...(string|string[])} [props] The property names to pick, specified
     *  individually or in arrays.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.pick(object, ['a', 'c']);
     * // => { 'a': 1, 'c': 3 }
     */
    var pick = rest(function(object, props) {
      return object == null ? {} : basePick(object, baseFlatten(props));
    });

    /**
     * Creates an object composed of the `object` properties `predicate` returns
     * truthy for. The predicate is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The source object.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked per property.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.pickBy(object, _.isNumber);
     * // => { 'a': 1, 'c': 3 }
     */
    function pickBy(object, predicate) {
      return object == null ? {} : basePickBy(object, getIteratee(predicate));
    }

    /**
     * This method is like `_.get` except that if the resolved value is a function
     * it's invoked with the `this` binding of its parent object and its result
     * is returned.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to resolve.
     * @param {*} [defaultValue] The value returned if the resolved value is `undefined`.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };
     *
     * _.result(object, 'a[0].b.c1');
     * // => 3
     *
     * _.result(object, 'a[0].b.c2');
     * // => 4
     *
     * _.result(object, 'a[0].b.c3', 'default');
     * // => 'default'
     *
     * _.result(object, 'a[0].b.c3', _.constant('default'));
     * // => 'default'
     */
    function result(object, path, defaultValue) {
      if (!isKey(path, object)) {
        path = baseToPath(path);
        var result = get(object, path);
        object = parent(object, path);
      } else {
        result = object == null ? undefined : object[path];
      }
      if (result === undefined) {
        result = defaultValue;
      }
      return isFunction(result) ? result.call(object) : result;
    }

    /**
     * Sets the value at `path` of `object`. If a portion of `path` doesn't exist
     * it's created. Arrays are created for missing index properties while objects
     * are created for all other missing properties. Use `_.setWith` to customize
     * `path` creation.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.set(object, 'a[0].b.c', 4);
     * console.log(object.a[0].b.c);
     * // => 4
     *
     * _.set(object, 'x[0].y.z', 5);
     * console.log(object.x[0].y.z);
     * // => 5
     */
    function set(object, path, value) {
      return object == null ? object : baseSet(object, path, value);
    }

    /**
     * This method is like `_.set` except that it accepts `customizer` which is
     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
     * path creation is handled by the method instead. The `customizer` is invoked
     * with three arguments: (nsValue, key, nsObject).
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * _.setWith({ '0': { 'length': 2 } }, '[0][1][2]', 3, Object);
     * // => { '0': { '1': { '2': 3 }, 'length': 2 } }
     */
    function setWith(object, path, value, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return object == null ? object : baseSet(object, path, value, customizer);
    }

    /**
     * Creates an array of own enumerable key-value pairs for `object`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the new array of key-value pairs.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.toPairs(new Foo);
     * // => [['a', 1], ['b', 2]] (iteration order is not guaranteed)
     */
    function toPairs(object) {
      return baseToPairs(object, keys(object));
    }

    /**
     * Creates an array of own and inherited enumerable key-value pairs for `object`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the new array of key-value pairs.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.toPairsIn(new Foo);
     * // => [['a', 1], ['b', 2], ['c', 1]] (iteration order is not guaranteed)
     */
    function toPairsIn(object) {
      return baseToPairs(object, keysIn(object));
    }

    /**
     * An alternative to `_.reduce`; this method transforms `object` to a new
     * `accumulator` object which is the result of running each of its own enumerable
     * properties through `iteratee`, with each invocation potentially mutating
     * the `accumulator` object. The iteratee is invoked with four arguments:
     * (accumulator, value, key, object). Iteratee functions may exit iteration
     * early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Array|Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The custom accumulator value.
     * @returns {*} Returns the accumulated value.
     * @example
     *
     * _.transform([2, 3, 4], function(result, n) {
     *   result.push(n *= n);
     *   return n % 2 == 0;
     * });
     * // => [4, 9]
     *
     * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
     *   (result[value] || (result[value] = [])).push(key);
     * });
     * // => { '1': ['a', 'c'], '2': ['b'] }
     */
    function transform(object, iteratee, accumulator) {
      var isArr = isArray(object) || isTypedArray(object);
      iteratee = getIteratee(iteratee, 4);

      if (accumulator == null) {
        if (isArr || isObject(object)) {
          var Ctor = object.constructor;
          if (isArr) {
            accumulator = isArray(object) ? new Ctor : [];
          } else {
            accumulator = baseCreate(isFunction(Ctor) ? Ctor.prototype : undefined);
          }
        } else {
          accumulator = {};
        }
      }
      (isArr ? arrayEach : baseForOwn)(object, function(value, index, object) {
        return iteratee(accumulator, value, index, object);
      });
      return accumulator;
    }

    /**
     * Removes the property at `path` of `object`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to unset.
     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 7 } }] };
     * _.unset(object, 'a[0].b.c');
     * // => true
     *
     * console.log(object);
     * // => { 'a': [{ 'b': {} }] };
     *
     * _.unset(object, 'a[0].b.c');
     * // => true
     *
     * console.log(object);
     * // => { 'a': [{ 'b': {} }] };
     */
    function unset(object, path) {
      return object == null ? true : baseUnset(object, path);
    }

    /**
     * Creates an array of the own enumerable property values of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property values.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.values(new Foo);
     * // => [1, 2] (iteration order is not guaranteed)
     *
     * _.values('hi');
     * // => ['h', 'i']
     */
    function values(object) {
      return object ? baseValues(object, keys(object)) : [];
    }

    /**
     * Creates an array of the own and inherited enumerable property values of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property values.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.valuesIn(new Foo);
     * // => [1, 2, 3] (iteration order is not guaranteed)
     */
    function valuesIn(object) {
      return object == null ? baseValues(object, keysIn(object)) : [];
    }

    /*------------------------------------------------------------------------*/

    /**
     * Clamps `number` within the inclusive `lower` and `upper` bounds.
     *
     * @static
     * @memberOf _
     * @category Number
     * @param {number} number The number to clamp.
     * @param {number} [lower] The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the clamped number.
     * @example
     *
     * _.clamp(-10, -5, 5);
     * // => -5
     *
     * _.clamp(10, -5, 5);
     * // => 5
     */
    function clamp(number, lower, upper) {
      if (upper === undefined) {
        upper = lower;
        lower = undefined;
      }
      if (upper !== undefined) {
        upper = toNumber(upper);
        upper = upper === upper ? upper : 0;
      }
      if (lower !== undefined) {
        lower = toNumber(lower);
        lower = lower === lower ? lower : 0;
      }
      return baseClamp(toNumber(number), lower, upper);
    }

    /**
     * Checks if `n` is between `start` and up to but not including, `end`. If
     * `end` is not specified it's set to `start` with `start` then set to `0`.
     * If `start` is greater than `end` the params are swapped to support
     * negative ranges.
     *
     * @static
     * @memberOf _
     * @category Number
     * @param {number} number The number to check.
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
     * @example
     *
     * _.inRange(3, 2, 4);
     * // => true
     *
     * _.inRange(4, 8);
     * // => true
     *
     * _.inRange(4, 2);
     * // => false
     *
     * _.inRange(2, 2);
     * // => false
     *
     * _.inRange(1.2, 2);
     * // => true
     *
     * _.inRange(5.2, 4);
     * // => false
     *
     * _.inRange(-3, -2, -6);
     * // => true
     */
    function inRange(number, start, end) {
      start = toNumber(start) || 0;
      if (end === undefined) {
        end = start;
        start = 0;
      } else {
        end = toNumber(end) || 0;
      }
      number = toNumber(number);
      return baseInRange(number, start, end);
    }

    /**
     * Produces a random number between the inclusive `lower` and `upper` bounds.
     * If only one argument is provided a number between `0` and the given number
     * is returned. If `floating` is `true`, or either `lower` or `upper` are floats,
     * a floating-point number is returned instead of an integer.
     *
     * **Note:** JavaScript follows the IEEE-754 standard for resolving
     * floating-point values which can produce unexpected results.
     *
     * @static
     * @memberOf _
     * @category Number
     * @param {number} [lower=0] The lower bound.
     * @param {number} [upper=1] The upper bound.
     * @param {boolean} [floating] Specify returning a floating-point number.
     * @returns {number} Returns the random number.
     * @example
     *
     * _.random(0, 5);
     * // => an integer between 0 and 5
     *
     * _.random(5);
     * // => also an integer between 0 and 5
     *
     * _.random(5, true);
     * // => a floating-point number between 0 and 5
     *
     * _.random(1.2, 5.2);
     * // => a floating-point number between 1.2 and 5.2
     */
    function random(lower, upper, floating) {
      if (floating && typeof floating != 'boolean' && isIterateeCall(lower, upper, floating)) {
        upper = floating = undefined;
      }
      if (floating === undefined) {
        if (typeof upper == 'boolean') {
          floating = upper;
          upper = undefined;
        }
        else if (typeof lower == 'boolean') {
          floating = lower;
          lower = undefined;
        }
      }
      if (lower === undefined && upper === undefined) {
        lower = 0;
        upper = 1;
      }
      else {
        lower = toNumber(lower) || 0;
        if (upper === undefined) {
          upper = lower;
          lower = 0;
        } else {
          upper = toNumber(upper) || 0;
        }
      }
      if (lower > upper) {
        var temp = lower;
        lower = upper;
        upper = temp;
      }
      if (floating || lower % 1 || upper % 1) {
        var rand = nativeRandom();
        return nativeMin(lower + (rand * (upper - lower + freeParseFloat('1e-' + ((rand + '').length - 1)))), upper);
      }
      return baseRandom(lower, upper);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the camel cased string.
     * @example
     *
     * _.camelCase('Foo Bar');
     * // => 'fooBar'
     *
     * _.camelCase('--foo-bar');
     * // => 'fooBar'
     *
     * _.camelCase('__foo_bar__');
     * // => 'fooBar'
     */
    var camelCase = createCompounder(function(result, word, index) {
      word = word.toLowerCase();
      return result + (index ? capitalize(word) : word);
    });

    /**
     * Converts the first character of `string` to upper case and the remaining
     * to lower case.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to capitalize.
     * @returns {string} Returns the capitalized string.
     * @example
     *
     * _.capitalize('FRED');
     * // => 'Fred'
     */
    function capitalize(string) {
      return upperFirst(toString(string).toLowerCase());
    }

    /**
     * Deburrs `string` by converting [latin-1 supplementary letters](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
     * to basic latin letters and removing [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to deburr.
     * @returns {string} Returns the deburred string.
     * @example
     *
     * _.deburr('déjà vu');
     * // => 'deja vu'
     */
    function deburr(string) {
      string = toString(string);
      return string && string.replace(reLatin1, deburrLetter).replace(reComboMark, '');
    }

    /**
     * Checks if `string` ends with the given target string.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to search.
     * @param {string} [target] The string to search for.
     * @param {number} [position=string.length] The position to search from.
     * @returns {boolean} Returns `true` if `string` ends with `target`, else `false`.
     * @example
     *
     * _.endsWith('abc', 'c');
     * // => true
     *
     * _.endsWith('abc', 'b');
     * // => false
     *
     * _.endsWith('abc', 'b', 2);
     * // => true
     */
    function endsWith(string, target, position) {
      string = toString(string);
      target = typeof target == 'string' ? target : (target + '');

      var length = string.length;
      position = position === undefined
        ? length
        : baseClamp(toInteger(position), 0, length);

      position -= target.length;
      return position >= 0 && string.indexOf(target, position) == position;
    }

    /**
     * Converts the characters "&", "<", ">", '"', "'", and "\`" in `string` to
     * their corresponding HTML entities.
     *
     * **Note:** No other characters are escaped. To escape additional
     * characters use a third-party library like [_he_](https://mths.be/he).
     *
     * Though the ">" character is escaped for symmetry, characters like
     * ">" and "/" don't need escaping in HTML and have no special meaning
     * unless they're part of a tag or unquoted attribute value.
     * See [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
     * (under "semi-related fun fact") for more details.
     *
     * Backticks are escaped because in IE < 9, they can break out of
     * attribute values or HTML comments. See [#59](https://html5sec.org/#59),
     * [#102](https://html5sec.org/#102), [#108](https://html5sec.org/#108), and
     * [#133](https://html5sec.org/#133) of the [HTML5 Security Cheatsheet](https://html5sec.org/)
     * for more details.
     *
     * When working with HTML you should always [quote attribute values](http://wonko.com/post/html-escaping)
     * to reduce XSS vectors.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escape('fred, barney, & pebbles');
     * // => 'fred, barney, &amp; pebbles'
     */
    function escape(string) {
      string = toString(string);
      return (string && reHasUnescapedHtml.test(string))
        ? string.replace(reUnescapedHtml, escapeHtmlChar)
        : string;
    }

    /**
     * Escapes the `RegExp` special characters "^", "$", "\", ".", "*", "+",
     * "?", "(", ")", "[", "]", "{", "}", and "|" in `string`.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escapeRegExp('[lodash](https://lodash.com/)');
     * // => '\[lodash\]\(https://lodash\.com/\)'
     */
    function escapeRegExp(string) {
      string = toString(string);
      return (string && reHasRegExpChar.test(string))
        ? string.replace(reRegExpChar, '\\$&')
        : string;
    }

    /**
     * Converts `string` to [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the kebab cased string.
     * @example
     *
     * _.kebabCase('Foo Bar');
     * // => 'foo-bar'
     *
     * _.kebabCase('fooBar');
     * // => 'foo-bar'
     *
     * _.kebabCase('__foo_bar__');
     * // => 'foo-bar'
     */
    var kebabCase = createCompounder(function(result, word, index) {
      return result + (index ? '-' : '') + word.toLowerCase();
    });

    /**
     * Converts `string`, as space separated words, to lower case.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the lower cased string.
     * @example
     *
     * _.lowerCase('--Foo-Bar');
     * // => 'foo bar'
     *
     * _.lowerCase('fooBar');
     * // => 'foo bar'
     *
     * _.lowerCase('__FOO_BAR__');
     * // => 'foo bar'
     */
    var lowerCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + word.toLowerCase();
    });

    /**
     * Converts the first character of `string` to lower case.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.lowerFirst('Fred');
     * // => 'fred'
     *
     * _.lowerFirst('FRED');
     * // => 'fRED'
     */
    var lowerFirst = createCaseFirst('toLowerCase');

    /**
     * Converts the first character of `string` to upper case.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.upperFirst('fred');
     * // => 'Fred'
     *
     * _.upperFirst('FRED');
     * // => 'FRED'
     */
    var upperFirst = createCaseFirst('toUpperCase');

    /**
     * Pads `string` on the left and right sides if it's shorter than `length`.
     * Padding characters are truncated if they can't be evenly divided by `length`.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.pad('abc', 8);
     * // => '  abc   '
     *
     * _.pad('abc', 8, '_-');
     * // => '_-abc_-_'
     *
     * _.pad('abc', 3);
     * // => 'abc'
     */
    function pad(string, length, chars) {
      string = toString(string);
      length = toInteger(length);

      var strLength = stringSize(string);
      if (!length || strLength >= length) {
        return string;
      }
      var mid = (length - strLength) / 2,
          leftLength = nativeFloor(mid),
          rightLength = nativeCeil(mid);

      return createPadding('', leftLength, chars) + string + createPadding('', rightLength, chars);
    }

    /**
     * Pads `string` on the right side if it's shorter than `length`. Padding
     * characters are truncated if they exceed `length`.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.padEnd('abc', 6);
     * // => 'abc   '
     *
     * _.padEnd('abc', 6, '_-');
     * // => 'abc_-_'
     *
     * _.padEnd('abc', 3);
     * // => 'abc'
     */
    function padEnd(string, length, chars) {
      string = toString(string);
      return string + createPadding(string, length, chars);
    }

    /**
     * Pads `string` on the left side if it's shorter than `length`. Padding
     * characters are truncated if they exceed `length`.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.padStart('abc', 6);
     * // => '   abc'
     *
     * _.padStart('abc', 6, '_-');
     * // => '_-_abc'
     *
     * _.padStart('abc', 3);
     * // => 'abc'
     */
    function padStart(string, length, chars) {
      string = toString(string);
      return createPadding(string, length, chars) + string;
    }

    /**
     * Converts `string` to an integer of the specified radix. If `radix` is
     * `undefined` or `0`, a `radix` of `10` is used unless `value` is a hexadecimal,
     * in which case a `radix` of `16` is used.
     *
     * **Note:** This method aligns with the [ES5 implementation](https://es5.github.io/#E)
     * of `parseInt`.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} string The string to convert.
     * @param {number} [radix] The radix to interpret `value` by.
     * @param- {Object} [guard] Enables use as an iteratee for functions like `_.map`.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.parseInt('08');
     * // => 8
     *
     * _.map(['6', '08', '10'], _.parseInt);
     * // => [6, 8, 10]
     */
    function parseInt(string, radix, guard) {
      // Chrome fails to trim leading <BOM> whitespace characters.
      // See https://code.google.com/p/v8/issues/detail?id=3109 for more details.
      if (guard || radix == null) {
        radix = 0;
      } else if (radix) {
        radix = +radix;
      }
      string = toString(string).replace(reTrim, '');
      return nativeParseInt(string, radix || (reHasHexPrefix.test(string) ? 16 : 10));
    }

    /**
     * Repeats the given string `n` times.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to repeat.
     * @param {number} [n=0] The number of times to repeat the string.
     * @returns {string} Returns the repeated string.
     * @example
     *
     * _.repeat('*', 3);
     * // => '***'
     *
     * _.repeat('abc', 2);
     * // => 'abcabc'
     *
     * _.repeat('abc', 0);
     * // => ''
     */
    function repeat(string, n) {
      string = toString(string);
      n = toInteger(n);

      var result = '';
      if (!string || n < 1 || n > MAX_SAFE_INTEGER) {
        return result;
      }
      // Leverage the exponentiation by squaring algorithm for a faster repeat.
      // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.
      do {
        if (n % 2) {
          result += string;
        }
        n = nativeFloor(n / 2);
        string += string;
      } while (n);

      return result;
    }

    /**
     * Replaces matches for `pattern` in `string` with `replacement`.
     *
     * **Note:** This method is based on [`String#replace`](https://mdn.io/String/replace).
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to modify.
     * @param {RegExp|string} pattern The pattern to replace.
     * @param {Function|string} replacement The match replacement.
     * @returns {string} Returns the modified string.
     * @example
     *
     * _.replace('Hi Fred', 'Fred', 'Barney');
     * // => 'Hi Barney'
     */
    function replace() {
      var args = arguments,
          string = toString(args[0]);

      return args.length < 3 ? string : string.replace(args[1], args[2]);
    }

    /**
     * Converts `string` to [snake case](https://en.wikipedia.org/wiki/Snake_case).
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the snake cased string.
     * @example
     *
     * _.snakeCase('Foo Bar');
     * // => 'foo_bar'
     *
     * _.snakeCase('fooBar');
     * // => 'foo_bar'
     *
     * _.snakeCase('--foo-bar');
     * // => 'foo_bar'
     */
    var snakeCase = createCompounder(function(result, word, index) {
      return result + (index ? '_' : '') + word.toLowerCase();
    });

    /**
     * Splits `string` by `separator`.
     *
     * **Note:** This method is based on [`String#split`](https://mdn.io/String/split).
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to split.
     * @param {RegExp|string} separator The separator pattern to split by.
     * @param {number} [limit] The length to truncate results to.
     * @returns {Array} Returns the new array of string segments.
     * @example
     *
     * _.split('a-b-c', '-', 2);
     * // => ['a', 'b']
     */
    function split(string, separator, limit) {
      return toString(string).split(separator, limit);
    }

    /**
     * Converts `string` to [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the start cased string.
     * @example
     *
     * _.startCase('--foo-bar');
     * // => 'Foo Bar'
     *
     * _.startCase('fooBar');
     * // => 'Foo Bar'
     *
     * _.startCase('__foo_bar__');
     * // => 'Foo Bar'
     */
    var startCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + capitalize(word);
    });

    /**
     * Checks if `string` starts with the given target string.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to search.
     * @param {string} [target] The string to search for.
     * @param {number} [position=0] The position to search from.
     * @returns {boolean} Returns `true` if `string` starts with `target`, else `false`.
     * @example
     *
     * _.startsWith('abc', 'a');
     * // => true
     *
     * _.startsWith('abc', 'b');
     * // => false
     *
     * _.startsWith('abc', 'b', 1);
     * // => true
     */
    function startsWith(string, target, position) {
      string = toString(string);
      position = baseClamp(toInteger(position), 0, string.length);
      return string.lastIndexOf(target, position) == position;
    }

    /**
     * Creates a compiled template function that can interpolate data properties
     * in "interpolate" delimiters, HTML-escape interpolated data properties in
     * "escape" delimiters, and execute JavaScript in "evaluate" delimiters. Data
     * properties may be accessed as free variables in the template. If a setting
     * object is provided it takes precedence over `_.templateSettings` values.
     *
     * **Note:** In the development build `_.template` utilizes
     * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)
     * for easier debugging.
     *
     * For more information on precompiling templates see
     * [lodash's custom builds documentation](https://lodash.com/custom-builds).
     *
     * For more information on Chrome extension sandboxes see
     * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The template string.
     * @param {Object} [options] The options object.
     * @param {RegExp} [options.escape] The HTML "escape" delimiter.
     * @param {RegExp} [options.evaluate] The "evaluate" delimiter.
     * @param {Object} [options.imports] An object to import into the template as free variables.
     * @param {RegExp} [options.interpolate] The "interpolate" delimiter.
     * @param {string} [options.sourceURL] The sourceURL of the template's compiled source.
     * @param {string} [options.variable] The data object variable name.
     * @param- {Object} [guard] Enables use as an iteratee for functions like `_.map`.
     * @returns {Function} Returns the compiled template function.
     * @example
     *
     * // using the "interpolate" delimiter to create a compiled template
     * var compiled = _.template('hello <%= user %>!');
     * compiled({ 'user': 'fred' });
     * // => 'hello fred!'
     *
     * // using the HTML "escape" delimiter to escape data property values
     * var compiled = _.template('<b><%- value %></b>');
     * compiled({ 'value': '<script>' });
     * // => '<b>&lt;script&gt;</b>'
     *
     * // using the "evaluate" delimiter to execute JavaScript and generate HTML
     * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');
     * compiled({ 'users': ['fred', 'barney'] });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // using the internal `print` function in "evaluate" delimiters
     * var compiled = _.template('<% print("hello " + user); %>!');
     * compiled({ 'user': 'barney' });
     * // => 'hello barney!'
     *
     * // using the ES delimiter as an alternative to the default "interpolate" delimiter
     * var compiled = _.template('hello ${ user }!');
     * compiled({ 'user': 'pebbles' });
     * // => 'hello pebbles!'
     *
     * // using custom template delimiters
     * _.templateSettings.interpolate = /{{([\s\S]+?)}}/g;
     * var compiled = _.template('hello {{ user }}!');
     * compiled({ 'user': 'mustache' });
     * // => 'hello mustache!'
     *
     * // using backslashes to treat delimiters as plain text
     * var compiled = _.template('<%= "\\<%- value %\\>" %>');
     * compiled({ 'value': 'ignored' });
     * // => '<%- value %>'
     *
     * // using the `imports` option to import `jQuery` as `jq`
     * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';
     * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });
     * compiled({ 'users': ['fred', 'barney'] });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // using the `sourceURL` option to specify a custom sourceURL for the template
     * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });
     * compiled(data);
     * // => find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector
     *
     * // using the `variable` option to ensure a with-statement isn't used in the compiled template
     * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });
     * compiled.source;
     * // => function(data) {
     * //   var __t, __p = '';
     * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';
     * //   return __p;
     * // }
     *
     * // using the `source` property to inline compiled templates for meaningful
     * // line numbers in error messages and a stack trace
     * fs.writeFileSync(path.join(cwd, 'jst.js'), '\
     *   var JST = {\
     *     "main": ' + _.template(mainText).source + '\
     *   };\
     * ');
     */
    function template(string, options, guard) {
      // Based on John Resig's `tmpl` implementation (http://ejohn.org/blog/javascript-micro-templating/)
      // and Laura Doktorova's doT.js (https://github.com/olado/doT).
      var settings = lodash.templateSettings;

      if (guard && isIterateeCall(string, options, guard)) {
        options = undefined;
      }
      string = toString(string);
      options = assignInWith({}, options, settings, assignInDefaults);

      var imports = assignInWith({}, options.imports, settings.imports, assignInDefaults),
          importsKeys = keys(imports),
          importsValues = baseValues(imports, importsKeys);

      var isEscaping,
          isEvaluating,
          index = 0,
          interpolate = options.interpolate || reNoMatch,
          source = "__p += '";

      // Compile the regexp to match each delimiter.
      var reDelimiters = RegExp(
        (options.escape || reNoMatch).source + '|' +
        interpolate.source + '|' +
        (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +
        (options.evaluate || reNoMatch).source + '|$'
      , 'g');

      // Use a sourceURL for easier debugging.
      var sourceURL = '//# sourceURL=' +
        ('sourceURL' in options
          ? options.sourceURL
          : ('lodash.templateSources[' + (++templateCounter) + ']')
        ) + '\n';

      string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
        interpolateValue || (interpolateValue = esTemplateValue);

        // Escape characters that can't be included in string literals.
        source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);

        // Replace delimiters with snippets.
        if (escapeValue) {
          isEscaping = true;
          source += "' +\n__e(" + escapeValue + ") +\n'";
        }
        if (evaluateValue) {
          isEvaluating = true;
          source += "';\n" + evaluateValue + ";\n__p += '";
        }
        if (interpolateValue) {
          source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
        }
        index = offset + match.length;

        // The JS engine embedded in Adobe products needs `match` returned in
        // order to produce the correct `offset` value.
        return match;
      });

      source += "';\n";

      // If `variable` is not specified wrap a with-statement around the generated
      // code to add the data object to the top of the scope chain.
      var variable = options.variable;
      if (!variable) {
        source = 'with (obj) {\n' + source + '\n}\n';
      }
      // Cleanup code by stripping empty strings.
      source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)
        .replace(reEmptyStringMiddle, '$1')
        .replace(reEmptyStringTrailing, '$1;');

      // Frame code as the function body.
      source = 'function(' + (variable || 'obj') + ') {\n' +
        (variable
          ? ''
          : 'obj || (obj = {});\n'
        ) +
        "var __t, __p = ''" +
        (isEscaping
           ? ', __e = _.escape'
           : ''
        ) +
        (isEvaluating
          ? ', __j = Array.prototype.join;\n' +
            "function print() { __p += __j.call(arguments, '') }\n"
          : ';\n'
        ) +
        source +
        'return __p\n}';

      var result = attempt(function() {
        return Function(importsKeys, sourceURL + 'return ' + source).apply(undefined, importsValues);
      });

      // Provide the compiled function's source by its `toString` method or
      // the `source` property as a convenience for inlining compiled templates.
      result.source = source;
      if (isError(result)) {
        throw result;
      }
      return result;
    }

    /**
     * Converts `string`, as a whole, to lower case.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the lower cased string.
     * @example
     *
     * _.toLower('--Foo-Bar');
     * // => '--foo-bar'
     *
     * _.toLower('fooBar');
     * // => 'foobar'
     *
     * _.toLower('__FOO_BAR__');
     * // => '__foo_bar__'
     */
    function toLower(value) {
      return toString(value).toLowerCase();
    }

    /**
     * Converts `string`, as a whole, to upper case.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the upper cased string.
     * @example
     *
     * _.toUpper('--foo-bar');
     * // => '--FOO-BAR'
     *
     * _.toUpper('fooBar');
     * // => 'FOOBAR'
     *
     * _.toUpper('__foo_bar__');
     * // => '__FOO_BAR__'
     */
    function toUpper(value) {
      return toString(value).toUpperCase();
    }

    /**
     * Removes leading and trailing whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for functions like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trim('  abc  ');
     * // => 'abc'
     *
     * _.trim('-_-abc-_-', '_-');
     * // => 'abc'
     *
     * _.map(['  foo  ', '  bar  '], _.trim);
     * // => ['foo', 'bar']
     */
    function trim(string, chars, guard) {
      string = toString(string);
      if (!string) {
        return string;
      }
      if (guard || chars === undefined) {
        return string.replace(reTrim, '');
      }
      chars = (chars + '');
      if (!chars) {
        return string;
      }
      var strSymbols = stringToArray(string),
          chrSymbols = stringToArray(chars);

      return strSymbols.slice(charsStartIndex(strSymbols, chrSymbols), charsEndIndex(strSymbols, chrSymbols) + 1).join('');
    }

    /**
     * Removes trailing whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for functions like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trimEnd('  abc  ');
     * // => '  abc'
     *
     * _.trimEnd('-_-abc-_-', '_-');
     * // => '-_-abc'
     */
    function trimEnd(string, chars, guard) {
      string = toString(string);
      if (!string) {
        return string;
      }
      if (guard || chars === undefined) {
        return string.replace(reTrimEnd, '');
      }
      chars = (chars + '');
      if (!chars) {
        return string;
      }
      var strSymbols = stringToArray(string);
      return strSymbols.slice(0, charsEndIndex(strSymbols, stringToArray(chars)) + 1).join('');
    }

    /**
     * Removes leading whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for functions like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trimStart('  abc  ');
     * // => 'abc  '
     *
     * _.trimStart('-_-abc-_-', '_-');
     * // => 'abc-_-'
     */
    function trimStart(string, chars, guard) {
      string = toString(string);
      if (!string) {
        return string;
      }
      if (guard || chars === undefined) {
        return string.replace(reTrimStart, '');
      }
      chars = (chars + '');
      if (!chars) {
        return string;
      }
      var strSymbols = stringToArray(string);
      return strSymbols.slice(charsStartIndex(strSymbols, stringToArray(chars))).join('');
    }

    /**
     * Truncates `string` if it's longer than the given maximum string length.
     * The last characters of the truncated string are replaced with the omission
     * string which defaults to "...".
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to truncate.
     * @param {Object} [options] The options object.
     * @param {number} [options.length=30] The maximum string length.
     * @param {string} [options.omission='...'] The string to indicate text is omitted.
     * @param {RegExp|string} [options.separator] The separator pattern to truncate to.
     * @returns {string} Returns the truncated string.
     * @example
     *
     * _.truncate('hi-diddly-ho there, neighborino');
     * // => 'hi-diddly-ho there, neighbo...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'length': 24,
     *   'separator': ' '
     * });
     * // => 'hi-diddly-ho there,...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'length': 24,
     *   'separator': /,? +/
     * });
     * // => 'hi-diddly-ho there...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'omission': ' [...]'
     * });
     * // => 'hi-diddly-ho there, neig [...]'
     */
    function truncate(string, options) {
      var length = DEFAULT_TRUNC_LENGTH,
          omission = DEFAULT_TRUNC_OMISSION;

      if (isObject(options)) {
        var separator = 'separator' in options ? options.separator : separator;
        length = 'length' in options ? toInteger(options.length) : length;
        omission = 'omission' in options ? toString(options.omission) : omission;
      }
      string = toString(string);

      var strLength = string.length;
      if (reHasComplexSymbol.test(string)) {
        var strSymbols = stringToArray(string);
        strLength = strSymbols.length;
      }
      if (length >= strLength) {
        return string;
      }
      var end = length - stringSize(omission);
      if (end < 1) {
        return omission;
      }
      var result = strSymbols
        ? strSymbols.slice(0, end).join('')
        : string.slice(0, end);

      if (separator === undefined) {
        return result + omission;
      }
      if (strSymbols) {
        end += (result.length - end);
      }
      if (isRegExp(separator)) {
        if (string.slice(end).search(separator)) {
          var match,
              substring = result;

          if (!separator.global) {
            separator = RegExp(separator.source, toString(reFlags.exec(separator)) + 'g');
          }
          separator.lastIndex = 0;
          while ((match = separator.exec(substring))) {
            var newEnd = match.index;
          }
          result = result.slice(0, newEnd === undefined ? end : newEnd);
        }
      } else if (string.indexOf(separator, end) != end) {
        var index = result.lastIndexOf(separator);
        if (index > -1) {
          result = result.slice(0, index);
        }
      }
      return result + omission;
    }

    /**
     * The inverse of `_.escape`; this method converts the HTML entities
     * `&amp;`, `&lt;`, `&gt;`, `&quot;`, `&#39;`, and `&#96;` in `string` to their
     * corresponding characters.
     *
     * **Note:** No other HTML entities are unescaped. To unescape additional HTML
     * entities use a third-party library like [_he_](https://mths.be/he).
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to unescape.
     * @returns {string} Returns the unescaped string.
     * @example
     *
     * _.unescape('fred, barney, &amp; pebbles');
     * // => 'fred, barney, & pebbles'
     */
    function unescape(string) {
      string = toString(string);
      return (string && reHasEscapedHtml.test(string))
        ? string.replace(reEscapedHtml, unescapeHtmlChar)
        : string;
    }

    /**
     * Converts `string`, as space separated words, to upper case.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the upper cased string.
     * @example
     *
     * _.upperCase('--foo-bar');
     * // => 'FOO BAR'
     *
     * _.upperCase('fooBar');
     * // => 'FOO BAR'
     *
     * _.upperCase('__foo_bar__');
     * // => 'FOO BAR'
     */
    var upperCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + word.toUpperCase();
    });

    /**
     * Splits `string` into an array of its words.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {RegExp|string} [pattern] The pattern to match words.
     * @param- {Object} [guard] Enables use as an iteratee for functions like `_.map`.
     * @returns {Array} Returns the words of `string`.
     * @example
     *
     * _.words('fred, barney, & pebbles');
     * // => ['fred', 'barney', 'pebbles']
     *
     * _.words('fred, barney, & pebbles', /[^, ]+/g);
     * // => ['fred', 'barney', '&', 'pebbles']
     */
    function words(string, pattern, guard) {
      string = toString(string);
      pattern = guard ? undefined : pattern;

      if (pattern === undefined) {
        pattern = reHasComplexWord.test(string) ? reComplexWord : reBasicWord;
      }
      return string.match(pattern) || [];
    }

    /*------------------------------------------------------------------------*/

    /**
     * Attempts to invoke `func`, returning either the result or the caught error
     * object. Any additional arguments are provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @category Util
     * @param {Function} func The function to attempt.
     * @returns {*} Returns the `func` result or error object.
     * @example
     *
     * // avoid throwing errors for invalid selectors
     * var elements = _.attempt(function(selector) {
     *   return document.querySelectorAll(selector);
     * }, '>_>');
     *
     * if (_.isError(elements)) {
     *   elements = [];
     * }
     */
    var attempt = rest(function(func, args) {
      try {
        return apply(func, undefined, args);
      } catch (e) {
        return isError(e) ? e : new Error(e);
      }
    });

    /**
     * Binds methods of an object to the object itself, overwriting the existing
     * method.
     *
     * **Note:** This method doesn't set the "length" property of bound functions.
     *
     * @static
     * @memberOf _
     * @category Util
     * @param {Object} object The object to bind and assign the bound methods to.
     * @param {...(string|string[])} methodNames The object method names to bind,
     *  specified individually or in arrays.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var view = {
     *   'label': 'docs',
     *   'onClick': function() {
     *     console.log('clicked ' + this.label);
     *   }
     * };
     *
     * _.bindAll(view, 'onClick');
     * jQuery(element).on('click', view.onClick);
     * // => logs 'clicked docs' when clicked
     */
    var bindAll = rest(function(object, methodNames) {
      arrayEach(baseFlatten(methodNames), function(key) {
        object[key] = bind(object[key], object);
      });
      return object;
    });

    /**
     * Creates a function that iterates over `pairs` invoking the corresponding
     * function of the first predicate to return truthy. The predicate-function
     * pairs are invoked with the `this` binding and arguments of the created
     * function.
     *
     * @static
     * @memberOf _
     * @category Util
     * @param {Array} pairs The predicate-function pairs.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.cond([
     *   [_.matches({ 'a': 1 }),           _.constant('matches A')],
     *   [_.conforms({ 'b': _.isNumber }), _.constant('matches B')],
     *   [_.constant(true),                _.constant('no match')]
     * ])
     *
     * func({ 'a': 1, 'b': 2 });
     * // => 'matches A'
     *
     * func({ 'a': 0, 'b': 1 });
     * // => 'matches B'
     *
     * func({ 'a': '1', 'b': '2' });
     * // => 'no match'
     */
    function cond(pairs) {
      var length = pairs ? pairs.length : 0,
          toIteratee = getIteratee();

      pairs = !length ? [] : arrayMap(pairs, function(pair) {
        if (typeof pair[1] != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        return [toIteratee(pair[0]), pair[1]];
      });

      return rest(function(args) {
        var index = -1;
        while (++index < length) {
          var pair = pairs[index];
          if (apply(pair[0], this, args)) {
            return apply(pair[1], this, args);
          }
        }
      });
    }

    /**
     * Creates a function that invokes the predicate properties of `source` with
     * the corresponding property values of a given object, returning `true` if
     * all predicates return truthy, else `false`.
     *
     * @static
     * @memberOf _
     * @category Util
     * @param {Object} source The object of property predicates to conform to.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 }
     * ];
     *
     * _.filter(users, _.conforms({ 'age': _.partial(_.gt, _, 38) }));
     * // => [{ 'user': 'fred', 'age': 40 }]
     */
    function conforms(source) {
      return baseConforms(baseClone(source, true));
    }

    /**
     * Creates a function that returns `value`.
     *
     * @static
     * @memberOf _
     * @category Util
     * @param {*} value The value to return from the new function.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var object = { 'user': 'fred' };
     * var getter = _.constant(object);
     *
     * getter() === object;
     * // => true
     */
    function constant(value) {
      return function() {
        return value;
      };
    }

    /**
     * Creates a function that returns the result of invoking the provided
     * functions with the `this` binding of the created function, where each
     * successive invocation is supplied the return value of the previous.
     *
     * @static
     * @memberOf _
     * @category Util
     * @param {...(Function|Function[])} [funcs] Functions to invoke.
     * @returns {Function} Returns the new function.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var addSquare = _.flow(_.add, square);
     * addSquare(1, 2);
     * // => 9
     */
    var flow = createFlow();

    /**
     * This method is like `_.flow` except that it creates a function that
     * invokes the provided functions from right to left.
     *
     * @static
     * @memberOf _
     * @category Util
     * @param {...(Function|Function[])} [funcs] Functions to invoke.
     * @returns {Function} Returns the new function.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var addSquare = _.flowRight(square, _.add);
     * addSquare(1, 2);
     * // => 9
     */
    var flowRight = createFlow(true);

    /**
     * This method returns the first argument provided to it.
     *
     * @static
     * @memberOf _
     * @category Util
     * @param {*} value Any value.
     * @returns {*} Returns `value`.
     * @example
     *
     * var object = { 'user': 'fred' };
     *
     * _.identity(object) === object;
     * // => true
     */
    function identity(value) {
      return value;
    }

    /**
     * Creates a function that invokes `func` with the arguments of the created
     * function. If `func` is a property name the created callback returns the
     * property value for a given element. If `func` is an object the created
     * callback returns `true` for elements that contain the equivalent object properties, otherwise it returns `false`.
     *
     * @static
     * @memberOf _
     * @category Util
     * @param {*} [func=_.identity] The value to convert to a callback.
     * @returns {Function} Returns the callback.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 }
     * ];
     *
     * // create custom iteratee shorthands
     * _.iteratee = _.wrap(_.iteratee, function(callback, func) {
     *   var p = /^(\S+)\s*([<>])\s*(\S+)$/.exec(func);
     *   return !p ? callback(func) : function(object) {
     *     return (p[2] == '>' ? object[p[1]] > p[3] : object[p[1]] < p[3]);
     *   };
     * });
     *
     * _.filter(users, 'age > 36');
     * // => [{ 'user': 'fred', 'age': 40 }]
     */
    function iteratee(func) {
      return (isObjectLike(func) && !isArray(func))
        ? matches(func)
        : baseIteratee(func);
    }

    /**
     * Creates a function that performs a deep partial comparison between a given
     * object and `source`, returning `true` if the given object has equivalent
     * property values, else `false`.
     *
     * **Note:** This method supports comparing the same values as `_.isEqual`.
     *
     * @static
     * @memberOf _
     * @category Util
     * @param {Object} source The object of property values to match.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * _.filter(users, _.matches({ 'age': 40, 'active': false }));
     * // => [{ 'user': 'fred', 'age': 40, 'active': false }]
     */
    function matches(source) {
      return baseMatches(baseClone(source, true));
    }

    /**
     * Creates a function that performs a deep partial comparison between the
     * value at `path` of a given object to `srcValue`, returning `true` if the
     * object value is equivalent, else `false`.
     *
     * **Note:** This method supports comparing the same values as `_.isEqual`.
     *
     * @static
     * @memberOf _
     * @category Util
     * @param {Array|string} path The path of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var users = [
     *   { 'user': 'barney' },
     *   { 'user': 'fred' }
     * ];
     *
     * _.find(users, _.matchesProperty('user', 'fred'));
     * // => { 'user': 'fred' }
     */
    function matchesProperty(path, srcValue) {
      return baseMatchesProperty(path, baseClone(srcValue, true));
    }

    /**
     * Creates a function that invokes the method at `path` of a given object.
     * Any additional arguments are provided to the invoked method.
     *
     * @static
     * @memberOf _
     * @category Util
     * @param {Array|string} path The path of the method to invoke.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var objects = [
     *   { 'a': { 'b': { 'c': _.constant(2) } } },
     *   { 'a': { 'b': { 'c': _.constant(1) } } }
     * ];
     *
     * _.map(objects, _.method('a.b.c'));
     * // => [2, 1]
     *
     * _.invokeMap(_.sortBy(objects, _.method(['a', 'b', 'c'])), 'a.b.c');
     * // => [1, 2]
     */
    var method = rest(function(path, args) {
      return function(object) {
        return baseInvoke(object, path, args);
      };
    });

    /**
     * The opposite of `_.method`; this method creates a function that invokes
     * the method at a given path of `object`. Any additional arguments are
     * provided to the invoked method.
     *
     * @static
     * @memberOf _
     * @category Util
     * @param {Object} object The object to query.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var array = _.times(3, _.constant),
     *     object = { 'a': array, 'b': array, 'c': array };
     *
     * _.map(['a[2]', 'c[0]'], _.methodOf(object));
     * // => [2, 0]
     *
     * _.map([['a', '2'], ['c', '0']], _.methodOf(object));
     * // => [2, 0]
     */
    var methodOf = rest(function(object, args) {
      return function(path) {
        return baseInvoke(object, path, args);
      };
    });

    /**
     * Adds all own enumerable function properties of a source object to the
     * destination object. If `object` is a function then methods are added to
     * its prototype as well.
     *
     * **Note:** Use `_.runInContext` to create a pristine `lodash` function to
     * avoid conflicts caused by modifying the original.
     *
     * @static
     * @memberOf _
     * @category Util
     * @param {Function|Object} [object=lodash] The destination object.
     * @param {Object} source The object of functions to add.
     * @param {Object} [options] The options object.
     * @param {boolean} [options.chain=true] Specify whether the functions added
     *  are chainable.
     * @returns {Function|Object} Returns `object`.
     * @example
     *
     * function vowels(string) {
     *   return _.filter(string, function(v) {
     *     return /[aeiou]/i.test(v);
     *   });
     * }
     *
     * _.mixin({ 'vowels': vowels });
     * _.vowels('fred');
     * // => ['e']
     *
     * _('fred').vowels().value();
     * // => ['e']
     *
     * _.mixin({ 'vowels': vowels }, { 'chain': false });
     * _('fred').vowels();
     * // => ['e']
     */
    function mixin(object, source, options) {
      var props = keys(source),
          methodNames = baseFunctions(source, props);

      if (options == null &&
          !(isObject(source) && (methodNames.length || !props.length))) {
        options = source;
        source = object;
        object = this;
        methodNames = baseFunctions(source, keys(source));
      }
      var chain = (isObject(options) && 'chain' in options) ? options.chain : true,
          isFunc = isFunction(object);

      arrayEach(methodNames, function(methodName) {
        var func = source[methodName];
        object[methodName] = func;
        if (isFunc) {
          object.prototype[methodName] = function() {
            var chainAll = this.__chain__;
            if (chain || chainAll) {
              var result = object(this.__wrapped__),
                  actions = result.__actions__ = copyArray(this.__actions__);

              actions.push({ 'func': func, 'args': arguments, 'thisArg': object });
              result.__chain__ = chainAll;
              return result;
            }
            return func.apply(object, arrayPush([this.value()], arguments));
          };
        }
      });

      return object;
    }

    /**
     * Reverts the `_` variable to its previous value and returns a reference to
     * the `lodash` function.
     *
     * @static
     * @memberOf _
     * @category Util
     * @returns {Function} Returns the `lodash` function.
     * @example
     *
     * var lodash = _.noConflict();
     */
    function noConflict() {
      root._ = oldDash;
      return this;
    }

    /**
     * A no-operation function that returns `undefined` regardless of the
     * arguments it receives.
     *
     * @static
     * @memberOf _
     * @category Util
     * @example
     *
     * var object = { 'user': 'fred' };
     *
     * _.noop(object) === undefined;
     * // => true
     */
    function noop() {
      // No operation performed.
    }

    /**
     * Creates a function that returns its nth argument.
     *
     * @static
     * @memberOf _
     * @category Util
     * @param {number} [n=0] The index of the argument to return.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.nthArg(1);
     *
     * func('a', 'b', 'c');
     * // => 'b'
     */
    function nthArg(n) {
      n = toInteger(n);
      return function() {
        return arguments[n];
      };
    }

    /**
     * Creates a function that invokes `iteratees` with the arguments provided
     * to the created function and returns their results.
     *
     * @static
     * @memberOf _
     * @category Util
     * @param {...(Function|Function[])} iteratees The iteratees to invoke.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.over(Math.max, Math.min);
     *
     * func(1, 2, 3, 4);
     * // => [4, 1]
     */
    var over = createOver(arrayMap);

    /**
     * Creates a function that checks if **all** of the `predicates` return
     * truthy when invoked with the arguments provided to the created function.
     *
     * @static
     * @memberOf _
     * @category Util
     * @param {...(Function|Function[])} predicates The predicates to check.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.overEvery(Boolean, isFinite);
     *
     * func('1');
     * // => true
     *
     * func(null);
     * // => false
     *
     * func(NaN);
     * // => false
     */
    var overEvery = createOver(arrayEvery);

    /**
     * Creates a function that checks if **any** of the `predicates` return
     * truthy when invoked with the arguments provided to the created function.
     *
     * @static
     * @memberOf _
     * @category Util
     * @param {...(Function|Function[])} predicates The predicates to check.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.overSome(Boolean, isFinite);
     *
     * func('1');
     * // => true
     *
     * func(null);
     * // => true
     *
     * func(NaN);
     * // => false
     */
    var overSome = createOver(arraySome);

    /**
     * Creates a function that returns the value at `path` of a given object.
     *
     * @static
     * @memberOf _
     * @category Util
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var objects = [
     *   { 'a': { 'b': { 'c': 2 } } },
     *   { 'a': { 'b': { 'c': 1 } } }
     * ];
     *
     * _.map(objects, _.property('a.b.c'));
     * // => [2, 1]
     *
     * _.map(_.sortBy(objects, _.property(['a', 'b', 'c'])), 'a.b.c');
     * // => [1, 2]
     */
    function property(path) {
      return isKey(path) ? baseProperty(path) : basePropertyDeep(path);
    }

    /**
     * The opposite of `_.property`; this method creates a function that returns
     * the value at a given path of `object`.
     *
     * @static
     * @memberOf _
     * @category Util
     * @param {Object} object The object to query.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var array = [0, 1, 2],
     *     object = { 'a': array, 'b': array, 'c': array };
     *
     * _.map(['a[2]', 'c[0]'], _.propertyOf(object));
     * // => [2, 0]
     *
     * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));
     * // => [2, 0]
     */
    function propertyOf(object) {
      return function(path) {
        return object == null ? undefined : baseGet(object, path);
      };
    }

    /**
     * Creates an array of numbers (positive and/or negative) progressing from
     * `start` up to, but not including, `end`. A step of `-1` is used if a negative
     * `start` is specified without an `end` or `step`. If `end` is not specified
     * it's set to `start` with `start` then set to `0`.  If `end` is less than
     * `start` a zero-length range is created unless a negative `step` is specified.
     *
     * **Note:** JavaScript follows the IEEE-754 standard for resolving
     * floating-point values which can produce unexpected results.
     *
     * @static
     * @memberOf _
     * @category Util
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @param {number} [step=1] The value to increment or decrement by.
     * @returns {Array} Returns the new array of numbers.
     * @example
     *
     * _.range(4);
     * // => [0, 1, 2, 3]
     *
     * _.range(-4);
     * // => [0, -1, -2, -3]
     *
     * _.range(1, 5);
     * // => [1, 2, 3, 4]
     *
     * _.range(0, 20, 5);
     * // => [0, 5, 10, 15]
     *
     * _.range(0, -4, -1);
     * // => [0, -1, -2, -3]
     *
     * _.range(1, 4, 0);
     * // => [1, 1, 1]
     *
     * _.range(0);
     * // => []
     */
    var range = createRange();

    /**
     * This method is like `_.range` except that it populates values in
     * descending order.
     *
     * @static
     * @memberOf _
     * @category Util
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @param {number} [step=1] The value to increment or decrement by.
     * @returns {Array} Returns the new array of numbers.
     * @example
     *
     * _.rangeRight(4);
     * // => [3, 2, 1, 0]
     *
     * _.rangeRight(-4);
     * // => [-3, -2, -1, 0]
     *
     * _.rangeRight(1, 5);
     * // => [4, 3, 2, 1]
     *
     * _.rangeRight(0, 20, 5);
     * // => [15, 10, 5, 0]
     *
     * _.rangeRight(0, -4, -1);
     * // => [-3, -2, -1, 0]
     *
     * _.rangeRight(1, 4, 0);
     * // => [1, 1, 1]
     *
     * _.rangeRight(0);
     * // => []
     */
    var rangeRight = createRange(true);

    /**
     * Invokes the iteratee function `n` times, returning an array of the results
     * of each invocation. The iteratee is invoked with one argument; (index).
     *
     * @static
     * @memberOf _
     * @category Util
     * @param {number} n The number of times to invoke `iteratee`.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the array of results.
     * @example
     *
     * _.times(3, String);
     * // => ['0', '1', '2']
     *
     *  _.times(4, _.constant(true));
     * // => [true, true, true, true]
     */
    function times(n, iteratee) {
      n = toInteger(n);
      if (n < 1 || n > MAX_SAFE_INTEGER) {
        return [];
      }
      var index = MAX_ARRAY_LENGTH,
          length = nativeMin(n, MAX_ARRAY_LENGTH);

      iteratee = toFunction(iteratee);
      n -= MAX_ARRAY_LENGTH;

      var result = baseTimes(length, iteratee);
      while (++index < n) {
        iteratee(index);
      }
      return result;
    }

    /**
     * Converts `value` to a property path array.
     *
     * @static
     * @memberOf _
     * @category Util
     * @param {*} value The value to convert.
     * @returns {Array} Returns the new property path array.
     * @example
     *
     * _.toPath('a.b.c');
     * // => ['a', 'b', 'c']
     *
     * _.toPath('a[0].b.c');
     * // => ['a', '0', 'b', 'c']
     *
     * var path = ['a', 'b', 'c'],
     *     newPath = _.toPath(path);
     *
     * console.log(newPath);
     * // => ['a', 'b', 'c']
     *
     * console.log(path === newPath);
     * // => false
     */
    function toPath(value) {
      return isArray(value) ? arrayMap(value, String) : stringToPath(value);
    }

    /**
     * Generates a unique ID. If `prefix` is provided the ID is appended to it.
     *
     * @static
     * @memberOf _
     * @category Util
     * @param {string} [prefix] The value to prefix the ID with.
     * @returns {string} Returns the unique ID.
     * @example
     *
     * _.uniqueId('contact_');
     * // => 'contact_104'
     *
     * _.uniqueId();
     * // => '105'
     */
    function uniqueId(prefix) {
      var id = ++idCounter;
      return toString(prefix) + id;
    }

    /*------------------------------------------------------------------------*/

    /**
     * Adds two numbers.
     *
     * @static
     * @memberOf _
     * @category Math
     * @param {number} augend The first number in an addition.
     * @param {number} addend The second number in an addition.
     * @returns {number} Returns the total.
     * @example
     *
     * _.add(6, 4);
     * // => 10
     */
    function add(augend, addend) {
      var result;
      if (augend !== undefined) {
        result = augend;
      }
      if (addend !== undefined) {
        result = result === undefined ? addend : (result + addend);
      }
      return result;
    }

    /**
     * Computes `number` rounded up to `precision`.
     *
     * @static
     * @memberOf _
     * @category Math
     * @param {number} number The number to round up.
     * @param {number} [precision=0] The precision to round up to.
     * @returns {number} Returns the rounded up number.
     * @example
     *
     * _.ceil(4.006);
     * // => 5
     *
     * _.ceil(6.004, 2);
     * // => 6.01
     *
     * _.ceil(6040, -2);
     * // => 6100
     */
    var ceil = createRound('ceil');

    /**
     * Computes `number` rounded down to `precision`.
     *
     * @static
     * @memberOf _
     * @category Math
     * @param {number} number The number to round down.
     * @param {number} [precision=0] The precision to round down to.
     * @returns {number} Returns the rounded down number.
     * @example
     *
     * _.floor(4.006);
     * // => 4
     *
     * _.floor(0.046, 2);
     * // => 0.04
     *
     * _.floor(4060, -2);
     * // => 4000
     */
    var floor = createRound('floor');

    /**
     * Computes the maximum value of `array`. If `array` is empty or falsey
     * `undefined` is returned.
     *
     * @static
     * @memberOf _
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {*} Returns the maximum value.
     * @example
     *
     * _.max([4, 2, 8, 6]);
     * // => 8
     *
     * _.max([]);
     * // => undefined
     */
    function max(array) {
      return (array && array.length)
        ? baseExtremum(array, identity, gt)
        : undefined;
    }

    /**
     * This method is like `_.max` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * the value is ranked. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function|Object|string} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {*} Returns the maximum value.
     * @example
     *
     * var objects = [{ 'n': 1 }, { 'n': 2 }];
     *
     * _.maxBy(objects, function(o) { return o.a; });
     * // => { 'n': 2 }
     *
     * // using the `_.property` iteratee shorthand
     * _.maxBy(objects, 'n');
     * // => { 'n': 2 }
     */
    function maxBy(array, iteratee) {
      return (array && array.length)
        ? baseExtremum(array, getIteratee(iteratee), gt)
        : undefined;
    }

    /**
     * Computes the mean of the values in `array`.
     *
     * @static
     * @memberOf _
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {number} Returns the mean.
     * @example
     *
     * _.mean([4, 2, 8, 6]);
     * // => 5
     */
    function mean(array) {
      return sum(array) / (array ? array.length : 0);
    }

    /**
     * Computes the minimum value of `array`. If `array` is empty or falsey
     * `undefined` is returned.
     *
     * @static
     * @memberOf _
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {*} Returns the minimum value.
     * @example
     *
     * _.min([4, 2, 8, 6]);
     * // => 2
     *
     * _.min([]);
     * // => undefined
     */
    function min(array) {
      return (array && array.length)
        ? baseExtremum(array, identity, lt)
        : undefined;
    }

    /**
     * This method is like `_.min` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * the value is ranked. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function|Object|string} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {*} Returns the minimum value.
     * @example
     *
     * var objects = [{ 'n': 1 }, { 'n': 2 }];
     *
     * _.minBy(objects, function(o) { return o.a; });
     * // => { 'n': 1 }
     *
     * // using the `_.property` iteratee shorthand
     * _.minBy(objects, 'n');
     * // => { 'n': 1 }
     */
    function minBy(array, iteratee) {
      return (array && array.length)
        ? baseExtremum(array, getIteratee(iteratee), lt)
        : undefined;
    }

    /**
     * Computes `number` rounded to `precision`.
     *
     * @static
     * @memberOf _
     * @category Math
     * @param {number} number The number to round.
     * @param {number} [precision=0] The precision to round to.
     * @returns {number} Returns the rounded number.
     * @example
     *
     * _.round(4.006);
     * // => 4
     *
     * _.round(4.006, 2);
     * // => 4.01
     *
     * _.round(4060, -2);
     * // => 4100
     */
    var round = createRound('round');

    /**
     * Subtract two numbers.
     *
     * @static
     * @memberOf _
     * @category Math
     * @param {number} minuend The first number in a subtraction.
     * @param {number} subtrahend The second number in a subtraction.
     * @returns {number} Returns the difference.
     * @example
     *
     * _.subtract(6, 4);
     * // => 2
     */
    function subtract(minuend, subtrahend) {
      var result;
      if (minuend !== undefined) {
        result = minuend;
      }
      if (subtrahend !== undefined) {
        result = result === undefined ? subtrahend : (result - subtrahend);
      }
      return result;
    }

    /**
     * Computes the sum of the values in `array`.
     *
     * @static
     * @memberOf _
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {number} Returns the sum.
     * @example
     *
     * _.sum([4, 2, 8, 6]);
     * // => 20
     */
    function sum(array) {
      return (array && array.length)
        ? baseSum(array, identity)
        : undefined;
    }

    /**
     * This method is like `_.sum` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the value to be summed.
     * The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function|Object|string} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the sum.
     * @example
     *
     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
     *
     * _.sumBy(objects, function(o) { return o.n; });
     * // => 20
     *
     * // using the `_.property` iteratee shorthand
     * _.sumBy(objects, 'n');
     * // => 20
     */
    function sumBy(array, iteratee) {
      return (array && array.length)
        ? baseSum(array, getIteratee(iteratee))
        : undefined;
    }

    /*------------------------------------------------------------------------*/

    // Ensure wrappers are instances of `baseLodash`.
    lodash.prototype = baseLodash.prototype;

    LodashWrapper.prototype = baseCreate(baseLodash.prototype);
    LodashWrapper.prototype.constructor = LodashWrapper;

    LazyWrapper.prototype = baseCreate(baseLodash.prototype);
    LazyWrapper.prototype.constructor = LazyWrapper;

    // Avoid inheriting from `Object.prototype` when possible.
    Hash.prototype = nativeCreate ? nativeCreate(null) : objectProto;

    // Add functions to the `MapCache`.
    MapCache.prototype.clear = mapClear;
    MapCache.prototype['delete'] = mapDelete;
    MapCache.prototype.get = mapGet;
    MapCache.prototype.has = mapHas;
    MapCache.prototype.set = mapSet;

    // Add functions to the `SetCache`.
    SetCache.prototype.push = cachePush;

    // Add functions to the `Stack` cache.
    Stack.prototype.clear = stackClear;
    Stack.prototype['delete'] = stackDelete;
    Stack.prototype.get = stackGet;
    Stack.prototype.has = stackHas;
    Stack.prototype.set = stackSet;

    // Assign cache to `_.memoize`.
    memoize.Cache = MapCache;

    // Add functions that return wrapped values when chaining.
    lodash.after = after;
    lodash.ary = ary;
    lodash.assign = assign;
    lodash.assignIn = assignIn;
    lodash.assignInWith = assignInWith;
    lodash.assignWith = assignWith;
    lodash.at = at;
    lodash.before = before;
    lodash.bind = bind;
    lodash.bindAll = bindAll;
    lodash.bindKey = bindKey;
    lodash.chain = chain;
    lodash.chunk = chunk;
    lodash.compact = compact;
    lodash.concat = concat;
    lodash.cond = cond;
    lodash.conforms = conforms;
    lodash.constant = constant;
    lodash.countBy = countBy;
    lodash.create = create;
    lodash.curry = curry;
    lodash.curryRight = curryRight;
    lodash.debounce = debounce;
    lodash.defaults = defaults;
    lodash.defaultsDeep = defaultsDeep;
    lodash.defer = defer;
    lodash.delay = delay;
    lodash.difference = difference;
    lodash.differenceBy = differenceBy;
    lodash.differenceWith = differenceWith;
    lodash.drop = drop;
    lodash.dropRight = dropRight;
    lodash.dropRightWhile = dropRightWhile;
    lodash.dropWhile = dropWhile;
    lodash.fill = fill;
    lodash.filter = filter;
    lodash.flatMap = flatMap;
    lodash.flatten = flatten;
    lodash.flattenDeep = flattenDeep;
    lodash.flip = flip;
    lodash.flow = flow;
    lodash.flowRight = flowRight;
    lodash.fromPairs = fromPairs;
    lodash.functions = functions;
    lodash.functionsIn = functionsIn;
    lodash.groupBy = groupBy;
    lodash.initial = initial;
    lodash.intersection = intersection;
    lodash.intersectionBy = intersectionBy;
    lodash.intersectionWith = intersectionWith;
    lodash.invert = invert;
    lodash.invokeMap = invokeMap;
    lodash.iteratee = iteratee;
    lodash.keyBy = keyBy;
    lodash.keys = keys;
    lodash.keysIn = keysIn;
    lodash.map = map;
    lodash.mapKeys = mapKeys;
    lodash.mapValues = mapValues;
    lodash.matches = matches;
    lodash.matchesProperty = matchesProperty;
    lodash.memoize = memoize;
    lodash.merge = merge;
    lodash.mergeWith = mergeWith;
    lodash.method = method;
    lodash.methodOf = methodOf;
    lodash.mixin = mixin;
    lodash.negate = negate;
    lodash.nthArg = nthArg;
    lodash.omit = omit;
    lodash.omitBy = omitBy;
    lodash.once = once;
    lodash.orderBy = orderBy;
    lodash.over = over;
    lodash.overArgs = overArgs;
    lodash.overEvery = overEvery;
    lodash.overSome = overSome;
    lodash.partial = partial;
    lodash.partialRight = partialRight;
    lodash.partition = partition;
    lodash.pick = pick;
    lodash.pickBy = pickBy;
    lodash.property = property;
    lodash.propertyOf = propertyOf;
    lodash.pull = pull;
    lodash.pullAll = pullAll;
    lodash.pullAllBy = pullAllBy;
    lodash.pullAt = pullAt;
    lodash.range = range;
    lodash.rangeRight = rangeRight;
    lodash.rearg = rearg;
    lodash.reject = reject;
    lodash.remove = remove;
    lodash.rest = rest;
    lodash.reverse = reverse;
    lodash.sampleSize = sampleSize;
    lodash.set = set;
    lodash.setWith = setWith;
    lodash.shuffle = shuffle;
    lodash.slice = slice;
    lodash.sortBy = sortBy;
    lodash.sortedUniq = sortedUniq;
    lodash.sortedUniqBy = sortedUniqBy;
    lodash.split = split;
    lodash.spread = spread;
    lodash.tail = tail;
    lodash.take = take;
    lodash.takeRight = takeRight;
    lodash.takeRightWhile = takeRightWhile;
    lodash.takeWhile = takeWhile;
    lodash.tap = tap;
    lodash.throttle = throttle;
    lodash.thru = thru;
    lodash.toArray = toArray;
    lodash.toPairs = toPairs;
    lodash.toPairsIn = toPairsIn;
    lodash.toPath = toPath;
    lodash.toPlainObject = toPlainObject;
    lodash.transform = transform;
    lodash.unary = unary;
    lodash.union = union;
    lodash.unionBy = unionBy;
    lodash.unionWith = unionWith;
    lodash.uniq = uniq;
    lodash.uniqBy = uniqBy;
    lodash.uniqWith = uniqWith;
    lodash.unset = unset;
    lodash.unzip = unzip;
    lodash.unzipWith = unzipWith;
    lodash.values = values;
    lodash.valuesIn = valuesIn;
    lodash.without = without;
    lodash.words = words;
    lodash.wrap = wrap;
    lodash.xor = xor;
    lodash.xorBy = xorBy;
    lodash.xorWith = xorWith;
    lodash.zip = zip;
    lodash.zipObject = zipObject;
    lodash.zipWith = zipWith;

    // Add aliases.
    lodash.each = forEach;
    lodash.eachRight = forEachRight;
    lodash.extend = assignIn;
    lodash.extendWith = assignInWith;

    // Add functions to `lodash.prototype`.
    mixin(lodash, lodash);

    /*------------------------------------------------------------------------*/

    // Add functions that return unwrapped values when chaining.
    lodash.add = add;
    lodash.attempt = attempt;
    lodash.camelCase = camelCase;
    lodash.capitalize = capitalize;
    lodash.ceil = ceil;
    lodash.clamp = clamp;
    lodash.clone = clone;
    lodash.cloneDeep = cloneDeep;
    lodash.cloneDeepWith = cloneDeepWith;
    lodash.cloneWith = cloneWith;
    lodash.deburr = deburr;
    lodash.endsWith = endsWith;
    lodash.eq = eq;
    lodash.escape = escape;
    lodash.escapeRegExp = escapeRegExp;
    lodash.every = every;
    lodash.find = find;
    lodash.findIndex = findIndex;
    lodash.findKey = findKey;
    lodash.findLast = findLast;
    lodash.findLastIndex = findLastIndex;
    lodash.findLastKey = findLastKey;
    lodash.floor = floor;
    lodash.forEach = forEach;
    lodash.forEachRight = forEachRight;
    lodash.forIn = forIn;
    lodash.forInRight = forInRight;
    lodash.forOwn = forOwn;
    lodash.forOwnRight = forOwnRight;
    lodash.get = get;
    lodash.gt = gt;
    lodash.gte = gte;
    lodash.has = has;
    lodash.hasIn = hasIn;
    lodash.head = head;
    lodash.identity = identity;
    lodash.includes = includes;
    lodash.indexOf = indexOf;
    lodash.inRange = inRange;
    lodash.invoke = invoke;
    lodash.isArguments = isArguments;
    lodash.isArray = isArray;
    lodash.isArrayLike = isArrayLike;
    lodash.isArrayLikeObject = isArrayLikeObject;
    lodash.isBoolean = isBoolean;
    lodash.isDate = isDate;
    lodash.isElement = isElement;
    lodash.isEmpty = isEmpty;
    lodash.isEqual = isEqual;
    lodash.isEqualWith = isEqualWith;
    lodash.isError = isError;
    lodash.isFinite = isFinite;
    lodash.isFunction = isFunction;
    lodash.isInteger = isInteger;
    lodash.isLength = isLength;
    lodash.isMatch = isMatch;
    lodash.isMatchWith = isMatchWith;
    lodash.isNaN = isNaN;
    lodash.isNative = isNative;
    lodash.isNil = isNil;
    lodash.isNull = isNull;
    lodash.isNumber = isNumber;
    lodash.isObject = isObject;
    lodash.isObjectLike = isObjectLike;
    lodash.isPlainObject = isPlainObject;
    lodash.isRegExp = isRegExp;
    lodash.isSafeInteger = isSafeInteger;
    lodash.isString = isString;
    lodash.isSymbol = isSymbol;
    lodash.isTypedArray = isTypedArray;
    lodash.isUndefined = isUndefined;
    lodash.join = join;
    lodash.kebabCase = kebabCase;
    lodash.last = last;
    lodash.lastIndexOf = lastIndexOf;
    lodash.lowerCase = lowerCase;
    lodash.lowerFirst = lowerFirst;
    lodash.lt = lt;
    lodash.lte = lte;
    lodash.max = max;
    lodash.maxBy = maxBy;
    lodash.mean = mean;
    lodash.min = min;
    lodash.minBy = minBy;
    lodash.noConflict = noConflict;
    lodash.noop = noop;
    lodash.now = now;
    lodash.pad = pad;
    lodash.padEnd = padEnd;
    lodash.padStart = padStart;
    lodash.parseInt = parseInt;
    lodash.random = random;
    lodash.reduce = reduce;
    lodash.reduceRight = reduceRight;
    lodash.repeat = repeat;
    lodash.replace = replace;
    lodash.result = result;
    lodash.round = round;
    lodash.runInContext = runInContext;
    lodash.sample = sample;
    lodash.size = size;
    lodash.snakeCase = snakeCase;
    lodash.some = some;
    lodash.sortedIndex = sortedIndex;
    lodash.sortedIndexBy = sortedIndexBy;
    lodash.sortedIndexOf = sortedIndexOf;
    lodash.sortedLastIndex = sortedLastIndex;
    lodash.sortedLastIndexBy = sortedLastIndexBy;
    lodash.sortedLastIndexOf = sortedLastIndexOf;
    lodash.startCase = startCase;
    lodash.startsWith = startsWith;
    lodash.subtract = subtract;
    lodash.sum = sum;
    lodash.sumBy = sumBy;
    lodash.template = template;
    lodash.times = times;
    lodash.toInteger = toInteger;
    lodash.toLength = toLength;
    lodash.toLower = toLower;
    lodash.toNumber = toNumber;
    lodash.toSafeInteger = toSafeInteger;
    lodash.toString = toString;
    lodash.toUpper = toUpper;
    lodash.trim = trim;
    lodash.trimEnd = trimEnd;
    lodash.trimStart = trimStart;
    lodash.truncate = truncate;
    lodash.unescape = unescape;
    lodash.uniqueId = uniqueId;
    lodash.upperCase = upperCase;
    lodash.upperFirst = upperFirst;

    // Add aliases.
    lodash.first = head;

    mixin(lodash, (function() {
      var source = {};
      baseForOwn(lodash, function(func, methodName) {
        if (!hasOwnProperty.call(lodash.prototype, methodName)) {
          source[methodName] = func;
        }
      });
      return source;
    }()), { 'chain': false });

    /*------------------------------------------------------------------------*/

    /**
     * The semantic version number.
     *
     * @static
     * @memberOf _
     * @type string
     */
    lodash.VERSION = VERSION;

    // Assign default placeholders.
    arrayEach(['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'], function(methodName) {
      lodash[methodName].placeholder = lodash;
    });

    // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.
    arrayEach(['drop', 'take'], function(methodName, index) {
      LazyWrapper.prototype[methodName] = function(n) {
        var filtered = this.__filtered__;
        if (filtered && !index) {
          return new LazyWrapper(this);
        }
        n = n === undefined ? 1 : nativeMax(toInteger(n), 0);

        var result = this.clone();
        if (filtered) {
          result.__takeCount__ = nativeMin(n, result.__takeCount__);
        } else {
          result.__views__.push({ 'size': nativeMin(n, MAX_ARRAY_LENGTH), 'type': methodName + (result.__dir__ < 0 ? 'Right' : '') });
        }
        return result;
      };

      LazyWrapper.prototype[methodName + 'Right'] = function(n) {
        return this.reverse()[methodName](n).reverse();
      };
    });

    // Add `LazyWrapper` methods that accept an `iteratee` value.
    arrayEach(['filter', 'map', 'takeWhile'], function(methodName, index) {
      var type = index + 1,
          isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;

      LazyWrapper.prototype[methodName] = function(iteratee) {
        var result = this.clone();
        result.__iteratees__.push({ 'iteratee': getIteratee(iteratee, 3), 'type': type });
        result.__filtered__ = result.__filtered__ || isFilter;
        return result;
      };
    });

    // Add `LazyWrapper` methods for `_.head` and `_.last`.
    arrayEach(['head', 'last'], function(methodName, index) {
      var takeName = 'take' + (index ? 'Right' : '');

      LazyWrapper.prototype[methodName] = function() {
        return this[takeName](1).value()[0];
      };
    });

    // Add `LazyWrapper` methods for `_.initial` and `_.tail`.
    arrayEach(['initial', 'tail'], function(methodName, index) {
      var dropName = 'drop' + (index ? '' : 'Right');

      LazyWrapper.prototype[methodName] = function() {
        return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
      };
    });

    LazyWrapper.prototype.compact = function() {
      return this.filter(identity);
    };

    LazyWrapper.prototype.find = function(predicate) {
      return this.filter(predicate).head();
    };

    LazyWrapper.prototype.findLast = function(predicate) {
      return this.reverse().find(predicate);
    };

    LazyWrapper.prototype.invokeMap = rest(function(path, args) {
      if (typeof path == 'function') {
        return new LazyWrapper(this);
      }
      return this.map(function(value) {
        return baseInvoke(value, path, args);
      });
    });

    LazyWrapper.prototype.reject = function(predicate) {
      predicate = getIteratee(predicate, 3);
      return this.filter(function(value) {
        return !predicate(value);
      });
    };

    LazyWrapper.prototype.slice = function(start, end) {
      start = toInteger(start);

      var result = this;
      if (result.__filtered__ && (start > 0 || end < 0)) {
        return new LazyWrapper(result);
      }
      if (start < 0) {
        result = result.takeRight(-start);
      } else if (start) {
        result = result.drop(start);
      }
      if (end !== undefined) {
        end = toInteger(end);
        result = end < 0 ? result.dropRight(-end) : result.take(end - start);
      }
      return result;
    };

    LazyWrapper.prototype.takeRightWhile = function(predicate) {
      return this.reverse().takeWhile(predicate).reverse();
    };

    LazyWrapper.prototype.toArray = function() {
      return this.take(MAX_ARRAY_LENGTH);
    };

    // Add `LazyWrapper` methods to `lodash.prototype`.
    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
      var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName),
          isTaker = /^(?:head|last)$/.test(methodName),
          lodashFunc = lodash[isTaker ? ('take' + (methodName == 'last' ? 'Right' : '')) : methodName],
          retUnwrapped = isTaker || /^find/.test(methodName);

      if (!lodashFunc) {
        return;
      }
      lodash.prototype[methodName] = function() {
        var value = this.__wrapped__,
            args = isTaker ? [1] : arguments,
            isLazy = value instanceof LazyWrapper,
            iteratee = args[0],
            useLazy = isLazy || isArray(value);

        var interceptor = function(value) {
          var result = lodashFunc.apply(lodash, arrayPush([value], args));
          return (isTaker && chainAll) ? result[0] : result;
        };

        if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {
          // Avoid lazy use if the iteratee has a "length" value other than `1`.
          isLazy = useLazy = false;
        }
        var chainAll = this.__chain__,
            isHybrid = !!this.__actions__.length,
            isUnwrapped = retUnwrapped && !chainAll,
            onlyLazy = isLazy && !isHybrid;

        if (!retUnwrapped && useLazy) {
          value = onlyLazy ? value : new LazyWrapper(this);
          var result = func.apply(value, args);
          result.__actions__.push({ 'func': thru, 'args': [interceptor], 'thisArg': undefined });
          return new LodashWrapper(result, chainAll);
        }
        if (isUnwrapped && onlyLazy) {
          return func.apply(this, args);
        }
        result = this.thru(interceptor);
        return isUnwrapped ? (isTaker ? result.value()[0] : result.value()) : result;
      };
    });

    // Add `Array` and `String` methods to `lodash.prototype`.
    arrayEach(['pop', 'push', 'shift', 'sort', 'splice', 'unshift'], function(methodName) {
      var func = arrayProto[methodName],
          chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',
          retUnwrapped = /^(?:pop|shift)$/.test(methodName);

      lodash.prototype[methodName] = function() {
        var args = arguments;
        if (retUnwrapped && !this.__chain__) {
          return func.apply(this.value(), args);
        }
        return this[chainName](function(value) {
          return func.apply(value, args);
        });
      };
    });

    // Map minified function names to their real names.
    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
      var lodashFunc = lodash[methodName];
      if (lodashFunc) {
        var key = (lodashFunc.name + ''),
            names = realNames[key] || (realNames[key] = []);

        names.push({ 'name': methodName, 'func': lodashFunc });
      }
    });

    realNames[createHybridWrapper(undefined, BIND_KEY_FLAG).name] = [{ 'name': 'wrapper', 'func': undefined }];

    // Add functions to the lazy wrapper.
    LazyWrapper.prototype.clone = lazyClone;
    LazyWrapper.prototype.reverse = lazyReverse;
    LazyWrapper.prototype.value = lazyValue;

    // Add chaining functions to the `lodash` wrapper.
    lodash.prototype.at = wrapperAt;
    lodash.prototype.chain = wrapperChain;
    lodash.prototype.commit = wrapperCommit;
    lodash.prototype.flatMap = wrapperFlatMap;
    lodash.prototype.next = wrapperNext;
    lodash.prototype.plant = wrapperPlant;
    lodash.prototype.reverse = wrapperReverse;
    lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;

    if (iteratorSymbol) {
      lodash.prototype[iteratorSymbol] = wrapperToIterator;
    }
    return lodash;
  }

  /*--------------------------------------------------------------------------*/

  // Export lodash.
  var _ = runInContext();

  // Expose lodash on the free variable `window` or `self` when available. This
  // prevents errors in cases where lodash is loaded by a script tag in the presence
  // of an AMD loader. See http://requirejs.org/docs/errors.html#mismatch for more details.
  (freeWindow || freeSelf || {})._ = _;

  // Some AMD build optimizers like r.js check for condition patterns like the following:
  if (typeof define == 'function' && typeof define.amd == 'object' && define.amd) {
    // Define as an anonymous module so, through path mapping, it can be
    // referenced as the "underscore" module.
    define(function() {
      return _;
    });
  }
  // Check for `exports` after `define` in case a build optimizer adds an `exports` object.
  else if (freeExports && freeModule) {
    // Export for Node.js.
    if (moduleExports) {
      (freeModule.exports = _)._ = _;
    }
    // Export for CommonJS support.
    freeExports._ = _;
  }
  else {
    // Export to the global object.
    root._ = _;
  }
}.call(this));

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],243:[function(require,module,exports){
// Copyright 2012 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

module.exports = function FormatStackTrace(error, frames) {
  var lines = [];
  lines.push(error.toString());
  for (var i = 0; i < frames.length; i++) {
    var frame = frames[i];
    var line;
    try {
      line = frame.toString();
    } catch (e) {
      try {
        line = "<error: " + e + ">";
      } catch (ee) {
        // Any code that reaches this point is seriously nasty!
        line = "<error>";
      }
    }
    lines.push("    at " + line);
  }
  return lines.join("\n");
};

},{}],244:[function(require,module,exports){
(function (global){
// If a another copy (same version or not) of stack-chain exists it will result
// in wrong stack traces (most likely dublicate callSites).
if (global._stackChain) {
  // In case the version match, we can simply return the first initialized copy
  if (global._stackChain.version === require('./package.json').version) {
    module.exports = global._stackChain;
  }
  // The version don't match, this is really bad. Lets just throw
  else {
    throw new Error('Conflicting version of stack-chain found');
  }
}
// Yay, no other stack-chain copy exists, yet :/
else {
  module.exports = global._stackChain = require('./stack-chain');
}

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./package.json":245,"./stack-chain":246}],245:[function(require,module,exports){
module.exports={
  "name": "stack-chain",
  "description": "API for combining call site modifiers",
  "version": "1.3.5",
  "author": {
    "name": "Andreas Madsen",
    "email": "amwebdk@gmail.com"
  },
  "scripts": {
    "test": "tap ./test/simple"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/AndreasMadsen/stack-chain.git"
  },
  "keywords": [
    "stack",
    "chain",
    "trace",
    "call site",
    "concat",
    "format"
  ],
  "devDependencies": {
    "tap": "2.x.x",
    "uglify-js": "2.5.x"
  },
  "license": "MIT",
  "gitHead": "e51a7b2e0f0d1c79b1c4c7962dc53abbeef48e9e",
  "bugs": {
    "url": "https://github.com/AndreasMadsen/stack-chain/issues"
  },
  "homepage": "https://github.com/AndreasMadsen/stack-chain#readme",
  "_id": "stack-chain@1.3.5",
  "_shasum": "02a64a5fe92250d41984d55961a3b2d466a14d8a",
  "_from": "stack-chain@>=1.3.5 <2.0.0",
  "_npmVersion": "3.3.6",
  "_nodeVersion": "5.0.0",
  "_npmUser": {
    "name": "andreasmadsen",
    "email": "amwebdk@gmail.com"
  },
  "maintainers": [
    {
      "name": "andreasmadsen",
      "email": "amwebdk@gmail.com"
    }
  ],
  "dist": {
    "shasum": "02a64a5fe92250d41984d55961a3b2d466a14d8a",
    "tarball": "http://registry.npmjs.org/stack-chain/-/stack-chain-1.3.5.tgz"
  },
  "directories": {},
  "_resolved": "https://registry.npmjs.org/stack-chain/-/stack-chain-1.3.5.tgz",
  "readme": "ERROR: No README data found!"
}

},{}],246:[function(require,module,exports){

// use a already existing formater or fallback to the default v8 formater
var defaultFormater = require('./format.js');

// public define API
function stackChain() {
  this.extend = new TraceModifier();
  this.filter = new TraceModifier();
  this.format = new StackFormater();
  this.version = require('./package.json').version;
}

var SHORTCUT_CALLSITE = false;
stackChain.prototype.callSite = function collectCallSites(options) {
  if (!options) options = {};

  // Get CallSites
  SHORTCUT_CALLSITE = true;
  var obj = {};
  Error.captureStackTrace(obj, collectCallSites);
  var callSites = obj.stack;
  SHORTCUT_CALLSITE = false;

  // Slice
  callSites = callSites.slice(options.slice || 0);

  // Modify CallSites
  if (options.extend) callSites = this.extend._modify(obj, callSites);
  if (options.filter) callSites = this.filter._modify(obj, callSites);

  // Done
  return callSites;
};

var chain = new stackChain();

function TraceModifier() {
  this._modifiers = [];
}

TraceModifier.prototype._modify = function (error, frames) {
  for (var i = 0, l = this._modifiers.length; i < l; i++) {
    frames = this._modifiers[i](error, frames);
  }

  return frames;
};

TraceModifier.prototype.attach = function (modifier) {
  this._modifiers.push(modifier);
};

TraceModifier.prototype.deattach = function (modifier) {
  var index = this._modifiers.indexOf(modifier);

  if (index === -1) return false;

  this._modifiers.splice(index, 1);
  return true;
};

function StackFormater() {
  this._formater = defaultFormater;
  this._previous = undefined;
}

StackFormater.prototype.replace = function (formater) {
  if (formater) {
    this._formater = formater;
  } else {
    this.restore();
  }
};

StackFormater.prototype.restore  = function () {
  this._formater = defaultFormater;
};

StackFormater.prototype._backup = function () {
  if (this._formater === defaultFormater) {
    this._previous = undefined;
  } else {
    this._previous = this._formater;
  }
};

StackFormater.prototype._roolback = function () {
  this.replace(this._previous);
  this._previous = undefined;
};


//
// Set Error.prepareStackTrace thus allowing stack-chain
// to take control of the Error().stack formating.
//

// If there already is a custom stack formater, then set
// that as the stack-chain formater.
if (Error.prepareStackTrace) {
    chain.format.replace(Error.prepareStackTrace);
}

function prepareStackTrace(error, originalFrames) {
  if (SHORTCUT_CALLSITE) return originalFrames;

  // Make a loss copy of originalFrames
  var frames = originalFrames.concat();

  // extend frames
  frames = chain.extend._modify(error, frames);

  // filter frames
  frames = chain.filter._modify(error, frames);

  // reduce frames to match Error.stackTraceLimit
  frames = frames.slice(0, Error.stackTraceLimit);

  // Set the callSite property
  // But only if it hasn't been explicitly set, otherwise
  // error.stack would have unintended side effects. Check also for
  // non-extensible/sealed objects, such as those from Google's Closure Library
  if (Object.isExtensible(error) &&
      (Object.getOwnPropertyDescriptor(error, "callSite") === undefined)) {
    error.callSite = {
      original: originalFrames,
      mutated: frames
    };
  }

  // format frames
  return chain.format._formater(error, frames);
}

// Replace the v8 stack trace creator
Object.defineProperty(Error, 'prepareStackTrace', {
  'get': function () {
    return prepareStackTrace;
  },

  'set': function (formater) {
    // If formater is prepareStackTrace it means that someone ran
    // var old = Error.prepareStackTrace;
    // Error.prepareStackTrace = custom
    // new Error().stack
    // Error.prepareStackTrace = old;
    // The effect of this, should be that the old behaviour is restored.
    if (formater === prepareStackTrace) {
      chain.format._roolback();
    }
    // Error.prepareStackTrace was set, this means that someone is
    // trying to take control of the Error().stack format. Make
    // them belive they succeeded by setting them up as the stack-chain
    // formater.
    else {
      chain.format._backup();
      chain.format.replace(formater);
    }
  }
});

//
// Manage call site storeage
//
function callSiteGetter() {
  // calculate call site object
  this.stack;

  // return call site object
  return this.callSite;
}

Object.defineProperty(Error.prototype, 'callSite', {
  'get': callSiteGetter,

  'set': function (frames) {
    // In case callSite was set before [[getter]], just set
    // the value
    Object.defineProperty(this, 'callSite', {
        value: frames,
        writable: true,
        configurable: true
    });
  },

  configurable: true
});

module.exports = chain;

},{"./format.js":243,"./package.json":245}],247:[function(require,module,exports){
module.exports={
  "name": "cucumber",
  "description": "The official JavaScript implementation of Cucumber.",
  "keywords": [
    "testing",
    "bdd",
    "cucumber",
    "gherkin",
    "tests"
  ],
  "version": "0.9.4",
  "homepage": "http://github.com/cucumber/cucumber-js",
  "author": "Julien Biezemans <jb@jbpros.com> (http://jbpros.net)",
  "contributors": [
    "Julien Biezemans <jb@jbpros.com> (http://jbpros.net)",
    "Fernando Acorreia <fernandoacorreia@gmail.com>",
    "Paul Jensen <paulbjensen@gmail.com>",
    "Kushal Pisavadia",
    "Olivier Melcher <olivier.melcher@gmail.com>",
    "Tristan Dunn <tristanzdunn@gmail.com>",
    "Ted de Koning",
    "Renier Morales <renier@morales-rodriguez.net>",
    "Aslak Hellesøy <aslak.hellesoy@gmail.com>",
    "Aaron Garvey",
    "Omar Gonzalez <omar@almerblank.com>",
    "Chris Young <chris@chrisyoung.org>",
    "Israel Halle <isra017@gmail.com>",
    "Matteo Collina <matteo.collina@gmail.com>",
    "Niklas Närhinen <niklas@narhinen.net>",
    "Kim, Jang-hwan <janghwan@gmail.com>",
    "Michael Zedeler <michael@zedeler.dk>",
    "Tom V <tom@toc.com>",
    "David Godfrey <reactiveraven@reactiveraven.co.uk>",
    "Paul Shannon (http://devpaul.com)",
    "Simon Dean <simon@simondean.org> (http://www.simondean.org)",
    "John Wright <johngeorge.wright@gmail.com>",
    "Johny Jose <johny@playlyfe.com>",
    "Marat Dyatko <vectart@gmail.com>",
    "Tim Perry <tim.perry@softwire.com>",
    "Fedotov Daniil <hairyhum@gmail.com>",
    "unknown <jharlin@NormanDev2.telogical.com>",
    "Ben Van Treese <vantreeseba@gmail.com>",
    "Gabe Hayes <gabriel.hayes@gmail.com>",
    "Brian Clozel <brian.clozel@gmail.com>",
    "Lukas Degener <l.degener@tarent.de>",
    "Simon Lampen <simonlampen@vinsight.net>",
    "Eddie Loeffen <eddieloeffen@gmail.com>",
    "Stanley Shyiko <stanley.shyiko@gmail.com>",
    "Artur Kania <kaniartur@gmail.com>",
    "Sam Saccone <sam@samx.it>",
    "Craig Morris <craig.michael.morris@gmail.com>",
    "Gary Taylor <gary.taylor@hismessages.com>",
    "Krispin Schulz <krispin.schulz@blackbridge.com>",
    "Elwyn <elwyn@L1.co.nz>",
    "Jan-Eric Duden <jeduden@gmail.com>",
    "kostya.misura <kostya.misura@gmail.com>",
    "Julian <microweb10@gmail.com>",
    "nebehr <thorgeir@tut.by>",
    "Jesse Harlin <harlinjesse@gmail.com>",
    "Sonny Piers <sonny@fastmail.net>",
    "Will Farrell <will@mojotech.com>",
    "Kevin Kirsche <Kev.Kirsche+GitHub@gmail.com>",
    "chrismilleruk <chrismilleruk@gmail.com>",
    "Mateusz Derks <mateusz.derks@schibsted.pl>",
    "Mark Amery <markamery@btinternet.com>",
    "Artem Repko <roby-boby@ukr.net>",
    "zs-zs <zsolt.zsigmondi@hotmail.com>",
    "Dale Gardner <dalegardner@live.com>",
    "Charles Rudolph <charles.rudolph@originate.com>",
    "Karthik Viswanath <karthik.viswanath-contractor@adp.com>",
    "Marcel Hoyer <mhoyer@pixelplastic.de>",
    "Artem Bronitsky <quex@yandex.ru>",
    "Karine Pires <karine.pires@alterway.fr>",
    "Rick Lee-Morlang <rick@lee-morlang.com>",
    "Noah Davis <noahd1@yahoo.com>",
    "Miika Hänninen <miika.hanninen@gmail.com>",
    "Kevin Goslar <kevin.goslar@gmail.com>",
    "John Krull <astrom.flux@gmail.com>",
    "Maxim Koretskiy <mr.green.tv@gmail.com>"
  ],
  "repository": {
    "type": "git",
    "url": "git://github.com/cucumber/cucumber-js.git"
  },
  "bugs": {
    "email": "cukes@googlegroups.com",
    "url": "http://github.com/cucumber/cucumber-js/issues"
  },
  "directories": {
    "lib": "./lib"
  },
  "main": "./lib/cucumber",
  "engines": {
    "node": ">=0.10"
  },
  "dependencies": {
    "callsite": "^1.0.0",
    "camel-case": "^1.2.0",
    "cli-table": "^0.3.1",
    "colors": "^1.1.2",
    "commander": "^2.9.0",
    "cucumber-html": "^0.2.3",
    "duration": "^0.2.0",
    "gherkin": "^2.12.2",
    "glob": "^6.0.4",
    "lodash": "^4.0.0",
    "stack-chain": "^1.3.5"
  },
  "devDependencies": {
    "async": "^1.5.0",
    "browserify": "^11.1.0",
    "coffee-script": "^1.10.0",
    "connect": "^3.4.0",
    "exorcist": "^0.4.0",
    "fs-extra": "^0.26.0",
    "jasmine": "^2.3.2",
    "jquery": "^2.1.4",
    "jshint": "^2.9.1",
    "pogo": "^0.10.0",
    "rimraf": "^2.4.3",
    "serve-static": "^1.10.0",
    "through": "^2.3.8",
    "tmp": "0.0.28",
    "uglifyify": "^3.0.1"
  },
  "scripts": {
    "feature-test": "./bin/cucumber.js -p build",
    "lint": "jshint bin features lib scripts spec",
    "test": "npm run lint && npm run unit-test && npm run feature-test",
    "unit-test": "jasmine",
    "prebuild-release": "npm install",
    "build-release": "node ./scripts/release.js"
  },
  "bin": {
    "cucumber.js": "./bin/cucumber.js",
    "cucumber-js": "./bin/cucumber.js",
    "cucumberjs": "./bin/cucumber.js"
  },
  "license": "MIT",
  "files": [
    "bin/",
    "lib/",
    "release/"
  ]
}

},{}],"cucumber":[function(require,module,exports){
(function (global){
global.CucumberHTML = require('cucumber-html');
module.exports = require('../../lib/cucumber');

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"../../lib/cucumber":1,"cucumber-html":150}]},{},[])("cucumber")
});
//# sourceMappingURL=cucumber.js.map
